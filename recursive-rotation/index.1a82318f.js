!function(){var n={};!function(n){function e(n,e,r){return r.a=n,r.f=e,r}function r(n){return e(2,n,(function(e){return function(r){return n(e,r)}}))}function t(n){return e(3,n,(function(e){return function(r){return function(t){return n(e,r,t)}}}))}function o(n){return e(4,n,(function(e){return function(r){return function(t){return function(o){return n(e,r,t,o)}}}}))}function a(n){return e(5,n,(function(e){return function(r){return function(t){return function(o){return function(a){return n(e,r,t,o,a)}}}}}))}function i(n){return e(6,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return n(e,r,t,o,a,i)}}}}}}))}function c(n){return e(7,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return n(e,r,t,o,a,i,c)}}}}}}}))}function l(n){return e(8,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return n(e,r,t,o,a,i,c,l)}}}}}}}}))}function u(n,e,r){return 2===n.a?n.f(e,r):n(e)(r)}function f(n,e,r,t){return 3===n.a?n.f(e,r,t):n(e)(r)(t)}function s(n,e,r,t,o){return 4===n.a?n.f(e,r,t,o):n(e)(r)(t)(o)}function d(n,e,r,t,o,a){return 5===n.a?n.f(e,r,t,o,a):n(e)(r)(t)(o)(a)}function m(n,e,r,t,o,a,i){return 6===n.a?n.f(e,r,t,o,a,i):n(e)(r)(t)(o)(a)(i)}function v(n,e,r,t,o,a,i,c){return 7===n.a?n.f(e,r,t,o,a,i,c):n(e)(r)(t)(o)(a)(i)(c)}function b(n,e,r,t,o,a,i,c,l){return 8===n.a?n.f(e,r,t,o,a,i,c,l):n(e)(r)(t)(o)(a)(i)(c)(l)}var p=t((function(n,e,r){for(var t=Array(n),o=0;n>o;o++)t[o]=r(e+o);return t})),g=r((function(n,e){for(var r=Array(n),t=0;n>t&&e.b;t++)r[t]=e.a,e=e.b;return r.length=t,L(r,e)})),h=r((function(n,e){return e[n]})),x=t((function(n,e,r){for(var t=r.length-1;t>=0;t--)e=u(n,r[t],e);return e}));function C(n){throw Error("https://github.com/elm/core/blob/1.0.0/hints/"+n+".md")}function P(n,e){for(var r,t=[],o=M(n,e,0,t);o&&(r=t.pop());o=M(r.a,r.b,0,t));return o}function M(n,e,r,t){if(n===e)return!0;if("object"!=typeof n||null===n||null===e)return"function"==typeof n&&C(5),!1;if(r>100)return t.push(L(n,e)),!0;for(var o in 0>n.$&&(n=Dr(n),e=Dr(e)),n)if(!M(n[o],e[o],r+1,t))return!1;return!0}function T(n,e,r){if("object"!=typeof n)return n===e?0:e>n?-1:1;if(void 0===n.$)return(r=T(n.a,e.a))||(r=T(n.b,e.b))?r:T(n.c,e.c);for(;n.b&&e.b&&!(r=T(n.a,e.a));n=n.b,e=e.b);return r||(n.b?1:e.b?-1:0)}var y=r((function(n,e){var r=T(n,e);return 0>r?Nr:r?$r:Sr}));function L(n,e){return{a:n,b:e}}function w(n,e,r){return{a:n,b:e,c:r}}function D(n,e){var r={};for(var t in n)r[t]=n[t];for(var t in e)r[t]=e[t];return r}function S(n,e){if("string"==typeof n)return n+e;if(!n.b)return e;var r=N(n.a,e);n=n.b;for(var t=r;n.b;n=n.b)t=t.b=N(n.a,e);return r}var $={$:0};function N(n,e){return{$:1,a:n,b:e}}var z=r(N);function _(n){for(var e=$,r=n.length;r--;)e=N(n[r],e);return e}function A(n){for(var e=[];n.b;n=n.b)e.push(n.a);return e}var R=t((function(n,e,r){for(var t=[];e.b&&r.b;e=e.b,r=r.b)t.push(u(n,e.a,r.a));return _(t)})),F=r((function(n,e){return n*e})),V=r(Math.pow),B=r((function(n,e){var r=e%n;return 0===n?C(11):r>0&&0>n||0>r&&n>0?r+n:r})),k=Math.cos,K=Math.sin,E=Math.ceil,H=Math.floor,I=Math.round,j=Math.sqrt,W=Math.log,U=isNaN,O=r((function(n,e){return n+e})),G=t((function(n,e,r){for(var t=r.length;t--;){var o=r[t],a=r.charCodeAt(t);56320>a||a>57343||(o=r[--t]+o),e=u(n,o,e)}return e})),q=r((function(n,e){return e.split(n)})),Y=r((function(n,e){return e.join(n)})),X=t((function(n,e,r){return r.slice(n,e)})),Z=r((function(n,e){return 0===e.indexOf(n)}));function J(n){return n+""}function Q(n){return{$:2,b:n}}var nn=Q((function(n){return"number"!=typeof n?gn("an INT",n):n>-2147483647&&2147483647>n&&(0|n)===n?Fr(n):!isFinite(n)||n%1?gn("an INT",n):Fr(n)})),en=Q((function(n){return"boolean"==typeof n?Fr(n):gn("a BOOL",n)})),rn=Q((function(n){return"number"==typeof n?Fr(n):gn("a FLOAT",n)})),tn=(Q((function(n){return Fr(n)})),Q((function(n){return"string"==typeof n?Fr(n):n instanceof String?Fr(n+""):gn("a STRING",n)}))),on=r((function(n,e){return{$:6,d:n,b:e}}));function an(n,e){return{$:9,f:n,g:e}}var cn=r((function(n,e){return{$:10,b:e,h:n}})),ln=r((function(n,e){return an(n,[e])})),un=t((function(n,e,r){return an(n,[e,r])})),fn=o((function(n,e,r,t){return an(n,[e,r,t])})),sn=r((function(n,e){try{return mn(n,JSON.parse(e))}catch(n){return zr(u(_r,"This is not valid JSON! "+n.message,e))}})),dn=r((function(n,e){return mn(n,e)}));function mn(n,e){switch(n.$){case 2:return n.b(e);case 5:return null===e?Fr(n.c):gn("null",e);case 3:return bn(e)?vn(n.b,e,_):gn("a LIST",e);case 4:return bn(e)?vn(n.b,e,pn):gn("an ARRAY",e);case 6:var r=n.d;if("object"!=typeof e||null===e||!(r in e))return gn("an OBJECT with a field named `"+r+"`",e);var t=mn(n.b,e[r]);return ht(t)?t:zr(u(Ar,r,t.a));case 7:var o=n.e;return bn(e)?e.length>o?(t=mn(n.b,e[o]),ht(t)?t:zr(u(Rr,o,t.a))):gn("a LONGER array. Need index "+o+" but only see "+e.length+" entries",e):gn("an ARRAY",e);case 8:if("object"!=typeof e||null===e||bn(e))return gn("an OBJECT",e);var a=$;for(var i in e)if(e.hasOwnProperty(i)){if(t=mn(n.b,e[i]),!ht(t))return zr(u(Ar,i,t.a));a=N(L(i,t.a),a)}return Fr(Xr(a));case 9:for(var c=n.f,l=n.g,f=0;l.length>f;f++){if(t=mn(l[f],e),!ht(t))return t;c=c(t.a)}return Fr(c);case 10:return t=mn(n.b,e),ht(t)?mn(n.h(t.a),e):t;case 11:for(var s=$,d=n.g;d.b;d=d.b){if(t=mn(d.a,e),ht(t))return t;s=N(t.a,s)}return zr(Vr(Xr(s)));case 1:return zr(u(_r,n.a,e));case 0:return Fr(n.a)}}function vn(n,e,r){for(var t=e.length,o=Array(t),a=0;t>a;a++){var i=mn(n,e[a]);if(!ht(i))return zr(u(Rr,a,i.a));o[a]=i.a}return Fr(r(o))}function bn(n){return Array.isArray(n)||"undefined"!=typeof FileList&&n instanceof FileList}function pn(n){return u(gt,n.length,(function(e){return n[e]}))}function gn(n,e){return zr(u(_r,"Expecting "+n,e))}function hn(n,e){if(n===e)return!0;if(n.$!==e.$)return!1;switch(n.$){case 0:case 1:return n.a===e.a;case 2:return n.b===e.b;case 5:return n.c===e.c;case 3:case 4:case 8:return hn(n.b,e.b);case 6:return n.d===e.d&&hn(n.b,e.b);case 7:return n.e===e.e&&hn(n.b,e.b);case 9:return n.f===e.f&&xn(n.g,e.g);case 10:return n.h===e.h&&hn(n.b,e.b);case 11:return xn(n.g,e.g)}}function xn(n,e){var r=n.length;if(r!==e.length)return!1;for(var t=0;r>t;t++)if(!hn(n[t],e[t]))return!1;return!0}var Cn=r((function(n,e){return JSON.stringify(e,null,n)+""}));function Pn(n){return n}var Mn=t((function(n,e,r){return r[n]=e,r}));function Tn(n){return{$:0,a:n}}function yn(n){return{$:2,b:n,c:null}}var Ln=r((function(n,e){return{$:3,b:n,d:e}})),wn=0;function Dn(n){var e={$:0,e:wn++,f:n,g:null,h:[]};return An(e),e}function Sn(n){return yn((function(e){e(Tn(Dn(n)))}))}function $n(n,e){n.h.push(e),An(n)}var Nn=r((function(n,e){return yn((function(r){$n(n,e),r(Tn(0))}))})),zn=!1,_n=[];function An(n){if(_n.push(n),!zn){for(zn=!0;n=_n.shift();)Rn(n);zn=!1}}function Rn(n){for(;n.f;){var e=n.f.$;if(0===e||1===e){for(;n.g&&n.g.$!==e;)n.g=n.g.i;if(!n.g)return;n.f=n.g.b(n.f.a),n.g=n.g.i}else{if(2===e)return void(n.f.c=n.f.b((function(e){n.f=e,An(n)})));if(5===e){if(0===n.h.length)return;n.f=n.f.b(n.h.shift())}else n.g={$:3===e?0:1,b:n.f.b,i:n.g},n.f=n.f.d}}}var Fn={};function Vn(n,e,r,t,o){return{b:n,c:e,d:r,e:t,f:o}}function Bn(n,e){var r={g:e,h:void 0},t=n.c,o=n.d,a=n.e,i=n.f;return r.h=Dn(u(Ln,(function n(e){return u(Ln,n,{$:5,b:function(n){var c=n.a;return 0===n.$?f(o,r,c,e):a&&i?s(t,r,c.i,c.j,e):f(t,r,a?c.i:c.j,e)}})}),n.b))}var kn=r((function(n,e){return yn((function(r){n.g(e),r(Tn(0))}))})),Kn=r((function(n,e){return u(Nn,n.h,{$:0,a:e})}));function En(n){return function(e){return{$:1,k:n,l:e}}}function Hn(n){return{$:2,m:n}}var In=r((function(n,e){return{$:3,n:n,o:e}})),jn=[],Wn=!1;function Un(n,e,r){if(jn.push({p:n,q:e,r:r}),!Wn){Wn=!0;for(var t;t=jn.shift();)On(t.p,t.q,t.r);Wn=!1}}function On(n,e,r){var t={};for(var o in Gn(!0,e,t,null),Gn(!1,r,t,null),n)$n(n[o],{$:"fx",a:t[o]||{i:$,j:$}})}function Gn(n,e,r,t){switch(e.$){case 1:var o=e.k,a=function(n,e,r,t){return u(n?Fn[e].e:Fn[e].f,(function(n){for(var e=r;e;e=e.t)n=e.s(n);return n}),t)}(n,o,t,e.l);return void(r[o]=function(n,e,r){return r=r||{i:$,j:$},n?r.i=N(e,r.i):r.j=N(e,r.j),r}(n,a,r[o]));case 2:for(var i=e.m;i.b;i=i.b)Gn(n,i.a,r,t);return;case 3:return void Gn(n,e.o,r,{s:e.n,t:t})}}function qn(n,e){return function(n){Fn[n]&&C(3)}(n),Fn[n]={f:Yn,u:e,a:Xn},En(n)}var Yn=r((function(n,e){return function(r){return n(e(r))}}));function Xn(n,e){var r=$,o=Fn[n].u,a=Tn(null);return Fn[n].b=a,Fn[n].c=t((function(n,e){return r=e,a})),{send:function(n){var t=u(dn,o,n);ht(t)||C(4);for(var a=t.a,i=r;i.b;i=i.b)e(i.a(a))}}}var Zn="undefined"!=typeof document?document:{};function Jn(n,e){n.appendChild(e)}function Qn(n){return{$:0,a:n}}var ne,ee=r((function(n,e){return r((function(r,t){for(var o=[],a=0;t.b;t=t.b){var i=t.a;a+=i.b||0,o.push(i)}return a+=o.length,{$:1,c:e,d:le(r),e:o,f:n,b:a}}))}))(void 0),re=r((function(n,e){return r((function(r,t){for(var o=[],a=0;t.b;t=t.b){var i=t.a;a+=i.b.b||0,o.push(i)}return a+=o.length,{$:2,c:e,d:le(r),e:o,f:n,b:a}}))}))(void 0),te=r((function(n,e){return{$:4,j:n,k:e,b:1+(e.b||0)}})),oe=r((function(n,e){return{$:"a0",n:n,o:e}})),ae=r((function(n,e){return{$:"a1",n:n,o:e}})),ie=r((function(n,e){return{$:"a2",n:n,o:e}})),ce=r((function(n,e){return{$:"a3",n:n,o:e}}));function le(n){for(var e={};n.b;n=n.b){var r=n.a,t=r.$,o=r.n,a=r.o;if("a2"!==t){var i=e[t]||(e[t]={});"a3"===t&&"class"===o?ue(i,o,a):i[o]=a}else"className"===o?ue(e,o,a):e[o]=a}return e}function ue(n,e,r){var t=n[e];n[e]=t?t+" "+r:r}function fe(n,e){var r=n.$;if(5===r)return fe(n.k||(n.k=n.m()),e);if(0===r)return Zn.createTextNode(n.a);if(4===r){for(var t=n.k,o=n.j;4===t.$;)"object"!=typeof o?o=[o,t.j]:o.push(t.j),t=t.k;var a={j:o,p:e};return(i=fe(t,a)).elm_event_node_ref=a,i}if(3===r)return se(i=n.h(n.g),e,n.d),i;var i=n.f?Zn.createElementNS(n.f,n.c):Zn.createElement(n.c);se(i,e,n.d);for(var c=n.e,l=0;c.length>l;l++)Jn(i,fe(1===r?c[l]:c[l].b,e));return i}function se(n,e,r){for(var t in r){var o=r[t];"a1"===t?de(n,o):"a0"===t?be(n,e,o):"a3"===t?me(n,o):"a4"===t?ve(n,o):("value"!==t&&"checked"!==t||n[t]!==o)&&(n[t]=o)}}function de(n,e){var r=n.style;for(var t in e)r[t]=e[t]}function me(n,e){for(var r in e){var t=e[r];void 0!==t?n.setAttribute(r,t):n.removeAttribute(r)}}function ve(n,e){for(var r in e){var t=e[r],o=t.f,a=t.o;void 0!==a?n.setAttributeNS(o,r,a):n.removeAttributeNS(o,r)}}function be(n,e,r){var t=n.elmFs||(n.elmFs={});for(var o in r){var a=r[o],i=t[o];if(a){if(i){if(i.q.$===a.$){i.q=a;continue}n.removeEventListener(o,i)}i=pe(e,a),n.addEventListener(o,i,ne&&{passive:2>Lt(a)}),t[o]=i}else n.removeEventListener(o,i),t[o]=void 0}}try{window.addEventListener("t",null,Object.defineProperty({},"passive",{get:function(){ne=!0}}))}catch(n){}function pe(n,e){function r(e){var t=r.q,o=mn(t.a,e);if(ht(o)){for(var a,i=Lt(t),c=o.a,l=i?3>i?c.a:c.as:c,u=1==i?c.b:3==i&&c.c3,f=(u&&e.stopPropagation(),(2==i?c.b:3==i&&c.cT)&&e.preventDefault(),n);a=f.j;){if("function"==typeof a)l=a(l);else for(var s=a.length;s--;)l=a[s](l);f=f.p}f(l,u)}}return r.q=e,r}function ge(n,e){return n.$==e.$&&hn(n.a,e.a)}function he(n,e,r,t){var o={$:e,r:r,s:t,t:void 0,u:void 0};return n.push(o),o}function xe(n,e,r,t){if(n!==e){var o=n.$,a=e.$;if(o!==a){if(1!==o||2!==a)return void he(r,0,t,e);e=function(n){for(var e=n.e,r=e.length,t=Array(r),o=0;r>o;o++)t[o]=e[o].b;return{$:1,c:n.c,d:n.d,e:t,f:n.f,b:n.b}}(e),a=1}switch(a){case 5:for(var i=n.l,c=e.l,l=i.length,u=l===c.length;u&&l--;)u=i[l]===c[l];if(u)return void(e.k=n.k);e.k=e.m();var f=[];return xe(n.k,e.k,f,0),void(f.length>0&&he(r,1,t,f));case 4:for(var s=n.j,d=e.j,m=!1,v=n.k;4===v.$;)m=!0,"object"!=typeof s?s=[s,v.j]:s.push(v.j),v=v.k;for(var b=e.k;4===b.$;)m=!0,"object"!=typeof d?d=[d,b.j]:d.push(b.j),b=b.k;return m&&s.length!==d.length?void he(r,0,t,e):((m?function(n,e){for(var r=0;n.length>r;r++)if(n[r]!==e[r])return!1;return!0}(s,d):s===d)||he(r,2,t,d),void xe(v,b,r,t+1));case 0:return void(n.a!==e.a&&he(r,3,t,e.a));case 1:return void Ce(n,e,r,t,Me);case 2:return void Ce(n,e,r,t,Te);case 3:if(n.h!==e.h)return void he(r,0,t,e);var p=Pe(n.d,e.d);p&&he(r,4,t,p);var g=e.i(n.g,e.g);return void(g&&he(r,5,t,g))}}}function Ce(n,e,r,t,o){if(n.c===e.c&&n.f===e.f){var a=Pe(n.d,e.d);a&&he(r,4,t,a),o(n,e,r,t)}else he(r,0,t,e)}function Pe(n,e,r){var t;for(var o in n)if("a1"!==o&&"a0"!==o&&"a3"!==o&&"a4"!==o)if(o in e){var a=n[o],i=e[o];a===i&&"value"!==o&&"checked"!==o||"a0"===r&&ge(a,i)||((t=t||{})[o]=i)}else(t=t||{})[o]=r?"a1"===r?"":"a0"===r||"a3"===r?void 0:{f:n[o].f,o:void 0}:"string"==typeof n[o]?"":null;else{var c=Pe(n[o],e[o]||{},o);c&&((t=t||{})[o]=c)}for(var l in e)l in n||((t=t||{})[l]=e[l]);return t}function Me(n,e,r,t){var o=n.e,a=e.e,i=o.length,c=a.length;i>c?he(r,6,t,{v:c,i:i-c}):c>i&&he(r,7,t,{v:i,e:a});for(var l=c>i?i:c,u=0;l>u;u++){var f=o[u];xe(f,a[u],r,++t),t+=f.b||0}}function Te(n,e,r,t){for(var o=[],a={},i=[],c=n.e,l=e.e,u=c.length,f=l.length,s=0,d=0,m=t;u>s&&f>d;){var v=(w=c[s]).a,b=(D=l[d]).a,p=w.b,g=D.b,h=void 0,x=void 0;if(v!==b){var C=c[s+1],P=l[d+1];if(C){var M=C.a,T=C.b;x=b===M}if(P){var y=P.a,L=P.b;h=v===y}if(h&&x)xe(p,L,o,++m),Le(a,o,v,g,d,i),m+=p.b||0,we(a,o,v,T,++m),m+=T.b||0,s+=2,d+=2;else if(h)m++,Le(a,o,b,g,d,i),xe(p,L,o,m),m+=p.b||0,s+=1,d+=2;else if(x)we(a,o,v,p,++m),m+=p.b||0,xe(T,g,o,++m),m+=T.b||0,s+=2,d+=1;else{if(!C||M!==y)break;we(a,o,v,p,++m),Le(a,o,b,g,d,i),m+=p.b||0,xe(T,L,o,++m),m+=T.b||0,s+=2,d+=2}}else xe(p,g,o,++m),m+=p.b||0,s++,d++}for(;u>s;){var w;m++,we(a,o,(w=c[s]).a,p=w.b,m),m+=p.b||0,s++}for(;f>d;){var D,S=S||[];Le(a,o,(D=l[d]).a,D.b,void 0,S),d++}(o.length>0||i.length>0||S)&&he(r,8,t,{w:o,x:i,y:S})}var ye="_elmW6BL";function Le(n,e,r,t,o,a){var i=n[r];if(!i)return a.push({r:o,A:i={c:0,z:t,r:o,s:void 0}}),void(n[r]=i);if(1===i.c){a.push({r:o,A:i}),i.c=2;var c=[];return xe(i.z,t,c,i.r),i.r=o,void(i.s.s={w:c,A:i})}Le(n,e,r+ye,t,o,a)}function we(n,e,r,t,o){var a=n[r];if(a){if(0===a.c){a.c=2;var i=[];return xe(t,a.z,i,o),void he(e,9,o,{w:i,A:a})}we(n,e,r+ye,t,o)}else{var c=he(e,9,o,void 0);n[r]={c:1,z:t,r:o,s:c}}}function De(n,e,r,t){Se(n,e,r,0,0,e.b,t)}function Se(n,e,r,t,o,a,i){for(var c=r[t],l=c.r;l===o;){var u=c.$;if(1===u)De(n,e.k,c.s,i);else if(8===u)c.t=n,c.u=i,(f=c.s.w).length>0&&Se(n,e,f,0,o,a,i);else if(9===u){c.t=n,c.u=i;var f,s=c.s;s&&(s.A.s=n,(f=s.w).length>0&&Se(n,e,f,0,o,a,i))}else c.t=n,c.u=i;if(!(c=r[++t])||(l=c.r)>a)return t}var d=e.$;if(4===d){for(var m=e.k;4===m.$;)m=m.k;return Se(n,m,r,t,o+1,a,n.elm_event_node_ref)}for(var v=e.e,b=n.childNodes,p=0;v.length>p;p++){o++;var g=1===d?v[p]:v[p].b,h=o+(g.b||0);if(!(o>l||l>h||(c=r[t=Se(b[p],g,r,t,o,h,i)])&&(l=c.r)<=a))return t;o=h}return t}function $e(n,e){for(var r=0;e.length>r;r++){var t=e[r],o=t.t,a=Ne(o,t);o===n&&(n=a)}return n}function Ne(n,e){switch(e.$){case 0:return function(n,e,r){var t=n.parentNode,o=fe(e,r);return o.elm_event_node_ref||(o.elm_event_node_ref=n.elm_event_node_ref),t&&o!==n&&t.replaceChild(o,n),o}(n,e.s,e.u);case 4:return se(n,e.u,e.s),n;case 3:return n.replaceData(0,n.length,e.s),n;case 1:return $e(n,e.s);case 2:return n.elm_event_node_ref?n.elm_event_node_ref.j=e.s:n.elm_event_node_ref={j:e.s,p:e.u},n;case 6:for(var r=e.s,t=0;r.i>t;t++)n.removeChild(n.childNodes[r.v]);return n;case 7:for(var o=(r=e.s).e,a=n.childNodes[t=r.v];o.length>t;t++)n.insertBefore(fe(o[t],e.u),a);return n;case 9:if(!(r=e.s))return n.parentNode.removeChild(n),n;var i=r.A;return void 0!==i.r&&n.parentNode.removeChild(n),i.s=$e(n,r.w),n;case 8:return function(n,e){var r=e.s,t=function(n,e){if(n){for(var r=Zn.createDocumentFragment(),t=0;n.length>t;t++){var o=n[t].A;Jn(r,2===o.c?o.s:fe(o.z,e.u))}return r}}(r.y,e);n=$e(n,r.w);for(var o=r.x,a=0;o.length>a;a++){var i=o[a],c=i.A,l=2===c.c?c.s:fe(c.z,e.u);n.insertBefore(l,n.childNodes[i.r])}return t&&Jn(n,t),n}(n,e);case 5:return e.s(n);default:C(10)}}function ze(n){if(3===n.nodeType)return Qn(n.textContent);if(1!==n.nodeType)return Qn("");for(var e=$,r=n.attributes,t=r.length;t--;){var o=r[t];e=N(u(ce,o.name,o.value),e)}var a=n.tagName.toLowerCase(),i=$,c=n.childNodes;for(t=c.length;t--;)i=N(ze(c[t]),i);return f(ee,a,e,i)}var _e=o((function(n,e,r,t){return function(n,e,r,t,o,a){var i=u(dn,n,e?e.flags:void 0);ht(i)||C(2);var c={},l=r(i.a),f=l.a,s=a(m,f),d=function(n,e){var r;for(var t in Fn){var o=Fn[t];o.a&&((r=r||{})[t]=o.a(t,e)),n[t]=Bn(o,e)}return r}(c,m);function m(n,e){var r=u(t,n,f);s(f=r.a,e),Un(c,r.b,o(f))}return Un(c,l.b,o(f)),d?{ports:d}:{}}(e,t,n.e0,n.fx,n.fr,(function(e,r){var o=n.fz,a=t.node,i=ze(a);return function(n,e){e(n);var r=0;function t(){r=1===r?0:(Re(t),e(n),1)}return function(o,a){n=o,a?(e(n),2===r&&(r=1)):(0===r&&Re(t),r=2)}}(r,(function(n){var r=o(n),t=function(n,e){var r=[];return xe(n,e,r,0),r}(i,r);a=function(n,e,r,t){return 0===r.length?n:(De(n,e,r,t),$e(n,r))}(a,i,t,e),i=r}))}))})),Ae="undefined"!=typeof cancelAnimationFrame?cancelAnimationFrame:function(n){clearTimeout(n)},Re="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:function(n){return setTimeout(n,1e3/60)},Fe={addEventListener:function(){},removeEventListener:function(){}},Ve="undefined"!=typeof document?document:Fe,Be="undefined"!=typeof window?window:Fe,ke=t((function(n,e,r){return Sn(yn((function(){function t(n){Dn(r(n))}return n.addEventListener(e,t,ne&&{passive:!0}),function(){n.removeEventListener(e,t)}})))})),Ke=r((function(n,e){var r=mn(n,e);return ht(r)?Br(r.a):kr})),Ee=r((function(n,e){var r="g";n.e9&&(r+="m"),n.eE&&(r+="i");try{return Br(RegExp(e,r))}catch(n){return kr}})),He=t((function(n,e,r){for(var t,o=[],a=0,i=r,c=e.lastIndex,l=-1;a++<n&&(t=e.exec(i))&&l!=e.lastIndex;){for(var u=t.length-1,f=Array(u);u>0;){var d=t[u];f[--u]=d?Br(d):kr}o.push(s(mi,t[0],t.index,a,_(f))),l=e.lastIndex}return e.lastIndex=c,_(o)})),Ie=0;function je(n,e){for(;e.b;e=e.b)n(e.a)}function We(n){for(var e=0;n.b;n=n.b)e++;return e}var Ue="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:function(n){setTimeout(n,1e3/60)},Oe=a((function(n,e,r,t,o){return{$:0,a:n,b:e,c:r,d:t,e:o}})),Ge=r((function(n,e){var r=n.blend;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.BLEND),r.enabled=!0),r.a===e.a&&r.d===e.d||(n.gl.blendEquationSeparate(e.a,e.d),r.a=e.a,r.d=e.d),r.b===e.b&&r.c===e.c&&r.e===e.e&&r.f===e.f||(n.gl.blendFuncSeparate(e.b,e.c,e.e,e.f),r.b=e.b,r.c=e.c,r.e=e.e,r.f=e.f),r.g===e.g&&r.h===e.h&&r.i===e.i&&r.j===e.j||(n.gl.blendColor(e.g,e.h,e.i,e.j),r.g=e.g,r.h=e.h,r.i=e.i,r.j=e.j)})),qe=r((function(n,e){var r=n.depthTest;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.DEPTH_TEST),r.enabled=!0),r.a!==e.a&&(n.gl.depthFunc(e.a),r.a=e.a),r.b!==e.b&&(n.gl.depthMask(e.b),r.b=e.b),r.c===e.c&&r.d===e.d||(n.gl.depthRange(e.c,e.d),r.c=e.c,r.d=e.d)})),Ye=r((function(n,e){var r=n.stencilTest;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.STENCIL_TEST),r.enabled=!0),r.d===e.d&&r.a===e.a&&r.b===e.b||(n.gl.stencilFuncSeparate(n.gl.FRONT,e.d,e.a,e.b),r.d=e.d),r.e===e.e&&r.f===e.f&&r.g===e.g||(n.gl.stencilOpSeparate(n.gl.FRONT,e.e,e.f,e.g),r.e=e.e,r.f=e.f,r.g=e.g),r.c!==e.c&&(n.gl.stencilMask(e.c),r.c=e.c),r.h===e.h&&r.a===e.a&&r.b===e.b||(n.gl.stencilFuncSeparate(n.gl.BACK,e.h,e.a,e.b),r.h=e.h,r.a=e.a,r.b=e.b),r.i===e.i&&r.j===e.j&&r.k===e.k||(n.gl.stencilOpSeparate(n.gl.BACK,e.i,e.j,e.k),r.i=e.i,r.j=e.j,r.k=e.k)})),Xe=r((function(n,e){var r=n.scissor;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.SCISSOR_TEST),r.enabled=!0),r.a===e.a&&r.b===e.b&&r.c===e.c&&r.d===e.d||(n.gl.scissor(e.a,e.b,e.c,e.d),r.a=e.a,r.b=e.b,r.c=e.c,r.d=e.d)})),Ze=r((function(n,e){var r=n.colorMask;r.toggle=n.toggle,r.enabled=!0,r.a===e.a&&r.b===e.b&&r.c===e.c&&r.d===e.d||(n.gl.colorMask(e.a,e.b,e.c,e.d),r.a=e.a,r.b=e.b,r.c=e.c,r.d=e.d)})),Je=r((function(n,e){var r=n.cullFace;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.CULL_FACE),r.enabled=!0),r.a!==e.a&&(n.gl.cullFace(e.a),r.a=e.a)})),Qe=r((function(n,e){var r=n.polygonOffset;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.POLYGON_OFFSET_FILL),r.enabled=!0),r.a===e.a&&r.b===e.b||(n.gl.polygonOffset(e.a,e.b),r.a=e.a,r.b=e.b)})),nr=r((function(n,e){var r=n.sampleCoverage;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.SAMPLE_COVERAGE),r.enabled=!0),r.a===e.a&&r.b===e.b||(n.gl.sampleCoverage(e.a,e.b),r.a=e.a,r.b=e.b)})),er=function(n){n.scissor.enabled&&(n.gl.disable(n.gl.SCISSOR_TEST),n.scissor.enabled=!1)},rr=function(n){var e=n.colorMask;e.a&&e.b&&e.c&&e.d||(n.gl.colorMask(!0,!0,!0,!0),e.a=!0,e.b=!0,e.c=!0,e.d=!0)},tr=["blend","depthTest","stencilTest","scissor","colorMask","cullFace","polygonOffset","sampleCoverage","sampleAlphaToCoverage"],or=[function(n){n.blend.enabled&&(n.gl.disable(n.gl.BLEND),n.blend.enabled=!1)},function(n){n.depthTest.enabled&&(n.gl.disable(n.gl.DEPTH_TEST),n.depthTest.enabled=!1)},function(n){n.stencilTest.enabled&&(n.gl.disable(n.gl.STENCIL_TEST),n.stencilTest.enabled=!1)},er,rr,function(n){n.gl.disable(n.gl.CULL_FACE)},function(n){n.gl.disable(n.gl.POLYGON_OFFSET_FILL)},function(n){n.gl.disable(n.gl.SAMPLE_COVERAGE)},function(n){n.gl.disable(n.gl.SAMPLE_ALPHA_TO_COVERAGE)}];function ar(n,e,r){var t=n.createShader(r);return n.shaderSource(t,"#extension GL_OES_standard_derivatives : enable\n"+e),n.compileShader(t),t}function ir(n,e){switch(e){case n.FLOAT:return{size:1,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC2:return{size:2,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC3:return{size:3,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC4:return{size:4,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_MAT4:return{size:4,arraySize:4,type:Float32Array,baseType:n.FLOAT};case n.INT:return{size:1,arraySize:1,type:Int32Array,baseType:n.INT}}}function cr(n,e,r,t){for(var o=r.a.dp,a=[],i=0;o>i;i++)a.push(String.fromCharCode(97+i));var c=ir(n,e.type);if(void 0===c)throw Error("No info available for: "+e.type);var l=0,u=c.size*c.arraySize*o,f=new c.type(We(r.b)*u);je((function(n){!function(n,e,r,t,i){var c;if(1===o)for(c=0;e>c;c++)n[r++]=1===e?t[i]:t[i][c];else a.forEach((function(o){for(c=0;e>c;c++)n[r++]=1===e?t[o][i]:t[o][i][c]}))}(f,c.size*c.arraySize,l,n,t[e.name]||e.name),l+=u}),r.b);var s=n.createBuffer();return n.bindBuffer(n.ARRAY_BUFFER,s),n.bufferData(n.ARRAY_BUFFER,f,n.STATIC_DRAW),s}function lr(n,e){return n+"#"+e}var ur=r((function(n,e){var r=n.f,t=r.gl;return t?(t.viewport(0,0,t.drawingBufferWidth,t.drawingBufferHeight),r.depthTest.b||(t.depthMask(!0),r.depthTest.b=!0),r.stencilTest.c!==r.STENCIL_WRITEMASK&&(t.stencilMask(r.STENCIL_WRITEMASK),r.stencilTest.c=r.STENCIL_WRITEMASK),er(r),rr(r),t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT|t.STENCIL_BUFFER_BIT),je((function(e){if(e.d.b.b){var o,a,i,c,l;if(e.b.id&&e.c.id&&(o=lr(e.b.id,e.c.id),a=r.programs[o]),!a){var u,f;e.b.id?u=r.shaders[e.b.id]:e.b.id=Ie++,u||(u=ar(t,e.b.src,t.VERTEX_SHADER),r.shaders[e.b.id]=u),e.c.id?f=r.shaders[e.c.id]:e.c.id=Ie++,f||(f=ar(t,e.c.src,t.FRAGMENT_SHADER),r.shaders[e.c.id]=f);var s=function(n,e,r){var t=n.createProgram();if(n.attachShader(t,e),n.attachShader(t,r),n.linkProgram(t),!n.getProgramParameter(t,n.LINK_STATUS))throw"Link failed: "+n.getProgramInfoLog(t)+"\nvs info-log: "+n.getShaderInfoLog(e)+"\nfs info-log: "+n.getShaderInfoLog(r);return t}(t,u,f);(a={glProgram:s,attributes:Object.assign({},e.b.attributes,e.c.attributes),currentUniforms:{},activeAttributes:[],activeAttributeLocations:[]}).uniformSetters=function(n,e,r,t){var o=r.glProgram,a=r.currentUniforms,i=0,c=e.f;function l(e,r){var t=r.name,o=n.getUniformLocation(e,t);switch(r.type){case n.INT:return function(e){a[t]!==e&&(n.uniform1i(o,e),a[t]=e)};case n.FLOAT:return function(e){a[t]!==e&&(n.uniform1f(o,e),a[t]=e)};case n.FLOAT_VEC2:return function(e){a[t]!==e&&(n.uniform2f(o,e[0],e[1]),a[t]=e)};case n.FLOAT_VEC3:return function(e){a[t]!==e&&(n.uniform3f(o,e[0],e[1],e[2]),a[t]=e)};case n.FLOAT_VEC4:return function(e){a[t]!==e&&(n.uniform4f(o,e[0],e[1],e[2],e[3]),a[t]=e)};case n.FLOAT_MAT4:return function(e){a[t]!==e&&(n.uniformMatrix4fv(o,!1,new Float32Array(e)),a[t]=e)};case n.SAMPLER_2D:var l=i++;return function(e){n.activeTexture(n.TEXTURE0+l);var r=c.textures.get(e);r||(r=e.eI(n),c.textures.set(e,r)),n.bindTexture(n.TEXTURE_2D,r),a[t]!==e&&(n.uniform1i(o,l),a[t]=e)};case n.BOOL:return function(e){a[t]!==e&&(n.uniform1i(o,e),a[t]=e)};default:return function(){}}}for(var u={},f=n.getProgramParameter(o,n.ACTIVE_UNIFORMS),s=0;f>s;s++){var d=n.getActiveUniform(o,s);u[t[d.name]||d.name]=l(o,d)}return u}(t,n,a,Object.assign({},e.b.uniforms,e.c.uniforms));var d=t.getProgramParameter(s,t.ACTIVE_ATTRIBUTES);for(i=0;d>i;i++){var m=t.getActiveAttrib(s,i),v=t.getAttribLocation(s,m.name);a.activeAttributes.push(m),a.activeAttributeLocations.push(v)}o=lr(e.b.id,e.c.id),r.programs[o]=a}r.lastProgId!==o&&(t.useProgram(a.glProgram),r.lastProgId=o),c=a.uniformSetters,Object.keys(l=e.e).forEach((function(n){var e=c[n];e&&e(l[n])}));var b=r.buffers.get(e.d);for(b||(b=function(n,e){if(e.a.dz>0){var r=n.createBuffer(),t=function(n,e){var r,t=new Uint32Array(We(n)*e),o=0;return je((function(n){if(1===e)t[o++]=n;else for(r=0;e>r;r++)t[o++]=n[String.fromCharCode(97+r)]}),n),t}(e.c,e.a.dz);return n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,r),n.bufferData(n.ELEMENT_ARRAY_BUFFER,t,n.STATIC_DRAW),{numIndices:t.length,indexBuffer:r,buffers:{}}}return{numIndices:e.a.dp*We(e.b),indexBuffer:null,buffers:{}}}(t,e.d),r.buffers.set(e.d,b)),i=0;a.activeAttributes.length>i;i++){v=a.activeAttributeLocations[i],void 0===b.buffers[(m=a.activeAttributes[i]).name]&&(b.buffers[m.name]=cr(t,m,e.d,a.attributes)),t.bindBuffer(t.ARRAY_BUFFER,b.buffers[m.name]);var p=ir(t,m.type);if(1===p.arraySize)t.enableVertexAttribArray(v),t.vertexAttribPointer(v,p.size,p.baseType,!1,0,0);else for(var g=4*p.size,h=g*p.arraySize,x=0;p.arraySize>x;x++)t.enableVertexAttribArray(v+x),t.vertexAttribPointer(v+x,p.size,p.baseType,!1,h,g*x)}for(r.toggle=!r.toggle,je(zu(r),e.a),i=0;9>i;i++){var C=r[tr[i]];C.toggle!==r.toggle&&C.enabled&&(or[i](r),C.enabled=!1,C.toggle=r.toggle)}b.indexBuffer?(t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,b.indexBuffer),t.drawElements(e.d.a.d4,b.numIndices,t.UNSIGNED_INT,0)):t.drawArrays(e.d.a.d4,0,b.numIndices)}}),n.g),e):e})),fr=t((function(n,e,r){return function(n,e,r,t){return{$:3,d:le(n),g:e,h:r,i:t}}(e,{g:r,f:{},h:n},gr,hr)})),sr=r((function(n,e){n.contextAttributes.alpha=!0,n.contextAttributes.premultipliedAlpha=e.a})),dr=r((function(n,e){n.contextAttributes.depth=!0,n.sceneSettings.push((function(n){n.clearDepth(e.a)}))})),mr=r((function(n,e){n.contextAttributes.stencil=!0,n.sceneSettings.push((function(n){n.clearStencil(e.a)}))})),vr=r((function(n){n.contextAttributes.antialias=!0})),br=r((function(n,e){n.sceneSettings.push((function(n){n.clearColor(e.a,e.b,e.c,e.d)}))})),pr=r((function(n){n.contextAttributes.preserveDrawingBuffer=!0}));function gr(n){var e={contextAttributes:{alpha:!1,depth:!1,stencil:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1},sceneSettings:[]};je((function(n){return u(Nu,e,n)}),n.h);var r=Zn.createElement("canvas"),t=r.getContext&&(r.getContext("webgl",e.contextAttributes)||r.getContext("experimental-webgl",e.contextAttributes));return t&&"undefined"!=typeof WeakMap?(e.sceneSettings.forEach((function(n){n(t)})),t.getExtension("OES_standard_derivatives"),t.getExtension("OES_element_index_uint"),n.f.gl=t,n.f.toggle=!1,n.f.blend={enabled:!1,toggle:!1},n.f.depthTest={enabled:!1,toggle:!1},n.f.stencilTest={enabled:!1,toggle:!1},n.f.scissor={enabled:!1,toggle:!1},n.f.colorMask={enabled:!1,toggle:!1},n.f.cullFace={enabled:!1,toggle:!1},n.f.polygonOffset={enabled:!1,toggle:!1},n.f.sampleCoverage={enabled:!1,toggle:!1},n.f.sampleAlphaToCoverage={enabled:!1,toggle:!1},n.f.shaders=[],n.f.programs={},n.f.lastProgId=null,n.f.buffers=new WeakMap,n.f.textures=new WeakMap,n.f.STENCIL_WRITEMASK=t.getParameter(t.STENCIL_WRITEMASK),Ue((function(){return u(ur,n,r)}))):(r=Zn.createElement("div")).innerHTML='<a href="https://get.webgl.org/">Enable WebGL</a> to see this content!',r}function hr(n,e){return e.f=n.f,ur(e)}var xr=r((function(n,e){return new Float64Array([n,e])}));new Float64Array(3),new Float64Array(3),new Float64Array(3);var Cr=t((function(n,e,r){return new Float64Array([n,e,r])})),Pr=r((function(n,e){return new Float64Array([e[0]*n,e[1]*n,e[2]*n])})),Mr=o((function(n,e,r,t){return new Float64Array([n,e,r,t])}));new Float64Array(16),new Float64Array(16),new Float64Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);var Tr=z,yr=x,Lr=t((function(n,e,t){var o=t.c,a=t.d,i=r((function(e,r){return f(yr,e.$?n:i,r,e.a)}));return f(yr,i,f(yr,n,e,a),o)})),wr=t((function(n,e,r){for(;;){if(-2===r.$)return e;var t=r.d,o=n,a=f(n,r.b,r.c,f(wr,n,e,r.e));n=o,e=a,r=t}})),Dr=function(n){return f(wr,t((function(n,e,r){return u(Tr,L(n,e),r)})),$,n)},Sr=1,$r=2,Nr=0,zr=function(n){return{$:1,a:n}},_r=r((function(n,e){return{$:3,a:n,b:e}})),Ar=r((function(n,e){return{$:0,a:n,b:e}})),Rr=r((function(n,e){return{$:1,a:n,b:e}})),Fr=function(n){return{$:0,a:n}},Vr=function(n){return{$:2,a:n}},Br=function(n){return{$:0,a:n}},kr={$:1},Kr=Cn,Er=J,Hr=r((function(n,e){return u(Y,n,A(e))})),Ir=r((function(n,e){return _(u(q,n,e))})),jr=t((function(n,e,r){for(;;){if(!r.b)return e;var t=r.b,o=n,a=u(n,r.a,e);n=o,e=a,r=t}})),Wr=function(n){return f(jr,r((function(n,e){return e+1})),0,n)},Ur=R,Or=t((function(n,e,r){for(;;){if(T(n,e)>=1)return r;var t=n,o=e-1,a=u(Tr,e,r);n=t,e=o,r=a}})),Gr=r((function(n,e){return f(Or,n,e,$)})),qr=r((function(n,e){return f(Ur,n,u(Gr,0,Wr(e)-1),e)})),Yr=function(n){var e=n.charCodeAt(0);return 55296>e||e>56319?e:1024*(e-55296)+n.charCodeAt(1)-56320+65536},Xr=function(n){return f(jr,Tr,$,n)},Zr=function(n){var e=n.charCodeAt(0);return isNaN(e)?kr:Br(55296>e||e>56319?L(n[0],n.slice(1)):L(n[0]+n[1],n.slice(2)))},Jr=32,Qr=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),nt=[],et=E,rt=r((function(n,e){return W(e)/W(n)})),tt=function(n){return n},ot=et(u(rt,2,Jr)),at=s(Qr,0,ot,nt,nt),it=p,ct=function(n){return{$:1,a:n}},lt=H,ut=function(n){return n.length},ft=r((function(n,e){return T(n,e)>0?n:e})),st=F,dt=g,mt=r((function(n,e){for(;;){var r=u(dt,Jr,n),t=r.b,o=u(Tr,{$:0,a:r.a},e);if(!t.b)return Xr(o);n=t,e=o}})),vt=r((function(n,e){for(;;){var r=et(e/Jr);if(1===r)return u(dt,Jr,n).a;n=u(mt,n,$),e=r}})),bt=r((function(n,e){if(e.l){var r=e.l*Jr,t=lt(u(rt,Jr,r-1)),o=n?Xr(e.z):e.z,a=u(vt,o,e.l);return s(Qr,ut(e.p)+r,u(ft,5,t*ot),a,e.p)}return s(Qr,ut(e.p),ot,nt,e.p)})),pt=a((function(n,e,r,t,o){for(;;){if(0>e)return u(bt,!1,{z:t,l:r/Jr|0,p:o});var a=ct(f(it,Jr,e,n));n=n,e-=Jr,r=r,t=u(Tr,a,t),o=o}})),gt=r((function(n,e){if(n>0){var r=n%Jr;return d(pt,e,n-r-Jr,n,$,f(it,r,n-r,e))}return at})),ht=function(n){return!n.$},xt=cn,Ct=on,Pt=rn,Mt=ln,Tt=un,yt=function(n){return{$:0,a:n}},Lt=function(n){switch(n.$){case 0:return 0;case 1:return 1;case 2:return 2;default:return 3}},wt=ee("div"),Dt=function(n){return{$:2,a:n}},St=function(n){return{$:6,a:n}},$t=function(n){return{$:4,a:n}},Nt=t((function(n,e,r){return e(n(r))})),zt=function(n){return n},_t=function(n){return n.length},At=X,Rt=r((function(n,e){return 1>n?e:f(At,n,_t(e),e)})),Ft=Z,Vt=Tn,Bt=Vt(0),kt=o((function(n,e,r,t){if(t.b){var o=t.a,a=t.b;if(a.b){var i=a.a,c=a.b;if(c.b){var l=c.a,d=c.b;if(d.b){var m=d.b;return u(n,o,u(n,i,u(n,l,u(n,d.a,r>500?f(jr,n,e,Xr(m)):s(kt,n,e,r+1,m)))))}return u(n,o,u(n,i,u(n,l,e)))}return u(n,o,u(n,i,e))}return u(n,o,e)}return e})),Kt=t((function(n,e,r){return s(kt,n,e,0,r)})),Et=r((function(n,e){return f(Kt,r((function(e,r){return u(Tr,n(e),r)})),$,e)})),Ht=Ln,It=r((function(n,e){return u(Ht,(function(e){return Vt(n(e))}),e)})),jt=t((function(n,e,r){return u(Ht,(function(e){return u(Ht,(function(r){return Vt(u(n,e,r))}),r)}),e)})),Wt=function(n){return f(Kt,jt(Tr),Vt($),n)},Ut=kn,Ot=r((function(n,e){var r=e;return Sn(u(Ht,Ut(n),r))}));Fn.Task=Vn(Bt,t((function(n,e){return u(It,(function(){return 0}),Wt(u(Et,Ot(n),e)))})),t((function(){return Vt(0)})),r((function(n,e){return u(It,n,e)})));var Gt=En("Task"),qt=r((function(n,e){return Gt(u(It,n,e))})),Yt=_e,Xt=r((function(n,e){return{$:0,a:n,b:e}})),Zt=function(n){return{$:7,a:n}},Jt=r((function(n,e){return{$:5,a:n,b:e}})),Qt=r((function(n,e){return{$:3,a:n,b:e}})),no=Hn,eo=In,ro=function(n){return{$:1,a:n}},to=t((function(n,e,r){return{cG:r,eh:e,em:n}})),oo=Vt(f(to,$,kr,0)),ao=function(n){return yn((function(e){var r=n.f;2===r.$&&r.c&&r.c(),n.f=null,e(Tn(0))}))},io=yn((function(n){n(Tn(Date.now()))})),co=yn((function(n){var e=Re((function(){n(Tn(Date.now()))}));return function(){Ae(e)}})),lo=Kn,uo=Sn,fo=t((function(n,e,r){var t=r.eh,o=r.cG,a=L(t,e);return 1===a.a.$?a.b.b?u(Ht,(function(n){return u(Ht,(function(r){return Vt(f(to,e,Br(n),r))}),io)}),uo(u(Ht,lo(n),co))):oo:a.b.b?Vt(f(to,e,t,o)):u(Ht,(function(){return oo}),ao(a.a.a))})),so=zt,mo=t((function(n,e,r){var t=r.em,o=r.cG,a=function(r){return u(Ut,n,(0,r.a)(r.$?e-o:so(e)))};return u(Ht,(function(n){return u(Ht,(function(){return Vt(f(to,t,Br(n),e))}),Wt(u(Et,a,t)))}),uo(u(Ht,lo(n),co)))})),vo=t((function(n,e,r){return n(e(r))}));Fn["Browser.AnimationManager"]=Vn(oo,fo,mo,0,r((function(n,e){return e.$?ro(u(vo,n,e.a)):{$:0,a:u(vo,n,e.a)}})));var bo=En("Browser.AnimationManager"),po=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),go=r((function(n,e){return{d9:e,em:n}})),ho={$:-2},xo=ho,Co=Vt(u(go,$,xo)),Po=function(n){return L(S(n.a?"w_":"d_",n.b),n)},Mo=a((function(n,e,r,t,o){return{$:-1,a:n,b:e,c:r,d:t,e:o}})),To=a((function(n,e,r,t,o){if(-1!==o.$||o.a){if(-1!==t.$||t.a||-1!==t.d.$||t.d.a)return d(Mo,n,e,r,t,o);var a=t.d;return i=t.e,d(Mo,0,t.b,t.c,d(Mo,1,a.b,a.c,a.d,a.e),d(Mo,1,e,r,i,o))}var i,c=o.b,l=o.c,u=o.d,f=o.e;return-1!==t.$||t.a?d(Mo,n,c,l,d(Mo,0,e,r,t,u),f):d(Mo,0,e,r,d(Mo,1,t.b,t.c,t.d,i=t.e),d(Mo,1,c,l,u,f))})),yo=y,Lo=t((function(n,e,r){if(-2===r.$)return d(Mo,0,n,e,ho,ho);var t=r.a,o=r.b,a=r.c,i=r.d,c=r.e;switch(u(yo,n,o)){case 0:return d(To,t,o,a,f(Lo,n,e,i),c);case 1:return d(Mo,t,o,e,i,c);default:return d(To,t,o,a,i,f(Lo,n,e,c))}})),wo=t((function(n,e,r){var t=f(Lo,n,e,r);return-1!==t.$||t.a?t:d(Mo,1,t.b,t.c,t.d,t.e)})),Do=function(n){return f(jr,r((function(n,e){return f(wo,n.a,n.b,e)})),xo,n)},So=t((function(n,e,r){for(;;){if(-2===r.$)return e;var t=r.e,o=n,a=f(n,r.b,r.c,f(So,n,e,r.d));n=o,e=a,r=t}})),$o=i((function(n,e,o,a,i,c){var l=f(So,t((function(r,t,a){n:for(;;){var i=a.a,c=a.b;if(i.b){var l=i.a,u=l.a,d=l.b,m=i.b;if(0>T(u,r)){r=r,t=t,a=L(m,f(n,u,d,c));continue n}return T(u,r)>0?L(i,f(o,r,t,c)):L(m,s(e,u,d,t,c))}return L(i,f(o,r,t,c))}})),L(Dr(a),c),i),u=l.a,d=l.b;return f(jr,r((function(e,r){return f(n,e.a,e.b,r)})),d,u)})),No=r((function(n,e){return{dt:e,dB:n}})),zo=t((function(n,e,r){return u(It,(function(n){return L(e,n)}),f(ke,r.a?Be:Ve,r.b,(function(r){return u(lo,n,u(No,e,r))})))})),_o=r((function(n,e){return f(So,wo,e,n)})),Ao=t((function(n,e,r){var a=t((function(e,r,t){var o=t.c;return w(t.a,t.b,u(Tr,f(zo,n,e,r),o))})),i=t((function(n,e,r){var t=r.b,o=r.c;return w(u(Tr,e,r.a),t,o)})),c=o((function(n,e,r,t){var o=t.c;return w(t.a,f(wo,n,e,t.b),o)})),l=u(Et,Po,e),s=m($o,i,c,a,r.d9,Do(l),w($,xo,$)),d=s.b,v=s.c;return u(Ht,(function(n){return Vt(u(go,l,u(_o,d,Do(n))))}),u(Ht,(function(){return Wt(v)}),Wt(u(Et,ao,s.a))))})),Ro=t((function(n,e,r){var t=n(e);return t.$?r:u(Tr,t.a,r)})),Fo=r((function(n,e){return f(Kt,Ro(n),$,e)}));Fn["Browser.Events"]=Vn(Co,Ao,t((function(n,e,r){var t=e.dB,o=e.dt,a=u(Fo,(function(n){var e=n.b.c;return P(n.a,t)?u(Ke,e,o):kr}),r.em);return u(Ht,(function(){return Vt(r)}),Wt(u(Et,Ut(n),a)))})),0,r((function(n,e){return f(po,e.a,e.b,u(Mt,n,e.c))})));var Vo,Bo,ko,Ko,Eo,Ho,Io,jo,Wo,Uo,Oo,Go,qo,Yo,Xo,Zo,Jo,Qo,na,ea,ra,ta,oa,aa,ia,ca,la,ua,fa,sa,da,ma,va,ba,pa,ga,ha,xa=En("Browser.Events"),Ca=t((function(n,e,r){return xa(f(po,n,e,r))})),Pa=u(Ca,0,"click"),Ma=u(Ca,0,"keydown"),Ta=u(Ca,0,"keyup"),ya=u(Ca,0,"mousedown"),La=u(Ca,0,"mousemove"),wa=u(Ca,0,"mouseup"),Da=nn,Sa=en,$a=r((function(n,e){return n(e?1:0)})),Na=function(n){var e=void 0!==Zn.hidden?{eZ:"hidden",eH:"visibilitychange"}:void 0!==Zn.mozHidden?{eZ:"mozHidden",eH:"mozvisibilitychange"}:void 0!==Zn.msHidden?{eZ:"msHidden",eH:"msvisibilitychange"}:void 0!==Zn.webkitHidden?{eZ:"webkitHidden",eH:"webkitvisibilitychange"}:{eZ:"hidden",eH:"visibilitychange"};return f(Ca,0,e.eH,u(Mt,$a(n),u(Ct,"target",u(Ct,e.eZ,Sa))))},za=tn,_a=function(n){return{$:3,b:n}},Aa=qn("touchCancel",_a(u(xt,(function(n){return u(xt,(function(e){return u(xt,(function(r){return yt({bi:r,cI:e,cJ:n})}),u(Ct,"identifier",Da))}),u(Ct,"pageX",Pt))}),u(Ct,"pageY",Pt)))),Ra=qn("touchEnd",_a(u(xt,(function(n){return u(xt,(function(e){return u(xt,(function(r){return yt({bi:r,cI:e,cJ:n})}),u(Ct,"identifier",Da))}),u(Ct,"pageX",Pt))}),u(Ct,"pageY",Pt)))),Fa=qn("touchMove",_a(u(xt,(function(n){return u(xt,(function(e){return u(xt,(function(r){return yt({bi:r,cI:e,cJ:n})}),u(Ct,"identifier",Da))}),u(Ct,"pageX",Pt))}),u(Ct,"pageY",Pt)))),Va=qn("touchStart",_a(u(xt,(function(n){return u(xt,(function(e){return u(xt,(function(r){return yt({bi:r,cI:e,cJ:n})}),u(Ct,"identifier",Da))}),u(Ct,"pageX",Pt))}),u(Ct,"pageY",Pt)))),Ba=no(u(Et,eo(St),_([(Vo=Qt,f(Ca,1,"resize",u(Ct,"target",f(Tt,Vo,u(Ct,"innerWidth",Da),u(Ct,"innerHeight",Da))))),Ta(u(Mt,Xt(!1),u(Ct,"key",za))),Ma(u(Mt,Xt(!0),u(Ct,"key",za))),(ha=u(Nt,st(.001),(function(n){return{$:1,a:n}})),bo(ro(ha))),Na($t),Pa(yt({$:6})),ya(yt(Zt(!0))),wa(yt(Zt(!1))),La(f(Tt,Jt,u(Ct,"pageX",Pt),u(Ct,"pageY",Pt))),Va((function(n){return{$:8,a:n}})),Fa((function(n){return{$:9,a:n}})),Ra((function(n){return{$:10,a:n}})),Aa((function(n){return{$:11,a:n}}))]))),ka=o((function(n,e,r,t){return{cf:t,aP:r,bC:n,bD:e}})),Ka=xo,Ea={b9:!1,aP:!1,cl:!1,M:Ka,ag:!1,a_:!1,c0:!1,c1:!1,b5:!1},Ha=r((function(n,e){return D(e,{cf:n})})),Ia=r((function(n,e){return D(e,{aP:n})})),ja=t((function(n,e,r){return D(r,{bC:n,bD:e})})),Wa=function(n){if(-1===n.$&&-1===n.d.$&&-1===n.e.$){if(-1!==n.e.d.$||n.e.d.a){var e=n.d,r=n.e;return i=r.b,c=r.c,t=r.d,f=r.e,d(Mo,1,n.b,n.c,d(Mo,0,e.b,e.c,e.d,e.e),d(Mo,0,i,c,t,f))}var t,o=n.d,a=n.e,i=a.b,c=a.c,l=(t=a.d).d,u=t.e,f=a.e;return d(Mo,0,t.b,t.c,d(Mo,1,n.b,n.c,d(Mo,0,o.b,o.c,o.d,o.e),l),d(Mo,1,i,c,u,f))}return n},Ua=function(n){if(-1===n.$&&-1===n.d.$&&-1===n.e.$){if(-1!==n.d.d.$||n.d.d.a){var e=n.d,r=n.e;return u=r.b,f=r.c,s=r.d,m=r.e,d(Mo,1,t=n.b,o=n.c,d(Mo,0,e.b,e.c,e.d,c=e.e),d(Mo,0,u,f,s,m))}var t=n.b,o=n.c,a=n.d,i=a.d,c=a.e,l=n.e,u=l.b,f=l.c,s=l.d,m=l.e;return d(Mo,0,a.b,a.c,d(Mo,1,i.b,i.c,i.d,i.e),d(Mo,1,t,o,c,d(Mo,0,u,f,s,m)))}return n},Oa=c((function(n,e,r,t,o,a,i){if(-1!==a.$||a.a){n:for(;;){if(-1===i.$&&1===i.a){if(-1===i.d.$){if(1===i.d.a)return Ua(e);break n}return Ua(e)}break n}return e}return d(Mo,r,a.b,a.c,a.d,d(Mo,0,t,o,a.e,i))})),Ga=function(n){if(-1===n.$&&-1===n.d.$){var e=n.a,r=n.b,t=n.c,o=n.d,a=o.d,i=n.e;if(1===o.a){if(-1!==a.$||a.a){var c=Wa(n);if(-1===c.$){var l=c.e;return d(To,c.a,c.b,c.c,Ga(c.d),l)}return ho}return d(Mo,e,r,t,Ga(o),i)}return d(Mo,e,r,t,Ga(o),i)}return ho},qa=r((function(n,e){if(-2===e.$)return ho;var r=e.a,t=e.b,o=e.c,a=e.d,i=e.e;if(0>T(n,t)){if(-1===a.$&&1===a.a){var c=a.d;if(-1!==c.$||c.a){var l=Wa(e);if(-1===l.$){var f=l.e;return d(To,l.a,l.b,l.c,u(qa,n,l.d),f)}return ho}return d(Mo,r,t,o,u(qa,n,a),i)}return d(Mo,r,t,o,u(qa,n,a),i)}return u(Ya,n,v(Oa,n,e,r,t,o,a,i))})),Ya=r((function(n,e){if(-1===e.$){var r=e.a,t=e.b,o=e.c,a=e.d,i=e.e;if(P(n,t)){var c=function(n){for(;;){if(-1!==n.$||-1!==n.d.$)return n;n=n.d}}(i);return-1===c.$?d(To,r,c.b,c.c,a,Ga(i)):ho}return d(To,r,t,o,a,u(qa,n,i))}return ho})),Xa=r((function(n,e){var r=u(qa,n,e);return-1!==r.$||r.a?r:d(Mo,1,r.b,r.c,r.d,r.e)})),Za=r((function(n,e){return{di:-e/2,cn:e,ag:-n/2,a_:n/2,bx:e/2,da:n}})),Ja=r((function(n,e){return f(wo,n,0,e)})),Qa=r((function(n,e){return u(Xa,n,e)})),ni=t((function(n,e,r){var t=u(n?Ja:Qa,e,r.M);switch(e){case" ":return D(r,{M:t,c1:n});case"Enter":return D(r,{cl:n,M:t});case"Shift":return D(r,{M:t,c0:n});case"Backspace":return D(r,{b9:n,M:t});case"ArrowUp":return D(r,{M:t,b5:n});case"ArrowDown":return D(r,{aP:n,M:t});case"ArrowLeft":return D(r,{M:t,ag:n});case"ArrowRight":return D(r,{M:t,a_:n});default:return D(r,{M:t})}})),ei=r((function(n,e){switch(n.$){case 1:var r=n.a;return D(e,e.G.cf?{G:u(Ha,!1,e.G),a1:e.a1+r}:{a1:e.a1+r});case 2:var t=n.a.fA;return D(e,{aa:u(Za,t.da,t.cn)});case 3:return D(e,{aa:u(Za,n.a,n.b)});case 0:return D(e,{bj:f(ni,n.a,n.b,e.bj)});case 5:return D(e,{G:f(ja,e.aa.ag+n.a,e.aa.bx-n.b,e.G)});case 6:return D(e,{G:u(Ha,!0,e.G)});case 7:return D(e,{G:u(Ia,n.a,e.G)});case 8:case 9:return D(e,{ab:f(jr,(function(n){return u(wo,n.bi,{bC:e.aa.ag+n.cI,bD:e.aa.bx-n.cJ})}),e.ab,n.a)});case 10:case 11:return D(e,{ab:f(jr,(function(n){return Xa(n.bi)}),e.ab,n.a)});default:return D(e,{bj:Ea,G:s(ka,e.G.bC,e.G.bD,!1,!1)})}})),ri=r((function(n,e){return{P:e,U:n}})),ti=f(Tt,r((function(n,e){return L(n,e)})),u(Ct,"A1",za),u(Ct,"A2",za)),oi=fn,ai=s(oi,t((function(n,e,r){return w(n,e,r)})),u(Ct,"A1",Pt),u(Ct,"A2",Pt),u(Ct,"A3",Pt)),ii=f(Tt,r((function(n,e){return L(n,e)})),u(Ct,"A1",za),u(Ct,"A2",ai)),ci=f(Tt,ri,u(Ct,"floats",_a(ii)),u(Ct,"colors",_a(ti))),li=sn,ui=r((function(n,e){return{P:e,aD:"",U:n,aq:""}})),fi=u(ui,$,$),si=r((function(n,e){return e.$?kr:n(e.a)})),di=r((function(n,e){return e.$?zr(e.a):n(e.a)})),mi=o((function(n,e,r,t){return{e$:e,e7:n,fd:r,fq:t}})),vi=He,bi=r((function(n,e){return e.$?zr(n):Fr(e.a)})),pi=Ee,gi=function(n){return n.b?Br(n.a):kr},hi=r((function(n,e){return e.$?kr:Br(n(e.a))})),xi=r((function(n,e){return e.$?zr(e.a):Fr(n(e.a))})),Ci=r((function(n,e){return Yr(e)-Yr(n)})),Pi=t((function(n,e,r){var t=Yr(r);return 1>T(Yr(n),t)&&1>T(t,Yr(e))})),Mi=r((function(n,e){var r=f(Pi,"0","9",e)?Fr(u(Ci,"0",e)):f(Pi,"a","z",e)?Fr(10+u(Ci,"a",e)):f(Pi,"A","Z",e)?Fr(10+u(Ci,"A",e)):zr({$:0,a:e});return u(di,(function(r){return 0>T(r,n)?Fr(r):zr({$:1,a:e})}),r)})),Ti=r((function(n,e){var r=Zr(e);if(1===r.$)return Fr(0);var t=r.a,o=t.b;return u(di,(function(e){return u(di,(function(r){return Fr(e+r*n)}),u(Ti,n,o))}),u(Mi,n,t.a))})),yi=function(n){for(var e=n.length,r=Array(e),t=0;e>t;){var o=n.charCodeAt(t);55296>o||o>56319?(r[e-t]=n[t],t++):(r[e-t]=n[t+1],r[e-++t]=n[t-1],t++)}return r.join("")},Li=r((function(n,e){return 2>n||n>36?zr({$:2,a:n}):u(Ti,n,yi(e))})),wi=Li(16),Di=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),Si=t((function(n,e,r){return s(Di,n,e,r,1)})),$i=o((function(n,e,r,t){return s(Di,n,e,r,t)})),Ni=V,zi=I,_i=r((function(n,e){var r=u(Ni,10,n);return zi(e*r)/r})),Ai=G,Ri=function(n){return f(Ai,Tr,$,n)},Fi=(Bo=function(n){var e=Ri(n);if(e.b&&!e.b.b){var r=e.a;return A(_([r,r])).join("")}return n},u(Nt,(function(n){return n.toLowerCase()}),u(Nt,(function(n){return u(hi,(function(e){return f(vi,1,e,n)}),u(pi,{eE:!1,e9:!1},"^#?(?:(?:([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2}))|(?:([a-f\\d])([a-f\\d])([a-f\\d]))|(?:([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2}))|(?:([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d])))$"))}),u(Nt,si(gi),u(Nt,hi((function(n){return n.fq})),u(Nt,hi(Fo(zt)),u(Nt,bi("Parsing hex regex failed"),di((function(n){var e=u(Et,u(Nt,Bo,u(Nt,wi,xi(tt))),n);n:for(;;){if(e.b&&!e.a.$&&e.b.b&&!e.b.a.$&&e.b.b.b&&!e.b.b.a.$){if(e.b.b.b.b){if(e.b.b.b.a.$||e.b.b.b.b.b)break n;var r=e.b,t=r.b;return Fr(s($i,e.a.a/255,r.a.a/255,t.a.a/255,u(_i,2,t.b.a.a/255)))}var o=e.b;return Fr(f(Si,e.a.a/255,o.a.a/255,o.b.a.a/255))}break n}return zr("Parsing ints from hex failed")}))))))))),Vi=r((function(n,e){return L(e.a,n(e.b))})),Bi=s(Di,1,1,1,1),ki=r((function(n,e){return e.$?n:e.a})),Ki=u(Nt,li(ci),u(Nt,xi((function(n){return{P:u(Et,Vi(u(Nt,Fi,ki(Bi))),n.P),aD:"",U:n.U,aq:""}})),ki(fi))),Ei=function(n){return f(jr,r((function(n,e){return f(Mn,n.a,n.b,e)})),{},n)},Hi=Pn,Ii=function(n){var e=n.b;return Ei(_([L("A1",Hi(n.a)),L("A2",Hi(e))]))},ji=Pn,Wi=function(n){var e=n.b,r=n.c;return Ei(_([L("A1",ji(n.a)),L("A2",ji(e)),L("A3",ji(r))]))},Ui=function(n){var e=n.b;return Ei(_([L("A1",Hi(n.a)),L("A2",Wi(e))]))},Oi=r((function(n,e){return f(jr,function(n){return r((function(e,r){return r.push(n(e)),r}))}(n),[],e)})),Gi=O,qi=function(n){return u(Gi,n,"")},Yi=t((function(n,e,r){return n>0?f(Yi,n>>1,S(e,e),1&n?S(r,e):r):r})),Xi=r((function(n,e){return f(Yi,n,e,"")})),Zi=t((function(n,e,r){return S(u(Xi,n-_t(r),qi(e)),r)})),Ji=function(n){return 0>n||n>1114111?"�":n>65535?String.fromCharCode(Math.floor((n-=65536)/1024)+55296,n%1024+56320):String.fromCharCode(n)},Qi=B,nc=function(n){var e=function(n){return 10>n?Er(n):qi(Ji(87+n))};return 16>n?e(n):S(nc(n/16|0),e(u(Qi,16,n)))},ec=u(Nt,nc,u(Zi,2,"0")),rc=function(n){return{aO:n.d,cd:n.c,cm:n.b,cV:n.a}},tc=function(n){var e=rc(n),r=e.cV,t=e.cm,o=e.cd;return u(Hr,"",u(Tr,"#",u(Et,u(Nt,zi,ec),_([255*r,255*t,255*o]))))},oc=u(Nt,(function(n){return{P:u(Et,Vi(tc),n.P),U:n.U}}),u(Nt,(function(n){return Ei(_([L("floats",u(Oi,Ui,n.U)),L("colors",u(Oi,Ii,n.P))]))}),Kr(0))),ac=function(n){return 0>n?-n:n},ic=function(n){if(0===n.length||/[\sxbo]/.test(n))return kr;var e=+n;return e==e?Br(e):kr},cc=r((function(n,e){return e.$?n:e.a})),lc=t((function(n,e,r){return u(cc,NaN,ic(u(n,e,r)))})),uc=function(n){return!n},fc=r((function(n,e){for(;;){if(!e.b)return!1;var r=e.b;if(n(e.a))return!0;n=n,e=r}})),sc=r((function(n,e){var r=u(fc,(function(n){return"0"!==n&&"."!==n}),Ri(e));return S(n&&r?"-":"",e)})),dc=J,mc=function(n){var e=n.a,r=n.b;if("9"===e){var t=Zr(r);return 1===t.$?"01":u(Gi,"0",mc(t.a))}var o=Yr(e);return o>=48&&57>o?u(Gi,Ji(o+1),r):"0"},vc=function(n){return n===1/0||n===-1/0},bc=U,pc=t((function(n,e,r){return S(r,u(Xi,n-_t(r),qi(e)))})),gc=function(n){var e=u(Ir,".",n);return e.b?L(e.a,e.b.b?e.b.a:"0"):L("0","0")},hc=r((function(n,e){var r=e.b;return L(n(e.a),r)})),xc=t((function(n,e,r){if(vc(r)||bc(r))return dc(r);var t=0>r,o=gc(function(n){var e=u(Ir,"e",dc(ac(n)));if(e.b){if(e.b.b){var r=e.a,t=e.b.a,o=u(cc,0,function(n){for(var e=0,r=n.charCodeAt(0),t=43==r||45==r?1:0,o=t;n.length>o;++o){var a=n.charCodeAt(o);if(48>a||a>57)return kr;e=10*e+a-48}return o==t?kr:Br(45==r?-e:e)}(u(Ft,"+",t)?u(Rt,1,t):t)),a=gc(r),i=S(a.a,a.b),c=0>o?u(cc,"0",u(hi,(function(n){return n.a+"."+n.b}),u(hi,hc(qi),Zr(S(u(Xi,ac(o),"0"),i))))):f(pc,o+1,"0",i);return S(0>n?"-":"",c)}return S(0>n?"-":"",r=e.a)}return""}(ac(r))),a=o.a,i=o.b,c=_t(a)+e,l=S(u(Xi,1-c,"0"),f(pc,c,"0",S(a,i))),s=_t(l),d=u(ft,1,c),m=u(n,t,f(At,d,s,l)),v=f(At,0,d,l),b=m?yi(u(cc,"1",u(hi,mc,Zr(yi(v))))):v,p=_t(b),g="0"===b?b:e>0?0>T(e,_t(i))?f(At,0,p-e,b)+"."+f(At,p-e,p,b):S(a+".",f(pc,e,"0",i)):S(b,u(Xi,ac(e),"0"));return u(sc,t,g)})),Cc=xc(r((function(n,e){var r,t=Zr(e);return 1!==t.$&&("5"===t.a.a?""!==t.a.b||!n:(r=Yr(t.a.a))>53&&n||r>=53&&!n)}))),Pc=lc(Cc),Mc=t((function(n,e,r){var t=u(rt,10,ac(e-n));return u(Pc,0>t?3:1>t?2:2>t?1:0,r)})),Tc=r((function(n,e){switch(n.$){case 2:var r=Ki(e.aq);return D(r,{aD:r.aD,aq:r.aq});case 3:return D(e,{aq:n.a});case 4:return D(e,{aD:oc(e)});case 0:var t=n.a,o=n.b;return D(e,{U:u(Et,(function(n){var e=n.a,r=n.b,a=r.a,i=r.c;return P(e,t)?L(e,w(a,f(Mc,a,i,o),i)):n}),e.U)});default:return t=n.a,o=n.b,D(e,{P:u(Et,(function(n){var e=n.a;return P(e,t)?L(e,o):n}),e.P)})}})),yc=o((function(n,e,r,t){var o=t.F;switch(r.$){case 0:return t;case 1:return D(t,{a5:r.a});case 2:return D(t,{bc:!1});case 3:return D(t,{bc:!0});case 4:return D(t,{af:f(e,t.F,r.a,t.af)});case 5:return D(t,{F:D(o,{bM:u(Tc,r.a,o.bM)})});default:var a=r.a,i=1===a.$?u(n,o,t.af):t.af;return D(t,{F:u(ei,a,t.F),af:i})}})),Lc=(ga=function(){return{ej:(n=Ve.body,e=Ve.documentElement,{da:Math.max(n.scrollWidth,n.offsetWidth,e.scrollWidth,e.offsetWidth,e.clientWidth),cn:Math.max(n.scrollHeight,n.offsetHeight,e.scrollHeight,e.offsetHeight,e.clientHeight)}),fA:{bC:Be.pageXOffset,bD:Be.pageYOffset,da:Ve.documentElement.clientWidth,cn:Ve.documentElement.clientHeight}};var n,e},yn((function(n){Re((function(){n(Tn(ga()))}))}))),wc=r((function(n,e){return{bM:e,cj:n.cj,bj:Ea,G:s(ka,0,0,!1,!1),aa:u(Za,600,600),a1:0,ab:xo}})),Dc=Hn,Sc=Dc($),$c=function(n){return{$:5,a:n}},Nc=function(n){return{$:4,a:n}},zc={$:2},_c={$:0},Ac=function(n){return{$:1,a:n}},Rc={$:3},Fc=r((function(n){return n})),Vc=ee("button"),Bc=function(n){return n?"Level Editor":"Configurations"},kc=function(n){return u(cc,0,gi(u(Fo,(function(e){return P(Bc(e),n)?Br(e):kr}),_([0,1]))))},Kc=te,Ec=Kc,Hc=oe,Ic=r((function(n,e){return u(Hc,n,{$:0,a:e})})),jc=r((function(n,e){return f(Kt,Ct,e,n)})),Wc=u(jc,_(["target","value"]),za),Uc=function(n){return u(Ic,"click",yt(n))},Oc=ee("option"),Gc=ee("select"),qc=ae,Yc=qc,Xc=Qn,Zc=Xc,Jc=r((function(n,e){return u(ie,n,Hi(e))})),Qc=Jc("value"),nl=r((function(n,e){return{$:1,a:n,b:e}})),el=r((function(n,e){return{$:0,a:n,b:e}})),rl=s(Di,0,0,0,1),tl=u(Vc,_([u(Yc,"cursor","pointer"),Uc({$:4})]),_([Zc("Export Configurations as json")])),ol=ee("h3"),al=ee("p"),il=Pn,cl=r((function(n,e){return u(ie,n,il(e))})),ll=cl("readOnly"),ul=ee("textarea"),fl=function(n){return u(wt,$,_([u(ul,_([ll(!0)]),_([Zc(n.aD)]))]))},sl=function(n){return u(wt,$,_([u(ol,$,_([Zc("Export Configurations")])),u(al,$,_([tl])),u(al,$,_([fl(n)]))]))},dl=Jc("htmlFor"),ml=ee("hr"),vl=Jc("id"),bl=u(Vc,_([u(Yc,"cursor","pointer"),Uc({$:2})]),_([Zc("Import Configurations")])),pl=function(n){return{$:3,a:n}},gl=function(n){return L(n,!0)},hl=r((function(n,e){return u(Hc,n,{$:1,a:e})})),xl=function(n){return u(hl,"input",u(Mt,gl,u(Mt,n,Wc)))},Cl=function(n){return u(wt,$,_([u(ul,_([xl(pl)]),_([Zc(n.aq)]))]))},Pl=function(n){return u(wt,$,_([u(ol,$,_([Zc("Import Configurations")])),u(al,$,_([Cl(n)])),u(al,$,_([bl]))]))},Ml=ee("input"),Tl=ee("label"),yl=Jc("max"),Ll=Jc("min"),wl=Jc("name"),Dl=ee("span"),Sl=Jc("type"),$l=t((function(n,e,t){var o,a,i,c,l=u(wt,_([u(Yc,"position","fixed"),u(Yc,"top","0px"),u(Yc,"left","0px"),u(Yc,"width",dc(t.F.aa.da)+"px"),u(Yc,"height",dc(t.F.aa.cn)+"px"),u(Yc,"font-size","16px")]),_([u(Ec,Fc(_c),u(n,t.F,t.af))])),f=t.a5?u(Ec,Nc,u(e,t.F,t.af)):u(Ec,$c,(o=t.F.bM,a=function(n){var e=n.a,r=n.b,t=r.a,o=r.b,a=r.c;return u(wt,_([u(Yc,"margin-top","15px")]),_([u(wt,$,_([u(Tl,_([dl(e)]),_([Zc(e),Zc(": "),u(Dl,_([u(Yc,"font-family","monospace"),u(Yc,"font-weight","bold")]),_([Zc(dc(o))]))]))])),u(Ml,_([Sl("range"),vl(e),wl(e),Ll(dc(t)),yl(dc(a)),xl((function(n){return u(el,e,u(cc,0,ic(n)))})),u(Jc,"step","any"),u(Yc,"width","200px"),Qc(dc(o))]),$)]))},i=function(n){var e=n.a,r=n.b;return u(wt,_([u(Yc,"margin-top","15px")]),_([u(wt,$,_([u(Tl,_([dl(e)]),_([Zc(e)]))])),u(Ml,_([Sl("color"),u(Yc,"width","200px"),u(Yc,"height","30px"),vl(e),wl(e),xl((function(n){return u(nl,e,u(ki,rl,Fi(n)))})),Qc(tc(r))]),$)]))},u(wt,_([u(Yc,"margin-left","20px"),u(Yc,"height","100%"),u(Yc,"overflow","scroll")]),_([u(wt,$,u(Et,a,o.U)),u(wt,$,u(Et,i,o.P)),u(ml,$,$),sl(o),Pl(o)])))),s=u(wt,_([u(Yc,"margin-left","0px")]),_([u(Gc,_([(c=u(Nt,kc,Ac),u(Ic,"change",u(Mt,c,Wc))),Qc(Bc(t.a5)),u(Yc,"width","200px"),u(Yc,"height","40px"),u(Yc,"font-size","20px")]),u(Et,(function(n){return u(Oc,_([Qc(Bc(n))]),_([Zc(Bc(n))]))}),_([0,1])))])),d=r((function(n,e){return u(Vc,_([u(Yc,"font-size","30px"),u(Yc,"width","40px"),u(Yc,"height","40px"),Uc(n)]),_([Zc(e)]))})),m=u(wt,_([u(Yc,"position","fixed"),u(Yc,"top","0px"),u(Yc,"left","0px"),u(Yc,"width",dc(250)+"px"),u(Yc,"height",dc(t.F.aa.cn)+"px"),u(Yc,"font-family",'-apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif'),u(Yc,"font-size","16px")]),_(t.bc?[u(wt,_([u(Yc,"height","100px")]),_([u(d,zc,"✕"),s])),u(wt,_([u(Yc,"height",dc(t.F.aa.cn-100)+"px")]),_([f]))]:[u(d,Rc,"≡")]));return u(wt,_([u(Yc,"touch-action","none"),u(Yc,"user-select","none")]),_([l,m]))})),Nl=i((function(n,e,t,o,a,i){return Yt({e0:function(n){var e=u(wc,n,t);return L({a5:0,F:e,bc:!1,af:o(e),c9:0},u(qt,u(Nt,Dt,St),Lc))},fr:function(n){return 1===n.c9?u(eo,St,Na($t)):Ba},fx:r((function(n,r){return L(s(yc,e,i,n,r),Sc)})),fz:u($l,n,a)})})),zl=o((function(n,e,o,a){return m(Nl,n,e,o,a,r((function(){return u(wt,$,$)})),t((function(n,e,r){return r})))})),_l=ui,Al=_l,Rl=u(Al,_([L("camera height",w(1.4,1.57,1.57))]),$),Fl=r((function(n,e){return e})),Vl=r((function(n,e){return u(cc,0,gi(u(Fo,(function(e){var r=e.b.b;return P(e.a,n)?Br(r):kr}),e.U)))})),Bl=r((function(n,e){return u(Vl,n,e.bM)})),kl=Bl,Kl=function(n){return-n},El=r((function(n,e){return{bC:n.bD*e.fK-n.fK*e.bD,bD:n.fK*e.bC-n.bC*e.fK,fK:n.bC*e.bD-n.bD*e.bC}})),Hl=function(n){return n.dc},Il=function(n){return n.dd},jl=function(n){return n.cH},Wl=k,Ul=K,Ol=t((function(n,e,r){var t=n,o=r,a=.5*e,i=Wl(a),c=Ul(a),l=t.eK,u=l.bC*c,f=i*u,s=u*u,d=l.bD*c,m=i*d,v=u*d,b=d*d,p=l.fK*c,g=i*p,h=u*p,x=d*p,C=p*p;return{bC:(1-2*(b+C))*o.bC+2*(v-g)*o.bD+2*(h+m)*o.fK,bD:2*(v+g)*o.bC+(1-2*(s+C))*o.bD+2*(x-f)*o.fK,fK:2*(h-m)*o.bC+2*(x+f)*o.bD+(1-2*(s+b))*o.fK}})),Gl=t((function(n,e,r){var t=n,o=r,a=.5*e,i=Wl(a),c=Ul(a),l=t.cH,u=o.bC-l.bC,f=o.bD-l.bD,s=o.fK-l.fK,d=t.eK,m=d.bC*c,v=i*m,b=m*m,p=d.bD*c,g=i*p,h=m*p,x=p*p,C=d.fK*c,P=i*C,M=m*C,T=p*C,y=C*C;return{bC:l.bC+(1-2*(x+y))*u+2*(h-P)*f+2*(M+g)*s,bD:l.bD+2*(h+P)*u+(1-2*(b+y))*f+2*(T-v)*s,fK:l.fK+2*(M-g)*u+2*(T+v)*f+(1-2*(b+x))*s}})),ql=function(n){return n.dc},Yl=function(n){return n.dd},Xl=function(n){return n.de},Zl=t((function(n,e,r){return{cH:f(Gl,n,e,jl(r)),dc:f(Ol,n,e,ql(r)),dd:f(Ol,n,e,Yl(r)),de:f(Ol,n,e,Xl(r))}})),Jl=t((function(n,e,r){return f(Zl,n(r),e,r)})),Ql=function(n){return n.eK},nu=r((function(n,e){return{bC:e.bC+n.bC,bD:e.bD+n.bD,fK:e.fK+n.fK}})),eu=r((function(n,e){return{cH:u(nu,n,jl(e)),dc:ql(e),dd:Yl(e),de:Xl(e)}})),ru=r((function(n,e){return{bC:n*e.bC,bD:n*e.bD,fK:n*e.fK}})),tu=t((function(n,e,r){return u(eu,u(ru,e,n),r)})),ou=t((function(n,e,r){return f(tu,Ql(n(r)),e,r)})),au=r((function(n,e){return{eK:e,cH:n}})),iu=function(n){return u(au,n.cH,n.dc)},cu=function(n){return u(au,n.cH,n.dd)},lu=function(n){return u(au,n.cH,n.de)},uu=function(n){return ac(n)},fu={bC:0,bD:0,fK:0},su=zt,du={bC:1,bD:0,fK:0},mu=du,vu={bC:0,bD:0,fK:1},bu=vu,pu=su({cH:fu,dc:bu,dd:mu}),gu=function(n){return function(n){var e,r,t,o=n.fB;return function(n){return{cU:(e=uu(n.fB),{$:1,a:e}),c8:n.c8};var e}({c8:(e={ez:n.ez,ck:1e3,eN:n.eN,eT:n.eT,dw:pu},t={cH:e.eT,dc:Il(e.dw),dd:(r=e.dw,u(El,Hl(r),Il(r))),de:Hl(e.dw)},f(ou,lu,e.ck,f(Jl,iu,Kl(e.eN),f(Jl,cu,e.ez,t)))),fB:o})}({ez:u(kl,"camera height",n),eN:u(kl,"camera height",n),eT:{bC:0,bD:2,fK:0},fB:2})},hu=3.141592653589793,xu=function(n){return n*hu/180},Cu=function(n){return{$:0,a:n}},Pu={$:3},Mu=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),Tu=Mu,yu=r((function(n,e){return e.b?f(Kt,Tr,e,n):n})),Lu=function(n){return f(Kt,yu,$,n)},wu=r((function(n,e){return Lu(u(Et,n,e))})),Du=function(n){return u(ce,"height",Er(n))},Su=function(n){return re(function(n){return"script"==n?"p":n}(n))},$u=function(n){return{$:2,a:n}},Nu=r((function(n,e){switch(e.$){case 0:return u(sr,n,e);case 1:return u(dr,n,e);case 2:return u(mr,n,e);case 3:return u(vr,n,e);case 4:return u(br,n,e);default:return u(pr,n,e)}})),zu=r((function(n,e){switch(e.$){case 0:return u(Ge,n,e);case 1:return u(qe,n,e);case 2:return u(Ye,n,e);case 3:return u(Xe,n,e);case 4:return u(Ze,n,e);case 5:return u(Je,n,e);case 6:return u(Qe,n,e);case 7:return u(nr,n,e);default:return function(n){var e=n.sampleAlphaToCoverage;e.toggle=n.toggle,e.enabled||(n.gl.enable(n.gl.SAMPLE_ALPHA_TO_COVERAGE),e.enabled=!0)}(n)}})),_u=t((function(n,e,r){return f(fr,n,e,r)})),Au=Mr,Ru=s(Au,1,1,1,1),Fu=t((function(n,e,r){return u(Et,(function(n){return u(n,e,r)}),n)})),Vu=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),Bu=r((function(n,e){var r=e.bC,t=e.bD;return f(Vu,n*r/t,n,n*(1-r-t)/t)})),ku=Cr,Ku=r((function(n,e){return f(ku,3.2406*(t=(r=u(Bu,n,e)).a)-1.5372*(o=r.b)-.4986*(a=r.c),-.9689*t+1.8758*o+.0415*a,.0557*t-.204*o+1.057*a);var r,t,o,a})),Eu=r((function(n,e){return{dA:P(n.dA,e.dA),q:n.q*e.q+n.r*e.t+n.s*e.w,r:n.q*e.r+n.r*e.u+n.s*e.x,s:n.q*e.s+n.r*e.v+n.s*e.y,t:n.t*e.q+n.u*e.t+n.v*e.w,u:n.t*e.r+n.u*e.u+n.v*e.x,v:n.t*e.s+n.u*e.v+n.v*e.y,w:n.w*e.q+n.x*e.t+n.y*e.w,x:n.w*e.r+n.x*e.u+n.y*e.x,y:n.w*e.s+n.x*e.v+n.y*e.y,H:e.H+(n.H*e.q+n.I*e.t+n.J*e.w)*e.b3,I:e.I+(n.H*e.r+n.I*e.u+n.J*e.x)*e.b3,J:e.J+(n.H*e.s+n.I*e.v+n.J*e.y)*e.b3,b3:n.b3*e.b3}})),Hu=function(n){var e=new Float64Array(16);return e[0]=n.dI,e[1]=n.dM,e[2]=n.dQ,e[3]=n.dU,e[4]=n.dJ,e[5]=n.dN,e[6]=n.dR,e[7]=n.dV,e[8]=n.dK,e[9]=n.dO,e[10]=n.dS,e[11]=n.dW,e[12]=n.dL,e[13]=n.dP,e[14]=n.dT,e[15]=n.dX,e},Iu=a((function(n,e,r,t,o){return m(o,n,s(Au,t.b3,t.b3,t.b3,t.dA?1:-1),function(n){return Hu({dI:n.q,dJ:n.t,dK:n.w,dL:n.H,dM:n.r,dN:n.u,dO:n.x,dP:n.I,dQ:n.s,dR:n.v,dS:n.y,dT:n.J,dU:0,dV:0,dW:0,dX:1})}(t),t.dA,e,r)})),ju=i((function(n,e,r,t,o,a){n:for(;;)switch(o.$){case 0:return a;case 5:var i=o.b;n=n,e=e,r=r,t=u(Eu,o.a,t),o=i,a=a;continue n;case 1:return{N:u(Tr,d(Iu,n,e,r,t,o.b),a.N),W:a.W,fm:a.fm};case 3:return{N:a.N,W:u(Tr,d(Iu,n,e,r,t,o.b),a.W),fm:a.fm};case 2:return{N:a.N,W:a.W,fm:u(Tr,d(Iu,n,e,r,t,o.a),a.fm)};default:var c=o.a;return f(jr,s(ju,n,e,r,t),a,c)}})),Wu=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),Uu=Wu,Ou=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),Gu=r((function(n,e){return{$:6,a:n,b:e}})),qu=Gu,Yu=_([s(Ou,518,!1,0,1),s(Uu,!1,!1,!1,!1),u(qu,0,1)]),Xu=519,Zu=7681,Ju={src:"\n        precision lowp float;\n\n        void main() {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        }\n    ",attributes:{},uniforms:{}},Qu=Oe,nf=r((function(n,e){return{$:0,a:n,b:e}})),ef=nf({dp:1,dz:0,d4:5}),rf=xr,tf=ef(_([{b$:u(rf,-1,-1)},{b$:u(rf,1,-1)},{b$:u(rf,-1,1)},{b$:u(rf,1,1)}])),of={src:"\n        precision lowp float;\n\n        attribute vec2 position;\n\n        void main() {\n            gl_Position = vec4(position, 0.0, 1.0);\n        }\n    ",attributes:{position:"b$"},uniforms:{}},af=function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return function(f){return{$:2,a:n,b:e,c:r,d:t,e:o,f:a,g:i,h:c,i:l,j:u,k:f}}}}}}}}}}}},cf=t((function(n,e,t){var o=n.cW,a=n.cy,i=n.db,c=r((function(n,e){return e(n)})),l=r((function(n,e){return e(n)})),s=function(n){return u(Nt,c(n.bt),u(Nt,l(n.be),u(Nt,l(n.bE),l(n.bF))))};return u(s,t,u(s,e,f(af,o,a,i)))})),lf=function(n){return f(cf,{cy:n.cy,cW:n.cW,db:n.db},{be:n.be,bt:n.bt,bE:n.bE,bF:n.bF},{be:n.be,bt:n.bt,bE:n.bE,bF:n.bF})},uf=function(n){return d(Qu,_([lf(n),s(Uu,!1,!1,!1,!1)]),of,Ju,tf,{})},ff=uf({be:Zu,cy:0,cW:8,bt:Xu,db:15,bE:Zu,bF:Zu}),sf=7680,df=function(n){return uf({be:sf,cy:15,cW:8,bt:516,db:(e=n,u(Ni,2,e+4)),bE:5386,bF:5386});var e},mf=t((function(n,e,r){return Lu(_([f(Fu,n,r,Yu),_([df(e),ff])]))})),vf=r((function(n,e){return Lu(u(qr,mf(n),e))})),bf=s(Ou,513,!0,0,1),pf=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),gf=r((function(n,e){return f(pf,32774,n,e)})),hf=function(n){var e=n.b1,t=n.bO,o=n.bI,a=n.bG,i=n.bK,c=n.aO;return u(r((function(n,r){var i=n.b,c=n.c,l=r.a,u=r.b,f=r.c;return function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return{$:0,a:n,b:e,c:r,d:t,e:o,f:a,g:i,h:c,i:l,j:u}}}}}}}}}}}(n.a)(i)(c)(l)(u)(f)(e)(t)(o)(a)})),i,c)}({bG:0,aO:u(gf,1,771),bI:0,bK:u(gf,770,771),bO:0,b1:0}),xf=_([bf,hf]),Cf=function(n){return n.d$},Pf=function(n){return n.d2},Mf=r((function(n,e){return e-n})),Tf=function(n){return w(u(Mf,function(n){return n.d0}(n),function(n){return n.dZ}(n)),u(Mf,function(n){return n.d1}(n),function(n){return n.d_}(n)),u(Mf,Pf(n),Cf(n)))},yf=function(n){return jl(n)},Lf=function(n){return{cH:{bC:n.H,bD:n.I,fK:n.J},dc:{bC:n.q,bD:n.r,fK:n.s},dd:{bC:n.t,bD:n.u,fK:n.v},de:{bC:n.w,bD:n.x,fK:n.y}}},wf=r((function(n,e){var r=n.de,t=n.dd,o=n.dc;return{bC:e.bC*o.bC+e.bD*o.bD+e.fK*o.fK,bD:e.bC*t.bC+e.bD*t.bD+e.fK*t.fK,fK:e.bC*r.bC+e.bD*r.bD+e.fK*r.fK}})),Df=r((function(n,e){var r=n.cH,t=e.bC-r.bC,o=e.bD-r.bD,a=e.fK-r.fK,i=n.de,c=n.dd,l=n.dc;return{bC:t*l.bC+o*l.bD+a*l.fK,bD:t*c.bC+o*c.bD+a*c.fK,fK:t*i.bC+o*i.bD+a*i.fK}})),Sf=r((function(n,e){return{cH:u(Df,n,jl(e)),dc:u(wf,n,ql(e)),dd:u(wf,n,Yl(e)),de:u(wf,n,Xl(e))}})),$f=t((function(n,e,r){return{bC:n,bD:e,fK:r}})),Nf=r((function(n,e){return u(ft,n,e)})),zf=r((function(n,e){return 0>T(n,e)?n:e})),_f=r((function(n,e){return u(zf,n,e)})),Af=r((function(n,e){var r=e,t=n;return{dZ:u(Nf,t.dZ,r.dZ),d_:u(Nf,t.d_,r.d_),d$:u(Nf,t.d$,r.d$),d0:u(_f,t.d0,r.d0),d1:u(_f,t.d1,r.d1),d2:u(_f,t.d2,r.d2)}})),Rf=function(n){return.5*n},Ff=r((function(n,e){return e+n})),Vf=r((function(n,e){var r=n.a,t=n.c,o=Rf(uu(n.b)),a=Rf(uu(r)),i=Rf(uu(t)),c=function(n){return w(n.bC,n.bD,n.fK)}(e),l=c.a,f=c.b,s=c.c;return{dZ:u(Ff,a,l),d_:u(Ff,o,f),d$:u(Ff,i,s),d0:u(Mf,a,l),d1:u(Mf,o,f),d2:u(Mf,i,s)}})),Bf=o((function(n,e,r,t){var o=r.eG,a=2*r.eX*e,i=2*r.eW*e,c=2*r.eV*e,l=o.fK*e,s=o.bD*e,d=o.bC*e,m=Xl(n),v=ac(c*m.bC)+ac(i*m.bD)+ac(a*m.fK),b=Yl(n),p=ac(c*b.bC)+ac(i*b.bD)+ac(a*b.fK),g=ql(n),h=ac(c*g.bC)+ac(i*g.bD)+ac(a*g.fK),x=u(Vf,w(h,p,v),u(Df,n,f($f,d,s,l)));return Br(t.$?x:u(Af,t.a,x))})),kf=o((function(n,e,r,t){n:for(;;){if(!t.b)return r;var o=t.a,a=t.b;switch(o.$){case 0:n=c=n,e=l=e,r=f=r,t=a;continue n;case 1:var i=s(Bf,n,e,o.a,r);n=c=n,e=l=e,r=f=i,t=a;continue n;case 2:n=c=n,e=l=e,r=f=r,t=a;continue n;case 3:i=s(Bf,n,e,o.a,r),n=c=n,e=l=e,r=f=i,t=a;continue n;case 4:var c=n,l=e,f=s(kf,n,e,r,o.a);n=c,e=l,r=f,t=a;continue n;default:var d=o.a,m=o.b,v=u(Sf,Lf(d),n),b=e*d.b3;n=c=n,e=l=e,r=f=s(kf,v,b,r,_([m])),t=a;continue n}}})),Kf=function(n){return n[0]},Ef=function(n){return n[1]},Hf=function(n){return n[2]},If=function(n){return{$:4,a:n}},jf=r((function(n,e){for(;;){if(!n.b)return e;var r=n.a;n=n.b,e=u(Tr,r,e)}})),Wf=function(n){return If(u(jf,n,$))},Uf={dA:!0,q:1,r:0,s:0,t:0,u:1,v:0,w:0,x:0,y:1,H:0,I:0,J:0,b3:1},Of=uf({be:Zu,cy:0,cW:8,bt:Xu,db:255,bE:Zu,bF:Zu}),Gf=j,qf={bI:0,eF:!1,bO:0,cS:0,b1:0,c5:0,bC:0,bD:0,fK:0},Yf=r((function(n,e){return Hu({dI:n.bC,dJ:n.b1,dK:e.bC,dL:e.b1,dM:n.bD,dN:n.bO,dO:e.bD,dP:e.bO,dQ:n.fK,dR:n.bI,dS:e.fK,dT:e.bI,dU:n.c5,dV:n.cS,dW:e.c5,dX:e.cS})})),Xf=L({bl:u(Yf,qf,qf),bS:u(Yf,qf,qf),bT:u(Yf,qf,qf),bU:u(Yf,qf,qf)},s(Au,0,0,0,0)),Zf=r((function(n,e){return n*e})),Jf=function(n){return s(Ou,515,n.ac,n.Y,n.X)},Qf=_([Jf({X:1,Y:0,ac:!0}),lf({be:sf,cy:240,cW:0,bt:514,db:0,bE:sf,bF:sf}),hf]),ns=r((function(n,e){var r=n,t=e.eS,o=e.ex,a=uu(e.fb),i=uu(t),c=r.cU;if(c.$){var l=c.a;return vc(i)?Hu({dI:2/(o*l),dJ:0,dK:0,dL:0,dM:0,dN:2/l,dO:0,dP:0,dQ:0,dR:0,dS:0,dT:-1,dU:0,dV:0,dW:0,dX:1}):Hu({dI:2/(o*l),dJ:0,dK:0,dL:0,dM:0,dN:2/l,dO:0,dP:0,dQ:0,dR:0,dS:-2/(i-a),dT:-(i+a)/(i-a),dU:0,dV:0,dW:0,dX:1})}var u=c.a;return vc(i)?Hu({dI:1/(o*u),dJ:0,dK:0,dL:0,dM:0,dN:1/u,dO:0,dP:0,dQ:0,dR:0,dS:-1,dT:-2*a,dU:0,dV:0,dW:-1,dX:0}):Hu({dI:1/(o*u),dJ:0,dK:0,dL:0,dM:0,dN:1/u,dO:0,dP:0,dQ:0,dR:0,dS:-(i+a)/(i-a),dT:-2*i*a/(i-a),dU:0,dV:0,dW:-1,dX:0})})),es=r((function(n,e){return 1==(1&n>>e)?0:1})),rs=t((function(n,e,r){return Lu(u(Et,(function(r){var t=r<<4;return f(Fu,n,L(e,s(Au,u(es,r,0),u(es,r,1),u(es,r,2),u(es,r,3))),function(n){return _([Jf({X:1,Y:0,ac:!0}),lf({be:sf,cy:240,cW:n,bt:514,db:0,bE:sf,bF:sf}),hf])}(t))}),u(Gr,1,u(Ni,2,r)-1)))})),ts=function(n){return{bC:-n.bC,bD:-n.bD,fK:-n.fK}},os=function(n){return ts(Xl(n))},as={bC:0,bD:1,fK:0},is=as,cs={cH:fu,dc:mu,dd:is,de:bu},ls=r((function(n,e){var r,t,o,a,i;return t=jl(r=u(Sf,e,n)),o=Xl(r),a=Yl(r),i=ql(r),Hu({dI:i.bC,dJ:a.bC,dK:o.bC,dL:t.bC,dM:i.bD,dN:a.bD,dO:o.bD,dP:t.bD,dQ:i.fK,dR:a.fK,dS:o.fK,dT:t.fK,dU:0,dV:0,dW:0,dX:1})})),us=function(n){return ql(n)},fs=t((function(n,e,r){return{bC:n,bD:e,fK:r}})),ss=function(n){return Yl(n)},ds=r((function(n,e){var r,t=_([(1,{$:1,a:1}),$u(0),Cu(!0),s(Tu,0,0,0,0)]),o=function(){var e=n.ev;switch(e.$){case 0:return w(t,"0",1);case 1:return w(u(Tr,Pu,t),"1",1);default:return w(t,"0",e.a)}}(),a=o.a,i=o.b,c=o.c,l=n.$7,d=l.a,v=l.b,b=u(Yc,"height",Er(v)+"px"),p=d,g=p/v,h=u(wu,(function(e){return function(n){var e=function(n){return n.c8}(n.eD),r={cH:yf(e),dc:us(e),dd:ss(e),de:ts(os(e))},t=Wf(n.ds),o=s(kf,r,1,kr,_([t]));if(1===o.$)return $;var a=o.a,i=u(ls,cs,e),c=u(Zf,.99,u(Nf,uu(n.dl),Kl(Cf(a)))),l=Tf(a),d=function(n){var e=n,r=u(ft,ac(e.bC),u(ft,ac(e.bD),ac(e.fK)));if(r){var t=e.fK/r,o=e.bD/r,a=e.bC/r;return Gf(a*a+o*o+t*t)*r}return 0}(f(fs,l.a,l.b,l.c)),v=u(Zf,1.01,u(Ff,d,Kl(Pf(a)))),b=u(ns,n.eD,{ex:n.ex,eS:v,fb:c}),p=function(n){return{dI:n[0],dM:n[1],dQ:n[2],dU:n[3],dJ:n[4],dN:n[5],dR:n[6],dV:n[7],dK:n[8],dO:n[9],dS:n[10],dW:n[11],dL:n[12],dP:n[13],dT:n[14],dX:n[15]}}(b).dX,g=p?ts(os(e)):yf(e),h=function(){var e=n.fw;switch(e.$){case 0:return L(0,0);case 1:return L(1,0);case 2:return L(2,0);case 3:return L(3,e.a);case 4:return L(4,e.a);default:return L(5,0)}}(),x=h.a,C=h.b,P=u(Ku,n.eQ,n.fC),M=Hu({dI:0,dJ:g.bC,dK:Kf(P),dL:n.en,dM:0,dN:g.bD,dO:Ef(P),dP:d,dQ:0,dR:g.fK,dS:Hf(P),dT:x,dU:0,dV:p,dW:0,dX:C}),T=m(ju,M,i,b,Uf,t,{N:$,W:$,fm:$}),y=n.e6;switch(y.$){case 0:return Lu(_([f(Fu,T.N,L(w=y.a,Ru),xf),f(Fu,T.W,Xf,xf)]));case 1:var w=y.a;return Lu(_([f(Fu,T.N,Xf,xf),_([Of]),f(Fu,T.fm,w.bl,Yu),_([df(0)]),f(Fu,T.N,L(w,Ru),Qf),f(Fu,T.W,Xf,xf)]));default:var D=y.a,S=y.b;return Lu(_([f(Fu,T.N,L(S,Ru),xf),_([Of]),u(vf,T.fm,D),f(rs,T.N,S,Wr(D)),f(Fu,T.W,Xf,xf)]))}}({ex:g,eD:n.eD,dl:n.dl,ds:e.ds,eQ:e.eQ,e6:e.e6,en:c,fw:e.fw,fC:e.fC})}),e),x=u(Yc,"width",Er(p)+"px"),C=function(n){var e,r,t=n.b,o=n.c,a=n.d,i=function(n){return zi(1e4*n)/100};return e=_(["rgba(",dc(i(n.a)),"%,",dc(i(t)),"%,",dc(i(o)),"%,",dc((r=a,zi(1e3*r)/1e3)),")"]),u(Hr,"",e)}(n.dh);return f(Su,"div",_([u(Yc,"padding","0px"),x,b]),_([L(i,f(_u,a,_([(r=zi(p*c),u(ce,"width",Er(r))),Du(zi(v*c)),x,b,u(Yc,"display","block"),u(Yc,"background-color",C)]),h))]))})),ms={bC:.31271,bD:.32902},vs=r((function(n,e){var r=n,t=e.eK,o=t.bC,a=t.bD,i=t.fK,c=u(Ku,e.co,e.ce);return{bI:Hf(c),eF:r,bO:Ef(c),cS:0,b1:Kf(c),c5:1,bC:-o,bD:-a,fK:-i}})),bs={$:0},ps=r((function(n,e){return T(e,n)>0})),gs=function(n){return function(n){for(;;){if(P(n.e1,0)&&P(n.e2,0))return qf;if(!u(ps,uu(n.e1),uu(n.e2))){var e=ac(n.e2/hu),r=ac(n.e1/hu),t=n.b6,o=t.bC,a=t.bD,i=t.fK,c=u(Ku,1,n.ce);return{bI:r*Hf(c),eF:!1,bO:r*Ef(c),cS:e/r,b1:r*Kf(c),c5:3,bC:o,bD:a,fK:i}}n={ce:n.ce,e1:n.e2,e2:n.e1,b6:ts(n.b6)}}}({ce:n.ce,e1:n.co,e2:0,b6:n.b6})},hs=t((function(n,e,r){return 0>T(r,n)?n:T(r,e)>0?e:r})),xs=function(n){var e=f(hs,1667,25e3,n),r=e>4e3?-3025846900/(e*e*e)+2107037.9/(e*e)+.2226347*1e3/e+.24039:-266123900.00000003/(e*e*e)-.2343589*1e6/(e*e)+877.6956/e+.17991;return{bC:r,bD:e>2222?e>4e3?r*r*r*3.081758-r*r*5.8733867+3.75112997*r-.37001483:r*r*r*-.9549476-r*r*1.37418593+2.09137015*r-.16748867:r*r*r*-1.1063814-r*r*1.3481102+2.18555832*r-.20219683}},Cs=xs(12e3),Ps=xs(5600),Ms=r((function(n,e){return{$:2,a:n,b:e}})),Ts=function(n){return{$:0,a:n}},ys=function(n){return n.eF},Ls=Ts(Xf.a),ws=r((function(n,e){return f(Kt,r((function(e,r){var t=r.a,o=r.b;return n(e)?L(u(Tr,e,t),o):L(t,u(Tr,e,o))})),L($,$),e)})),Ds=function(n){return Hu({dI:n.bC,dJ:n.b1,dK:0,dL:0,dM:n.bD,dN:n.bO,dO:0,dP:0,dQ:n.fK,dR:n.bI,dS:0,dT:0,dU:n.c5,dV:n.cS,dW:0,dX:0})},Ss=l((function(n,e,r,t,o,a,i,c){var l=u(ws,ys,_([n,e,r,t])),f=l.a;if(f.b){var s=S(f,l.b);if(s.b&&s.b.b&&s.b.b.b&&s.b.b.b.b&&!s.b.b.b.b.b){var d=s.a,m=s.b,v=m.a,b=m.b,p=b.a,g=b.b.a;return u(Ms,u(Et,Ds,f),{bl:u(Yf,d,v),bS:u(Yf,p,g),bT:u(Yf,o,a),bU:u(Yf,i,c)})}return Ls}return Ts({bl:u(Yf,n,e),bS:u(Yf,r,t),bT:u(Yf,o,a),bU:u(Yf,i,c)})})),$s=t((function(n,e,r){return b(Ss,n,e,r,qf,qf,qf,qf,qf)})),Ns=function(n){return n.ey},zs=o((function(n,e,r,t){return{$:2,a:n,b:e,c:r,d:t}})),_s=o((function(n,e,r,t){return{$:3,a:n,b:e,c:r,d:t}})),As=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),Rs=o((function(n,e,r,t){return{$:6,a:n,b:e,c:r,d:t}})),Fs=o((function(n,e,r,t){return{$:7,a:n,b:e,c:r,d:t}})),Vs=o((function(n,e,r,t){return{$:5,a:n,b:e,c:r,d:t}})),Bs=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),ks=function(n){switch(n.$){case 0:return n;case 1:return s(Bs,n.a,n.b,n.c,1);case 2:return s(zs,n.a,n.b,n.c,1);case 3:return s(_s,n.a,n.b,n.c,1);case 4:return s(As,n.a,n.b,n.c,1);case 5:return s(Vs,n.a,n.b,n.c,1);case 6:return s(Rs,n.a,n.b,n.c,1);case 7:return s(Fs,n.a,n.b,n.c,1);case 8:case 9:default:return n}},Ks={$:0},Es=l((function(n,e,r,t,o,a,i,c){for(;;){if(!c.b)return{dZ:e,d_:t,d$:a,d0:n,d1:r,d2:o};var l=c.b,f=i(c.a);n=u(_f,f.d0,n),e=u(Nf,f.dZ,e),r=u(_f,f.d1,r),t=u(Nf,f.d_,t),o=u(_f,f.d2,o),a=u(Nf,f.d$,a),i=i,c=l}})),Hs=t((function(n,e,r){var t=n(e);return b(Es,t.d0,t.dZ,t.d1,t.d_,t.d2,t.d$,n,r)})),Is=r((function(n,e){return 1>T(e,n)})),js=function(n){return u(Is,n.dZ,n.d0)&&u(Is,n.d_,n.d1)&&u(Is,n.d$,n.d2)?n:{dZ:u(Nf,n.d0,n.dZ),d_:u(Nf,n.d1,n.d_),d$:u(Nf,n.d2,n.d$),d0:u(_f,n.d0,n.dZ),d1:u(_f,n.d1,n.d_),d2:u(_f,n.d2,n.d$)}},Ws=function(n){return n},Us=function(n){return n.bC},Os=function(n){return n.bD},Gs=function(n){return n.fK},qs=function(n){var e=n.a,r=n.b,t=n.c,o=Us(e),a=Os(e),i=Gs(e),c=Us(r),l=Os(r),f=Gs(r),s=Us(t),d=Os(t),m=Gs(t);return js({dZ:u(Nf,o,u(Nf,c,s)),d_:u(Nf,a,u(Nf,l,d)),d$:u(Nf,i,u(Nf,f,m)),d0:u(_f,o,u(_f,c,s)),d1:u(_f,a,u(_f,l,d)),d2:u(_f,i,u(_f,f,m))})},Ys=function(n){return new Float64Array([n.bC,n.bD,n.fK])},Xs=function(n){return Ys(n)},Zs=function(n){return Ys(n)},Js=r((function(n,e){return{bC:e.bD*n.fK-e.fK*n.bD,bD:e.fK*n.bC-e.bC*n.fK,fK:e.bC*n.bD-e.bD*n.bC}})),Qs=r((function(n,e){return{bC:e.bC-n.bC,bD:e.bD-n.bD,fK:e.fK-n.fK}})),nd={bC:0,bD:0,fK:0},ed=r((function(n,e){var r=n,t=e,o=u(ft,ac(t.bC),u(ft,ac(t.bD),ac(t.fK)));if(o){var a=t.fK/o,i=t.bD/o,c=t.bC/o,l=Gf(c*c+i*i+a*a);return{bC:r*c/l,bD:r*i/l,fK:r*a/l}}return nd})),rd=ed(1),td=t((function(n,e,r){return rd(u(Js,u(Qs,e,r),u(Qs,n,e)))})),od=function(n){var e=n.a,r=n.b,t=n.c,o=Zs(f(td,e,r,t));return w({o:o,b$:Xs(e)},{o:o,b$:Xs(r)},{o:o,b$:Xs(t)})},ad=r((function(n,e){return{$:2,a:n,b:e}})),id=ad({dp:3,dz:0,d4:4}),cd=t((function(n,e,r){return w(n,e,r)})),ld=t((function(n,e,r){return{bC:n,bD:e,fK:r}})),ud=(ko=u(Zf,-.5,1),Ko=u(Zf,-.5,1),Eo=u(Zf,-.5,1),Ho=f(ld,Eo,Ko,ko),Io=u(Zf,.5,1),jo=f(ld,Eo,Ko,Io),Wo=u(Zf,.5,1),Uo=f(ld,Eo,Wo,ko),Oo=f(ld,Eo,Wo,Io),Go=u(Zf,.5,1),qo=f(ld,Go,Ko,ko),Yo=f(ld,Go,Wo,ko),Xo=f(ld,Go,Ko,Io),Zo=f(ld,Go,Wo,Io),ks(function(n){if(n.b){var e=n.a,r=n.b,t=id(u(Et,od,n));return s(zs,f(Hs,qs,e,r),n,t,0)}return Ks}(_([f(cd,Ho,Yo,qo),f(cd,Ho,Uo,Yo),f(cd,jo,Xo,Zo),f(cd,jo,Zo,Oo),f(cd,qo,Yo,Zo),f(cd,qo,Zo,Xo),f(cd,Ho,Oo,Uo),f(cd,Ho,jo,Oo),f(cd,Ho,qo,Xo),f(cd,Ho,Xo,jo),f(cd,Uo,Zo,Yo),f(cd,Uo,Oo,Zo)])))),fd={$:0},sd=t((function(n,e,r){return{$:1,a:n,b:e,c:r}})),dd=t((function(n,e,r){var t=e.a,o=e.b,a=n(e.c),i=n(o),c=n(t),l=Zs(f(td,c,i,a)),s={o:l,b$:Xs(c)},d={o:l,b$:Xs(i)},m={o:l,b$:Xs(a)};return u(Tr,s,u(Tr,d,u(Tr,m,r)))})),md=function(n){return n.C},vd=o((function(n,e,r,t){return 1===e.$||1===r.$||1===t.$?kr:Br(f(n,e.a,r.a,t.a))})),bd=4294967295>>>32-ot,pd=h,gd=t((function(n,e,r){for(;;){var t=u(pd,bd&e>>>n,r);if(t.$)return u(pd,bd&e,t.a);n-=ot,e=e,r=t.a}})),hd=r((function(n,e){var r=e.a,t=e.b,o=e.c,a=e.d;return 0>n||T(n,r)>-1?kr:T(n,function(n){return n>>>5<<5}(r))>-1?Br(u(pd,bd&n,a)):Br(f(gd,t,n,o))})),xd=function(n){return n.an},Cd=r((function(n,e){return u(hd,n,xd(e))})),Pd=t((function(n,e,r){for(;;){var t=u(dt,Jr,n),o=t.a,a=t.b;if(0>T(ut(o),Jr))return u(bt,!0,{z:e,l:r,p:o});n=a,e=u(Tr,ct(o),e),r+=1}})),Md=function(n){return n.b?f(Pd,n,$,0):at},Td=r((function(n,e){return!u(fc,u(vo,uc,n),e)})),yd=r((function(n,e){return f(Kt,r((function(e,r){return n(e)?u(Tr,e,r):r})),$,e)})),Ld=r((function(n,e){var r=function(n){return n.a}(n),t=function(n){var e=n.a,t=n.b,o=n.c;return e>=0&&0>T(e,r)&&t>=0&&0>T(t,r)&&o>=0&&0>T(o,r)};return u(Td,t,e)?{C:e,an:n}:{C:u(yd,t,e),an:n}})),wd=t((function(n,e,r){return{$:3,a:n,b:e,c:r}}))({dp:1,dz:3,d4:4}),Dd=r((function(n,e){var r=e;return L(w(n.bC,n.bD,n.fK),w(r.bC,r.bD,r.fK))})),Sd=r((function(n,e){n:for(;;){if(-2===e.$)return kr;var r=e.c,t=e.d,o=e.e;switch(u(yo,n,e.b)){case 0:n=n,e=t;continue n;case 1:return Br(r);default:n=n,e=o;continue n}}})),$d=f(ku,0,0,0),Nd=i((function(n,e,r,t,o,a){var i=a.a,c=a.b,l=a.c,f=u(Sd,u(Dd,n,e),o);if(f.$){var s={o:$d,b$:Xs(e)},d={o:$d,b$:Xs(n)},m=l+1;return w(u(Tr,w(r,l,m),u(Tr,w(r,m,t),i)),u(Tr,s,u(Tr,d,c)),l+2)}return w(u(Tr,w(r,f.a,t),i),c,l)})),zd=a((function(n,e,r,t,o){for(;;){if(!r.b)return L(o.a,Xr(o.b));var a=r.a,i=a.a,c=a.b,l=r.b,u=n(a.c),f=n(c),s=n(i),d=t+2,v=t+1,b=n,p=e,g=l,h=t+3,x=m(Nd,u,s,d,t,e,m(Nd,f,u,v,d,e,m(Nd,s,f,t,v,e,o)));n=b,e=p,r=g,t=h,o=x}})),_d=a((function(n,e,r,t,o){for(;;){if(!e.b)return w(t,o,r);var a=e.a,i=a.a,c=a.b,l=e.b,s=n(a.c),d=n(c),m=n(i),v=r+2,b=r+1,p=r,g=f(wo,u(Dd,m,s),v,f(wo,u(Dd,s,d),b,f(wo,u(Dd,d,m),p,o)));n=n,e=l,r+=3,t=u(Tr,w(p,b,v),t),o=g}})),Ad=t((function(n,e,r){var o,a=u(Fo,(function(n){var e=n.a,r=n.b,a=n.c;return s(vd,t((function(n,e,r){return w(n,e,r)})),u(Cd,e,o),u(Cd,r,o),u(Cd,a,o))}),md(o=r)),i=f(Kt,dd(e),$,a),c=d(_d,e,a,0,$,xo),l=d(zd,e,c.b,a,0,w(c.a,$,c.c)),m=l.a,v=l.b,b=v.b?S(i,v):i;return f(sd,n,u(Ld,Md(b),m),u(wd,b,m))})),Rd=function(n){return{C:u(Et,(function(n){return w(3*n,3*n+1,3*n+2)}),u(Gr,0,Wr(n)-1)),an:Md(Lu(u(Et,(function(n){return _([n.a,n.b,n.c])}),n)))}},Fd=function(n){switch(n.$){case 0:return fd;case 1:case 2:return f(Ad,n.a,zt,Rd(u(Et,Ws,n.b)));case 3:return f(Ad,n.a,zt,n.b);case 4:case 5:case 6:case 7:return f(Ad,n.a,(function(n){return n.b$}),n.b);case 8:case 9:default:return fd}},Vd=Fd(ud),Bd=function(n){return n.$7},kd={$:0},Kd=kd,Ed=r((function(n,e){return{$:1,a:n,b:e}})),Hd={src:"\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        void main () {\n            gl_FragColor = texture2D(colorTexture, interpolatedUv);\n        }\n    ",attributes:{},uniforms:{colorTexture:"bL"}},Id=function(n){return{$:5,a:n}},jd=Id(1029),Wd=Id(1028),Ud=t((function(n,e,r){return 1===e?u(Tr,n?jd:Wd,r):r})),Od={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute mediump vec2 uv;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedUv = uv;\n        }\n    ",attributes:{position:"b$",uv:"L"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Gd=o((function(n,e,r,t){return u(Ed,e,l((function(e,o,a,i,c,l,u,s){return d(Qu,f(Ud,i,t,s),Od,Hd,r,{bL:n,b:a,c:o,d:l,e:e,f:c})})))})),qd={src:"\n        precision lowp float;\n        \n        uniform lowp vec3 constantColor;\n        \n        void main () {\n            gl_FragColor = vec4(constantColor, 1.0);\n        }\n    ",attributes:{},uniforms:{constantColor:"aC"}},Yd={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{position:"b$"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Xd=o((function(n,e,r,t){return u(Ed,e,l((function(e,o,a,i,c,l,u,s){return d(Qu,f(Ud,i,t,s),Yd,qd,r,{aC:n,b:a,c:o,d:l,e:e,f:c})})))})),Zd=r((function(n,e){return{$:3,a:n,b:e}})),Jd={src:"\n        precision lowp float;\n        \n        uniform lowp vec3 constantColor;\n        uniform lowp float pointRadius;\n        uniform highp mat4 sceneProperties;\n        \n        float pointAlpha(float pointRadius, vec2 pointCoord) {\n            float pointSize = 2.0 * pointRadius;\n            float x = (pointSize + 2.0) * (pointCoord.s - 0.5);\n            float y = (pointSize + 2.0) * (pointCoord.t - 0.5);\n            float r = sqrt(x * x + y * y);\n            float innerRadius = pointRadius;\n            float outerRadius = pointRadius + 1.0;\n            if (r > outerRadius) {\n                return 0.0;\n            } else if (r > innerRadius) {\n                return outerRadius - r;\n            } else {\n                return 1.0;\n            }\n        }\n        \n        void main () {\n            float supersampling = sceneProperties[3][0];\n            float alpha = pointAlpha(pointRadius * supersampling, gl_PointCoord);\n            gl_FragColor = vec4(constantColor, alpha);\n        }\n    ",attributes:{},uniforms:{constantColor:"aC",pointRadius:"b_",sceneProperties:"e"}},Qd={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform lowp float pointRadius;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            float supersampling = sceneProperties[3][0];\n            gl_PointSize = 2.0 * pointRadius * supersampling + 2.0;\n        }\n    ",attributes:{position:"b$"},uniforms:{modelMatrix:"b",modelScale:"c",pointRadius:"b_",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},nm=o((function(n,e,r,t){return u(Zd,r,l((function(r,o,a,i,c,l,u,f){return d(Qu,f,Qd,Jd,t,{aC:n,b:a,c:o,b_:e,d:l,e:r,f:c})})))})),em={src:"\n        precision mediump float;\n        \n        uniform mediump vec3 emissiveColor;\n        uniform highp mat4 sceneProperties;\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{emissiveColor:"aR",sceneProperties:"e"}},rm=Pr,tm=a((function(n,e,r,t,o){return u(Ed,r,l((function(r,a,i,c,l,s,m,v){return d(Qu,f(Ud,c,o,v),Yd,em,t,{aR:u(rm,e,n),b:i,c:a,d:s,e:r,f:l})})))})),om={src:"\n        precision mediump float;\n        \n        uniform mediump vec3 emissiveColor;\n        uniform lowp float pointRadius;\n        uniform highp mat4 sceneProperties;\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        float pointAlpha(float pointRadius, vec2 pointCoord) {\n            float pointSize = 2.0 * pointRadius;\n            float x = (pointSize + 2.0) * (pointCoord.s - 0.5);\n            float y = (pointSize + 2.0) * (pointCoord.t - 0.5);\n            float r = sqrt(x * x + y * y);\n            float innerRadius = pointRadius;\n            float outerRadius = pointRadius + 1.0;\n            if (r > outerRadius) {\n                return 0.0;\n            } else if (r > innerRadius) {\n                return outerRadius - r;\n            } else {\n                return 1.0;\n            }\n        }\n        \n        void main () {\n            vec4 color = toSrgb(emissiveColor, sceneProperties);\n            float supersampling = sceneProperties[3][0];\n            float alpha = pointAlpha(pointRadius * supersampling, gl_PointCoord);\n            gl_FragColor = vec4(color.rgb, alpha);\n        }\n    ",attributes:{},uniforms:{emissiveColor:"aR",pointRadius:"b_",sceneProperties:"e"}},am=a((function(n,e,r,t,o){return u(Zd,t,l((function(t,a,i,c,l,f,s,m){return d(Qu,m,Qd,om,o,{aR:u(rm,e,n),b:i,c:a,b_:r,d:f,e:t,f:l})})))})),im={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 materialColor;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{enabledLights:"R",lights12:"bl",lights34:"bS",lights56:"bT",lights78:"bU",materialColor:"cz",sceneProperties:"e",viewMatrix:"f"}},cm={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n        }\n    ",attributes:{normal:"o",position:"b$"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},lm=o((function(n,e,r,t){return u(Ed,e,l((function(e,o,a,i,c,l,u,s){var m=u.a,v=u.b;return d(Qu,f(Ud,i,t,s),cm,im,r,{R:v,bl:m.bl,bS:m.bS,bT:m.bT,bU:m.bU,cz:n,b:a,c:o,d:l,e:e,f:c})})))})),um={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D materialColorTexture;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n            vec3 materialColor = fromSrgb(texture2D(materialColorTexture, interpolatedUv).rgb);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{enabledLights:"R",lights12:"bl",lights34:"bS",lights56:"bT",lights78:"bU",materialColorTexture:"cA",normalMapTexture:"aY",sceneProperties:"e",useNormalMap:"a3",viewMatrix:"f"}},fm={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        attribute mediump vec2 uv;\n        attribute highp vec3 tangent;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getWorldTangent(vec3 modelTangent, vec4 modelScale, mat4 modelMatrix) {\n            return (modelMatrix * vec4(safeNormalize(modelScale.xyz * modelTangent), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = uv;\n            interpolatedTangent = getWorldTangent(tangent, modelScale, modelMatrix);\n        }\n    ",attributes:{normal:"o",position:"b$",tangent:"ep",uv:"L"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},sm=i((function(n,e,r,t,o,a){return u(Ed,t,l((function(t,i,c,l,u,s,m,v){var b=m.a,p=m.b;return d(Qu,f(Ud,l,a,v),fm,um,o,{R:p,bl:b.bl,bS:b.bS,bT:b.bT,bU:b.bU,cA:n,b:c,c:i,aY:e,d:s,e:t,a3:r,f:u})})))})),dm={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D baseColorTexture;\n        uniform lowp vec4 constantBaseColor;\n        uniform mediump sampler2D roughnessTexture;\n        uniform lowp vec2 constantRoughness;\n        uniform mediump sampler2D metallicTexture;\n        uniform lowp vec2 constantMetallic;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getFloatValue(sampler2D texture, vec2 uv, vec2 constantValue) {\n            if (constantValue.y == 1.0) {\n                return constantValue.x;\n            } else {\n                vec4 textureColor = texture2D(texture, uv);\n                return dot(textureColor, vec4(0.2126, 0.7152, 0.0722, 0.0));\n            }\n        }\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 baseColor = fromSrgb(texture2D(baseColorTexture, interpolatedUv).rgb) * (1.0 - constantBaseColor.w) + constantBaseColor.rgb * constantBaseColor.w;\n            float roughness = getFloatValue(roughnessTexture, interpolatedUv, constantRoughness);\n            float metallic = getFloatValue(metallicTexture, interpolatedUv, constantMetallic);\n        \n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{baseColorTexture:"cc",constantBaseColor:"cg",constantMetallic:"ch",constantRoughness:"ci",enabledLights:"R",lights12:"bl",lights34:"bS",lights56:"bT",lights78:"bU",metallicTexture:"cD",normalMapTexture:"aY",roughnessTexture:"c_",sceneProperties:"e",useNormalMap:"a3",viewMatrix:"f"}},mm={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 baseColor;\n        uniform lowp float roughness;\n        uniform lowp float metallic;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{baseColor:"cb",enabledLights:"R",lights12:"bl",lights34:"bS",lights56:"bT",lights78:"bU",metallic:"cC",roughness:"cZ",sceneProperties:"e",viewMatrix:"f"}},vm=i((function(n,e,r,t,o,a){return u(Ed,t,l((function(t,i,c,l,u,s,m,v){var b=m.a,p=m.b;return d(Qu,f(Ud,l,a,v),cm,mm,o,{cb:n,R:p,bl:b.bl,bS:b.bS,bT:b.bT,bU:b.bU,cC:r,b:c,c:i,d:s,cZ:e,e:t,f:u})})))})),bm=r((function(n,e){return{$:1,a:n,b:e}})),pm=r((function(n,e){return e.$?L(e.a.B,1):L(n,0)})),gm=s(Au,0,0,0,0),hm=r((function(n,e){var r;return e.$?L(e.a.B,gm):L(n,s(Au,Kf(r=e.a),Ef(r),Hf(r),1))})),xm=r((function(n,e){var r,t=L(n,e);return t.a.$?u(bm,L(r=t.a.a.B,gm),u(pm,r,e)):t.b.$?u(bm,u(hm,r=t.b.a.B,n),u(pm,r,e)):{$:0,a:t.a.a}})),Cm=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),Pm=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),Mm=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),Tm=u(rf,0,0),ym=r((function(n,e){return e.$?L(e.a.B,Tm):L(n,u(rf,e.a,1))})),Lm=o((function(n,e,r,t){var o,a=s(Mm,n,e,r,t);return a.a.$?s(Pm,L(o=a.a.a.B,gm),u(ym,o,e),u(ym,o,r),u(pm,o,t)):a.b.$?s(Pm,u(hm,o=a.b.a.B,n),L(o,Tm),u(ym,o,r),u(pm,o,t)):a.c.$?s(Pm,u(hm,o=a.c.a.B,n),u(ym,o,e),L(o,Tm),u(pm,o,t)):a.d.$?s(Pm,u(hm,o=a.d.a.B,n),u(ym,o,e),u(ym,o,r),L(o,1)):f(Cm,a.a.a,a.b.a,a.c.a)})),wm={src:"\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        uniform mediump float backlight;\n        uniform highp mat4 sceneProperties;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            vec3 emissiveColor = fromSrgb(texture2D(colorTexture, interpolatedUv).rgb) * backlight;\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{backlight:"b8",colorTexture:"bL",sceneProperties:"e"}},Dm=a((function(n,e,r,t,o){return u(Ed,r,l((function(r,a,i,c,l,u,s,m){return d(Qu,f(Ud,c,o,m),Od,wm,t,{b8:e,bL:n,b:i,c:a,d:u,e:r,f:l})})))})),Sm={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        attribute mediump vec2 uv;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = uv;\n            interpolatedTangent = vec3(0.0, 0.0, 0.0);\n        }\n    ",attributes:{normal:"o",position:"b$",uv:"L"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},$m=o((function(n,e,r,t){return u(Ed,e,l((function(e,o,a,i,c,l,u,s){var m=u.a,v=u.b;return d(Qu,f(Ud,i,t,s),Sm,um,r,{R:v,bl:m.bl,bS:m.bS,bT:m.bT,bU:m.bU,cA:n,b:a,c:o,aY:n,d:l,e:e,a3:0,f:c})})))})),Nm=function(n){return e(9,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return n(e,r,t,o,a,i,c,l,u)}}}}}}}}}))}((function(n,e,r,t,o,a,i,c,s){return u(Ed,i,l((function(i,l,u,m,v,b,p,g){var h=p.a,x=p.b;return d(Qu,f(Ud,m,s,g),Sm,dm,c,{cc:n,cg:e,ch:a,ci:t,R:x,bl:h.bl,bS:h.bS,bT:h.bT,bU:h.bU,cD:o,b:u,c:l,aY:n,d:b,c_:r,e:i,a3:0,f:v})})))})),zm=t((function(n,e,r){return r>.5?e+(1-r)*(n-e):n+r*(e-n)})),_m=function(n){return f(ld,function(n){return f(zm,n.d0,n.dZ,.5)}(n),function(n){return f(zm,n.d1,n.d_,.5)}(n),function(n){return f(zm,n.d2,n.d$,.5)}(n))},Am=function(n){var e=Tf(n),r=e.a,t=e.b,o=e.c;return{eG:_m(n),eV:r/2,eW:t/2,eX:o/2}},Rm=r((function(n,e){switch(n.$){case 0:if(n.b.$){var r=n.b.a.B;switch(e.$){case 0:case 1:case 2:case 3:case 4:return Kd;case 5:case 6:case 7:return o=e.c,a=e.d,s(Gd,r,Am(F=e.a),o,a);case 8:case 9:default:return Kd}}else{var t=n.b.a;switch(e.$){case 0:return Kd;case 1:var o=e.c,a=e.d;return s(Xd,t,Am(F=e.a),o,a);case 2:case 3:case 4:return o=e.c,a=e.d,s(Xd,t,Am(F=e.a),o,a);case 5:case 6:case 7:return o=e.c,a=e.d,s(Xd,t,Am(F=e.a),o,a);case 8:case 9:return o=e.c,s(Xd,t,Am(F=e.a),o,0);default:return o=e.d,s(nm,t,e.b,Am(F=e.a),o)}}case 1:if(n.b.$)switch(r=n.b.a.B,c=n.c,e.$){case 0:case 1:case 2:case 3:case 4:return Kd;case 5:case 6:case 7:return o=e.c,a=e.d,d(Dm,r,c,Am(F=e.a),o,a);case 8:case 9:default:return Kd}else{var i=n.b.a,c=n.c;switch(e.$){case 0:return Kd;case 1:case 2:case 3:case 4:case 5:case 6:case 7:return o=e.c,a=e.d,d(tm,i,c,Am(F=e.a),o,a);case 8:case 9:return o=e.c,d(tm,i,c,Am(F=e.a),o,0);default:return o=e.d,d(am,i,c,e.b,Am(F=e.a),o)}}case 2:var v=u(xm,n.b,n.c);if(v.$){var b=v.a.a,p=v.b,g=p.a,h=p.b;switch(e.$){case 0:case 1:case 2:case 3:case 4:case 5:return Kd;case 6:return o=e.c,C=e.d,s($m,b,Am(F=e.a),o,C);case 7:return o=e.c,C=e.d,m(sm,b,g,h,Am(F=e.a),o,C);case 8:case 9:default:return Kd}}else{var x=v.a;switch(e.$){case 0:case 1:return Kd;case 2:o=e.c;var C=e.d;return s(lm,x,Am(F=e.a),o,C);case 3:return Kd;case 4:return o=e.c,C=e.d,s(lm,x,Am(F=e.a),o,C);case 5:return Kd;case 6:case 7:return o=e.c,C=e.d,s(lm,x,Am(F=e.a),o,C);case 8:case 9:default:return Kd}}default:var P=s(Lm,n.b,n.c,n.d,n.e);if(P.$){var M=P.a,T=M.a,y=M.b,L=P.b,w=L.a,D=L.b,S=P.c,$=S.a,N=S.b,z=P.d;switch(g=z.a,h=z.b,e.$){case 0:case 1:case 2:case 3:case 4:case 5:return Kd;case 6:return o=e.c,a=e.d,function(n,e,r,t,o,a,i,c,l,u){return 9===n.a?n.f(e,r,t,o,a,i,c,l,u):n(e)(r)(t)(o)(a)(i)(c)(l)(u)}(Nm,T,y,w,D,$,N,Am(F=e.a),o,a);case 7:return F=e.a,o=e.c,a=e.d,function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(s){return function(m){return function(v){return u(Ed,s,l((function(l,u,s,b,p,g,h,x){var C=h.a,P=h.b;return d(Qu,f(Ud,b,v,x),fm,dm,m,{cc:n,cg:e,ch:a,ci:t,R:P,bl:C.bl,bS:C.bS,bT:C.bT,bU:C.bU,cD:o,b:s,c:u,aY:i,d:g,c_:r,e:l,a3:c,f:p})})))}}}}}}}}}}}(T)(y)(w)(D)($)(N)(g)(h)(Am(F))(o)(a);case 8:case 9:default:return Kd}}else{var _=P.a,A=P.b,R=P.c;switch(e.$){case 0:case 1:return Kd;case 2:return o=e.c,a=e.d,m(vm,_,A,R,Am(F=e.a),o,a);case 3:return Kd;case 4:return o=e.c,a=e.d,m(vm,_,A,R,Am(F=e.a),o,a);case 5:return Kd;case 6:return o=e.c,a=e.d,m(vm,_,A,R,Am(F=e.a),o,a);case 7:var F;return o=e.c,a=e.d,m(vm,_,A,R,Am(F=e.a),o,a);case 8:case 9:default:return Kd}}}})),Fm=function(n){return n.bC},Vm=function(n){return n.bD},Bm=function(n){return n.fK},km=function(n){var e=n,r=Bm(e.de),t=Vm(e.de),o=Fm(e.de),a=Bm(e.dd),i=Vm(e.dd),c=Fm(e.dd),l=Bm(e.dc),u=Vm(e.dc),f=Fm(e.dc);return f*i*r+u*a*o+l*c*t-l*i*o-u*c*r-f*a*t>0},Km=r((function(n,e){return{$:5,a:n,b:e}})),Em=r((function(n,e){var r=e;switch(r.$){case 0:return Kd;case 5:var t=r.b;return u(Km,u(Eu,r.a,n),t);case 1:case 3:case 2:default:return u(Km,n,r)}})),Hm=r((function(n,e){return u(Em,function(n){var e=jl(n),r=Xl(n),t=Yl(n),o=ql(n);return{dA:km(n),q:o.bC,r:o.bD,s:o.fK,t:t.bC,u:t.bD,v:t.fK,w:r.bC,x:r.bD,y:r.fK,H:e.bC,I:e.bD,J:e.fK,b3:1}}(n),e)})),Im=function(n){return{$:2,a:n}},jm=r((function(n,e){var r=n.a,t=n.b,o=n.c,a=e.eG;return{eG:{bC:r*a.bC,bD:t*a.bD,fK:o*a.fK},eV:r*e.eV,eW:t*e.eW,eX:o*e.eX}})),Wm=function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){var f,s,d={bC:(s=t)[0],bD:s[1],fK:s[2],et:s[3]},m=(f={et:d.et,bC:d.bC*n.a,bD:d.bD*n.b,fK:d.fK*n.c},new Float64Array([f.bC,f.bD,f.fK,f.et]));return b(e,r,m,o,a,i,c,l,u)}}}}}}}}}},Um=r((function(n,e){switch(e.$){case 0:return kd;case 5:return u(Km,e.a,u(Um,n,e.b));case 1:var r=e.b;return u(Ed,u(jm,n,e.a),u(Wm,n,r));case 3:return e;case 2:return Im(u(Wm,n,r=e.a));default:var t=e.a;return If(u(Et,Um(n),t))}})),Om=r((function(n,e){return u(Um,n,e)})),Gm={src:"\n        precision lowp float;\n        \n        void main () {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        }\n    ",attributes:{},uniforms:{}},qm=f(cf,{cy:0,cW:0,db:15},{be:sf,bt:Xu,bE:sf,bF:7683},{be:sf,bt:Xu,bE:sf,bF:7682}),Ym=f(cf,{cy:0,cW:0,db:15},{be:sf,bt:Xu,bE:sf,bF:7682},{be:sf,bt:Xu,bE:sf,bF:7683}),Xm=r((function(n,e){return u(Tr,n?Ym:qm,e)})),Zm={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 shadowVertexPosition(vec3 position, vec3 normal, mat4 shadowLight, vec4 modelScale, mat4 modelMatrix, mat4 viewMatrix, mat4 projectionMatrix, mat4 sceneProperties) {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            vec3 worldNormal = getWorldNormal(normal, vec4(modelScale.xyz, 1.0), modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 directionToLight = getDirectionToLight(worldPosition.xyz, xyz_type, rgb_parameter);\n            vec3 offset = vec3(0.0, 0.0, 0.0);\n            float sceneDiameter = sceneProperties[3][1];\n            if (dot(directionToLight, worldNormal) <= 0.0) {\n                offset = -sceneDiameter * directionToLight;\n            } else {\n                offset = -0.001 * sceneDiameter * directionToLight;\n            }\n            vec4 offsetPosition = worldPosition + vec4(offset, 0.0);\n            return projectionMatrix * (viewMatrix * offsetPosition);\n        }\n        \n        void main () {\n            gl_Position = shadowVertexPosition(\n                position,\n                normal,\n                shadowLight,\n                modelScale,\n                modelMatrix,\n                viewMatrix,\n                projectionMatrix,\n                sceneProperties\n            );\n        }\n    ",attributes:{normal:"o",position:"b$"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"b4",viewMatrix:"f"}},Jm=function(n){var e=function(n){if(n.$){var e=n.c;return Br(l((function(n,r,t,o,a,i,c,l){return d(Qu,u(Xm,o,l),Zm,Gm,e,{b:t,c:r,d:i,e:n,b4:c,f:a})})))}return kr}(n);return e.$?Kd:Im(e.a)},Qm=o((function(n,e,r,t){var o,a=u(Rm,r,ud),i=(o=L(n,e)).a?o.b?Wf(_([a,Jm(Vd)])):a:o.b?Jm(Vd):Kd,c=Bd(t),l=c.a,f=c.b,s=c.c;return u(Hm,Ns(t),u(Om,w(l,f,s),i))})),nv=r((function(n,e){return s(Qm,!0,!0,n,e)})),ev=function(n){return{$:0,a:n}},rv=r((function(n,e){return{$:0,a:n,b:e}})),tv=function(n){return n.k},ov=function(n){return Wl(n)},av=r((function(n,e){return e/n})),iv=function(n){var e=n;return{bC:Wl(e),bD:Ul(e)}},cv=r((function(n,e){var r=n.b$;return u(Tr,{o:Zs(n.o),b$:Xs(r)},e)})),lv=c((function(n,e,r,t,o,a,i){for(;;){if(!i.b)return js({dZ:e,d_:t,d$:a,d0:n,d1:r,d2:o});var c=i.a,l=i.b,f=Hf(c.b$),s=Ef(c.b$),d=Kf(c.b$);n=u(zf,n,d),e=u(ft,e,d),r=u(zf,r,s),t=u(ft,t,s),o=u(zf,o,f),a=u(ft,a,f),i=l}})),uv=r((function(n,e){var r=Hf(n.b$),t=Ef(n.b$),o=Kf(n.b$);return v(lv,o,o,t,t,r,r,e)})),fv={bC:0,bD:0,fK:-1},sv=r((function(n,e){var r=n.dd,t=n.dc;return{bC:e.bC*t.bC+e.bD*r.bC,bD:e.bC*t.bD+e.bD*r.bD,fK:e.bC*t.fK+e.bD*r.fK}})),dv=function(n){return Ul(n)},mv=function(n){return 6.283185307179586*n},vv=su({cH:fu,dc:mu,dd:is}),bv=(Jo=u(av,72,mv(1)),Qo=vu,na=fv,ra=f(ld,0,0,ea=u(Zf,.5,1)),oa=f(ld,0,0,ta=u(Zf,-.5,1)),ks(function(n){var e=f(Lr,cv,$,xd(n));if(e.b){var r=e.a,t=e.b,o=u(wd,e,md(n));return s(As,u(uv,r,t),n,o,0)}return Ks}(Rd(Lu(u(Et,(function(n){var e=u(Zf,n,Jo),r=u(sv,vv,iv(e)),t=u(Zf,ov(e),1),o=u(Zf,dv(e),1),a=f(ld,t,o,ea),i=f(ld,t,o,ta),c=u(Zf,u(Qi,72,n+1),Jo),l=u(sv,vv,iv(c)),s=u(Zf,ov(c),1),d=u(Zf,dv(c),1),m=f(ld,s,d,ta),v=f(ld,s,d,ea);return _([w({o:na,b$:oa},{o:na,b$:m},{o:na,b$:i}),w({o:r,b$:i},{o:l,b$:m},{o:l,b$:v}),w({o:r,b$:i},{o:l,b$:v},{o:r,b$:a}),w({o:Qo,b$:ra},{o:Qo,b$:a},{o:Qo,b$:v})])}),u(Gr,0,71))))))),pv=Fd(bv),gv=function(n){return n.cH},hv=function(n){return n.e4},xv=function(n){return n.fi},Cv=o((function(n,e,r,t){var o,a=function(n){var e,r,t=Ql(n),o=L(r=function(n){var e=n,r=ac(e.fK),t=ac(e.bD),o=ac(e.bC);if(1>T(o,t)){if(1>T(o,r)){var a=Gf(e.fK*e.fK+e.bD*e.bD);return{bC:0,bD:-e.fK/a,fK:e.bD/a}}return a=Gf(e.bD*e.bD+e.bC*e.bC),{bC:-e.bD/a,bD:e.bC/a,fK:0}}return 1>T(t,r)?(a=Gf(e.fK*e.fK+e.bC*e.bC),{bC:e.fK/a,bD:0,fK:-e.bC/a}):(a=Gf(e.bC*e.bC+e.bD*e.bD),{bC:-e.bD/a,bD:e.bC/a,fK:0})}(e=t),{bC:e.bD*r.fK-e.fK*r.bD,bD:e.fK*r.bC-e.bC*r.fK,fK:e.bC*r.bD-e.bD*r.bC}),a=o.a,i=o.b;return{cH:gv(n),dc:a,dd:i,de:t}}(tv(t)),i=u(Rm,r,bv),c=(o=L(n,e)).a?o.b?Wf(_([i,Jm(pv)])):i:o.b?Jm(pv):Kd,l=xv(t),f=hv(t);return u(Hm,a,u(Om,w(l,l,f),c))})),Pv=r((function(n,e){return s(Cv,!0,!0,n,e)})),Mv={src:"\n        precision highp float;\n        \n        attribute lowp float triangleVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 triangleVertexPositions;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleVertex), triangleVertexPositions, position, normal);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{triangleVertex:"c4"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",triangleVertexPositions:"bz",viewMatrix:"f"}},Tv={src:"\n        precision highp float;\n        \n        attribute lowp float triangleVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 triangleVertexPositions;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleVertex), triangleVertexPositions, position, normal);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n        }\n    ",attributes:{triangleVertex:"c4"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",triangleVertexPositions:"bz",viewMatrix:"f"}},yv=function(n){var e=n.a,r=n.b,t=n.c;return Hu({dI:e.bC,dJ:r.bC,dK:t.bC,dL:0,dM:e.bD,dN:r.bD,dO:t.bD,dP:0,dQ:e.fK,dR:r.fK,dS:t.fK,dT:0,dU:0,dV:0,dW:0,dX:0})},Lv=id(_([w({c4:0},{c4:1},{c4:2})])),wv=r((function(n,e){var r=qs(e),t=Am(r);switch(n.$){case 0:if(n.b.$)return Kd;var o=n.b.a;return u(Ed,t,l((function(n,r,t,a,i,c,l,u){return d(Qu,f(Ud,a,0,u),Mv,qd,Lv,{aC:o,b:t,c:r,d:c,e:n,bz:yv(e),f:i})})));case 1:if(n.b.$)return Kd;var a=n.b.a,i=n.c;return u(Ed,t,l((function(n,r,t,o,c,l,s,m){return d(Qu,f(Ud,o,0,m),Mv,em,Lv,{aR:u(rm,i,a),b:t,c:r,d:l,e:n,bz:yv(e),f:c})})));case 2:var c=u(xm,n.b,n.c);if(c.$)return Kd;var m=c.a;return u(Ed,t,l((function(n,r,t,o,a,i,c,l){var u=c.a,s=c.b;return d(Qu,f(Ud,o,0,l),Tv,im,Lv,{R:s,bl:u.bl,bS:u.bS,bT:u.bT,bU:u.bU,cz:m,b:t,c:r,d:i,e:n,bz:yv(e),f:a})})));default:var v=s(Lm,n.b,n.c,n.d,n.e);if(v.$)return Kd;var b=v.a,p=v.b,g=v.c;return u(Ed,t,l((function(n,r,t,o,a,i,c,l){var u=c.a,s=c.b;return d(Qu,f(Ud,o,0,l),Tv,mm,Lv,{cb:b,R:s,bl:u.bl,bS:u.bS,bT:u.bT,bU:u.bU,cC:g,b:t,c:r,d:i,cZ:p,e:n,bz:yv(e),f:a})})))}})),Dv=(aa=_([{a2:u(rf,0,1)},{a2:u(rf,1,1)},{a2:u(rf,2,1)},{a2:u(rf,0,-1)},{a2:u(rf,1,-1)},{a2:u(rf,2,-1)}]),ia=_([w(0,1,2),w(3,5,4),w(3,4,1),w(3,1,0),w(4,5,2),w(4,2,1),w(5,3,0),w(5,0,2)]),u(wd,aa,ia)),Sv={src:"\n        precision highp float;\n        \n        attribute highp vec2 triangleShadowVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        uniform highp mat4 triangleVertexPositions;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 shadowVertexPosition(vec3 position, vec3 normal, mat4 shadowLight, vec4 modelScale, mat4 modelMatrix, mat4 viewMatrix, mat4 projectionMatrix, mat4 sceneProperties) {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            vec3 worldNormal = getWorldNormal(normal, vec4(modelScale.xyz, 1.0), modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 directionToLight = getDirectionToLight(worldPosition.xyz, xyz_type, rgb_parameter);\n            vec3 offset = vec3(0.0, 0.0, 0.0);\n            float sceneDiameter = sceneProperties[3][1];\n            if (dot(directionToLight, worldNormal) <= 0.0) {\n                offset = -sceneDiameter * directionToLight;\n            } else {\n                offset = -0.001 * sceneDiameter * directionToLight;\n            }\n            vec4 offsetPosition = worldPosition + vec4(offset, 0.0);\n            return projectionMatrix * (viewMatrix * offsetPosition);\n        }\n        \n        void main () {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleShadowVertex.x), triangleVertexPositions, position, normal);\n            normal *= triangleShadowVertex.y;\n            gl_Position = shadowVertexPosition(\n                position,\n                normal,\n                shadowLight,\n                modelScale,\n                modelMatrix,\n                viewMatrix,\n                projectionMatrix,\n                sceneProperties\n            );\n        }\n    ",attributes:{triangleShadowVertex:"a2"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"b4",triangleVertexPositions:"bz",viewMatrix:"f"}},$v=function(n){return Im(l((function(e,r,t,o,a,i,c,l){return d(Qu,u(Xm,o,l),Sv,Gm,Dv,{b:t,c:r,d:i,e:e,b4:c,bz:yv(n),f:a})})))},Nv=o((function(n,e,r,t){var o=u(wv,r,t),a=L(n,e);return a.a?a.b?Wf(_([o,$v(t)])):o:a.b?$v(t):Kd})),zv=r((function(n,e){return s(Nv,!0,!0,n,e)})),_v=r((function(n,e){var r=Gs(e),t=Gs(n),o=Os(e),a=Os(n),i=Us(e),c=Us(n);return{dZ:u(Nf,c,i),d_:u(Nf,a,o),d$:u(Nf,t,r),d0:u(_f,c,i),d1:u(_f,a,o),d2:u(_f,t,r)}})),Av={src:"\n        precision highp float;\n        \n        attribute lowp float lineSegmentVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp vec3 lineSegmentStartPoint;\n        uniform highp vec3 lineSegmentEndPoint;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = (1.0 - lineSegmentVertex) * lineSegmentStartPoint + lineSegmentVertex * lineSegmentEndPoint;\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{lineSegmentVertex:"dH"},uniforms:{lineSegmentEndPoint:"dF",lineSegmentStartPoint:"dG",modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Rv=r((function(n,e){return{$:1,a:n,b:e}}))({dp:2,dz:0,d4:1})(_([L({dH:0},{dH:1})])),Fv=r((function(n,e){var r,t=u(_v,(r=e).a,r.b),o=Am(t),a=e.a,i=e.b;switch(n.$){case 0:if(n.b.$)return Kd;var c=n.b.a;return u(Ed,o,l((function(n,e,r,t,o,l,u,f){return d(Qu,f,Av,qd,Rv,{aC:c,dF:Xs(i),dG:Xs(a),b:r,c:e,d:l,e:n,f:o})})));case 1:if(n.b.$)return Kd;c=n.b.a;var f=n.c;return u(Ed,o,l((function(n,e,r,t,o,l,s,m){return d(Qu,m,Av,em,Rv,{aR:u(rm,f,c),dF:Xs(i),dG:Xs(a),b:r,c:e,d:l,e:n,f:o})})));case 2:default:return Kd}})),Vv=r((function(n,e){return u(Fv,n,e)})),Bv=t((function(n,e,r){return{$:2,a:n,b:e,c:r}})),kv=function(n){return f(hs,0,1,n>.04045?u(Ni,(n+.055)/1.055,2.4):n/12.92)},Kv=function(n){return f(Bv,0,ev(function(n){var e=rc(n),r=e.cm,t=e.cd;return f(ku,kv(e.cV),kv(r),kv(t))}(n)),ev(0))},Ev=function(n){return n.eG},Hv=function(n){return n.fi},Iv=function(n){return hu*(n/180)},jv=r((function(n,e){return n/e})),Wv=a((function(n,e,r,t,o){for(;;){var a=t(e/r),i=u(Tr,a,o);if(P(e,n))return i;n=n,e-=1,r=r,t=t,o=i}})),Uv=r((function(n,e){return 1>n?$:d(Wv,0,n,n,e,$)})),Ov=r((function(n,e){var r=n.b$,t=n.L,o=t.a,a=t.b;return u(Tr,{o:Zs(n.o),b$:Xs(r),L:u(rf,o,a)},e)})),Gv=r((function(n,e){var r=n,t=e,o=Wl(t);return{bC:o*Wl(r),bD:o*Ul(r),fK:Ul(t)}})),qv=(ca=u(Gr,0,71),la=u(Uv,72,u(zm,0,mv(1))),ua=et(36),fa=u(Gr,0,ua-1),sa=u(Uv,ua,u(zm,Iv(90),Iv(-90))),da=Md(Lu(u(Et,(function(n){return u(Et,(function(e){return{o:u(Gv,n,e),b$:f(ld,u(Zf,ov(e)*ov(n),1),u(Zf,ov(e)*dv(n),1),u(Zf,dv(e),1)),L:L(u(jv,n,mv(1)),u(jv,u(Ff,Iv(90),e),Iv(180)))}}),sa)}),la))),ma=r((function(n,e){return n*(ua+1)+e})),va=Lu(u(Et,(function(n){return Lu(u(Et,(function(e){var r=u(ma,n+1,e),t=u(ma,n,e),o=u(ma,n+1,e+1),a=u(ma,n,e+1);return _([w(a,o,r),w(a,r,t)])}),fa))}),ca)),ks(function(n){var e=f(Lr,Ov,$,xd(n));if(e.b){var r=e.a,t=e.b,o=u(wd,e,md(n));return s(Rs,u(uv,r,t),n,o,0)}return Ks}(u(Ld,da,va)))),Yv=r((function(n,e){for(;;){var r=u(Qi,144,2*n+3),t=u(Qi,144,2*n+2),o=2*n+1,a=2*n,i=u(Tr,w(144,a,t),u(Tr,w(a,r,t),u(Tr,w(a,o,r),u(Tr,w(o,145,r),e))));if(!n)return i;n-=1,e=i}})),Xv=t((function(n,e,r){return r>.5?e+(1-r)*(n-e):n+r*(e-n)})),Zv=(ba=u(r((function(n,e){for(;;){var r=f(Xv,0,6.283185307179586,n/72),t=u(Tr,{bH:r,bX:0,b2:1},u(Tr,{bH:r,bX:1,b2:1},e));if(!n)return t;n-=1,e=t}})),71,_([{bH:0,bX:0,b2:0},{bH:0,bX:1,b2:0}])),u(wd,ba,u(Yv,71,$))),Jv={src:"\n        precision highp float;\n        \n        attribute highp float angle;\n        attribute highp float offsetScale;\n        attribute highp float radiusScale;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const lowp float kPerspectiveProjection = 0.0;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec3 perpendicularTo(vec3 d) {\n            float absX = abs(d.x);\n            float absY = abs(d.y);\n            float absZ = abs(d.z);\n            if (absX <= absY) {\n                if (absX <= absZ) {\n                    float scale = 1.0 / length(d.zy);\n                    return vec3(0.0, -d.z * scale, d.y * scale);\n                } else {\n                    float scale = 1.0 / length(d.xy);\n                    return vec3(-d.y * scale, d.x * scale, 0.0);\n                }\n            } else {\n                if (absY <= absZ) {\n                    float scale = 1.0 / length(d.xz);\n                    return vec3(d.z * scale, 0.0, -d.x * scale);\n                } else {\n                    float scale = 1.0 / length(d.xy);\n                    return vec3(-d.y * scale, d.x * scale, 0.0);\n                }\n            }\n        }\n        \n        void main () {\n            vec4 worldCenter = getWorldPosition(vec3(0.0, 0.0, 0.0), modelScale, modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 zDirection = getDirectionToLight(worldCenter.xyz, xyz_type, rgb_parameter);\n            vec3 xDirection = perpendicularTo(zDirection);\n            vec3 yDirection = cross(zDirection, xDirection);\n            float r = modelScale.x;\n            float adjustedRadius = r;\n            float zOffset = 0.0;\n            if (xyz_type.w == kPointLight) {\n                float distanceToLight = length(xyz_type.xyz - worldCenter.xyz);\n                float rSquared = r * r;\n                zOffset = rSquared / distanceToLight;\n                float zSquared = zOffset * zOffset;\n                adjustedRadius = sqrt(rSquared - zSquared) * radiusScale;\n            }\n            vec3 worldPosition =\n                worldCenter.xyz\n                    + zDirection * zOffset\n                    + xDirection * adjustedRadius * cos(angle)\n                    + yDirection * adjustedRadius * sin(angle);\n            vec3 directionToLight = getDirectionToLight(worldPosition, xyz_type, rgb_parameter);\n            float sceneDiameter = sceneProperties[3][1];\n            vec3 offset = -sceneDiameter * offsetScale * directionToLight;\n            vec4 offsetPosition = vec4(worldPosition + offset, 1.0);\n            gl_Position = projectionMatrix * (viewMatrix * offsetPosition);\n        }\n    ",attributes:{angle:"bH",offsetScale:"bX",radiusScale:"b2"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"b4",viewMatrix:"f"}},Qv=function(){return Im(l((function(n,e,r,t,o,a,i,c){return d(Qu,u(Xm,!0,c),Jv,Gm,Zv,{aC:f(ku,0,0,1),b:r,c:e,d:a,e:n,b4:i,f:o})})))},nb=r((function(n,e){return u(Em,function(n){return{dA:!0,q:1,r:0,s:0,t:0,u:1,v:0,w:0,x:0,y:1,H:n.bC,I:n.bD,J:n.fK,b3:1}}(n),e)})),eb=o((function(n,e,r,t){var o,a=u(Rm,r,qv),i=(o=L(n,e)).a?o.b?Wf(_([a,Qv()])):a:o.b?Qv():Kd,c=Hv(t);return u(nb,u(Qs,fu,Ev(t)),u(Om,w(c,c,c),i))})),rb=r((function(n,e){return s(eb,!0,!0,n,e)})),tb=function(n){switch(n.$){case 0:var e=n.b;return _([u(nv,Kv(n.a),e)]);case 1:var r=n.b;return _([u(zv,Kv(n.a),r)]);case 3:var t=n.b;return _([u(rb,Kv(n.a),t)]);case 2:var o=n.b;return _([u(Pv,Kv(n.a),o)]);case 4:var a=n.b;return _([u(Vv,(i=n.a,u(rv,0,ev(function(n){var e=rc(n);return f(ku,e.cV,e.cm,e.cd)}(i)))),a)]);default:return u(wu,tb,n.a)}var i},ob=r((function(n,e){return function(n){var e,r=u(vs,n.fm,{ce:Ps,eK:n.ft,co:8e4}),t=gs({ce:Cs,co:2e4,b6:n.b6}),o=gs({ce:ms,co:15e3,b6:ts(n.b6)}),a=f($s,r,t,o);return function(n){return u(ds,{ev:n.ev,dh:n.dh,eD:n.eD,dl:n.dl,$7:n.$7},_([{ds:n.ds,eQ:n.eQ,e6:n.e6,fw:n.fw,fC:n.fC}]))}({ev:(e=n.cj,{$:2,a:e}),dh:n.dh,eD:n.eD,dl:n.dl,$7:n.$7,ds:n.ds,eQ:1.2*u(Ni,2,15),e6:a,fw:bs,fC:ms})}({dh:n.eA,eD:n.eD,dl:.005,cj:n.cj,$7:L(zi(n.aa.da),zi(n.aa.cn)),ds:(r=e,u(wu,tb,r)),fm:!0,ft:u(Gv,n.fs,n.fu),b6:bu});var r})),ab=r((function(n,e){return{$:0,a:n,b:e}})),ib=r((function(n,e){return T(e,n)>-1})),cb=r((function(n,e){return n+.5*(e-n)})),lb={bC:-1,bD:0,fK:0},ub={bC:0,bD:-1,fK:0},fb=i((function(n,e,r,t,o,a){var i=u(ib,r,a)?vu:fv,c=u(ib,e,o)?as:ub,l=u(ib,n,t)?du:lb,s=w(uu(u(Mf,n,t)),uu(u(Mf,e,o)),uu(u(Mf,r,a)));return{ey:{cH:f(ld,u(cb,n,t),u(cb,e,o),u(cb,r,a)),dc:l,dd:c,de:i},$7:s}})),sb=r((function(n,e){return m(fb,Us(n),Os(n),Gs(n),Us(e),Os(e),Gs(e))})),db=r((function(n,e){var r=e/2;return u(ab,n,u(sb,f($f,-r,-r,-r),f($f,r,r,r)))})),mb=function(n){return{$:5,a:n}},vb=r((function(n,e){return{$:2,a:n,b:e}})),bb=r((function(n,e){return{$:4,a:n,b:e}})),pb=r((function(n,e){return{$:3,a:n,b:e}})),gb=r((function(n,e){return{$:1,a:n,b:e}})),hb=t((function(n,e,r){return{bC:n,bD:e,fK:r}})),xb=r((function(n,e){return{ey:u(eu,n,Ns(e)),$7:Bd(e)}})),Cb=r((function(n,e){var r=e;return u(au,u(nu,n,r.cH),r.eK)})),Pb=r((function(n,e){var r=e;return{k:u(Cb,n,r.k),e4:r.e4,fi:r.fi}})),Mb=r((function(n,e){var r=e.b;return L(n(e.a),n(r))})),Tb=r((function(n,e){return u(Mb,nu(n),e)})),yb=r((function(n,e){return{eG:e,fi:uu(n)}})),Lb=r((function(n,e){return u(yb,Hv(e),u(nu,n,Ev(e)))})),wb=r((function(n,e){var r=e.b,t=e.c;return w(n(e.a),n(r),n(t))})),Db=r((function(n,e){return u(wb,nu(n),e)})),Sb=r((function(n,e){var r=n.a,t=n.b,o=n.c,a=f(hb,r,t,o);switch(e.$){case 0:return u(ab,e.a,u(xb,a,e.b));case 1:return u(gb,e.a,u(Db,a,e.b));case 3:return u(pb,e.a,u(Lb,a,e.b));case 2:return u(vb,e.a,u(Pb,a,e.b));case 4:return u(bb,e.a,u(Tb,a,e.b));default:var i=e.a;return mb(u(Et,Sb(w(r,t,o)),i))}})),$b=function(n){return Sb(w(0,n,0))},Nb=function(n){return n/255},zb=t((function(n,e,r){return s(Di,Nb(n),Nb(e),Nb(r),1)})),_b=t((function(n,e,r){return{ey:f(Zl,n,e,Ns(r)),$7:Bd(r)}})),Ab=r((function(n,e){var r=u(Gl,n,e),t=u(Ol,n,e);return function(n){var e=n;return u(au,r(e.cH),t(e.eK))}})),Rb=t((function(n,e,r){var t=r;return{k:f(Ab,n,e,t.k),e4:t.e4,fi:t.fi}})),Fb=t((function(n,e,r){return u(Mb,u(Gl,n,e),r)})),Vb=t((function(n,e,r){return u(yb,Hv(r),f(Gl,n,e,Ev(r)))})),Bb=t((function(n,e,r){return u(wb,u(Gl,n,e),r)})),kb=t((function(n,e,r){switch(r.$){case 0:return u(ab,r.a,f(_b,n,e,r.b));case 1:return u(gb,r.a,f(Bb,n,e,r.b));case 3:return u(pb,r.a,f(Vb,n,e,r.b));case 2:return u(vb,r.a,f(Rb,n,e,r.b));case 4:return u(bb,r.a,f(Fb,n,e,r.b));default:var t=r.a;return mb(u(Et,u(kb,n,e),t))}})),Kb=u(au,fu,is),Eb=r((function(n,e){return f(kb,Kb,n,e)})),Hb=t((function(n,e,r){return{bC:n.bC+e*(r.bC-n.bC),bD:n.bD+e*(r.bD-n.bD),fK:n.fK+e*(r.fK-n.fK)}})),Ib=t((function(n,e,r){var t=Ns(r),o=ql(t),a=Yl(t),i=Xl(t),c=f(Hb,n,e,jl(t)),l=0>e?{cH:c,dc:ts(o),dd:ts(a),de:ts(i)}:{cH:c,dc:o,dd:a,de:i},s=Bd(r),d=s.b,m=s.c;return{ey:l,$7:w(uu(u(Zf,e,s.a)),uu(u(Zf,e,d)),uu(u(Zf,e,m)))}})),jb=function(n){return Ql(tv(n))},Wb=t((function(n,e,r){var t=uu(u(Zf,e,xv(r))),o=uu(u(Zf,e,hv(r))),a=0>e?ts(jb(r)):jb(r),i=f(Hb,n,e,function(n){return gv(tv(n))}(r));return{k:u(au,i,a),e4:o,fi:t}})),Ub=t((function(n,e,r){return u(Mb,u(Hb,n,e),r)})),Ob=t((function(n,e,r){return u(yb,u(Zf,ac(e),Hv(r)),f(Hb,n,e,Ev(r)))})),Gb=t((function(n,e,r){return u(wb,u(Hb,n,e),r)})),qb=r((function(n,e){switch(e.$){case 0:return u(ab,e.a,f(Ib,fu,n,e.b));case 1:return u(gb,e.a,f(Gb,fu,n,e.b));case 3:return u(pb,e.a,f(Ob,fu,n,e.b));case 2:return u(vb,e.a,f(Wb,fu,n,e.b));case 4:return u(bb,e.a,f(Ub,fu,n,e.b));default:var r=e.a;return mb(u(Et,qb(n),r))}})),Yb=r((function(n,e){return(e-lt(e/n)*n)/n})),Xb=r((function(n,e){return 360*u(Yb,n,e)})),Zb=r((function(n,e){var r,t=u(Qi,2,e)?Bi:f(zb,17,147,216),o=xu(u(Xb,8,n.a1))/4,a=.707/Wl(.7853981633974483-o);return r=e?_([u(db,t,1),u($b,.3,u(Eb,o,u(qb,a,u(Zb,n,e-1))))]):$,mb(r)})),Jb=function(n){return u(Zb,n,20)};pa={Main:{init:s(zl,r((function(n){return u(ob,{eA:Bi,eD:gu(n),cj:n.cj,aa:n.aa,fs:xu(90),fu:-xu(180)},_([Jb(n)]))})),Fl,Rl,(function(){return{}}))(u(xt,(function(n){return yt({cj:n})}),u(Ct,"devicePixelRatio",Pt)))(0)}},n.Elm?function n(e,r){for(var t in r)t in e?"init"==t?C(6):n(e[t],r[t]):e[t]=r[t]}(n.Elm,pa):n.Elm=pa}(n);const e=n.Elm.Main.init({node:document.getElementById("elm-node"),flags:{devicePixelRatio:window.devicePixelRatio}});function r(n){const e=[];for(let r=0;r<n.length;r++)e.push({identifier:n[r].identifier,pageX:n[r].pageX,pageY:n[r].pageY});return e}window.addEventListener("touchstart",(n=>{e.ports.touchStart.send(r(n.changedTouches))})),window.addEventListener("touchmove",(n=>{e.ports.touchMove.send(r(n.changedTouches))})),window.addEventListener("touchend",(n=>{e.ports.touchEnd.send(r(n.changedTouches))})),window.addEventListener("touchcancel",(n=>{e.ports.touchCancel.send(r(n.changedTouches))}))}();
//# sourceMappingURL=index.1a82318f.js.map
