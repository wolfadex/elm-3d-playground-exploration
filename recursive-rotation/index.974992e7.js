!function(){var n={};!function(n){function e(n,e,r){return r.a=n,r.f=e,r}function r(n){return e(2,n,(function(e){return function(r){return n(e,r)}}))}function t(n){return e(3,n,(function(e){return function(r){return function(t){return n(e,r,t)}}}))}function o(n){return e(4,n,(function(e){return function(r){return function(t){return function(o){return n(e,r,t,o)}}}}))}function a(n){return e(5,n,(function(e){return function(r){return function(t){return function(o){return function(a){return n(e,r,t,o,a)}}}}}))}function i(n){return e(6,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return n(e,r,t,o,a,i)}}}}}}))}function c(n){return e(7,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return n(e,r,t,o,a,i,c)}}}}}}}))}function l(n){return e(8,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return n(e,r,t,o,a,i,c,l)}}}}}}}}))}function u(n,e,r){return 2===n.a?n.f(e,r):n(e)(r)}function f(n,e,r,t){return 3===n.a?n.f(e,r,t):n(e)(r)(t)}function s(n,e,r,t,o){return 4===n.a?n.f(e,r,t,o):n(e)(r)(t)(o)}function d(n,e,r,t,o,a){return 5===n.a?n.f(e,r,t,o,a):n(e)(r)(t)(o)(a)}function v(n,e,r,t,o,a,i){return 6===n.a?n.f(e,r,t,o,a,i):n(e)(r)(t)(o)(a)(i)}function m(n,e,r,t,o,a,i,c){return 7===n.a?n.f(e,r,t,o,a,i,c):n(e)(r)(t)(o)(a)(i)(c)}function b(n,e,r,t,o,a,i,c,l){return 8===n.a?n.f(e,r,t,o,a,i,c,l):n(e)(r)(t)(o)(a)(i)(c)(l)}var p=t((function(n,e,r){for(var t=Array(n),o=0;n>o;o++)t[o]=r(e+o);return t})),g=r((function(n,e){for(var r=Array(n),t=0;n>t&&e.b;t++)r[t]=e.a,e=e.b;return r.length=t,L(r,e)})),h=r((function(n,e){return e[n]})),x=t((function(n,e,r){for(var t=r.length-1;t>=0;t--)e=u(n,r[t],e);return e}));function C(n){throw Error("https://github.com/elm/core/blob/1.0.0/hints/"+n+".md")}function P(n,e){for(var r,t=[],o=M(n,e,0,t);o&&(r=t.pop());o=M(r.a,r.b,0,t));return o}function M(n,e,r,t){if(n===e)return!0;if("object"!=typeof n||null===n||null===e)return"function"==typeof n&&C(5),!1;if(r>100)return t.push(L(n,e)),!0;for(var o in 0>n.$&&(n=Nr(n),e=Nr(e)),n)if(!M(n[o],e[o],r+1,t))return!1;return!0}function T(n,e,r){if("object"!=typeof n)return n===e?0:e>n?-1:1;if(void 0===n.$)return(r=T(n.a,e.a))||(r=T(n.b,e.b))?r:T(n.c,e.c);for(;n.b&&e.b&&!(r=T(n.a,e.a));n=n.b,e=e.b);return r||(n.b?1:e.b?-1:0)}var y=r((function(n,e){var r=T(n,e);return 0>r?$r:r?Fr:Sr}));function L(n,e){return{a:n,b:e}}function w(n,e,r){return{a:n,b:e,c:r}}function N(n,e){var r={};for(var t in n)r[t]=n[t];for(var t in e)r[t]=e[t];return r}function S(n,e){if("string"==typeof n)return n+e;if(!n.b)return e;var r=$(n.a,e);n=n.b;for(var t=r;n.b;n=n.b)t=t.b=$(n.a,e);return r}var F={$:0};function $(n,e){return{$:1,a:n,b:e}}var D=r($);function z(n){for(var e=F,r=n.length;r--;)e=$(n[r],e);return e}function _(n){for(var e=[];n.b;n=n.b)e.push(n.a);return e}var A=t((function(n,e,r){for(var t=[];e.b&&r.b;e=e.b,r=r.b)t.push(u(n,e.a,r.a));return z(t)})),R=r((function(n,e){return n*e})),G=r(Math.pow),V=r((function(n,e){var r=e%n;return 0===n?C(11):r>0&&0>n||0>r&&n>0?r+n:r})),k=Math.cos,E=Math.sin,B=Math.ceil,I=Math.floor,U=Math.round,W=Math.sqrt,j=Math.log,H=isNaN,O=r((function(n,e){return n+e})),Y=t((function(n,e,r){for(var t=r.length;t--;){var o=r[t],a=r.charCodeAt(t);56320>a||a>57343||(o=r[--t]+o),e=u(n,o,e)}return e})),q=r((function(n,e){return e.split(n)})),X=r((function(n,e){return e.join(n)})),J=t((function(n,e,r){return r.slice(n,e)})),Z=r((function(n,e){return 0===e.indexOf(n)}));function K(n){return n+""}function Q(n){return{$:2,b:n}}var nn=Q((function(n){return"number"!=typeof n?gn("an INT",n):n>-2147483647&&2147483647>n&&(0|n)===n?Rr(n):!isFinite(n)||n%1?gn("an INT",n):Rr(n)})),en=Q((function(n){return"boolean"==typeof n?Rr(n):gn("a BOOL",n)})),rn=Q((function(n){return"number"==typeof n?Rr(n):gn("a FLOAT",n)})),tn=(Q((function(n){return Rr(n)})),Q((function(n){return"string"==typeof n?Rr(n):n instanceof String?Rr(n+""):gn("a STRING",n)}))),on=r((function(n,e){return{$:6,d:n,b:e}}));function an(n,e){return{$:9,f:n,g:e}}var cn=r((function(n,e){return{$:10,b:e,h:n}})),ln=r((function(n,e){return an(n,[e])})),un=t((function(n,e,r){return an(n,[e,r])})),fn=o((function(n,e,r,t){return an(n,[e,r,t])})),sn=r((function(n,e){try{return vn(n,JSON.parse(e))}catch(n){return Dr(u(zr,"This is not valid JSON! "+n.message,e))}})),dn=r((function(n,e){return vn(n,e)}));function vn(n,e){switch(n.$){case 2:return n.b(e);case 5:return null===e?Rr(n.c):gn("null",e);case 3:return bn(e)?mn(n.b,e,z):gn("a LIST",e);case 4:return bn(e)?mn(n.b,e,pn):gn("an ARRAY",e);case 6:var r=n.d;if("object"!=typeof e||null===e||!(r in e))return gn("an OBJECT with a field named `"+r+"`",e);var t=vn(n.b,e[r]);return ht(t)?t:Dr(u(_r,r,t.a));case 7:var o=n.e;return bn(e)?e.length>o?(t=vn(n.b,e[o]),ht(t)?t:Dr(u(Ar,o,t.a))):gn("a LONGER array. Need index "+o+" but only see "+e.length+" entries",e):gn("an ARRAY",e);case 8:if("object"!=typeof e||null===e||bn(e))return gn("an OBJECT",e);var a=F;for(var i in e)if(e.hasOwnProperty(i)){if(t=vn(n.b,e[i]),!ht(t))return Dr(u(_r,i,t.a));a=$(L(i,t.a),a)}return Rr(Jr(a));case 9:for(var c=n.f,l=n.g,f=0;l.length>f;f++){if(t=vn(l[f],e),!ht(t))return t;c=c(t.a)}return Rr(c);case 10:return t=vn(n.b,e),ht(t)?vn(n.h(t.a),e):t;case 11:for(var s=F,d=n.g;d.b;d=d.b){if(t=vn(d.a,e),ht(t))return t;s=$(t.a,s)}return Dr(Gr(Jr(s)));case 1:return Dr(u(zr,n.a,e));case 0:return Rr(n.a)}}function mn(n,e,r){for(var t=e.length,o=Array(t),a=0;t>a;a++){var i=vn(n,e[a]);if(!ht(i))return Dr(u(Ar,a,i.a));o[a]=i.a}return Rr(r(o))}function bn(n){return Array.isArray(n)||"undefined"!=typeof FileList&&n instanceof FileList}function pn(n){return u(gt,n.length,(function(e){return n[e]}))}function gn(n,e){return Dr(u(zr,"Expecting "+n,e))}function hn(n,e){if(n===e)return!0;if(n.$!==e.$)return!1;switch(n.$){case 0:case 1:return n.a===e.a;case 2:return n.b===e.b;case 5:return n.c===e.c;case 3:case 4:case 8:return hn(n.b,e.b);case 6:return n.d===e.d&&hn(n.b,e.b);case 7:return n.e===e.e&&hn(n.b,e.b);case 9:return n.f===e.f&&xn(n.g,e.g);case 10:return n.h===e.h&&hn(n.b,e.b);case 11:return xn(n.g,e.g)}}function xn(n,e){var r=n.length;if(r!==e.length)return!1;for(var t=0;r>t;t++)if(!hn(n[t],e[t]))return!1;return!0}var Cn=r((function(n,e){return JSON.stringify(e,null,n)+""}));function Pn(n){return n}var Mn=t((function(n,e,r){return r[n]=e,r}));function Tn(n){return{$:0,a:n}}function yn(n){return{$:2,b:n,c:null}}var Ln=r((function(n,e){return{$:3,b:n,d:e}})),wn=0;function Nn(n){var e={$:0,e:wn++,f:n,g:null,h:[]};return _n(e),e}function Sn(n){return yn((function(e){e(Tn(Nn(n)))}))}function Fn(n,e){n.h.push(e),_n(n)}var $n=r((function(n,e){return yn((function(r){Fn(n,e),r(Tn(0))}))})),Dn=!1,zn=[];function _n(n){if(zn.push(n),!Dn){for(Dn=!0;n=zn.shift();)An(n);Dn=!1}}function An(n){for(;n.f;){var e=n.f.$;if(0===e||1===e){for(;n.g&&n.g.$!==e;)n.g=n.g.i;if(!n.g)return;n.f=n.g.b(n.f.a),n.g=n.g.i}else{if(2===e)return void(n.f.c=n.f.b((function(e){n.f=e,_n(n)})));if(5===e){if(0===n.h.length)return;n.f=n.f.b(n.h.shift())}else n.g={$:3===e?0:1,b:n.f.b,i:n.g},n.f=n.f.d}}}var Rn={};function Gn(n,e,r,t,o){return{b:n,c:e,d:r,e:t,f:o}}function Vn(n,e){var r={g:e,h:void 0},t=n.c,o=n.d,a=n.e,i=n.f;return r.h=Nn(u(Ln,(function n(e){return u(Ln,n,{$:5,b:function(n){var c=n.a;return 0===n.$?f(o,r,c,e):a&&i?s(t,r,c.i,c.j,e):f(t,r,a?c.i:c.j,e)}})}),n.b))}var kn=r((function(n,e){return yn((function(r){n.g(e),r(Tn(0))}))})),En=r((function(n,e){return u($n,n.h,{$:0,a:e})}));function Bn(n){return function(e){return{$:1,k:n,l:e}}}function In(n){return{$:2,m:n}}var Un=r((function(n,e){return{$:3,n:n,o:e}})),Wn=[],jn=!1;function Hn(n,e,r){if(Wn.push({p:n,q:e,r:r}),!jn){jn=!0;for(var t;t=Wn.shift();)On(t.p,t.q,t.r);jn=!1}}function On(n,e,r){var t={};for(var o in Yn(!0,e,t,null),Yn(!1,r,t,null),n)Fn(n[o],{$:"fx",a:t[o]||{i:F,j:F}})}function Yn(n,e,r,t){switch(e.$){case 1:var o=e.k,a=function(n,e,r,t){return u(n?Rn[e].e:Rn[e].f,(function(n){for(var e=r;e;e=e.t)n=e.s(n);return n}),t)}(n,o,t,e.l);return void(r[o]=function(n,e,r){return r=r||{i:F,j:F},n?r.i=$(e,r.i):r.j=$(e,r.j),r}(n,a,r[o]));case 2:for(var i=e.m;i.b;i=i.b)Yn(n,i.a,r,t);return;case 3:return void Yn(n,e.o,r,{s:e.n,t:t})}}function qn(n,e){return function(n){Rn[n]&&C(3)}(n),Rn[n]={f:Xn,u:e,a:Jn},Bn(n)}var Xn=r((function(n,e){return function(r){return n(e(r))}}));function Jn(n,e){var r=F,o=Rn[n].u,a=Tn(null);return Rn[n].b=a,Rn[n].c=t((function(n,e){return r=e,a})),{send:function(n){var t=u(dn,o,n);ht(t)||C(4);for(var a=t.a,i=r;i.b;i=i.b)e(i.a(a))}}}var Zn="undefined"!=typeof document?document:{};function Kn(n,e){n.appendChild(e)}function Qn(n){return{$:0,a:n}}var ne,ee=r((function(n,e){return r((function(r,t){for(var o=[],a=0;t.b;t=t.b){var i=t.a;a+=i.b||0,o.push(i)}return a+=o.length,{$:1,c:e,d:le(r),e:o,f:n,b:a}}))}))(void 0),re=r((function(n,e){return r((function(r,t){for(var o=[],a=0;t.b;t=t.b){var i=t.a;a+=i.b.b||0,o.push(i)}return a+=o.length,{$:2,c:e,d:le(r),e:o,f:n,b:a}}))}))(void 0),te=r((function(n,e){return{$:4,j:n,k:e,b:1+(e.b||0)}})),oe=r((function(n,e){return{$:"a0",n:n,o:e}})),ae=r((function(n,e){return{$:"a1",n:n,o:e}})),ie=r((function(n,e){return{$:"a2",n:n,o:e}})),ce=r((function(n,e){return{$:"a3",n:n,o:e}}));function le(n){for(var e={};n.b;n=n.b){var r=n.a,t=r.$,o=r.n,a=r.o;if("a2"!==t){var i=e[t]||(e[t]={});"a3"===t&&"class"===o?ue(i,o,a):i[o]=a}else"className"===o?ue(e,o,a):e[o]=a}return e}function ue(n,e,r){var t=n[e];n[e]=t?t+" "+r:r}function fe(n,e){var r=n.$;if(5===r)return fe(n.k||(n.k=n.m()),e);if(0===r)return Zn.createTextNode(n.a);if(4===r){for(var t=n.k,o=n.j;4===t.$;)"object"!=typeof o?o=[o,t.j]:o.push(t.j),t=t.k;var a={j:o,p:e};return(i=fe(t,a)).elm_event_node_ref=a,i}if(3===r)return se(i=n.h(n.g),e,n.d),i;var i=n.f?Zn.createElementNS(n.f,n.c):Zn.createElement(n.c);se(i,e,n.d);for(var c=n.e,l=0;c.length>l;l++)Kn(i,fe(1===r?c[l]:c[l].b,e));return i}function se(n,e,r){for(var t in r){var o=r[t];"a1"===t?de(n,o):"a0"===t?be(n,e,o):"a3"===t?ve(n,o):"a4"===t?me(n,o):("value"!==t&&"checked"!==t||n[t]!==o)&&(n[t]=o)}}function de(n,e){var r=n.style;for(var t in e)r[t]=e[t]}function ve(n,e){for(var r in e){var t=e[r];void 0!==t?n.setAttribute(r,t):n.removeAttribute(r)}}function me(n,e){for(var r in e){var t=e[r],o=t.f,a=t.o;void 0!==a?n.setAttributeNS(o,r,a):n.removeAttributeNS(o,r)}}function be(n,e,r){var t=n.elmFs||(n.elmFs={});for(var o in r){var a=r[o],i=t[o];if(a){if(i){if(i.q.$===a.$){i.q=a;continue}n.removeEventListener(o,i)}i=pe(e,a),n.addEventListener(o,i,ne&&{passive:2>Lt(a)}),t[o]=i}else n.removeEventListener(o,i),t[o]=void 0}}try{window.addEventListener("t",null,Object.defineProperty({},"passive",{get:function(){ne=!0}}))}catch(n){}function pe(n,e){function r(e){var t=r.q,o=vn(t.a,e);if(ht(o)){for(var a,i=Lt(t),c=o.a,l=i?3>i?c.a:c.au:c,u=1==i?c.b:3==i&&c.c5,f=(u&&e.stopPropagation(),(2==i?c.b:3==i&&c.cV)&&e.preventDefault(),n);a=f.j;){if("function"==typeof a)l=a(l);else for(var s=a.length;s--;)l=a[s](l);f=f.p}f(l,u)}}return r.q=e,r}function ge(n,e){return n.$==e.$&&hn(n.a,e.a)}function he(n,e,r,t){var o={$:e,r:r,s:t,t:void 0,u:void 0};return n.push(o),o}function xe(n,e,r,t){if(n!==e){var o=n.$,a=e.$;if(o!==a){if(1!==o||2!==a)return void he(r,0,t,e);e=function(n){for(var e=n.e,r=e.length,t=Array(r),o=0;r>o;o++)t[o]=e[o].b;return{$:1,c:n.c,d:n.d,e:t,f:n.f,b:n.b}}(e),a=1}switch(a){case 5:for(var i=n.l,c=e.l,l=i.length,u=l===c.length;u&&l--;)u=i[l]===c[l];if(u)return void(e.k=n.k);e.k=e.m();var f=[];return xe(n.k,e.k,f,0),void(f.length>0&&he(r,1,t,f));case 4:for(var s=n.j,d=e.j,v=!1,m=n.k;4===m.$;)v=!0,"object"!=typeof s?s=[s,m.j]:s.push(m.j),m=m.k;for(var b=e.k;4===b.$;)v=!0,"object"!=typeof d?d=[d,b.j]:d.push(b.j),b=b.k;return v&&s.length!==d.length?void he(r,0,t,e):((v?function(n,e){for(var r=0;n.length>r;r++)if(n[r]!==e[r])return!1;return!0}(s,d):s===d)||he(r,2,t,d),void xe(m,b,r,t+1));case 0:return void(n.a!==e.a&&he(r,3,t,e.a));case 1:return void Ce(n,e,r,t,Me);case 2:return void Ce(n,e,r,t,Te);case 3:if(n.h!==e.h)return void he(r,0,t,e);var p=Pe(n.d,e.d);p&&he(r,4,t,p);var g=e.i(n.g,e.g);return void(g&&he(r,5,t,g))}}}function Ce(n,e,r,t,o){if(n.c===e.c&&n.f===e.f){var a=Pe(n.d,e.d);a&&he(r,4,t,a),o(n,e,r,t)}else he(r,0,t,e)}function Pe(n,e,r){var t;for(var o in n)if("a1"!==o&&"a0"!==o&&"a3"!==o&&"a4"!==o)if(o in e){var a=n[o],i=e[o];a===i&&"value"!==o&&"checked"!==o||"a0"===r&&ge(a,i)||((t=t||{})[o]=i)}else(t=t||{})[o]=r?"a1"===r?"":"a0"===r||"a3"===r?void 0:{f:n[o].f,o:void 0}:"string"==typeof n[o]?"":null;else{var c=Pe(n[o],e[o]||{},o);c&&((t=t||{})[o]=c)}for(var l in e)l in n||((t=t||{})[l]=e[l]);return t}function Me(n,e,r,t){var o=n.e,a=e.e,i=o.length,c=a.length;i>c?he(r,6,t,{v:c,i:i-c}):c>i&&he(r,7,t,{v:i,e:a});for(var l=c>i?i:c,u=0;l>u;u++){var f=o[u];xe(f,a[u],r,++t),t+=f.b||0}}function Te(n,e,r,t){for(var o=[],a={},i=[],c=n.e,l=e.e,u=c.length,f=l.length,s=0,d=0,v=t;u>s&&f>d;){var m=(w=c[s]).a,b=(N=l[d]).a,p=w.b,g=N.b,h=void 0,x=void 0;if(m!==b){var C=c[s+1],P=l[d+1];if(C){var M=C.a,T=C.b;x=b===M}if(P){var y=P.a,L=P.b;h=m===y}if(h&&x)xe(p,L,o,++v),Le(a,o,m,g,d,i),v+=p.b||0,we(a,o,m,T,++v),v+=T.b||0,s+=2,d+=2;else if(h)v++,Le(a,o,b,g,d,i),xe(p,L,o,v),v+=p.b||0,s+=1,d+=2;else if(x)we(a,o,m,p,++v),v+=p.b||0,xe(T,g,o,++v),v+=T.b||0,s+=2,d+=1;else{if(!C||M!==y)break;we(a,o,m,p,++v),Le(a,o,b,g,d,i),v+=p.b||0,xe(T,L,o,++v),v+=T.b||0,s+=2,d+=2}}else xe(p,g,o,++v),v+=p.b||0,s++,d++}for(;u>s;){var w;v++,we(a,o,(w=c[s]).a,p=w.b,v),v+=p.b||0,s++}for(;f>d;){var N,S=S||[];Le(a,o,(N=l[d]).a,N.b,void 0,S),d++}(o.length>0||i.length>0||S)&&he(r,8,t,{w:o,x:i,y:S})}var ye="_elmW6BL";function Le(n,e,r,t,o,a){var i=n[r];if(!i)return a.push({r:o,A:i={c:0,z:t,r:o,s:void 0}}),void(n[r]=i);if(1===i.c){a.push({r:o,A:i}),i.c=2;var c=[];return xe(i.z,t,c,i.r),i.r=o,void(i.s.s={w:c,A:i})}Le(n,e,r+ye,t,o,a)}function we(n,e,r,t,o){var a=n[r];if(a){if(0===a.c){a.c=2;var i=[];return xe(t,a.z,i,o),void he(e,9,o,{w:i,A:a})}we(n,e,r+ye,t,o)}else{var c=he(e,9,o,void 0);n[r]={c:1,z:t,r:o,s:c}}}function Ne(n,e,r,t){Se(n,e,r,0,0,e.b,t)}function Se(n,e,r,t,o,a,i){for(var c=r[t],l=c.r;l===o;){var u=c.$;if(1===u)Ne(n,e.k,c.s,i);else if(8===u)c.t=n,c.u=i,(f=c.s.w).length>0&&Se(n,e,f,0,o,a,i);else if(9===u){c.t=n,c.u=i;var f,s=c.s;s&&(s.A.s=n,(f=s.w).length>0&&Se(n,e,f,0,o,a,i))}else c.t=n,c.u=i;if(!(c=r[++t])||(l=c.r)>a)return t}var d=e.$;if(4===d){for(var v=e.k;4===v.$;)v=v.k;return Se(n,v,r,t,o+1,a,n.elm_event_node_ref)}for(var m=e.e,b=n.childNodes,p=0;m.length>p;p++){o++;var g=1===d?m[p]:m[p].b,h=o+(g.b||0);if(!(o>l||l>h||(c=r[t=Se(b[p],g,r,t,o,h,i)])&&(l=c.r)<=a))return t;o=h}return t}function Fe(n,e){for(var r=0;e.length>r;r++){var t=e[r],o=t.t,a=$e(o,t);o===n&&(n=a)}return n}function $e(n,e){switch(e.$){case 0:return function(n,e,r){var t=n.parentNode,o=fe(e,r);return o.elm_event_node_ref||(o.elm_event_node_ref=n.elm_event_node_ref),t&&o!==n&&t.replaceChild(o,n),o}(n,e.s,e.u);case 4:return se(n,e.u,e.s),n;case 3:return n.replaceData(0,n.length,e.s),n;case 1:return Fe(n,e.s);case 2:return n.elm_event_node_ref?n.elm_event_node_ref.j=e.s:n.elm_event_node_ref={j:e.s,p:e.u},n;case 6:for(var r=e.s,t=0;r.i>t;t++)n.removeChild(n.childNodes[r.v]);return n;case 7:for(var o=(r=e.s).e,a=n.childNodes[t=r.v];o.length>t;t++)n.insertBefore(fe(o[t],e.u),a);return n;case 9:if(!(r=e.s))return n.parentNode.removeChild(n),n;var i=r.A;return void 0!==i.r&&n.parentNode.removeChild(n),i.s=Fe(n,r.w),n;case 8:return function(n,e){var r=e.s,t=function(n,e){if(n){for(var r=Zn.createDocumentFragment(),t=0;n.length>t;t++){var o=n[t].A;Kn(r,2===o.c?o.s:fe(o.z,e.u))}return r}}(r.y,e);n=Fe(n,r.w);for(var o=r.x,a=0;o.length>a;a++){var i=o[a],c=i.A,l=2===c.c?c.s:fe(c.z,e.u);n.insertBefore(l,n.childNodes[i.r])}return t&&Kn(n,t),n}(n,e);case 5:return e.s(n);default:C(10)}}function De(n){if(3===n.nodeType)return Qn(n.textContent);if(1!==n.nodeType)return Qn("");for(var e=F,r=n.attributes,t=r.length;t--;){var o=r[t];e=$(u(ce,o.name,o.value),e)}var a=n.tagName.toLowerCase(),i=F,c=n.childNodes;for(t=c.length;t--;)i=$(De(c[t]),i);return f(ee,a,e,i)}var ze=o((function(n,e,r,t){return function(n,e,r,t,o,a){var i=u(dn,n,e?e.flags:void 0);ht(i)||C(2);var c={},l=r(i.a),f=l.a,s=a(v,f),d=function(n,e){var r;for(var t in Rn){var o=Rn[t];o.a&&((r=r||{})[t]=o.a(t,e)),n[t]=Vn(o,e)}return r}(c,v);function v(n,e){var r=u(t,n,f);s(f=r.a,e),Hn(c,r.b,o(f))}return Hn(c,l.b,o(f)),d?{ports:d}:{}}(e,t,n.e3,n.fA,n.fu,(function(e,r){var o=n.fC,a=t.node,i=De(a);return function(n,e){e(n);var r=0;function t(){r=1===r?0:(Ae(t),e(n),1)}return function(o,a){n=o,a?(e(n),2===r&&(r=1)):(0===r&&Ae(t),r=2)}}(r,(function(n){var r=o(n),t=function(n,e){var r=[];return xe(n,e,r,0),r}(i,r);a=function(n,e,r,t){return 0===r.length?n:(Ne(n,e,r,t),Fe(n,r))}(a,i,t,e),i=r}))}))})),_e="undefined"!=typeof cancelAnimationFrame?cancelAnimationFrame:function(n){clearTimeout(n)},Ae="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:function(n){return setTimeout(n,1e3/60)},Re={addEventListener:function(){},removeEventListener:function(){}},Ge="undefined"!=typeof document?document:Re,Ve="undefined"!=typeof window?window:Re,ke=t((function(n,e,r){return Sn(yn((function(){function t(n){Nn(r(n))}return n.addEventListener(e,t,ne&&{passive:!0}),function(){n.removeEventListener(e,t)}})))})),Ee=r((function(n,e){var r=vn(n,e);return ht(r)?Vr(r.a):kr})),Be=r((function(n,e){var r="g";n.fc&&(r+="m"),n.eH&&(r+="i");try{return Vr(RegExp(e,r))}catch(n){return kr}})),Ie=t((function(n,e,r){for(var t,o=[],a=0,i=r,c=e.lastIndex,l=-1;a++<n&&(t=e.exec(i))&&l!=e.lastIndex;){for(var u=t.length-1,f=Array(u);u>0;){var d=t[u];f[--u]=d?Vr(d):kr}o.push(s(Ni,t[0],t.index,a,z(f))),l=e.lastIndex}return e.lastIndex=c,z(o)})),Ue=0;function We(n,e){for(;e.b;e=e.b)n(e.a)}function je(n){for(var e=0;n.b;n=n.b)e++;return e}var He="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:function(n){setTimeout(n,1e3/60)},Oe=a((function(n,e,r,t,o){return{$:0,a:n,b:e,c:r,d:t,e:o}})),Ye=r((function(n,e){var r=n.blend;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.BLEND),r.enabled=!0),r.a===e.a&&r.d===e.d||(n.gl.blendEquationSeparate(e.a,e.d),r.a=e.a,r.d=e.d),r.b===e.b&&r.c===e.c&&r.e===e.e&&r.f===e.f||(n.gl.blendFuncSeparate(e.b,e.c,e.e,e.f),r.b=e.b,r.c=e.c,r.e=e.e,r.f=e.f),r.g===e.g&&r.h===e.h&&r.i===e.i&&r.j===e.j||(n.gl.blendColor(e.g,e.h,e.i,e.j),r.g=e.g,r.h=e.h,r.i=e.i,r.j=e.j)})),qe=r((function(n,e){var r=n.depthTest;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.DEPTH_TEST),r.enabled=!0),r.a!==e.a&&(n.gl.depthFunc(e.a),r.a=e.a),r.b!==e.b&&(n.gl.depthMask(e.b),r.b=e.b),r.c===e.c&&r.d===e.d||(n.gl.depthRange(e.c,e.d),r.c=e.c,r.d=e.d)})),Xe=r((function(n,e){var r=n.stencilTest;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.STENCIL_TEST),r.enabled=!0),r.d===e.d&&r.a===e.a&&r.b===e.b||(n.gl.stencilFuncSeparate(n.gl.FRONT,e.d,e.a,e.b),r.d=e.d),r.e===e.e&&r.f===e.f&&r.g===e.g||(n.gl.stencilOpSeparate(n.gl.FRONT,e.e,e.f,e.g),r.e=e.e,r.f=e.f,r.g=e.g),r.c!==e.c&&(n.gl.stencilMask(e.c),r.c=e.c),r.h===e.h&&r.a===e.a&&r.b===e.b||(n.gl.stencilFuncSeparate(n.gl.BACK,e.h,e.a,e.b),r.h=e.h,r.a=e.a,r.b=e.b),r.i===e.i&&r.j===e.j&&r.k===e.k||(n.gl.stencilOpSeparate(n.gl.BACK,e.i,e.j,e.k),r.i=e.i,r.j=e.j,r.k=e.k)})),Je=r((function(n,e){var r=n.scissor;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.SCISSOR_TEST),r.enabled=!0),r.a===e.a&&r.b===e.b&&r.c===e.c&&r.d===e.d||(n.gl.scissor(e.a,e.b,e.c,e.d),r.a=e.a,r.b=e.b,r.c=e.c,r.d=e.d)})),Ze=r((function(n,e){var r=n.colorMask;r.toggle=n.toggle,r.enabled=!0,r.a===e.a&&r.b===e.b&&r.c===e.c&&r.d===e.d||(n.gl.colorMask(e.a,e.b,e.c,e.d),r.a=e.a,r.b=e.b,r.c=e.c,r.d=e.d)})),Ke=r((function(n,e){var r=n.cullFace;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.CULL_FACE),r.enabled=!0),r.a!==e.a&&(n.gl.cullFace(e.a),r.a=e.a)})),Qe=r((function(n,e){var r=n.polygonOffset;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.POLYGON_OFFSET_FILL),r.enabled=!0),r.a===e.a&&r.b===e.b||(n.gl.polygonOffset(e.a,e.b),r.a=e.a,r.b=e.b)})),nr=r((function(n,e){var r=n.sampleCoverage;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.SAMPLE_COVERAGE),r.enabled=!0),r.a===e.a&&r.b===e.b||(n.gl.sampleCoverage(e.a,e.b),r.a=e.a,r.b=e.b)})),er=function(n){n.scissor.enabled&&(n.gl.disable(n.gl.SCISSOR_TEST),n.scissor.enabled=!1)},rr=function(n){var e=n.colorMask;e.a&&e.b&&e.c&&e.d||(n.gl.colorMask(!0,!0,!0,!0),e.a=!0,e.b=!0,e.c=!0,e.d=!0)},tr=["blend","depthTest","stencilTest","scissor","colorMask","cullFace","polygonOffset","sampleCoverage","sampleAlphaToCoverage"],or=[function(n){n.blend.enabled&&(n.gl.disable(n.gl.BLEND),n.blend.enabled=!1)},function(n){n.depthTest.enabled&&(n.gl.disable(n.gl.DEPTH_TEST),n.depthTest.enabled=!1)},function(n){n.stencilTest.enabled&&(n.gl.disable(n.gl.STENCIL_TEST),n.stencilTest.enabled=!1)},er,rr,function(n){n.gl.disable(n.gl.CULL_FACE)},function(n){n.gl.disable(n.gl.POLYGON_OFFSET_FILL)},function(n){n.gl.disable(n.gl.SAMPLE_COVERAGE)},function(n){n.gl.disable(n.gl.SAMPLE_ALPHA_TO_COVERAGE)}];function ar(n,e,r){var t=n.createShader(r);return n.shaderSource(t,"#extension GL_OES_standard_derivatives : enable\n"+e),n.compileShader(t),t}function ir(n,e){switch(e){case n.FLOAT:return{size:1,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC2:return{size:2,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC3:return{size:3,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC4:return{size:4,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_MAT4:return{size:4,arraySize:4,type:Float32Array,baseType:n.FLOAT};case n.INT:return{size:1,arraySize:1,type:Int32Array,baseType:n.INT}}}function cr(n,e,r,t){for(var o=r.a.ds,a=[],i=0;o>i;i++)a.push(String.fromCharCode(97+i));var c=ir(n,e.type);if(void 0===c)throw Error("No info available for: "+e.type);var l=0,u=c.size*c.arraySize*o,f=new c.type(je(r.b)*u);We((function(n){!function(n,e,r,t,i){var c;if(1===o)for(c=0;e>c;c++)n[r++]=1===e?t[i]:t[i][c];else a.forEach((function(o){for(c=0;e>c;c++)n[r++]=1===e?t[o][i]:t[o][i][c]}))}(f,c.size*c.arraySize,l,n,t[e.name]||e.name),l+=u}),r.b);var s=n.createBuffer();return n.bindBuffer(n.ARRAY_BUFFER,s),n.bufferData(n.ARRAY_BUFFER,f,n.STATIC_DRAW),s}function lr(n,e){return n+"#"+e}var ur=r((function(n,e){var r=n.f,t=r.gl;return t?(t.viewport(0,0,t.drawingBufferWidth,t.drawingBufferHeight),r.depthTest.b||(t.depthMask(!0),r.depthTest.b=!0),r.stencilTest.c!==r.STENCIL_WRITEMASK&&(t.stencilMask(r.STENCIL_WRITEMASK),r.stencilTest.c=r.STENCIL_WRITEMASK),er(r),rr(r),t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT|t.STENCIL_BUFFER_BIT),We((function(e){if(e.d.b.b){var o,a,i,c,l;if(e.b.id&&e.c.id&&(o=lr(e.b.id,e.c.id),a=r.programs[o]),!a){var u,f;e.b.id?u=r.shaders[e.b.id]:e.b.id=Ue++,u||(u=ar(t,e.b.src,t.VERTEX_SHADER),r.shaders[e.b.id]=u),e.c.id?f=r.shaders[e.c.id]:e.c.id=Ue++,f||(f=ar(t,e.c.src,t.FRAGMENT_SHADER),r.shaders[e.c.id]=f);var s=function(n,e,r){var t=n.createProgram();if(n.attachShader(t,e),n.attachShader(t,r),n.linkProgram(t),!n.getProgramParameter(t,n.LINK_STATUS))throw"Link failed: "+n.getProgramInfoLog(t)+"\nvs info-log: "+n.getShaderInfoLog(e)+"\nfs info-log: "+n.getShaderInfoLog(r);return t}(t,u,f);(a={glProgram:s,attributes:Object.assign({},e.b.attributes,e.c.attributes),currentUniforms:{},activeAttributes:[],activeAttributeLocations:[]}).uniformSetters=function(n,e,r,t){var o=r.glProgram,a=r.currentUniforms,i=0,c=e.f;function l(e,r){var t=r.name,o=n.getUniformLocation(e,t);switch(r.type){case n.INT:return function(e){a[t]!==e&&(n.uniform1i(o,e),a[t]=e)};case n.FLOAT:return function(e){a[t]!==e&&(n.uniform1f(o,e),a[t]=e)};case n.FLOAT_VEC2:return function(e){a[t]!==e&&(n.uniform2f(o,e[0],e[1]),a[t]=e)};case n.FLOAT_VEC3:return function(e){a[t]!==e&&(n.uniform3f(o,e[0],e[1],e[2]),a[t]=e)};case n.FLOAT_VEC4:return function(e){a[t]!==e&&(n.uniform4f(o,e[0],e[1],e[2],e[3]),a[t]=e)};case n.FLOAT_MAT4:return function(e){a[t]!==e&&(n.uniformMatrix4fv(o,!1,new Float32Array(e)),a[t]=e)};case n.SAMPLER_2D:var l=i++;return function(e){n.activeTexture(n.TEXTURE0+l);var r=c.textures.get(e);r||(r=e.eL(n),c.textures.set(e,r)),n.bindTexture(n.TEXTURE_2D,r),a[t]!==e&&(n.uniform1i(o,l),a[t]=e)};case n.BOOL:return function(e){a[t]!==e&&(n.uniform1i(o,e),a[t]=e)};default:return function(){}}}for(var u={},f=n.getProgramParameter(o,n.ACTIVE_UNIFORMS),s=0;f>s;s++){var d=n.getActiveUniform(o,s);u[t[d.name]||d.name]=l(o,d)}return u}(t,n,a,Object.assign({},e.b.uniforms,e.c.uniforms));var d=t.getProgramParameter(s,t.ACTIVE_ATTRIBUTES);for(i=0;d>i;i++){var v=t.getActiveAttrib(s,i),m=t.getAttribLocation(s,v.name);a.activeAttributes.push(v),a.activeAttributeLocations.push(m)}o=lr(e.b.id,e.c.id),r.programs[o]=a}r.lastProgId!==o&&(t.useProgram(a.glProgram),r.lastProgId=o),c=a.uniformSetters,Object.keys(l=e.e).forEach((function(n){var e=c[n];e&&e(l[n])}));var b=r.buffers.get(e.d);for(b||(b=function(n,e){if(e.a.dC>0){var r=n.createBuffer(),t=function(n,e){var r,t=new Uint32Array(je(n)*e),o=0;return We((function(n){if(1===e)t[o++]=n;else for(r=0;e>r;r++)t[o++]=n[String.fromCharCode(97+r)]}),n),t}(e.c,e.a.dC);return n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,r),n.bufferData(n.ELEMENT_ARRAY_BUFFER,t,n.STATIC_DRAW),{numIndices:t.length,indexBuffer:r,buffers:{}}}return{numIndices:e.a.ds*je(e.b),indexBuffer:null,buffers:{}}}(t,e.d),r.buffers.set(e.d,b)),i=0;a.activeAttributes.length>i;i++){m=a.activeAttributeLocations[i],void 0===b.buffers[(v=a.activeAttributes[i]).name]&&(b.buffers[v.name]=cr(t,v,e.d,a.attributes)),t.bindBuffer(t.ARRAY_BUFFER,b.buffers[v.name]);var p=ir(t,v.type);if(1===p.arraySize)t.enableVertexAttribArray(m),t.vertexAttribPointer(m,p.size,p.baseType,!1,0,0);else for(var g=4*p.size,h=g*p.arraySize,x=0;p.arraySize>x;x++)t.enableVertexAttribArray(m+x),t.vertexAttribPointer(m+x,p.size,p.baseType,!1,h,g*x)}for(r.toggle=!r.toggle,We(sf(r),e.a),i=0;9>i;i++){var C=r[tr[i]];C.toggle!==r.toggle&&C.enabled&&(or[i](r),C.enabled=!1,C.toggle=r.toggle)}b.indexBuffer?(t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,b.indexBuffer),t.drawElements(e.d.a.d7,b.numIndices,t.UNSIGNED_INT,0)):t.drawArrays(e.d.a.d7,0,b.numIndices)}}),n.g),e):e})),fr=t((function(n,e,r){return function(n,e,r,t){return{$:3,d:le(n),g:e,h:r,i:t}}(e,{g:r,f:{},h:n},gr,hr)})),sr=r((function(n,e){n.contextAttributes.alpha=!0,n.contextAttributes.premultipliedAlpha=e.a})),dr=r((function(n,e){n.contextAttributes.depth=!0,n.sceneSettings.push((function(n){n.clearDepth(e.a)}))})),vr=r((function(n,e){n.contextAttributes.stencil=!0,n.sceneSettings.push((function(n){n.clearStencil(e.a)}))})),mr=r((function(n){n.contextAttributes.antialias=!0})),br=r((function(n,e){n.sceneSettings.push((function(n){n.clearColor(e.a,e.b,e.c,e.d)}))})),pr=r((function(n){n.contextAttributes.preserveDrawingBuffer=!0}));function gr(n){var e={contextAttributes:{alpha:!1,depth:!1,stencil:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1},sceneSettings:[]};We((function(n){return u(ff,e,n)}),n.h);var r=Zn.createElement("canvas"),t=r.getContext&&(r.getContext("webgl",e.contextAttributes)||r.getContext("experimental-webgl",e.contextAttributes));return t&&"undefined"!=typeof WeakMap?(e.sceneSettings.forEach((function(n){n(t)})),t.getExtension("OES_standard_derivatives"),t.getExtension("OES_element_index_uint"),n.f.gl=t,n.f.toggle=!1,n.f.blend={enabled:!1,toggle:!1},n.f.depthTest={enabled:!1,toggle:!1},n.f.stencilTest={enabled:!1,toggle:!1},n.f.scissor={enabled:!1,toggle:!1},n.f.colorMask={enabled:!1,toggle:!1},n.f.cullFace={enabled:!1,toggle:!1},n.f.polygonOffset={enabled:!1,toggle:!1},n.f.sampleCoverage={enabled:!1,toggle:!1},n.f.sampleAlphaToCoverage={enabled:!1,toggle:!1},n.f.shaders=[],n.f.programs={},n.f.lastProgId=null,n.f.buffers=new WeakMap,n.f.textures=new WeakMap,n.f.STENCIL_WRITEMASK=t.getParameter(t.STENCIL_WRITEMASK),He((function(){return u(ur,n,r)}))):(r=Zn.createElement("div")).innerHTML='<a href="https://get.webgl.org/">Enable WebGL</a> to see this content!',r}function hr(n,e){return e.f=n.f,ur(e)}var xr=r((function(n,e){return new Float64Array([n,e])}));new Float64Array(3),new Float64Array(3),new Float64Array(3);var Cr=t((function(n,e,r){return new Float64Array([n,e,r])})),Pr=r((function(n,e){return new Float64Array([e[0]*n,e[1]*n,e[2]*n])})),Mr=o((function(n,e,r,t){return new Float64Array([n,e,r,t])}));new Float64Array(16),new Float64Array(16),new Float64Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);var Tr=D,yr=x,Lr=t((function(n,e,t){var o=t.c,a=t.d,i=r((function(e,r){return f(yr,e.$?n:i,r,e.a)}));return f(yr,i,f(yr,n,e,a),o)})),wr=t((function(n,e,r){for(;;){if(-2===r.$)return e;var t=r.d,o=n,a=f(n,r.b,r.c,f(wr,n,e,r.e));n=o,e=a,r=t}})),Nr=function(n){return f(wr,t((function(n,e,r){return u(Tr,L(n,e),r)})),F,n)},Sr=1,Fr=2,$r=0,Dr=function(n){return{$:1,a:n}},zr=r((function(n,e){return{$:3,a:n,b:e}})),_r=r((function(n,e){return{$:0,a:n,b:e}})),Ar=r((function(n,e){return{$:1,a:n,b:e}})),Rr=function(n){return{$:0,a:n}},Gr=function(n){return{$:2,a:n}},Vr=function(n){return{$:0,a:n}},kr={$:1},Er=Cn,Br=K,Ir=r((function(n,e){return u(X,n,_(e))})),Ur=r((function(n,e){return z(u(q,n,e))})),Wr=t((function(n,e,r){for(;;){if(!r.b)return e;var t=r.b,o=n,a=u(n,r.a,e);n=o,e=a,r=t}})),jr=function(n){return f(Wr,r((function(n,e){return e+1})),0,n)},Hr=A,Or=t((function(n,e,r){for(;;){if(T(n,e)>=1)return r;var t=n,o=e-1,a=u(Tr,e,r);n=t,e=o,r=a}})),Yr=r((function(n,e){return f(Or,n,e,F)})),qr=r((function(n,e){return f(Hr,n,u(Yr,0,jr(e)-1),e)})),Xr=function(n){var e=n.charCodeAt(0);return 55296>e||e>56319?e:1024*(e-55296)+n.charCodeAt(1)-56320+65536},Jr=function(n){return f(Wr,Tr,F,n)},Zr=function(n){var e=n.charCodeAt(0);return isNaN(e)?kr:Vr(55296>e||e>56319?L(n[0],n.slice(1)):L(n[0]+n[1],n.slice(2)))},Kr=32,Qr=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),nt=[],et=B,rt=r((function(n,e){return j(e)/j(n)})),tt=function(n){return n},ot=et(u(rt,2,Kr)),at=s(Qr,0,ot,nt,nt),it=p,ct=function(n){return{$:1,a:n}},lt=I,ut=function(n){return n.length},ft=r((function(n,e){return T(n,e)>0?n:e})),st=R,dt=g,vt=r((function(n,e){for(;;){var r=u(dt,Kr,n),t=r.b,o=u(Tr,{$:0,a:r.a},e);if(!t.b)return Jr(o);n=t,e=o}})),mt=r((function(n,e){for(;;){var r=et(e/Kr);if(1===r)return u(dt,Kr,n).a;n=u(vt,n,F),e=r}})),bt=r((function(n,e){if(e.m){var r=e.m*Kr,t=lt(u(rt,Kr,r-1)),o=n?Jr(e.B):e.B,a=u(mt,o,e.m);return s(Qr,ut(e.r)+r,u(ft,5,t*ot),a,e.r)}return s(Qr,ut(e.r),ot,nt,e.r)})),pt=a((function(n,e,r,t,o){for(;;){if(0>e)return u(bt,!1,{B:t,m:r/Kr|0,r:o});var a=ct(f(it,Kr,e,n));n=n,e-=Kr,r=r,t=u(Tr,a,t),o=o}})),gt=r((function(n,e){if(n>0){var r=n%Kr;return d(pt,e,n-r-Kr,n,F,f(it,r,n-r,e))}return at})),ht=function(n){return!n.$},xt=cn,Ct=on,Pt=rn,Mt=ln,Tt=un,yt=function(n){return{$:0,a:n}},Lt=function(n){switch(n.$){case 0:return 0;case 1:return 1;case 2:return 2;default:return 3}},wt=ee("div"),Nt=function(n){return{$:1,a:n}},St=function(n){return{$:7,a:n}},Ft=function(n){return{$:3,a:n}},$t=t((function(n,e,r){return e(n(r))})),Dt=function(n){return n},zt=function(n){return n.length},_t=J,At=r((function(n,e){return 1>n?e:f(_t,n,zt(e),e)})),Rt=function(n){for(var e=0,r=n.charCodeAt(0),t=43==r||45==r?1:0,o=t;n.length>o;++o){var a=n.charCodeAt(o);if(48>a||a>57)return kr;e=10*e+a-48}return o==t?kr:Vr(45==r?-e:e)},Gt=Z,Vt=Tn,kt=Vt(0),Et=o((function(n,e,r,t){if(t.b){var o=t.a,a=t.b;if(a.b){var i=a.a,c=a.b;if(c.b){var l=c.a,d=c.b;if(d.b){var v=d.b;return u(n,o,u(n,i,u(n,l,u(n,d.a,r>500?f(Wr,n,e,Jr(v)):s(Et,n,e,r+1,v)))))}return u(n,o,u(n,i,u(n,l,e)))}return u(n,o,u(n,i,e))}return u(n,o,e)}return e})),Bt=t((function(n,e,r){return s(Et,n,e,0,r)})),It=r((function(n,e){return f(Bt,r((function(e,r){return u(Tr,n(e),r)})),F,e)})),Ut=Ln,Wt=r((function(n,e){return u(Ut,(function(e){return Vt(n(e))}),e)})),jt=t((function(n,e,r){return u(Ut,(function(e){return u(Ut,(function(r){return Vt(u(n,e,r))}),r)}),e)})),Ht=function(n){return f(Bt,jt(Tr),Vt(F),n)},Ot=kn,Yt=r((function(n,e){var r=e;return Sn(u(Ut,Ot(n),r))}));Rn.Task=Gn(kt,t((function(n,e){return u(Wt,(function(){return 0}),Ht(u(It,Yt(n),e)))})),t((function(){return Vt(0)})),r((function(n,e){return u(Wt,n,e)})));var qt=Bn("Task"),Xt=r((function(n,e){return qt(u(Wt,n,e))})),Jt=ze,Zt=r((function(n,e){return{$:0,a:n,b:e}})),Kt=function(n){return{$:6,a:n}},Qt=r((function(n,e){return{$:4,a:n,b:e}})),no=r((function(n,e){return{$:2,a:n,b:e}})),eo=In,ro=Un,to=function(n){return{$:1,a:n}},oo=t((function(n,e,r){return{cI:r,ek:e,ep:n}})),ao=Vt(f(oo,F,kr,0)),io=function(n){return yn((function(e){var r=n.f;2===r.$&&r.c&&r.c(),n.f=null,e(Tn(0))}))},co=yn((function(n){n(Tn(Date.now()))})),lo=yn((function(n){var e=Ae((function(){n(Tn(Date.now()))}));return function(){_e(e)}})),uo=En,fo=Sn,so=t((function(n,e,r){var t=r.ek,o=r.cI,a=L(t,e);return 1===a.a.$?a.b.b?u(Ut,(function(n){return u(Ut,(function(r){return Vt(f(oo,e,Vr(n),r))}),co)}),fo(u(Ut,uo(n),lo))):ao:a.b.b?Vt(f(oo,e,t,o)):u(Ut,(function(){return ao}),io(a.a.a))})),vo=Dt,mo=t((function(n,e,r){var t=r.ep,o=r.cI,a=function(r){return u(Ot,n,(0,r.a)(r.$?e-o:vo(e)))};return u(Ut,(function(n){return u(Ut,(function(){return Vt(f(oo,t,Vr(n),e))}),Ht(u(It,a,t)))}),fo(u(Ut,uo(n),lo)))})),bo=t((function(n,e,r){return n(e(r))}));Rn["Browser.AnimationManager"]=Gn(ao,so,mo,0,r((function(n,e){return e.$?to(u(bo,n,e.a)):{$:0,a:u(bo,n,e.a)}})));var po=Bn("Browser.AnimationManager"),go=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),ho=r((function(n,e){return{ec:e,ep:n}})),xo={$:-2},Co=xo,Po=Vt(u(ho,F,Co)),Mo=function(n){return L(S(n.a?"w_":"d_",n.b),n)},To=a((function(n,e,r,t,o){return{$:-1,a:n,b:e,c:r,d:t,e:o}})),yo=a((function(n,e,r,t,o){if(-1!==o.$||o.a){if(-1!==t.$||t.a||-1!==t.d.$||t.d.a)return d(To,n,e,r,t,o);var a=t.d;return i=t.e,d(To,0,t.b,t.c,d(To,1,a.b,a.c,a.d,a.e),d(To,1,e,r,i,o))}var i,c=o.b,l=o.c,u=o.d,f=o.e;return-1!==t.$||t.a?d(To,n,c,l,d(To,0,e,r,t,u),f):d(To,0,e,r,d(To,1,t.b,t.c,t.d,i=t.e),d(To,1,c,l,u,f))})),Lo=y,wo=t((function(n,e,r){if(-2===r.$)return d(To,0,n,e,xo,xo);var t=r.a,o=r.b,a=r.c,i=r.d,c=r.e;switch(u(Lo,n,o)){case 0:return d(yo,t,o,a,f(wo,n,e,i),c);case 1:return d(To,t,o,e,i,c);default:return d(yo,t,o,a,i,f(wo,n,e,c))}})),No=t((function(n,e,r){var t=f(wo,n,e,r);return-1!==t.$||t.a?t:d(To,1,t.b,t.c,t.d,t.e)})),So=function(n){return f(Wr,r((function(n,e){return f(No,n.a,n.b,e)})),Co,n)},Fo=t((function(n,e,r){for(;;){if(-2===r.$)return e;var t=r.e,o=n,a=f(n,r.b,r.c,f(Fo,n,e,r.d));n=o,e=a,r=t}})),$o=i((function(n,e,o,a,i,c){var l=f(Fo,t((function(r,t,a){n:for(;;){var i=a.a,c=a.b;if(i.b){var l=i.a,u=l.a,d=l.b,v=i.b;if(0>T(u,r)){r=r,t=t,a=L(v,f(n,u,d,c));continue n}return T(u,r)>0?L(i,f(o,r,t,c)):L(v,s(e,u,d,t,c))}return L(i,f(o,r,t,c))}})),L(Nr(a),c),i),u=l.a,d=l.b;return f(Wr,r((function(e,r){return f(n,e.a,e.b,r)})),d,u)})),Do=r((function(n,e){return{dw:e,dE:n}})),zo=t((function(n,e,r){return u(Wt,(function(n){return L(e,n)}),f(ke,r.a?Ve:Ge,r.b,(function(r){return u(uo,n,u(Do,e,r))})))})),_o=r((function(n,e){return f(Fo,No,e,n)})),Ao=t((function(n,e,r){var a=t((function(e,r,t){var o=t.c;return w(t.a,t.b,u(Tr,f(zo,n,e,r),o))})),i=t((function(n,e,r){var t=r.b,o=r.c;return w(u(Tr,e,r.a),t,o)})),c=o((function(n,e,r,t){var o=t.c;return w(t.a,f(No,n,e,t.b),o)})),l=u(It,Mo,e),s=v($o,i,c,a,r.ec,So(l),w(F,Co,F)),d=s.b,m=s.c;return u(Ut,(function(n){return Vt(u(ho,l,u(_o,d,So(n))))}),u(Ut,(function(){return Ht(m)}),Ht(u(It,io,s.a))))})),Ro=t((function(n,e,r){var t=n(e);return t.$?r:u(Tr,t.a,r)})),Go=r((function(n,e){return f(Bt,Ro(n),F,e)}));Rn["Browser.Events"]=Gn(Po,Ao,t((function(n,e,r){var t=e.dE,o=e.dw,a=u(Go,(function(n){var e=n.b.c;return P(n.a,t)?u(Ee,e,o):kr}),r.ep);return u(Ut,(function(){return Vt(r)}),Ht(u(It,Ot(n),a)))})),0,r((function(n,e){return f(go,e.a,e.b,u(Mt,n,e.c))})));var Vo,ko,Eo,Bo,Io,Uo,Wo,jo,Ho,Oo,Yo,qo,Xo,Jo,Zo,Ko,Qo,na,ea,ra,ta,oa,aa,ia,ca,la,ua,fa,sa,da,va,ma,ba,pa,ga,ha,xa,Ca=Bn("Browser.Events"),Pa=t((function(n,e,r){return Ca(f(go,n,e,r))})),Ma=u(Pa,0,"click"),Ta=u(Pa,0,"keydown"),ya=u(Pa,0,"keyup"),La=u(Pa,0,"mousedown"),wa=u(Pa,0,"mousemove"),Na=u(Pa,0,"mouseup"),Sa=nn,Fa=en,$a=r((function(n,e){return n(e?1:0)})),Da=function(n){var e=void 0!==Zn.hidden?{e0:"hidden",eK:"visibilitychange"}:void 0!==Zn.mozHidden?{e0:"mozHidden",eK:"mozvisibilitychange"}:void 0!==Zn.msHidden?{e0:"msHidden",eK:"msvisibilitychange"}:void 0!==Zn.webkitHidden?{e0:"webkitHidden",eK:"webkitvisibilitychange"}:{e0:"hidden",eK:"visibilitychange"};return f(Pa,0,e.eK,u(Mt,$a(n),u(Ct,"target",u(Ct,e.e0,Fa))))},za=tn,_a=function(n){return{$:3,b:n}},Aa=qn("touchCancel",_a(u(xt,(function(n){return u(xt,(function(e){return u(xt,(function(r){return yt({bl:r,cK:e,cL:n})}),u(Ct,"identifier",Sa))}),u(Ct,"pageX",Pt))}),u(Ct,"pageY",Pt)))),Ra=qn("touchEnd",_a(u(xt,(function(n){return u(xt,(function(e){return u(xt,(function(r){return yt({bl:r,cK:e,cL:n})}),u(Ct,"identifier",Sa))}),u(Ct,"pageX",Pt))}),u(Ct,"pageY",Pt)))),Ga=qn("touchMove",_a(u(xt,(function(n){return u(xt,(function(e){return u(xt,(function(r){return yt({bl:r,cK:e,cL:n})}),u(Ct,"identifier",Sa))}),u(Ct,"pageX",Pt))}),u(Ct,"pageY",Pt)))),Va=qn("touchStart",_a(u(xt,(function(n){return u(xt,(function(e){return u(xt,(function(r){return yt({bl:r,cK:e,cL:n})}),u(Ct,"identifier",Sa))}),u(Ct,"pageX",Pt))}),u(Ct,"pageY",Pt)))),ka=eo(u(Tr,(xa=u($t,st(.001),(function(n){return{$:6,a:n}})),po(to(xa))),u(It,ro(St),z([(Vo=no,f(Pa,1,"resize",u(Ct,"target",f(Tt,Vo,u(Ct,"innerWidth",Sa),u(Ct,"innerHeight",Sa))))),ya(u(Mt,Zt(!1),u(Ct,"key",za))),Ta(u(Mt,Zt(!0),u(Ct,"key",za))),Da(Ft),Ma(yt({$:5})),La(yt(Kt(!0))),Na(yt(Kt(!1))),wa(f(Tt,Qt,u(Ct,"pageX",Pt),u(Ct,"pageY",Pt))),Va((function(n){return{$:7,a:n}})),Ga((function(n){return{$:8,a:n}})),Ra((function(n){return{$:9,a:n}})),Aa((function(n){return{$:10,a:n}}))])))),Ea={$:1},Ba=function(n){return{$:2,a:n}},Ia=r((function(n,e){return{$:0,a:n,b:e}})),Ua=function(n){return n.b.k.a},Wa=function(n){var e=n.b.E;return e.b?Vr(u(Ia,n.a,{k:e.a,E:e.b,q:S(n.b.q,z([n.b.k]))})):kr},ja=r((function(n,e){return N(e,{ch:n})})),Ha=r((function(n,e){return N(e,e.I.ch?{I:u(ja,!1,e.I),a4:e.a4+n}:{a4:e.a4+n})})),Oa=r((function(n,e){return e.$?n:e.a})),Ya=t((function(n,e,r){var t=r.a,o=r.b;switch(t.$){case 1:return r;case 2:var a=t.a.c6;return(T(a+e,Ua(r).a4)>0?u($t,Wa,Oa(u(Ia,Ea,o))):Dt)(u(Ia,Ba({c6:a+e}),o));default:var i=o.k,c=i.b,l=u(Ha,e,i.a);return u(Ia,t,{k:L(l,u(n,l,c)),E:F,q:S(o.q,z([o.k]))})}})),qa=r((function(n,e){n:for(;;){if(n>0){if(e.b){n-=1,e=e.b;continue n}return e}return e}})),Xa=t((function(n,e,r){n:for(;;){if(n>0){if(e.b){var t=e.a;n-=1,e=e.b,r=u(Tr,t,r);continue n}return r}return r}})),Ja=r((function(n,e){return Jr(f(Xa,n,e,F))})),Za=t((function(n,e,r){if(e>0){var t=L(e,r);n:for(;;){e:for(;;){if(!t.b.b)return r;if(!t.b.b.b){if(1===t.a)break n;break e}switch(t.a){case 1:break n;case 2:var o=t.b;return z([o.a,o.b.a]);case 3:if(t.b.b.b.b){var a=t.b,i=a.b;return z([a.a,i.a,i.b.a])}break e;default:if(t.b.b.b.b&&t.b.b.b.b.b){var c=t.b,l=c.b,s=l.b,d=s.b,v=d.b;return u(Tr,c.a,u(Tr,l.a,u(Tr,s.a,u(Tr,d.a,n>1e3?u(Ja,e-4,v):f(Za,n+1,e-4,v)))))}break e}}return r}return z([t.b.a])}return F})),Ka=r((function(n,e){return f(Za,0,n,e)})),Qa=r((function(n,e){var r=e.b.E,t=S(e.b.q,S(z([e.b.k]),r)),o=u(Ka,n,t),a=u(qa,n,t);if(a.b)return u(Ia,Ea,{k:a.a,E:a.b,q:o});var i=Jr(o);return i.b?u(Ia,Ea,{k:i.a,E:F,q:Jr(i.b)}):e})),ni={$:0},ei=r((function(n,e){switch(n.$){case 1:return function(n){var e=n.b.q,r=n.b.E;return e.b?u(Ia,Ea,{k:e.a,E:S(e.b,S(z([n.b.k]),r)),q:F}):n}(e);case 2:return u(Oa,e,function(n){var e=n.b.k,r=n.b.E,t=Jr(n.b.q);if(t.b){var o=t.b;return Vr(u(Ia,Ea,{k:t.a,E:u(Tr,e,r),q:Jr(o)}))}return kr}(e));case 3:return u(Ia,Ea,e.b);case 4:return function(n){return u(Ia,ni,n.b)}(e);case 5:return function(n){var e=n.b;return u(Ia,Ba({c6:Ua(n).a4}),e)}(e);case 6:return u(Oa,e,Wa(e));case 7:return function(n){var e=n.b.q,r=n.b.k,t=Jr(n.b.E);if(t.b){var o=t.b;return u(Ia,Ea,{k:t.a,E:F,q:S(e,S(z([r]),Jr(o)))})}return n}(e);default:return u(Qa,n.a,e)}})),ri=r((function(n,e){var r=e.b;return L(n(e.a),r)})),ti=o((function(n,e,r,t){return{ch:t,aS:r,bF:n,bG:e}})),oi=Co,ai={cb:!1,aS:!1,cn:!1,O:oi,ai:!1,a1:!1,c2:!1,c3:!1,b7:!1},ii=r((function(n,e){return N(e,{aS:n})})),ci=t((function(n,e,r){return N(r,{bF:n,bG:e})})),li=function(n){if(-1===n.$&&-1===n.d.$&&-1===n.e.$){if(-1!==n.e.d.$||n.e.d.a){var e=n.d,r=n.e;return i=r.b,c=r.c,t=r.d,f=r.e,d(To,1,n.b,n.c,d(To,0,e.b,e.c,e.d,e.e),d(To,0,i,c,t,f))}var t,o=n.d,a=n.e,i=a.b,c=a.c,l=(t=a.d).d,u=t.e,f=a.e;return d(To,0,t.b,t.c,d(To,1,n.b,n.c,d(To,0,o.b,o.c,o.d,o.e),l),d(To,1,i,c,u,f))}return n},ui=function(n){if(-1===n.$&&-1===n.d.$&&-1===n.e.$){if(-1!==n.d.d.$||n.d.d.a){var e=n.d,r=n.e;return u=r.b,f=r.c,s=r.d,v=r.e,d(To,1,t=n.b,o=n.c,d(To,0,e.b,e.c,e.d,c=e.e),d(To,0,u,f,s,v))}var t=n.b,o=n.c,a=n.d,i=a.d,c=a.e,l=n.e,u=l.b,f=l.c,s=l.d,v=l.e;return d(To,0,a.b,a.c,d(To,1,i.b,i.c,i.d,i.e),d(To,1,t,o,c,d(To,0,u,f,s,v)))}return n},fi=c((function(n,e,r,t,o,a,i){if(-1!==a.$||a.a){n:for(;;){if(-1===i.$&&1===i.a){if(-1===i.d.$){if(1===i.d.a)return ui(e);break n}return ui(e)}break n}return e}return d(To,r,a.b,a.c,a.d,d(To,0,t,o,a.e,i))})),si=function(n){if(-1===n.$&&-1===n.d.$){var e=n.a,r=n.b,t=n.c,o=n.d,a=o.d,i=n.e;if(1===o.a){if(-1!==a.$||a.a){var c=li(n);if(-1===c.$){var l=c.e;return d(yo,c.a,c.b,c.c,si(c.d),l)}return xo}return d(To,e,r,t,si(o),i)}return d(To,e,r,t,si(o),i)}return xo},di=r((function(n,e){if(-2===e.$)return xo;var r=e.a,t=e.b,o=e.c,a=e.d,i=e.e;if(0>T(n,t)){if(-1===a.$&&1===a.a){var c=a.d;if(-1!==c.$||c.a){var l=li(e);if(-1===l.$){var f=l.e;return d(yo,l.a,l.b,l.c,u(di,n,l.d),f)}return xo}return d(To,r,t,o,u(di,n,a),i)}return d(To,r,t,o,u(di,n,a),i)}return u(vi,n,m(fi,n,e,r,t,o,a,i))})),vi=r((function(n,e){if(-1===e.$){var r=e.a,t=e.b,o=e.c,a=e.d,i=e.e;if(P(n,t)){var c=function(n){for(;;){if(-1!==n.$||-1!==n.d.$)return n;n=n.d}}(i);return-1===c.$?d(yo,r,c.b,c.c,a,si(i)):xo}return d(yo,r,t,o,a,u(di,n,i))}return xo})),mi=r((function(n,e){var r=u(di,n,e);return-1!==r.$||r.a?r:d(To,1,r.b,r.c,r.d,r.e)})),bi=r((function(n,e){return{dl:-e/2,cp:e,ai:-n/2,a1:n/2,bA:e/2,dd:n}})),pi=r((function(n,e){return{S:e,X:n}})),gi=f(Tt,r((function(n,e){return L(n,e)})),u(Ct,"A1",za),u(Ct,"A2",za)),hi=fn,xi=s(hi,t((function(n,e,r){return w(n,e,r)})),u(Ct,"A1",Pt),u(Ct,"A2",Pt),u(Ct,"A3",Pt)),Ci=f(Tt,r((function(n,e){return L(n,e)})),u(Ct,"A1",za),u(Ct,"A2",xi)),Pi=f(Tt,pi,u(Ct,"floats",_a(Ci)),u(Ct,"colors",_a(gi))),Mi=sn,Ti=r((function(n,e){return{S:e,aF:"",X:n,as:""}})),yi=u(Ti,F,F),Li=r((function(n,e){return e.$?kr:n(e.a)})),wi=r((function(n,e){return e.$?Dr(e.a):n(e.a)})),Ni=o((function(n,e,r,t){return{e2:e,fa:n,fg:r,ft:t}})),Si=Ie,Fi=r((function(n,e){return e.$?Dr(n):Rr(e.a)})),$i=Be,Di=function(n){return n.b?Vr(n.a):kr},zi=r((function(n,e){return e.$?kr:Vr(n(e.a))})),_i=r((function(n,e){return e.$?Dr(e.a):Rr(n(e.a))})),Ai=r((function(n,e){return Xr(e)-Xr(n)})),Ri=t((function(n,e,r){var t=Xr(r);return 1>T(Xr(n),t)&&1>T(t,Xr(e))})),Gi=r((function(n,e){var r=f(Ri,"0","9",e)?Rr(u(Ai,"0",e)):f(Ri,"a","z",e)?Rr(10+u(Ai,"a",e)):f(Ri,"A","Z",e)?Rr(10+u(Ai,"A",e)):Dr({$:0,a:e});return u(wi,(function(r){return 0>T(r,n)?Rr(r):Dr({$:1,a:e})}),r)})),Vi=r((function(n,e){var r=Zr(e);if(1===r.$)return Rr(0);var t=r.a,o=t.b;return u(wi,(function(e){return u(wi,(function(r){return Rr(e+r*n)}),u(Vi,n,o))}),u(Gi,n,t.a))})),ki=function(n){for(var e=n.length,r=Array(e),t=0;e>t;){var o=n.charCodeAt(t);55296>o||o>56319?(r[e-t]=n[t],t++):(r[e-t]=n[t+1],r[e-++t]=n[t-1],t++)}return r.join("")},Ei=r((function(n,e){return 2>n||n>36?Dr({$:2,a:n}):u(Vi,n,ki(e))})),Bi=Ei(16),Ii=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),Ui=t((function(n,e,r){return s(Ii,n,e,r,1)})),Wi=o((function(n,e,r,t){return s(Ii,n,e,r,t)})),ji=G,Hi=U,Oi=r((function(n,e){var r=u(ji,10,n);return Hi(e*r)/r})),Yi=Y,qi=function(n){return f(Yi,Tr,F,n)},Xi=(ko=function(n){var e=qi(n);if(e.b&&!e.b.b){var r=e.a;return _(z([r,r])).join("")}return n},u($t,(function(n){return n.toLowerCase()}),u($t,(function(n){return u(zi,(function(e){return f(Si,1,e,n)}),u($i,{eH:!1,fc:!1},"^#?(?:(?:([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2}))|(?:([a-f\\d])([a-f\\d])([a-f\\d]))|(?:([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2}))|(?:([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d])))$"))}),u($t,Li(Di),u($t,zi((function(n){return n.ft})),u($t,zi(Go(Dt)),u($t,Fi("Parsing hex regex failed"),wi((function(n){var e=u(It,u($t,ko,u($t,Bi,_i(tt))),n);n:for(;;){if(e.b&&!e.a.$&&e.b.b&&!e.b.a.$&&e.b.b.b&&!e.b.b.a.$){if(e.b.b.b.b){if(e.b.b.b.a.$||e.b.b.b.b.b)break n;var r=e.b,t=r.b;return Rr(s(Wi,e.a.a/255,r.a.a/255,t.a.a/255,u(Oi,2,t.b.a.a/255)))}var o=e.b;return Rr(f(Ui,e.a.a/255,o.a.a/255,o.b.a.a/255))}break n}return Dr("Parsing ints from hex failed")}))))))))),Ji=r((function(n,e){return L(e.a,n(e.b))})),Zi=s(Ii,1,1,1,1),Ki=r((function(n,e){return e.$?n:e.a})),Qi=u($t,Mi(Pi),u($t,_i((function(n){return{S:u(It,Ji(u($t,Xi,Ki(Zi))),n.S),aF:"",X:n.X,as:""}})),Ki(yi))),nc=function(n){return f(Wr,r((function(n,e){return f(Mn,n.a,n.b,e)})),{},n)},ec=Pn,rc=function(n){var e=n.b;return nc(z([L("A1",ec(n.a)),L("A2",ec(e))]))},tc=Pn,oc=function(n){var e=n.b,r=n.c;return nc(z([L("A1",tc(n.a)),L("A2",tc(e)),L("A3",tc(r))]))},ac=function(n){var e=n.b;return nc(z([L("A1",ec(n.a)),L("A2",oc(e))]))},ic=r((function(n,e){return f(Wr,function(n){return r((function(e,r){return r.push(n(e)),r}))}(n),[],e)})),cc=O,lc=function(n){return u(cc,n,"")},uc=t((function(n,e,r){return n>0?f(uc,n>>1,S(e,e),1&n?S(r,e):r):r})),fc=r((function(n,e){return f(uc,n,e,"")})),sc=t((function(n,e,r){return S(u(fc,n-zt(r),lc(e)),r)})),dc=function(n){return 0>n||n>1114111?"�":n>65535?String.fromCharCode(Math.floor((n-=65536)/1024)+55296,n%1024+56320):String.fromCharCode(n)},vc=V,mc=function(n){var e=function(n){return 10>n?Br(n):lc(dc(87+n))};return 16>n?e(n):S(mc(n/16|0),e(u(vc,16,n)))},bc=u($t,mc,u(sc,2,"0")),pc=function(n){return{aQ:n.d,cf:n.c,co:n.b,cX:n.a}},gc=function(n){var e=pc(n),r=e.cX,t=e.co,o=e.cf;return u(Ir,"",u(Tr,"#",u(It,u($t,Hi,bc),z([255*r,255*t,255*o]))))},hc=u($t,(function(n){return{S:u(It,Ji(gc),n.S),X:n.X}}),u($t,(function(n){return nc(z([L("floats",u(ic,ac,n.X)),L("colors",u(ic,rc,n.S))]))}),Er(0))),xc=function(n){return 0>n?-n:n},Cc=function(n){if(0===n.length||/[\sxbo]/.test(n))return kr;var e=+n;return e==e?Vr(e):kr},Pc=t((function(n,e,r){return u(Oa,NaN,Cc(u(n,e,r)))})),Mc=function(n){return!n},Tc=r((function(n,e){for(;;){if(!e.b)return!1;var r=e.b;if(n(e.a))return!0;n=n,e=r}})),yc=r((function(n,e){var r=u(Tc,(function(n){return"0"!==n&&"."!==n}),qi(e));return S(n&&r?"-":"",e)})),Lc=K,wc=function(n){var e=n.a,r=n.b;if("9"===e){var t=Zr(r);return 1===t.$?"01":u(cc,"0",wc(t.a))}var o=Xr(e);return o>=48&&57>o?u(cc,dc(o+1),r):"0"},Nc=function(n){return n===1/0||n===-1/0},Sc=H,Fc=t((function(n,e,r){return S(r,u(fc,n-zt(r),lc(e)))})),$c=function(n){var e=u(Ur,".",n);return e.b?L(e.a,e.b.b?e.b.a:"0"):L("0","0")},Dc=t((function(n,e,r){if(Nc(r)||Sc(r))return Lc(r);var t=0>r,o=$c(function(n){var e=u(Ur,"e",Lc(xc(n)));if(e.b){if(e.b.b){var r=e.a,t=e.b.a,o=u(Oa,0,Rt(u(Gt,"+",t)?u(At,1,t):t)),a=$c(r),i=S(a.a,a.b),c=0>o?u(Oa,"0",u(zi,(function(n){return n.a+"."+n.b}),u(zi,ri(lc),Zr(S(u(fc,xc(o),"0"),i))))):f(Fc,o+1,"0",i);return S(0>n?"-":"",c)}return S(0>n?"-":"",r=e.a)}return""}(xc(r))),a=o.a,i=o.b,c=zt(a)+e,l=S(u(fc,1-c,"0"),f(Fc,c,"0",S(a,i))),s=zt(l),d=u(ft,1,c),v=u(n,t,f(_t,d,s,l)),m=f(_t,0,d,l),b=v?ki(u(Oa,"1",u(zi,wc,Zr(ki(m))))):m,p=zt(b),g="0"===b?b:e>0?0>T(e,zt(i))?f(_t,0,p-e,b)+"."+f(_t,p-e,p,b):S(a+".",f(Fc,e,"0",i)):S(b,u(fc,xc(e),"0"));return u(yc,t,g)})),zc=Dc(r((function(n,e){var r,t=Zr(e);return 1!==t.$&&("5"===t.a.a?""!==t.a.b||!n:(r=Xr(t.a.a))>53&&n||r>=53&&!n)}))),_c=Pc(zc),Ac=t((function(n,e,r){var t=u(rt,10,xc(e-n));return u(_c,0>t?3:1>t?2:2>t?1:0,r)})),Rc=r((function(n,e){switch(n.$){case 2:var r=Qi(e.as);return N(r,{aF:r.aF,as:r.as});case 3:return N(e,{as:n.a});case 4:return N(e,{aF:hc(e)});case 0:var t=n.a,o=n.b;return N(e,{X:u(It,(function(n){var e=n.a,r=n.b,a=r.a,i=r.c;return P(e,t)?L(e,w(a,f(Ac,a,i,o),i)):n}),e.X)});default:return t=n.a,o=n.b,N(e,{S:u(It,(function(n){var e=n.a;return P(e,t)?L(e,o):n}),e.S)})}})),Gc=r((function(n,e){return f(No,n,0,e)})),Vc=r((function(n,e){return u(mi,n,e)})),kc=t((function(n,e,r){var t=u(n?Gc:Vc,e,r.O);switch(e){case" ":return N(r,{O:t,c3:n});case"Enter":return N(r,{cn:n,O:t});case"Shift":return N(r,{O:t,c2:n});case"Backspace":return N(r,{cb:n,O:t});case"ArrowUp":return N(r,{O:t,b7:n});case"ArrowDown":return N(r,{aS:n,O:t});case"ArrowLeft":return N(r,{O:t,ai:n});case"ArrowRight":return N(r,{O:t,a1:n});default:return N(r,{O:t})}})),Ec=r((function(n,e){switch(n.$){case 1:var r=n.a.fD;return N(e,{ad:u(bi,r.dd,r.cp)});case 2:return N(e,{ad:u(bi,n.a,n.b)});case 3:return N(e,{bm:ai,I:s(ti,e.I.bF,e.I.bG,!1,!1)});case 0:return N(e,{bm:f(kc,n.a,n.b,e.bm)});case 4:return N(e,{I:f(ci,e.ad.ai+n.a,e.ad.bA-n.b,e.I)});case 5:return N(e,{I:u(ja,!0,e.I)});case 6:return N(e,{I:u(ii,n.a,e.I)});case 7:case 8:return N(e,{ae:f(Wr,(function(n){return u(No,n.bl,{bF:e.ad.ai+n.cK,bG:e.ad.bA-n.cL})}),e.ae,n.a)});case 9:case 10:return N(e,{ae:f(Wr,(function(n){return mi(n.bl)}),e.ae,n.a)});default:return N(e,{aR:u(Rc,n.a,e.aR)})}})),Bc=r((function(n,e){var r=e.b;return u(Ia,e.a,N(r,{k:u(ri,Ec(n),r.k)}))})),Ic=t((function(n,e,r){var t=r.b,o=t.k;return u(Ia,r.a,N(t,{k:u(Ji,u(n,o.a,e),o)}))})),Uc=o((function(n,e,r,t){switch(r.$){case 0:return t;case 1:return N(t,{a8:r.a});case 2:return N(t,{bf:!1});case 3:return N(t,{bf:!0});case 4:return N(t,{R:f(Ic,e,r.a,t.R)});case 5:return N(t,{R:u(ei,r.a,t.R)});case 7:return N(t,{R:u(Bc,r.a,t.R)});default:return N(t,{R:f(Ya,n,r.a,t.R)})}})),Wc=(ha=function(){return{em:(n=Ge.body,e=Ge.documentElement,{dd:Math.max(n.scrollWidth,n.offsetWidth,e.scrollWidth,e.offsetWidth,e.clientWidth),cp:Math.max(n.scrollHeight,n.offsetHeight,e.scrollHeight,e.offsetHeight,e.clientHeight)}),fD:{bF:Ve.pageXOffset,bG:Ve.pageYOffset,dd:Ge.documentElement.clientWidth,cp:Ge.documentElement.clientHeight}};var n,e},yn((function(n){Ae((function(){n(Tn(ha()))}))}))),jc=r((function(n,e){return{aR:e,cl:n.cl,bm:ai,I:s(ti,0,0,!1,!1),ad:u(bi,600,600),a4:0,ae:Co}})),Hc=r((function(n,e){return u(Ia,ni,{k:L(n,e(n)),E:F,q:F})})),Oc=In,Yc=Oc(F),qc=function(n){return{$:11,a:n}},Xc=function(n){return{$:4,a:n}},Jc=function(n){return{$:5,a:n}},Zc={$:2},Kc={$:0},Qc=function(n){return{$:1,a:n}},nl={$:3},el=r((function(n){return n})),rl=ee("button"),tl=function(n){return n?"Level Editor":"Configurations"},ol=function(n){return u(Oa,0,Di(u(Go,(function(e){return P(tl(e),n)?Vr(e):kr}),z([0,1]))))},al=te,il=al,cl=oe,ll=r((function(n,e){return u(cl,n,{$:0,a:e})})),ul=r((function(n,e){return f(Bt,Ct,e,n)})),fl=u(ul,z(["target","value"]),za),sl=function(n){return u(ll,"click",yt(n))},dl=ee("option"),vl=ee("select"),ml=ae,bl=ml,pl=Qn,gl=pl,hl=r((function(n,e){return u(ie,n,ec(e))})),xl=hl("value"),Cl=r((function(n,e){return{$:1,a:n,b:e}})),Pl=r((function(n,e){return{$:0,a:n,b:e}})),Ml=s(Ii,0,0,0,1),Tl=u(rl,z([u(bl,"cursor","pointer"),sl({$:4})]),z([gl("Export Configurations as json")])),yl=ee("h3"),Ll=ee("p"),wl=Pn,Nl=r((function(n,e){return u(ie,n,wl(e))})),Sl=Nl("readOnly"),Fl=ee("textarea"),$l=function(n){return u(wt,F,z([u(Fl,z([Sl(!0)]),z([gl(n.aF)]))]))},Dl=function(n){return u(wt,F,z([u(yl,F,z([gl("Export Configurations")])),u(Ll,F,z([Tl])),u(Ll,F,z([$l(n)]))]))},zl=hl("htmlFor"),_l=ee("hr"),Al=hl("id"),Rl=u(rl,z([u(bl,"cursor","pointer"),sl({$:2})]),z([gl("Import Configurations")])),Gl=function(n){return{$:3,a:n}},Vl=function(n){return L(n,!0)},kl=r((function(n,e){return u(cl,n,{$:1,a:e})})),El=function(n){return u(kl,"input",u(Mt,Vl,u(Mt,n,fl)))},Bl=function(n){return u(wt,F,z([u(Fl,z([El(Gl)]),z([gl(n.as)]))]))},Il=function(n){return u(wt,F,z([u(yl,F,z([gl("Import Configurations")])),u(Ll,F,z([Bl(n)])),u(Ll,F,z([Rl]))]))},Ul=ee("input"),Wl=ee("label"),jl=hl("max"),Hl=hl("min"),Ol=hl("name"),Yl=ee("span"),ql=hl("type"),Xl=function(n){return{$:0,a:n}},Jl=function(n){return jr(n.b.q)},Zl=function(n){return u(Ul,z([u(bl,"position","absolute"),ql("range"),u(bl,"width","100%"),Hl("0"),jl(Br((e=n,r=e.b.E,jr(e.b.q)+1+jr(r)-1))),xl(Br(Jl(n))),El(u($t,Rt,u($t,Oa(0),Xl)))]),F);var e,r},Kl=function(n){var e=n.b.k,r=n.b.E,t=u(Oa,e,Di(n.b.q)).a.a4,o=u(Oa,e,Di(Jr(r))).a.a4-t,a=lt(o/1);return u(wt,z([u(bl,"position","absolute"),u(bl,"width","100%"),u(bl,"height","20px")]),u(It,(function(n){return u(wt,z([u(bl,"position","absolute"),u(bl,"background-color","yellow"),u(bl,"width","1px"),u(bl,"height","20px"),u(bl,"left",Lc(100*n*1/o)+"%")]),F)}),u(Yr,0,a)))},Ql={$:1},nu={$:7},eu={$:6},ru={$:2},tu={$:3},ou={$:5},au={$:4},iu=r((function(n,e){return u(rl,z([u(bl,"display","inline-block"),u(bl,"width","30px"),u(bl,"height","30px"),u(bl,"margin","2px"),u(bl,"padding","0px"),u(bl,"top","0px"),u(bl,"font-size","20px"),sl(n)]),z([gl(e)]))})),cu=function(n){return u(wt,z([u(bl,"width","100%")]),z([(e=n,r=e.a,u(wt,F,z([u(iu,Ql,"⏮️"),u(iu,ru,"◀️"),1===r.$?u(iu,ou,"▶️"):u(iu,tu,"⏸️"),r.$?u(iu,au,"⏺️"):u(iu,tu,"⏹"),u(iu,eu,"⏯️"),u(iu,nu,"⏭️")]))),u(wt,F,z([Kl(n),Zl(n)]))]));var e,r},lu=t((function(n,e,t){var o,a,i,c,l=t.R.b.k.b,f=u(wt,z([u(bl,"margin-left","0px")]),z([u(vl,z([(o=u($t,ol,Qc),u(ll,"change",u(Mt,o,fl))),xl(tl(t.a8)),u(bl,"width","200px"),u(bl,"height","40px"),u(bl,"font-size","20px")]),u(It,(function(n){return u(dl,z([xl(tl(n))]),z([gl(tl(n))]))}),z([0,1])))])),s=r((function(n,e){return u(rl,z([u(bl,"font-size","30px"),u(bl,"width","40px"),u(bl,"height","40px"),sl(n)]),z([gl(e)]))})),d=Ua(t.R),v=t.a8?u(il,Xc,u(e,d,l)):u(wt,F,z([u(il,Jc,cu(t.R)),u(il,u($t,qc,St),(a=d.aR,i=function(n){var e=n.a,r=n.b,t=r.a,o=r.b,a=r.c;return u(wt,z([u(bl,"margin-top","15px")]),z([u(wt,F,z([u(Wl,z([zl(e)]),z([gl(e),gl(": "),u(Yl,z([u(bl,"font-family","monospace"),u(bl,"font-weight","bold")]),z([gl(Lc(o))]))]))])),u(Ul,z([ql("range"),Al(e),Ol(e),Hl(Lc(t)),jl(Lc(a)),El((function(n){return u(Pl,e,u(Oa,0,Cc(n)))})),u(hl,"step","any"),u(bl,"width","200px"),xl(Lc(o))]),F)]))},c=function(n){var e=n.a,r=n.b;return u(wt,z([u(bl,"margin-top","15px")]),z([u(wt,F,z([u(Wl,z([zl(e)]),z([gl(e)]))])),u(Ul,z([ql("color"),u(bl,"width","200px"),u(bl,"height","30px"),Al(e),Ol(e),El((function(n){return u(Cl,e,u(Ki,Ml,Xi(n)))})),xl(gc(r))]),F)]))},u(wt,z([u(bl,"margin-left","20px"),u(bl,"height","100%"),u(bl,"overflow","scroll")]),z([u(wt,F,u(It,i,a.X)),u(wt,F,u(It,c,a.S)),u(_l,F,F),Dl(a),Il(a)]))))])),m=u(wt,z([u(bl,"position","fixed"),u(bl,"top","0px"),u(bl,"left","0px"),u(bl,"width",Lc(250)+"px"),u(bl,"height",Lc(d.ad.cp)+"px"),u(bl,"font-family",'-apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif'),u(bl,"font-size","16px")]),z(t.bf?[u(wt,z([u(bl,"height","100px")]),z([u(s,Zc,"✕"),f])),u(wt,z([u(bl,"height",Lc(d.ad.cp-100)+"px")]),z([v]))]:[u(s,nl,"≡")])),b=u(wt,z([u(bl,"position","fixed"),u(bl,"top","0px"),u(bl,"left","0px"),u(bl,"width",Lc(d.ad.dd)+"px"),u(bl,"height",Lc(d.ad.cp)+"px"),u(bl,"font-size","16px")]),z([u(il,el(Kc),u(n,d,l))]));return u(wt,z([u(bl,"touch-action","none"),u(bl,"user-select","none")]),z([b,m]))})),uu=i((function(n,e,t,o,a,i){return Jt({e3:function(n){return L({a8:0,bf:!1,R:u(Hc,u(jc,n,t),o),dc:0},u(Xt,u($t,Nt,St),Wc))},fu:function(n){return 1===n.dc?u(ro,St,Da(Ft)):ka},fA:r((function(n,r){return L(s(Uc,e,i,n,r),Yc)})),fC:u(lu,n,a)})})),fu=o((function(n,e,o,a){return v(uu,n,e,o,a,r((function(){return u(wt,F,F)})),t((function(n,e,r){return r})))})),su=Ti,du=su,vu=u(du,z([L("camera height",w(1.4,1.57,1.57))]),F),mu=r((function(n,e){return e})),bu=r((function(n,e){return u(Oa,0,Di(u(Go,(function(e){var r=e.b.b;return P(e.a,n)?Vr(r):kr}),e.X)))})),pu=r((function(n,e){return u(bu,n,e.aR)})),gu=pu,hu=function(n){return-n},xu=r((function(n,e){return{bF:n.bG*e.fN-n.fN*e.bG,bG:n.fN*e.bF-n.bF*e.fN,fN:n.bF*e.bG-n.bG*e.bF}})),Cu=function(n){return n.df},Pu=function(n){return n.dg},Mu=function(n){return n.cJ},Tu=k,yu=E,Lu=t((function(n,e,r){var t=n,o=r,a=.5*e,i=Tu(a),c=yu(a),l=t.eN,u=l.bF*c,f=i*u,s=u*u,d=l.bG*c,v=i*d,m=u*d,b=d*d,p=l.fN*c,g=i*p,h=u*p,x=d*p,C=p*p;return{bF:(1-2*(b+C))*o.bF+2*(m-g)*o.bG+2*(h+v)*o.fN,bG:2*(m+g)*o.bF+(1-2*(s+C))*o.bG+2*(x-f)*o.fN,fN:2*(h-v)*o.bF+2*(x+f)*o.bG+(1-2*(s+b))*o.fN}})),wu=t((function(n,e,r){var t=n,o=r,a=.5*e,i=Tu(a),c=yu(a),l=t.cJ,u=o.bF-l.bF,f=o.bG-l.bG,s=o.fN-l.fN,d=t.eN,v=d.bF*c,m=i*v,b=v*v,p=d.bG*c,g=i*p,h=v*p,x=p*p,C=d.fN*c,P=i*C,M=v*C,T=p*C,y=C*C;return{bF:l.bF+(1-2*(x+y))*u+2*(h-P)*f+2*(M+g)*s,bG:l.bG+2*(h+P)*u+(1-2*(b+y))*f+2*(T-m)*s,fN:l.fN+2*(M-g)*u+2*(T+m)*f+(1-2*(b+x))*s}})),Nu=function(n){return n.df},Su=function(n){return n.dg},Fu=function(n){return n.dh},$u=t((function(n,e,r){return{cJ:f(wu,n,e,Mu(r)),df:f(Lu,n,e,Nu(r)),dg:f(Lu,n,e,Su(r)),dh:f(Lu,n,e,Fu(r))}})),Du=t((function(n,e,r){return f($u,n(r),e,r)})),zu=function(n){return n.eN},_u=r((function(n,e){return{bF:e.bF+n.bF,bG:e.bG+n.bG,fN:e.fN+n.fN}})),Au=r((function(n,e){return{cJ:u(_u,n,Mu(e)),df:Nu(e),dg:Su(e),dh:Fu(e)}})),Ru=r((function(n,e){return{bF:n*e.bF,bG:n*e.bG,fN:n*e.fN}})),Gu=t((function(n,e,r){return u(Au,u(Ru,e,n),r)})),Vu=t((function(n,e,r){return f(Gu,zu(n(r)),e,r)})),ku=r((function(n,e){return{eN:e,cJ:n}})),Eu=function(n){return u(ku,n.cJ,n.df)},Bu=function(n){return u(ku,n.cJ,n.dg)},Iu=function(n){return u(ku,n.cJ,n.dh)},Uu=function(n){return xc(n)},Wu={bF:0,bG:0,fN:0},ju=Dt,Hu={bF:1,bG:0,fN:0},Ou=Hu,Yu={bF:0,bG:0,fN:1},qu=Yu,Xu=ju({cJ:Wu,df:qu,dg:Ou}),Ju=function(n){return function(n){var e,r,t,o=n.fE;return function(n){return{cW:(e=Uu(n.fE),{$:1,a:e}),db:n.db};var e}({db:(e={eC:n.eC,cm:1e3,eQ:n.eQ,eW:n.eW,dz:Xu},t={cJ:e.eW,df:Pu(e.dz),dg:(r=e.dz,u(xu,Cu(r),Pu(r))),dh:Cu(e.dz)},f(Vu,Iu,e.cm,f(Du,Eu,hu(e.eQ),f(Du,Bu,e.eC,t)))),fE:o})}({eC:u(gu,"camera height",n),eQ:u(gu,"camera height",n),eW:{bF:0,bG:2,fN:0},fE:2})},Zu=3.141592653589793,Ku=function(n){return n*Zu/180},Qu=function(n){return{$:0,a:n}},nf={$:3},ef=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),rf=ef,tf=r((function(n,e){return e.b?f(Bt,Tr,e,n):n})),of=function(n){return f(Bt,tf,F,n)},af=r((function(n,e){return of(u(It,n,e))})),cf=function(n){return u(ce,"height",Br(n))},lf=function(n){return re(function(n){return"script"==n?"p":n}(n))},uf=function(n){return{$:2,a:n}},ff=r((function(n,e){switch(e.$){case 0:return u(sr,n,e);case 1:return u(dr,n,e);case 2:return u(vr,n,e);case 3:return u(mr,n,e);case 4:return u(br,n,e);default:return u(pr,n,e)}})),sf=r((function(n,e){switch(e.$){case 0:return u(Ye,n,e);case 1:return u(qe,n,e);case 2:return u(Xe,n,e);case 3:return u(Je,n,e);case 4:return u(Ze,n,e);case 5:return u(Ke,n,e);case 6:return u(Qe,n,e);case 7:return u(nr,n,e);default:return function(n){var e=n.sampleAlphaToCoverage;e.toggle=n.toggle,e.enabled||(n.gl.enable(n.gl.SAMPLE_ALPHA_TO_COVERAGE),e.enabled=!0)}(n)}})),df=t((function(n,e,r){return f(fr,n,e,r)})),vf=Mr,mf=s(vf,1,1,1,1),bf=t((function(n,e,r){return u(It,(function(n){return u(n,e,r)}),n)})),pf=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),gf=r((function(n,e){var r=e.bF,t=e.bG;return f(pf,n*r/t,n,n*(1-r-t)/t)})),hf=Cr,xf=r((function(n,e){return f(hf,3.2406*(t=(r=u(gf,n,e)).a)-1.5372*(o=r.b)-.4986*(a=r.c),-.9689*t+1.8758*o+.0415*a,.0557*t-.204*o+1.057*a);var r,t,o,a})),Cf=r((function(n,e){return{dD:P(n.dD,e.dD),s:n.s*e.s+n.t*e.v+n.u*e.y,t:n.s*e.t+n.t*e.w+n.u*e.z,u:n.s*e.u+n.t*e.x+n.u*e.A,v:n.v*e.s+n.w*e.v+n.x*e.y,w:n.v*e.t+n.w*e.w+n.x*e.z,x:n.v*e.u+n.w*e.x+n.x*e.A,y:n.y*e.s+n.z*e.v+n.A*e.y,z:n.y*e.t+n.z*e.w+n.A*e.z,A:n.y*e.u+n.z*e.x+n.A*e.A,J:e.J+(n.J*e.s+n.K*e.v+n.L*e.y)*e.b5,K:e.K+(n.J*e.t+n.K*e.w+n.L*e.z)*e.b5,L:e.L+(n.J*e.u+n.K*e.x+n.L*e.A)*e.b5,b5:n.b5*e.b5}})),Pf=function(n){var e=new Float64Array(16);return e[0]=n.dL,e[1]=n.dP,e[2]=n.dT,e[3]=n.dX,e[4]=n.dM,e[5]=n.dQ,e[6]=n.dU,e[7]=n.dY,e[8]=n.dN,e[9]=n.dR,e[10]=n.dV,e[11]=n.dZ,e[12]=n.dO,e[13]=n.dS,e[14]=n.dW,e[15]=n.d_,e},Mf=a((function(n,e,r,t,o){return v(o,n,s(vf,t.b5,t.b5,t.b5,t.dD?1:-1),function(n){return Pf({dL:n.s,dM:n.v,dN:n.y,dO:n.J,dP:n.t,dQ:n.w,dR:n.z,dS:n.K,dT:n.u,dU:n.x,dV:n.A,dW:n.L,dX:0,dY:0,dZ:0,d_:1})}(t),t.dD,e,r)})),Tf=i((function(n,e,r,t,o,a){n:for(;;)switch(o.$){case 0:return a;case 5:var i=o.b;n=n,e=e,r=r,t=u(Cf,o.a,t),o=i,a=a;continue n;case 1:return{P:u(Tr,d(Mf,n,e,r,t,o.b),a.P),Z:a.Z,fp:a.fp};case 3:return{P:a.P,Z:u(Tr,d(Mf,n,e,r,t,o.b),a.Z),fp:a.fp};case 2:return{P:a.P,Z:a.Z,fp:u(Tr,d(Mf,n,e,r,t,o.a),a.fp)};default:var c=o.a;return f(Wr,s(Tf,n,e,r,t),a,c)}})),yf=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),Lf=yf,wf=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),Nf=r((function(n,e){return{$:6,a:n,b:e}})),Sf=Nf,Ff=z([s(wf,518,!1,0,1),s(Lf,!1,!1,!1,!1),u(Sf,0,1)]),$f=519,Df=7681,zf={src:"\n        precision lowp float;\n\n        void main() {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        }\n    ",attributes:{},uniforms:{}},_f=Oe,Af=r((function(n,e){return{$:0,a:n,b:e}})),Rf=Af({ds:1,dC:0,d7:5}),Gf=xr,Vf=Rf(z([{b1:u(Gf,-1,-1)},{b1:u(Gf,1,-1)},{b1:u(Gf,-1,1)},{b1:u(Gf,1,1)}])),kf={src:"\n        precision lowp float;\n\n        attribute vec2 position;\n\n        void main() {\n            gl_Position = vec4(position, 0.0, 1.0);\n        }\n    ",attributes:{position:"b1"},uniforms:{}},Ef=function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return function(f){return{$:2,a:n,b:e,c:r,d:t,e:o,f:a,g:i,h:c,i:l,j:u,k:f}}}}}}}}}}}},Bf=t((function(n,e,t){var o=n.cY,a=n.cA,i=n.de,c=r((function(n,e){return e(n)})),l=r((function(n,e){return e(n)})),s=function(n){return u($t,c(n.bw),u($t,l(n.bh),u($t,l(n.bH),l(n.bI))))};return u(s,t,u(s,e,f(Ef,o,a,i)))})),If=function(n){return f(Bf,{cA:n.cA,cY:n.cY,de:n.de},{bh:n.bh,bw:n.bw,bH:n.bH,bI:n.bI},{bh:n.bh,bw:n.bw,bH:n.bH,bI:n.bI})},Uf=function(n){return d(_f,z([If(n),s(Lf,!1,!1,!1,!1)]),kf,zf,Vf,{})},Wf=Uf({bh:Df,cA:0,cY:8,bw:$f,de:15,bH:Df,bI:Df}),jf=7680,Hf=function(n){return Uf({bh:jf,cA:15,cY:8,bw:516,de:(e=n,u(ji,2,e+4)),bH:5386,bI:5386});var e},Of=t((function(n,e,r){return of(z([f(bf,n,r,Ff),z([Hf(e),Wf])]))})),Yf=r((function(n,e){return of(u(qr,Of(n),e))})),qf=s(wf,513,!0,0,1),Xf=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),Jf=r((function(n,e){return f(Xf,32774,n,e)})),Zf=function(n){var e=n.b3,t=n.bQ,o=n.bL,a=n.bJ,i=n.bN,c=n.aQ;return u(r((function(n,r){var i=n.b,c=n.c,l=r.a,u=r.b,f=r.c;return function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return{$:0,a:n,b:e,c:r,d:t,e:o,f:a,g:i,h:c,i:l,j:u}}}}}}}}}}}(n.a)(i)(c)(l)(u)(f)(e)(t)(o)(a)})),i,c)}({bJ:0,aQ:u(Jf,1,771),bL:0,bN:u(Jf,770,771),bQ:0,b3:0}),Kf=z([qf,Zf]),Qf=function(n){return n.d2},ns=function(n){return n.d5},es=r((function(n,e){return e-n})),rs=function(n){return w(u(es,function(n){return n.d3}(n),function(n){return n.d0}(n)),u(es,function(n){return n.d4}(n),function(n){return n.d1}(n)),u(es,ns(n),Qf(n)))},ts=function(n){return Mu(n)},os=function(n){return{cJ:{bF:n.J,bG:n.K,fN:n.L},df:{bF:n.s,bG:n.t,fN:n.u},dg:{bF:n.v,bG:n.w,fN:n.x},dh:{bF:n.y,bG:n.z,fN:n.A}}},as=r((function(n,e){var r=n.dh,t=n.dg,o=n.df;return{bF:e.bF*o.bF+e.bG*o.bG+e.fN*o.fN,bG:e.bF*t.bF+e.bG*t.bG+e.fN*t.fN,fN:e.bF*r.bF+e.bG*r.bG+e.fN*r.fN}})),is=r((function(n,e){var r=n.cJ,t=e.bF-r.bF,o=e.bG-r.bG,a=e.fN-r.fN,i=n.dh,c=n.dg,l=n.df;return{bF:t*l.bF+o*l.bG+a*l.fN,bG:t*c.bF+o*c.bG+a*c.fN,fN:t*i.bF+o*i.bG+a*i.fN}})),cs=r((function(n,e){return{cJ:u(is,n,Mu(e)),df:u(as,n,Nu(e)),dg:u(as,n,Su(e)),dh:u(as,n,Fu(e))}})),ls=t((function(n,e,r){return{bF:n,bG:e,fN:r}})),us=r((function(n,e){return u(ft,n,e)})),fs=r((function(n,e){return 0>T(n,e)?n:e})),ss=r((function(n,e){return u(fs,n,e)})),ds=r((function(n,e){var r=e,t=n;return{d0:u(us,t.d0,r.d0),d1:u(us,t.d1,r.d1),d2:u(us,t.d2,r.d2),d3:u(ss,t.d3,r.d3),d4:u(ss,t.d4,r.d4),d5:u(ss,t.d5,r.d5)}})),vs=function(n){return.5*n},ms=r((function(n,e){return e+n})),bs=r((function(n,e){var r=n.a,t=n.c,o=vs(Uu(n.b)),a=vs(Uu(r)),i=vs(Uu(t)),c=function(n){return w(n.bF,n.bG,n.fN)}(e),l=c.a,f=c.b,s=c.c;return{d0:u(ms,a,l),d1:u(ms,o,f),d2:u(ms,i,s),d3:u(es,a,l),d4:u(es,o,f),d5:u(es,i,s)}})),ps=o((function(n,e,r,t){var o=r.eJ,a=2*r.e_*e,i=2*r.eZ*e,c=2*r.eY*e,l=o.fN*e,s=o.bG*e,d=o.bF*e,v=Fu(n),m=xc(c*v.bF)+xc(i*v.bG)+xc(a*v.fN),b=Su(n),p=xc(c*b.bF)+xc(i*b.bG)+xc(a*b.fN),g=Nu(n),h=xc(c*g.bF)+xc(i*g.bG)+xc(a*g.fN),x=u(bs,w(h,p,m),u(is,n,f(ls,d,s,l)));return Vr(t.$?x:u(ds,t.a,x))})),gs=o((function(n,e,r,t){n:for(;;){if(!t.b)return r;var o=t.a,a=t.b;switch(o.$){case 0:n=c=n,e=l=e,r=f=r,t=a;continue n;case 1:var i=s(ps,n,e,o.a,r);n=c=n,e=l=e,r=f=i,t=a;continue n;case 2:n=c=n,e=l=e,r=f=r,t=a;continue n;case 3:i=s(ps,n,e,o.a,r),n=c=n,e=l=e,r=f=i,t=a;continue n;case 4:var c=n,l=e,f=s(gs,n,e,r,o.a);n=c,e=l,r=f,t=a;continue n;default:var d=o.a,v=o.b,m=u(cs,os(d),n),b=e*d.b5;n=c=n,e=l=e,r=f=s(gs,m,b,r,z([v])),t=a;continue n}}})),hs=function(n){return n[0]},xs=function(n){return n[1]},Cs=function(n){return n[2]},Ps=function(n){return{$:4,a:n}},Ms=r((function(n,e){for(;;){if(!n.b)return e;var r=n.a;n=n.b,e=u(Tr,r,e)}})),Ts=function(n){return Ps(u(Ms,n,F))},ys={dD:!0,s:1,t:0,u:0,v:0,w:1,x:0,y:0,z:0,A:1,J:0,K:0,L:0,b5:1},Ls=Uf({bh:Df,cA:0,cY:8,bw:$f,de:255,bH:Df,bI:Df}),ws=W,Ns={bL:0,eI:!1,bQ:0,cU:0,b3:0,c8:0,bF:0,bG:0,fN:0},Ss=r((function(n,e){return Pf({dL:n.bF,dM:n.b3,dN:e.bF,dO:e.b3,dP:n.bG,dQ:n.bQ,dR:e.bG,dS:e.bQ,dT:n.fN,dU:n.bL,dV:e.fN,dW:e.bL,dX:n.c8,dY:n.cU,dZ:e.c8,d_:e.cU})})),Fs=L({bo:u(Ss,Ns,Ns),bU:u(Ss,Ns,Ns),bV:u(Ss,Ns,Ns),bW:u(Ss,Ns,Ns)},s(vf,0,0,0,0)),$s=r((function(n,e){return n*e})),Ds=function(n){return s(wf,515,n.af,n.aa,n._)},zs=z([Ds({_:1,aa:0,af:!0}),If({bh:jf,cA:240,cY:0,bw:514,de:0,bH:jf,bI:jf}),Zf]),_s=r((function(n,e){var r=n,t=e.eV,o=e.eA,a=Uu(e.fe),i=Uu(t),c=r.cW;if(c.$){var l=c.a;return Nc(i)?Pf({dL:2/(o*l),dM:0,dN:0,dO:0,dP:0,dQ:2/l,dR:0,dS:0,dT:0,dU:0,dV:0,dW:-1,dX:0,dY:0,dZ:0,d_:1}):Pf({dL:2/(o*l),dM:0,dN:0,dO:0,dP:0,dQ:2/l,dR:0,dS:0,dT:0,dU:0,dV:-2/(i-a),dW:-(i+a)/(i-a),dX:0,dY:0,dZ:0,d_:1})}var u=c.a;return Nc(i)?Pf({dL:1/(o*u),dM:0,dN:0,dO:0,dP:0,dQ:1/u,dR:0,dS:0,dT:0,dU:0,dV:-1,dW:-2*a,dX:0,dY:0,dZ:-1,d_:0}):Pf({dL:1/(o*u),dM:0,dN:0,dO:0,dP:0,dQ:1/u,dR:0,dS:0,dT:0,dU:0,dV:-(i+a)/(i-a),dW:-2*i*a/(i-a),dX:0,dY:0,dZ:-1,d_:0})})),As=r((function(n,e){return 1==(1&n>>e)?0:1})),Rs=t((function(n,e,r){return of(u(It,(function(r){var t=r<<4;return f(bf,n,L(e,s(vf,u(As,r,0),u(As,r,1),u(As,r,2),u(As,r,3))),function(n){return z([Ds({_:1,aa:0,af:!0}),If({bh:jf,cA:240,cY:n,bw:514,de:0,bH:jf,bI:jf}),Zf])}(t))}),u(Yr,1,u(ji,2,r)-1)))})),Gs=function(n){return{bF:-n.bF,bG:-n.bG,fN:-n.fN}},Vs=function(n){return Gs(Fu(n))},ks={bF:0,bG:1,fN:0},Es=ks,Bs={cJ:Wu,df:Ou,dg:Es,dh:qu},Is=r((function(n,e){var r,t,o,a,i;return t=Mu(r=u(cs,e,n)),o=Fu(r),a=Su(r),i=Nu(r),Pf({dL:i.bF,dM:a.bF,dN:o.bF,dO:t.bF,dP:i.bG,dQ:a.bG,dR:o.bG,dS:t.bG,dT:i.fN,dU:a.fN,dV:o.fN,dW:t.fN,dX:0,dY:0,dZ:0,d_:1})})),Us=function(n){return Nu(n)},Ws=t((function(n,e,r){return{bF:n,bG:e,fN:r}})),js=function(n){return Su(n)},Hs=r((function(n,e){var r,t=z([(1,{$:1,a:1}),uf(0),Qu(!0),s(rf,0,0,0,0)]),o=function(){var e=n.ey;switch(e.$){case 0:return w(t,"0",1);case 1:return w(u(Tr,nf,t),"1",1);default:return w(t,"0",e.a)}}(),a=o.a,i=o.b,c=o.c,l=n.dr,d=l.a,m=l.b,b=u(bl,"height",Br(m)+"px"),p=d,g=p/m,h=u(af,(function(e){return function(n){var e=function(n){return n.db}(n.eG),r={cJ:ts(e),df:Us(e),dg:js(e),dh:Gs(Vs(e))},t=Ts(n.dv),o=s(gs,r,1,kr,z([t]));if(1===o.$)return F;var a=o.a,i=u(Is,Bs,e),c=u($s,.99,u(us,Uu(n.$7),hu(Qf(a)))),l=rs(a),d=function(n){var e=n,r=u(ft,xc(e.bF),u(ft,xc(e.bG),xc(e.fN)));if(r){var t=e.fN/r,o=e.bG/r,a=e.bF/r;return ws(a*a+o*o+t*t)*r}return 0}(f(Ws,l.a,l.b,l.c)),m=u($s,1.01,u(ms,d,hu(ns(a)))),b=u(_s,n.eG,{eA:n.eA,eV:m,fe:c}),p=function(n){return{dL:n[0],dP:n[1],dT:n[2],dX:n[3],dM:n[4],dQ:n[5],dU:n[6],dY:n[7],dN:n[8],dR:n[9],dV:n[10],dZ:n[11],dO:n[12],dS:n[13],dW:n[14],d_:n[15]}}(b).d_,g=p?Gs(Vs(e)):ts(e),h=function(){var e=n.fz;switch(e.$){case 0:return L(0,0);case 1:return L(1,0);case 2:return L(2,0);case 3:return L(3,e.a);case 4:return L(4,e.a);default:return L(5,0)}}(),x=h.a,C=h.b,P=u(xf,n.eT,n.fF),M=Pf({dL:0,dM:g.bF,dN:hs(P),dO:n.eq,dP:0,dQ:g.bG,dR:xs(P),dS:d,dT:0,dU:g.fN,dV:Cs(P),dW:x,dX:0,dY:p,dZ:0,d_:C}),T=v(Tf,M,i,b,ys,t,{P:F,Z:F,fp:F}),y=n.e9;switch(y.$){case 0:return of(z([f(bf,T.P,L(w=y.a,mf),Kf),f(bf,T.Z,Fs,Kf)]));case 1:var w=y.a;return of(z([f(bf,T.P,Fs,Kf),z([Ls]),f(bf,T.fp,w.bo,Ff),z([Hf(0)]),f(bf,T.P,L(w,mf),zs),f(bf,T.Z,Fs,Kf)]));default:var N=y.a,S=y.b;return of(z([f(bf,T.P,L(S,mf),Kf),z([Ls]),u(Yf,T.fp,N),f(Rs,T.P,S,jr(N)),f(bf,T.Z,Fs,Kf)]))}}({eA:g,eG:n.eG,$7:n.$7,dv:e.dv,eT:e.eT,e9:e.e9,eq:c,fz:e.fz,fF:e.fF})}),e),x=u(bl,"width",Br(p)+"px"),C=function(n){var e,r,t=n.b,o=n.c,a=n.d,i=function(n){return Hi(1e4*n)/100};return e=z(["rgba(",Lc(i(n.a)),"%,",Lc(i(t)),"%,",Lc(i(o)),"%,",Lc((r=a,Hi(1e3*r)/1e3)),")"]),u(Ir,"",e)}(n.dk);return f(lf,"div",z([u(bl,"padding","0px"),x,b]),z([L(i,f(df,a,z([(r=Hi(p*c),u(ce,"width",Br(r))),cf(Hi(m*c)),x,b,u(bl,"display","block"),u(bl,"background-color",C)]),h))]))})),Os={bF:.31271,bG:.32902},Ys=r((function(n,e){var r=n,t=e.eN,o=t.bF,a=t.bG,i=t.fN,c=u(xf,e.cq,e.cg);return{bL:Cs(c),eI:r,bQ:xs(c),cU:0,b3:hs(c),c8:1,bF:-o,bG:-a,fN:-i}})),qs={$:0},Xs=r((function(n,e){return T(e,n)>0})),Js=function(n){return function(n){for(;;){if(P(n.e4,0)&&P(n.e5,0))return Ns;if(!u(Xs,Uu(n.e4),Uu(n.e5))){var e=xc(n.e5/Zu),r=xc(n.e4/Zu),t=n.b8,o=t.bF,a=t.bG,i=t.fN,c=u(xf,1,n.cg);return{bL:r*Cs(c),eI:!1,bQ:r*xs(c),cU:e/r,b3:r*hs(c),c8:3,bF:o,bG:a,fN:i}}n={cg:n.cg,e4:n.e5,e5:n.e4,b8:Gs(n.b8)}}}({cg:n.cg,e4:n.cq,e5:0,b8:n.b8})},Zs=t((function(n,e,r){return 0>T(r,n)?n:T(r,e)>0?e:r})),Ks=function(n){var e=f(Zs,1667,25e3,n),r=e>4e3?-3025846900/(e*e*e)+2107037.9/(e*e)+.2226347*1e3/e+.24039:-266123900.00000003/(e*e*e)-.2343589*1e6/(e*e)+877.6956/e+.17991;return{bF:r,bG:e>2222?e>4e3?r*r*r*3.081758-r*r*5.8733867+3.75112997*r-.37001483:r*r*r*-.9549476-r*r*1.37418593+2.09137015*r-.16748867:r*r*r*-1.1063814-r*r*1.3481102+2.18555832*r-.20219683}},Qs=Ks(12e3),nd=Ks(5600),ed=r((function(n,e){return{$:2,a:n,b:e}})),rd=function(n){return{$:0,a:n}},td=function(n){return n.eI},od=rd(Fs.a),ad=r((function(n,e){return f(Bt,r((function(e,r){var t=r.a,o=r.b;return n(e)?L(u(Tr,e,t),o):L(t,u(Tr,e,o))})),L(F,F),e)})),id=function(n){return Pf({dL:n.bF,dM:n.b3,dN:0,dO:0,dP:n.bG,dQ:n.bQ,dR:0,dS:0,dT:n.fN,dU:n.bL,dV:0,dW:0,dX:n.c8,dY:n.cU,dZ:0,d_:0})},cd=l((function(n,e,r,t,o,a,i,c){var l=u(ad,td,z([n,e,r,t])),f=l.a;if(f.b){var s=S(f,l.b);if(s.b&&s.b.b&&s.b.b.b&&s.b.b.b.b&&!s.b.b.b.b.b){var d=s.a,v=s.b,m=v.a,b=v.b,p=b.a,g=b.b.a;return u(ed,u(It,id,f),{bo:u(Ss,d,m),bU:u(Ss,p,g),bV:u(Ss,o,a),bW:u(Ss,i,c)})}return od}return rd({bo:u(Ss,n,e),bU:u(Ss,r,t),bV:u(Ss,o,a),bW:u(Ss,i,c)})})),ld=t((function(n,e,r){return b(cd,n,e,r,Ns,Ns,Ns,Ns,Ns)})),ud=function(n){return n.eB},fd=o((function(n,e,r,t){return{$:2,a:n,b:e,c:r,d:t}})),sd=o((function(n,e,r,t){return{$:3,a:n,b:e,c:r,d:t}})),dd=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),vd=o((function(n,e,r,t){return{$:6,a:n,b:e,c:r,d:t}})),md=o((function(n,e,r,t){return{$:7,a:n,b:e,c:r,d:t}})),bd=o((function(n,e,r,t){return{$:5,a:n,b:e,c:r,d:t}})),pd=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),gd=function(n){switch(n.$){case 0:return n;case 1:return s(pd,n.a,n.b,n.c,1);case 2:return s(fd,n.a,n.b,n.c,1);case 3:return s(sd,n.a,n.b,n.c,1);case 4:return s(dd,n.a,n.b,n.c,1);case 5:return s(bd,n.a,n.b,n.c,1);case 6:return s(vd,n.a,n.b,n.c,1);case 7:return s(md,n.a,n.b,n.c,1);case 8:case 9:default:return n}},hd={$:0},xd=l((function(n,e,r,t,o,a,i,c){for(;;){if(!c.b)return{d0:e,d1:t,d2:a,d3:n,d4:r,d5:o};var l=c.b,f=i(c.a);n=u(ss,f.d3,n),e=u(us,f.d0,e),r=u(ss,f.d4,r),t=u(us,f.d1,t),o=u(ss,f.d5,o),a=u(us,f.d2,a),i=i,c=l}})),Cd=t((function(n,e,r){var t=n(e);return b(xd,t.d3,t.d0,t.d4,t.d1,t.d5,t.d2,n,r)})),Pd=r((function(n,e){return 1>T(e,n)})),Md=function(n){return u(Pd,n.d0,n.d3)&&u(Pd,n.d1,n.d4)&&u(Pd,n.d2,n.d5)?n:{d0:u(us,n.d3,n.d0),d1:u(us,n.d4,n.d1),d2:u(us,n.d5,n.d2),d3:u(ss,n.d3,n.d0),d4:u(ss,n.d4,n.d1),d5:u(ss,n.d5,n.d2)}},Td=function(n){return n},yd=function(n){return n.bF},Ld=function(n){return n.bG},wd=function(n){return n.fN},Nd=function(n){var e=n.a,r=n.b,t=n.c,o=yd(e),a=Ld(e),i=wd(e),c=yd(r),l=Ld(r),f=wd(r),s=yd(t),d=Ld(t),v=wd(t);return Md({d0:u(us,o,u(us,c,s)),d1:u(us,a,u(us,l,d)),d2:u(us,i,u(us,f,v)),d3:u(ss,o,u(ss,c,s)),d4:u(ss,a,u(ss,l,d)),d5:u(ss,i,u(ss,f,v))})},Sd=function(n){return new Float64Array([n.bF,n.bG,n.fN])},Fd=function(n){return Sd(n)},$d=function(n){return Sd(n)},Dd=r((function(n,e){return{bF:e.bG*n.fN-e.fN*n.bG,bG:e.fN*n.bF-e.bF*n.fN,fN:e.bF*n.bG-e.bG*n.bF}})),zd=r((function(n,e){return{bF:e.bF-n.bF,bG:e.bG-n.bG,fN:e.fN-n.fN}})),_d={bF:0,bG:0,fN:0},Ad=r((function(n,e){var r=n,t=e,o=u(ft,xc(t.bF),u(ft,xc(t.bG),xc(t.fN)));if(o){var a=t.fN/o,i=t.bG/o,c=t.bF/o,l=ws(c*c+i*i+a*a);return{bF:r*c/l,bG:r*i/l,fN:r*a/l}}return _d})),Rd=Ad(1),Gd=t((function(n,e,r){return Rd(u(Dd,u(zd,e,r),u(zd,n,e)))})),Vd=function(n){var e=n.a,r=n.b,t=n.c,o=$d(f(Gd,e,r,t));return w({p:o,b1:Fd(e)},{p:o,b1:Fd(r)},{p:o,b1:Fd(t)})},kd=r((function(n,e){return{$:2,a:n,b:e}})),Ed=kd({ds:3,dC:0,d7:4}),Bd=t((function(n,e,r){return w(n,e,r)})),Id=t((function(n,e,r){return{bF:n,bG:e,fN:r}})),Ud=(Eo=u($s,-.5,1),Bo=u($s,-.5,1),Io=u($s,-.5,1),Uo=f(Id,Io,Bo,Eo),Wo=u($s,.5,1),jo=f(Id,Io,Bo,Wo),Ho=u($s,.5,1),Oo=f(Id,Io,Ho,Eo),Yo=f(Id,Io,Ho,Wo),qo=u($s,.5,1),Xo=f(Id,qo,Bo,Eo),Jo=f(Id,qo,Ho,Eo),Zo=f(Id,qo,Bo,Wo),Ko=f(Id,qo,Ho,Wo),gd(function(n){if(n.b){var e=n.a,r=n.b,t=Ed(u(It,Vd,n));return s(fd,f(Cd,Nd,e,r),n,t,0)}return hd}(z([f(Bd,Uo,Jo,Xo),f(Bd,Uo,Oo,Jo),f(Bd,jo,Zo,Ko),f(Bd,jo,Ko,Yo),f(Bd,Xo,Jo,Ko),f(Bd,Xo,Ko,Zo),f(Bd,Uo,Yo,Oo),f(Bd,Uo,jo,Yo),f(Bd,Uo,Xo,Zo),f(Bd,Uo,Zo,jo),f(Bd,Oo,Ko,Jo),f(Bd,Oo,Yo,Ko)])))),Wd={$:0},jd=t((function(n,e,r){return{$:1,a:n,b:e,c:r}})),Hd=t((function(n,e,r){var t=e.a,o=e.b,a=n(e.c),i=n(o),c=n(t),l=$d(f(Gd,c,i,a)),s={p:l,b1:Fd(c)},d={p:l,b1:Fd(i)},v={p:l,b1:Fd(a)};return u(Tr,s,u(Tr,d,u(Tr,v,r)))})),Od=function(n){return n.F},Yd=o((function(n,e,r,t){return 1===e.$||1===r.$||1===t.$?kr:Vr(f(n,e.a,r.a,t.a))})),qd=4294967295>>>32-ot,Xd=h,Jd=t((function(n,e,r){for(;;){var t=u(Xd,qd&e>>>n,r);if(t.$)return u(Xd,qd&e,t.a);n-=ot,e=e,r=t.a}})),Zd=r((function(n,e){var r=e.a,t=e.b,o=e.c,a=e.d;return 0>n||T(n,r)>-1?kr:T(n,function(n){return n>>>5<<5}(r))>-1?Vr(u(Xd,qd&n,a)):Vr(f(Jd,t,n,o))})),Kd=function(n){return n.ap},Qd=r((function(n,e){return u(Zd,n,Kd(e))})),nv=t((function(n,e,r){for(;;){var t=u(dt,Kr,n),o=t.a,a=t.b;if(0>T(ut(o),Kr))return u(bt,!0,{B:e,m:r,r:o});n=a,e=u(Tr,ct(o),e),r+=1}})),ev=function(n){return n.b?f(nv,n,F,0):at},rv=r((function(n,e){return!u(Tc,u(bo,Mc,n),e)})),tv=r((function(n,e){return f(Bt,r((function(e,r){return n(e)?u(Tr,e,r):r})),F,e)})),ov=r((function(n,e){var r=function(n){return n.a}(n),t=function(n){var e=n.a,t=n.b,o=n.c;return e>=0&&0>T(e,r)&&t>=0&&0>T(t,r)&&o>=0&&0>T(o,r)};return u(rv,t,e)?{F:e,ap:n}:{F:u(tv,t,e),ap:n}})),av=t((function(n,e,r){return{$:3,a:n,b:e,c:r}}))({ds:1,dC:3,d7:4}),iv=r((function(n,e){var r=e;return L(w(n.bF,n.bG,n.fN),w(r.bF,r.bG,r.fN))})),cv=r((function(n,e){n:for(;;){if(-2===e.$)return kr;var r=e.c,t=e.d,o=e.e;switch(u(Lo,n,e.b)){case 0:n=n,e=t;continue n;case 1:return Vr(r);default:n=n,e=o;continue n}}})),lv=f(hf,0,0,0),uv=i((function(n,e,r,t,o,a){var i=a.a,c=a.b,l=a.c,f=u(cv,u(iv,n,e),o);if(f.$){var s={p:lv,b1:Fd(e)},d={p:lv,b1:Fd(n)},v=l+1;return w(u(Tr,w(r,l,v),u(Tr,w(r,v,t),i)),u(Tr,s,u(Tr,d,c)),l+2)}return w(u(Tr,w(r,f.a,t),i),c,l)})),fv=a((function(n,e,r,t,o){for(;;){if(!r.b)return L(o.a,Jr(o.b));var a=r.a,i=a.a,c=a.b,l=r.b,u=n(a.c),f=n(c),s=n(i),d=t+2,m=t+1,b=n,p=e,g=l,h=t+3,x=v(uv,u,s,d,t,e,v(uv,f,u,m,d,e,v(uv,s,f,t,m,e,o)));n=b,e=p,r=g,t=h,o=x}})),sv=a((function(n,e,r,t,o){for(;;){if(!e.b)return w(t,o,r);var a=e.a,i=a.a,c=a.b,l=e.b,s=n(a.c),d=n(c),v=n(i),m=r+2,b=r+1,p=r,g=f(No,u(iv,v,s),m,f(No,u(iv,s,d),b,f(No,u(iv,d,v),p,o)));n=n,e=l,r+=3,t=u(Tr,w(p,b,m),t),o=g}})),dv=t((function(n,e,r){var o,a=u(Go,(function(n){var e=n.a,r=n.b,a=n.c;return s(Yd,t((function(n,e,r){return w(n,e,r)})),u(Qd,e,o),u(Qd,r,o),u(Qd,a,o))}),Od(o=r)),i=f(Bt,Hd(e),F,a),c=d(sv,e,a,0,F,Co),l=d(fv,e,c.b,a,0,w(c.a,F,c.c)),v=l.a,m=l.b,b=m.b?S(i,m):i;return f(jd,n,u(ov,ev(b),v),u(av,b,v))})),vv=function(n){return{F:u(It,(function(n){return w(3*n,3*n+1,3*n+2)}),u(Yr,0,jr(n)-1)),ap:ev(of(u(It,(function(n){return z([n.a,n.b,n.c])}),n)))}},mv=function(n){switch(n.$){case 0:return Wd;case 1:case 2:return f(dv,n.a,Dt,vv(u(It,Td,n.b)));case 3:return f(dv,n.a,Dt,n.b);case 4:case 5:case 6:case 7:return f(dv,n.a,(function(n){return n.b1}),n.b);case 8:case 9:default:return Wd}},bv=mv(Ud),pv=function(n){return n.dr},gv={$:0},hv=gv,xv=r((function(n,e){return{$:1,a:n,b:e}})),Cv={src:"\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        void main () {\n            gl_FragColor = texture2D(colorTexture, interpolatedUv);\n        }\n    ",attributes:{},uniforms:{colorTexture:"bO"}},Pv=function(n){return{$:5,a:n}},Mv=Pv(1029),Tv=Pv(1028),yv=t((function(n,e,r){return 1===e?u(Tr,n?Mv:Tv,r):r})),Lv={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute mediump vec2 uv;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedUv = uv;\n        }\n    ",attributes:{position:"b1",uv:"N"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},wv=o((function(n,e,r,t){return u(xv,e,l((function(e,o,a,i,c,l,u,s){return d(_f,f(yv,i,t,s),Lv,Cv,r,{bO:n,b:a,c:o,d:l,e:e,f:c})})))})),Nv={src:"\n        precision lowp float;\n        \n        uniform lowp vec3 constantColor;\n        \n        void main () {\n            gl_FragColor = vec4(constantColor, 1.0);\n        }\n    ",attributes:{},uniforms:{constantColor:"aE"}},Sv={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{position:"b1"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Fv=o((function(n,e,r,t){return u(xv,e,l((function(e,o,a,i,c,l,u,s){return d(_f,f(yv,i,t,s),Sv,Nv,r,{aE:n,b:a,c:o,d:l,e:e,f:c})})))})),$v=r((function(n,e){return{$:3,a:n,b:e}})),Dv={src:"\n        precision lowp float;\n        \n        uniform lowp vec3 constantColor;\n        uniform lowp float pointRadius;\n        uniform highp mat4 sceneProperties;\n        \n        float pointAlpha(float pointRadius, vec2 pointCoord) {\n            float pointSize = 2.0 * pointRadius;\n            float x = (pointSize + 2.0) * (pointCoord.s - 0.5);\n            float y = (pointSize + 2.0) * (pointCoord.t - 0.5);\n            float r = sqrt(x * x + y * y);\n            float innerRadius = pointRadius;\n            float outerRadius = pointRadius + 1.0;\n            if (r > outerRadius) {\n                return 0.0;\n            } else if (r > innerRadius) {\n                return outerRadius - r;\n            } else {\n                return 1.0;\n            }\n        }\n        \n        void main () {\n            float supersampling = sceneProperties[3][0];\n            float alpha = pointAlpha(pointRadius * supersampling, gl_PointCoord);\n            gl_FragColor = vec4(constantColor, alpha);\n        }\n    ",attributes:{},uniforms:{constantColor:"aE",pointRadius:"b0",sceneProperties:"e"}},zv={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform lowp float pointRadius;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            float supersampling = sceneProperties[3][0];\n            gl_PointSize = 2.0 * pointRadius * supersampling + 2.0;\n        }\n    ",attributes:{position:"b1"},uniforms:{modelMatrix:"b",modelScale:"c",pointRadius:"b0",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},_v=o((function(n,e,r,t){return u($v,r,l((function(r,o,a,i,c,l,u,f){return d(_f,f,zv,Dv,t,{aE:n,b:a,c:o,b0:e,d:l,e:r,f:c})})))})),Av={src:"\n        precision mediump float;\n        \n        uniform mediump vec3 emissiveColor;\n        uniform highp mat4 sceneProperties;\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{emissiveColor:"aU",sceneProperties:"e"}},Rv=Pr,Gv=a((function(n,e,r,t,o){return u(xv,r,l((function(r,a,i,c,l,s,v,m){return d(_f,f(yv,c,o,m),Sv,Av,t,{aU:u(Rv,e,n),b:i,c:a,d:s,e:r,f:l})})))})),Vv={src:"\n        precision mediump float;\n        \n        uniform mediump vec3 emissiveColor;\n        uniform lowp float pointRadius;\n        uniform highp mat4 sceneProperties;\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        float pointAlpha(float pointRadius, vec2 pointCoord) {\n            float pointSize = 2.0 * pointRadius;\n            float x = (pointSize + 2.0) * (pointCoord.s - 0.5);\n            float y = (pointSize + 2.0) * (pointCoord.t - 0.5);\n            float r = sqrt(x * x + y * y);\n            float innerRadius = pointRadius;\n            float outerRadius = pointRadius + 1.0;\n            if (r > outerRadius) {\n                return 0.0;\n            } else if (r > innerRadius) {\n                return outerRadius - r;\n            } else {\n                return 1.0;\n            }\n        }\n        \n        void main () {\n            vec4 color = toSrgb(emissiveColor, sceneProperties);\n            float supersampling = sceneProperties[3][0];\n            float alpha = pointAlpha(pointRadius * supersampling, gl_PointCoord);\n            gl_FragColor = vec4(color.rgb, alpha);\n        }\n    ",attributes:{},uniforms:{emissiveColor:"aU",pointRadius:"b0",sceneProperties:"e"}},kv=a((function(n,e,r,t,o){return u($v,t,l((function(t,a,i,c,l,f,s,v){return d(_f,v,zv,Vv,o,{aU:u(Rv,e,n),b:i,c:a,b0:r,d:f,e:t,f:l})})))})),Ev={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 materialColor;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{enabledLights:"U",lights12:"bo",lights34:"bU",lights56:"bV",lights78:"bW",materialColor:"cB",sceneProperties:"e",viewMatrix:"f"}},Bv={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n        }\n    ",attributes:{normal:"p",position:"b1"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Iv=o((function(n,e,r,t){return u(xv,e,l((function(e,o,a,i,c,l,u,s){var v=u.a,m=u.b;return d(_f,f(yv,i,t,s),Bv,Ev,r,{U:m,bo:v.bo,bU:v.bU,bV:v.bV,bW:v.bW,cB:n,b:a,c:o,d:l,e:e,f:c})})))})),Uv={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D materialColorTexture;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n            vec3 materialColor = fromSrgb(texture2D(materialColorTexture, interpolatedUv).rgb);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{enabledLights:"U",lights12:"bo",lights34:"bU",lights56:"bV",lights78:"bW",materialColorTexture:"cC",normalMapTexture:"a$",sceneProperties:"e",useNormalMap:"a6",viewMatrix:"f"}},Wv={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        attribute mediump vec2 uv;\n        attribute highp vec3 tangent;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getWorldTangent(vec3 modelTangent, vec4 modelScale, mat4 modelMatrix) {\n            return (modelMatrix * vec4(safeNormalize(modelScale.xyz * modelTangent), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = uv;\n            interpolatedTangent = getWorldTangent(tangent, modelScale, modelMatrix);\n        }\n    ",attributes:{normal:"p",position:"b1",tangent:"es",uv:"N"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},jv=i((function(n,e,r,t,o,a){return u(xv,t,l((function(t,i,c,l,u,s,v,m){var b=v.a,p=v.b;return d(_f,f(yv,l,a,m),Wv,Uv,o,{U:p,bo:b.bo,bU:b.bU,bV:b.bV,bW:b.bW,cC:n,b:c,c:i,a$:e,d:s,e:t,a6:r,f:u})})))})),Hv={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D baseColorTexture;\n        uniform lowp vec4 constantBaseColor;\n        uniform mediump sampler2D roughnessTexture;\n        uniform lowp vec2 constantRoughness;\n        uniform mediump sampler2D metallicTexture;\n        uniform lowp vec2 constantMetallic;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getFloatValue(sampler2D texture, vec2 uv, vec2 constantValue) {\n            if (constantValue.y == 1.0) {\n                return constantValue.x;\n            } else {\n                vec4 textureColor = texture2D(texture, uv);\n                return dot(textureColor, vec4(0.2126, 0.7152, 0.0722, 0.0));\n            }\n        }\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 baseColor = fromSrgb(texture2D(baseColorTexture, interpolatedUv).rgb) * (1.0 - constantBaseColor.w) + constantBaseColor.rgb * constantBaseColor.w;\n            float roughness = getFloatValue(roughnessTexture, interpolatedUv, constantRoughness);\n            float metallic = getFloatValue(metallicTexture, interpolatedUv, constantMetallic);\n        \n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{baseColorTexture:"ce",constantBaseColor:"ci",constantMetallic:"cj",constantRoughness:"ck",enabledLights:"U",lights12:"bo",lights34:"bU",lights56:"bV",lights78:"bW",metallicTexture:"cF",normalMapTexture:"a$",roughnessTexture:"c0",sceneProperties:"e",useNormalMap:"a6",viewMatrix:"f"}},Ov={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 baseColor;\n        uniform lowp float roughness;\n        uniform lowp float metallic;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{baseColor:"cd",enabledLights:"U",lights12:"bo",lights34:"bU",lights56:"bV",lights78:"bW",metallic:"cE",roughness:"c$",sceneProperties:"e",viewMatrix:"f"}},Yv=i((function(n,e,r,t,o,a){return u(xv,t,l((function(t,i,c,l,u,s,v,m){var b=v.a,p=v.b;return d(_f,f(yv,l,a,m),Bv,Ov,o,{cd:n,U:p,bo:b.bo,bU:b.bU,bV:b.bV,bW:b.bW,cE:r,b:c,c:i,d:s,c$:e,e:t,f:u})})))})),qv=r((function(n,e){return{$:1,a:n,b:e}})),Xv=r((function(n,e){return e.$?L(e.a.D,1):L(n,0)})),Jv=s(vf,0,0,0,0),Zv=r((function(n,e){var r;return e.$?L(e.a.D,Jv):L(n,s(vf,hs(r=e.a),xs(r),Cs(r),1))})),Kv=r((function(n,e){var r,t=L(n,e);return t.a.$?u(qv,L(r=t.a.a.D,Jv),u(Xv,r,e)):t.b.$?u(qv,u(Zv,r=t.b.a.D,n),u(Xv,r,e)):{$:0,a:t.a.a}})),Qv=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),nm=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),em=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),rm=u(Gf,0,0),tm=r((function(n,e){return e.$?L(e.a.D,rm):L(n,u(Gf,e.a,1))})),om=o((function(n,e,r,t){var o,a=s(em,n,e,r,t);return a.a.$?s(nm,L(o=a.a.a.D,Jv),u(tm,o,e),u(tm,o,r),u(Xv,o,t)):a.b.$?s(nm,u(Zv,o=a.b.a.D,n),L(o,rm),u(tm,o,r),u(Xv,o,t)):a.c.$?s(nm,u(Zv,o=a.c.a.D,n),u(tm,o,e),L(o,rm),u(Xv,o,t)):a.d.$?s(nm,u(Zv,o=a.d.a.D,n),u(tm,o,e),u(tm,o,r),L(o,1)):f(Qv,a.a.a,a.b.a,a.c.a)})),am={src:"\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        uniform mediump float backlight;\n        uniform highp mat4 sceneProperties;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            vec3 emissiveColor = fromSrgb(texture2D(colorTexture, interpolatedUv).rgb) * backlight;\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{backlight:"ca",colorTexture:"bO",sceneProperties:"e"}},im=a((function(n,e,r,t,o){return u(xv,r,l((function(r,a,i,c,l,u,s,v){return d(_f,f(yv,c,o,v),Lv,am,t,{ca:e,bO:n,b:i,c:a,d:u,e:r,f:l})})))})),cm={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        attribute mediump vec2 uv;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = uv;\n            interpolatedTangent = vec3(0.0, 0.0, 0.0);\n        }\n    ",attributes:{normal:"p",position:"b1",uv:"N"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},lm=o((function(n,e,r,t){return u(xv,e,l((function(e,o,a,i,c,l,u,s){var v=u.a,m=u.b;return d(_f,f(yv,i,t,s),cm,Uv,r,{U:m,bo:v.bo,bU:v.bU,bV:v.bV,bW:v.bW,cC:n,b:a,c:o,a$:n,d:l,e:e,a6:0,f:c})})))})),um=function(n){return e(9,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return n(e,r,t,o,a,i,c,l,u)}}}}}}}}}))}((function(n,e,r,t,o,a,i,c,s){return u(xv,i,l((function(i,l,u,v,m,b,p,g){var h=p.a,x=p.b;return d(_f,f(yv,v,s,g),cm,Hv,c,{ce:n,ci:e,cj:a,ck:t,U:x,bo:h.bo,bU:h.bU,bV:h.bV,bW:h.bW,cF:o,b:u,c:l,a$:n,d:b,c0:r,e:i,a6:0,f:m})})))})),fm=t((function(n,e,r){return r>.5?e+(1-r)*(n-e):n+r*(e-n)})),sm=function(n){return f(Id,function(n){return f(fm,n.d3,n.d0,.5)}(n),function(n){return f(fm,n.d4,n.d1,.5)}(n),function(n){return f(fm,n.d5,n.d2,.5)}(n))},dm=function(n){var e=rs(n),r=e.a,t=e.b,o=e.c;return{eJ:sm(n),eY:r/2,eZ:t/2,e_:o/2}},vm=r((function(n,e){switch(n.$){case 0:if(n.b.$){var r=n.b.a.D;switch(e.$){case 0:case 1:case 2:case 3:case 4:return hv;case 5:case 6:case 7:return o=e.c,a=e.d,s(wv,r,dm(R=e.a),o,a);case 8:case 9:default:return hv}}else{var t=n.b.a;switch(e.$){case 0:return hv;case 1:var o=e.c,a=e.d;return s(Fv,t,dm(R=e.a),o,a);case 2:case 3:case 4:return o=e.c,a=e.d,s(Fv,t,dm(R=e.a),o,a);case 5:case 6:case 7:return o=e.c,a=e.d,s(Fv,t,dm(R=e.a),o,a);case 8:case 9:return o=e.c,s(Fv,t,dm(R=e.a),o,0);default:return o=e.d,s(_v,t,e.b,dm(R=e.a),o)}}case 1:if(n.b.$)switch(r=n.b.a.D,c=n.c,e.$){case 0:case 1:case 2:case 3:case 4:return hv;case 5:case 6:case 7:return o=e.c,a=e.d,d(im,r,c,dm(R=e.a),o,a);case 8:case 9:default:return hv}else{var i=n.b.a,c=n.c;switch(e.$){case 0:return hv;case 1:case 2:case 3:case 4:case 5:case 6:case 7:return o=e.c,a=e.d,d(Gv,i,c,dm(R=e.a),o,a);case 8:case 9:return o=e.c,d(Gv,i,c,dm(R=e.a),o,0);default:return o=e.d,d(kv,i,c,e.b,dm(R=e.a),o)}}case 2:var m=u(Kv,n.b,n.c);if(m.$){var b=m.a.a,p=m.b,g=p.a,h=p.b;switch(e.$){case 0:case 1:case 2:case 3:case 4:case 5:return hv;case 6:return o=e.c,C=e.d,s(lm,b,dm(R=e.a),o,C);case 7:return o=e.c,C=e.d,v(jv,b,g,h,dm(R=e.a),o,C);case 8:case 9:default:return hv}}else{var x=m.a;switch(e.$){case 0:case 1:return hv;case 2:o=e.c;var C=e.d;return s(Iv,x,dm(R=e.a),o,C);case 3:return hv;case 4:return o=e.c,C=e.d,s(Iv,x,dm(R=e.a),o,C);case 5:return hv;case 6:case 7:return o=e.c,C=e.d,s(Iv,x,dm(R=e.a),o,C);case 8:case 9:default:return hv}}default:var P=s(om,n.b,n.c,n.d,n.e);if(P.$){var M=P.a,T=M.a,y=M.b,L=P.b,w=L.a,N=L.b,S=P.c,F=S.a,$=S.b,D=P.d;switch(g=D.a,h=D.b,e.$){case 0:case 1:case 2:case 3:case 4:case 5:return hv;case 6:return o=e.c,a=e.d,function(n,e,r,t,o,a,i,c,l,u){return 9===n.a?n.f(e,r,t,o,a,i,c,l,u):n(e)(r)(t)(o)(a)(i)(c)(l)(u)}(um,T,y,w,N,F,$,dm(R=e.a),o,a);case 7:return R=e.a,o=e.c,a=e.d,function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(s){return function(v){return function(m){return u(xv,s,l((function(l,u,s,b,p,g,h,x){var C=h.a,P=h.b;return d(_f,f(yv,b,m,x),Wv,Hv,v,{ce:n,ci:e,cj:a,ck:t,U:P,bo:C.bo,bU:C.bU,bV:C.bV,bW:C.bW,cF:o,b:s,c:u,a$:i,d:g,c0:r,e:l,a6:c,f:p})})))}}}}}}}}}}}(T)(y)(w)(N)(F)($)(g)(h)(dm(R))(o)(a);case 8:case 9:default:return hv}}else{var z=P.a,_=P.b,A=P.c;switch(e.$){case 0:case 1:return hv;case 2:return o=e.c,a=e.d,v(Yv,z,_,A,dm(R=e.a),o,a);case 3:return hv;case 4:return o=e.c,a=e.d,v(Yv,z,_,A,dm(R=e.a),o,a);case 5:return hv;case 6:return o=e.c,a=e.d,v(Yv,z,_,A,dm(R=e.a),o,a);case 7:var R;return o=e.c,a=e.d,v(Yv,z,_,A,dm(R=e.a),o,a);case 8:case 9:default:return hv}}}})),mm=function(n){return n.bF},bm=function(n){return n.bG},pm=function(n){return n.fN},gm=function(n){var e=n,r=pm(e.dh),t=bm(e.dh),o=mm(e.dh),a=pm(e.dg),i=bm(e.dg),c=mm(e.dg),l=pm(e.df),u=bm(e.df),f=mm(e.df);return f*i*r+u*a*o+l*c*t-l*i*o-u*c*r-f*a*t>0},hm=r((function(n,e){return{$:5,a:n,b:e}})),xm=r((function(n,e){var r=e;switch(r.$){case 0:return hv;case 5:var t=r.b;return u(hm,u(Cf,r.a,n),t);case 1:case 3:case 2:default:return u(hm,n,r)}})),Cm=r((function(n,e){return u(xm,function(n){var e=Mu(n),r=Fu(n),t=Su(n),o=Nu(n);return{dD:gm(n),s:o.bF,t:o.bG,u:o.fN,v:t.bF,w:t.bG,x:t.fN,y:r.bF,z:r.bG,A:r.fN,J:e.bF,K:e.bG,L:e.fN,b5:1}}(n),e)})),Pm=function(n){return{$:2,a:n}},Mm=r((function(n,e){var r=n.a,t=n.b,o=n.c,a=e.eJ;return{eJ:{bF:r*a.bF,bG:t*a.bG,fN:o*a.fN},eY:r*e.eY,eZ:t*e.eZ,e_:o*e.e_}})),Tm=function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){var f,s,d={bF:(s=t)[0],bG:s[1],fN:s[2],ew:s[3]},v=(f={ew:d.ew,bF:d.bF*n.a,bG:d.bG*n.b,fN:d.fN*n.c},new Float64Array([f.bF,f.bG,f.fN,f.ew]));return b(e,r,v,o,a,i,c,l,u)}}}}}}}}}},ym=r((function(n,e){switch(e.$){case 0:return gv;case 5:return u(hm,e.a,u(ym,n,e.b));case 1:var r=e.b;return u(xv,u(Mm,n,e.a),u(Tm,n,r));case 3:return e;case 2:return Pm(u(Tm,n,r=e.a));default:var t=e.a;return Ps(u(It,ym(n),t))}})),Lm=r((function(n,e){return u(ym,n,e)})),wm={src:"\n        precision lowp float;\n        \n        void main () {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        }\n    ",attributes:{},uniforms:{}},Nm=f(Bf,{cA:0,cY:0,de:15},{bh:jf,bw:$f,bH:jf,bI:7683},{bh:jf,bw:$f,bH:jf,bI:7682}),Sm=f(Bf,{cA:0,cY:0,de:15},{bh:jf,bw:$f,bH:jf,bI:7682},{bh:jf,bw:$f,bH:jf,bI:7683}),Fm=r((function(n,e){return u(Tr,n?Sm:Nm,e)})),$m={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 shadowVertexPosition(vec3 position, vec3 normal, mat4 shadowLight, vec4 modelScale, mat4 modelMatrix, mat4 viewMatrix, mat4 projectionMatrix, mat4 sceneProperties) {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            vec3 worldNormal = getWorldNormal(normal, vec4(modelScale.xyz, 1.0), modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 directionToLight = getDirectionToLight(worldPosition.xyz, xyz_type, rgb_parameter);\n            vec3 offset = vec3(0.0, 0.0, 0.0);\n            float sceneDiameter = sceneProperties[3][1];\n            if (dot(directionToLight, worldNormal) <= 0.0) {\n                offset = -sceneDiameter * directionToLight;\n            } else {\n                offset = -0.001 * sceneDiameter * directionToLight;\n            }\n            vec4 offsetPosition = worldPosition + vec4(offset, 0.0);\n            return projectionMatrix * (viewMatrix * offsetPosition);\n        }\n        \n        void main () {\n            gl_Position = shadowVertexPosition(\n                position,\n                normal,\n                shadowLight,\n                modelScale,\n                modelMatrix,\n                viewMatrix,\n                projectionMatrix,\n                sceneProperties\n            );\n        }\n    ",attributes:{normal:"p",position:"b1"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"b6",viewMatrix:"f"}},Dm=function(n){var e=function(n){if(n.$){var e=n.c;return Vr(l((function(n,r,t,o,a,i,c,l){return d(_f,u(Fm,o,l),$m,wm,e,{b:t,c:r,d:i,e:n,b6:c,f:a})})))}return kr}(n);return e.$?hv:Pm(e.a)},zm=o((function(n,e,r,t){var o,a=u(vm,r,Ud),i=(o=L(n,e)).a?o.b?Ts(z([a,Dm(bv)])):a:o.b?Dm(bv):hv,c=pv(t),l=c.a,f=c.b,s=c.c;return u(Cm,ud(t),u(Lm,w(l,f,s),i))})),_m=r((function(n,e){return s(zm,!0,!0,n,e)})),Am=function(n){return{$:0,a:n}},Rm=r((function(n,e){return{$:0,a:n,b:e}})),Gm=function(n){return n.l},Vm=function(n){return Tu(n)},km=r((function(n,e){return e/n})),Em=function(n){var e=n;return{bF:Tu(e),bG:yu(e)}},Bm=r((function(n,e){var r=n.b1;return u(Tr,{p:$d(n.p),b1:Fd(r)},e)})),Im=c((function(n,e,r,t,o,a,i){for(;;){if(!i.b)return Md({d0:e,d1:t,d2:a,d3:n,d4:r,d5:o});var c=i.a,l=i.b,f=Cs(c.b1),s=xs(c.b1),d=hs(c.b1);n=u(fs,n,d),e=u(ft,e,d),r=u(fs,r,s),t=u(ft,t,s),o=u(fs,o,f),a=u(ft,a,f),i=l}})),Um=r((function(n,e){var r=Cs(n.b1),t=xs(n.b1),o=hs(n.b1);return m(Im,o,o,t,t,r,r,e)})),Wm={bF:0,bG:0,fN:-1},jm=r((function(n,e){var r=n.dg,t=n.df;return{bF:e.bF*t.bF+e.bG*r.bF,bG:e.bF*t.bG+e.bG*r.bG,fN:e.bF*t.fN+e.bG*r.fN}})),Hm=function(n){return yu(n)},Om=function(n){return 6.283185307179586*n},Ym=ju({cJ:Wu,df:Ou,dg:Es}),qm=(Qo=u(km,72,Om(1)),na=Yu,ea=Wm,ta=f(Id,0,0,ra=u($s,.5,1)),aa=f(Id,0,0,oa=u($s,-.5,1)),gd(function(n){var e=f(Lr,Bm,F,Kd(n));if(e.b){var r=e.a,t=e.b,o=u(av,e,Od(n));return s(dd,u(Um,r,t),n,o,0)}return hd}(vv(of(u(It,(function(n){var e=u($s,n,Qo),r=u(jm,Ym,Em(e)),t=u($s,Vm(e),1),o=u($s,Hm(e),1),a=f(Id,t,o,ra),i=f(Id,t,o,oa),c=u($s,u(vc,72,n+1),Qo),l=u(jm,Ym,Em(c)),s=u($s,Vm(c),1),d=u($s,Hm(c),1),v=f(Id,s,d,oa),m=f(Id,s,d,ra);return z([w({p:ea,b1:aa},{p:ea,b1:v},{p:ea,b1:i}),w({p:r,b1:i},{p:l,b1:v},{p:l,b1:m}),w({p:r,b1:i},{p:l,b1:m},{p:r,b1:a}),w({p:na,b1:ta},{p:na,b1:a},{p:na,b1:m})])}),u(Yr,0,71))))))),Xm=mv(qm),Jm=function(n){return n.cJ},Zm=function(n){return n.e7},Km=function(n){return n.fl},Qm=o((function(n,e,r,t){var o,a=function(n){var e,r,t=zu(n),o=L(r=function(n){var e=n,r=xc(e.fN),t=xc(e.bG),o=xc(e.bF);if(1>T(o,t)){if(1>T(o,r)){var a=ws(e.fN*e.fN+e.bG*e.bG);return{bF:0,bG:-e.fN/a,fN:e.bG/a}}return a=ws(e.bG*e.bG+e.bF*e.bF),{bF:-e.bG/a,bG:e.bF/a,fN:0}}return 1>T(t,r)?(a=ws(e.fN*e.fN+e.bF*e.bF),{bF:e.fN/a,bG:0,fN:-e.bF/a}):(a=ws(e.bF*e.bF+e.bG*e.bG),{bF:-e.bG/a,bG:e.bF/a,fN:0})}(e=t),{bF:e.bG*r.fN-e.fN*r.bG,bG:e.fN*r.bF-e.bF*r.fN,fN:e.bF*r.bG-e.bG*r.bF}),a=o.a,i=o.b;return{cJ:Jm(n),df:a,dg:i,dh:t}}(Gm(t)),i=u(vm,r,qm),c=(o=L(n,e)).a?o.b?Ts(z([i,Dm(Xm)])):i:o.b?Dm(Xm):hv,l=Km(t),f=Zm(t);return u(Cm,a,u(Lm,w(l,l,f),c))})),nb=r((function(n,e){return s(Qm,!0,!0,n,e)})),eb={src:"\n        precision highp float;\n        \n        attribute lowp float triangleVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 triangleVertexPositions;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleVertex), triangleVertexPositions, position, normal);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{triangleVertex:"c7"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",triangleVertexPositions:"bC",viewMatrix:"f"}},rb={src:"\n        precision highp float;\n        \n        attribute lowp float triangleVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 triangleVertexPositions;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleVertex), triangleVertexPositions, position, normal);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n        }\n    ",attributes:{triangleVertex:"c7"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",triangleVertexPositions:"bC",viewMatrix:"f"}},tb=function(n){var e=n.a,r=n.b,t=n.c;return Pf({dL:e.bF,dM:r.bF,dN:t.bF,dO:0,dP:e.bG,dQ:r.bG,dR:t.bG,dS:0,dT:e.fN,dU:r.fN,dV:t.fN,dW:0,dX:0,dY:0,dZ:0,d_:0})},ob=Ed(z([w({c7:0},{c7:1},{c7:2})])),ab=r((function(n,e){var r=Nd(e),t=dm(r);switch(n.$){case 0:if(n.b.$)return hv;var o=n.b.a;return u(xv,t,l((function(n,r,t,a,i,c,l,u){return d(_f,f(yv,a,0,u),eb,Nv,ob,{aE:o,b:t,c:r,d:c,e:n,bC:tb(e),f:i})})));case 1:if(n.b.$)return hv;var a=n.b.a,i=n.c;return u(xv,t,l((function(n,r,t,o,c,l,s,v){return d(_f,f(yv,o,0,v),eb,Av,ob,{aU:u(Rv,i,a),b:t,c:r,d:l,e:n,bC:tb(e),f:c})})));case 2:var c=u(Kv,n.b,n.c);if(c.$)return hv;var v=c.a;return u(xv,t,l((function(n,r,t,o,a,i,c,l){var u=c.a,s=c.b;return d(_f,f(yv,o,0,l),rb,Ev,ob,{U:s,bo:u.bo,bU:u.bU,bV:u.bV,bW:u.bW,cB:v,b:t,c:r,d:i,e:n,bC:tb(e),f:a})})));default:var m=s(om,n.b,n.c,n.d,n.e);if(m.$)return hv;var b=m.a,p=m.b,g=m.c;return u(xv,t,l((function(n,r,t,o,a,i,c,l){var u=c.a,s=c.b;return d(_f,f(yv,o,0,l),rb,Ov,ob,{cd:b,U:s,bo:u.bo,bU:u.bU,bV:u.bV,bW:u.bW,cE:g,b:t,c:r,d:i,c$:p,e:n,bC:tb(e),f:a})})))}})),ib=(ia=z([{a5:u(Gf,0,1)},{a5:u(Gf,1,1)},{a5:u(Gf,2,1)},{a5:u(Gf,0,-1)},{a5:u(Gf,1,-1)},{a5:u(Gf,2,-1)}]),ca=z([w(0,1,2),w(3,5,4),w(3,4,1),w(3,1,0),w(4,5,2),w(4,2,1),w(5,3,0),w(5,0,2)]),u(av,ia,ca)),cb={src:"\n        precision highp float;\n        \n        attribute highp vec2 triangleShadowVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        uniform highp mat4 triangleVertexPositions;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 shadowVertexPosition(vec3 position, vec3 normal, mat4 shadowLight, vec4 modelScale, mat4 modelMatrix, mat4 viewMatrix, mat4 projectionMatrix, mat4 sceneProperties) {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            vec3 worldNormal = getWorldNormal(normal, vec4(modelScale.xyz, 1.0), modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 directionToLight = getDirectionToLight(worldPosition.xyz, xyz_type, rgb_parameter);\n            vec3 offset = vec3(0.0, 0.0, 0.0);\n            float sceneDiameter = sceneProperties[3][1];\n            if (dot(directionToLight, worldNormal) <= 0.0) {\n                offset = -sceneDiameter * directionToLight;\n            } else {\n                offset = -0.001 * sceneDiameter * directionToLight;\n            }\n            vec4 offsetPosition = worldPosition + vec4(offset, 0.0);\n            return projectionMatrix * (viewMatrix * offsetPosition);\n        }\n        \n        void main () {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleShadowVertex.x), triangleVertexPositions, position, normal);\n            normal *= triangleShadowVertex.y;\n            gl_Position = shadowVertexPosition(\n                position,\n                normal,\n                shadowLight,\n                modelScale,\n                modelMatrix,\n                viewMatrix,\n                projectionMatrix,\n                sceneProperties\n            );\n        }\n    ",attributes:{triangleShadowVertex:"a5"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"b6",triangleVertexPositions:"bC",viewMatrix:"f"}},lb=function(n){return Pm(l((function(e,r,t,o,a,i,c,l){return d(_f,u(Fm,o,l),cb,wm,ib,{b:t,c:r,d:i,e:e,b6:c,bC:tb(n),f:a})})))},ub=o((function(n,e,r,t){var o=u(ab,r,t),a=L(n,e);return a.a?a.b?Ts(z([o,lb(t)])):o:a.b?lb(t):hv})),fb=r((function(n,e){return s(ub,!0,!0,n,e)})),sb=r((function(n,e){var r=wd(e),t=wd(n),o=Ld(e),a=Ld(n),i=yd(e),c=yd(n);return{d0:u(us,c,i),d1:u(us,a,o),d2:u(us,t,r),d3:u(ss,c,i),d4:u(ss,a,o),d5:u(ss,t,r)}})),db={src:"\n        precision highp float;\n        \n        attribute lowp float lineSegmentVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp vec3 lineSegmentStartPoint;\n        uniform highp vec3 lineSegmentEndPoint;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = (1.0 - lineSegmentVertex) * lineSegmentStartPoint + lineSegmentVertex * lineSegmentEndPoint;\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{lineSegmentVertex:"dK"},uniforms:{lineSegmentEndPoint:"dI",lineSegmentStartPoint:"dJ",modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},vb=r((function(n,e){return{$:1,a:n,b:e}}))({ds:2,dC:0,d7:1})(z([L({dK:0},{dK:1})])),mb=r((function(n,e){var r,t=u(sb,(r=e).a,r.b),o=dm(t),a=e.a,i=e.b;switch(n.$){case 0:if(n.b.$)return hv;var c=n.b.a;return u(xv,o,l((function(n,e,r,t,o,l,u,f){return d(_f,f,db,Nv,vb,{aE:c,dI:Fd(i),dJ:Fd(a),b:r,c:e,d:l,e:n,f:o})})));case 1:if(n.b.$)return hv;c=n.b.a;var f=n.c;return u(xv,o,l((function(n,e,r,t,o,l,s,v){return d(_f,v,db,Av,vb,{aU:u(Rv,f,c),dI:Fd(i),dJ:Fd(a),b:r,c:e,d:l,e:n,f:o})})));case 2:default:return hv}})),bb=r((function(n,e){return u(mb,n,e)})),pb=t((function(n,e,r){return{$:2,a:n,b:e,c:r}})),gb=function(n){return f(Zs,0,1,n>.04045?u(ji,(n+.055)/1.055,2.4):n/12.92)},hb=function(n){return f(pb,0,Am(function(n){var e=pc(n),r=e.co,t=e.cf;return f(hf,gb(e.cX),gb(r),gb(t))}(n)),Am(0))},xb=function(n){return n.eJ},Cb=function(n){return n.fl},Pb=function(n){return Zu*(n/180)},Mb=r((function(n,e){return n/e})),Tb=a((function(n,e,r,t,o){for(;;){var a=t(e/r),i=u(Tr,a,o);if(P(e,n))return i;n=n,e-=1,r=r,t=t,o=i}})),yb=r((function(n,e){return 1>n?F:d(Tb,0,n,n,e,F)})),Lb=r((function(n,e){var r=n.b1,t=n.N,o=t.a,a=t.b;return u(Tr,{p:$d(n.p),b1:Fd(r),N:u(Gf,o,a)},e)})),wb=r((function(n,e){var r=n,t=e,o=Tu(t);return{bF:o*Tu(r),bG:o*yu(r),fN:yu(t)}})),Nb=(la=u(Yr,0,71),ua=u(yb,72,u(fm,0,Om(1))),fa=et(36),sa=u(Yr,0,fa-1),da=u(yb,fa,u(fm,Pb(90),Pb(-90))),va=ev(of(u(It,(function(n){return u(It,(function(e){return{p:u(wb,n,e),b1:f(Id,u($s,Vm(e)*Vm(n),1),u($s,Vm(e)*Hm(n),1),u($s,Hm(e),1)),N:L(u(Mb,n,Om(1)),u(Mb,u(ms,Pb(90),e),Pb(180)))}}),da)}),ua))),ma=r((function(n,e){return n*(fa+1)+e})),ba=of(u(It,(function(n){return of(u(It,(function(e){var r=u(ma,n+1,e),t=u(ma,n,e),o=u(ma,n+1,e+1),a=u(ma,n,e+1);return z([w(a,o,r),w(a,r,t)])}),sa))}),la)),gd(function(n){var e=f(Lr,Lb,F,Kd(n));if(e.b){var r=e.a,t=e.b,o=u(av,e,Od(n));return s(vd,u(Um,r,t),n,o,0)}return hd}(u(ov,va,ba)))),Sb=r((function(n,e){for(;;){var r=u(vc,144,2*n+3),t=u(vc,144,2*n+2),o=2*n+1,a=2*n,i=u(Tr,w(144,a,t),u(Tr,w(a,r,t),u(Tr,w(a,o,r),u(Tr,w(o,145,r),e))));if(!n)return i;n-=1,e=i}})),Fb=t((function(n,e,r){return r>.5?e+(1-r)*(n-e):n+r*(e-n)})),$b=(pa=u(r((function(n,e){for(;;){var r=f(Fb,0,6.283185307179586,n/72),t=u(Tr,{bK:r,bZ:0,b4:1},u(Tr,{bK:r,bZ:1,b4:1},e));if(!n)return t;n-=1,e=t}})),71,z([{bK:0,bZ:0,b4:0},{bK:0,bZ:1,b4:0}])),u(av,pa,u(Sb,71,F))),Db={src:"\n        precision highp float;\n        \n        attribute highp float angle;\n        attribute highp float offsetScale;\n        attribute highp float radiusScale;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const lowp float kPerspectiveProjection = 0.0;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec3 perpendicularTo(vec3 d) {\n            float absX = abs(d.x);\n            float absY = abs(d.y);\n            float absZ = abs(d.z);\n            if (absX <= absY) {\n                if (absX <= absZ) {\n                    float scale = 1.0 / length(d.zy);\n                    return vec3(0.0, -d.z * scale, d.y * scale);\n                } else {\n                    float scale = 1.0 / length(d.xy);\n                    return vec3(-d.y * scale, d.x * scale, 0.0);\n                }\n            } else {\n                if (absY <= absZ) {\n                    float scale = 1.0 / length(d.xz);\n                    return vec3(d.z * scale, 0.0, -d.x * scale);\n                } else {\n                    float scale = 1.0 / length(d.xy);\n                    return vec3(-d.y * scale, d.x * scale, 0.0);\n                }\n            }\n        }\n        \n        void main () {\n            vec4 worldCenter = getWorldPosition(vec3(0.0, 0.0, 0.0), modelScale, modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 zDirection = getDirectionToLight(worldCenter.xyz, xyz_type, rgb_parameter);\n            vec3 xDirection = perpendicularTo(zDirection);\n            vec3 yDirection = cross(zDirection, xDirection);\n            float r = modelScale.x;\n            float adjustedRadius = r;\n            float zOffset = 0.0;\n            if (xyz_type.w == kPointLight) {\n                float distanceToLight = length(xyz_type.xyz - worldCenter.xyz);\n                float rSquared = r * r;\n                zOffset = rSquared / distanceToLight;\n                float zSquared = zOffset * zOffset;\n                adjustedRadius = sqrt(rSquared - zSquared) * radiusScale;\n            }\n            vec3 worldPosition =\n                worldCenter.xyz\n                    + zDirection * zOffset\n                    + xDirection * adjustedRadius * cos(angle)\n                    + yDirection * adjustedRadius * sin(angle);\n            vec3 directionToLight = getDirectionToLight(worldPosition, xyz_type, rgb_parameter);\n            float sceneDiameter = sceneProperties[3][1];\n            vec3 offset = -sceneDiameter * offsetScale * directionToLight;\n            vec4 offsetPosition = vec4(worldPosition + offset, 1.0);\n            gl_Position = projectionMatrix * (viewMatrix * offsetPosition);\n        }\n    ",attributes:{angle:"bK",offsetScale:"bZ",radiusScale:"b4"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"b6",viewMatrix:"f"}},zb=function(){return Pm(l((function(n,e,r,t,o,a,i,c){return d(_f,u(Fm,!0,c),Db,wm,$b,{aE:f(hf,0,0,1),b:r,c:e,d:a,e:n,b6:i,f:o})})))},_b=r((function(n,e){return u(xm,function(n){return{dD:!0,s:1,t:0,u:0,v:0,w:1,x:0,y:0,z:0,A:1,J:n.bF,K:n.bG,L:n.fN,b5:1}}(n),e)})),Ab=o((function(n,e,r,t){var o,a=u(vm,r,Nb),i=(o=L(n,e)).a?o.b?Ts(z([a,zb()])):a:o.b?zb():hv,c=Cb(t);return u(_b,u(zd,Wu,xb(t)),u(Lm,w(c,c,c),i))})),Rb=r((function(n,e){return s(Ab,!0,!0,n,e)})),Gb=function(n){switch(n.$){case 0:var e=n.b;return z([u(_m,hb(n.a),e)]);case 1:var r=n.b;return z([u(fb,hb(n.a),r)]);case 3:var t=n.b;return z([u(Rb,hb(n.a),t)]);case 2:var o=n.b;return z([u(nb,hb(n.a),o)]);case 4:var a=n.b;return z([u(bb,(i=n.a,u(Rm,0,Am(function(n){var e=pc(n);return f(hf,e.cX,e.co,e.cf)}(i)))),a)]);default:return u(af,Gb,n.a)}var i},Vb=r((function(n,e){return function(n){var e,r=u(Ys,n.fp,{cg:nd,eN:n.fw,cq:8e4}),t=Js({cg:Qs,cq:2e4,b8:n.b8}),o=Js({cg:Os,cq:15e3,b8:Gs(n.b8)}),a=f(ld,r,t,o);return function(n){return u(Hs,{ey:n.ey,dk:n.dk,eG:n.eG,$7:n.$7,dr:n.dr},z([{dv:n.dv,eT:n.eT,e9:n.e9,fz:n.fz,fF:n.fF}]))}({ey:(e=n.cl,{$:2,a:e}),dk:n.dk,eG:n.eG,$7:n.$7,dr:n.dr,dv:n.dv,eT:1.2*u(ji,2,15),e9:a,fz:qs,fF:Os})}({dk:n.eD,eG:n.eG,$7:.005,cl:n.cl,dr:L(Hi(n.ad.dd),Hi(n.ad.cp)),dv:(r=e,u(af,Gb,r)),fp:!0,fw:u(wb,n.fv,n.fx),b8:qu});var r})),kb=r((function(n,e){return{$:0,a:n,b:e}})),Eb=r((function(n,e){return T(e,n)>-1})),Bb=r((function(n,e){return n+.5*(e-n)})),Ib={bF:-1,bG:0,fN:0},Ub={bF:0,bG:-1,fN:0},Wb=i((function(n,e,r,t,o,a){var i=u(Eb,r,a)?Yu:Wm,c=u(Eb,e,o)?ks:Ub,l=u(Eb,n,t)?Hu:Ib,s=w(Uu(u(es,n,t)),Uu(u(es,e,o)),Uu(u(es,r,a)));return{eB:{cJ:f(Id,u(Bb,n,t),u(Bb,e,o),u(Bb,r,a)),df:l,dg:c,dh:i},dr:s}})),jb=r((function(n,e){return v(Wb,yd(n),Ld(n),wd(n),yd(e),Ld(e),wd(e))})),Hb=r((function(n,e){var r=e/2;return u(kb,n,u(jb,f(ls,-r,-r,-r),f(ls,r,r,r)))})),Ob=function(n){return{$:5,a:n}},Yb=r((function(n,e){return{$:2,a:n,b:e}})),qb=r((function(n,e){return{$:4,a:n,b:e}})),Xb=r((function(n,e){return{$:3,a:n,b:e}})),Jb=r((function(n,e){return{$:1,a:n,b:e}})),Zb=t((function(n,e,r){return{bF:n,bG:e,fN:r}})),Kb=r((function(n,e){return{eB:u(Au,n,ud(e)),dr:pv(e)}})),Qb=r((function(n,e){var r=e;return u(ku,u(_u,n,r.cJ),r.eN)})),np=r((function(n,e){var r=e;return{l:u(Qb,n,r.l),e7:r.e7,fl:r.fl}})),ep=r((function(n,e){var r=e.b;return L(n(e.a),n(r))})),rp=r((function(n,e){return u(ep,_u(n),e)})),tp=r((function(n,e){return{eJ:e,fl:Uu(n)}})),op=r((function(n,e){return u(tp,Cb(e),u(_u,n,xb(e)))})),ap=r((function(n,e){var r=e.b,t=e.c;return w(n(e.a),n(r),n(t))})),ip=r((function(n,e){return u(ap,_u(n),e)})),cp=r((function(n,e){var r=n.a,t=n.b,o=n.c,a=f(Zb,r,t,o);switch(e.$){case 0:return u(kb,e.a,u(Kb,a,e.b));case 1:return u(Jb,e.a,u(ip,a,e.b));case 3:return u(Xb,e.a,u(op,a,e.b));case 2:return u(Yb,e.a,u(np,a,e.b));case 4:return u(qb,e.a,u(rp,a,e.b));default:var i=e.a;return Ob(u(It,cp(w(r,t,o)),i))}})),lp=function(n){return cp(w(0,n,0))},up=function(n){return n/255},fp=t((function(n,e,r){return s(Ii,up(n),up(e),up(r),1)})),sp=t((function(n,e,r){return{eB:f($u,n,e,ud(r)),dr:pv(r)}})),dp=r((function(n,e){var r=u(wu,n,e),t=u(Lu,n,e);return function(n){var e=n;return u(ku,r(e.cJ),t(e.eN))}})),vp=t((function(n,e,r){var t=r;return{l:f(dp,n,e,t.l),e7:t.e7,fl:t.fl}})),mp=t((function(n,e,r){return u(ep,u(wu,n,e),r)})),bp=t((function(n,e,r){return u(tp,Cb(r),f(wu,n,e,xb(r)))})),pp=t((function(n,e,r){return u(ap,u(wu,n,e),r)})),gp=t((function(n,e,r){switch(r.$){case 0:return u(kb,r.a,f(sp,n,e,r.b));case 1:return u(Jb,r.a,f(pp,n,e,r.b));case 3:return u(Xb,r.a,f(bp,n,e,r.b));case 2:return u(Yb,r.a,f(vp,n,e,r.b));case 4:return u(qb,r.a,f(mp,n,e,r.b));default:var t=r.a;return Ob(u(It,u(gp,n,e),t))}})),hp=u(ku,Wu,Es),xp=r((function(n,e){return f(gp,hp,n,e)})),Cp=t((function(n,e,r){return{bF:n.bF+e*(r.bF-n.bF),bG:n.bG+e*(r.bG-n.bG),fN:n.fN+e*(r.fN-n.fN)}})),Pp=t((function(n,e,r){var t=ud(r),o=Nu(t),a=Su(t),i=Fu(t),c=f(Cp,n,e,Mu(t)),l=0>e?{cJ:c,df:Gs(o),dg:Gs(a),dh:Gs(i)}:{cJ:c,df:o,dg:a,dh:i},s=pv(r),d=s.b,v=s.c;return{eB:l,dr:w(Uu(u($s,e,s.a)),Uu(u($s,e,d)),Uu(u($s,e,v)))}})),Mp=function(n){return zu(Gm(n))},Tp=t((function(n,e,r){var t=Uu(u($s,e,Km(r))),o=Uu(u($s,e,Zm(r))),a=0>e?Gs(Mp(r)):Mp(r),i=f(Cp,n,e,function(n){return Jm(Gm(n))}(r));return{l:u(ku,i,a),e7:o,fl:t}})),yp=t((function(n,e,r){return u(ep,u(Cp,n,e),r)})),Lp=t((function(n,e,r){return u(tp,u($s,xc(e),Cb(r)),f(Cp,n,e,xb(r)))})),wp=t((function(n,e,r){return u(ap,u(Cp,n,e),r)})),Np=r((function(n,e){switch(e.$){case 0:return u(kb,e.a,f(Pp,Wu,n,e.b));case 1:return u(Jb,e.a,f(wp,Wu,n,e.b));case 3:return u(Xb,e.a,f(Lp,Wu,n,e.b));case 2:return u(Yb,e.a,f(Tp,Wu,n,e.b));case 4:return u(qb,e.a,f(yp,Wu,n,e.b));default:var r=e.a;return Ob(u(It,Np(n),r))}})),Sp=r((function(n,e){return(e-lt(e/n)*n)/n})),Fp=r((function(n,e){return 360*u(Sp,n,e)})),$p=r((function(n,e){var r,t=u(vc,2,e)?Zi:f(fp,17,147,216),o=Ku(u(Fp,8,n.a4))/4,a=.707/Tu(.7853981633974483-o);return r=e?z([u(Hb,t,1),u(lp,.3,u(xp,o,u(Np,a,u($p,n,e-1))))]):F,Ob(r)})),Dp=function(n){return u($p,n,20)};ga={Main:{init:s(fu,r((function(n){return u(Vb,{eD:Zi,eG:Ju(n),cl:n.cl,ad:n.ad,fv:Ku(90),fx:-Ku(180)},z([Dp(n)]))})),mu,vu,(function(){return{}}))(u(xt,(function(n){return yt({cl:n})}),u(Ct,"devicePixelRatio",Pt)))(0)}},n.Elm?function n(e,r){for(var t in r)t in e?"init"==t?C(6):n(e[t],r[t]):e[t]=r[t]}(n.Elm,ga):n.Elm=ga}(n);const e=n.Elm.Main.init({node:document.getElementById("elm-node"),flags:{devicePixelRatio:window.devicePixelRatio}});function r(n){const e=[];for(let r=0;r<n.length;r++)e.push({identifier:n[r].identifier,pageX:n[r].pageX,pageY:n[r].pageY});return e}window.addEventListener("touchstart",(n=>{e.ports.touchStart.send(r(n.changedTouches))})),window.addEventListener("touchmove",(n=>{e.ports.touchMove.send(r(n.changedTouches))})),window.addEventListener("touchend",(n=>{e.ports.touchEnd.send(r(n.changedTouches))})),window.addEventListener("touchcancel",(n=>{e.ports.touchCancel.send(r(n.changedTouches))}))}();
//# sourceMappingURL=index.974992e7.js.map
