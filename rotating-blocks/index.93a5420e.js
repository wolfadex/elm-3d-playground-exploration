!function(){var n={};!function(n){function e(n,e,r){return r.a=n,r.f=e,r}function r(n){return e(2,n,(function(e){return function(r){return n(e,r)}}))}function t(n){return e(3,n,(function(e){return function(r){return function(t){return n(e,r,t)}}}))}function o(n){return e(4,n,(function(e){return function(r){return function(t){return function(o){return n(e,r,t,o)}}}}))}function a(n){return e(5,n,(function(e){return function(r){return function(t){return function(o){return function(a){return n(e,r,t,o,a)}}}}}))}function i(n){return e(6,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return n(e,r,t,o,a,i)}}}}}}))}function c(n){return e(7,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return n(e,r,t,o,a,i,c)}}}}}}}))}function l(n){return e(8,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return n(e,r,t,o,a,i,c,l)}}}}}}}}))}function u(n,e,r){return 2===n.a?n.f(e,r):n(e)(r)}function f(n,e,r,t){return 3===n.a?n.f(e,r,t):n(e)(r)(t)}function s(n,e,r,t,o){return 4===n.a?n.f(e,r,t,o):n(e)(r)(t)(o)}function d(n,e,r,t,o,a){return 5===n.a?n.f(e,r,t,o,a):n(e)(r)(t)(o)(a)}function v(n,e,r,t,o,a,i){return 6===n.a?n.f(e,r,t,o,a,i):n(e)(r)(t)(o)(a)(i)}function m(n,e,r,t,o,a,i,c){return 7===n.a?n.f(e,r,t,o,a,i,c):n(e)(r)(t)(o)(a)(i)(c)}function b(n,e,r,t,o,a,i,c,l){return 8===n.a?n.f(e,r,t,o,a,i,c,l):n(e)(r)(t)(o)(a)(i)(c)(l)}var p=t((function(n,e,r){for(var t=Array(n),o=0;n>o;o++)t[o]=r(e+o);return t})),g=r((function(n,e){for(var r=Array(n),t=0;n>t&&e.b;t++)r[t]=e.a,e=e.b;return r.length=t,L(r,e)})),h=r((function(n,e){return e[n]})),x=t((function(n,e,r){for(var t=r.length-1;t>=0;t--)e=u(n,r[t],e);return e}));function C(n){throw Error("https://github.com/elm/core/blob/1.0.0/hints/"+n+".md")}function P(n,e){for(var r,t=[],o=M(n,e,0,t);o&&(r=t.pop());o=M(r.a,r.b,0,t));return o}function M(n,e,r,t){if(n===e)return!0;if("object"!=typeof n||null===n||null===e)return"function"==typeof n&&C(5),!1;if(r>100)return t.push(L(n,e)),!0;for(var o in 0>n.$&&(n=Sr(n),e=Sr(e)),n)if(!M(n[o],e[o],r+1,t))return!1;return!0}function y(n,e,r){if("object"!=typeof n)return n===e?0:e>n?-1:1;if(void 0===n.$)return(r=y(n.a,e.a))||(r=y(n.b,e.b))?r:y(n.c,e.c);for(;n.b&&e.b&&!(r=y(n.a,e.a));n=n.b,e=e.b);return r||(n.b?1:e.b?-1:0)}var T=r((function(n,e){var r=y(n,e);return 0>r?zr:r?$r:Nr}));function L(n,e){return{a:n,b:e}}function w(n,e,r){return{a:n,b:e,c:r}}function D(n,e){var r={};for(var t in n)r[t]=n[t];for(var t in e)r[t]=e[t];return r}function S(n,e){if("string"==typeof n)return n+e;if(!n.b)return e;var r=$(n.a,e);n=n.b;for(var t=r;n.b;n=n.b)t=t.b=$(n.a,e);return r}var N={$:0};function $(n,e){return{$:1,a:n,b:e}}var z=r($);function _(n){for(var e=N,r=n.length;r--;)e=$(n[r],e);return e}function A(n){for(var e=[];n.b;n=n.b)e.push(n.a);return e}var R=t((function(n,e,r){for(var t=[];e.b&&r.b;e=e.b,r=r.b)t.push(u(n,e.a,r.a));return _(t)})),V=r((function(n,e){return n*e})),F=r(Math.pow),B=r((function(n,e){var r=e%n;return 0===n?C(11):r>0&&0>n||0>r&&n>0?r+n:r})),k=Math.cos,E=Math.sin,j=Math.tan,I=Math.ceil,W=Math.floor,H=Math.round,U=Math.sqrt,O=Math.log,Y=isNaN,q=r((function(n,e){return n+e})),G=t((function(n,e,r){for(var t=r.length;t--;){var o=r[t],a=r.charCodeAt(t);56320>a||a>57343||(o=r[--t]+o),e=u(n,o,e)}return e})),X=r((function(n,e){return e.split(n)})),J=r((function(n,e){return e.join(n)})),Q=t((function(n,e,r){return r.slice(n,e)})),K=r((function(n,e){return 0===e.indexOf(n)}));function Z(n){return n+""}function nn(n){return{$:2,b:n}}var en=nn((function(n){return"number"!=typeof n?hn("an INT",n):n>-2147483647&&2147483647>n&&(0|n)===n?Fr(n):!isFinite(n)||n%1?hn("an INT",n):Fr(n)})),rn=nn((function(n){return"boolean"==typeof n?Fr(n):hn("a BOOL",n)})),tn=nn((function(n){return"number"==typeof n?Fr(n):hn("a FLOAT",n)})),on=(nn((function(n){return Fr(n)})),nn((function(n){return"string"==typeof n?Fr(n):n instanceof String?Fr(n+""):hn("a STRING",n)}))),an=r((function(n,e){return{$:6,d:n,b:e}}));function cn(n,e){return{$:9,f:n,g:e}}var ln=r((function(n,e){return{$:10,b:e,h:n}})),un=r((function(n,e){return cn(n,[e])})),fn=t((function(n,e,r){return cn(n,[e,r])})),sn=o((function(n,e,r,t){return cn(n,[e,r,t])})),dn=r((function(n,e){try{return mn(n,JSON.parse(e))}catch(n){return _r(u(Ar,"This is not valid JSON! "+n.message,e))}})),vn=r((function(n,e){return mn(n,e)}));function mn(n,e){switch(n.$){case 2:return n.b(e);case 5:return null===e?Fr(n.c):hn("null",e);case 3:return pn(e)?bn(n.b,e,_):hn("a LIST",e);case 4:return pn(e)?bn(n.b,e,gn):hn("an ARRAY",e);case 6:var r=n.d;if("object"!=typeof e||null===e||!(r in e))return hn("an OBJECT with a field named `"+r+"`",e);var t=mn(n.b,e[r]);return xt(t)?t:_r(u(Rr,r,t.a));case 7:var o=n.e;return pn(e)?e.length>o?(t=mn(n.b,e[o]),xt(t)?t:_r(u(Vr,o,t.a))):hn("a LONGER array. Need index "+o+" but only see "+e.length+" entries",e):hn("an ARRAY",e);case 8:if("object"!=typeof e||null===e||pn(e))return hn("an OBJECT",e);var a=N;for(var i in e)if(e.hasOwnProperty(i)){if(t=mn(n.b,e[i]),!xt(t))return _r(u(Rr,i,t.a));a=$(L(i,t.a),a)}return Fr(Qr(a));case 9:for(var c=n.f,l=n.g,f=0;l.length>f;f++){if(t=mn(l[f],e),!xt(t))return t;c=c(t.a)}return Fr(c);case 10:return t=mn(n.b,e),xt(t)?mn(n.h(t.a),e):t;case 11:for(var s=N,d=n.g;d.b;d=d.b){if(t=mn(d.a,e),xt(t))return t;s=$(t.a,s)}return _r(Br(Qr(s)));case 1:return _r(u(Ar,n.a,e));case 0:return Fr(n.a)}}function bn(n,e,r){for(var t=e.length,o=Array(t),a=0;t>a;a++){var i=mn(n,e[a]);if(!xt(i))return _r(u(Vr,a,i.a));o[a]=i.a}return Fr(r(o))}function pn(n){return Array.isArray(n)||"undefined"!=typeof FileList&&n instanceof FileList}function gn(n){return u(ht,n.length,(function(e){return n[e]}))}function hn(n,e){return _r(u(Ar,"Expecting "+n,e))}function xn(n,e){if(n===e)return!0;if(n.$!==e.$)return!1;switch(n.$){case 0:case 1:return n.a===e.a;case 2:return n.b===e.b;case 5:return n.c===e.c;case 3:case 4:case 8:return xn(n.b,e.b);case 6:return n.d===e.d&&xn(n.b,e.b);case 7:return n.e===e.e&&xn(n.b,e.b);case 9:return n.f===e.f&&Cn(n.g,e.g);case 10:return n.h===e.h&&xn(n.b,e.b);case 11:return Cn(n.g,e.g)}}function Cn(n,e){var r=n.length;if(r!==e.length)return!1;for(var t=0;r>t;t++)if(!xn(n[t],e[t]))return!1;return!0}var Pn=r((function(n,e){return JSON.stringify(e,null,n)+""}));function Mn(n){return n}var yn=t((function(n,e,r){return r[n]=e,r}));function Tn(n){return{$:0,a:n}}function Ln(n){return{$:2,b:n,c:null}}var wn=r((function(n,e){return{$:3,b:n,d:e}})),Dn=0;function Sn(n){var e={$:0,e:Dn++,f:n,g:null,h:[]};return Rn(e),e}function Nn(n){return Ln((function(e){e(Tn(Sn(n)))}))}function $n(n,e){n.h.push(e),Rn(n)}var zn=r((function(n,e){return Ln((function(r){$n(n,e),r(Tn(0))}))})),_n=!1,An=[];function Rn(n){if(An.push(n),!_n){for(_n=!0;n=An.shift();)Vn(n);_n=!1}}function Vn(n){for(;n.f;){var e=n.f.$;if(0===e||1===e){for(;n.g&&n.g.$!==e;)n.g=n.g.i;if(!n.g)return;n.f=n.g.b(n.f.a),n.g=n.g.i}else{if(2===e)return void(n.f.c=n.f.b((function(e){n.f=e,Rn(n)})));if(5===e){if(0===n.h.length)return;n.f=n.f.b(n.h.shift())}else n.g={$:3===e?0:1,b:n.f.b,i:n.g},n.f=n.f.d}}}var Fn={};function Bn(n,e,r,t,o){return{b:n,c:e,d:r,e:t,f:o}}function kn(n,e){var r={g:e,h:void 0},t=n.c,o=n.d,a=n.e,i=n.f;return r.h=Sn(u(wn,(function n(e){return u(wn,n,{$:5,b:function(n){var c=n.a;return 0===n.$?f(o,r,c,e):a&&i?s(t,r,c.i,c.j,e):f(t,r,a?c.i:c.j,e)}})}),n.b))}var En=r((function(n,e){return Ln((function(r){n.g(e),r(Tn(0))}))})),jn=r((function(n,e){return u(zn,n.h,{$:0,a:e})}));function In(n){return function(e){return{$:1,k:n,l:e}}}function Wn(n){return{$:2,m:n}}var Hn=r((function(n,e){return{$:3,n:n,o:e}})),Un=[],On=!1;function Yn(n,e,r){if(Un.push({p:n,q:e,r:r}),!On){On=!0;for(var t;t=Un.shift();)qn(t.p,t.q,t.r);On=!1}}function qn(n,e,r){var t={};for(var o in Gn(!0,e,t,null),Gn(!1,r,t,null),n)$n(n[o],{$:"fx",a:t[o]||{i:N,j:N}})}function Gn(n,e,r,t){switch(e.$){case 1:var o=e.k,a=function(n,e,r,t){return u(n?Fn[e].e:Fn[e].f,(function(n){for(var e=r;e;e=e.t)n=e.s(n);return n}),t)}(n,o,t,e.l);return void(r[o]=function(n,e,r){return r=r||{i:N,j:N},n?r.i=$(e,r.i):r.j=$(e,r.j),r}(n,a,r[o]));case 2:for(var i=e.m;i.b;i=i.b)Gn(n,i.a,r,t);return;case 3:return void Gn(n,e.o,r,{s:e.n,t:t})}}function Xn(n,e){return function(n){Fn[n]&&C(3)}(n),Fn[n]={f:Jn,u:e,a:Qn},In(n)}var Jn=r((function(n,e){return function(r){return n(e(r))}}));function Qn(n,e){var r=N,o=Fn[n].u,a=Tn(null);return Fn[n].b=a,Fn[n].c=t((function(n,e){return r=e,a})),{send:function(n){var t=u(vn,o,n);xt(t)||C(4);for(var a=t.a,i=r;i.b;i=i.b)e(i.a(a))}}}var Kn="undefined"!=typeof document?document:{};function Zn(n,e){n.appendChild(e)}function ne(n){return{$:0,a:n}}var ee,re=r((function(n,e){return r((function(r,t){for(var o=[],a=0;t.b;t=t.b){var i=t.a;a+=i.b||0,o.push(i)}return a+=o.length,{$:1,c:e,d:ue(r),e:o,f:n,b:a}}))}))(void 0),te=r((function(n,e){return r((function(r,t){for(var o=[],a=0;t.b;t=t.b){var i=t.a;a+=i.b.b||0,o.push(i)}return a+=o.length,{$:2,c:e,d:ue(r),e:o,f:n,b:a}}))}))(void 0),oe=r((function(n,e){return{$:4,j:n,k:e,b:1+(e.b||0)}})),ae=r((function(n,e){return{$:"a0",n:n,o:e}})),ie=r((function(n,e){return{$:"a1",n:n,o:e}})),ce=r((function(n,e){return{$:"a2",n:n,o:e}})),le=r((function(n,e){return{$:"a3",n:n,o:e}}));function ue(n){for(var e={};n.b;n=n.b){var r=n.a,t=r.$,o=r.n,a=r.o;if("a2"!==t){var i=e[t]||(e[t]={});"a3"===t&&"class"===o?fe(i,o,a):i[o]=a}else"className"===o?fe(e,o,a):e[o]=a}return e}function fe(n,e,r){var t=n[e];n[e]=t?t+" "+r:r}function se(n,e){var r=n.$;if(5===r)return se(n.k||(n.k=n.m()),e);if(0===r)return Kn.createTextNode(n.a);if(4===r){for(var t=n.k,o=n.j;4===t.$;)"object"!=typeof o?o=[o,t.j]:o.push(t.j),t=t.k;var a={j:o,p:e};return(i=se(t,a)).elm_event_node_ref=a,i}if(3===r)return de(i=n.h(n.g),e,n.d),i;var i=n.f?Kn.createElementNS(n.f,n.c):Kn.createElement(n.c);de(i,e,n.d);for(var c=n.e,l=0;c.length>l;l++)Zn(i,se(1===r?c[l]:c[l].b,e));return i}function de(n,e,r){for(var t in r){var o=r[t];"a1"===t?ve(n,o):"a0"===t?pe(n,e,o):"a3"===t?me(n,o):"a4"===t?be(n,o):("value"!==t&&"checked"!==t||n[t]!==o)&&(n[t]=o)}}function ve(n,e){var r=n.style;for(var t in e)r[t]=e[t]}function me(n,e){for(var r in e){var t=e[r];void 0!==t?n.setAttribute(r,t):n.removeAttribute(r)}}function be(n,e){for(var r in e){var t=e[r],o=t.f,a=t.o;void 0!==a?n.setAttributeNS(o,r,a):n.removeAttributeNS(o,r)}}function pe(n,e,r){var t=n.elmFs||(n.elmFs={});for(var o in r){var a=r[o],i=t[o];if(a){if(i){if(i.q.$===a.$){i.q=a;continue}n.removeEventListener(o,i)}i=ge(e,a),n.addEventListener(o,i,ee&&{passive:2>Dt(a)}),t[o]=i}else n.removeEventListener(o,i),t[o]=void 0}}try{window.addEventListener("t",null,Object.defineProperty({},"passive",{get:function(){ee=!0}}))}catch(n){}function ge(n,e){function r(e){var t=r.q,o=mn(t.a,e);if(xt(o)){for(var a,i=Dt(t),c=o.a,l=i?3>i?c.a:c.as:c,u=1==i?c.b:3==i&&c.c4,f=(u&&e.stopPropagation(),(2==i?c.b:3==i&&c.cU)&&e.preventDefault(),n);a=f.j;){if("function"==typeof a)l=a(l);else for(var s=a.length;s--;)l=a[s](l);f=f.p}f(l,u)}}return r.q=e,r}function he(n,e){return n.$==e.$&&xn(n.a,e.a)}function xe(n,e,r,t){var o={$:e,r:r,s:t,t:void 0,u:void 0};return n.push(o),o}function Ce(n,e,r,t){if(n!==e){var o=n.$,a=e.$;if(o!==a){if(1!==o||2!==a)return void xe(r,0,t,e);e=function(n){for(var e=n.e,r=e.length,t=Array(r),o=0;r>o;o++)t[o]=e[o].b;return{$:1,c:n.c,d:n.d,e:t,f:n.f,b:n.b}}(e),a=1}switch(a){case 5:for(var i=n.l,c=e.l,l=i.length,u=l===c.length;u&&l--;)u=i[l]===c[l];if(u)return void(e.k=n.k);e.k=e.m();var f=[];return Ce(n.k,e.k,f,0),void(f.length>0&&xe(r,1,t,f));case 4:for(var s=n.j,d=e.j,v=!1,m=n.k;4===m.$;)v=!0,"object"!=typeof s?s=[s,m.j]:s.push(m.j),m=m.k;for(var b=e.k;4===b.$;)v=!0,"object"!=typeof d?d=[d,b.j]:d.push(b.j),b=b.k;return v&&s.length!==d.length?void xe(r,0,t,e):((v?function(n,e){for(var r=0;n.length>r;r++)if(n[r]!==e[r])return!1;return!0}(s,d):s===d)||xe(r,2,t,d),void Ce(m,b,r,t+1));case 0:return void(n.a!==e.a&&xe(r,3,t,e.a));case 1:return void Pe(n,e,r,t,ye);case 2:return void Pe(n,e,r,t,Te);case 3:if(n.h!==e.h)return void xe(r,0,t,e);var p=Me(n.d,e.d);p&&xe(r,4,t,p);var g=e.i(n.g,e.g);return void(g&&xe(r,5,t,g))}}}function Pe(n,e,r,t,o){if(n.c===e.c&&n.f===e.f){var a=Me(n.d,e.d);a&&xe(r,4,t,a),o(n,e,r,t)}else xe(r,0,t,e)}function Me(n,e,r){var t;for(var o in n)if("a1"!==o&&"a0"!==o&&"a3"!==o&&"a4"!==o)if(o in e){var a=n[o],i=e[o];a===i&&"value"!==o&&"checked"!==o||"a0"===r&&he(a,i)||((t=t||{})[o]=i)}else(t=t||{})[o]=r?"a1"===r?"":"a0"===r||"a3"===r?void 0:{f:n[o].f,o:void 0}:"string"==typeof n[o]?"":null;else{var c=Me(n[o],e[o]||{},o);c&&((t=t||{})[o]=c)}for(var l in e)l in n||((t=t||{})[l]=e[l]);return t}function ye(n,e,r,t){var o=n.e,a=e.e,i=o.length,c=a.length;i>c?xe(r,6,t,{v:c,i:i-c}):c>i&&xe(r,7,t,{v:i,e:a});for(var l=c>i?i:c,u=0;l>u;u++){var f=o[u];Ce(f,a[u],r,++t),t+=f.b||0}}function Te(n,e,r,t){for(var o=[],a={},i=[],c=n.e,l=e.e,u=c.length,f=l.length,s=0,d=0,v=t;u>s&&f>d;){var m=(w=c[s]).a,b=(D=l[d]).a,p=w.b,g=D.b,h=void 0,x=void 0;if(m!==b){var C=c[s+1],P=l[d+1];if(C){var M=C.a,y=C.b;x=b===M}if(P){var T=P.a,L=P.b;h=m===T}if(h&&x)Ce(p,L,o,++v),we(a,o,m,g,d,i),v+=p.b||0,De(a,o,m,y,++v),v+=y.b||0,s+=2,d+=2;else if(h)v++,we(a,o,b,g,d,i),Ce(p,L,o,v),v+=p.b||0,s+=1,d+=2;else if(x)De(a,o,m,p,++v),v+=p.b||0,Ce(y,g,o,++v),v+=y.b||0,s+=2,d+=1;else{if(!C||M!==T)break;De(a,o,m,p,++v),we(a,o,b,g,d,i),v+=p.b||0,Ce(y,L,o,++v),v+=y.b||0,s+=2,d+=2}}else Ce(p,g,o,++v),v+=p.b||0,s++,d++}for(;u>s;){var w;v++,De(a,o,(w=c[s]).a,p=w.b,v),v+=p.b||0,s++}for(;f>d;){var D,S=S||[];we(a,o,(D=l[d]).a,D.b,void 0,S),d++}(o.length>0||i.length>0||S)&&xe(r,8,t,{w:o,x:i,y:S})}var Le="_elmW6BL";function we(n,e,r,t,o,a){var i=n[r];if(!i)return a.push({r:o,A:i={c:0,z:t,r:o,s:void 0}}),void(n[r]=i);if(1===i.c){a.push({r:o,A:i}),i.c=2;var c=[];return Ce(i.z,t,c,i.r),i.r=o,void(i.s.s={w:c,A:i})}we(n,e,r+Le,t,o,a)}function De(n,e,r,t,o){var a=n[r];if(a){if(0===a.c){a.c=2;var i=[];return Ce(t,a.z,i,o),void xe(e,9,o,{w:i,A:a})}De(n,e,r+Le,t,o)}else{var c=xe(e,9,o,void 0);n[r]={c:1,z:t,r:o,s:c}}}function Se(n,e,r,t){Ne(n,e,r,0,0,e.b,t)}function Ne(n,e,r,t,o,a,i){for(var c=r[t],l=c.r;l===o;){var u=c.$;if(1===u)Se(n,e.k,c.s,i);else if(8===u)c.t=n,c.u=i,(f=c.s.w).length>0&&Ne(n,e,f,0,o,a,i);else if(9===u){c.t=n,c.u=i;var f,s=c.s;s&&(s.A.s=n,(f=s.w).length>0&&Ne(n,e,f,0,o,a,i))}else c.t=n,c.u=i;if(!(c=r[++t])||(l=c.r)>a)return t}var d=e.$;if(4===d){for(var v=e.k;4===v.$;)v=v.k;return Ne(n,v,r,t,o+1,a,n.elm_event_node_ref)}for(var m=e.e,b=n.childNodes,p=0;m.length>p;p++){o++;var g=1===d?m[p]:m[p].b,h=o+(g.b||0);if(!(o>l||l>h||(c=r[t=Ne(b[p],g,r,t,o,h,i)])&&(l=c.r)<=a))return t;o=h}return t}function $e(n,e){for(var r=0;e.length>r;r++){var t=e[r],o=t.t,a=ze(o,t);o===n&&(n=a)}return n}function ze(n,e){switch(e.$){case 0:return function(n,e,r){var t=n.parentNode,o=se(e,r);return o.elm_event_node_ref||(o.elm_event_node_ref=n.elm_event_node_ref),t&&o!==n&&t.replaceChild(o,n),o}(n,e.s,e.u);case 4:return de(n,e.u,e.s),n;case 3:return n.replaceData(0,n.length,e.s),n;case 1:return $e(n,e.s);case 2:return n.elm_event_node_ref?n.elm_event_node_ref.j=e.s:n.elm_event_node_ref={j:e.s,p:e.u},n;case 6:for(var r=e.s,t=0;r.i>t;t++)n.removeChild(n.childNodes[r.v]);return n;case 7:for(var o=(r=e.s).e,a=n.childNodes[t=r.v];o.length>t;t++)n.insertBefore(se(o[t],e.u),a);return n;case 9:if(!(r=e.s))return n.parentNode.removeChild(n),n;var i=r.A;return void 0!==i.r&&n.parentNode.removeChild(n),i.s=$e(n,r.w),n;case 8:return function(n,e){var r=e.s,t=function(n,e){if(n){for(var r=Kn.createDocumentFragment(),t=0;n.length>t;t++){var o=n[t].A;Zn(r,2===o.c?o.s:se(o.z,e.u))}return r}}(r.y,e);n=$e(n,r.w);for(var o=r.x,a=0;o.length>a;a++){var i=o[a],c=i.A,l=2===c.c?c.s:se(c.z,e.u);n.insertBefore(l,n.childNodes[i.r])}return t&&Zn(n,t),n}(n,e);case 5:return e.s(n);default:C(10)}}function _e(n){if(3===n.nodeType)return ne(n.textContent);if(1!==n.nodeType)return ne("");for(var e=N,r=n.attributes,t=r.length;t--;){var o=r[t];e=$(u(le,o.name,o.value),e)}var a=n.tagName.toLowerCase(),i=N,c=n.childNodes;for(t=c.length;t--;)i=$(_e(c[t]),i);return f(re,a,e,i)}var Ae=o((function(n,e,r,t){return function(n,e,r,t,o,a){var i=u(vn,n,e?e.flags:void 0);xt(i)||C(2);var c={},l=r(i.a),f=l.a,s=a(v,f),d=function(n,e){var r;for(var t in Fn){var o=Fn[t];o.a&&((r=r||{})[t]=o.a(t,e)),n[t]=kn(o,e)}return r}(c,v);function v(n,e){var r=u(t,n,f);s(f=r.a,e),Yn(c,r.b,o(f))}return Yn(c,l.b,o(f)),d?{ports:d}:{}}(e,t,n.e1,n.fz,n.fs,(function(e,r){var o=n.fB,a=t.node,i=_e(a);return function(n,e){e(n);var r=0;function t(){r=1===r?0:(Ve(t),e(n),1)}return function(o,a){n=o,a?(e(n),2===r&&(r=1)):(0===r&&Ve(t),r=2)}}(r,(function(n){var r=o(n),t=function(n,e){var r=[];return Ce(n,e,r,0),r}(i,r);a=function(n,e,r,t){return 0===r.length?n:(Se(n,e,r,t),$e(n,r))}(a,i,t,e),i=r}))}))})),Re="undefined"!=typeof cancelAnimationFrame?cancelAnimationFrame:function(n){clearTimeout(n)},Ve="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:function(n){return setTimeout(n,1e3/60)},Fe={addEventListener:function(){},removeEventListener:function(){}},Be="undefined"!=typeof document?document:Fe,ke="undefined"!=typeof window?window:Fe,Ee=t((function(n,e,r){return Nn(Ln((function(){function t(n){Sn(r(n))}return n.addEventListener(e,t,ee&&{passive:!0}),function(){n.removeEventListener(e,t)}})))})),je=r((function(n,e){var r=mn(n,e);return xt(r)?kr(r.a):Er})),Ie=r((function(n,e){var r="g";n.fa&&(r+="m"),n.eF&&(r+="i");try{return kr(RegExp(e,r))}catch(n){return Er}})),We=t((function(n,e,r){for(var t,o=[],a=0,i=r,c=e.lastIndex,l=-1;a++<n&&(t=e.exec(i))&&l!=e.lastIndex;){for(var u=t.length-1,f=Array(u);u>0;){var d=t[u];f[--u]=d?kr(d):Er}o.push(s(Ci,t[0],t.index,a,_(f))),l=e.lastIndex}return e.lastIndex=c,_(o)})),He=0;function Ue(n,e){for(;e.b;e=e.b)n(e.a)}function Oe(n){for(var e=0;n.b;n=n.b)e++;return e}var Ye="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:function(n){setTimeout(n,1e3/60)},qe=a((function(n,e,r,t,o){return{$:0,a:n,b:e,c:r,d:t,e:o}})),Ge=r((function(n,e){var r=n.blend;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.BLEND),r.enabled=!0),r.a===e.a&&r.d===e.d||(n.gl.blendEquationSeparate(e.a,e.d),r.a=e.a,r.d=e.d),r.b===e.b&&r.c===e.c&&r.e===e.e&&r.f===e.f||(n.gl.blendFuncSeparate(e.b,e.c,e.e,e.f),r.b=e.b,r.c=e.c,r.e=e.e,r.f=e.f),r.g===e.g&&r.h===e.h&&r.i===e.i&&r.j===e.j||(n.gl.blendColor(e.g,e.h,e.i,e.j),r.g=e.g,r.h=e.h,r.i=e.i,r.j=e.j)})),Xe=r((function(n,e){var r=n.depthTest;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.DEPTH_TEST),r.enabled=!0),r.a!==e.a&&(n.gl.depthFunc(e.a),r.a=e.a),r.b!==e.b&&(n.gl.depthMask(e.b),r.b=e.b),r.c===e.c&&r.d===e.d||(n.gl.depthRange(e.c,e.d),r.c=e.c,r.d=e.d)})),Je=r((function(n,e){var r=n.stencilTest;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.STENCIL_TEST),r.enabled=!0),r.d===e.d&&r.a===e.a&&r.b===e.b||(n.gl.stencilFuncSeparate(n.gl.FRONT,e.d,e.a,e.b),r.d=e.d),r.e===e.e&&r.f===e.f&&r.g===e.g||(n.gl.stencilOpSeparate(n.gl.FRONT,e.e,e.f,e.g),r.e=e.e,r.f=e.f,r.g=e.g),r.c!==e.c&&(n.gl.stencilMask(e.c),r.c=e.c),r.h===e.h&&r.a===e.a&&r.b===e.b||(n.gl.stencilFuncSeparate(n.gl.BACK,e.h,e.a,e.b),r.h=e.h,r.a=e.a,r.b=e.b),r.i===e.i&&r.j===e.j&&r.k===e.k||(n.gl.stencilOpSeparate(n.gl.BACK,e.i,e.j,e.k),r.i=e.i,r.j=e.j,r.k=e.k)})),Qe=r((function(n,e){var r=n.scissor;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.SCISSOR_TEST),r.enabled=!0),r.a===e.a&&r.b===e.b&&r.c===e.c&&r.d===e.d||(n.gl.scissor(e.a,e.b,e.c,e.d),r.a=e.a,r.b=e.b,r.c=e.c,r.d=e.d)})),Ke=r((function(n,e){var r=n.colorMask;r.toggle=n.toggle,r.enabled=!0,r.a===e.a&&r.b===e.b&&r.c===e.c&&r.d===e.d||(n.gl.colorMask(e.a,e.b,e.c,e.d),r.a=e.a,r.b=e.b,r.c=e.c,r.d=e.d)})),Ze=r((function(n,e){var r=n.cullFace;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.CULL_FACE),r.enabled=!0),r.a!==e.a&&(n.gl.cullFace(e.a),r.a=e.a)})),nr=r((function(n,e){var r=n.polygonOffset;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.POLYGON_OFFSET_FILL),r.enabled=!0),r.a===e.a&&r.b===e.b||(n.gl.polygonOffset(e.a,e.b),r.a=e.a,r.b=e.b)})),er=r((function(n,e){var r=n.sampleCoverage;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.SAMPLE_COVERAGE),r.enabled=!0),r.a===e.a&&r.b===e.b||(n.gl.sampleCoverage(e.a,e.b),r.a=e.a,r.b=e.b)})),rr=function(n){n.scissor.enabled&&(n.gl.disable(n.gl.SCISSOR_TEST),n.scissor.enabled=!1)},tr=function(n){var e=n.colorMask;e.a&&e.b&&e.c&&e.d||(n.gl.colorMask(!0,!0,!0,!0),e.a=!0,e.b=!0,e.c=!0,e.d=!0)},or=["blend","depthTest","stencilTest","scissor","colorMask","cullFace","polygonOffset","sampleCoverage","sampleAlphaToCoverage"],ar=[function(n){n.blend.enabled&&(n.gl.disable(n.gl.BLEND),n.blend.enabled=!1)},function(n){n.depthTest.enabled&&(n.gl.disable(n.gl.DEPTH_TEST),n.depthTest.enabled=!1)},function(n){n.stencilTest.enabled&&(n.gl.disable(n.gl.STENCIL_TEST),n.stencilTest.enabled=!1)},rr,tr,function(n){n.gl.disable(n.gl.CULL_FACE)},function(n){n.gl.disable(n.gl.POLYGON_OFFSET_FILL)},function(n){n.gl.disable(n.gl.SAMPLE_COVERAGE)},function(n){n.gl.disable(n.gl.SAMPLE_ALPHA_TO_COVERAGE)}];function ir(n,e,r){var t=n.createShader(r);return n.shaderSource(t,"#extension GL_OES_standard_derivatives : enable\n"+e),n.compileShader(t),t}function cr(n,e){switch(e){case n.FLOAT:return{size:1,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC2:return{size:2,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC3:return{size:3,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC4:return{size:4,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_MAT4:return{size:4,arraySize:4,type:Float32Array,baseType:n.FLOAT};case n.INT:return{size:1,arraySize:1,type:Int32Array,baseType:n.INT}}}function lr(n,e,r,t){for(var o=r.a.dr,a=[],i=0;o>i;i++)a.push(String.fromCharCode(97+i));var c=cr(n,e.type);if(void 0===c)throw Error("No info available for: "+e.type);var l=0,u=c.size*c.arraySize*o,f=new c.type(Oe(r.b)*u);Ue((function(n){!function(n,e,r,t,i){var c;if(1===o)for(c=0;e>c;c++)n[r++]=1===e?t[i]:t[i][c];else a.forEach((function(o){for(c=0;e>c;c++)n[r++]=1===e?t[o][i]:t[o][i][c]}))}(f,c.size*c.arraySize,l,n,t[e.name]||e.name),l+=u}),r.b);var s=n.createBuffer();return n.bindBuffer(n.ARRAY_BUFFER,s),n.bufferData(n.ARRAY_BUFFER,f,n.STATIC_DRAW),s}function ur(n,e){return n+"#"+e}var fr=r((function(n,e){var r=n.f,t=r.gl;return t?(t.viewport(0,0,t.drawingBufferWidth,t.drawingBufferHeight),r.depthTest.b||(t.depthMask(!0),r.depthTest.b=!0),r.stencilTest.c!==r.STENCIL_WRITEMASK&&(t.stencilMask(r.STENCIL_WRITEMASK),r.stencilTest.c=r.STENCIL_WRITEMASK),rr(r),tr(r),t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT|t.STENCIL_BUFFER_BIT),Ue((function(e){if(e.d.b.b){var o,a,i,c,l;if(e.b.id&&e.c.id&&(o=ur(e.b.id,e.c.id),a=r.programs[o]),!a){var u,f;e.b.id?u=r.shaders[e.b.id]:e.b.id=He++,u||(u=ir(t,e.b.src,t.VERTEX_SHADER),r.shaders[e.b.id]=u),e.c.id?f=r.shaders[e.c.id]:e.c.id=He++,f||(f=ir(t,e.c.src,t.FRAGMENT_SHADER),r.shaders[e.c.id]=f);var s=function(n,e,r){var t=n.createProgram();if(n.attachShader(t,e),n.attachShader(t,r),n.linkProgram(t),!n.getProgramParameter(t,n.LINK_STATUS))throw"Link failed: "+n.getProgramInfoLog(t)+"\nvs info-log: "+n.getShaderInfoLog(e)+"\nfs info-log: "+n.getShaderInfoLog(r);return t}(t,u,f);(a={glProgram:s,attributes:Object.assign({},e.b.attributes,e.c.attributes),currentUniforms:{},activeAttributes:[],activeAttributeLocations:[]}).uniformSetters=function(n,e,r,t){var o=r.glProgram,a=r.currentUniforms,i=0,c=e.f;function l(e,r){var t=r.name,o=n.getUniformLocation(e,t);switch(r.type){case n.INT:return function(e){a[t]!==e&&(n.uniform1i(o,e),a[t]=e)};case n.FLOAT:return function(e){a[t]!==e&&(n.uniform1f(o,e),a[t]=e)};case n.FLOAT_VEC2:return function(e){a[t]!==e&&(n.uniform2f(o,e[0],e[1]),a[t]=e)};case n.FLOAT_VEC3:return function(e){a[t]!==e&&(n.uniform3f(o,e[0],e[1],e[2]),a[t]=e)};case n.FLOAT_VEC4:return function(e){a[t]!==e&&(n.uniform4f(o,e[0],e[1],e[2],e[3]),a[t]=e)};case n.FLOAT_MAT4:return function(e){a[t]!==e&&(n.uniformMatrix4fv(o,!1,new Float32Array(e)),a[t]=e)};case n.SAMPLER_2D:var l=i++;return function(e){n.activeTexture(n.TEXTURE0+l);var r=c.textures.get(e);r||(r=e.eJ(n),c.textures.set(e,r)),n.bindTexture(n.TEXTURE_2D,r),a[t]!==e&&(n.uniform1i(o,l),a[t]=e)};case n.BOOL:return function(e){a[t]!==e&&(n.uniform1i(o,e),a[t]=e)};default:return function(){}}}for(var u={},f=n.getProgramParameter(o,n.ACTIVE_UNIFORMS),s=0;f>s;s++){var d=n.getActiveUniform(o,s);u[t[d.name]||d.name]=l(o,d)}return u}(t,n,a,Object.assign({},e.b.uniforms,e.c.uniforms));var d=t.getProgramParameter(s,t.ACTIVE_ATTRIBUTES);for(i=0;d>i;i++){var v=t.getActiveAttrib(s,i),m=t.getAttribLocation(s,v.name);a.activeAttributes.push(v),a.activeAttributeLocations.push(m)}o=ur(e.b.id,e.c.id),r.programs[o]=a}r.lastProgId!==o&&(t.useProgram(a.glProgram),r.lastProgId=o),c=a.uniformSetters,Object.keys(l=e.e).forEach((function(n){var e=c[n];e&&e(l[n])}));var b=r.buffers.get(e.d);for(b||(b=function(n,e){if(e.a.dA>0){var r=n.createBuffer(),t=function(n,e){var r,t=new Uint32Array(Oe(n)*e),o=0;return Ue((function(n){if(1===e)t[o++]=n;else for(r=0;e>r;r++)t[o++]=n[String.fromCharCode(97+r)]}),n),t}(e.c,e.a.dA);return n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,r),n.bufferData(n.ELEMENT_ARRAY_BUFFER,t,n.STATIC_DRAW),{numIndices:t.length,indexBuffer:r,buffers:{}}}return{numIndices:e.a.dr*Oe(e.b),indexBuffer:null,buffers:{}}}(t,e.d),r.buffers.set(e.d,b)),i=0;a.activeAttributes.length>i;i++){m=a.activeAttributeLocations[i],void 0===b.buffers[(v=a.activeAttributes[i]).name]&&(b.buffers[v.name]=lr(t,v,e.d,a.attributes)),t.bindBuffer(t.ARRAY_BUFFER,b.buffers[v.name]);var p=cr(t,v.type);if(1===p.arraySize)t.enableVertexAttribArray(m),t.vertexAttribPointer(m,p.size,p.baseType,!1,0,0);else for(var g=4*p.size,h=g*p.arraySize,x=0;p.arraySize>x;x++)t.enableVertexAttribArray(m+x),t.vertexAttribPointer(m+x,p.size,p.baseType,!1,h,g*x)}for(r.toggle=!r.toggle,Ue(Jf(r),e.a),i=0;9>i;i++){var C=r[or[i]];C.toggle!==r.toggle&&C.enabled&&(ar[i](r),C.enabled=!1,C.toggle=r.toggle)}b.indexBuffer?(t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,b.indexBuffer),t.drawElements(e.d.a.d5,b.numIndices,t.UNSIGNED_INT,0)):t.drawArrays(e.d.a.d5,0,b.numIndices)}}),n.g),e):e})),sr=t((function(n,e,r){return function(n,e,r,t){return{$:3,d:ue(n),g:e,h:r,i:t}}(e,{g:r,f:{},h:n},hr,xr)})),dr=r((function(n,e){n.contextAttributes.alpha=!0,n.contextAttributes.premultipliedAlpha=e.a})),vr=r((function(n,e){n.contextAttributes.depth=!0,n.sceneSettings.push((function(n){n.clearDepth(e.a)}))})),mr=r((function(n,e){n.contextAttributes.stencil=!0,n.sceneSettings.push((function(n){n.clearStencil(e.a)}))})),br=r((function(n){n.contextAttributes.antialias=!0})),pr=r((function(n,e){n.sceneSettings.push((function(n){n.clearColor(e.a,e.b,e.c,e.d)}))})),gr=r((function(n){n.contextAttributes.preserveDrawingBuffer=!0}));function hr(n){var e={contextAttributes:{alpha:!1,depth:!1,stencil:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1},sceneSettings:[]};Ue((function(n){return u(Xf,e,n)}),n.h);var r=Kn.createElement("canvas"),t=r.getContext&&(r.getContext("webgl",e.contextAttributes)||r.getContext("experimental-webgl",e.contextAttributes));return t&&"undefined"!=typeof WeakMap?(e.sceneSettings.forEach((function(n){n(t)})),t.getExtension("OES_standard_derivatives"),t.getExtension("OES_element_index_uint"),n.f.gl=t,n.f.toggle=!1,n.f.blend={enabled:!1,toggle:!1},n.f.depthTest={enabled:!1,toggle:!1},n.f.stencilTest={enabled:!1,toggle:!1},n.f.scissor={enabled:!1,toggle:!1},n.f.colorMask={enabled:!1,toggle:!1},n.f.cullFace={enabled:!1,toggle:!1},n.f.polygonOffset={enabled:!1,toggle:!1},n.f.sampleCoverage={enabled:!1,toggle:!1},n.f.sampleAlphaToCoverage={enabled:!1,toggle:!1},n.f.shaders=[],n.f.programs={},n.f.lastProgId=null,n.f.buffers=new WeakMap,n.f.textures=new WeakMap,n.f.STENCIL_WRITEMASK=t.getParameter(t.STENCIL_WRITEMASK),Ye((function(){return u(fr,n,r)}))):(r=Kn.createElement("div")).innerHTML='<a href="https://get.webgl.org/">Enable WebGL</a> to see this content!',r}function xr(n,e){return e.f=n.f,fr(e)}var Cr=r((function(n,e){return new Float64Array([n,e])}));new Float64Array(3),new Float64Array(3),new Float64Array(3);var Pr=t((function(n,e,r){return new Float64Array([n,e,r])})),Mr=r((function(n,e){return new Float64Array([e[0]*n,e[1]*n,e[2]*n])})),yr=o((function(n,e,r,t){return new Float64Array([n,e,r,t])}));new Float64Array(16),new Float64Array(16),new Float64Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);var Tr=z,Lr=x,wr=t((function(n,e,t){var o=t.c,a=t.d,i=r((function(e,r){return f(Lr,e.$?n:i,r,e.a)}));return f(Lr,i,f(Lr,n,e,a),o)})),Dr=t((function(n,e,r){for(;;){if(-2===r.$)return e;var t=r.d,o=n,a=f(n,r.b,r.c,f(Dr,n,e,r.e));n=o,e=a,r=t}})),Sr=function(n){return f(Dr,t((function(n,e,r){return u(Tr,L(n,e),r)})),N,n)},Nr=1,$r=2,zr=0,_r=function(n){return{$:1,a:n}},Ar=r((function(n,e){return{$:3,a:n,b:e}})),Rr=r((function(n,e){return{$:0,a:n,b:e}})),Vr=r((function(n,e){return{$:1,a:n,b:e}})),Fr=function(n){return{$:0,a:n}},Br=function(n){return{$:2,a:n}},kr=function(n){return{$:0,a:n}},Er={$:1},jr=Pn,Ir=Z,Wr=r((function(n,e){return u(J,n,A(e))})),Hr=r((function(n,e){return _(u(X,n,e))})),Ur=t((function(n,e,r){for(;;){if(!r.b)return e;var t=r.b,o=n,a=u(n,r.a,e);n=o,e=a,r=t}})),Or=function(n){return f(Ur,r((function(n,e){return e+1})),0,n)},Yr=R,qr=t((function(n,e,r){for(;;){if(y(n,e)>=1)return r;var t=n,o=e-1,a=u(Tr,e,r);n=t,e=o,r=a}})),Gr=r((function(n,e){return f(qr,n,e,N)})),Xr=r((function(n,e){return f(Yr,n,u(Gr,0,Or(e)-1),e)})),Jr=function(n){var e=n.charCodeAt(0);return 55296>e||e>56319?e:1024*(e-55296)+n.charCodeAt(1)-56320+65536},Qr=function(n){return f(Ur,Tr,N,n)},Kr=function(n){var e=n.charCodeAt(0);return isNaN(e)?Er:kr(55296>e||e>56319?L(n[0],n.slice(1)):L(n[0]+n[1],n.slice(2)))},Zr=32,nt=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),et=[],rt=I,tt=r((function(n,e){return O(e)/O(n)})),ot=function(n){return n},at=rt(u(tt,2,Zr)),it=s(nt,0,at,et,et),ct=p,lt=function(n){return{$:1,a:n}},ut=W,ft=function(n){return n.length},st=r((function(n,e){return y(n,e)>0?n:e})),dt=V,vt=g,mt=r((function(n,e){for(;;){var r=u(vt,Zr,n),t=r.b,o=u(Tr,{$:0,a:r.a},e);if(!t.b)return Qr(o);n=t,e=o}})),bt=r((function(n,e){for(;;){var r=rt(e/Zr);if(1===r)return u(vt,Zr,n).a;n=u(mt,n,N),e=r}})),pt=r((function(n,e){if(e.l){var r=e.l*Zr,t=ut(u(tt,Zr,r-1)),o=n?Qr(e.z):e.z,a=u(bt,o,e.l);return s(nt,ft(e.p)+r,u(st,5,t*at),a,e.p)}return s(nt,ft(e.p),at,et,e.p)})),gt=a((function(n,e,r,t,o){for(;;){if(0>e)return u(pt,!1,{z:t,l:r/Zr|0,p:o});var a=lt(f(ct,Zr,e,n));n=n,e-=Zr,r=r,t=u(Tr,a,t),o=o}})),ht=r((function(n,e){if(n>0){var r=n%Zr;return d(gt,e,n-r-Zr,n,N,f(ct,r,n-r,e))}return it})),xt=function(n){return!n.$},Ct=ln,Pt=an,Mt=tn,yt=u(r((function(n,e){return{P:e,aD:"",U:n,aq:""}})),N,N),Tt=un,Lt=fn,wt=function(n){return{$:0,a:n}},Dt=function(n){switch(n.$){case 0:return 0;case 1:return 1;case 2:return 2;default:return 3}},St=re("div"),Nt=function(n){return{$:2,a:n}},$t=function(n){return{$:6,a:n}},zt=function(n){return{$:4,a:n}},_t=t((function(n,e,r){return e(n(r))})),At=function(n){return n},Rt=function(n){return n.length},Vt=Q,Ft=r((function(n,e){return 1>n?e:f(Vt,n,Rt(e),e)})),Bt=K,kt=Tn,Et=kt(0),jt=o((function(n,e,r,t){if(t.b){var o=t.a,a=t.b;if(a.b){var i=a.a,c=a.b;if(c.b){var l=c.a,d=c.b;if(d.b){var v=d.b;return u(n,o,u(n,i,u(n,l,u(n,d.a,r>500?f(Ur,n,e,Qr(v)):s(jt,n,e,r+1,v)))))}return u(n,o,u(n,i,u(n,l,e)))}return u(n,o,u(n,i,e))}return u(n,o,e)}return e})),It=t((function(n,e,r){return s(jt,n,e,0,r)})),Wt=r((function(n,e){return f(It,r((function(e,r){return u(Tr,n(e),r)})),N,e)})),Ht=wn,Ut=r((function(n,e){return u(Ht,(function(e){return kt(n(e))}),e)})),Ot=t((function(n,e,r){return u(Ht,(function(e){return u(Ht,(function(r){return kt(u(n,e,r))}),r)}),e)})),Yt=function(n){return f(It,Ot(Tr),kt(N),n)},qt=En,Gt=r((function(n,e){var r=e;return Nn(u(Ht,qt(n),r))}));Fn.Task=Bn(Et,t((function(n,e){return u(Ut,(function(){return 0}),Yt(u(Wt,Gt(n),e)))})),t((function(){return kt(0)})),r((function(n,e){return u(Ut,n,e)})));var Xt=In("Task"),Jt=r((function(n,e){return Xt(u(Ut,n,e))})),Qt=Ae,Kt=r((function(n,e){return{$:0,a:n,b:e}})),Zt=function(n){return{$:7,a:n}},no=r((function(n,e){return{$:5,a:n,b:e}})),eo=r((function(n,e){return{$:3,a:n,b:e}})),ro=Wn,to=Hn,oo=function(n){return{$:1,a:n}},ao=t((function(n,e,r){return{cH:r,ei:e,en:n}})),io=kt(f(ao,N,Er,0)),co=function(n){return Ln((function(e){var r=n.f;2===r.$&&r.c&&r.c(),n.f=null,e(Tn(0))}))},lo=Ln((function(n){n(Tn(Date.now()))})),uo=Ln((function(n){var e=Ve((function(){n(Tn(Date.now()))}));return function(){Re(e)}})),fo=jn,so=Nn,vo=t((function(n,e,r){var t=r.ei,o=r.cH,a=L(t,e);return 1===a.a.$?a.b.b?u(Ht,(function(n){return u(Ht,(function(r){return kt(f(ao,e,kr(n),r))}),lo)}),so(u(Ht,fo(n),uo))):io:a.b.b?kt(f(ao,e,t,o)):u(Ht,(function(){return io}),co(a.a.a))})),mo=At,bo=t((function(n,e,r){var t=r.en,o=r.cH,a=function(r){return u(qt,n,(0,r.a)(r.$?e-o:mo(e)))};return u(Ht,(function(n){return u(Ht,(function(){return kt(f(ao,t,kr(n),e))}),Yt(u(Wt,a,t)))}),so(u(Ht,fo(n),uo)))})),po=t((function(n,e,r){return n(e(r))}));Fn["Browser.AnimationManager"]=Bn(io,vo,bo,0,r((function(n,e){return e.$?oo(u(po,n,e.a)):{$:0,a:u(po,n,e.a)}})));var go=In("Browser.AnimationManager"),ho=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),xo=r((function(n,e){return{ea:e,en:n}})),Co={$:-2},Po=Co,Mo=kt(u(xo,N,Po)),yo=function(n){return L(S(n.a?"w_":"d_",n.b),n)},To=a((function(n,e,r,t,o){return{$:-1,a:n,b:e,c:r,d:t,e:o}})),Lo=a((function(n,e,r,t,o){if(-1!==o.$||o.a){if(-1!==t.$||t.a||-1!==t.d.$||t.d.a)return d(To,n,e,r,t,o);var a=t.d;return i=t.e,d(To,0,t.b,t.c,d(To,1,a.b,a.c,a.d,a.e),d(To,1,e,r,i,o))}var i,c=o.b,l=o.c,u=o.d,f=o.e;return-1!==t.$||t.a?d(To,n,c,l,d(To,0,e,r,t,u),f):d(To,0,e,r,d(To,1,t.b,t.c,t.d,i=t.e),d(To,1,c,l,u,f))})),wo=T,Do=t((function(n,e,r){if(-2===r.$)return d(To,0,n,e,Co,Co);var t=r.a,o=r.b,a=r.c,i=r.d,c=r.e;switch(u(wo,n,o)){case 0:return d(Lo,t,o,a,f(Do,n,e,i),c);case 1:return d(To,t,o,e,i,c);default:return d(Lo,t,o,a,i,f(Do,n,e,c))}})),So=t((function(n,e,r){var t=f(Do,n,e,r);return-1!==t.$||t.a?t:d(To,1,t.b,t.c,t.d,t.e)})),No=function(n){return f(Ur,r((function(n,e){return f(So,n.a,n.b,e)})),Po,n)},$o=t((function(n,e,r){for(;;){if(-2===r.$)return e;var t=r.e,o=n,a=f(n,r.b,r.c,f($o,n,e,r.d));n=o,e=a,r=t}})),zo=i((function(n,e,o,a,i,c){var l=f($o,t((function(r,t,a){n:for(;;){var i=a.a,c=a.b;if(i.b){var l=i.a,u=l.a,d=l.b,v=i.b;if(0>y(u,r)){r=r,t=t,a=L(v,f(n,u,d,c));continue n}return y(u,r)>0?L(i,f(o,r,t,c)):L(v,s(e,u,d,t,c))}return L(i,f(o,r,t,c))}})),L(Sr(a),c),i),u=l.a,d=l.b;return f(Ur,r((function(e,r){return f(n,e.a,e.b,r)})),d,u)})),_o=r((function(n,e){return{dv:e,dC:n}})),Ao=t((function(n,e,r){return u(Ut,(function(n){return L(e,n)}),f(Ee,r.a?ke:Be,r.b,(function(r){return u(fo,n,u(_o,e,r))})))})),Ro=r((function(n,e){return f($o,So,e,n)})),Vo=t((function(n,e,r){var a=t((function(e,r,t){var o=t.c;return w(t.a,t.b,u(Tr,f(Ao,n,e,r),o))})),i=t((function(n,e,r){var t=r.b,o=r.c;return w(u(Tr,e,r.a),t,o)})),c=o((function(n,e,r,t){var o=t.c;return w(t.a,f(So,n,e,t.b),o)})),l=u(Wt,yo,e),s=v(zo,i,c,a,r.ea,No(l),w(N,Po,N)),d=s.b,m=s.c;return u(Ht,(function(n){return kt(u(xo,l,u(Ro,d,No(n))))}),u(Ht,(function(){return Yt(m)}),Yt(u(Wt,co,s.a))))})),Fo=t((function(n,e,r){var t=n(e);return t.$?r:u(Tr,t.a,r)})),Bo=r((function(n,e){return f(It,Fo(n),N,e)}));Fn["Browser.Events"]=Bn(Mo,Vo,t((function(n,e,r){var t=e.dC,o=e.dv,a=u(Bo,(function(n){var e=n.b.c;return P(n.a,t)?u(je,e,o):Er}),r.en);return u(Ht,(function(){return kt(r)}),Yt(u(Wt,qt(n),a)))})),0,r((function(n,e){return f(ho,e.a,e.b,u(Tt,n,e.c))})));var ko,Eo,jo,Io,Wo,Ho,Uo,Oo,Yo,qo,Go,Xo,Jo,Qo,Ko,Zo,na,ea,ra,ta,oa,aa,ia,ca,la,ua,fa,sa,da,va,ma,ba,pa,ga,ha,xa,Ca,Pa,Ma,ya,Ta,La,wa,Da,Sa=In("Browser.Events"),Na=t((function(n,e,r){return Sa(f(ho,n,e,r))})),$a=u(Na,0,"click"),za=u(Na,0,"keydown"),_a=u(Na,0,"keyup"),Aa=u(Na,0,"mousedown"),Ra=u(Na,0,"mousemove"),Va=u(Na,0,"mouseup"),Fa=en,Ba=rn,ka=r((function(n,e){return n(e?1:0)})),Ea=function(n){var e=void 0!==Kn.hidden?{e_:"hidden",eI:"visibilitychange"}:void 0!==Kn.mozHidden?{e_:"mozHidden",eI:"mozvisibilitychange"}:void 0!==Kn.msHidden?{e_:"msHidden",eI:"msvisibilitychange"}:void 0!==Kn.webkitHidden?{e_:"webkitHidden",eI:"webkitvisibilitychange"}:{e_:"hidden",eI:"visibilitychange"};return f(Na,0,e.eI,u(Tt,ka(n),u(Pt,"target",u(Pt,e.e_,Ba))))},ja=on,Ia=function(n){return{$:3,b:n}},Wa=Xn("touchCancel",Ia(u(Ct,(function(n){return u(Ct,(function(e){return u(Ct,(function(r){return wt({bi:r,cJ:e,cK:n})}),u(Pt,"identifier",Fa))}),u(Pt,"pageX",Mt))}),u(Pt,"pageY",Mt)))),Ha=Xn("touchEnd",Ia(u(Ct,(function(n){return u(Ct,(function(e){return u(Ct,(function(r){return wt({bi:r,cJ:e,cK:n})}),u(Pt,"identifier",Fa))}),u(Pt,"pageX",Mt))}),u(Pt,"pageY",Mt)))),Ua=Xn("touchMove",Ia(u(Ct,(function(n){return u(Ct,(function(e){return u(Ct,(function(r){return wt({bi:r,cJ:e,cK:n})}),u(Pt,"identifier",Fa))}),u(Pt,"pageX",Mt))}),u(Pt,"pageY",Mt)))),Oa=Xn("touchStart",Ia(u(Ct,(function(n){return u(Ct,(function(e){return u(Ct,(function(r){return wt({bi:r,cJ:e,cK:n})}),u(Pt,"identifier",Fa))}),u(Pt,"pageX",Mt))}),u(Pt,"pageY",Mt)))),Ya=ro(u(Wt,to($t),_([(ko=eo,f(Na,1,"resize",u(Pt,"target",f(Lt,ko,u(Pt,"innerWidth",Fa),u(Pt,"innerHeight",Fa))))),_a(u(Tt,Kt(!1),u(Pt,"key",ja))),za(u(Tt,Kt(!0),u(Pt,"key",ja))),(Da=u(_t,dt(.001),(function(n){return{$:1,a:n}})),go(oo(Da))),Ea(zt),$a(wt({$:6})),Aa(wt(Zt(!0))),Va(wt(Zt(!1))),Ra(f(Lt,no,u(Pt,"pageX",Mt),u(Pt,"pageY",Mt))),Oa((function(n){return{$:8,a:n}})),Ua((function(n){return{$:9,a:n}})),Ha((function(n){return{$:10,a:n}})),Wa((function(n){return{$:11,a:n}}))]))),qa=o((function(n,e,r,t){return{cg:t,aP:r,bC:n,bD:e}})),Ga=Po,Xa={ca:!1,aP:!1,cm:!1,M:Ga,ag:!1,a_:!1,c1:!1,c2:!1,b7:!1},Ja=r((function(n,e){return D(e,{cg:n})})),Qa=r((function(n,e){return D(e,{aP:n})})),Ka=t((function(n,e,r){return D(r,{bC:n,bD:e})})),Za=function(n){if(-1===n.$&&-1===n.d.$&&-1===n.e.$){if(-1!==n.e.d.$||n.e.d.a){var e=n.d,r=n.e;return i=r.b,c=r.c,t=r.d,f=r.e,d(To,1,n.b,n.c,d(To,0,e.b,e.c,e.d,e.e),d(To,0,i,c,t,f))}var t,o=n.d,a=n.e,i=a.b,c=a.c,l=(t=a.d).d,u=t.e,f=a.e;return d(To,0,t.b,t.c,d(To,1,n.b,n.c,d(To,0,o.b,o.c,o.d,o.e),l),d(To,1,i,c,u,f))}return n},ni=function(n){if(-1===n.$&&-1===n.d.$&&-1===n.e.$){if(-1!==n.d.d.$||n.d.d.a){var e=n.d,r=n.e;return u=r.b,f=r.c,s=r.d,v=r.e,d(To,1,t=n.b,o=n.c,d(To,0,e.b,e.c,e.d,c=e.e),d(To,0,u,f,s,v))}var t=n.b,o=n.c,a=n.d,i=a.d,c=a.e,l=n.e,u=l.b,f=l.c,s=l.d,v=l.e;return d(To,0,a.b,a.c,d(To,1,i.b,i.c,i.d,i.e),d(To,1,t,o,c,d(To,0,u,f,s,v)))}return n},ei=c((function(n,e,r,t,o,a,i){if(-1!==a.$||a.a){n:for(;;){if(-1===i.$&&1===i.a){if(-1===i.d.$){if(1===i.d.a)return ni(e);break n}return ni(e)}break n}return e}return d(To,r,a.b,a.c,a.d,d(To,0,t,o,a.e,i))})),ri=function(n){if(-1===n.$&&-1===n.d.$){var e=n.a,r=n.b,t=n.c,o=n.d,a=o.d,i=n.e;if(1===o.a){if(-1!==a.$||a.a){var c=Za(n);if(-1===c.$){var l=c.e;return d(Lo,c.a,c.b,c.c,ri(c.d),l)}return Co}return d(To,e,r,t,ri(o),i)}return d(To,e,r,t,ri(o),i)}return Co},ti=r((function(n,e){if(-2===e.$)return Co;var r=e.a,t=e.b,o=e.c,a=e.d,i=e.e;if(0>y(n,t)){if(-1===a.$&&1===a.a){var c=a.d;if(-1!==c.$||c.a){var l=Za(e);if(-1===l.$){var f=l.e;return d(Lo,l.a,l.b,l.c,u(ti,n,l.d),f)}return Co}return d(To,r,t,o,u(ti,n,a),i)}return d(To,r,t,o,u(ti,n,a),i)}return u(oi,n,m(ei,n,e,r,t,o,a,i))})),oi=r((function(n,e){if(-1===e.$){var r=e.a,t=e.b,o=e.c,a=e.d,i=e.e;if(P(n,t)){var c=function(n){for(;;){if(-1!==n.$||-1!==n.d.$)return n;n=n.d}}(i);return-1===c.$?d(Lo,r,c.b,c.c,a,ri(i)):Co}return d(Lo,r,t,o,a,u(ti,n,i))}return Co})),ai=r((function(n,e){var r=u(ti,n,e);return-1!==r.$||r.a?r:d(To,1,r.b,r.c,r.d,r.e)})),ii=r((function(n,e){return{dk:-e/2,co:e,ag:-n/2,a_:n/2,bx:e/2,db:n}})),ci=r((function(n,e){return f(So,n,0,e)})),li=r((function(n,e){return u(ai,n,e)})),ui=t((function(n,e,r){var t=u(n?ci:li,e,r.M);switch(e){case" ":return D(r,{M:t,c2:n});case"Enter":return D(r,{cm:n,M:t});case"Shift":return D(r,{M:t,c1:n});case"Backspace":return D(r,{ca:n,M:t});case"ArrowUp":return D(r,{M:t,b7:n});case"ArrowDown":return D(r,{aP:n,M:t});case"ArrowLeft":return D(r,{M:t,ag:n});case"ArrowRight":return D(r,{M:t,a_:n});default:return D(r,{M:t})}})),fi=r((function(n,e){switch(n.$){case 1:var r=n.a;return D(e,e.G.cg?{G:u(Ja,!1,e.G),a1:e.a1+r}:{a1:e.a1+r});case 2:var t=n.a.fC;return D(e,{aa:u(ii,t.db,t.co)});case 3:return D(e,{aa:u(ii,n.a,n.b)});case 0:return D(e,{bj:f(ui,n.a,n.b,e.bj)});case 5:return D(e,{G:f(Ka,e.aa.ag+n.a,e.aa.bx-n.b,e.G)});case 6:return D(e,{G:u(Ja,!0,e.G)});case 7:return D(e,{G:u(Qa,n.a,e.G)});case 8:case 9:return D(e,{ab:f(Ur,(function(n){return u(So,n.bi,{bC:e.aa.ag+n.cJ,bD:e.aa.bx-n.cK})}),e.ab,n.a)});case 10:case 11:return D(e,{ab:f(Ur,(function(n){return ai(n.bi)}),e.ab,n.a)});default:return D(e,{bj:Xa,G:s(qa,e.G.bC,e.G.bD,!1,!1)})}})),si=r((function(n,e){return{P:e,U:n}})),di=f(Lt,r((function(n,e){return L(n,e)})),u(Pt,"A1",ja),u(Pt,"A2",ja)),vi=sn,mi=s(vi,t((function(n,e,r){return w(n,e,r)})),u(Pt,"A1",Mt),u(Pt,"A2",Mt),u(Pt,"A3",Mt)),bi=f(Lt,r((function(n,e){return L(n,e)})),u(Pt,"A1",ja),u(Pt,"A2",mi)),pi=f(Lt,si,u(Pt,"floats",Ia(bi)),u(Pt,"colors",Ia(di))),gi=dn,hi=r((function(n,e){return e.$?Er:n(e.a)})),xi=r((function(n,e){return e.$?_r(e.a):n(e.a)})),Ci=o((function(n,e,r,t){return{e0:e,e8:n,fe:r,fr:t}})),Pi=We,Mi=r((function(n,e){return e.$?_r(n):Fr(e.a)})),yi=Ie,Ti=function(n){return n.b?kr(n.a):Er},Li=r((function(n,e){return e.$?Er:kr(n(e.a))})),wi=r((function(n,e){return e.$?_r(e.a):Fr(n(e.a))})),Di=r((function(n,e){return Jr(e)-Jr(n)})),Si=t((function(n,e,r){var t=Jr(r);return 1>y(Jr(n),t)&&1>y(t,Jr(e))})),Ni=r((function(n,e){var r=f(Si,"0","9",e)?Fr(u(Di,"0",e)):f(Si,"a","z",e)?Fr(10+u(Di,"a",e)):f(Si,"A","Z",e)?Fr(10+u(Di,"A",e)):_r({$:0,a:e});return u(xi,(function(r){return 0>y(r,n)?Fr(r):_r({$:1,a:e})}),r)})),$i=r((function(n,e){var r=Kr(e);if(1===r.$)return Fr(0);var t=r.a,o=t.b;return u(xi,(function(e){return u(xi,(function(r){return Fr(e+r*n)}),u($i,n,o))}),u(Ni,n,t.a))})),zi=function(n){for(var e=n.length,r=Array(e),t=0;e>t;){var o=n.charCodeAt(t);55296>o||o>56319?(r[e-t]=n[t],t++):(r[e-t]=n[t+1],r[e-++t]=n[t-1],t++)}return r.join("")},_i=r((function(n,e){return 2>n||n>36?_r({$:2,a:n}):u($i,n,zi(e))})),Ai=_i(16),Ri=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),Vi=t((function(n,e,r){return s(Ri,n,e,r,1)})),Fi=o((function(n,e,r,t){return s(Ri,n,e,r,t)})),Bi=F,ki=H,Ei=r((function(n,e){var r=u(Bi,10,n);return ki(e*r)/r})),ji=G,Ii=function(n){return f(ji,Tr,N,n)},Wi=(Eo=function(n){var e=Ii(n);if(e.b&&!e.b.b){var r=e.a;return A(_([r,r])).join("")}return n},u(_t,(function(n){return n.toLowerCase()}),u(_t,(function(n){return u(Li,(function(e){return f(Pi,1,e,n)}),u(yi,{eF:!1,fa:!1},"^#?(?:(?:([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2}))|(?:([a-f\\d])([a-f\\d])([a-f\\d]))|(?:([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2}))|(?:([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d])))$"))}),u(_t,hi(Ti),u(_t,Li((function(n){return n.fr})),u(_t,Li(Bo(At)),u(_t,Mi("Parsing hex regex failed"),xi((function(n){var e=u(Wt,u(_t,Eo,u(_t,Ai,wi(ot))),n);n:for(;;){if(e.b&&!e.a.$&&e.b.b&&!e.b.a.$&&e.b.b.b&&!e.b.b.a.$){if(e.b.b.b.b){if(e.b.b.b.a.$||e.b.b.b.b.b)break n;var r=e.b,t=r.b;return Fr(s(Fi,e.a.a/255,r.a.a/255,t.a.a/255,u(Ei,2,t.b.a.a/255)))}var o=e.b;return Fr(f(Vi,e.a.a/255,o.a.a/255,o.b.a.a/255))}break n}return _r("Parsing ints from hex failed")}))))))))),Hi=r((function(n,e){return L(e.a,n(e.b))})),Ui=s(Ri,1,1,1,1),Oi=r((function(n,e){return e.$?n:e.a})),Yi=u(_t,gi(pi),u(_t,wi((function(n){return{P:u(Wt,Hi(u(_t,Wi,Oi(Ui))),n.P),aD:"",U:n.U,aq:""}})),Oi(yt))),qi=function(n){return f(Ur,r((function(n,e){return f(yn,n.a,n.b,e)})),{},n)},Gi=Mn,Xi=function(n){var e=n.b;return qi(_([L("A1",Gi(n.a)),L("A2",Gi(e))]))},Ji=Mn,Qi=function(n){var e=n.b,r=n.c;return qi(_([L("A1",Ji(n.a)),L("A2",Ji(e)),L("A3",Ji(r))]))},Ki=function(n){var e=n.b;return qi(_([L("A1",Gi(n.a)),L("A2",Qi(e))]))},Zi=r((function(n,e){return f(Ur,function(n){return r((function(e,r){return r.push(n(e)),r}))}(n),[],e)})),nc=q,ec=function(n){return u(nc,n,"")},rc=t((function(n,e,r){return n>0?f(rc,n>>1,S(e,e),1&n?S(r,e):r):r})),tc=r((function(n,e){return f(rc,n,e,"")})),oc=t((function(n,e,r){return S(u(tc,n-Rt(r),ec(e)),r)})),ac=function(n){return 0>n||n>1114111?"�":n>65535?String.fromCharCode(Math.floor((n-=65536)/1024)+55296,n%1024+56320):String.fromCharCode(n)},ic=B,cc=function(n){var e=function(n){return 10>n?Ir(n):ec(ac(87+n))};return 16>n?e(n):S(cc(n/16|0),e(u(ic,16,n)))},lc=u(_t,cc,u(oc,2,"0")),uc=function(n){return{aO:n.d,ce:n.c,cn:n.b,cW:n.a}},fc=function(n){var e=uc(n),r=e.cW,t=e.cn,o=e.ce;return u(Wr,"",u(Tr,"#",u(Wt,u(_t,ki,lc),_([255*r,255*t,255*o]))))},sc=u(_t,(function(n){return{P:u(Wt,Hi(fc),n.P),U:n.U}}),u(_t,(function(n){return qi(_([L("floats",u(Zi,Ki,n.U)),L("colors",u(Zi,Xi,n.P))]))}),jr(0))),dc=function(n){return 0>n?-n:n},vc=function(n){if(0===n.length||/[\sxbo]/.test(n))return Er;var e=+n;return e==e?kr(e):Er},mc=r((function(n,e){return e.$?n:e.a})),bc=t((function(n,e,r){return u(mc,NaN,vc(u(n,e,r)))})),pc=function(n){return!n},gc=r((function(n,e){for(;;){if(!e.b)return!1;var r=e.b;if(n(e.a))return!0;n=n,e=r}})),hc=r((function(n,e){var r=u(gc,(function(n){return"0"!==n&&"."!==n}),Ii(e));return S(n&&r?"-":"",e)})),xc=Z,Cc=function(n){var e=n.a,r=n.b;if("9"===e){var t=Kr(r);return 1===t.$?"01":u(nc,"0",Cc(t.a))}var o=Jr(e);return o>=48&&57>o?u(nc,ac(o+1),r):"0"},Pc=function(n){return n===1/0||n===-1/0},Mc=Y,yc=t((function(n,e,r){return S(r,u(tc,n-Rt(r),ec(e)))})),Tc=function(n){var e=u(Hr,".",n);return e.b?L(e.a,e.b.b?e.b.a:"0"):L("0","0")},Lc=r((function(n,e){var r=e.b;return L(n(e.a),r)})),wc=t((function(n,e,r){if(Pc(r)||Mc(r))return xc(r);var t=0>r,o=Tc(function(n){var e=u(Hr,"e",xc(dc(n)));if(e.b){if(e.b.b){var r=e.a,t=e.b.a,o=u(mc,0,function(n){for(var e=0,r=n.charCodeAt(0),t=43==r||45==r?1:0,o=t;n.length>o;++o){var a=n.charCodeAt(o);if(48>a||a>57)return Er;e=10*e+a-48}return o==t?Er:kr(45==r?-e:e)}(u(Bt,"+",t)?u(Ft,1,t):t)),a=Tc(r),i=S(a.a,a.b),c=0>o?u(mc,"0",u(Li,(function(n){return n.a+"."+n.b}),u(Li,Lc(ec),Kr(S(u(tc,dc(o),"0"),i))))):f(yc,o+1,"0",i);return S(0>n?"-":"",c)}return S(0>n?"-":"",r=e.a)}return""}(dc(r))),a=o.a,i=o.b,c=Rt(a)+e,l=S(u(tc,1-c,"0"),f(yc,c,"0",S(a,i))),s=Rt(l),d=u(st,1,c),v=u(n,t,f(Vt,d,s,l)),m=f(Vt,0,d,l),b=v?zi(u(mc,"1",u(Li,Cc,Kr(zi(m))))):m,p=Rt(b),g="0"===b?b:e>0?0>y(e,Rt(i))?f(Vt,0,p-e,b)+"."+f(Vt,p-e,p,b):S(a+".",f(yc,e,"0",i)):S(b,u(tc,dc(e),"0"));return u(hc,t,g)})),Dc=wc(r((function(n,e){var r,t=Kr(e);return 1!==t.$&&("5"===t.a.a?""!==t.a.b||!n:(r=Jr(t.a.a))>53&&n||r>=53&&!n)}))),Sc=bc(Dc),Nc=t((function(n,e,r){var t=u(tt,10,dc(e-n));return u(Sc,0>t?3:1>t?2:2>t?1:0,r)})),$c=r((function(n,e){switch(n.$){case 2:var r=Yi(e.aq);return D(r,{aD:r.aD,aq:r.aq});case 3:return D(e,{aq:n.a});case 4:return D(e,{aD:sc(e)});case 0:var t=n.a,o=n.b;return D(e,{U:u(Wt,(function(n){var e=n.a,r=n.b,a=r.a,i=r.c;return P(e,t)?L(e,w(a,f(Nc,a,i,o),i)):n}),e.U)});default:return t=n.a,o=n.b,D(e,{P:u(Wt,(function(n){var e=n.a;return P(e,t)?L(e,o):n}),e.P)})}})),zc=o((function(n,e,r,t){var o=t.F;switch(r.$){case 0:return t;case 1:return D(t,{a5:r.a});case 2:return D(t,{bc:!1});case 3:return D(t,{bc:!0});case 4:return D(t,{af:f(e,t.F,r.a,t.af)});case 5:return D(t,{F:D(o,{bN:u($c,r.a,o.bN)})});default:var a=r.a,i=1===a.$?u(n,o,t.af):t.af;return D(t,{F:u(fi,a,t.F),af:i})}})),_c=(wa=function(){return{ek:(n=Be.body,e=Be.documentElement,{db:Math.max(n.scrollWidth,n.offsetWidth,e.scrollWidth,e.offsetWidth,e.clientWidth),co:Math.max(n.scrollHeight,n.offsetHeight,e.scrollHeight,e.offsetHeight,e.clientHeight)}),fC:{bC:ke.pageXOffset,bD:ke.pageYOffset,db:Be.documentElement.clientWidth,co:Be.documentElement.clientHeight}};var n,e},Ln((function(n){Ve((function(){n(Tn(wa()))}))}))),Ac=r((function(n,e){return{bN:e,ck:n.ck,bj:Xa,G:s(qa,0,0,!1,!1),aa:u(ii,600,600),a1:0,ab:Po}})),Rc=Wn,Vc=Rc(N),Fc=function(n){return{$:5,a:n}},Bc=function(n){return{$:4,a:n}},kc={$:2},Ec={$:0},jc=function(n){return{$:1,a:n}},Ic={$:3},Wc=r((function(n){return n})),Hc=re("button"),Uc=function(n){return n?"Level Editor":"Configurations"},Oc=function(n){return u(mc,0,Ti(u(Bo,(function(e){return P(Uc(e),n)?kr(e):Er}),_([0,1]))))},Yc=oe,qc=Yc,Gc=ae,Xc=r((function(n,e){return u(Gc,n,{$:0,a:e})})),Jc=r((function(n,e){return f(It,Pt,e,n)})),Qc=u(Jc,_(["target","value"]),ja),Kc=function(n){return u(Xc,"click",wt(n))},Zc=re("option"),nl=re("select"),el=ie,rl=el,tl=ne,ol=tl,al=r((function(n,e){return u(ce,n,Gi(e))})),il=al("value"),cl=r((function(n,e){return{$:1,a:n,b:e}})),ll=r((function(n,e){return{$:0,a:n,b:e}})),ul=s(Ri,0,0,0,1),fl=u(Hc,_([u(rl,"cursor","pointer"),Kc({$:4})]),_([ol("Export Configurations as json")])),sl=re("h3"),dl=re("p"),vl=Mn,ml=r((function(n,e){return u(ce,n,vl(e))})),bl=ml("readOnly"),pl=re("textarea"),gl=function(n){return u(St,N,_([u(pl,_([bl(!0)]),_([ol(n.aD)]))]))},hl=function(n){return u(St,N,_([u(sl,N,_([ol("Export Configurations")])),u(dl,N,_([fl])),u(dl,N,_([gl(n)]))]))},xl=al("htmlFor"),Cl=re("hr"),Pl=al("id"),Ml=u(Hc,_([u(rl,"cursor","pointer"),Kc({$:2})]),_([ol("Import Configurations")])),yl=function(n){return{$:3,a:n}},Tl=function(n){return L(n,!0)},Ll=r((function(n,e){return u(Gc,n,{$:1,a:e})})),wl=function(n){return u(Ll,"input",u(Tt,Tl,u(Tt,n,Qc)))},Dl=function(n){return u(St,N,_([u(pl,_([wl(yl)]),_([ol(n.aq)]))]))},Sl=function(n){return u(St,N,_([u(sl,N,_([ol("Import Configurations")])),u(dl,N,_([Dl(n)])),u(dl,N,_([Ml]))]))},Nl=re("input"),$l=re("label"),zl=al("max"),_l=al("min"),Al=al("name"),Rl=re("span"),Vl=al("type"),Fl=t((function(n,e,t){var o,a,i,c,l=u(St,_([u(rl,"position","fixed"),u(rl,"top","0px"),u(rl,"left","0px"),u(rl,"width",xc(t.F.aa.db)+"px"),u(rl,"height",xc(t.F.aa.co)+"px"),u(rl,"font-size","16px")]),_([u(qc,Wc(Ec),u(n,t.F,t.af))])),f=t.a5?u(qc,Bc,u(e,t.F,t.af)):u(qc,Fc,(o=t.F.bN,a=function(n){var e=n.a,r=n.b,t=r.a,o=r.b,a=r.c;return u(St,_([u(rl,"margin-top","15px")]),_([u(St,N,_([u($l,_([xl(e)]),_([ol(e),ol(": "),u(Rl,_([u(rl,"font-family","monospace"),u(rl,"font-weight","bold")]),_([ol(xc(o))]))]))])),u(Nl,_([Vl("range"),Pl(e),Al(e),_l(xc(t)),zl(xc(a)),wl((function(n){return u(ll,e,u(mc,0,vc(n)))})),u(al,"step","any"),u(rl,"width","200px"),il(xc(o))]),N)]))},i=function(n){var e=n.a,r=n.b;return u(St,_([u(rl,"margin-top","15px")]),_([u(St,N,_([u($l,_([xl(e)]),_([ol(e)]))])),u(Nl,_([Vl("color"),u(rl,"width","200px"),u(rl,"height","30px"),Pl(e),Al(e),wl((function(n){return u(cl,e,u(Oi,ul,Wi(n)))})),il(fc(r))]),N)]))},u(St,_([u(rl,"margin-left","20px"),u(rl,"height","100%"),u(rl,"overflow","scroll")]),_([u(St,N,u(Wt,a,o.U)),u(St,N,u(Wt,i,o.P)),u(Cl,N,N),hl(o),Sl(o)])))),s=u(St,_([u(rl,"margin-left","0px")]),_([u(nl,_([(c=u(_t,Oc,jc),u(Xc,"change",u(Tt,c,Qc))),il(Uc(t.a5)),u(rl,"width","200px"),u(rl,"height","40px"),u(rl,"font-size","20px")]),u(Wt,(function(n){return u(Zc,_([il(Uc(n))]),_([ol(Uc(n))]))}),_([0,1])))])),d=r((function(n,e){return u(Hc,_([u(rl,"font-size","30px"),u(rl,"width","40px"),u(rl,"height","40px"),Kc(n)]),_([ol(e)]))})),v=u(St,_([u(rl,"position","fixed"),u(rl,"top","0px"),u(rl,"left","0px"),u(rl,"width",xc(250)+"px"),u(rl,"height",xc(t.F.aa.co)+"px"),u(rl,"font-family",'-apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif'),u(rl,"font-size","16px")]),_(t.bc?[u(St,_([u(rl,"height","100px")]),_([u(d,kc,"✕"),s])),u(St,_([u(rl,"height",xc(t.F.aa.co-100)+"px")]),_([f]))]:[u(d,Ic,"≡")]));return u(St,_([u(rl,"touch-action","none"),u(rl,"user-select","none")]),_([l,v]))})),Bl=i((function(n,e,t,o,a,i){return Qt({e1:function(n){var e=u(Ac,n,t);return L({a5:0,F:e,bc:!1,af:o(e),da:0},u(Jt,u(_t,Nt,$t),_c))},fs:function(n){return 1===n.da?u(to,$t,Ea(zt)):Ya},fz:r((function(n,r){return L(s(zc,e,i,n,r),Vc)})),fB:u(Fl,n,a)})})),kl=o((function(n,e,o,a){return v(Bl,n,e,o,a,r((function(){return u(St,N,N)})),t((function(n,e,r){return r})))})),El=t((function(n,e,r){return s(kl,n,e,yt,r)})),jl=r((function(n,e){return e})),Il=3.141592653589793,Wl=function(n){return Il*(n/180)},Hl=U,Ul=r((function(n,e){var r=e.df-n.df,t=e.bD-n.bD,o=e.bC-n.bC,a=u(st,dc(o),u(st,dc(t),dc(r)));if(a){var i=r/a,c=t/a,l=o/a,f=Hl(l*l+c*c+i*i);return kr({bC:l/f,bD:c/f,df:i/f})}return Er})),Ol=r((function(n,e){return{bC:e.bD*n.df-e.df*n.bD,bD:e.df*n.bC-e.bC*n.df,df:e.bC*n.bD-e.bD*n.bC}})),Yl=function(n){var e=n,r=u(st,dc(e.bC),u(st,dc(e.bD),dc(e.df)));if(r){var t=e.df/r,o=e.bD/r,a=e.bC/r,i=Hl(a*a+o*o+t*t);return kr({bC:a/i,bD:o/i,df:t/i})}return Er},ql=r((function(n,e){return{bC:e.bC-n.bC,bD:e.bD-n.bD,df:e.df-n.df}})),Gl=r((function(n,e){return e.bC*n.bC+e.bD*n.bD+e.df*n.df})),Xl=r((function(n,e){return y(e,n)>0})),Jl=r((function(n,e){return 0>y(e,n)})),Ql=r((function(n,e){return{bC:e.bC-n.bC,bD:e.bD-n.bD,df:e.df-n.df}})),Kl=r((function(n,e){var r=e.bC*n.bC+e.bD*n.bD+e.df*n.df;return{bC:n.bC*r,bD:n.bD*r,df:n.df*r}})),Zl={bC:0,bD:0,df:0},nu=t((function(n,e,r){return u(hi,(function(t){return u(hi,(function(o){var a,i=u(Ol,e,n),c=u(Gl,r,i),l=u(Xl,0,c)?i:u(Jl,0,c)?{bC:-(a=i).bC,bD:-a.bD,df:-a.df}:Zl;return u(Li,(function(n){return w(t,o,n)}),Yl(l))}),Yl(u(Ql,u(Kl,t,e),e)))}),Yl(n))})),eu=function(n){var e=function(n){var e=n,r=dc(e.df),t=dc(e.bD),o=dc(e.bC);if(1>y(o,t)){if(1>y(o,r)){var a=Hl(e.df*e.df+e.bD*e.bD);return{bC:0,bD:-e.df/a,df:e.bD/a}}return a=Hl(e.bD*e.bD+e.bC*e.bC),{bC:-e.bD/a,bD:e.bC/a,df:0}}return 1>y(t,r)?(a=Hl(e.df*e.df+e.bC*e.bC),{bC:e.df/a,bD:0,df:-e.bC/a}):(a=Hl(e.bC*e.bC+e.bD*e.bD),{bC:-e.bD/a,bD:e.bC/a,df:0})}(n);return L(e,{bC:n.bD*e.df-n.df*e.bD,bD:n.df*e.bC-n.bC*e.df,df:n.bC*e.bD-n.bD*e.bC})},ru=r((function(n,e){var r=eu(n);return{cI:e,dd:r.a,de:r.b,dg:n}})),tu={bC:0,bD:0,df:0},ou=function(n){return dc(n)},au=function(n){return.5*n},iu=j,cu={bC:0,bD:1,df:0},lu=(jo={eR:{bC:0,bD:10,df:30},eU:{bC:0,bD:10,df:0},fy:{bC:0,bD:1,df:0}},Io=jo.eU,Wo=jo.eR,Ho=jo.fy,ya={et:Wl(40),c9:function(n){var e=u(ql,n.eU,n.eR),r=n.fy,t=f(nu,e,r,u(Ol,e,r));if(t.$){var o=Yl(e);if(o.$){var a=eu(n.fy);return{cI:n.eR,dd:a.b,de:n.fy,dg:a.a}}return u(ru,o.a,n.eR)}var i=t.a;return{cI:n.eR,dd:i.c,de:i.b,dg:i.a}}({eR:Wo,eU:Io,fy:u(mc,cu,u(Ul,tu,Ho))})},La=au(ou(ya.et)),{cV:(Ta=iu(La),{$:0,a:Ta}),c9:ya.c9}),uu=s(Ri,114/255,159/255,207/255,1),fu=s(Ri,52/255,101/255,164/255,1),su=s(Ri,115/255,210/255,22/255,1),du=function(n){return{$:5,a:n}},vu=function(n){return du(n)},mu=r((function(n,e){return{$:4,a:n,b:e}})),bu=r((function(n,e){return{bC:e.bC+n.bC,bD:e.bD+n.bD,df:e.df+n.df}})),pu=r((function(n,e){return L(n,u(bu,e,n))})),gu=t((function(n,e,r){return{bC:n,bD:e,df:r}})),hu=r((function(n,e){var r=e.b,t=e.c;return f(gu,n(e.a),n(r),n(t))})),xu=function(n){return n},Cu=r((function(n,e){return u(mu,n,u(pu,tu,u(hu,xu,e)))})),Pu=s(Ri,.8,0,0,1),Mu=vu(_([u(Cu,Pu,w(100,0,0)),u(Cu,su,w(0,100,0)),u(Cu,fu,w(0,0,100))])),yu=r((function(n,e){return{$:0,a:n,b:e}})),Tu=r((function(n,e){return y(e,n)>-1})),Lu=r((function(n,e){return n+.5*(e-n)})),wu=r((function(n,e){return e-n})),Du={bC:-1,bD:0,df:0},Su={bC:0,bD:-1,df:0},Nu={bC:0,bD:0,df:-1},$u={bC:1,bD:0,df:0},zu={bC:0,bD:0,df:1},_u=t((function(n,e,r){return{bC:n,bD:e,df:r}})),Au=i((function(n,e,r,t,o,a){var i=u(Tu,r,a)?zu:Nu,c=u(Tu,e,o)?cu:Su,l=u(Tu,n,t)?$u:Du,s=w(ou(u(wu,n,t)),ou(u(wu,e,o)),ou(u(wu,r,a)));return{eA:{cI:f(_u,u(Lu,n,t),u(Lu,e,o),u(Lu,r,a)),dd:l,de:c,dg:i},dq:s}})),Ru=function(n){return n.bC},Vu=function(n){return n.bD},Fu=function(n){return n.df},Bu=r((function(n,e){return v(Au,Ru(n),Vu(n),Fu(n),Ru(e),Vu(e),Fu(e))})),ku=t((function(n,e,r){return{bC:n,bD:e,df:r}})),Eu=r((function(n,e){var r=w(e.a/2,e.b/2,e.c/2),t=r.a,o=r.b,a=r.c;return u(yu,n,u(Bu,f(ku,-t,-o,-a),f(ku,t,o,a)))})),ju=o((function(n,e,r,t){var o=w(n,e,r),a=o.a,i=o.b,c=o.c,l=c>.5?c+i-c*i:c*(i+1),u=2*c-l,f=function(n){var e=0>n?n+1:n>1?n-1:n;return 1>6*e?u+(l-u)*e*6:1>2*e?l:2>3*e?u+(l-u)*(2/3-e)*6:u},d=f(a-1/3),v=f(a),m=f(a+1/3);return s(Ri,m,v,d,t)})),Iu=t((function(n,e,r){return s(ju,n,e,r,1)})),Wu=r((function(n,e){return{$:2,a:n,b:e}})),Hu=r((function(n,e){return{$:3,a:n,b:e}})),Uu=r((function(n,e){return{$:1,a:n,b:e}})),Ou=t((function(n,e,r){return{bC:n,bD:e,df:r}})),Yu=function(n){return n.eA},qu=function(n){return n.dq},Gu=function(n){return n.cI},Xu=function(n){return n.dd},Ju=function(n){return n.de},Qu=function(n){return n.dg},Ku=r((function(n,e){return{cI:u(bu,n,Gu(e)),dd:Xu(e),de:Ju(e),dg:Qu(e)}})),Zu=r((function(n,e){return{eA:u(Ku,n,Yu(e)),dq:qu(e)}})),nf=r((function(n,e){return{eL:e,cI:n}})),ef=r((function(n,e){var r=e;return u(nf,u(bu,n,r.cI),r.eL)})),rf=r((function(n,e){var r=e;return{k:u(ef,n,r.k),e5:r.e5,fj:r.fj}})),tf=r((function(n,e){var r=e.b;return L(n(e.a),n(r))})),of=r((function(n,e){return u(tf,bu(n),e)})),af=function(n){return n.eH},cf=function(n){return n.fj},lf=r((function(n,e){return{eH:e,fj:ou(n)}})),uf=r((function(n,e){return u(lf,cf(e),u(bu,n,af(e)))})),ff=r((function(n,e){var r=e.b,t=e.c;return w(n(e.a),n(r),n(t))})),sf=r((function(n,e){return u(ff,bu(n),e)})),df=r((function(n,e){var r=n.a,t=n.b,o=n.c,a=f(Ou,r,t,o);switch(e.$){case 0:return u(yu,e.a,u(Zu,a,e.b));case 1:return u(Uu,e.a,u(sf,a,e.b));case 3:return u(Hu,e.a,u(uf,a,e.b));case 2:return u(Wu,e.a,u(rf,a,e.b));case 4:return u(mu,e.a,u(of,a,e.b));default:var i=e.a;return du(u(Wt,df(w(r,t,o)),i))}})),vf=function(n){return df(w(0,n,0))},mf=k,bf=E,pf=t((function(n,e,r){var t=n,o=r,a=.5*e,i=mf(a),c=bf(a),l=t.eL,u=l.bC*c,f=i*u,s=u*u,d=l.bD*c,v=i*d,m=u*d,b=d*d,p=l.df*c,g=i*p,h=u*p,x=d*p,C=p*p;return{bC:(1-2*(b+C))*o.bC+2*(m-g)*o.bD+2*(h+v)*o.df,bD:2*(m+g)*o.bC+(1-2*(s+C))*o.bD+2*(x-f)*o.df,df:2*(h-v)*o.bC+2*(x+f)*o.bD+(1-2*(s+b))*o.df}})),gf=t((function(n,e,r){var t=n,o=r,a=.5*e,i=mf(a),c=bf(a),l=t.cI,u=o.bC-l.bC,f=o.bD-l.bD,s=o.df-l.df,d=t.eL,v=d.bC*c,m=i*v,b=v*v,p=d.bD*c,g=i*p,h=v*p,x=p*p,C=d.df*c,P=i*C,M=v*C,y=p*C,T=C*C;return{bC:l.bC+(1-2*(x+T))*u+2*(h-P)*f+2*(M+g)*s,bD:l.bD+2*(h+P)*u+(1-2*(b+T))*f+2*(y-m)*s,df:l.df+2*(M-g)*u+2*(y+m)*f+(1-2*(b+x))*s}})),hf=t((function(n,e,r){return{cI:f(gf,n,e,Gu(r)),dd:f(pf,n,e,Xu(r)),de:f(pf,n,e,Ju(r)),dg:f(pf,n,e,Qu(r))}})),xf=t((function(n,e,r){return{eA:f(hf,n,e,Yu(r)),dq:qu(r)}})),Cf=r((function(n,e){var r=u(gf,n,e),t=u(pf,n,e);return function(n){var e=n;return u(nf,r(e.cI),t(e.eL))}})),Pf=t((function(n,e,r){var t=r;return{k:f(Cf,n,e,t.k),e5:t.e5,fj:t.fj}})),Mf=t((function(n,e,r){return u(tf,u(gf,n,e),r)})),yf=t((function(n,e,r){return u(lf,cf(r),f(gf,n,e,af(r)))})),Tf=t((function(n,e,r){return u(ff,u(gf,n,e),r)})),Lf=t((function(n,e,r){switch(r.$){case 0:return u(yu,r.a,f(xf,n,e,r.b));case 1:return u(Uu,r.a,f(Tf,n,e,r.b));case 3:return u(Hu,r.a,f(yf,n,e,r.b));case 2:return u(Wu,r.a,f(Pf,n,e,r.b));case 4:return u(mu,r.a,f(Mf,n,e,r.b));default:var t=r.a;return du(u(Wt,u(Lf,n,e),t))}})),wf=cu,Df=u(nf,tu,wf),Sf=r((function(n,e){return f(Lf,Df,n,e)})),Nf=r((function(n,e){return(e-ut(e/n)*n)/n})),$f=r((function(n,e){return 360*u(Nf,n,e)})),zf=o((function(n,e,r,t){return n+(e-n)*(1+mf(6.283185307179586*u(Nf,r,t)))/2})),_f=r((function(n,e){var r=s(zf,.2,.8,10,n.a1);return u(Sf,u($f,1e3,n.a1),u(Sf,.1*e,u(vf,1.1*e,u(Eu,f(Iu,r,.5,.5),w(e,1,e)))))})),Af=function(n){return vu(u(Wt,_f(n),u(Gr,1,18)))},Rf=t((function(n,e,r){return{k:u(nf,n,e),e5:ou(r.e5),fj:ou(r.fj)}})),Vf=t((function(n,e,r){return u(Wu,n,f(Rf,tu,cu,{e5:r,fj:e}))})),Ff=u(vf,-1.001,f(Vf,f(Vi,.294,.588,.478),30,1)),Bf=r((function(n){return _([Mu,Ff,Af(n)])})),kf=function(n){return{$:0,a:n}},Ef={$:3},jf=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),If=jf,Wf=r((function(n,e){return e.b?f(It,Tr,e,n):n})),Hf=function(n){return f(It,Wf,N,n)},Uf=r((function(n,e){return Hf(u(Wt,n,e))})),Of=function(n){return{$:1,a:n}},Yf=function(n){return u(le,"height",Ir(n))},qf=function(n){return te(function(n){return"script"==n?"p":n}(n))},Gf=function(n){return{$:2,a:n}},Xf=r((function(n,e){switch(e.$){case 0:return u(dr,n,e);case 1:return u(vr,n,e);case 2:return u(mr,n,e);case 3:return u(br,n,e);case 4:return u(pr,n,e);default:return u(gr,n,e)}})),Jf=r((function(n,e){switch(e.$){case 0:return u(Ge,n,e);case 1:return u(Xe,n,e);case 2:return u(Je,n,e);case 3:return u(Qe,n,e);case 4:return u(Ke,n,e);case 5:return u(Ze,n,e);case 6:return u(nr,n,e);case 7:return u(er,n,e);default:return function(n){var e=n.sampleAlphaToCoverage;e.toggle=n.toggle,e.enabled||(n.gl.enable(n.gl.SAMPLE_ALPHA_TO_COVERAGE),e.enabled=!0)}(n)}})),Qf=t((function(n,e,r){return f(sr,n,e,r)})),Kf=yr,Zf=s(Kf,1,1,1,1),ns=t((function(n,e,r){return u(Wt,(function(n){return u(n,e,r)}),n)})),es=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),rs=r((function(n,e){var r=e.bC,t=e.bD;return f(es,n*r/t,n,n*(1-r-t)/t)})),ts=Pr,os=r((function(n,e){return function(n){var e=n.a,r=n.b,t=n.c;return f(ts,3.2406*e-1.5372*r-.4986*t,-.9689*e+1.8758*r+.0415*t,.0557*e-.204*r+1.057*t)}(u(rs,n,e))})),as=r((function(n,e){return{dB:P(n.dB,e.dB),q:n.q*e.q+n.r*e.t+n.s*e.w,r:n.q*e.r+n.r*e.u+n.s*e.x,s:n.q*e.s+n.r*e.v+n.s*e.y,t:n.t*e.q+n.u*e.t+n.v*e.w,u:n.t*e.r+n.u*e.u+n.v*e.x,v:n.t*e.s+n.u*e.v+n.v*e.y,w:n.w*e.q+n.x*e.t+n.y*e.w,x:n.w*e.r+n.x*e.u+n.y*e.x,y:n.w*e.s+n.x*e.v+n.y*e.y,H:e.H+(n.H*e.q+n.I*e.t+n.J*e.w)*e.b5,I:e.I+(n.H*e.r+n.I*e.u+n.J*e.x)*e.b5,J:e.J+(n.H*e.s+n.I*e.v+n.J*e.y)*e.b5,b5:n.b5*e.b5}})),is=function(n){var e=new Float64Array(16);return e[0]=n.dJ,e[1]=n.dN,e[2]=n.dR,e[3]=n.dV,e[4]=n.dK,e[5]=n.dO,e[6]=n.dS,e[7]=n.dW,e[8]=n.dL,e[9]=n.dP,e[10]=n.dT,e[11]=n.dX,e[12]=n.dM,e[13]=n.dQ,e[14]=n.dU,e[15]=n.dY,e},cs=a((function(n,e,r,t,o){return v(o,n,s(Kf,t.b5,t.b5,t.b5,t.dB?1:-1),function(n){return is({dJ:n.q,dK:n.t,dL:n.w,dM:n.H,dN:n.r,dO:n.u,dP:n.x,dQ:n.I,dR:n.s,dS:n.v,dT:n.y,dU:n.J,dV:0,dW:0,dX:0,dY:1})}(t),t.dB,e,r)})),ls=i((function(n,e,r,t,o,a){n:for(;;)switch(o.$){case 0:return a;case 5:var i=o.b;n=n,e=e,r=r,t=u(as,o.a,t),o=i,a=a;continue n;case 1:return{N:u(Tr,d(cs,n,e,r,t,o.b),a.N),W:a.W,fn:a.fn};case 3:return{N:a.N,W:u(Tr,d(cs,n,e,r,t,o.b),a.W),fn:a.fn};case 2:return{N:a.N,W:a.W,fn:u(Tr,d(cs,n,e,r,t,o.a),a.fn)};default:var c=o.a;return f(Ur,s(ls,n,e,r,t),a,c)}})),us=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),fs=us,ss=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),ds=r((function(n,e){return{$:6,a:n,b:e}})),vs=ds,ms=_([s(ss,518,!1,0,1),s(fs,!1,!1,!1,!1),u(vs,0,1)]),bs=519,ps=7681,gs={src:"\n        precision lowp float;\n\n        void main() {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        }\n    ",attributes:{},uniforms:{}},hs=qe,xs=r((function(n,e){return{$:0,a:n,b:e}})),Cs=xs({dr:1,dA:0,d5:5}),Ps=Cr,Ms=Cs(_([{b1:u(Ps,-1,-1)},{b1:u(Ps,1,-1)},{b1:u(Ps,-1,1)},{b1:u(Ps,1,1)}])),ys={src:"\n        precision lowp float;\n\n        attribute vec2 position;\n\n        void main() {\n            gl_Position = vec4(position, 0.0, 1.0);\n        }\n    ",attributes:{position:"b1"},uniforms:{}},Ts=function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return function(f){return{$:2,a:n,b:e,c:r,d:t,e:o,f:a,g:i,h:c,i:l,j:u,k:f}}}}}}}}}}}},Ls=t((function(n,e,t){var o=n.cX,a=n.cz,i=n.dc,c=r((function(n,e){return e(n)})),l=r((function(n,e){return e(n)})),s=function(n){return u(_t,c(n.bt),u(_t,l(n.be),u(_t,l(n.bE),l(n.bF))))};return u(s,t,u(s,e,f(Ts,o,a,i)))})),ws=function(n){return f(Ls,{cz:n.cz,cX:n.cX,dc:n.dc},{be:n.be,bt:n.bt,bE:n.bE,bF:n.bF},{be:n.be,bt:n.bt,bE:n.bE,bF:n.bF})},Ds=function(n){return d(hs,_([ws(n),s(fs,!1,!1,!1,!1)]),ys,gs,Ms,{})},Ss=Ds({be:ps,cz:0,cX:8,bt:bs,dc:15,bE:ps,bF:ps}),Ns=7680,$s=function(n){return Ds({be:Ns,cz:15,cX:8,bt:516,dc:(e=n,u(Bi,2,e+4)),bE:5386,bF:5386});var e},zs=t((function(n,e,r){return Hf(_([f(ns,n,r,ms),_([$s(e),Ss])]))})),_s=r((function(n,e){return Hf(u(Xr,zs(n),e))})),As=s(ss,513,!0,0,1),Rs=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),Vs=r((function(n,e){return f(Rs,32774,n,e)})),Fs=function(n){var e=n.b3,t=n.bQ,o=n.bJ,a=n.bG,i=n.bL,c=n.aO;return u(r((function(n,r){var i=n.b,c=n.c,l=r.a,u=r.b,f=r.c;return function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return{$:0,a:n,b:e,c:r,d:t,e:o,f:a,g:i,h:c,i:l,j:u}}}}}}}}}}}(n.a)(i)(c)(l)(u)(f)(e)(t)(o)(a)})),i,c)}({bG:0,aO:u(Vs,1,771),bJ:0,bL:u(Vs,770,771),bQ:0,b3:0}),Bs=_([As,Fs]),ks=function(n){return n.d0},Es=function(n){return n.d3},js=function(n){return w(u(wu,function(n){return n.d1}(n),function(n){return n.d_}(n)),u(wu,function(n){return n.d2}(n),function(n){return n.d$}(n)),u(wu,Es(n),ks(n)))},Is=function(n){return Gu(n)},Ws=function(n){return{cI:{bC:n.H,bD:n.I,df:n.J},dd:{bC:n.q,bD:n.r,df:n.s},de:{bC:n.t,bD:n.u,df:n.v},dg:{bC:n.w,bD:n.x,df:n.y}}},Hs=r((function(n,e){var r=n.dg,t=n.de,o=n.dd;return{bC:e.bC*o.bC+e.bD*o.bD+e.df*o.df,bD:e.bC*t.bC+e.bD*t.bD+e.df*t.df,df:e.bC*r.bC+e.bD*r.bD+e.df*r.df}})),Us=r((function(n,e){var r=n.cI,t=e.bC-r.bC,o=e.bD-r.bD,a=e.df-r.df,i=n.dg,c=n.de,l=n.dd;return{bC:t*l.bC+o*l.bD+a*l.df,bD:t*c.bC+o*c.bD+a*c.df,df:t*i.bC+o*i.bD+a*i.df}})),Os=r((function(n,e){return{cI:u(Us,n,Gu(e)),dd:u(Hs,n,Xu(e)),de:u(Hs,n,Ju(e)),dg:u(Hs,n,Qu(e))}})),Ys=r((function(n,e){return u(st,n,e)})),qs=r((function(n,e){return 0>y(n,e)?n:e})),Gs=r((function(n,e){return u(qs,n,e)})),Xs=r((function(n,e){var r=e,t=n;return{d_:u(Ys,t.d_,r.d_),d$:u(Ys,t.d$,r.d$),d0:u(Ys,t.d0,r.d0),d1:u(Gs,t.d1,r.d1),d2:u(Gs,t.d2,r.d2),d3:u(Gs,t.d3,r.d3)}})),Js=r((function(n,e){return e+n})),Qs=r((function(n,e){var r=n.a,t=n.c,o=au(ou(n.b)),a=au(ou(r)),i=au(ou(t)),c=function(n){return w(n.bC,n.bD,n.df)}(e),l=c.a,f=c.b,s=c.c;return{d_:u(Js,a,l),d$:u(Js,o,f),d0:u(Js,i,s),d1:u(wu,a,l),d2:u(wu,o,f),d3:u(wu,i,s)}})),Ks=o((function(n,e,r,t){var o=r.eH,a=2*r.eY*e,i=2*r.eX*e,c=2*r.eW*e,l=o.df*e,s=o.bD*e,d=o.bC*e,v=Qu(n),m=dc(c*v.bC)+dc(i*v.bD)+dc(a*v.df),b=Ju(n),p=dc(c*b.bC)+dc(i*b.bD)+dc(a*b.df),g=Xu(n),h=dc(c*g.bC)+dc(i*g.bD)+dc(a*g.df),x=u(Qs,w(h,p,m),u(Us,n,f(ku,d,s,l)));return kr(t.$?x:u(Xs,t.a,x))})),Zs=o((function(n,e,r,t){n:for(;;){if(!t.b)return r;var o=t.a,a=t.b;switch(o.$){case 0:n=c=n,e=l=e,r=f=r,t=a;continue n;case 1:var i=s(Ks,n,e,o.a,r);n=c=n,e=l=e,r=f=i,t=a;continue n;case 2:n=c=n,e=l=e,r=f=r,t=a;continue n;case 3:i=s(Ks,n,e,o.a,r),n=c=n,e=l=e,r=f=i,t=a;continue n;case 4:var c=n,l=e,f=s(Zs,n,e,r,o.a);n=c,e=l,r=f,t=a;continue n;default:var d=o.a,v=o.b,m=u(Os,Ws(d),n),b=e*d.b5;n=c=n,e=l=e,r=f=s(Zs,m,b,r,_([v])),t=a;continue n}}})),nd=function(n){return n[0]},ed=function(n){return n[1]},rd=function(n){return n[2]},td=function(n){return{$:4,a:n}},od=r((function(n,e){for(;;){if(!n.b)return e;var r=n.a;n=n.b,e=u(Tr,r,e)}})),ad=function(n){return td(u(od,n,N))},id={dB:!0,q:1,r:0,s:0,t:0,u:1,v:0,w:0,x:0,y:1,H:0,I:0,J:0,b5:1},cd=Ds({be:ps,cz:0,cX:8,bt:bs,dc:255,bE:ps,bF:ps}),ld={bJ:0,eG:!1,bQ:0,cT:0,b3:0,c6:0,bC:0,bD:0,df:0},ud=r((function(n,e){return is({dJ:n.bC,dK:n.b3,dL:e.bC,dM:e.b3,dN:n.bD,dO:n.bQ,dP:e.bD,dQ:e.bQ,dR:n.df,dS:n.bJ,dT:e.df,dU:e.bJ,dV:n.c6,dW:n.cT,dX:e.c6,dY:e.cT})})),fd=L({bl:u(ud,ld,ld),bU:u(ud,ld,ld),bV:u(ud,ld,ld),bW:u(ud,ld,ld)},s(Kf,0,0,0,0)),sd=r((function(n,e){return n*e})),dd=function(n){return-n},vd=function(n){return s(ss,515,n.ac,n.Y,n.X)},md=_([vd({X:1,Y:0,ac:!0}),ws({be:Ns,cz:240,cX:0,bt:514,dc:0,bE:Ns,bF:Ns}),Fs]),bd=r((function(n,e){var r=n,t=e.eT,o=e.ez,a=ou(e.fc),i=ou(t),c=r.cV;if(c.$){var l=c.a;return Pc(i)?is({dJ:2/(o*l),dK:0,dL:0,dM:0,dN:0,dO:2/l,dP:0,dQ:0,dR:0,dS:0,dT:0,dU:-1,dV:0,dW:0,dX:0,dY:1}):is({dJ:2/(o*l),dK:0,dL:0,dM:0,dN:0,dO:2/l,dP:0,dQ:0,dR:0,dS:0,dT:-2/(i-a),dU:-(i+a)/(i-a),dV:0,dW:0,dX:0,dY:1})}var u=c.a;return Pc(i)?is({dJ:1/(o*u),dK:0,dL:0,dM:0,dN:0,dO:1/u,dP:0,dQ:0,dR:0,dS:0,dT:-1,dU:-2*a,dV:0,dW:0,dX:-1,dY:0}):is({dJ:1/(o*u),dK:0,dL:0,dM:0,dN:0,dO:1/u,dP:0,dQ:0,dR:0,dS:0,dT:-(i+a)/(i-a),dU:-2*i*a/(i-a),dV:0,dW:0,dX:-1,dY:0})})),pd=r((function(n,e){return 1==(1&n>>e)?0:1})),gd=t((function(n,e,r){return Hf(u(Wt,(function(r){var t=r<<4;return f(ns,n,L(e,s(Kf,u(pd,r,0),u(pd,r,1),u(pd,r,2),u(pd,r,3))),function(n){return _([vd({X:1,Y:0,ac:!0}),ws({be:Ns,cz:240,cX:n,bt:514,dc:0,bE:Ns,bF:Ns}),Fs])}(t))}),u(Gr,1,u(Bi,2,r)-1)))})),hd=function(n){return{bC:-n.bC,bD:-n.bD,df:-n.df}},xd=function(n){return hd(Qu(n))},Cd=$u,Pd=zu,Md={cI:tu,dd:Cd,de:wf,dg:Pd},yd=r((function(n,e){var r,t,o,a,i;return t=Gu(r=u(Os,e,n)),o=Qu(r),a=Ju(r),i=Xu(r),is({dJ:i.bC,dK:a.bC,dL:o.bC,dM:t.bC,dN:i.bD,dO:a.bD,dP:o.bD,dQ:t.bD,dR:i.df,dS:a.df,dT:o.df,dU:t.df,dV:0,dW:0,dX:0,dY:1})})),Td=function(n){return Xu(n)},Ld=function(n){return Ju(n)},wd=r((function(n,e){var r,t=_([Of(1),Gf(0),kf(!0),s(If,0,0,0,0)]),o=function(){var e=n.ex;switch(e.$){case 0:return w(t,"0",1);case 1:return w(u(Tr,Ef,t),"1",1);default:return w(t,"0",e.a)}}(),a=o.a,i=o.b,c=o.c,l=n.dq,d=l.a,m=l.b,b=u(rl,"height",Ir(m)+"px"),p=d,g=p/m,h=u(Uf,(function(e){return function(n){var e=function(n){return n.c9}(n.eE),r={cI:Is(e),dd:Td(e),de:Ld(e),dg:hd(xd(e))},t=ad(n.du),o=s(Zs,r,1,Er,_([t]));if(1===o.$)return N;var a=o.a,i=u(yd,Md,e),c=u(sd,.99,u(Ys,ou(n.dn),dd(ks(a)))),l=js(a),d=function(n){var e=n,r=u(st,dc(e.bC),u(st,dc(e.bD),dc(e.df)));if(r){var t=e.df/r,o=e.bD/r,a=e.bC/r;return Hl(a*a+o*o+t*t)*r}return 0}(f(gu,l.a,l.b,l.c)),m=u(sd,1.01,u(Js,d,dd(Es(a)))),b=u(bd,n.eE,{ez:n.ez,eT:m,fc:c}),p=function(n){return{dJ:n[0],dN:n[1],dR:n[2],dV:n[3],dK:n[4],dO:n[5],dS:n[6],dW:n[7],dL:n[8],dP:n[9],dT:n[10],dX:n[11],dM:n[12],dQ:n[13],dU:n[14],dY:n[15]}}(b).dY,g=p?hd(xd(e)):Is(e),h=function(){var e=n.fx;switch(e.$){case 0:return L(0,0);case 1:return L(1,0);case 2:return L(2,0);case 3:return L(3,e.a);case 4:return L(4,e.a);default:return L(5,0)}}(),x=h.a,C=h.b,P=u(os,n.eQ,n.fD),M=is({dJ:0,dK:g.bC,dL:nd(P),dM:n.eo,dN:0,dO:g.bD,dP:ed(P),dQ:d,dR:0,dS:g.df,dT:rd(P),dU:x,dV:0,dW:p,dX:0,dY:C}),y=v(ls,M,i,b,id,t,{N:N,W:N,fn:N}),T=n.e7;switch(T.$){case 0:return Hf(_([f(ns,y.N,L(w=T.a,Zf),Bs),f(ns,y.W,fd,Bs)]));case 1:var w=T.a;return Hf(_([f(ns,y.N,fd,Bs),_([cd]),f(ns,y.fn,w.bl,ms),_([$s(0)]),f(ns,y.N,L(w,Zf),md),f(ns,y.W,fd,Bs)]));default:var D=T.a,S=T.b;return Hf(_([f(ns,y.N,L(S,Zf),Bs),_([cd]),u(_s,y.fn,D),f(gd,y.N,S,Or(D)),f(ns,y.W,fd,Bs)]))}}({ez:g,eE:n.eE,dn:n.dn,du:e.du,eQ:e.eQ,e7:e.e7,eo:c,fx:e.fx,fD:e.fD})}),e),x=u(rl,"width",Ir(p)+"px"),C=function(n){var e,r,t=n.b,o=n.c,a=n.d,i=function(n){return ki(1e4*n)/100};return e=_(["rgba(",xc(i(n.a)),"%,",xc(i(t)),"%,",xc(i(o)),"%,",xc((r=a,ki(1e3*r)/1e3)),")"]),u(Wr,"",e)}(n.dj);return f(qf,"div",_([u(rl,"padding","0px"),x,b]),_([L(i,f(Qf,a,_([(r=ki(p*c),u(le,"width",Ir(r))),Yf(ki(m*c)),x,b,u(rl,"display","block"),u(rl,"background-color",C)]),h))]))})),Dd={bC:.31271,bD:.32902},Sd=r((function(n,e){var r=n,t=e.eL,o=t.bC,a=t.bD,i=t.df,c=u(os,e.cp,e.cf);return{bJ:rd(c),eG:r,bQ:ed(c),cT:0,b3:nd(c),c6:1,bC:-o,bD:-a,df:-i}})),Nd={$:0},$d=function(n){return function(n){for(;;){if(P(n.e2,0)&&P(n.e3,0))return ld;if(!u(Xl,ou(n.e2),ou(n.e3))){var e=dc(n.e3/Il),r=dc(n.e2/Il),t=n.fy,o=t.bC,a=t.bD,i=t.df,c=u(os,1,n.cf);return{bJ:r*rd(c),eG:!1,bQ:r*ed(c),cT:e/r,b3:r*nd(c),c6:3,bC:o,bD:a,df:i}}n={cf:n.cf,e2:n.e3,e3:n.e2,fy:hd(n.fy)}}}({cf:n.cf,e2:n.cp,e3:0,fy:n.fy})},zd=t((function(n,e,r){return 0>y(r,n)?n:y(r,e)>0?e:r})),_d=function(n){var e=f(zd,1667,25e3,n),r=e>4e3?-3025846900/(e*e*e)+2107037.9/(e*e)+.2226347*1e3/e+.24039:-266123900.00000003/(e*e*e)-.2343589*1e6/(e*e)+877.6956/e+.17991;return{bC:r,bD:e>2222?e>4e3?r*r*r*3.081758-r*r*5.8733867+3.75112997*r-.37001483:r*r*r*-.9549476-r*r*1.37418593+2.09137015*r-.16748867:r*r*r*-1.1063814-r*r*1.3481102+2.18555832*r-.20219683}},Ad=_d(12e3),Rd=_d(5600),Vd=r((function(n,e){return{$:2,a:n,b:e}})),Fd=function(n){return{$:0,a:n}},Bd=function(n){return n.eG},kd=Fd(fd.a),Ed=r((function(n,e){return f(It,r((function(e,r){var t=r.a,o=r.b;return n(e)?L(u(Tr,e,t),o):L(t,u(Tr,e,o))})),L(N,N),e)})),jd=function(n){return is({dJ:n.bC,dK:n.b3,dL:0,dM:0,dN:n.bD,dO:n.bQ,dP:0,dQ:0,dR:n.df,dS:n.bJ,dT:0,dU:0,dV:n.c6,dW:n.cT,dX:0,dY:0})},Id=l((function(n,e,r,t,o,a,i,c){var l=u(Ed,Bd,_([n,e,r,t])),f=l.a;if(f.b){var s=S(f,l.b);if(s.b&&s.b.b&&s.b.b.b&&s.b.b.b.b&&!s.b.b.b.b.b){var d=s.a,v=s.b,m=v.a,b=v.b,p=b.a,g=b.b.a;return u(Vd,u(Wt,jd,f),{bl:u(ud,d,m),bU:u(ud,p,g),bV:u(ud,o,a),bW:u(ud,i,c)})}return kd}return Fd({bl:u(ud,n,e),bU:u(ud,r,t),bV:u(ud,o,a),bW:u(ud,i,c)})})),Wd=t((function(n,e,r){return b(Id,n,e,r,ld,ld,ld,ld,ld)})),Hd=o((function(n,e,r,t){return{$:2,a:n,b:e,c:r,d:t}})),Ud=o((function(n,e,r,t){return{$:3,a:n,b:e,c:r,d:t}})),Od=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),Yd=o((function(n,e,r,t){return{$:6,a:n,b:e,c:r,d:t}})),qd=o((function(n,e,r,t){return{$:7,a:n,b:e,c:r,d:t}})),Gd=o((function(n,e,r,t){return{$:5,a:n,b:e,c:r,d:t}})),Xd=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),Jd=function(n){switch(n.$){case 0:return n;case 1:return s(Xd,n.a,n.b,n.c,1);case 2:return s(Hd,n.a,n.b,n.c,1);case 3:return s(Ud,n.a,n.b,n.c,1);case 4:return s(Od,n.a,n.b,n.c,1);case 5:return s(Gd,n.a,n.b,n.c,1);case 6:return s(Yd,n.a,n.b,n.c,1);case 7:return s(qd,n.a,n.b,n.c,1);case 8:case 9:default:return n}},Qd={$:0},Kd=l((function(n,e,r,t,o,a,i,c){for(;;){if(!c.b)return{d_:e,d$:t,d0:a,d1:n,d2:r,d3:o};var l=c.b,f=i(c.a);n=u(Gs,f.d1,n),e=u(Ys,f.d_,e),r=u(Gs,f.d2,r),t=u(Ys,f.d$,t),o=u(Gs,f.d3,o),a=u(Ys,f.d0,a),i=i,c=l}})),Zd=t((function(n,e,r){var t=n(e);return b(Kd,t.d1,t.d_,t.d2,t.d$,t.d3,t.d0,n,r)})),nv=r((function(n,e){return 1>y(e,n)})),ev=function(n){return u(nv,n.d_,n.d1)&&u(nv,n.d$,n.d2)&&u(nv,n.d0,n.d3)?n:{d_:u(Ys,n.d1,n.d_),d$:u(Ys,n.d2,n.d$),d0:u(Ys,n.d3,n.d0),d1:u(Gs,n.d1,n.d_),d2:u(Gs,n.d2,n.d$),d3:u(Gs,n.d3,n.d0)}},rv=function(n){return n},tv=function(n){var e=n.a,r=n.b,t=n.c,o=Ru(e),a=Vu(e),i=Fu(e),c=Ru(r),l=Vu(r),f=Fu(r),s=Ru(t),d=Vu(t),v=Fu(t);return ev({d_:u(Ys,o,u(Ys,c,s)),d$:u(Ys,a,u(Ys,l,d)),d0:u(Ys,i,u(Ys,f,v)),d1:u(Gs,o,u(Gs,c,s)),d2:u(Gs,a,u(Gs,l,d)),d3:u(Gs,i,u(Gs,f,v))})},ov=function(n){return new Float64Array([n.bC,n.bD,n.df])},av=function(n){return ov(n)},iv=function(n){return ov(n)},cv=r((function(n,e){var r=n,t=e,o=u(st,dc(t.bC),u(st,dc(t.bD),dc(t.df)));if(o){var a=t.df/o,i=t.bD/o,c=t.bC/o,l=Hl(c*c+i*i+a*a);return{bC:r*c/l,bD:r*i/l,df:r*a/l}}return Zl}))(1),lv=t((function(n,e,r){return cv(u(Ol,u(ql,e,r),u(ql,n,e)))})),uv=function(n){var e=n.a,r=n.b,t=n.c,o=iv(f(lv,e,r,t));return w({o:o,b1:av(e)},{o:o,b1:av(r)},{o:o,b1:av(t)})},fv=r((function(n,e){return{$:2,a:n,b:e}}))({dr:3,dA:0,d5:4}),sv=t((function(n,e,r){return w(n,e,r)})),dv=(Uo=u(sd,-.5,1),Oo=u(sd,-.5,1),qo=f(_u,Yo=u(sd,-.5,1),Oo,Uo),Xo=f(_u,Yo,Oo,Go=u(sd,.5,1)),Qo=f(_u,Yo,Jo=u(sd,.5,1),Uo),Ko=f(_u,Yo,Jo,Go),na=f(_u,Zo=u(sd,.5,1),Oo,Uo),ea=f(_u,Zo,Jo,Uo),ra=f(_u,Zo,Oo,Go),ta=f(_u,Zo,Jo,Go),Jd(function(n){if(n.b){var e=n.a,r=n.b,t=fv(u(Wt,uv,n));return s(Hd,f(Zd,tv,e,r),n,t,0)}return Qd}(_([f(sv,qo,ea,na),f(sv,qo,Qo,ea),f(sv,Xo,ra,ta),f(sv,Xo,ta,Ko),f(sv,na,ea,ta),f(sv,na,ta,ra),f(sv,qo,Ko,Qo),f(sv,qo,Xo,Ko),f(sv,qo,na,ra),f(sv,qo,ra,Xo),f(sv,Qo,ta,ea),f(sv,Qo,Ko,ta)])))),vv={$:0},mv=t((function(n,e,r){return{$:1,a:n,b:e,c:r}})),bv=t((function(n,e,r){var t=e.a,o=e.b,a=n(e.c),i=n(o),c=n(t),l=iv(f(lv,c,i,a)),s={o:l,b1:av(c)},d={o:l,b1:av(i)},v={o:l,b1:av(a)};return u(Tr,s,u(Tr,d,u(Tr,v,r)))})),pv=function(n){return n.C},gv=o((function(n,e,r,t){return 1===e.$||1===r.$||1===t.$?Er:kr(f(n,e.a,r.a,t.a))})),hv=4294967295>>>32-at,xv=h,Cv=t((function(n,e,r){for(;;){var t=u(xv,hv&e>>>n,r);if(t.$)return u(xv,hv&e,t.a);n-=at,e=e,r=t.a}})),Pv=r((function(n,e){var r=e.a,t=e.b,o=e.c,a=e.d;return 0>n||y(n,r)>-1?Er:y(n,function(n){return n>>>5<<5}(r))>-1?kr(u(xv,hv&n,a)):kr(f(Cv,t,n,o))})),Mv=function(n){return n.an},yv=r((function(n,e){return u(Pv,n,Mv(e))})),Tv=t((function(n,e,r){for(;;){var t=u(vt,Zr,n),o=t.a,a=t.b;if(0>y(ft(o),Zr))return u(pt,!0,{z:e,l:r,p:o});n=a,e=u(Tr,lt(o),e),r+=1}})),Lv=function(n){return n.b?f(Tv,n,N,0):it},wv=r((function(n,e){return!u(gc,u(po,pc,n),e)})),Dv=r((function(n,e){return f(It,r((function(e,r){return n(e)?u(Tr,e,r):r})),N,e)})),Sv=r((function(n,e){var r=function(n){return n.a}(n),t=function(n){var e=n.a,t=n.b,o=n.c;return e>=0&&0>y(e,r)&&t>=0&&0>y(t,r)&&o>=0&&0>y(o,r)};return u(wv,t,e)?{C:e,an:n}:{C:u(Dv,t,e),an:n}})),Nv=t((function(n,e,r){return{$:3,a:n,b:e,c:r}}))({dr:1,dA:3,d5:4}),$v=r((function(n,e){var r=e;return L(w(n.bC,n.bD,n.df),w(r.bC,r.bD,r.df))})),zv=r((function(n,e){n:for(;;){if(-2===e.$)return Er;var r=e.c,t=e.d,o=e.e;switch(u(wo,n,e.b)){case 0:n=n,e=t;continue n;case 1:return kr(r);default:n=n,e=o;continue n}}})),_v=f(ts,0,0,0),Av=i((function(n,e,r,t,o,a){var i=a.a,c=a.b,l=a.c,f=u(zv,u($v,n,e),o);if(f.$){var s={o:_v,b1:av(e)},d={o:_v,b1:av(n)},v=l+1;return w(u(Tr,w(r,l,v),u(Tr,w(r,v,t),i)),u(Tr,s,u(Tr,d,c)),l+2)}return w(u(Tr,w(r,f.a,t),i),c,l)})),Rv=a((function(n,e,r,t,o){for(;;){if(!r.b)return L(o.a,Qr(o.b));var a=r.a,i=a.a,c=a.b,l=r.b,u=n(a.c),f=n(c),s=n(i),d=t+2,m=t+1,b=n,p=e,g=l,h=t+3,x=v(Av,u,s,d,t,e,v(Av,f,u,m,d,e,v(Av,s,f,t,m,e,o)));n=b,e=p,r=g,t=h,o=x}})),Vv=a((function(n,e,r,t,o){for(;;){if(!e.b)return w(t,o,r);var a=e.a,i=a.a,c=a.b,l=e.b,s=n(a.c),d=n(c),v=n(i),m=r+2,b=r+1,p=r,g=f(So,u($v,v,s),m,f(So,u($v,s,d),b,f(So,u($v,d,v),p,o)));n=n,e=l,r+=3,t=u(Tr,w(p,b,m),t),o=g}})),Fv=t((function(n,e,r){var o,a=u(Bo,(function(n){var e=n.a,r=n.b,a=n.c;return s(gv,t((function(n,e,r){return w(n,e,r)})),u(yv,e,o),u(yv,r,o),u(yv,a,o))}),pv(o=r)),i=f(It,bv(e),N,a),c=d(Vv,e,a,0,N,Po),l=d(Rv,e,c.b,a,0,w(c.a,N,c.c)),v=l.a,m=l.b,b=m.b?S(i,m):i;return f(mv,n,u(Sv,Lv(b),v),u(Nv,b,v))})),Bv=function(n){return{C:u(Wt,(function(n){return w(3*n,3*n+1,3*n+2)}),u(Gr,0,Or(n)-1)),an:Lv(Hf(u(Wt,(function(n){return _([n.a,n.b,n.c])}),n)))}},kv=function(n){switch(n.$){case 0:return vv;case 1:case 2:return f(Fv,n.a,At,Bv(u(Wt,rv,n.b)));case 3:return f(Fv,n.a,At,n.b);case 4:case 5:case 6:case 7:return f(Fv,n.a,(function(n){return n.b1}),n.b);case 8:case 9:default:return vv}},Ev=kv(dv),jv={$:0},Iv=jv,Wv=r((function(n,e){return{$:1,a:n,b:e}})),Hv={src:"\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        void main () {\n            gl_FragColor = texture2D(colorTexture, interpolatedUv);\n        }\n    ",attributes:{},uniforms:{colorTexture:"bM"}},Uv=function(n){return{$:5,a:n}},Ov=Uv(1029),Yv=Uv(1028),qv=t((function(n,e,r){return 1===e?u(Tr,n?Ov:Yv,r):r})),Gv={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute mediump vec2 uv;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedUv = uv;\n        }\n    ",attributes:{position:"b1",uv:"L"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Xv=o((function(n,e,r,t){return u(Wv,e,l((function(e,o,a,i,c,l,u,s){return d(hs,f(qv,i,t,s),Gv,Hv,r,{bM:n,b:a,c:o,d:l,e:e,f:c})})))})),Jv={src:"\n        precision lowp float;\n        \n        uniform lowp vec3 constantColor;\n        \n        void main () {\n            gl_FragColor = vec4(constantColor, 1.0);\n        }\n    ",attributes:{},uniforms:{constantColor:"aC"}},Qv={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{position:"b1"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Kv=o((function(n,e,r,t){return u(Wv,e,l((function(e,o,a,i,c,l,u,s){return d(hs,f(qv,i,t,s),Qv,Jv,r,{aC:n,b:a,c:o,d:l,e:e,f:c})})))})),Zv=r((function(n,e){return{$:3,a:n,b:e}})),nm={src:"\n        precision lowp float;\n        \n        uniform lowp vec3 constantColor;\n        uniform lowp float pointRadius;\n        uniform highp mat4 sceneProperties;\n        \n        float pointAlpha(float pointRadius, vec2 pointCoord) {\n            float pointSize = 2.0 * pointRadius;\n            float x = (pointSize + 2.0) * (pointCoord.s - 0.5);\n            float y = (pointSize + 2.0) * (pointCoord.t - 0.5);\n            float r = sqrt(x * x + y * y);\n            float innerRadius = pointRadius;\n            float outerRadius = pointRadius + 1.0;\n            if (r > outerRadius) {\n                return 0.0;\n            } else if (r > innerRadius) {\n                return outerRadius - r;\n            } else {\n                return 1.0;\n            }\n        }\n        \n        void main () {\n            float supersampling = sceneProperties[3][0];\n            float alpha = pointAlpha(pointRadius * supersampling, gl_PointCoord);\n            gl_FragColor = vec4(constantColor, alpha);\n        }\n    ",attributes:{},uniforms:{constantColor:"aC",pointRadius:"b0",sceneProperties:"e"}},em={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform lowp float pointRadius;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            float supersampling = sceneProperties[3][0];\n            gl_PointSize = 2.0 * pointRadius * supersampling + 2.0;\n        }\n    ",attributes:{position:"b1"},uniforms:{modelMatrix:"b",modelScale:"c",pointRadius:"b0",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},rm=o((function(n,e,r,t){return u(Zv,r,l((function(r,o,a,i,c,l,u,f){return d(hs,f,em,nm,t,{aC:n,b:a,c:o,b0:e,d:l,e:r,f:c})})))})),tm={src:"\n        precision mediump float;\n        \n        uniform mediump vec3 emissiveColor;\n        uniform highp mat4 sceneProperties;\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{emissiveColor:"aR",sceneProperties:"e"}},om=Mr,am=a((function(n,e,r,t,o){return u(Wv,r,l((function(r,a,i,c,l,s,v,m){return d(hs,f(qv,c,o,m),Qv,tm,t,{aR:u(om,e,n),b:i,c:a,d:s,e:r,f:l})})))})),im={src:"\n        precision mediump float;\n        \n        uniform mediump vec3 emissiveColor;\n        uniform lowp float pointRadius;\n        uniform highp mat4 sceneProperties;\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        float pointAlpha(float pointRadius, vec2 pointCoord) {\n            float pointSize = 2.0 * pointRadius;\n            float x = (pointSize + 2.0) * (pointCoord.s - 0.5);\n            float y = (pointSize + 2.0) * (pointCoord.t - 0.5);\n            float r = sqrt(x * x + y * y);\n            float innerRadius = pointRadius;\n            float outerRadius = pointRadius + 1.0;\n            if (r > outerRadius) {\n                return 0.0;\n            } else if (r > innerRadius) {\n                return outerRadius - r;\n            } else {\n                return 1.0;\n            }\n        }\n        \n        void main () {\n            vec4 color = toSrgb(emissiveColor, sceneProperties);\n            float supersampling = sceneProperties[3][0];\n            float alpha = pointAlpha(pointRadius * supersampling, gl_PointCoord);\n            gl_FragColor = vec4(color.rgb, alpha);\n        }\n    ",attributes:{},uniforms:{emissiveColor:"aR",pointRadius:"b0",sceneProperties:"e"}},cm=a((function(n,e,r,t,o){return u(Zv,t,l((function(t,a,i,c,l,f,s,v){return d(hs,v,em,im,o,{aR:u(om,e,n),b:i,c:a,b0:r,d:f,e:t,f:l})})))})),lm={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 materialColor;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{enabledLights:"R",lights12:"bl",lights34:"bU",lights56:"bV",lights78:"bW",materialColor:"cA",sceneProperties:"e",viewMatrix:"f"}},um={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n        }\n    ",attributes:{normal:"o",position:"b1"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},fm=o((function(n,e,r,t){return u(Wv,e,l((function(e,o,a,i,c,l,u,s){var v=u.a,m=u.b;return d(hs,f(qv,i,t,s),um,lm,r,{R:m,bl:v.bl,bU:v.bU,bV:v.bV,bW:v.bW,cA:n,b:a,c:o,d:l,e:e,f:c})})))})),sm={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D materialColorTexture;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n            vec3 materialColor = fromSrgb(texture2D(materialColorTexture, interpolatedUv).rgb);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{enabledLights:"R",lights12:"bl",lights34:"bU",lights56:"bV",lights78:"bW",materialColorTexture:"cB",normalMapTexture:"aY",sceneProperties:"e",useNormalMap:"a3",viewMatrix:"f"}},dm={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        attribute mediump vec2 uv;\n        attribute highp vec3 tangent;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getWorldTangent(vec3 modelTangent, vec4 modelScale, mat4 modelMatrix) {\n            return (modelMatrix * vec4(safeNormalize(modelScale.xyz * modelTangent), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = uv;\n            interpolatedTangent = getWorldTangent(tangent, modelScale, modelMatrix);\n        }\n    ",attributes:{normal:"o",position:"b1",tangent:"eq",uv:"L"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},vm=i((function(n,e,r,t,o,a){return u(Wv,t,l((function(t,i,c,l,u,s,v,m){var b=v.a,p=v.b;return d(hs,f(qv,l,a,m),dm,sm,o,{R:p,bl:b.bl,bU:b.bU,bV:b.bV,bW:b.bW,cB:n,b:c,c:i,aY:e,d:s,e:t,a3:r,f:u})})))})),mm={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D baseColorTexture;\n        uniform lowp vec4 constantBaseColor;\n        uniform mediump sampler2D roughnessTexture;\n        uniform lowp vec2 constantRoughness;\n        uniform mediump sampler2D metallicTexture;\n        uniform lowp vec2 constantMetallic;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getFloatValue(sampler2D texture, vec2 uv, vec2 constantValue) {\n            if (constantValue.y == 1.0) {\n                return constantValue.x;\n            } else {\n                vec4 textureColor = texture2D(texture, uv);\n                return dot(textureColor, vec4(0.2126, 0.7152, 0.0722, 0.0));\n            }\n        }\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 baseColor = fromSrgb(texture2D(baseColorTexture, interpolatedUv).rgb) * (1.0 - constantBaseColor.w) + constantBaseColor.rgb * constantBaseColor.w;\n            float roughness = getFloatValue(roughnessTexture, interpolatedUv, constantRoughness);\n            float metallic = getFloatValue(metallicTexture, interpolatedUv, constantMetallic);\n        \n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{baseColorTexture:"cd",constantBaseColor:"ch",constantMetallic:"ci",constantRoughness:"cj",enabledLights:"R",lights12:"bl",lights34:"bU",lights56:"bV",lights78:"bW",metallicTexture:"cE",normalMapTexture:"aY",roughnessTexture:"c$",sceneProperties:"e",useNormalMap:"a3",viewMatrix:"f"}},bm={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 baseColor;\n        uniform lowp float roughness;\n        uniform lowp float metallic;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{baseColor:"cc",enabledLights:"R",lights12:"bl",lights34:"bU",lights56:"bV",lights78:"bW",metallic:"cD",roughness:"c_",sceneProperties:"e",viewMatrix:"f"}},pm=i((function(n,e,r,t,o,a){return u(Wv,t,l((function(t,i,c,l,u,s,v,m){var b=v.a,p=v.b;return d(hs,f(qv,l,a,m),um,bm,o,{cc:n,R:p,bl:b.bl,bU:b.bU,bV:b.bV,bW:b.bW,cD:r,b:c,c:i,d:s,c_:e,e:t,f:u})})))})),gm=r((function(n,e){return{$:1,a:n,b:e}})),hm=r((function(n,e){return e.$?L(e.a.B,1):L(n,0)})),xm=s(Kf,0,0,0,0),Cm=r((function(n,e){var r;return e.$?L(e.a.B,xm):L(n,s(Kf,nd(r=e.a),ed(r),rd(r),1))})),Pm=r((function(n,e){var r,t=L(n,e);return t.a.$?u(gm,L(r=t.a.a.B,xm),u(hm,r,e)):t.b.$?u(gm,u(Cm,r=t.b.a.B,n),u(hm,r,e)):{$:0,a:t.a.a}})),Mm=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),ym=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),Tm=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),Lm=u(Ps,0,0),wm=r((function(n,e){return e.$?L(e.a.B,Lm):L(n,u(Ps,e.a,1))})),Dm=o((function(n,e,r,t){var o,a=s(Tm,n,e,r,t);return a.a.$?s(ym,L(o=a.a.a.B,xm),u(wm,o,e),u(wm,o,r),u(hm,o,t)):a.b.$?s(ym,u(Cm,o=a.b.a.B,n),L(o,Lm),u(wm,o,r),u(hm,o,t)):a.c.$?s(ym,u(Cm,o=a.c.a.B,n),u(wm,o,e),L(o,Lm),u(hm,o,t)):a.d.$?s(ym,u(Cm,o=a.d.a.B,n),u(wm,o,e),u(wm,o,r),L(o,1)):f(Mm,a.a.a,a.b.a,a.c.a)})),Sm={src:"\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        uniform mediump float backlight;\n        uniform highp mat4 sceneProperties;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            vec3 emissiveColor = fromSrgb(texture2D(colorTexture, interpolatedUv).rgb) * backlight;\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{backlight:"b9",colorTexture:"bM",sceneProperties:"e"}},Nm=a((function(n,e,r,t,o){return u(Wv,r,l((function(r,a,i,c,l,u,s,v){return d(hs,f(qv,c,o,v),Gv,Sm,t,{b9:e,bM:n,b:i,c:a,d:u,e:r,f:l})})))})),$m={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        attribute mediump vec2 uv;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = uv;\n            interpolatedTangent = vec3(0.0, 0.0, 0.0);\n        }\n    ",attributes:{normal:"o",position:"b1",uv:"L"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},zm=o((function(n,e,r,t){return u(Wv,e,l((function(e,o,a,i,c,l,u,s){var v=u.a,m=u.b;return d(hs,f(qv,i,t,s),$m,sm,r,{R:m,bl:v.bl,bU:v.bU,bV:v.bV,bW:v.bW,cB:n,b:a,c:o,aY:n,d:l,e:e,a3:0,f:c})})))})),_m=function(n){return e(9,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return n(e,r,t,o,a,i,c,l,u)}}}}}}}}}))}((function(n,e,r,t,o,a,i,c,s){return u(Wv,i,l((function(i,l,u,v,m,b,p,g){var h=p.a,x=p.b;return d(hs,f(qv,v,s,g),$m,mm,c,{cd:n,ch:e,ci:a,cj:t,R:x,bl:h.bl,bU:h.bU,bV:h.bV,bW:h.bW,cE:o,b:u,c:l,aY:n,d:b,c$:r,e:i,a3:0,f:m})})))})),Am=t((function(n,e,r){return r>.5?e+(1-r)*(n-e):n+r*(e-n)})),Rm=function(n){return f(_u,function(n){return f(Am,n.d1,n.d_,.5)}(n),function(n){return f(Am,n.d2,n.d$,.5)}(n),function(n){return f(Am,n.d3,n.d0,.5)}(n))},Vm=function(n){var e=js(n),r=e.a,t=e.b,o=e.c;return{eH:Rm(n),eW:r/2,eX:t/2,eY:o/2}},Fm=r((function(n,e){switch(n.$){case 0:if(n.b.$){var r=n.b.a.B;switch(e.$){case 0:case 1:case 2:case 3:case 4:return Iv;case 5:case 6:case 7:return o=e.c,a=e.d,s(Xv,r,Vm(V=e.a),o,a);case 8:case 9:default:return Iv}}else{var t=n.b.a;switch(e.$){case 0:return Iv;case 1:var o=e.c,a=e.d;return s(Kv,t,Vm(V=e.a),o,a);case 2:case 3:case 4:return o=e.c,a=e.d,s(Kv,t,Vm(V=e.a),o,a);case 5:case 6:case 7:return o=e.c,a=e.d,s(Kv,t,Vm(V=e.a),o,a);case 8:case 9:return o=e.c,s(Kv,t,Vm(V=e.a),o,0);default:return o=e.d,s(rm,t,e.b,Vm(V=e.a),o)}}case 1:if(n.b.$)switch(r=n.b.a.B,c=n.c,e.$){case 0:case 1:case 2:case 3:case 4:return Iv;case 5:case 6:case 7:return o=e.c,a=e.d,d(Nm,r,c,Vm(V=e.a),o,a);case 8:case 9:default:return Iv}else{var i=n.b.a,c=n.c;switch(e.$){case 0:return Iv;case 1:case 2:case 3:case 4:case 5:case 6:case 7:return o=e.c,a=e.d,d(am,i,c,Vm(V=e.a),o,a);case 8:case 9:return o=e.c,d(am,i,c,Vm(V=e.a),o,0);default:return o=e.d,d(cm,i,c,e.b,Vm(V=e.a),o)}}case 2:var m=u(Pm,n.b,n.c);if(m.$){var b=m.a.a,p=m.b,g=p.a,h=p.b;switch(e.$){case 0:case 1:case 2:case 3:case 4:case 5:return Iv;case 6:return o=e.c,C=e.d,s(zm,b,Vm(V=e.a),o,C);case 7:return o=e.c,C=e.d,v(vm,b,g,h,Vm(V=e.a),o,C);case 8:case 9:default:return Iv}}else{var x=m.a;switch(e.$){case 0:case 1:return Iv;case 2:o=e.c;var C=e.d;return s(fm,x,Vm(V=e.a),o,C);case 3:return Iv;case 4:return o=e.c,C=e.d,s(fm,x,Vm(V=e.a),o,C);case 5:return Iv;case 6:case 7:return o=e.c,C=e.d,s(fm,x,Vm(V=e.a),o,C);case 8:case 9:default:return Iv}}default:var P=s(Dm,n.b,n.c,n.d,n.e);if(P.$){var M=P.a,y=M.a,T=M.b,L=P.b,w=L.a,D=L.b,S=P.c,N=S.a,$=S.b,z=P.d;switch(g=z.a,h=z.b,e.$){case 0:case 1:case 2:case 3:case 4:case 5:return Iv;case 6:return o=e.c,a=e.d,function(n,e,r,t,o,a,i,c,l,u){return 9===n.a?n.f(e,r,t,o,a,i,c,l,u):n(e)(r)(t)(o)(a)(i)(c)(l)(u)}(_m,y,T,w,D,N,$,Vm(V=e.a),o,a);case 7:return V=e.a,o=e.c,a=e.d,function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(s){return function(v){return function(m){return u(Wv,s,l((function(l,u,s,b,p,g,h,x){var C=h.a,P=h.b;return d(hs,f(qv,b,m,x),dm,mm,v,{cd:n,ch:e,ci:a,cj:t,R:P,bl:C.bl,bU:C.bU,bV:C.bV,bW:C.bW,cE:o,b:s,c:u,aY:i,d:g,c$:r,e:l,a3:c,f:p})})))}}}}}}}}}}}(y)(T)(w)(D)(N)($)(g)(h)(Vm(V))(o)(a);case 8:case 9:default:return Iv}}else{var _=P.a,A=P.b,R=P.c;switch(e.$){case 0:case 1:return Iv;case 2:return o=e.c,a=e.d,v(pm,_,A,R,Vm(V=e.a),o,a);case 3:return Iv;case 4:return o=e.c,a=e.d,v(pm,_,A,R,Vm(V=e.a),o,a);case 5:return Iv;case 6:return o=e.c,a=e.d,v(pm,_,A,R,Vm(V=e.a),o,a);case 7:var V;return o=e.c,a=e.d,v(pm,_,A,R,Vm(V=e.a),o,a);case 8:case 9:default:return Iv}}}})),Bm=function(n){return n.bC},km=function(n){return n.bD},Em=function(n){return n.df},jm=function(n){var e=n,r=Em(e.dg),t=km(e.dg),o=Bm(e.dg),a=Em(e.de),i=km(e.de),c=Bm(e.de),l=Em(e.dd),u=km(e.dd),f=Bm(e.dd);return f*i*r+u*a*o+l*c*t-l*i*o-u*c*r-f*a*t>0},Im=r((function(n,e){return{$:5,a:n,b:e}})),Wm=r((function(n,e){var r=e;switch(r.$){case 0:return Iv;case 5:var t=r.b;return u(Im,u(as,r.a,n),t);case 1:case 3:case 2:default:return u(Im,n,r)}})),Hm=r((function(n,e){return u(Wm,function(n){var e=Gu(n),r=Qu(n),t=Ju(n),o=Xu(n);return{dB:jm(n),q:o.bC,r:o.bD,s:o.df,t:t.bC,u:t.bD,v:t.df,w:r.bC,x:r.bD,y:r.df,H:e.bC,I:e.bD,J:e.df,b5:1}}(n),e)})),Um=function(n){return{$:2,a:n}},Om=r((function(n,e){var r=n.a,t=n.b,o=n.c,a=e.eH;return{eH:{bC:r*a.bC,bD:t*a.bD,df:o*a.df},eW:r*e.eW,eX:t*e.eX,eY:o*e.eY}})),Ym=function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){var f,s=n.a,d=n.b,v=n.c,m=function(n){return{bC:n[0],bD:n[1],df:n[2],ev:n[3]}}(t),p=(f={ev:m.ev,bC:m.bC*s,bD:m.bD*d,df:m.df*v},new Float64Array([f.bC,f.bD,f.df,f.ev]));return b(e,r,p,o,a,i,c,l,u)}}}}}}}}}},qm=r((function(n,e){switch(e.$){case 0:return jv;case 5:return u(Im,e.a,u(qm,n,e.b));case 1:var r=e.b;return u(Wv,u(Om,n,e.a),u(Ym,n,r));case 3:return e;case 2:return Um(u(Ym,n,r=e.a));default:var t=e.a;return td(u(Wt,qm(n),t))}})),Gm=r((function(n,e){return u(qm,n,e)})),Xm={src:"\n        precision lowp float;\n        \n        void main () {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        }\n    ",attributes:{},uniforms:{}},Jm=f(Ls,{cz:0,cX:0,dc:15},{be:Ns,bt:bs,bE:Ns,bF:7683},{be:Ns,bt:bs,bE:Ns,bF:7682}),Qm=f(Ls,{cz:0,cX:0,dc:15},{be:Ns,bt:bs,bE:Ns,bF:7682},{be:Ns,bt:bs,bE:Ns,bF:7683}),Km=r((function(n,e){return u(Tr,n?Qm:Jm,e)})),Zm={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 shadowVertexPosition(vec3 position, vec3 normal, mat4 shadowLight, vec4 modelScale, mat4 modelMatrix, mat4 viewMatrix, mat4 projectionMatrix, mat4 sceneProperties) {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            vec3 worldNormal = getWorldNormal(normal, vec4(modelScale.xyz, 1.0), modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 directionToLight = getDirectionToLight(worldPosition.xyz, xyz_type, rgb_parameter);\n            vec3 offset = vec3(0.0, 0.0, 0.0);\n            float sceneDiameter = sceneProperties[3][1];\n            if (dot(directionToLight, worldNormal) <= 0.0) {\n                offset = -sceneDiameter * directionToLight;\n            } else {\n                offset = -0.001 * sceneDiameter * directionToLight;\n            }\n            vec4 offsetPosition = worldPosition + vec4(offset, 0.0);\n            return projectionMatrix * (viewMatrix * offsetPosition);\n        }\n        \n        void main () {\n            gl_Position = shadowVertexPosition(\n                position,\n                normal,\n                shadowLight,\n                modelScale,\n                modelMatrix,\n                viewMatrix,\n                projectionMatrix,\n                sceneProperties\n            );\n        }\n    ",attributes:{normal:"o",position:"b1"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"b6",viewMatrix:"f"}},nb=function(n){var e=function(n){if(n.$){var e=n.c;return kr(l((function(n,r,t,o,a,i,c,l){return d(hs,u(Km,o,l),Zm,Xm,e,{b:t,c:r,d:i,e:n,b6:c,f:a})})))}return Er}(n);return e.$?Iv:Um(e.a)},eb=o((function(n,e,r,t){var o,a=u(Fm,r,dv),i=(o=L(n,e)).a?o.b?ad(_([a,nb(Ev)])):a:o.b?nb(Ev):Iv,c=qu(t),l=c.a,f=c.b,s=c.c;return u(Hm,Yu(t),u(Gm,w(l,f,s),i))})),rb=r((function(n,e){return s(eb,!0,!0,n,e)})),tb=function(n){return{$:0,a:n}},ob=r((function(n,e){return{$:0,a:n,b:e}})),ab=function(n){return mf(n)},ib=r((function(n,e){return e/n})),cb=function(n){var e=n;return{bC:mf(e),bD:bf(e)}},lb=r((function(n,e){var r=n.b1;return u(Tr,{o:iv(n.o),b1:av(r)},e)})),ub=c((function(n,e,r,t,o,a,i){for(;;){if(!i.b)return ev({d_:e,d$:t,d0:a,d1:n,d2:r,d3:o});var c=i.a,l=i.b,f=rd(c.b1),s=ed(c.b1),d=nd(c.b1);n=u(qs,n,d),e=u(st,e,d),r=u(qs,r,s),t=u(st,t,s),o=u(qs,o,f),a=u(st,a,f),i=l}})),fb=r((function(n,e){var r=rd(n.b1),t=ed(n.b1),o=nd(n.b1);return m(ub,o,o,t,t,r,r,e)})),sb=r((function(n,e){var r=n.de,t=n.dd;return{bC:e.bC*t.bC+e.bD*r.bC,bD:e.bC*t.bD+e.bD*r.bD,df:e.bC*t.df+e.bD*r.df}})),db=function(n){return bf(n)},vb=function(n){return 6.283185307179586*n},mb={cI:tu,dd:Cd,de:wf},bb=(oa=u(ib,72,vb(1)),aa=zu,ia=Nu,la=f(_u,0,0,ca=u(sd,.5,1)),fa=f(_u,0,0,ua=u(sd,-.5,1)),Jd(function(n){var e=f(wr,lb,N,Mv(n));if(e.b){var r=e.a,t=e.b,o=u(Nv,e,pv(n));return s(Od,u(fb,r,t),n,o,0)}return Qd}(Bv(Hf(u(Wt,(function(n){var e=u(sd,n,oa),r=u(sb,mb,cb(e)),t=u(sd,ab(e),1),o=u(sd,db(e),1),a=f(_u,t,o,ca),i=f(_u,t,o,ua),c=u(sd,u(ic,72,n+1),oa),l=u(sb,mb,cb(c)),s=u(sd,ab(c),1),d=u(sd,db(c),1),v=f(_u,s,d,ua),m=f(_u,s,d,ca);return _([w({o:ia,b1:fa},{o:ia,b1:v},{o:ia,b1:i}),w({o:r,b1:i},{o:l,b1:v},{o:l,b1:m}),w({o:r,b1:i},{o:l,b1:m},{o:r,b1:a}),w({o:aa,b1:la},{o:aa,b1:a},{o:aa,b1:m})])}),u(Gr,0,71))))))),pb=kv(bb),gb=function(n){return n.cI},hb=o((function(n,e,r,t){var o,a=function(n){var e=function(n){return n.eL}(n),r=eu(e),t=r.a,o=r.b;return{cI:gb(n),dd:t,de:o,dg:e}}(function(n){return n.k}(t)),i=u(Fm,r,bb),c=(o=L(n,e)).a?o.b?ad(_([i,nb(pb)])):i:o.b?nb(pb):Iv,l=function(n){return n.fj}(t),f=function(n){return n.e5}(t);return u(Hm,a,u(Gm,w(l,l,f),c))})),xb=r((function(n,e){return s(hb,!0,!0,n,e)})),Cb={src:"\n        precision highp float;\n        \n        attribute lowp float triangleVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 triangleVertexPositions;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleVertex), triangleVertexPositions, position, normal);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{triangleVertex:"c5"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",triangleVertexPositions:"bz",viewMatrix:"f"}},Pb={src:"\n        precision highp float;\n        \n        attribute lowp float triangleVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 triangleVertexPositions;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleVertex), triangleVertexPositions, position, normal);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n        }\n    ",attributes:{triangleVertex:"c5"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",triangleVertexPositions:"bz",viewMatrix:"f"}},Mb=function(n){var e=n.a,r=n.b,t=n.c;return is({dJ:e.bC,dK:r.bC,dL:t.bC,dM:0,dN:e.bD,dO:r.bD,dP:t.bD,dQ:0,dR:e.df,dS:r.df,dT:t.df,dU:0,dV:0,dW:0,dX:0,dY:0})},yb=fv(_([w({c5:0},{c5:1},{c5:2})])),Tb=r((function(n,e){var r=tv(e),t=Vm(r);switch(n.$){case 0:if(n.b.$)return Iv;var o=n.b.a;return u(Wv,t,l((function(n,r,t,a,i,c,l,u){return d(hs,f(qv,a,0,u),Cb,Jv,yb,{aC:o,b:t,c:r,d:c,e:n,bz:Mb(e),f:i})})));case 1:if(n.b.$)return Iv;var a=n.b.a,i=n.c;return u(Wv,t,l((function(n,r,t,o,c,l,s,v){return d(hs,f(qv,o,0,v),Cb,tm,yb,{aR:u(om,i,a),b:t,c:r,d:l,e:n,bz:Mb(e),f:c})})));case 2:var c=u(Pm,n.b,n.c);if(c.$)return Iv;var v=c.a;return u(Wv,t,l((function(n,r,t,o,a,i,c,l){var u=c.a,s=c.b;return d(hs,f(qv,o,0,l),Pb,lm,yb,{R:s,bl:u.bl,bU:u.bU,bV:u.bV,bW:u.bW,cA:v,b:t,c:r,d:i,e:n,bz:Mb(e),f:a})})));default:var m=s(Dm,n.b,n.c,n.d,n.e);if(m.$)return Iv;var b=m.a,p=m.b,g=m.c;return u(Wv,t,l((function(n,r,t,o,a,i,c,l){var u=c.a,s=c.b;return d(hs,f(qv,o,0,l),Pb,bm,yb,{cc:b,R:s,bl:u.bl,bU:u.bU,bV:u.bV,bW:u.bW,cD:g,b:t,c:r,d:i,c_:p,e:n,bz:Mb(e),f:a})})))}})),Lb=(sa=_([{a2:u(Ps,0,1)},{a2:u(Ps,1,1)},{a2:u(Ps,2,1)},{a2:u(Ps,0,-1)},{a2:u(Ps,1,-1)},{a2:u(Ps,2,-1)}]),da=_([w(0,1,2),w(3,5,4),w(3,4,1),w(3,1,0),w(4,5,2),w(4,2,1),w(5,3,0),w(5,0,2)]),u(Nv,sa,da)),wb={src:"\n        precision highp float;\n        \n        attribute highp vec2 triangleShadowVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        uniform highp mat4 triangleVertexPositions;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 shadowVertexPosition(vec3 position, vec3 normal, mat4 shadowLight, vec4 modelScale, mat4 modelMatrix, mat4 viewMatrix, mat4 projectionMatrix, mat4 sceneProperties) {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            vec3 worldNormal = getWorldNormal(normal, vec4(modelScale.xyz, 1.0), modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 directionToLight = getDirectionToLight(worldPosition.xyz, xyz_type, rgb_parameter);\n            vec3 offset = vec3(0.0, 0.0, 0.0);\n            float sceneDiameter = sceneProperties[3][1];\n            if (dot(directionToLight, worldNormal) <= 0.0) {\n                offset = -sceneDiameter * directionToLight;\n            } else {\n                offset = -0.001 * sceneDiameter * directionToLight;\n            }\n            vec4 offsetPosition = worldPosition + vec4(offset, 0.0);\n            return projectionMatrix * (viewMatrix * offsetPosition);\n        }\n        \n        void main () {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleShadowVertex.x), triangleVertexPositions, position, normal);\n            normal *= triangleShadowVertex.y;\n            gl_Position = shadowVertexPosition(\n                position,\n                normal,\n                shadowLight,\n                modelScale,\n                modelMatrix,\n                viewMatrix,\n                projectionMatrix,\n                sceneProperties\n            );\n        }\n    ",attributes:{triangleShadowVertex:"a2"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"b6",triangleVertexPositions:"bz",viewMatrix:"f"}},Db=function(n){return Um(l((function(e,r,t,o,a,i,c,l){return d(hs,u(Km,o,l),wb,Xm,Lb,{b:t,c:r,d:i,e:e,b6:c,bz:Mb(n),f:a})})))},Sb=o((function(n,e,r,t){var o=u(Tb,r,t),a=L(n,e);return a.a?a.b?ad(_([o,Db(t)])):o:a.b?Db(t):Iv})),Nb=r((function(n,e){return s(Sb,!0,!0,n,e)})),$b=r((function(n,e){var r=Fu(e),t=Fu(n),o=Vu(e),a=Vu(n),i=Ru(e),c=Ru(n);return{d_:u(Ys,c,i),d$:u(Ys,a,o),d0:u(Ys,t,r),d1:u(Gs,c,i),d2:u(Gs,a,o),d3:u(Gs,t,r)}})),zb={src:"\n        precision highp float;\n        \n        attribute lowp float lineSegmentVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp vec3 lineSegmentStartPoint;\n        uniform highp vec3 lineSegmentEndPoint;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = (1.0 - lineSegmentVertex) * lineSegmentStartPoint + lineSegmentVertex * lineSegmentEndPoint;\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{lineSegmentVertex:"dI"},uniforms:{lineSegmentEndPoint:"dG",lineSegmentStartPoint:"dH",modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},_b=r((function(n,e){return{$:1,a:n,b:e}}))({dr:2,dA:0,d5:1})(_([L({dI:0},{dI:1})])),Ab=r((function(n,e){var r,t=u($b,(r=e).a,r.b),o=Vm(t),a=e.a,i=e.b;switch(n.$){case 0:if(n.b.$)return Iv;var c=n.b.a;return u(Wv,o,l((function(n,e,r,t,o,l,u,f){return d(hs,f,zb,Jv,_b,{aC:c,dG:av(i),dH:av(a),b:r,c:e,d:l,e:n,f:o})})));case 1:if(n.b.$)return Iv;c=n.b.a;var f=n.c;return u(Wv,o,l((function(n,e,r,t,o,l,s,v){return d(hs,v,zb,tm,_b,{aR:u(om,f,c),dG:av(i),dH:av(a),b:r,c:e,d:l,e:n,f:o})})));case 2:default:return Iv}})),Rb=r((function(n,e){return u(Ab,n,e)})),Vb=t((function(n,e,r){return{$:2,a:n,b:e,c:r}})),Fb=function(n){return f(zd,0,1,n>.04045?u(Bi,(n+.055)/1.055,2.4):n/12.92)},Bb=function(n){return f(Vb,0,tb(function(n){var e=uc(n),r=e.cn,t=e.ce;return f(ts,Fb(e.cW),Fb(r),Fb(t))}(n)),tb(0))},kb=r((function(n,e){return n/e})),Eb=a((function(n,e,r,t,o){for(;;){var a=t(e/r),i=u(Tr,a,o);if(P(e,n))return i;n=n,e-=1,r=r,t=t,o=i}})),jb=r((function(n,e){return 1>n?N:d(Eb,0,n,n,e,N)})),Ib=r((function(n,e){var r=n.b1,t=n.L,o=t.a,a=t.b;return u(Tr,{o:iv(n.o),b1:av(r),L:u(Ps,o,a)},e)})),Wb=r((function(n,e){var r=n,t=e,o=mf(t);return{bC:o*mf(r),bD:o*bf(r),df:bf(t)}})),Hb=(va=u(Gr,0,71),ma=u(jb,72,u(Am,0,vb(1))),ba=rt(36),pa=u(Gr,0,ba-1),ga=u(jb,ba,u(Am,Wl(90),Wl(-90))),ha=Lv(Hf(u(Wt,(function(n){return u(Wt,(function(e){return{o:u(Wb,n,e),b1:f(_u,u(sd,ab(e)*ab(n),1),u(sd,ab(e)*db(n),1),u(sd,db(e),1)),L:L(u(kb,n,vb(1)),u(kb,u(Js,Wl(90),e),Wl(180)))}}),ga)}),ma))),xa=r((function(n,e){return n*(ba+1)+e})),Ca=Hf(u(Wt,(function(n){return Hf(u(Wt,(function(e){var r=u(xa,n+1,e),t=u(xa,n,e),o=u(xa,n+1,e+1),a=u(xa,n,e+1);return _([w(a,o,r),w(a,r,t)])}),pa))}),va)),Jd(function(n){var e=f(wr,Ib,N,Mv(n));if(e.b){var r=e.a,t=e.b,o=u(Nv,e,pv(n));return s(Yd,u(fb,r,t),n,o,0)}return Qd}(u(Sv,ha,Ca)))),Ub=r((function(n,e){for(;;){var r=u(ic,144,2*n+3),t=u(ic,144,2*n+2),o=2*n+1,a=2*n,i=u(Tr,w(144,a,t),u(Tr,w(a,r,t),u(Tr,w(a,o,r),u(Tr,w(o,145,r),e))));if(!n)return i;n-=1,e=i}})),Ob=t((function(n,e,r){return r>.5?e+(1-r)*(n-e):n+r*(e-n)})),Yb=(Pa=u(r((function(n,e){for(;;){var r=f(Ob,0,6.283185307179586,n/72),t=u(Tr,{bH:r,bZ:0,b4:1},u(Tr,{bH:r,bZ:1,b4:1},e));if(!n)return t;n-=1,e=t}})),71,_([{bH:0,bZ:0,b4:0},{bH:0,bZ:1,b4:0}])),u(Nv,Pa,u(Ub,71,N))),qb={src:"\n        precision highp float;\n        \n        attribute highp float angle;\n        attribute highp float offsetScale;\n        attribute highp float radiusScale;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const lowp float kPerspectiveProjection = 0.0;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec3 perpendicularTo(vec3 d) {\n            float absX = abs(d.x);\n            float absY = abs(d.y);\n            float absZ = abs(d.z);\n            if (absX <= absY) {\n                if (absX <= absZ) {\n                    float scale = 1.0 / length(d.zy);\n                    return vec3(0.0, -d.z * scale, d.y * scale);\n                } else {\n                    float scale = 1.0 / length(d.xy);\n                    return vec3(-d.y * scale, d.x * scale, 0.0);\n                }\n            } else {\n                if (absY <= absZ) {\n                    float scale = 1.0 / length(d.xz);\n                    return vec3(d.z * scale, 0.0, -d.x * scale);\n                } else {\n                    float scale = 1.0 / length(d.xy);\n                    return vec3(-d.y * scale, d.x * scale, 0.0);\n                }\n            }\n        }\n        \n        void main () {\n            vec4 worldCenter = getWorldPosition(vec3(0.0, 0.0, 0.0), modelScale, modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 zDirection = getDirectionToLight(worldCenter.xyz, xyz_type, rgb_parameter);\n            vec3 xDirection = perpendicularTo(zDirection);\n            vec3 yDirection = cross(zDirection, xDirection);\n            float r = modelScale.x;\n            float adjustedRadius = r;\n            float zOffset = 0.0;\n            if (xyz_type.w == kPointLight) {\n                float distanceToLight = length(xyz_type.xyz - worldCenter.xyz);\n                float rSquared = r * r;\n                zOffset = rSquared / distanceToLight;\n                float zSquared = zOffset * zOffset;\n                adjustedRadius = sqrt(rSquared - zSquared) * radiusScale;\n            }\n            vec3 worldPosition =\n                worldCenter.xyz\n                    + zDirection * zOffset\n                    + xDirection * adjustedRadius * cos(angle)\n                    + yDirection * adjustedRadius * sin(angle);\n            vec3 directionToLight = getDirectionToLight(worldPosition, xyz_type, rgb_parameter);\n            float sceneDiameter = sceneProperties[3][1];\n            vec3 offset = -sceneDiameter * offsetScale * directionToLight;\n            vec4 offsetPosition = vec4(worldPosition + offset, 1.0);\n            gl_Position = projectionMatrix * (viewMatrix * offsetPosition);\n        }\n    ",attributes:{angle:"bH",offsetScale:"bZ",radiusScale:"b4"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"b6",viewMatrix:"f"}},Gb=function(){return Um(l((function(n,e,r,t,o,a,i,c){return d(hs,u(Km,!0,c),qb,Xm,Yb,{aC:f(ts,0,0,1),b:r,c:e,d:a,e:n,b6:i,f:o})})))},Xb=r((function(n,e){return u(Wm,function(n){return{dB:!0,q:1,r:0,s:0,t:0,u:1,v:0,w:0,x:0,y:1,H:n.bC,I:n.bD,J:n.df,b5:1}}(n),e)})),Jb=o((function(n,e,r,t){var o,a=u(Fm,r,Hb),i=(o=L(n,e)).a?o.b?ad(_([a,Gb()])):a:o.b?Gb():Iv,c=cf(t);return u(Xb,u(ql,tu,af(t)),u(Gm,w(c,c,c),i))})),Qb=r((function(n,e){return s(Jb,!0,!0,n,e)})),Kb=function(n){switch(n.$){case 0:var e=n.b;return _([u(rb,Bb(n.a),e)]);case 1:var r=n.b;return _([u(Nb,Bb(n.a),r)]);case 3:var t=n.b;return _([u(Qb,Bb(n.a),t)]);case 2:var o=n.b;return _([u(xb,Bb(n.a),o)]);case 4:var a=n.b;return _([u(Rb,(i=n.a,u(ob,0,tb(function(n){var e=uc(n);return f(ts,e.cW,e.cn,e.ce)}(i)))),a)]);default:return u(Uf,Kb,n.a)}var i},Zb=r((function(n,e){return function(n){var e,r=u(Sd,n.fn,{cf:Rd,eL:n.fu,cp:8e4}),t=$d({cf:Ad,cp:2e4,fy:n.fy}),o=$d({cf:Dd,cp:15e3,fy:hd(n.fy)}),a=f(Wd,r,t,o);return function(n){return u(wd,{ex:n.ex,dj:n.dj,eE:n.eE,dn:n.dn,dq:n.dq},_([{du:n.du,eQ:n.eQ,e7:n.e7,fx:n.fx,fD:n.fD}]))}({ex:(e=n.ck,{$:2,a:e}),dj:n.dj,eE:n.eE,dn:n.dn,dq:n.dq,du:n.du,eQ:1.2*u(Bi,2,15),e7:a,fx:Nd,fD:Dd})}({dj:n.eB,eE:n.eE,dn:.005,ck:n.ck,dq:L(ki(n.aa.db),ki(n.aa.co)),du:(r=e,u(Uf,Kb,r)),fn:!0,fu:u(Wb,n.ft,n.fv),fy:Pd});var r}));Ma={Main:{init:f(El,r((function(n,e){return u(Zb,{eB:uu,eE:lu,ck:n.ck,aa:n.aa,ft:0,fv:0},u(Bf,n,e))})),jl,(function(){return{}}))(u(Ct,(function(n){return wt({ck:n})}),u(Pt,"devicePixelRatio",Mt)))(0)}},n.Elm?function n(e,r){for(var t in r)t in e?"init"==t?C(6):n(e[t],r[t]):e[t]=r[t]}(n.Elm,Ma):n.Elm=Ma}(n);const e=n.Elm.Main.init({node:document.getElementById("elm-node"),flags:{devicePixelRatio:window.devicePixelRatio}});function r(n){const e=[];for(let r=0;r<n.length;r++)e.push({identifier:n[r].identifier,pageX:n[r].pageX,pageY:n[r].pageY});return e}window.addEventListener("touchstart",(n=>{e.ports.touchStart.send(r(n.changedTouches))})),window.addEventListener("touchmove",(n=>{e.ports.touchMove.send(r(n.changedTouches))})),window.addEventListener("touchend",(n=>{e.ports.touchEnd.send(r(n.changedTouches))})),window.addEventListener("touchcancel",(n=>{e.ports.touchCancel.send(r(n.changedTouches))}))}();
//# sourceMappingURL=index.93a5420e.js.map
