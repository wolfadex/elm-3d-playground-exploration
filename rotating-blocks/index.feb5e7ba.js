!function(){var n={};!function(n){function e(n,e,r){return r.a=n,r.f=e,r}function r(n){return e(2,n,(function(e){return function(r){return n(e,r)}}))}function t(n){return e(3,n,(function(e){return function(r){return function(t){return n(e,r,t)}}}))}function o(n){return e(4,n,(function(e){return function(r){return function(t){return function(o){return n(e,r,t,o)}}}}))}function a(n){return e(5,n,(function(e){return function(r){return function(t){return function(o){return function(a){return n(e,r,t,o,a)}}}}}))}function i(n){return e(6,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return n(e,r,t,o,a,i)}}}}}}))}function c(n){return e(7,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return n(e,r,t,o,a,i,c)}}}}}}}))}function l(n){return e(8,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return n(e,r,t,o,a,i,c,l)}}}}}}}}))}function u(n,e,r){return 2===n.a?n.f(e,r):n(e)(r)}function f(n,e,r,t){return 3===n.a?n.f(e,r,t):n(e)(r)(t)}function s(n,e,r,t,o){return 4===n.a?n.f(e,r,t,o):n(e)(r)(t)(o)}function d(n,e,r,t,o,a){return 5===n.a?n.f(e,r,t,o,a):n(e)(r)(t)(o)(a)}function v(n,e,r,t,o,a,i){return 6===n.a?n.f(e,r,t,o,a,i):n(e)(r)(t)(o)(a)(i)}function m(n,e,r,t,o,a,i,c){return 7===n.a?n.f(e,r,t,o,a,i,c):n(e)(r)(t)(o)(a)(i)(c)}function b(n,e,r,t,o,a,i,c,l){return 8===n.a?n.f(e,r,t,o,a,i,c,l):n(e)(r)(t)(o)(a)(i)(c)(l)}var p=t((function(n,e,r){for(var t=Array(n),o=0;n>o;o++)t[o]=r(e+o);return t})),g=r((function(n,e){for(var r=Array(n),t=0;n>t&&e.b;t++)r[t]=e.a,e=e.b;return r.length=t,L(r,e)})),h=r((function(n,e){return e[n]})),x=t((function(n,e,r){for(var t=r.length-1;t>=0;t--)e=u(n,r[t],e);return e}));function C(n){throw Error("https://github.com/elm/core/blob/1.0.0/hints/"+n+".md")}function P(n,e){for(var r,t=[],o=M(n,e,0,t);o&&(r=t.pop());o=M(r.a,r.b,0,t));return o}function M(n,e,r,t){if(n===e)return!0;if("object"!=typeof n||null===n||null===e)return"function"==typeof n&&C(5),!1;if(r>100)return t.push(L(n,e)),!0;for(var o in 0>n.$&&(n=Nr(n),e=Nr(e)),n)if(!M(n[o],e[o],r+1,t))return!1;return!0}function T(n,e,r){if("object"!=typeof n)return n===e?0:e>n?-1:1;if(void 0===n.$)return(r=T(n.a,e.a))||(r=T(n.b,e.b))?r:T(n.c,e.c);for(;n.b&&e.b&&!(r=T(n.a,e.a));n=n.b,e=e.b);return r||(n.b?1:e.b?-1:0)}var y=r((function(n,e){var r=T(n,e);return 0>r?Dr:r?$r:Fr}));function L(n,e){return{a:n,b:e}}function w(n,e,r){return{a:n,b:e,c:r}}function S(n,e){var r={};for(var t in n)r[t]=n[t];for(var t in e)r[t]=e[t];return r}function N(n,e){if("string"==typeof n)return n+e;if(!n.b)return e;var r=$(n.a,e);n=n.b;for(var t=r;n.b;n=n.b)t=t.b=$(n.a,e);return r}var F={$:0};function $(n,e){return{$:1,a:n,b:e}}var D=r($);function z(n){for(var e=F,r=n.length;r--;)e=$(n[r],e);return e}function _(n){for(var e=[];n.b;n=n.b)e.push(n.a);return e}var A=t((function(n,e,r){for(var t=[];e.b&&r.b;e=e.b,r=r.b)t.push(u(n,e.a,r.a));return z(t)})),G=r((function(n,e){return n*e})),R=r(Math.pow),k=r((function(n,e){var r=e%n;return 0===n?C(11):r>0&&0>n||0>r&&n>0?r+n:r})),B=Math.cos,V=Math.sin,E=Math.tan,j=Math.ceil,I=Math.floor,H=Math.round,W=Math.sqrt,O=Math.log,U=isNaN,q=r((function(n,e){return n+e})),Y=t((function(n,e,r){for(var t=r.length;t--;){var o=r[t],a=r.charCodeAt(t);56320>a||a>57343||(o=r[--t]+o),e=u(n,o,e)}return e})),X=r((function(n,e){return e.split(n)})),K=r((function(n,e){return e.join(n)})),Z=t((function(n,e,r){return r.slice(n,e)})),J=r((function(n,e){return 0===e.indexOf(n)}));function Q(n){return n+""}function nn(n){return{$:2,b:n}}var en=nn((function(n){return"number"!=typeof n?hn("an INT",n):n>-2147483647&&2147483647>n&&(0|n)===n?Rr(n):!isFinite(n)||n%1?hn("an INT",n):Rr(n)})),rn=nn((function(n){return"boolean"==typeof n?Rr(n):hn("a BOOL",n)})),tn=nn((function(n){return"number"==typeof n?Rr(n):hn("a FLOAT",n)})),on=(nn((function(n){return Rr(n)})),nn((function(n){return"string"==typeof n?Rr(n):n instanceof String?Rr(n+""):hn("a STRING",n)}))),an=r((function(n,e){return{$:6,d:n,b:e}}));function cn(n,e){return{$:9,f:n,g:e}}var ln=r((function(n,e){return{$:10,b:e,h:n}})),un=r((function(n,e){return cn(n,[e])})),fn=t((function(n,e,r){return cn(n,[e,r])})),sn=o((function(n,e,r,t){return cn(n,[e,r,t])})),dn=r((function(n,e){try{return mn(n,JSON.parse(e))}catch(n){return zr(u(_r,"This is not valid JSON! "+n.message,e))}})),vn=r((function(n,e){return mn(n,e)}));function mn(n,e){switch(n.$){case 2:return n.b(e);case 5:return null===e?Rr(n.c):hn("null",e);case 3:return pn(e)?bn(n.b,e,z):hn("a LIST",e);case 4:return pn(e)?bn(n.b,e,gn):hn("an ARRAY",e);case 6:var r=n.d;if("object"!=typeof e||null===e||!(r in e))return hn("an OBJECT with a field named `"+r+"`",e);var t=mn(n.b,e[r]);return xt(t)?t:zr(u(Ar,r,t.a));case 7:var o=n.e;return pn(e)?e.length>o?(t=mn(n.b,e[o]),xt(t)?t:zr(u(Gr,o,t.a))):hn("a LONGER array. Need index "+o+" but only see "+e.length+" entries",e):hn("an ARRAY",e);case 8:if("object"!=typeof e||null===e||pn(e))return hn("an OBJECT",e);var a=F;for(var i in e)if(e.hasOwnProperty(i)){if(t=mn(n.b,e[i]),!xt(t))return zr(u(Ar,i,t.a));a=$(L(i,t.a),a)}return Rr(Zr(a));case 9:for(var c=n.f,l=n.g,f=0;l.length>f;f++){if(t=mn(l[f],e),!xt(t))return t;c=c(t.a)}return Rr(c);case 10:return t=mn(n.b,e),xt(t)?mn(n.h(t.a),e):t;case 11:for(var s=F,d=n.g;d.b;d=d.b){if(t=mn(d.a,e),xt(t))return t;s=$(t.a,s)}return zr(kr(Zr(s)));case 1:return zr(u(_r,n.a,e));case 0:return Rr(n.a)}}function bn(n,e,r){for(var t=e.length,o=Array(t),a=0;t>a;a++){var i=mn(n,e[a]);if(!xt(i))return zr(u(Gr,a,i.a));o[a]=i.a}return Rr(r(o))}function pn(n){return Array.isArray(n)||"undefined"!=typeof FileList&&n instanceof FileList}function gn(n){return u(ht,n.length,(function(e){return n[e]}))}function hn(n,e){return zr(u(_r,"Expecting "+n,e))}function xn(n,e){if(n===e)return!0;if(n.$!==e.$)return!1;switch(n.$){case 0:case 1:return n.a===e.a;case 2:return n.b===e.b;case 5:return n.c===e.c;case 3:case 4:case 8:return xn(n.b,e.b);case 6:return n.d===e.d&&xn(n.b,e.b);case 7:return n.e===e.e&&xn(n.b,e.b);case 9:return n.f===e.f&&Cn(n.g,e.g);case 10:return n.h===e.h&&xn(n.b,e.b);case 11:return Cn(n.g,e.g)}}function Cn(n,e){var r=n.length;if(r!==e.length)return!1;for(var t=0;r>t;t++)if(!xn(n[t],e[t]))return!1;return!0}var Pn=r((function(n,e){return JSON.stringify(e,null,n)+""}));function Mn(n){return n}var Tn=t((function(n,e,r){return r[n]=e,r}));function yn(n){return{$:0,a:n}}function Ln(n){return{$:2,b:n,c:null}}var wn=r((function(n,e){return{$:3,b:n,d:e}})),Sn=0;function Nn(n){var e={$:0,e:Sn++,f:n,g:null,h:[]};return An(e),e}function Fn(n){return Ln((function(e){e(yn(Nn(n)))}))}function $n(n,e){n.h.push(e),An(n)}var Dn=r((function(n,e){return Ln((function(r){$n(n,e),r(yn(0))}))})),zn=!1,_n=[];function An(n){if(_n.push(n),!zn){for(zn=!0;n=_n.shift();)Gn(n);zn=!1}}function Gn(n){for(;n.f;){var e=n.f.$;if(0===e||1===e){for(;n.g&&n.g.$!==e;)n.g=n.g.i;if(!n.g)return;n.f=n.g.b(n.f.a),n.g=n.g.i}else{if(2===e)return void(n.f.c=n.f.b((function(e){n.f=e,An(n)})));if(5===e){if(0===n.h.length)return;n.f=n.f.b(n.h.shift())}else n.g={$:3===e?0:1,b:n.f.b,i:n.g},n.f=n.f.d}}}var Rn={};function kn(n,e,r,t,o){return{b:n,c:e,d:r,e:t,f:o}}function Bn(n,e){var r={g:e,h:void 0},t=n.c,o=n.d,a=n.e,i=n.f;return r.h=Nn(u(wn,(function n(e){return u(wn,n,{$:5,b:function(n){var c=n.a;return 0===n.$?f(o,r,c,e):a&&i?s(t,r,c.i,c.j,e):f(t,r,a?c.i:c.j,e)}})}),n.b))}var Vn=r((function(n,e){return Ln((function(r){n.g(e),r(yn(0))}))})),En=r((function(n,e){return u(Dn,n.h,{$:0,a:e})}));function jn(n){return function(e){return{$:1,k:n,l:e}}}function In(n){return{$:2,m:n}}var Hn=r((function(n,e){return{$:3,n:n,o:e}})),Wn=[],On=!1;function Un(n,e,r){if(Wn.push({p:n,q:e,r:r}),!On){On=!0;for(var t;t=Wn.shift();)qn(t.p,t.q,t.r);On=!1}}function qn(n,e,r){var t={};for(var o in Yn(!0,e,t,null),Yn(!1,r,t,null),n)$n(n[o],{$:"fx",a:t[o]||{i:F,j:F}})}function Yn(n,e,r,t){switch(e.$){case 1:var o=e.k,a=function(n,e,r,t){return u(n?Rn[e].e:Rn[e].f,(function(n){for(var e=r;e;e=e.t)n=e.s(n);return n}),t)}(n,o,t,e.l);return void(r[o]=function(n,e,r){return r=r||{i:F,j:F},n?r.i=$(e,r.i):r.j=$(e,r.j),r}(n,a,r[o]));case 2:for(var i=e.m;i.b;i=i.b)Yn(n,i.a,r,t);return;case 3:return void Yn(n,e.o,r,{s:e.n,t:t})}}function Xn(n,e){return function(n){Rn[n]&&C(3)}(n),Rn[n]={f:Kn,u:e,a:Zn},jn(n)}var Kn=r((function(n,e){return function(r){return n(e(r))}}));function Zn(n,e){var r=F,o=Rn[n].u,a=yn(null);return Rn[n].b=a,Rn[n].c=t((function(n,e){return r=e,a})),{send:function(n){var t=u(vn,o,n);xt(t)||C(4);for(var a=t.a,i=r;i.b;i=i.b)e(i.a(a))}}}var Jn="undefined"!=typeof document?document:{};function Qn(n,e){n.appendChild(e)}function ne(n){return{$:0,a:n}}var ee,re=r((function(n,e){return r((function(r,t){for(var o=[],a=0;t.b;t=t.b){var i=t.a;a+=i.b||0,o.push(i)}return a+=o.length,{$:1,c:e,d:ue(r),e:o,f:n,b:a}}))}))(void 0),te=r((function(n,e){return r((function(r,t){for(var o=[],a=0;t.b;t=t.b){var i=t.a;a+=i.b.b||0,o.push(i)}return a+=o.length,{$:2,c:e,d:ue(r),e:o,f:n,b:a}}))}))(void 0),oe=r((function(n,e){return{$:4,j:n,k:e,b:1+(e.b||0)}})),ae=r((function(n,e){return{$:"a0",n:n,o:e}})),ie=r((function(n,e){return{$:"a1",n:n,o:e}})),ce=r((function(n,e){return{$:"a2",n:n,o:e}})),le=r((function(n,e){return{$:"a3",n:n,o:e}}));function ue(n){for(var e={};n.b;n=n.b){var r=n.a,t=r.$,o=r.n,a=r.o;if("a2"!==t){var i=e[t]||(e[t]={});"a3"===t&&"class"===o?fe(i,o,a):i[o]=a}else"className"===o?fe(e,o,a):e[o]=a}return e}function fe(n,e,r){var t=n[e];n[e]=t?t+" "+r:r}function se(n,e){var r=n.$;if(5===r)return se(n.k||(n.k=n.m()),e);if(0===r)return Jn.createTextNode(n.a);if(4===r){for(var t=n.k,o=n.j;4===t.$;)"object"!=typeof o?o=[o,t.j]:o.push(t.j),t=t.k;var a={j:o,p:e};return(i=se(t,a)).elm_event_node_ref=a,i}if(3===r)return de(i=n.h(n.g),e,n.d),i;var i=n.f?Jn.createElementNS(n.f,n.c):Jn.createElement(n.c);de(i,e,n.d);for(var c=n.e,l=0;c.length>l;l++)Qn(i,se(1===r?c[l]:c[l].b,e));return i}function de(n,e,r){for(var t in r){var o=r[t];"a1"===t?ve(n,o):"a0"===t?pe(n,e,o):"a3"===t?me(n,o):"a4"===t?be(n,o):("value"!==t&&"checked"!==t||n[t]!==o)&&(n[t]=o)}}function ve(n,e){var r=n.style;for(var t in e)r[t]=e[t]}function me(n,e){for(var r in e){var t=e[r];void 0!==t?n.setAttribute(r,t):n.removeAttribute(r)}}function be(n,e){for(var r in e){var t=e[r],o=t.f,a=t.o;void 0!==a?n.setAttributeNS(o,r,a):n.removeAttributeNS(o,r)}}function pe(n,e,r){var t=n.elmFs||(n.elmFs={});for(var o in r){var a=r[o],i=t[o];if(a){if(i){if(i.q.$===a.$){i.q=a;continue}n.removeEventListener(o,i)}i=ge(e,a),n.addEventListener(o,i,ee&&{passive:2>St(a)}),t[o]=i}else n.removeEventListener(o,i),t[o]=void 0}}try{window.addEventListener("t",null,Object.defineProperty({},"passive",{get:function(){ee=!0}}))}catch(n){}function ge(n,e){function r(e){var t=r.q,o=mn(t.a,e);if(xt(o)){for(var a,i=St(t),c=o.a,l=i?3>i?c.a:c.au:c,u=1==i?c.b:3==i&&c.c6,f=(u&&e.stopPropagation(),(2==i?c.b:3==i&&c.cW)&&e.preventDefault(),n);a=f.j;){if("function"==typeof a)l=a(l);else for(var s=a.length;s--;)l=a[s](l);f=f.p}f(l,u)}}return r.q=e,r}function he(n,e){return n.$==e.$&&xn(n.a,e.a)}function xe(n,e,r,t){var o={$:e,r:r,s:t,t:void 0,u:void 0};return n.push(o),o}function Ce(n,e,r,t){if(n!==e){var o=n.$,a=e.$;if(o!==a){if(1!==o||2!==a)return void xe(r,0,t,e);e=function(n){for(var e=n.e,r=e.length,t=Array(r),o=0;r>o;o++)t[o]=e[o].b;return{$:1,c:n.c,d:n.d,e:t,f:n.f,b:n.b}}(e),a=1}switch(a){case 5:for(var i=n.l,c=e.l,l=i.length,u=l===c.length;u&&l--;)u=i[l]===c[l];if(u)return void(e.k=n.k);e.k=e.m();var f=[];return Ce(n.k,e.k,f,0),void(f.length>0&&xe(r,1,t,f));case 4:for(var s=n.j,d=e.j,v=!1,m=n.k;4===m.$;)v=!0,"object"!=typeof s?s=[s,m.j]:s.push(m.j),m=m.k;for(var b=e.k;4===b.$;)v=!0,"object"!=typeof d?d=[d,b.j]:d.push(b.j),b=b.k;return v&&s.length!==d.length?void xe(r,0,t,e):((v?function(n,e){for(var r=0;n.length>r;r++)if(n[r]!==e[r])return!1;return!0}(s,d):s===d)||xe(r,2,t,d),void Ce(m,b,r,t+1));case 0:return void(n.a!==e.a&&xe(r,3,t,e.a));case 1:return void Pe(n,e,r,t,Te);case 2:return void Pe(n,e,r,t,ye);case 3:if(n.h!==e.h)return void xe(r,0,t,e);var p=Me(n.d,e.d);p&&xe(r,4,t,p);var g=e.i(n.g,e.g);return void(g&&xe(r,5,t,g))}}}function Pe(n,e,r,t,o){if(n.c===e.c&&n.f===e.f){var a=Me(n.d,e.d);a&&xe(r,4,t,a),o(n,e,r,t)}else xe(r,0,t,e)}function Me(n,e,r){var t;for(var o in n)if("a1"!==o&&"a0"!==o&&"a3"!==o&&"a4"!==o)if(o in e){var a=n[o],i=e[o];a===i&&"value"!==o&&"checked"!==o||"a0"===r&&he(a,i)||((t=t||{})[o]=i)}else(t=t||{})[o]=r?"a1"===r?"":"a0"===r||"a3"===r?void 0:{f:n[o].f,o:void 0}:"string"==typeof n[o]?"":null;else{var c=Me(n[o],e[o]||{},o);c&&((t=t||{})[o]=c)}for(var l in e)l in n||((t=t||{})[l]=e[l]);return t}function Te(n,e,r,t){var o=n.e,a=e.e,i=o.length,c=a.length;i>c?xe(r,6,t,{v:c,i:i-c}):c>i&&xe(r,7,t,{v:i,e:a});for(var l=c>i?i:c,u=0;l>u;u++){var f=o[u];Ce(f,a[u],r,++t),t+=f.b||0}}function ye(n,e,r,t){for(var o=[],a={},i=[],c=n.e,l=e.e,u=c.length,f=l.length,s=0,d=0,v=t;u>s&&f>d;){var m=(w=c[s]).a,b=(S=l[d]).a,p=w.b,g=S.b,h=void 0,x=void 0;if(m!==b){var C=c[s+1],P=l[d+1];if(C){var M=C.a,T=C.b;x=b===M}if(P){var y=P.a,L=P.b;h=m===y}if(h&&x)Ce(p,L,o,++v),we(a,o,m,g,d,i),v+=p.b||0,Se(a,o,m,T,++v),v+=T.b||0,s+=2,d+=2;else if(h)v++,we(a,o,b,g,d,i),Ce(p,L,o,v),v+=p.b||0,s+=1,d+=2;else if(x)Se(a,o,m,p,++v),v+=p.b||0,Ce(T,g,o,++v),v+=T.b||0,s+=2,d+=1;else{if(!C||M!==y)break;Se(a,o,m,p,++v),we(a,o,b,g,d,i),v+=p.b||0,Ce(T,L,o,++v),v+=T.b||0,s+=2,d+=2}}else Ce(p,g,o,++v),v+=p.b||0,s++,d++}for(;u>s;){var w;v++,Se(a,o,(w=c[s]).a,p=w.b,v),v+=p.b||0,s++}for(;f>d;){var S,N=N||[];we(a,o,(S=l[d]).a,S.b,void 0,N),d++}(o.length>0||i.length>0||N)&&xe(r,8,t,{w:o,x:i,y:N})}var Le="_elmW6BL";function we(n,e,r,t,o,a){var i=n[r];if(!i)return a.push({r:o,A:i={c:0,z:t,r:o,s:void 0}}),void(n[r]=i);if(1===i.c){a.push({r:o,A:i}),i.c=2;var c=[];return Ce(i.z,t,c,i.r),i.r=o,void(i.s.s={w:c,A:i})}we(n,e,r+Le,t,o,a)}function Se(n,e,r,t,o){var a=n[r];if(a){if(0===a.c){a.c=2;var i=[];return Ce(t,a.z,i,o),void xe(e,9,o,{w:i,A:a})}Se(n,e,r+Le,t,o)}else{var c=xe(e,9,o,void 0);n[r]={c:1,z:t,r:o,s:c}}}function Ne(n,e,r,t){Fe(n,e,r,0,0,e.b,t)}function Fe(n,e,r,t,o,a,i){for(var c=r[t],l=c.r;l===o;){var u=c.$;if(1===u)Ne(n,e.k,c.s,i);else if(8===u)c.t=n,c.u=i,(f=c.s.w).length>0&&Fe(n,e,f,0,o,a,i);else if(9===u){c.t=n,c.u=i;var f,s=c.s;s&&(s.A.s=n,(f=s.w).length>0&&Fe(n,e,f,0,o,a,i))}else c.t=n,c.u=i;if(!(c=r[++t])||(l=c.r)>a)return t}var d=e.$;if(4===d){for(var v=e.k;4===v.$;)v=v.k;return Fe(n,v,r,t,o+1,a,n.elm_event_node_ref)}for(var m=e.e,b=n.childNodes,p=0;m.length>p;p++){o++;var g=1===d?m[p]:m[p].b,h=o+(g.b||0);if(!(o>l||l>h||(c=r[t=Fe(b[p],g,r,t,o,h,i)])&&(l=c.r)<=a))return t;o=h}return t}function $e(n,e){for(var r=0;e.length>r;r++){var t=e[r],o=t.t,a=De(o,t);o===n&&(n=a)}return n}function De(n,e){switch(e.$){case 0:return function(n,e,r){var t=n.parentNode,o=se(e,r);return o.elm_event_node_ref||(o.elm_event_node_ref=n.elm_event_node_ref),t&&o!==n&&t.replaceChild(o,n),o}(n,e.s,e.u);case 4:return de(n,e.u,e.s),n;case 3:return n.replaceData(0,n.length,e.s),n;case 1:return $e(n,e.s);case 2:return n.elm_event_node_ref?n.elm_event_node_ref.j=e.s:n.elm_event_node_ref={j:e.s,p:e.u},n;case 6:for(var r=e.s,t=0;r.i>t;t++)n.removeChild(n.childNodes[r.v]);return n;case 7:for(var o=(r=e.s).e,a=n.childNodes[t=r.v];o.length>t;t++)n.insertBefore(se(o[t],e.u),a);return n;case 9:if(!(r=e.s))return n.parentNode.removeChild(n),n;var i=r.A;return void 0!==i.r&&n.parentNode.removeChild(n),i.s=$e(n,r.w),n;case 8:return function(n,e){var r=e.s,t=function(n,e){if(n){for(var r=Jn.createDocumentFragment(),t=0;n.length>t;t++){var o=n[t].A;Qn(r,2===o.c?o.s:se(o.z,e.u))}return r}}(r.y,e);n=$e(n,r.w);for(var o=r.x,a=0;o.length>a;a++){var i=o[a],c=i.A,l=2===c.c?c.s:se(c.z,e.u);n.insertBefore(l,n.childNodes[i.r])}return t&&Qn(n,t),n}(n,e);case 5:return e.s(n);default:C(10)}}function ze(n){if(3===n.nodeType)return ne(n.textContent);if(1!==n.nodeType)return ne("");for(var e=F,r=n.attributes,t=r.length;t--;){var o=r[t];e=$(u(le,o.name,o.value),e)}var a=n.tagName.toLowerCase(),i=F,c=n.childNodes;for(t=c.length;t--;)i=$(ze(c[t]),i);return f(re,a,e,i)}var _e=o((function(n,e,r,t){return function(n,e,r,t,o,a){var i=u(vn,n,e?e.flags:void 0);xt(i)||C(2);var c={},l=r(i.a),f=l.a,s=a(v,f),d=function(n,e){var r;for(var t in Rn){var o=Rn[t];o.a&&((r=r||{})[t]=o.a(t,e)),n[t]=Bn(o,e)}return r}(c,v);function v(n,e){var r=u(t,n,f);s(f=r.a,e),Un(c,r.b,o(f))}return Un(c,l.b,o(f)),d?{ports:d}:{}}(e,t,n.e4,n.fC,n.fv,(function(e,r){var o=n.fE,a=t.node,i=ze(a);return function(n,e){e(n);var r=0;function t(){r=1===r?0:(Ge(t),e(n),1)}return function(o,a){n=o,a?(e(n),2===r&&(r=1)):(0===r&&Ge(t),r=2)}}(r,(function(n){var r=o(n),t=function(n,e){var r=[];return Ce(n,e,r,0),r}(i,r);a=function(n,e,r,t){return 0===r.length?n:(Ne(n,e,r,t),$e(n,r))}(a,i,t,e),i=r}))}))})),Ae="undefined"!=typeof cancelAnimationFrame?cancelAnimationFrame:function(n){clearTimeout(n)},Ge="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:function(n){return setTimeout(n,1e3/60)},Re={addEventListener:function(){},removeEventListener:function(){}},ke="undefined"!=typeof document?document:Re,Be="undefined"!=typeof window?window:Re,Ve=t((function(n,e,r){return Fn(Ln((function(){function t(n){Nn(r(n))}return n.addEventListener(e,t,ee&&{passive:!0}),function(){n.removeEventListener(e,t)}})))})),Ee=r((function(n,e){var r=mn(n,e);return xt(r)?Br(r.a):Vr})),je=r((function(n,e){var r="g";n.fd&&(r+="m"),n.eI&&(r+="i");try{return Br(RegExp(e,r))}catch(n){return Vr}})),Ie=t((function(n,e,r){for(var t,o=[],a=0,i=r,c=e.lastIndex,l=-1;a++<n&&(t=e.exec(i))&&l!=e.lastIndex;){for(var u=t.length-1,f=Array(u);u>0;){var d=t[u];f[--u]=d?Br(d):Vr}o.push(s(Ai,t[0],t.index,a,z(f))),l=e.lastIndex}return e.lastIndex=c,z(o)})),He=0;function We(n,e){for(;e.b;e=e.b)n(e.a)}function Oe(n){for(var e=0;n.b;n=n.b)e++;return e}var Ue="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:function(n){setTimeout(n,1e3/60)},qe=a((function(n,e,r,t,o){return{$:0,a:n,b:e,c:r,d:t,e:o}})),Ye=r((function(n,e){var r=n.blend;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.BLEND),r.enabled=!0),r.a===e.a&&r.d===e.d||(n.gl.blendEquationSeparate(e.a,e.d),r.a=e.a,r.d=e.d),r.b===e.b&&r.c===e.c&&r.e===e.e&&r.f===e.f||(n.gl.blendFuncSeparate(e.b,e.c,e.e,e.f),r.b=e.b,r.c=e.c,r.e=e.e,r.f=e.f),r.g===e.g&&r.h===e.h&&r.i===e.i&&r.j===e.j||(n.gl.blendColor(e.g,e.h,e.i,e.j),r.g=e.g,r.h=e.h,r.i=e.i,r.j=e.j)})),Xe=r((function(n,e){var r=n.depthTest;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.DEPTH_TEST),r.enabled=!0),r.a!==e.a&&(n.gl.depthFunc(e.a),r.a=e.a),r.b!==e.b&&(n.gl.depthMask(e.b),r.b=e.b),r.c===e.c&&r.d===e.d||(n.gl.depthRange(e.c,e.d),r.c=e.c,r.d=e.d)})),Ke=r((function(n,e){var r=n.stencilTest;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.STENCIL_TEST),r.enabled=!0),r.d===e.d&&r.a===e.a&&r.b===e.b||(n.gl.stencilFuncSeparate(n.gl.FRONT,e.d,e.a,e.b),r.d=e.d),r.e===e.e&&r.f===e.f&&r.g===e.g||(n.gl.stencilOpSeparate(n.gl.FRONT,e.e,e.f,e.g),r.e=e.e,r.f=e.f,r.g=e.g),r.c!==e.c&&(n.gl.stencilMask(e.c),r.c=e.c),r.h===e.h&&r.a===e.a&&r.b===e.b||(n.gl.stencilFuncSeparate(n.gl.BACK,e.h,e.a,e.b),r.h=e.h,r.a=e.a,r.b=e.b),r.i===e.i&&r.j===e.j&&r.k===e.k||(n.gl.stencilOpSeparate(n.gl.BACK,e.i,e.j,e.k),r.i=e.i,r.j=e.j,r.k=e.k)})),Ze=r((function(n,e){var r=n.scissor;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.SCISSOR_TEST),r.enabled=!0),r.a===e.a&&r.b===e.b&&r.c===e.c&&r.d===e.d||(n.gl.scissor(e.a,e.b,e.c,e.d),r.a=e.a,r.b=e.b,r.c=e.c,r.d=e.d)})),Je=r((function(n,e){var r=n.colorMask;r.toggle=n.toggle,r.enabled=!0,r.a===e.a&&r.b===e.b&&r.c===e.c&&r.d===e.d||(n.gl.colorMask(e.a,e.b,e.c,e.d),r.a=e.a,r.b=e.b,r.c=e.c,r.d=e.d)})),Qe=r((function(n,e){var r=n.cullFace;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.CULL_FACE),r.enabled=!0),r.a!==e.a&&(n.gl.cullFace(e.a),r.a=e.a)})),nr=r((function(n,e){var r=n.polygonOffset;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.POLYGON_OFFSET_FILL),r.enabled=!0),r.a===e.a&&r.b===e.b||(n.gl.polygonOffset(e.a,e.b),r.a=e.a,r.b=e.b)})),er=r((function(n,e){var r=n.sampleCoverage;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.SAMPLE_COVERAGE),r.enabled=!0),r.a===e.a&&r.b===e.b||(n.gl.sampleCoverage(e.a,e.b),r.a=e.a,r.b=e.b)})),rr=function(n){n.scissor.enabled&&(n.gl.disable(n.gl.SCISSOR_TEST),n.scissor.enabled=!1)},tr=function(n){var e=n.colorMask;e.a&&e.b&&e.c&&e.d||(n.gl.colorMask(!0,!0,!0,!0),e.a=!0,e.b=!0,e.c=!0,e.d=!0)},or=["blend","depthTest","stencilTest","scissor","colorMask","cullFace","polygonOffset","sampleCoverage","sampleAlphaToCoverage"],ar=[function(n){n.blend.enabled&&(n.gl.disable(n.gl.BLEND),n.blend.enabled=!1)},function(n){n.depthTest.enabled&&(n.gl.disable(n.gl.DEPTH_TEST),n.depthTest.enabled=!1)},function(n){n.stencilTest.enabled&&(n.gl.disable(n.gl.STENCIL_TEST),n.stencilTest.enabled=!1)},rr,tr,function(n){n.gl.disable(n.gl.CULL_FACE)},function(n){n.gl.disable(n.gl.POLYGON_OFFSET_FILL)},function(n){n.gl.disable(n.gl.SAMPLE_COVERAGE)},function(n){n.gl.disable(n.gl.SAMPLE_ALPHA_TO_COVERAGE)}];function ir(n,e,r){var t=n.createShader(r);return n.shaderSource(t,"#extension GL_OES_standard_derivatives : enable\n"+e),n.compileShader(t),t}function cr(n,e){switch(e){case n.FLOAT:return{size:1,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC2:return{size:2,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC3:return{size:3,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC4:return{size:4,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_MAT4:return{size:4,arraySize:4,type:Float32Array,baseType:n.FLOAT};case n.INT:return{size:1,arraySize:1,type:Int32Array,baseType:n.INT}}}function lr(n,e,r,t){for(var o=r.a.du,a=[],i=0;o>i;i++)a.push(String.fromCharCode(97+i));var c=cr(n,e.type);if(void 0===c)throw Error("No info available for: "+e.type);var l=0,u=c.size*c.arraySize*o,f=new c.type(Oe(r.b)*u);We((function(n){!function(n,e,r,t,i){var c;if(1===o)for(c=0;e>c;c++)n[r++]=1===e?t[i]:t[i][c];else a.forEach((function(o){for(c=0;e>c;c++)n[r++]=1===e?t[o][i]:t[o][i][c]}))}(f,c.size*c.arraySize,l,n,t[e.name]||e.name),l+=u}),r.b);var s=n.createBuffer();return n.bindBuffer(n.ARRAY_BUFFER,s),n.bufferData(n.ARRAY_BUFFER,f,n.STATIC_DRAW),s}function ur(n,e){return n+"#"+e}var fr=r((function(n,e){var r=n.f,t=r.gl;return t?(t.viewport(0,0,t.drawingBufferWidth,t.drawingBufferHeight),r.depthTest.b||(t.depthMask(!0),r.depthTest.b=!0),r.stencilTest.c!==r.STENCIL_WRITEMASK&&(t.stencilMask(r.STENCIL_WRITEMASK),r.stencilTest.c=r.STENCIL_WRITEMASK),rr(r),tr(r),t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT|t.STENCIL_BUFFER_BIT),We((function(e){if(e.d.b.b){var o,a,i,c,l;if(e.b.id&&e.c.id&&(o=ur(e.b.id,e.c.id),a=r.programs[o]),!a){var u,f;e.b.id?u=r.shaders[e.b.id]:e.b.id=He++,u||(u=ir(t,e.b.src,t.VERTEX_SHADER),r.shaders[e.b.id]=u),e.c.id?f=r.shaders[e.c.id]:e.c.id=He++,f||(f=ir(t,e.c.src,t.FRAGMENT_SHADER),r.shaders[e.c.id]=f);var s=function(n,e,r){var t=n.createProgram();if(n.attachShader(t,e),n.attachShader(t,r),n.linkProgram(t),!n.getProgramParameter(t,n.LINK_STATUS))throw"Link failed: "+n.getProgramInfoLog(t)+"\nvs info-log: "+n.getShaderInfoLog(e)+"\nfs info-log: "+n.getShaderInfoLog(r);return t}(t,u,f);(a={glProgram:s,attributes:Object.assign({},e.b.attributes,e.c.attributes),currentUniforms:{},activeAttributes:[],activeAttributeLocations:[]}).uniformSetters=function(n,e,r,t){var o=r.glProgram,a=r.currentUniforms,i=0,c=e.f;function l(e,r){var t=r.name,o=n.getUniformLocation(e,t);switch(r.type){case n.INT:return function(e){a[t]!==e&&(n.uniform1i(o,e),a[t]=e)};case n.FLOAT:return function(e){a[t]!==e&&(n.uniform1f(o,e),a[t]=e)};case n.FLOAT_VEC2:return function(e){a[t]!==e&&(n.uniform2f(o,e[0],e[1]),a[t]=e)};case n.FLOAT_VEC3:return function(e){a[t]!==e&&(n.uniform3f(o,e[0],e[1],e[2]),a[t]=e)};case n.FLOAT_VEC4:return function(e){a[t]!==e&&(n.uniform4f(o,e[0],e[1],e[2],e[3]),a[t]=e)};case n.FLOAT_MAT4:return function(e){a[t]!==e&&(n.uniformMatrix4fv(o,!1,new Float32Array(e)),a[t]=e)};case n.SAMPLER_2D:var l=i++;return function(e){n.activeTexture(n.TEXTURE0+l);var r=c.textures.get(e);r||(r=e.eM(n),c.textures.set(e,r)),n.bindTexture(n.TEXTURE_2D,r),a[t]!==e&&(n.uniform1i(o,l),a[t]=e)};case n.BOOL:return function(e){a[t]!==e&&(n.uniform1i(o,e),a[t]=e)};default:return function(){}}}for(var u={},f=n.getProgramParameter(o,n.ACTIVE_UNIFORMS),s=0;f>s;s++){var d=n.getActiveUniform(o,s);u[t[d.name]||d.name]=l(o,d)}return u}(t,n,a,Object.assign({},e.b.uniforms,e.c.uniforms));var d=t.getProgramParameter(s,t.ACTIVE_ATTRIBUTES);for(i=0;d>i;i++){var v=t.getActiveAttrib(s,i),m=t.getAttribLocation(s,v.name);a.activeAttributes.push(v),a.activeAttributeLocations.push(m)}o=ur(e.b.id,e.c.id),r.programs[o]=a}r.lastProgId!==o&&(t.useProgram(a.glProgram),r.lastProgId=o),c=a.uniformSetters,Object.keys(l=e.e).forEach((function(n){var e=c[n];e&&e(l[n])}));var b=r.buffers.get(e.d);for(b||(b=function(n,e){if(e.a.dD>0){var r=n.createBuffer(),t=function(n,e){var r,t=new Uint32Array(Oe(n)*e),o=0;return We((function(n){if(1===e)t[o++]=n;else for(r=0;e>r;r++)t[o++]=n[String.fromCharCode(97+r)]}),n),t}(e.c,e.a.dD);return n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,r),n.bufferData(n.ELEMENT_ARRAY_BUFFER,t,n.STATIC_DRAW),{numIndices:t.length,indexBuffer:r,buffers:{}}}return{numIndices:e.a.du*Oe(e.b),indexBuffer:null,buffers:{}}}(t,e.d),r.buffers.set(e.d,b)),i=0;a.activeAttributes.length>i;i++){m=a.activeAttributeLocations[i],void 0===b.buffers[(v=a.activeAttributes[i]).name]&&(b.buffers[v.name]=lr(t,v,e.d,a.attributes)),t.bindBuffer(t.ARRAY_BUFFER,b.buffers[v.name]);var p=cr(t,v.type);if(1===p.arraySize)t.enableVertexAttribArray(m),t.vertexAttribPointer(m,p.size,p.baseType,!1,0,0);else for(var g=4*p.size,h=g*p.arraySize,x=0;p.arraySize>x;x++)t.enableVertexAttribArray(m+x),t.vertexAttribPointer(m+x,p.size,p.baseType,!1,h,g*x)}for(r.toggle=!r.toggle,We(Fs(r),e.a),i=0;9>i;i++){var C=r[or[i]];C.toggle!==r.toggle&&C.enabled&&(ar[i](r),C.enabled=!1,C.toggle=r.toggle)}b.indexBuffer?(t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,b.indexBuffer),t.drawElements(e.d.a.d8,b.numIndices,t.UNSIGNED_INT,0)):t.drawArrays(e.d.a.d8,0,b.numIndices)}}),n.g),e):e})),sr=t((function(n,e,r){return function(n,e,r,t){return{$:3,d:ue(n),g:e,h:r,i:t}}(e,{g:r,f:{},h:n},hr,xr)})),dr=r((function(n,e){n.contextAttributes.alpha=!0,n.contextAttributes.premultipliedAlpha=e.a})),vr=r((function(n,e){n.contextAttributes.depth=!0,n.sceneSettings.push((function(n){n.clearDepth(e.a)}))})),mr=r((function(n,e){n.contextAttributes.stencil=!0,n.sceneSettings.push((function(n){n.clearStencil(e.a)}))})),br=r((function(n){n.contextAttributes.antialias=!0})),pr=r((function(n,e){n.sceneSettings.push((function(n){n.clearColor(e.a,e.b,e.c,e.d)}))})),gr=r((function(n){n.contextAttributes.preserveDrawingBuffer=!0}));function hr(n){var e={contextAttributes:{alpha:!1,depth:!1,stencil:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1},sceneSettings:[]};We((function(n){return u(Ns,e,n)}),n.h);var r=Jn.createElement("canvas"),t=r.getContext&&(r.getContext("webgl",e.contextAttributes)||r.getContext("experimental-webgl",e.contextAttributes));return t&&"undefined"!=typeof WeakMap?(e.sceneSettings.forEach((function(n){n(t)})),t.getExtension("OES_standard_derivatives"),t.getExtension("OES_element_index_uint"),n.f.gl=t,n.f.toggle=!1,n.f.blend={enabled:!1,toggle:!1},n.f.depthTest={enabled:!1,toggle:!1},n.f.stencilTest={enabled:!1,toggle:!1},n.f.scissor={enabled:!1,toggle:!1},n.f.colorMask={enabled:!1,toggle:!1},n.f.cullFace={enabled:!1,toggle:!1},n.f.polygonOffset={enabled:!1,toggle:!1},n.f.sampleCoverage={enabled:!1,toggle:!1},n.f.sampleAlphaToCoverage={enabled:!1,toggle:!1},n.f.shaders=[],n.f.programs={},n.f.lastProgId=null,n.f.buffers=new WeakMap,n.f.textures=new WeakMap,n.f.STENCIL_WRITEMASK=t.getParameter(t.STENCIL_WRITEMASK),Ue((function(){return u(fr,n,r)}))):(r=Jn.createElement("div")).innerHTML='<a href="https://get.webgl.org/">Enable WebGL</a> to see this content!',r}function xr(n,e){return e.f=n.f,fr(e)}var Cr=r((function(n,e){return new Float64Array([n,e])}));new Float64Array(3),new Float64Array(3),new Float64Array(3);var Pr=t((function(n,e,r){return new Float64Array([n,e,r])})),Mr=r((function(n,e){return new Float64Array([e[0]*n,e[1]*n,e[2]*n])})),Tr=o((function(n,e,r,t){return new Float64Array([n,e,r,t])}));new Float64Array(16),new Float64Array(16),new Float64Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);var yr=D,Lr=x,wr=t((function(n,e,t){var o=t.c,a=t.d,i=r((function(e,r){return f(Lr,e.$?n:i,r,e.a)}));return f(Lr,i,f(Lr,n,e,a),o)})),Sr=t((function(n,e,r){for(;;){if(-2===r.$)return e;var t=r.d,o=n,a=f(n,r.b,r.c,f(Sr,n,e,r.e));n=o,e=a,r=t}})),Nr=function(n){return f(Sr,t((function(n,e,r){return u(yr,L(n,e),r)})),F,n)},Fr=1,$r=2,Dr=0,zr=function(n){return{$:1,a:n}},_r=r((function(n,e){return{$:3,a:n,b:e}})),Ar=r((function(n,e){return{$:0,a:n,b:e}})),Gr=r((function(n,e){return{$:1,a:n,b:e}})),Rr=function(n){return{$:0,a:n}},kr=function(n){return{$:2,a:n}},Br=function(n){return{$:0,a:n}},Vr={$:1},Er=Pn,jr=Q,Ir=r((function(n,e){return u(K,n,_(e))})),Hr=r((function(n,e){return z(u(X,n,e))})),Wr=t((function(n,e,r){for(;;){if(!r.b)return e;var t=r.b,o=n,a=u(n,r.a,e);n=o,e=a,r=t}})),Or=function(n){return f(Wr,r((function(n,e){return e+1})),0,n)},Ur=A,qr=t((function(n,e,r){for(;;){if(T(n,e)>=1)return r;var t=n,o=e-1,a=u(yr,e,r);n=t,e=o,r=a}})),Yr=r((function(n,e){return f(qr,n,e,F)})),Xr=r((function(n,e){return f(Ur,n,u(Yr,0,Or(e)-1),e)})),Kr=function(n){var e=n.charCodeAt(0);return 55296>e||e>56319?e:1024*(e-55296)+n.charCodeAt(1)-56320+65536},Zr=function(n){return f(Wr,yr,F,n)},Jr=function(n){var e=n.charCodeAt(0);return isNaN(e)?Vr:Br(55296>e||e>56319?L(n[0],n.slice(1)):L(n[0]+n[1],n.slice(2)))},Qr=32,nt=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),et=[],rt=j,tt=r((function(n,e){return O(e)/O(n)})),ot=function(n){return n},at=rt(u(tt,2,Qr)),it=s(nt,0,at,et,et),ct=p,lt=function(n){return{$:1,a:n}},ut=I,ft=function(n){return n.length},st=r((function(n,e){return T(n,e)>0?n:e})),dt=G,vt=g,mt=r((function(n,e){for(;;){var r=u(vt,Qr,n),t=r.b,o=u(yr,{$:0,a:r.a},e);if(!t.b)return Zr(o);n=t,e=o}})),bt=r((function(n,e){for(;;){var r=rt(e/Qr);if(1===r)return u(vt,Qr,n).a;n=u(mt,n,F),e=r}})),pt=r((function(n,e){if(e.m){var r=e.m*Qr,t=ut(u(tt,Qr,r-1)),o=n?Zr(e.B):e.B,a=u(bt,o,e.m);return s(nt,ft(e.r)+r,u(st,5,t*at),a,e.r)}return s(nt,ft(e.r),at,et,e.r)})),gt=a((function(n,e,r,t,o){for(;;){if(0>e)return u(pt,!1,{B:t,m:r/Qr|0,r:o});var a=lt(f(ct,Qr,e,n));n=n,e-=Qr,r=r,t=u(yr,a,t),o=o}})),ht=r((function(n,e){if(n>0){var r=n%Qr;return d(gt,e,n-r-Qr,n,F,f(ct,r,n-r,e))}return it})),xt=function(n){return!n.$},Ct=ln,Pt=an,Mt=tn,Tt=u(r((function(n,e){return{S:e,aF:"",X:n,as:""}})),F,F),yt=un,Lt=fn,wt=function(n){return{$:0,a:n}},St=function(n){switch(n.$){case 0:return 0;case 1:return 1;case 2:return 2;default:return 3}},Nt=re("div"),Ft=function(n){return{$:1,a:n}},$t=function(n){return{$:7,a:n}},Dt=function(n){return{$:3,a:n}},zt=t((function(n,e,r){return e(n(r))})),_t=function(n){return n},At=function(n){return n.length},Gt=Z,Rt=r((function(n,e){return 1>n?e:f(Gt,n,At(e),e)})),kt=function(n){for(var e=0,r=n.charCodeAt(0),t=43==r||45==r?1:0,o=t;n.length>o;++o){var a=n.charCodeAt(o);if(48>a||a>57)return Vr;e=10*e+a-48}return o==t?Vr:Br(45==r?-e:e)},Bt=J,Vt=yn,Et=Vt(0),jt=o((function(n,e,r,t){if(t.b){var o=t.a,a=t.b;if(a.b){var i=a.a,c=a.b;if(c.b){var l=c.a,d=c.b;if(d.b){var v=d.b;return u(n,o,u(n,i,u(n,l,u(n,d.a,r>500?f(Wr,n,e,Zr(v)):s(jt,n,e,r+1,v)))))}return u(n,o,u(n,i,u(n,l,e)))}return u(n,o,u(n,i,e))}return u(n,o,e)}return e})),It=t((function(n,e,r){return s(jt,n,e,0,r)})),Ht=r((function(n,e){return f(It,r((function(e,r){return u(yr,n(e),r)})),F,e)})),Wt=wn,Ot=r((function(n,e){return u(Wt,(function(e){return Vt(n(e))}),e)})),Ut=t((function(n,e,r){return u(Wt,(function(e){return u(Wt,(function(r){return Vt(u(n,e,r))}),r)}),e)})),qt=function(n){return f(It,Ut(yr),Vt(F),n)},Yt=Vn,Xt=r((function(n,e){var r=e;return Fn(u(Wt,Yt(n),r))}));Rn.Task=kn(Et,t((function(n,e){return u(Ot,(function(){return 0}),qt(u(Ht,Xt(n),e)))})),t((function(){return Vt(0)})),r((function(n,e){return u(Ot,n,e)})));var Kt=jn("Task"),Zt=r((function(n,e){return Kt(u(Ot,n,e))})),Jt=_e,Qt=r((function(n,e){return{$:0,a:n,b:e}})),no=function(n){return{$:6,a:n}},eo=r((function(n,e){return{$:4,a:n,b:e}})),ro=r((function(n,e){return{$:2,a:n,b:e}})),to=In,oo=Hn,ao=function(n){return{$:1,a:n}},io=t((function(n,e,r){return{cJ:r,el:e,eq:n}})),co=Vt(f(io,F,Vr,0)),lo=function(n){return Ln((function(e){var r=n.f;2===r.$&&r.c&&r.c(),n.f=null,e(yn(0))}))},uo=Ln((function(n){n(yn(Date.now()))})),fo=Ln((function(n){var e=Ge((function(){n(yn(Date.now()))}));return function(){Ae(e)}})),so=En,vo=Fn,mo=t((function(n,e,r){var t=r.el,o=r.cJ,a=L(t,e);return 1===a.a.$?a.b.b?u(Wt,(function(n){return u(Wt,(function(r){return Vt(f(io,e,Br(n),r))}),uo)}),vo(u(Wt,so(n),fo))):co:a.b.b?Vt(f(io,e,t,o)):u(Wt,(function(){return co}),lo(a.a.a))})),bo=_t,po=t((function(n,e,r){var t=r.eq,o=r.cJ,a=function(r){return u(Yt,n,(0,r.a)(r.$?e-o:bo(e)))};return u(Wt,(function(n){return u(Wt,(function(){return Vt(f(io,t,Br(n),e))}),qt(u(Ht,a,t)))}),vo(u(Wt,so(n),fo)))})),go=t((function(n,e,r){return n(e(r))}));Rn["Browser.AnimationManager"]=kn(co,mo,po,0,r((function(n,e){return e.$?ao(u(go,n,e.a)):{$:0,a:u(go,n,e.a)}})));var ho=jn("Browser.AnimationManager"),xo=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),Co=r((function(n,e){return{ed:e,eq:n}})),Po={$:-2},Mo=Po,To=Vt(u(Co,F,Mo)),yo=function(n){return L(N(n.a?"w_":"d_",n.b),n)},Lo=a((function(n,e,r,t,o){return{$:-1,a:n,b:e,c:r,d:t,e:o}})),wo=a((function(n,e,r,t,o){if(-1!==o.$||o.a){if(-1!==t.$||t.a||-1!==t.d.$||t.d.a)return d(Lo,n,e,r,t,o);var a=t.d;return i=t.e,d(Lo,0,t.b,t.c,d(Lo,1,a.b,a.c,a.d,a.e),d(Lo,1,e,r,i,o))}var i,c=o.b,l=o.c,u=o.d,f=o.e;return-1!==t.$||t.a?d(Lo,n,c,l,d(Lo,0,e,r,t,u),f):d(Lo,0,e,r,d(Lo,1,t.b,t.c,t.d,i=t.e),d(Lo,1,c,l,u,f))})),So=y,No=t((function(n,e,r){if(-2===r.$)return d(Lo,0,n,e,Po,Po);var t=r.a,o=r.b,a=r.c,i=r.d,c=r.e;switch(u(So,n,o)){case 0:return d(wo,t,o,a,f(No,n,e,i),c);case 1:return d(Lo,t,o,e,i,c);default:return d(wo,t,o,a,i,f(No,n,e,c))}})),Fo=t((function(n,e,r){var t=f(No,n,e,r);return-1!==t.$||t.a?t:d(Lo,1,t.b,t.c,t.d,t.e)})),$o=function(n){return f(Wr,r((function(n,e){return f(Fo,n.a,n.b,e)})),Mo,n)},Do=t((function(n,e,r){for(;;){if(-2===r.$)return e;var t=r.e,o=n,a=f(n,r.b,r.c,f(Do,n,e,r.d));n=o,e=a,r=t}})),zo=i((function(n,e,o,a,i,c){var l=f(Do,t((function(r,t,a){n:for(;;){var i=a.a,c=a.b;if(i.b){var l=i.a,u=l.a,d=l.b,v=i.b;if(0>T(u,r)){r=r,t=t,a=L(v,f(n,u,d,c));continue n}return T(u,r)>0?L(i,f(o,r,t,c)):L(v,s(e,u,d,t,c))}return L(i,f(o,r,t,c))}})),L(Nr(a),c),i),u=l.a,d=l.b;return f(Wr,r((function(e,r){return f(n,e.a,e.b,r)})),d,u)})),_o=r((function(n,e){return{dy:e,dF:n}})),Ao=t((function(n,e,r){return u(Ot,(function(n){return L(e,n)}),f(Ve,r.a?Be:ke,r.b,(function(r){return u(so,n,u(_o,e,r))})))})),Go=r((function(n,e){return f(Do,Fo,e,n)})),Ro=t((function(n,e,r){var a=t((function(e,r,t){var o=t.c;return w(t.a,t.b,u(yr,f(Ao,n,e,r),o))})),i=t((function(n,e,r){var t=r.b,o=r.c;return w(u(yr,e,r.a),t,o)})),c=o((function(n,e,r,t){var o=t.c;return w(t.a,f(Fo,n,e,t.b),o)})),l=u(Ht,yo,e),s=v(zo,i,c,a,r.ed,$o(l),w(F,Mo,F)),d=s.b,m=s.c;return u(Wt,(function(n){return Vt(u(Co,l,u(Go,d,$o(n))))}),u(Wt,(function(){return qt(m)}),qt(u(Ht,lo,s.a))))})),ko=t((function(n,e,r){var t=n(e);return t.$?r:u(yr,t.a,r)})),Bo=r((function(n,e){return f(It,ko(n),F,e)}));Rn["Browser.Events"]=kn(To,Ro,t((function(n,e,r){var t=e.dF,o=e.dy,a=u(Bo,(function(n){var e=n.b.c;return P(n.a,t)?u(Ee,e,o):Vr}),r.eq);return u(Wt,(function(){return Vt(r)}),qt(u(Ht,Yt(n),a)))})),0,r((function(n,e){return f(xo,e.a,e.b,u(yt,n,e.c))})));var Vo,Eo,jo,Io,Ho,Wo,Oo,Uo,qo,Yo,Xo,Ko,Zo,Jo,Qo,na,ea,ra,ta,oa,aa,ia,ca,la,ua,fa,sa,da,va,ma,ba,pa,ga,ha,xa,Ca,Pa,Ma,Ta,ya,La,wa,Sa,Na,Fa=jn("Browser.Events"),$a=t((function(n,e,r){return Fa(f(xo,n,e,r))})),Da=u($a,0,"click"),za=u($a,0,"keydown"),_a=u($a,0,"keyup"),Aa=u($a,0,"mousedown"),Ga=u($a,0,"mousemove"),Ra=u($a,0,"mouseup"),ka=en,Ba=rn,Va=r((function(n,e){return n(e?1:0)})),Ea=function(n){var e=void 0!==Jn.hidden?{e1:"hidden",eL:"visibilitychange"}:void 0!==Jn.mozHidden?{e1:"mozHidden",eL:"mozvisibilitychange"}:void 0!==Jn.msHidden?{e1:"msHidden",eL:"msvisibilitychange"}:void 0!==Jn.webkitHidden?{e1:"webkitHidden",eL:"webkitvisibilitychange"}:{e1:"hidden",eL:"visibilitychange"};return f($a,0,e.eL,u(yt,Va(n),u(Pt,"target",u(Pt,e.e1,Ba))))},ja=on,Ia=function(n){return{$:3,b:n}},Ha=Xn("touchCancel",Ia(u(Ct,(function(n){return u(Ct,(function(e){return u(Ct,(function(r){return wt({bl:r,cL:e,cM:n})}),u(Pt,"identifier",ka))}),u(Pt,"pageX",Mt))}),u(Pt,"pageY",Mt)))),Wa=Xn("touchEnd",Ia(u(Ct,(function(n){return u(Ct,(function(e){return u(Ct,(function(r){return wt({bl:r,cL:e,cM:n})}),u(Pt,"identifier",ka))}),u(Pt,"pageX",Mt))}),u(Pt,"pageY",Mt)))),Oa=Xn("touchMove",Ia(u(Ct,(function(n){return u(Ct,(function(e){return u(Ct,(function(r){return wt({bl:r,cL:e,cM:n})}),u(Pt,"identifier",ka))}),u(Pt,"pageX",Mt))}),u(Pt,"pageY",Mt)))),Ua=Xn("touchStart",Ia(u(Ct,(function(n){return u(Ct,(function(e){return u(Ct,(function(r){return wt({bl:r,cL:e,cM:n})}),u(Pt,"identifier",ka))}),u(Pt,"pageX",Mt))}),u(Pt,"pageY",Mt)))),qa=to(u(yr,(Na=u(zt,dt(.001),(function(n){return{$:6,a:n}})),ho(ao(Na))),u(Ht,oo($t),z([(Vo=ro,f($a,1,"resize",u(Pt,"target",f(Lt,Vo,u(Pt,"innerWidth",ka),u(Pt,"innerHeight",ka))))),_a(u(yt,Qt(!1),u(Pt,"key",ja))),za(u(yt,Qt(!0),u(Pt,"key",ja))),Ea(Dt),Da(wt({$:5})),Aa(wt(no(!0))),Ra(wt(no(!1))),Ga(f(Lt,eo,u(Pt,"pageX",Mt),u(Pt,"pageY",Mt))),Ua((function(n){return{$:7,a:n}})),Oa((function(n){return{$:8,a:n}})),Wa((function(n){return{$:9,a:n}})),Ha((function(n){return{$:10,a:n}}))])))),Ya={$:1},Xa=function(n){return{$:2,a:n}},Ka=r((function(n,e){return{$:0,a:n,b:e}})),Za=function(n){return n.b.k.a},Ja=function(n){var e=n.b.E;return e.b?Br(u(Ka,n.a,{k:e.a,E:e.b,q:N(n.b.q,z([n.b.k]))})):Vr},Qa=r((function(n,e){return S(e,{ci:n})})),ni=r((function(n,e){return S(e,e.I.ci?{I:u(Qa,!1,e.I),a4:e.a4+n}:{a4:e.a4+n})})),ei=r((function(n,e){return e.$?n:e.a})),ri=t((function(n,e,r){var t=r.a,o=r.b;switch(t.$){case 1:return r;case 2:var a=t.a.c7;return(T(a+e,Za(r).a4)>0?u(zt,Ja,ei(u(Ka,Ya,o))):_t)(u(Ka,Xa({c7:a+e}),o));default:var i=o.k,c=i.b,l=u(ni,e,i.a);return u(Ka,t,{k:L(l,u(n,l,c)),E:F,q:N(o.q,z([o.k]))})}})),ti=r((function(n,e){n:for(;;){if(n>0){if(e.b){n-=1,e=e.b;continue n}return e}return e}})),oi=t((function(n,e,r){n:for(;;){if(n>0){if(e.b){var t=e.a;n-=1,e=e.b,r=u(yr,t,r);continue n}return r}return r}})),ai=r((function(n,e){return Zr(f(oi,n,e,F))})),ii=t((function(n,e,r){if(e>0){var t=L(e,r);n:for(;;){e:for(;;){if(!t.b.b)return r;if(!t.b.b.b){if(1===t.a)break n;break e}switch(t.a){case 1:break n;case 2:var o=t.b;return z([o.a,o.b.a]);case 3:if(t.b.b.b.b){var a=t.b,i=a.b;return z([a.a,i.a,i.b.a])}break e;default:if(t.b.b.b.b&&t.b.b.b.b.b){var c=t.b,l=c.b,s=l.b,d=s.b,v=d.b;return u(yr,c.a,u(yr,l.a,u(yr,s.a,u(yr,d.a,n>1e3?u(ai,e-4,v):f(ii,n+1,e-4,v)))))}break e}}return r}return z([t.b.a])}return F})),ci=r((function(n,e){return f(ii,0,n,e)})),li=r((function(n,e){var r=e.b.E,t=N(e.b.q,N(z([e.b.k]),r)),o=u(ci,n,t),a=u(ti,n,t);if(a.b)return u(Ka,Ya,{k:a.a,E:a.b,q:o});var i=Zr(o);return i.b?u(Ka,Ya,{k:i.a,E:F,q:Zr(i.b)}):e})),ui={$:0},fi=r((function(n,e){switch(n.$){case 1:return function(n){var e=n.b.q,r=n.b.E;return e.b?u(Ka,Ya,{k:e.a,E:N(e.b,N(z([n.b.k]),r)),q:F}):n}(e);case 2:return u(ei,e,function(n){var e=n.b.k,r=n.b.E,t=Zr(n.b.q);if(t.b){var o=t.b;return Br(u(Ka,Ya,{k:t.a,E:u(yr,e,r),q:Zr(o)}))}return Vr}(e));case 3:return u(Ka,Ya,e.b);case 4:return function(n){return u(Ka,ui,n.b)}(e);case 5:return function(n){var e=n.b;return u(Ka,Xa({c7:Za(n).a4}),e)}(e);case 6:return u(ei,e,Ja(e));case 7:return function(n){var e=n.b.q,r=n.b.k,t=Zr(n.b.E);if(t.b){var o=t.b;return u(Ka,Ya,{k:t.a,E:F,q:N(e,N(z([r]),Zr(o)))})}return n}(e);default:return u(li,n.a,e)}})),si=r((function(n,e){var r=e.b;return L(n(e.a),r)})),di=o((function(n,e,r,t){return{ci:t,aS:r,bF:n,bG:e}})),vi=Mo,mi={cc:!1,aS:!1,co:!1,O:vi,ai:!1,a1:!1,c3:!1,c4:!1,b9:!1},bi=r((function(n,e){return S(e,{aS:n})})),pi=t((function(n,e,r){return S(r,{bF:n,bG:e})})),gi=function(n){if(-1===n.$&&-1===n.d.$&&-1===n.e.$){if(-1!==n.e.d.$||n.e.d.a){var e=n.d,r=n.e;return i=r.b,c=r.c,t=r.d,f=r.e,d(Lo,1,n.b,n.c,d(Lo,0,e.b,e.c,e.d,e.e),d(Lo,0,i,c,t,f))}var t,o=n.d,a=n.e,i=a.b,c=a.c,l=(t=a.d).d,u=t.e,f=a.e;return d(Lo,0,t.b,t.c,d(Lo,1,n.b,n.c,d(Lo,0,o.b,o.c,o.d,o.e),l),d(Lo,1,i,c,u,f))}return n},hi=function(n){if(-1===n.$&&-1===n.d.$&&-1===n.e.$){if(-1!==n.d.d.$||n.d.d.a){var e=n.d,r=n.e;return u=r.b,f=r.c,s=r.d,v=r.e,d(Lo,1,t=n.b,o=n.c,d(Lo,0,e.b,e.c,e.d,c=e.e),d(Lo,0,u,f,s,v))}var t=n.b,o=n.c,a=n.d,i=a.d,c=a.e,l=n.e,u=l.b,f=l.c,s=l.d,v=l.e;return d(Lo,0,a.b,a.c,d(Lo,1,i.b,i.c,i.d,i.e),d(Lo,1,t,o,c,d(Lo,0,u,f,s,v)))}return n},xi=c((function(n,e,r,t,o,a,i){if(-1!==a.$||a.a){n:for(;;){if(-1===i.$&&1===i.a){if(-1===i.d.$){if(1===i.d.a)return hi(e);break n}return hi(e)}break n}return e}return d(Lo,r,a.b,a.c,a.d,d(Lo,0,t,o,a.e,i))})),Ci=function(n){if(-1===n.$&&-1===n.d.$){var e=n.a,r=n.b,t=n.c,o=n.d,a=o.d,i=n.e;if(1===o.a){if(-1!==a.$||a.a){var c=gi(n);if(-1===c.$){var l=c.e;return d(wo,c.a,c.b,c.c,Ci(c.d),l)}return Po}return d(Lo,e,r,t,Ci(o),i)}return d(Lo,e,r,t,Ci(o),i)}return Po},Pi=r((function(n,e){if(-2===e.$)return Po;var r=e.a,t=e.b,o=e.c,a=e.d,i=e.e;if(0>T(n,t)){if(-1===a.$&&1===a.a){var c=a.d;if(-1!==c.$||c.a){var l=gi(e);if(-1===l.$){var f=l.e;return d(wo,l.a,l.b,l.c,u(Pi,n,l.d),f)}return Po}return d(Lo,r,t,o,u(Pi,n,a),i)}return d(Lo,r,t,o,u(Pi,n,a),i)}return u(Mi,n,m(xi,n,e,r,t,o,a,i))})),Mi=r((function(n,e){if(-1===e.$){var r=e.a,t=e.b,o=e.c,a=e.d,i=e.e;if(P(n,t)){var c=function(n){for(;;){if(-1!==n.$||-1!==n.d.$)return n;n=n.d}}(i);return-1===c.$?d(wo,r,c.b,c.c,a,Ci(i)):Po}return d(wo,r,t,o,a,u(Pi,n,i))}return Po})),Ti=r((function(n,e){var r=u(Pi,n,e);return-1!==r.$||r.a?r:d(Lo,1,r.b,r.c,r.d,r.e)})),yi=r((function(n,e){return{dn:-e/2,cq:e,ai:-n/2,a1:n/2,bA:e/2,de:n}})),Li=r((function(n,e){return{S:e,X:n}})),wi=f(Lt,r((function(n,e){return L(n,e)})),u(Pt,"A1",ja),u(Pt,"A2",ja)),Si=sn,Ni=s(Si,t((function(n,e,r){return w(n,e,r)})),u(Pt,"A1",Mt),u(Pt,"A2",Mt),u(Pt,"A3",Mt)),Fi=f(Lt,r((function(n,e){return L(n,e)})),u(Pt,"A1",ja),u(Pt,"A2",Ni)),$i=f(Lt,Li,u(Pt,"floats",Ia(Fi)),u(Pt,"colors",Ia(wi))),Di=dn,zi=r((function(n,e){return e.$?Vr:n(e.a)})),_i=r((function(n,e){return e.$?zr(e.a):n(e.a)})),Ai=o((function(n,e,r,t){return{e3:e,fb:n,fh:r,fu:t}})),Gi=Ie,Ri=r((function(n,e){return e.$?zr(n):Rr(e.a)})),ki=je,Bi=function(n){return n.b?Br(n.a):Vr},Vi=r((function(n,e){return e.$?Vr:Br(n(e.a))})),Ei=r((function(n,e){return e.$?zr(e.a):Rr(n(e.a))})),ji=r((function(n,e){return Kr(e)-Kr(n)})),Ii=t((function(n,e,r){var t=Kr(r);return 1>T(Kr(n),t)&&1>T(t,Kr(e))})),Hi=r((function(n,e){var r=f(Ii,"0","9",e)?Rr(u(ji,"0",e)):f(Ii,"a","z",e)?Rr(10+u(ji,"a",e)):f(Ii,"A","Z",e)?Rr(10+u(ji,"A",e)):zr({$:0,a:e});return u(_i,(function(r){return 0>T(r,n)?Rr(r):zr({$:1,a:e})}),r)})),Wi=r((function(n,e){var r=Jr(e);if(1===r.$)return Rr(0);var t=r.a,o=t.b;return u(_i,(function(e){return u(_i,(function(r){return Rr(e+r*n)}),u(Wi,n,o))}),u(Hi,n,t.a))})),Oi=function(n){for(var e=n.length,r=Array(e),t=0;e>t;){var o=n.charCodeAt(t);55296>o||o>56319?(r[e-t]=n[t],t++):(r[e-t]=n[t+1],r[e-++t]=n[t-1],t++)}return r.join("")},Ui=r((function(n,e){return 2>n||n>36?zr({$:2,a:n}):u(Wi,n,Oi(e))})),qi=Ui(16),Yi=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),Xi=t((function(n,e,r){return s(Yi,n,e,r,1)})),Ki=o((function(n,e,r,t){return s(Yi,n,e,r,t)})),Zi=R,Ji=H,Qi=r((function(n,e){var r=u(Zi,10,n);return Ji(e*r)/r})),nc=Y,ec=function(n){return f(nc,yr,F,n)},rc=(Eo=function(n){var e=ec(n);if(e.b&&!e.b.b){var r=e.a;return _(z([r,r])).join("")}return n},u(zt,(function(n){return n.toLowerCase()}),u(zt,(function(n){return u(Vi,(function(e){return f(Gi,1,e,n)}),u(ki,{eI:!1,fd:!1},"^#?(?:(?:([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2}))|(?:([a-f\\d])([a-f\\d])([a-f\\d]))|(?:([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2}))|(?:([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d])))$"))}),u(zt,zi(Bi),u(zt,Vi((function(n){return n.fu})),u(zt,Vi(Bo(_t)),u(zt,Ri("Parsing hex regex failed"),_i((function(n){var e=u(Ht,u(zt,Eo,u(zt,qi,Ei(ot))),n);n:for(;;){if(e.b&&!e.a.$&&e.b.b&&!e.b.a.$&&e.b.b.b&&!e.b.b.a.$){if(e.b.b.b.b){if(e.b.b.b.a.$||e.b.b.b.b.b)break n;var r=e.b,t=r.b;return Rr(s(Ki,e.a.a/255,r.a.a/255,t.a.a/255,u(Qi,2,t.b.a.a/255)))}var o=e.b;return Rr(f(Xi,e.a.a/255,o.a.a/255,o.b.a.a/255))}break n}return zr("Parsing ints from hex failed")}))))))))),tc=r((function(n,e){return L(e.a,n(e.b))})),oc=s(Yi,1,1,1,1),ac=r((function(n,e){return e.$?n:e.a})),ic=u(zt,Di($i),u(zt,Ei((function(n){return{S:u(Ht,tc(u(zt,rc,ac(oc))),n.S),aF:"",X:n.X,as:""}})),ac(Tt))),cc=function(n){return f(Wr,r((function(n,e){return f(Tn,n.a,n.b,e)})),{},n)},lc=Mn,uc=function(n){var e=n.b;return cc(z([L("A1",lc(n.a)),L("A2",lc(e))]))},fc=Mn,sc=function(n){var e=n.b,r=n.c;return cc(z([L("A1",fc(n.a)),L("A2",fc(e)),L("A3",fc(r))]))},dc=function(n){var e=n.b;return cc(z([L("A1",lc(n.a)),L("A2",sc(e))]))},vc=r((function(n,e){return f(Wr,function(n){return r((function(e,r){return r.push(n(e)),r}))}(n),[],e)})),mc=q,bc=function(n){return u(mc,n,"")},pc=t((function(n,e,r){return n>0?f(pc,n>>1,N(e,e),1&n?N(r,e):r):r})),gc=r((function(n,e){return f(pc,n,e,"")})),hc=t((function(n,e,r){return N(u(gc,n-At(r),bc(e)),r)})),xc=function(n){return 0>n||n>1114111?"�":n>65535?String.fromCharCode(Math.floor((n-=65536)/1024)+55296,n%1024+56320):String.fromCharCode(n)},Cc=k,Pc=function(n){var e=function(n){return 10>n?jr(n):bc(xc(87+n))};return 16>n?e(n):N(Pc(n/16|0),e(u(Cc,16,n)))},Mc=u(zt,Pc,u(hc,2,"0")),Tc=function(n){return{aQ:n.d,cg:n.c,cp:n.b,cY:n.a}},yc=function(n){var e=Tc(n),r=e.cY,t=e.cp,o=e.cg;return u(Ir,"",u(yr,"#",u(Ht,u(zt,Ji,Mc),z([255*r,255*t,255*o]))))},Lc=u(zt,(function(n){return{S:u(Ht,tc(yc),n.S),X:n.X}}),u(zt,(function(n){return cc(z([L("floats",u(vc,dc,n.X)),L("colors",u(vc,uc,n.S))]))}),Er(0))),wc=function(n){return 0>n?-n:n},Sc=function(n){if(0===n.length||/[\sxbo]/.test(n))return Vr;var e=+n;return e==e?Br(e):Vr},Nc=t((function(n,e,r){return u(ei,NaN,Sc(u(n,e,r)))})),Fc=function(n){return!n},$c=r((function(n,e){for(;;){if(!e.b)return!1;var r=e.b;if(n(e.a))return!0;n=n,e=r}})),Dc=r((function(n,e){var r=u($c,(function(n){return"0"!==n&&"."!==n}),ec(e));return N(n&&r?"-":"",e)})),zc=Q,_c=function(n){var e=n.a,r=n.b;if("9"===e){var t=Jr(r);return 1===t.$?"01":u(mc,"0",_c(t.a))}var o=Kr(e);return o>=48&&57>o?u(mc,xc(o+1),r):"0"},Ac=function(n){return n===1/0||n===-1/0},Gc=U,Rc=t((function(n,e,r){return N(r,u(gc,n-At(r),bc(e)))})),kc=function(n){var e=u(Hr,".",n);return e.b?L(e.a,e.b.b?e.b.a:"0"):L("0","0")},Bc=t((function(n,e,r){if(Ac(r)||Gc(r))return zc(r);var t=0>r,o=kc(function(n){var e=u(Hr,"e",zc(wc(n)));if(e.b){if(e.b.b){var r=e.a,t=e.b.a,o=u(ei,0,kt(u(Bt,"+",t)?u(Rt,1,t):t)),a=kc(r),i=N(a.a,a.b),c=0>o?u(ei,"0",u(Vi,(function(n){return n.a+"."+n.b}),u(Vi,si(bc),Jr(N(u(gc,wc(o),"0"),i))))):f(Rc,o+1,"0",i);return N(0>n?"-":"",c)}return N(0>n?"-":"",r=e.a)}return""}(wc(r))),a=o.a,i=o.b,c=At(a)+e,l=N(u(gc,1-c,"0"),f(Rc,c,"0",N(a,i))),s=At(l),d=u(st,1,c),v=u(n,t,f(Gt,d,s,l)),m=f(Gt,0,d,l),b=v?Oi(u(ei,"1",u(Vi,_c,Jr(Oi(m))))):m,p=At(b),g="0"===b?b:e>0?0>T(e,At(i))?f(Gt,0,p-e,b)+"."+f(Gt,p-e,p,b):N(a+".",f(Rc,e,"0",i)):N(b,u(gc,wc(e),"0"));return u(Dc,t,g)})),Vc=Bc(r((function(n,e){var r,t=Jr(e);return 1!==t.$&&("5"===t.a.a?""!==t.a.b||!n:(r=Kr(t.a.a))>53&&n||r>=53&&!n)}))),Ec=Nc(Vc),jc=t((function(n,e,r){var t=u(tt,10,wc(e-n));return u(Ec,0>t?3:1>t?2:2>t?1:0,r)})),Ic=r((function(n,e){switch(n.$){case 2:var r=ic(e.as);return S(r,{aF:r.aF,as:r.as});case 3:return S(e,{as:n.a});case 4:return S(e,{aF:Lc(e)});case 0:var t=n.a,o=n.b;return S(e,{X:u(Ht,(function(n){var e=n.a,r=n.b,a=r.a,i=r.c;return P(e,t)?L(e,w(a,f(jc,a,i,o),i)):n}),e.X)});default:return t=n.a,o=n.b,S(e,{S:u(Ht,(function(n){var e=n.a;return P(e,t)?L(e,o):n}),e.S)})}})),Hc=r((function(n,e){return f(Fo,n,0,e)})),Wc=r((function(n,e){return u(Ti,n,e)})),Oc=t((function(n,e,r){var t=u(n?Hc:Wc,e,r.O);switch(e){case" ":return S(r,{O:t,c4:n});case"Enter":return S(r,{co:n,O:t});case"Shift":return S(r,{O:t,c3:n});case"Backspace":return S(r,{cc:n,O:t});case"ArrowUp":return S(r,{O:t,b9:n});case"ArrowDown":return S(r,{aS:n,O:t});case"ArrowLeft":return S(r,{O:t,ai:n});case"ArrowRight":return S(r,{O:t,a1:n});default:return S(r,{O:t})}})),Uc=r((function(n,e){switch(n.$){case 1:var r=n.a.fF;return S(e,{ad:u(yi,r.de,r.cq)});case 2:return S(e,{ad:u(yi,n.a,n.b)});case 3:return S(e,{bm:mi,I:s(di,e.I.bF,e.I.bG,!1,!1)});case 0:return S(e,{bm:f(Oc,n.a,n.b,e.bm)});case 4:return S(e,{I:f(pi,e.ad.ai+n.a,e.ad.bA-n.b,e.I)});case 5:return S(e,{I:u(Qa,!0,e.I)});case 6:return S(e,{I:u(bi,n.a,e.I)});case 7:case 8:return S(e,{ae:f(Wr,(function(n){return u(Fo,n.bl,{bF:e.ad.ai+n.cL,bG:e.ad.bA-n.cM})}),e.ae,n.a)});case 9:case 10:return S(e,{ae:f(Wr,(function(n){return Ti(n.bl)}),e.ae,n.a)});default:return S(e,{aR:u(Ic,n.a,e.aR)})}})),qc=r((function(n,e){var r=e.b;return u(Ka,e.a,S(r,{k:u(si,Uc(n),r.k)}))})),Yc=t((function(n,e,r){var t=r.b,o=t.k;return u(Ka,r.a,S(t,{k:u(tc,u(n,o.a,e),o)}))})),Xc=o((function(n,e,r,t){switch(r.$){case 0:return t;case 1:return S(t,{a8:r.a});case 2:return S(t,{bf:!1});case 3:return S(t,{bf:!0});case 4:return S(t,{R:f(Yc,e,r.a,t.R)});case 5:return S(t,{R:u(fi,r.a,t.R)});case 7:return S(t,{R:u(qc,r.a,t.R)});default:return S(t,{R:f(ri,n,r.a,t.R)})}})),Kc=(Sa=function(){return{en:(n=ke.body,e=ke.documentElement,{de:Math.max(n.scrollWidth,n.offsetWidth,e.scrollWidth,e.offsetWidth,e.clientWidth),cq:Math.max(n.scrollHeight,n.offsetHeight,e.scrollHeight,e.offsetHeight,e.clientHeight)}),fF:{bF:Be.pageXOffset,bG:Be.pageYOffset,de:ke.documentElement.clientWidth,cq:ke.documentElement.clientHeight}};var n,e},Ln((function(n){Ge((function(){n(yn(Sa()))}))}))),Zc=r((function(n,e){return{aR:e,cm:n.cm,bm:mi,I:s(di,0,0,!1,!1),ad:u(yi,600,600),a4:0,ae:Mo}})),Jc=r((function(n,e){return u(Ka,ui,{k:L(n,e(n)),E:F,q:F})})),Qc=In,nl=Qc(F),el=function(n){return{$:11,a:n}},rl=function(n){return{$:4,a:n}},tl=function(n){return{$:5,a:n}},ol={$:2},al={$:0},il=function(n){return{$:1,a:n}},cl={$:3},ll=r((function(n){return n})),ul=re("button"),fl=function(n){return n?"Level Editor":"Configurations"},sl=function(n){return u(ei,0,Bi(u(Bo,(function(e){return P(fl(e),n)?Br(e):Vr}),z([0,1]))))},dl=oe,vl=dl,ml=ae,bl=r((function(n,e){return u(ml,n,{$:0,a:e})})),pl=r((function(n,e){return f(It,Pt,e,n)})),gl=u(pl,z(["target","value"]),ja),hl=function(n){return u(bl,"click",wt(n))},xl=re("option"),Cl=re("select"),Pl=ie,Ml=Pl,Tl=ne,yl=Tl,Ll=r((function(n,e){return u(ce,n,lc(e))})),wl=Ll("value"),Sl=r((function(n,e){return{$:1,a:n,b:e}})),Nl=r((function(n,e){return{$:0,a:n,b:e}})),Fl=s(Yi,0,0,0,1),$l=u(ul,z([u(Ml,"cursor","pointer"),hl({$:4})]),z([yl("Export Configurations as json")])),Dl=re("h3"),zl=re("p"),_l=Mn,Al=r((function(n,e){return u(ce,n,_l(e))})),Gl=Al("readOnly"),Rl=re("textarea"),kl=function(n){return u(Nt,F,z([u(Rl,z([Gl(!0)]),z([yl(n.aF)]))]))},Bl=function(n){return u(Nt,F,z([u(Dl,F,z([yl("Export Configurations")])),u(zl,F,z([$l])),u(zl,F,z([kl(n)]))]))},Vl=Ll("htmlFor"),El=re("hr"),jl=Ll("id"),Il=u(ul,z([u(Ml,"cursor","pointer"),hl({$:2})]),z([yl("Import Configurations")])),Hl=function(n){return{$:3,a:n}},Wl=function(n){return L(n,!0)},Ol=r((function(n,e){return u(ml,n,{$:1,a:e})})),Ul=function(n){return u(Ol,"input",u(yt,Wl,u(yt,n,gl)))},ql=function(n){return u(Nt,F,z([u(Rl,z([Ul(Hl)]),z([yl(n.as)]))]))},Yl=function(n){return u(Nt,F,z([u(Dl,F,z([yl("Import Configurations")])),u(zl,F,z([ql(n)])),u(zl,F,z([Il]))]))},Xl=re("input"),Kl=re("label"),Zl=Ll("max"),Jl=Ll("min"),Ql=Ll("name"),nu=re("span"),eu=Ll("type"),ru=function(n){return{$:0,a:n}},tu=function(n){return Or(n.b.q)},ou=function(n){return u(Xl,z([u(Ml,"position","absolute"),eu("range"),u(Ml,"width","100%"),Jl("0"),Zl(jr((e=n,r=e.b.E,Or(e.b.q)+1+Or(r)-1))),wl(jr(tu(n))),Ul(u(zt,kt,u(zt,ei(0),ru)))]),F);var e,r},au=function(n){var e=n.b.k,r=n.b.E,t=u(ei,e,Bi(n.b.q)).a.a4,o=u(ei,e,Bi(Zr(r))).a.a4-t,a=ut(o/1);return u(Nt,z([u(Ml,"position","absolute"),u(Ml,"width","100%"),u(Ml,"height","20px")]),u(Ht,(function(n){return u(Nt,z([u(Ml,"position","absolute"),u(Ml,"background-color","yellow"),u(Ml,"width","1px"),u(Ml,"height","20px"),u(Ml,"left",zc(100*n*1/o)+"%")]),F)}),u(Yr,0,a)))},iu={$:1},cu={$:7},lu={$:6},uu={$:2},fu={$:3},su={$:5},du={$:4},vu=r((function(n,e){return u(ul,z([u(Ml,"display","inline-block"),u(Ml,"width","30px"),u(Ml,"height","30px"),u(Ml,"margin","2px"),u(Ml,"padding","0px"),u(Ml,"top","0px"),u(Ml,"font-size","20px"),hl(n)]),z([yl(e)]))})),mu=function(n){return u(Nt,z([u(Ml,"width","100%")]),z([(e=n,r=e.a,u(Nt,F,z([u(vu,iu,"⏮️"),u(vu,uu,"◀️"),1===r.$?u(vu,su,"▶️"):u(vu,fu,"⏸️"),r.$?u(vu,du,"⏺️"):u(vu,fu,"⏹"),u(vu,lu,"⏯️"),u(vu,cu,"⏭️")]))),u(Nt,F,z([au(n),ou(n)]))]));var e,r},bu=t((function(n,e,t){var o,a,i,c,l=t.R.b.k.b,f=u(Nt,z([u(Ml,"margin-left","0px")]),z([u(Cl,z([(o=u(zt,sl,il),u(bl,"change",u(yt,o,gl))),wl(fl(t.a8)),u(Ml,"width","200px"),u(Ml,"height","40px"),u(Ml,"font-size","20px")]),u(Ht,(function(n){return u(xl,z([wl(fl(n))]),z([yl(fl(n))]))}),z([0,1])))])),s=r((function(n,e){return u(ul,z([u(Ml,"font-size","30px"),u(Ml,"width","40px"),u(Ml,"height","40px"),hl(n)]),z([yl(e)]))})),d=Za(t.R),v=t.a8?u(vl,rl,u(e,d,l)):u(Nt,F,z([u(vl,tl,mu(t.R)),u(vl,u(zt,el,$t),(a=d.aR,i=function(n){var e=n.a,r=n.b,t=r.a,o=r.b,a=r.c;return u(Nt,z([u(Ml,"margin-top","15px")]),z([u(Nt,F,z([u(Kl,z([Vl(e)]),z([yl(e),yl(": "),u(nu,z([u(Ml,"font-family","monospace"),u(Ml,"font-weight","bold")]),z([yl(zc(o))]))]))])),u(Xl,z([eu("range"),jl(e),Ql(e),Jl(zc(t)),Zl(zc(a)),Ul((function(n){return u(Nl,e,u(ei,0,Sc(n)))})),u(Ll,"step","any"),u(Ml,"width","200px"),wl(zc(o))]),F)]))},c=function(n){var e=n.a,r=n.b;return u(Nt,z([u(Ml,"margin-top","15px")]),z([u(Nt,F,z([u(Kl,z([Vl(e)]),z([yl(e)]))])),u(Xl,z([eu("color"),u(Ml,"width","200px"),u(Ml,"height","30px"),jl(e),Ql(e),Ul((function(n){return u(Sl,e,u(ac,Fl,rc(n)))})),wl(yc(r))]),F)]))},u(Nt,z([u(Ml,"margin-left","20px"),u(Ml,"height","100%"),u(Ml,"overflow","scroll")]),z([u(Nt,F,u(Ht,i,a.X)),u(Nt,F,u(Ht,c,a.S)),u(El,F,F),Bl(a),Yl(a)]))))])),m=u(Nt,z([u(Ml,"position","fixed"),u(Ml,"top","0px"),u(Ml,"left","0px"),u(Ml,"width",zc(250)+"px"),u(Ml,"height",zc(d.ad.cq)+"px"),u(Ml,"font-family",'-apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif'),u(Ml,"font-size","16px")]),z(t.bf?[u(Nt,z([u(Ml,"height","100px")]),z([u(s,ol,"✕"),f])),u(Nt,z([u(Ml,"height",zc(d.ad.cq-100)+"px")]),z([v]))]:[u(s,cl,"≡")])),b=u(Nt,z([u(Ml,"position","fixed"),u(Ml,"top","0px"),u(Ml,"left","0px"),u(Ml,"width",zc(d.ad.de)+"px"),u(Ml,"height",zc(d.ad.cq)+"px"),u(Ml,"font-size","16px")]),z([u(vl,ll(al),u(n,d,l))]));return u(Nt,z([u(Ml,"touch-action","none"),u(Ml,"user-select","none")]),z([b,m]))})),pu=i((function(n,e,t,o,a,i){return Jt({e4:function(n){return L({a8:0,bf:!1,R:u(Jc,u(Zc,n,t),o),dd:0},u(Zt,u(zt,Ft,$t),Kc))},fv:function(n){return 1===n.dd?u(oo,$t,Ea(Dt)):qa},fC:r((function(n,r){return L(s(Xc,e,i,n,r),nl)})),fE:u(bu,n,a)})})),gu=o((function(n,e,o,a){return v(pu,n,e,o,a,r((function(){return u(Nt,F,F)})),t((function(n,e,r){return r})))})),hu=t((function(n,e,r){return s(gu,n,e,Tt,r)})),xu=r((function(n,e){return e})),Cu=3.141592653589793,Pu=function(n){return Cu*(n/180)},Mu=W,Tu=r((function(n,e){var r=e.di-n.di,t=e.bG-n.bG,o=e.bF-n.bF,a=u(st,wc(o),u(st,wc(t),wc(r)));if(a){var i=r/a,c=t/a,l=o/a,f=Mu(l*l+c*c+i*i);return Br({bF:l/f,bG:c/f,di:i/f})}return Vr})),yu=r((function(n,e){return{bF:e.bG*n.di-e.di*n.bG,bG:e.di*n.bF-e.bF*n.di,di:e.bF*n.bG-e.bG*n.bF}})),Lu=function(n){var e=n,r=u(st,wc(e.bF),u(st,wc(e.bG),wc(e.di)));if(r){var t=e.di/r,o=e.bG/r,a=e.bF/r,i=Mu(a*a+o*o+t*t);return Br({bF:a/i,bG:o/i,di:t/i})}return Vr},wu=r((function(n,e){return{bF:e.bF-n.bF,bG:e.bG-n.bG,di:e.di-n.di}})),Su=r((function(n,e){return e.bF*n.bF+e.bG*n.bG+e.di*n.di})),Nu=r((function(n,e){return T(e,n)>0})),Fu=r((function(n,e){return 0>T(e,n)})),$u=r((function(n,e){return{bF:e.bF-n.bF,bG:e.bG-n.bG,di:e.di-n.di}})),Du=r((function(n,e){var r=e.bF*n.bF+e.bG*n.bG+e.di*n.di;return{bF:n.bF*r,bG:n.bG*r,di:n.di*r}})),zu={bF:0,bG:0,di:0},_u=t((function(n,e,r){return u(zi,(function(t){return u(zi,(function(o){var a,i=u(yu,e,n),c=u(Su,r,i),l=u(Nu,0,c)?i:u(Fu,0,c)?{bF:-(a=i).bF,bG:-a.bG,di:-a.di}:zu;return u(Vi,(function(n){return w(t,o,n)}),Lu(l))}),Lu(u($u,u(Du,t,e),e)))}),Lu(n))})),Au=function(n){var e=function(n){var e=n,r=wc(e.di),t=wc(e.bG),o=wc(e.bF);if(1>T(o,t)){if(1>T(o,r)){var a=Mu(e.di*e.di+e.bG*e.bG);return{bF:0,bG:-e.di/a,di:e.bG/a}}return a=Mu(e.bG*e.bG+e.bF*e.bF),{bF:-e.bG/a,bG:e.bF/a,di:0}}return 1>T(t,r)?(a=Mu(e.di*e.di+e.bF*e.bF),{bF:e.di/a,bG:0,di:-e.bF/a}):(a=Mu(e.bF*e.bF+e.bG*e.bG),{bF:-e.bG/a,bG:e.bF/a,di:0})}(n);return L(e,{bF:n.bG*e.di-n.di*e.bG,bG:n.di*e.bF-n.bF*e.di,di:n.bF*e.bG-n.bG*e.bF})},Gu=r((function(n,e){var r=Au(n);return{cK:e,dg:r.a,dh:r.b,dj:n}})),Ru={bF:0,bG:0,di:0},ku=function(n){return wc(n)},Bu=function(n){return.5*n},Vu=E,Eu={bF:0,bG:1,di:0},ju=(jo={eU:{bF:0,bG:10,di:30},eX:{bF:0,bG:10,di:0},fB:{bF:0,bG:1,di:0}},Io=jo.eX,Ho=jo.eU,Wo=jo.fB,ya={ew:Pu(40),dc:function(n){var e=u(wu,n.eX,n.eU),r=n.fB,t=f(_u,e,r,u(yu,e,r));if(t.$){var o=Lu(e);if(o.$){var a=Au(n.fB);return{cK:n.eU,dg:a.b,dh:n.fB,dj:a.a}}return u(Gu,o.a,n.eU)}var i=t.a;return{cK:n.eU,dg:i.c,dh:i.b,dj:i.a}}({eU:Ho,eX:Io,fB:u(ei,Eu,u(Tu,Ru,Wo))})},wa=Bu(ku(ya.ew)),{cX:(La=Vu(wa),{$:0,a:La}),dc:ya.dc}),Iu=s(Yi,114/255,159/255,207/255,1),Hu=s(Yi,52/255,101/255,164/255,1),Wu=s(Yi,115/255,210/255,22/255,1),Ou=function(n){return{$:5,a:n}},Uu=function(n){return Ou(n)},qu=r((function(n,e){return{$:4,a:n,b:e}})),Yu=r((function(n,e){return{bF:e.bF+n.bF,bG:e.bG+n.bG,di:e.di+n.di}})),Xu=r((function(n,e){return L(n,u(Yu,e,n))})),Ku=t((function(n,e,r){return{bF:n,bG:e,di:r}})),Zu=r((function(n,e){var r=e.b,t=e.c;return f(Ku,n(e.a),n(r),n(t))})),Ju=function(n){return n},Qu=r((function(n,e){return u(qu,n,u(Xu,Ru,u(Zu,Ju,e)))})),nf=s(Yi,.8,0,0,1),ef=Uu(z([u(Qu,nf,w(100,0,0)),u(Qu,Wu,w(0,100,0)),u(Qu,Hu,w(0,0,100))])),rf=r((function(n,e){return{$:0,a:n,b:e}})),tf=r((function(n,e){return T(e,n)>-1})),of=r((function(n,e){return n+.5*(e-n)})),af=r((function(n,e){return e-n})),cf={bF:-1,bG:0,di:0},lf={bF:0,bG:-1,di:0},uf={bF:0,bG:0,di:-1},ff={bF:1,bG:0,di:0},sf={bF:0,bG:0,di:1},df=t((function(n,e,r){return{bF:n,bG:e,di:r}})),vf=i((function(n,e,r,t,o,a){var i=u(tf,r,a)?sf:uf,c=u(tf,e,o)?Eu:lf,l=u(tf,n,t)?ff:cf,s=w(ku(u(af,n,t)),ku(u(af,e,o)),ku(u(af,r,a)));return{eD:{cK:f(df,u(of,n,t),u(of,e,o),u(of,r,a)),dg:l,dh:c,dj:i},dt:s}})),mf=function(n){return n.bF},bf=function(n){return n.bG},pf=function(n){return n.di},gf=r((function(n,e){return v(vf,mf(n),bf(n),pf(n),mf(e),bf(e),pf(e))})),hf=t((function(n,e,r){return{bF:n,bG:e,di:r}})),xf=r((function(n,e){var r=w(e.a/2,e.b/2,e.c/2),t=r.a,o=r.b,a=r.c;return u(rf,n,u(gf,f(hf,-t,-o,-a),f(hf,t,o,a)))})),Cf=o((function(n,e,r,t){var o=w(n,e,r),a=o.a,i=o.b,c=o.c,l=c>.5?c+i-c*i:c*(i+1),u=2*c-l,f=function(n){var e=0>n?n+1:n>1?n-1:n;return 1>6*e?u+(l-u)*e*6:1>2*e?l:2>3*e?u+(l-u)*(2/3-e)*6:u},d=f(a-1/3),v=f(a),m=f(a+1/3);return s(Yi,m,v,d,t)})),Pf=t((function(n,e,r){return s(Cf,n,e,r,1)})),Mf=r((function(n,e){return{$:2,a:n,b:e}})),Tf=r((function(n,e){return{$:3,a:n,b:e}})),yf=r((function(n,e){return{$:1,a:n,b:e}})),Lf=t((function(n,e,r){return{bF:n,bG:e,di:r}})),wf=function(n){return n.eD},Sf=function(n){return n.dt},Nf=function(n){return n.cK},Ff=function(n){return n.dg},$f=function(n){return n.dh},Df=function(n){return n.dj},zf=r((function(n,e){return{cK:u(Yu,n,Nf(e)),dg:Ff(e),dh:$f(e),dj:Df(e)}})),_f=r((function(n,e){return{eD:u(zf,n,wf(e)),dt:Sf(e)}})),Af=r((function(n,e){return{eO:e,cK:n}})),Gf=r((function(n,e){var r=e;return u(Af,u(Yu,n,r.cK),r.eO)})),Rf=r((function(n,e){var r=e;return{l:u(Gf,n,r.l),e8:r.e8,fm:r.fm}})),kf=r((function(n,e){var r=e.b;return L(n(e.a),n(r))})),Bf=r((function(n,e){return u(kf,Yu(n),e)})),Vf=function(n){return n.eK},Ef=function(n){return n.fm},jf=r((function(n,e){return{eK:e,fm:ku(n)}})),If=r((function(n,e){return u(jf,Ef(e),u(Yu,n,Vf(e)))})),Hf=r((function(n,e){var r=e.b,t=e.c;return w(n(e.a),n(r),n(t))})),Wf=r((function(n,e){return u(Hf,Yu(n),e)})),Of=r((function(n,e){var r=n.a,t=n.b,o=n.c,a=f(Lf,r,t,o);switch(e.$){case 0:return u(rf,e.a,u(_f,a,e.b));case 1:return u(yf,e.a,u(Wf,a,e.b));case 3:return u(Tf,e.a,u(If,a,e.b));case 2:return u(Mf,e.a,u(Rf,a,e.b));case 4:return u(qu,e.a,u(Bf,a,e.b));default:var i=e.a;return Ou(u(Ht,Of(w(r,t,o)),i))}})),Uf=function(n){return Of(w(0,n,0))},qf=B,Yf=V,Xf=t((function(n,e,r){var t=n,o=r,a=.5*e,i=qf(a),c=Yf(a),l=t.eO,u=l.bF*c,f=i*u,s=u*u,d=l.bG*c,v=i*d,m=u*d,b=d*d,p=l.di*c,g=i*p,h=u*p,x=d*p,C=p*p;return{bF:(1-2*(b+C))*o.bF+2*(m-g)*o.bG+2*(h+v)*o.di,bG:2*(m+g)*o.bF+(1-2*(s+C))*o.bG+2*(x-f)*o.di,di:2*(h-v)*o.bF+2*(x+f)*o.bG+(1-2*(s+b))*o.di}})),Kf=t((function(n,e,r){var t=n,o=r,a=.5*e,i=qf(a),c=Yf(a),l=t.cK,u=o.bF-l.bF,f=o.bG-l.bG,s=o.di-l.di,d=t.eO,v=d.bF*c,m=i*v,b=v*v,p=d.bG*c,g=i*p,h=v*p,x=p*p,C=d.di*c,P=i*C,M=v*C,T=p*C,y=C*C;return{bF:l.bF+(1-2*(x+y))*u+2*(h-P)*f+2*(M+g)*s,bG:l.bG+2*(h+P)*u+(1-2*(b+y))*f+2*(T-m)*s,di:l.di+2*(M-g)*u+2*(T+m)*f+(1-2*(b+x))*s}})),Zf=t((function(n,e,r){return{cK:f(Kf,n,e,Nf(r)),dg:f(Xf,n,e,Ff(r)),dh:f(Xf,n,e,$f(r)),dj:f(Xf,n,e,Df(r))}})),Jf=t((function(n,e,r){return{eD:f(Zf,n,e,wf(r)),dt:Sf(r)}})),Qf=r((function(n,e){var r=u(Kf,n,e),t=u(Xf,n,e);return function(n){var e=n;return u(Af,r(e.cK),t(e.eO))}})),ns=t((function(n,e,r){var t=r;return{l:f(Qf,n,e,t.l),e8:t.e8,fm:t.fm}})),es=t((function(n,e,r){return u(kf,u(Kf,n,e),r)})),rs=t((function(n,e,r){return u(jf,Ef(r),f(Kf,n,e,Vf(r)))})),ts=t((function(n,e,r){return u(Hf,u(Kf,n,e),r)})),os=t((function(n,e,r){switch(r.$){case 0:return u(rf,r.a,f(Jf,n,e,r.b));case 1:return u(yf,r.a,f(ts,n,e,r.b));case 3:return u(Tf,r.a,f(rs,n,e,r.b));case 2:return u(Mf,r.a,f(ns,n,e,r.b));case 4:return u(qu,r.a,f(es,n,e,r.b));default:var t=r.a;return Ou(u(Ht,u(os,n,e),t))}})),as=Eu,is=u(Af,Ru,as),cs=r((function(n,e){return f(os,is,n,e)})),ls=r((function(n,e){return(e-ut(e/n)*n)/n})),us=r((function(n,e){return 360*u(ls,n,e)})),fs=o((function(n,e,r,t){return n+(e-n)*(1+qf(6.283185307179586*u(ls,r,t)))/2})),ss=r((function(n,e){var r=s(fs,.2,.8,10,n.a4);return u(cs,u(us,1e3,n.a4),u(cs,.1*e,u(Uf,1.1*e,u(xf,f(Pf,r,.5,.5),w(e,1,e)))))})),ds=function(n){return Uu(u(Ht,ss(n),u(Yr,1,18)))},vs=t((function(n,e,r){return{l:u(Af,n,e),e8:ku(r.e8),fm:ku(r.fm)}})),ms=t((function(n,e,r){return u(Mf,n,f(vs,Ru,Eu,{e8:r,fm:e}))})),bs=u(Uf,-1.001,f(ms,f(Xi,.294,.588,.478),30,1)),ps=r((function(n){return z([ef,bs,ds(n)])})),gs=function(n){return{$:0,a:n}},hs={$:3},xs=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),Cs=xs,Ps=r((function(n,e){return e.b?f(It,yr,e,n):n})),Ms=function(n){return f(It,Ps,F,n)},Ts=r((function(n,e){return Ms(u(Ht,n,e))})),ys=function(n){return{$:1,a:n}},Ls=function(n){return u(le,"height",jr(n))},ws=function(n){return te(function(n){return"script"==n?"p":n}(n))},Ss=function(n){return{$:2,a:n}},Ns=r((function(n,e){switch(e.$){case 0:return u(dr,n,e);case 1:return u(vr,n,e);case 2:return u(mr,n,e);case 3:return u(br,n,e);case 4:return u(pr,n,e);default:return u(gr,n,e)}})),Fs=r((function(n,e){switch(e.$){case 0:return u(Ye,n,e);case 1:return u(Xe,n,e);case 2:return u(Ke,n,e);case 3:return u(Ze,n,e);case 4:return u(Je,n,e);case 5:return u(Qe,n,e);case 6:return u(nr,n,e);case 7:return u(er,n,e);default:return function(n){var e=n.sampleAlphaToCoverage;e.toggle=n.toggle,e.enabled||(n.gl.enable(n.gl.SAMPLE_ALPHA_TO_COVERAGE),e.enabled=!0)}(n)}})),$s=t((function(n,e,r){return f(sr,n,e,r)})),Ds=Tr,zs=s(Ds,1,1,1,1),_s=t((function(n,e,r){return u(Ht,(function(n){return u(n,e,r)}),n)})),As=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),Gs=r((function(n,e){var r=e.bF,t=e.bG;return f(As,n*r/t,n,n*(1-r-t)/t)})),Rs=Pr,ks=r((function(n,e){return function(n){var e=n.a,r=n.b,t=n.c;return f(Rs,3.2406*e-1.5372*r-.4986*t,-.9689*e+1.8758*r+.0415*t,.0557*e-.204*r+1.057*t)}(u(Gs,n,e))})),Bs=r((function(n,e){return{dE:P(n.dE,e.dE),s:n.s*e.s+n.t*e.v+n.u*e.y,t:n.s*e.t+n.t*e.w+n.u*e.z,u:n.s*e.u+n.t*e.x+n.u*e.A,v:n.v*e.s+n.w*e.v+n.x*e.y,w:n.v*e.t+n.w*e.w+n.x*e.z,x:n.v*e.u+n.w*e.x+n.x*e.A,y:n.y*e.s+n.z*e.v+n.A*e.y,z:n.y*e.t+n.z*e.w+n.A*e.z,A:n.y*e.u+n.z*e.x+n.A*e.A,J:e.J+(n.J*e.s+n.K*e.v+n.L*e.y)*e.b7,K:e.K+(n.J*e.t+n.K*e.w+n.L*e.z)*e.b7,L:e.L+(n.J*e.u+n.K*e.x+n.L*e.A)*e.b7,b7:n.b7*e.b7}})),Vs=function(n){var e=new Float64Array(16);return e[0]=n.dM,e[1]=n.dQ,e[2]=n.dU,e[3]=n.dY,e[4]=n.dN,e[5]=n.dR,e[6]=n.dV,e[7]=n.dZ,e[8]=n.dO,e[9]=n.dS,e[10]=n.dW,e[11]=n.d_,e[12]=n.dP,e[13]=n.dT,e[14]=n.dX,e[15]=n.d$,e},Es=a((function(n,e,r,t,o){return v(o,n,s(Ds,t.b7,t.b7,t.b7,t.dE?1:-1),function(n){return Vs({dM:n.s,dN:n.v,dO:n.y,dP:n.J,dQ:n.t,dR:n.w,dS:n.z,dT:n.K,dU:n.u,dV:n.x,dW:n.A,dX:n.L,dY:0,dZ:0,d_:0,d$:1})}(t),t.dE,e,r)})),js=i((function(n,e,r,t,o,a){n:for(;;)switch(o.$){case 0:return a;case 5:var i=o.b;n=n,e=e,r=r,t=u(Bs,o.a,t),o=i,a=a;continue n;case 1:return{P:u(yr,d(Es,n,e,r,t,o.b),a.P),Z:a.Z,fq:a.fq};case 3:return{P:a.P,Z:u(yr,d(Es,n,e,r,t,o.b),a.Z),fq:a.fq};case 2:return{P:a.P,Z:a.Z,fq:u(yr,d(Es,n,e,r,t,o.a),a.fq)};default:var c=o.a;return f(Wr,s(js,n,e,r,t),a,c)}})),Is=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),Hs=Is,Ws=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),Os=r((function(n,e){return{$:6,a:n,b:e}})),Us=Os,qs=z([s(Ws,518,!1,0,1),s(Hs,!1,!1,!1,!1),u(Us,0,1)]),Ys=519,Xs=7681,Ks={src:"\n        precision lowp float;\n\n        void main() {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        }\n    ",attributes:{},uniforms:{}},Zs=qe,Js=r((function(n,e){return{$:0,a:n,b:e}})),Qs=Js({du:1,dD:0,d8:5}),nd=Cr,ed=Qs(z([{b3:u(nd,-1,-1)},{b3:u(nd,1,-1)},{b3:u(nd,-1,1)},{b3:u(nd,1,1)}])),rd={src:"\n        precision lowp float;\n\n        attribute vec2 position;\n\n        void main() {\n            gl_Position = vec4(position, 0.0, 1.0);\n        }\n    ",attributes:{position:"b3"},uniforms:{}},td=function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return function(f){return{$:2,a:n,b:e,c:r,d:t,e:o,f:a,g:i,h:c,i:l,j:u,k:f}}}}}}}}}}}},od=t((function(n,e,t){var o=n.cZ,a=n.cB,i=n.df,c=r((function(n,e){return e(n)})),l=r((function(n,e){return e(n)})),s=function(n){return u(zt,c(n.bw),u(zt,l(n.bh),u(zt,l(n.bH),l(n.bI))))};return u(s,t,u(s,e,f(td,o,a,i)))})),ad=function(n){return f(od,{cB:n.cB,cZ:n.cZ,df:n.df},{bh:n.bh,bw:n.bw,bH:n.bH,bI:n.bI},{bh:n.bh,bw:n.bw,bH:n.bH,bI:n.bI})},id=function(n){return d(Zs,z([ad(n),s(Hs,!1,!1,!1,!1)]),rd,Ks,ed,{})},cd=id({bh:Xs,cB:0,cZ:8,bw:Ys,df:15,bH:Xs,bI:Xs}),ld=7680,ud=function(n){return id({bh:ld,cB:15,cZ:8,bw:516,df:(e=n,u(Zi,2,e+4)),bH:5386,bI:5386});var e},fd=t((function(n,e,r){return Ms(z([f(_s,n,r,qs),z([ud(e),cd])]))})),sd=r((function(n,e){return Ms(u(Xr,fd(n),e))})),dd=s(Ws,513,!0,0,1),vd=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),md=r((function(n,e){return f(vd,32774,n,e)})),bd=function(n){var e=n.b5,t=n.bS,o=n.bM,a=n.bJ,i=n.bO,c=n.aQ;return u(r((function(n,r){var i=n.b,c=n.c,l=r.a,u=r.b,f=r.c;return function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return{$:0,a:n,b:e,c:r,d:t,e:o,f:a,g:i,h:c,i:l,j:u}}}}}}}}}}}(n.a)(i)(c)(l)(u)(f)(e)(t)(o)(a)})),i,c)}({bJ:0,aQ:u(md,1,771),bM:0,bO:u(md,770,771),bS:0,b5:0}),pd=z([dd,bd]),gd=function(n){return n.d3},hd=function(n){return n.d6},xd=function(n){return w(u(af,function(n){return n.d4}(n),function(n){return n.d1}(n)),u(af,function(n){return n.d5}(n),function(n){return n.d2}(n)),u(af,hd(n),gd(n)))},Cd=function(n){return Nf(n)},Pd=function(n){return{cK:{bF:n.J,bG:n.K,di:n.L},dg:{bF:n.s,bG:n.t,di:n.u},dh:{bF:n.v,bG:n.w,di:n.x},dj:{bF:n.y,bG:n.z,di:n.A}}},Md=r((function(n,e){var r=n.dj,t=n.dh,o=n.dg;return{bF:e.bF*o.bF+e.bG*o.bG+e.di*o.di,bG:e.bF*t.bF+e.bG*t.bG+e.di*t.di,di:e.bF*r.bF+e.bG*r.bG+e.di*r.di}})),Td=r((function(n,e){var r=n.cK,t=e.bF-r.bF,o=e.bG-r.bG,a=e.di-r.di,i=n.dj,c=n.dh,l=n.dg;return{bF:t*l.bF+o*l.bG+a*l.di,bG:t*c.bF+o*c.bG+a*c.di,di:t*i.bF+o*i.bG+a*i.di}})),yd=r((function(n,e){return{cK:u(Td,n,Nf(e)),dg:u(Md,n,Ff(e)),dh:u(Md,n,$f(e)),dj:u(Md,n,Df(e))}})),Ld=r((function(n,e){return u(st,n,e)})),wd=r((function(n,e){return 0>T(n,e)?n:e})),Sd=r((function(n,e){return u(wd,n,e)})),Nd=r((function(n,e){var r=e,t=n;return{d1:u(Ld,t.d1,r.d1),d2:u(Ld,t.d2,r.d2),d3:u(Ld,t.d3,r.d3),d4:u(Sd,t.d4,r.d4),d5:u(Sd,t.d5,r.d5),d6:u(Sd,t.d6,r.d6)}})),Fd=r((function(n,e){return e+n})),$d=r((function(n,e){var r=n.a,t=n.c,o=Bu(ku(n.b)),a=Bu(ku(r)),i=Bu(ku(t)),c=function(n){return w(n.bF,n.bG,n.di)}(e),l=c.a,f=c.b,s=c.c;return{d1:u(Fd,a,l),d2:u(Fd,o,f),d3:u(Fd,i,s),d4:u(af,a,l),d5:u(af,o,f),d6:u(af,i,s)}})),Dd=o((function(n,e,r,t){var o=r.eK,a=2*r.e$*e,i=2*r.e_*e,c=2*r.eZ*e,l=o.di*e,s=o.bG*e,d=o.bF*e,v=Df(n),m=wc(c*v.bF)+wc(i*v.bG)+wc(a*v.di),b=$f(n),p=wc(c*b.bF)+wc(i*b.bG)+wc(a*b.di),g=Ff(n),h=wc(c*g.bF)+wc(i*g.bG)+wc(a*g.di),x=u($d,w(h,p,m),u(Td,n,f(hf,d,s,l)));return Br(t.$?x:u(Nd,t.a,x))})),zd=o((function(n,e,r,t){n:for(;;){if(!t.b)return r;var o=t.a,a=t.b;switch(o.$){case 0:n=c=n,e=l=e,r=f=r,t=a;continue n;case 1:var i=s(Dd,n,e,o.a,r);n=c=n,e=l=e,r=f=i,t=a;continue n;case 2:n=c=n,e=l=e,r=f=r,t=a;continue n;case 3:i=s(Dd,n,e,o.a,r),n=c=n,e=l=e,r=f=i,t=a;continue n;case 4:var c=n,l=e,f=s(zd,n,e,r,o.a);n=c,e=l,r=f,t=a;continue n;default:var d=o.a,v=o.b,m=u(yd,Pd(d),n),b=e*d.b7;n=c=n,e=l=e,r=f=s(zd,m,b,r,z([v])),t=a;continue n}}})),_d=function(n){return n[0]},Ad=function(n){return n[1]},Gd=function(n){return n[2]},Rd=function(n){return{$:4,a:n}},kd=r((function(n,e){for(;;){if(!n.b)return e;var r=n.a;n=n.b,e=u(yr,r,e)}})),Bd=function(n){return Rd(u(kd,n,F))},Vd={dE:!0,s:1,t:0,u:0,v:0,w:1,x:0,y:0,z:0,A:1,J:0,K:0,L:0,b7:1},Ed=id({bh:Xs,cB:0,cZ:8,bw:Ys,df:255,bH:Xs,bI:Xs}),jd={bM:0,eJ:!1,bS:0,cV:0,b5:0,c9:0,bF:0,bG:0,di:0},Id=r((function(n,e){return Vs({dM:n.bF,dN:n.b5,dO:e.bF,dP:e.b5,dQ:n.bG,dR:n.bS,dS:e.bG,dT:e.bS,dU:n.di,dV:n.bM,dW:e.di,dX:e.bM,dY:n.c9,dZ:n.cV,d_:e.c9,d$:e.cV})})),Hd=L({bo:u(Id,jd,jd),bW:u(Id,jd,jd),bX:u(Id,jd,jd),bY:u(Id,jd,jd)},s(Ds,0,0,0,0)),Wd=r((function(n,e){return n*e})),Od=function(n){return-n},Ud=function(n){return s(Ws,515,n.af,n.aa,n._)},qd=z([Ud({_:1,aa:0,af:!0}),ad({bh:ld,cB:240,cZ:0,bw:514,df:0,bH:ld,bI:ld}),bd]),Yd=r((function(n,e){var r=n,t=e.eW,o=e.eC,a=ku(e.ff),i=ku(t),c=r.cX;if(c.$){var l=c.a;return Ac(i)?Vs({dM:2/(o*l),dN:0,dO:0,dP:0,dQ:0,dR:2/l,dS:0,dT:0,dU:0,dV:0,dW:0,dX:-1,dY:0,dZ:0,d_:0,d$:1}):Vs({dM:2/(o*l),dN:0,dO:0,dP:0,dQ:0,dR:2/l,dS:0,dT:0,dU:0,dV:0,dW:-2/(i-a),dX:-(i+a)/(i-a),dY:0,dZ:0,d_:0,d$:1})}var u=c.a;return Ac(i)?Vs({dM:1/(o*u),dN:0,dO:0,dP:0,dQ:0,dR:1/u,dS:0,dT:0,dU:0,dV:0,dW:-1,dX:-2*a,dY:0,dZ:0,d_:-1,d$:0}):Vs({dM:1/(o*u),dN:0,dO:0,dP:0,dQ:0,dR:1/u,dS:0,dT:0,dU:0,dV:0,dW:-(i+a)/(i-a),dX:-2*i*a/(i-a),dY:0,dZ:0,d_:-1,d$:0})})),Xd=r((function(n,e){return 1==(1&n>>e)?0:1})),Kd=t((function(n,e,r){return Ms(u(Ht,(function(r){var t=r<<4;return f(_s,n,L(e,s(Ds,u(Xd,r,0),u(Xd,r,1),u(Xd,r,2),u(Xd,r,3))),function(n){return z([Ud({_:1,aa:0,af:!0}),ad({bh:ld,cB:240,cZ:n,bw:514,df:0,bH:ld,bI:ld}),bd])}(t))}),u(Yr,1,u(Zi,2,r)-1)))})),Zd=function(n){return{bF:-n.bF,bG:-n.bG,di:-n.di}},Jd=function(n){return Zd(Df(n))},Qd=ff,nv=sf,ev={cK:Ru,dg:Qd,dh:as,dj:nv},rv=r((function(n,e){var r,t,o,a,i;return t=Nf(r=u(yd,e,n)),o=Df(r),a=$f(r),i=Ff(r),Vs({dM:i.bF,dN:a.bF,dO:o.bF,dP:t.bF,dQ:i.bG,dR:a.bG,dS:o.bG,dT:t.bG,dU:i.di,dV:a.di,dW:o.di,dX:t.di,dY:0,dZ:0,d_:0,d$:1})})),tv=function(n){return Ff(n)},ov=function(n){return $f(n)},av=r((function(n,e){var r,t=z([ys(1),Ss(0),gs(!0),s(Cs,0,0,0,0)]),o=function(){var e=n.eA;switch(e.$){case 0:return w(t,"0",1);case 1:return w(u(yr,hs,t),"1",1);default:return w(t,"0",e.a)}}(),a=o.a,i=o.b,c=o.c,l=n.dt,d=l.a,m=l.b,b=u(Ml,"height",jr(m)+"px"),p=d,g=p/m,h=u(Ts,(function(e){return function(n){var e=function(n){return n.dc}(n.eH),r={cK:Cd(e),dg:tv(e),dh:ov(e),dj:Zd(Jd(e))},t=Bd(n.dx),o=s(zd,r,1,Vr,z([t]));if(1===o.$)return F;var a=o.a,i=u(rv,ev,e),c=u(Wd,.99,u(Ld,ku(n.dq),Od(gd(a)))),l=xd(a),d=function(n){var e=n,r=u(st,wc(e.bF),u(st,wc(e.bG),wc(e.di)));if(r){var t=e.di/r,o=e.bG/r,a=e.bF/r;return Mu(a*a+o*o+t*t)*r}return 0}(f(Ku,l.a,l.b,l.c)),m=u(Wd,1.01,u(Fd,d,Od(hd(a)))),b=u(Yd,n.eH,{eC:n.eC,eW:m,ff:c}),p=function(n){return{dM:n[0],dQ:n[1],dU:n[2],dY:n[3],dN:n[4],dR:n[5],dV:n[6],dZ:n[7],dO:n[8],dS:n[9],dW:n[10],d_:n[11],dP:n[12],dT:n[13],dX:n[14],d$:n[15]}}(b).d$,g=p?Zd(Jd(e)):Cd(e),h=function(){var e=n.fA;switch(e.$){case 0:return L(0,0);case 1:return L(1,0);case 2:return L(2,0);case 3:return L(3,e.a);case 4:return L(4,e.a);default:return L(5,0)}}(),x=h.a,C=h.b,P=u(ks,n.eT,n.fG),M=Vs({dM:0,dN:g.bF,dO:_d(P),dP:n.er,dQ:0,dR:g.bG,dS:Ad(P),dT:d,dU:0,dV:g.di,dW:Gd(P),dX:x,dY:0,dZ:p,d_:0,d$:C}),T=v(js,M,i,b,Vd,t,{P:F,Z:F,fq:F}),y=n.fa;switch(y.$){case 0:return Ms(z([f(_s,T.P,L(w=y.a,zs),pd),f(_s,T.Z,Hd,pd)]));case 1:var w=y.a;return Ms(z([f(_s,T.P,Hd,pd),z([Ed]),f(_s,T.fq,w.bo,qs),z([ud(0)]),f(_s,T.P,L(w,zs),qd),f(_s,T.Z,Hd,pd)]));default:var S=y.a,N=y.b;return Ms(z([f(_s,T.P,L(N,zs),pd),z([Ed]),u(sd,T.fq,S),f(Kd,T.P,N,Or(S)),f(_s,T.Z,Hd,pd)]))}}({eC:g,eH:n.eH,dq:n.dq,dx:e.dx,eT:e.eT,fa:e.fa,er:c,fA:e.fA,fG:e.fG})}),e),x=u(Ml,"width",jr(p)+"px"),C=function(n){var e,r,t=n.b,o=n.c,a=n.d,i=function(n){return Ji(1e4*n)/100};return e=z(["rgba(",zc(i(n.a)),"%,",zc(i(t)),"%,",zc(i(o)),"%,",zc((r=a,Ji(1e3*r)/1e3)),")"]),u(Ir,"",e)}(n.dm);return f(ws,"div",z([u(Ml,"padding","0px"),x,b]),z([L(i,f($s,a,z([(r=Ji(p*c),u(le,"width",jr(r))),Ls(Ji(m*c)),x,b,u(Ml,"display","block"),u(Ml,"background-color",C)]),h))]))})),iv={bF:.31271,bG:.32902},cv=r((function(n,e){var r=n,t=e.eO,o=t.bF,a=t.bG,i=t.di,c=u(ks,e.cr,e.ch);return{bM:Gd(c),eJ:r,bS:Ad(c),cV:0,b5:_d(c),c9:1,bF:-o,bG:-a,di:-i}})),lv={$:0},uv=function(n){return function(n){for(;;){if(P(n.e5,0)&&P(n.e6,0))return jd;if(!u(Nu,ku(n.e5),ku(n.e6))){var e=wc(n.e6/Cu),r=wc(n.e5/Cu),t=n.fB,o=t.bF,a=t.bG,i=t.di,c=u(ks,1,n.ch);return{bM:r*Gd(c),eJ:!1,bS:r*Ad(c),cV:e/r,b5:r*_d(c),c9:3,bF:o,bG:a,di:i}}n={ch:n.ch,e5:n.e6,e6:n.e5,fB:Zd(n.fB)}}}({ch:n.ch,e5:n.cr,e6:0,fB:n.fB})},fv=t((function(n,e,r){return 0>T(r,n)?n:T(r,e)>0?e:r})),sv=function(n){var e=f(fv,1667,25e3,n),r=e>4e3?-3025846900/(e*e*e)+2107037.9/(e*e)+.2226347*1e3/e+.24039:-266123900.00000003/(e*e*e)-.2343589*1e6/(e*e)+877.6956/e+.17991;return{bF:r,bG:e>2222?e>4e3?r*r*r*3.081758-r*r*5.8733867+3.75112997*r-.37001483:r*r*r*-.9549476-r*r*1.37418593+2.09137015*r-.16748867:r*r*r*-1.1063814-r*r*1.3481102+2.18555832*r-.20219683}},dv=sv(12e3),vv=sv(5600),mv=r((function(n,e){return{$:2,a:n,b:e}})),bv=function(n){return{$:0,a:n}},pv=function(n){return n.eJ},gv=bv(Hd.a),hv=r((function(n,e){return f(It,r((function(e,r){var t=r.a,o=r.b;return n(e)?L(u(yr,e,t),o):L(t,u(yr,e,o))})),L(F,F),e)})),xv=function(n){return Vs({dM:n.bF,dN:n.b5,dO:0,dP:0,dQ:n.bG,dR:n.bS,dS:0,dT:0,dU:n.di,dV:n.bM,dW:0,dX:0,dY:n.c9,dZ:n.cV,d_:0,d$:0})},Cv=l((function(n,e,r,t,o,a,i,c){var l=u(hv,pv,z([n,e,r,t])),f=l.a;if(f.b){var s=N(f,l.b);if(s.b&&s.b.b&&s.b.b.b&&s.b.b.b.b&&!s.b.b.b.b.b){var d=s.a,v=s.b,m=v.a,b=v.b,p=b.a,g=b.b.a;return u(mv,u(Ht,xv,f),{bo:u(Id,d,m),bW:u(Id,p,g),bX:u(Id,o,a),bY:u(Id,i,c)})}return gv}return bv({bo:u(Id,n,e),bW:u(Id,r,t),bX:u(Id,o,a),bY:u(Id,i,c)})})),Pv=t((function(n,e,r){return b(Cv,n,e,r,jd,jd,jd,jd,jd)})),Mv=o((function(n,e,r,t){return{$:2,a:n,b:e,c:r,d:t}})),Tv=o((function(n,e,r,t){return{$:3,a:n,b:e,c:r,d:t}})),yv=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),Lv=o((function(n,e,r,t){return{$:6,a:n,b:e,c:r,d:t}})),wv=o((function(n,e,r,t){return{$:7,a:n,b:e,c:r,d:t}})),Sv=o((function(n,e,r,t){return{$:5,a:n,b:e,c:r,d:t}})),Nv=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),Fv=function(n){switch(n.$){case 0:return n;case 1:return s(Nv,n.a,n.b,n.c,1);case 2:return s(Mv,n.a,n.b,n.c,1);case 3:return s(Tv,n.a,n.b,n.c,1);case 4:return s(yv,n.a,n.b,n.c,1);case 5:return s(Sv,n.a,n.b,n.c,1);case 6:return s(Lv,n.a,n.b,n.c,1);case 7:return s(wv,n.a,n.b,n.c,1);case 8:case 9:default:return n}},$v={$:0},Dv=l((function(n,e,r,t,o,a,i,c){for(;;){if(!c.b)return{d1:e,d2:t,d3:a,d4:n,d5:r,d6:o};var l=c.b,f=i(c.a);n=u(Sd,f.d4,n),e=u(Ld,f.d1,e),r=u(Sd,f.d5,r),t=u(Ld,f.d2,t),o=u(Sd,f.d6,o),a=u(Ld,f.d3,a),i=i,c=l}})),zv=t((function(n,e,r){var t=n(e);return b(Dv,t.d4,t.d1,t.d5,t.d2,t.d6,t.d3,n,r)})),_v=r((function(n,e){return 1>T(e,n)})),Av=function(n){return u(_v,n.d1,n.d4)&&u(_v,n.d2,n.d5)&&u(_v,n.d3,n.d6)?n:{d1:u(Ld,n.d4,n.d1),d2:u(Ld,n.d5,n.d2),d3:u(Ld,n.d6,n.d3),d4:u(Sd,n.d4,n.d1),d5:u(Sd,n.d5,n.d2),d6:u(Sd,n.d6,n.d3)}},Gv=function(n){return n},Rv=function(n){var e=n.a,r=n.b,t=n.c,o=mf(e),a=bf(e),i=pf(e),c=mf(r),l=bf(r),f=pf(r),s=mf(t),d=bf(t),v=pf(t);return Av({d1:u(Ld,o,u(Ld,c,s)),d2:u(Ld,a,u(Ld,l,d)),d3:u(Ld,i,u(Ld,f,v)),d4:u(Sd,o,u(Sd,c,s)),d5:u(Sd,a,u(Sd,l,d)),d6:u(Sd,i,u(Sd,f,v))})},kv=function(n){return new Float64Array([n.bF,n.bG,n.di])},Bv=function(n){return kv(n)},Vv=function(n){return kv(n)},Ev=r((function(n,e){var r=n,t=e,o=u(st,wc(t.bF),u(st,wc(t.bG),wc(t.di)));if(o){var a=t.di/o,i=t.bG/o,c=t.bF/o,l=Mu(c*c+i*i+a*a);return{bF:r*c/l,bG:r*i/l,di:r*a/l}}return zu}))(1),jv=t((function(n,e,r){return Ev(u(yu,u(wu,e,r),u(wu,n,e)))})),Iv=function(n){var e=n.a,r=n.b,t=n.c,o=Vv(f(jv,e,r,t));return w({p:o,b3:Bv(e)},{p:o,b3:Bv(r)},{p:o,b3:Bv(t)})},Hv=r((function(n,e){return{$:2,a:n,b:e}}))({du:3,dD:0,d8:4}),Wv=t((function(n,e,r){return w(n,e,r)})),Ov=(Oo=u(Wd,-.5,1),Uo=u(Wd,-.5,1),Yo=f(df,qo=u(Wd,-.5,1),Uo,Oo),Ko=f(df,qo,Uo,Xo=u(Wd,.5,1)),Jo=f(df,qo,Zo=u(Wd,.5,1),Oo),Qo=f(df,qo,Zo,Xo),ea=f(df,na=u(Wd,.5,1),Uo,Oo),ra=f(df,na,Zo,Oo),ta=f(df,na,Uo,Xo),oa=f(df,na,Zo,Xo),Fv(function(n){if(n.b){var e=n.a,r=n.b,t=Hv(u(Ht,Iv,n));return s(Mv,f(zv,Rv,e,r),n,t,0)}return $v}(z([f(Wv,Yo,ra,ea),f(Wv,Yo,Jo,ra),f(Wv,Ko,ta,oa),f(Wv,Ko,oa,Qo),f(Wv,ea,ra,oa),f(Wv,ea,oa,ta),f(Wv,Yo,Qo,Jo),f(Wv,Yo,Ko,Qo),f(Wv,Yo,ea,ta),f(Wv,Yo,ta,Ko),f(Wv,Jo,oa,ra),f(Wv,Jo,Qo,oa)])))),Uv={$:0},qv=t((function(n,e,r){return{$:1,a:n,b:e,c:r}})),Yv=t((function(n,e,r){var t=e.a,o=e.b,a=n(e.c),i=n(o),c=n(t),l=Vv(f(jv,c,i,a)),s={p:l,b3:Bv(c)},d={p:l,b3:Bv(i)},v={p:l,b3:Bv(a)};return u(yr,s,u(yr,d,u(yr,v,r)))})),Xv=function(n){return n.F},Kv=o((function(n,e,r,t){return 1===e.$||1===r.$||1===t.$?Vr:Br(f(n,e.a,r.a,t.a))})),Zv=4294967295>>>32-at,Jv=h,Qv=t((function(n,e,r){for(;;){var t=u(Jv,Zv&e>>>n,r);if(t.$)return u(Jv,Zv&e,t.a);n-=at,e=e,r=t.a}})),nm=r((function(n,e){var r=e.a,t=e.b,o=e.c,a=e.d;return 0>n||T(n,r)>-1?Vr:T(n,function(n){return n>>>5<<5}(r))>-1?Br(u(Jv,Zv&n,a)):Br(f(Qv,t,n,o))})),em=function(n){return n.ap},rm=r((function(n,e){return u(nm,n,em(e))})),tm=t((function(n,e,r){for(;;){var t=u(vt,Qr,n),o=t.a,a=t.b;if(0>T(ft(o),Qr))return u(pt,!0,{B:e,m:r,r:o});n=a,e=u(yr,lt(o),e),r+=1}})),om=function(n){return n.b?f(tm,n,F,0):it},am=r((function(n,e){return!u($c,u(go,Fc,n),e)})),im=r((function(n,e){return f(It,r((function(e,r){return n(e)?u(yr,e,r):r})),F,e)})),cm=r((function(n,e){var r=function(n){return n.a}(n),t=function(n){var e=n.a,t=n.b,o=n.c;return e>=0&&0>T(e,r)&&t>=0&&0>T(t,r)&&o>=0&&0>T(o,r)};return u(am,t,e)?{F:e,ap:n}:{F:u(im,t,e),ap:n}})),lm=t((function(n,e,r){return{$:3,a:n,b:e,c:r}}))({du:1,dD:3,d8:4}),um=r((function(n,e){var r=e;return L(w(n.bF,n.bG,n.di),w(r.bF,r.bG,r.di))})),fm=r((function(n,e){n:for(;;){if(-2===e.$)return Vr;var r=e.c,t=e.d,o=e.e;switch(u(So,n,e.b)){case 0:n=n,e=t;continue n;case 1:return Br(r);default:n=n,e=o;continue n}}})),sm=f(Rs,0,0,0),dm=i((function(n,e,r,t,o,a){var i=a.a,c=a.b,l=a.c,f=u(fm,u(um,n,e),o);if(f.$){var s={p:sm,b3:Bv(e)},d={p:sm,b3:Bv(n)},v=l+1;return w(u(yr,w(r,l,v),u(yr,w(r,v,t),i)),u(yr,s,u(yr,d,c)),l+2)}return w(u(yr,w(r,f.a,t),i),c,l)})),vm=a((function(n,e,r,t,o){for(;;){if(!r.b)return L(o.a,Zr(o.b));var a=r.a,i=a.a,c=a.b,l=r.b,u=n(a.c),f=n(c),s=n(i),d=t+2,m=t+1,b=n,p=e,g=l,h=t+3,x=v(dm,u,s,d,t,e,v(dm,f,u,m,d,e,v(dm,s,f,t,m,e,o)));n=b,e=p,r=g,t=h,o=x}})),mm=a((function(n,e,r,t,o){for(;;){if(!e.b)return w(t,o,r);var a=e.a,i=a.a,c=a.b,l=e.b,s=n(a.c),d=n(c),v=n(i),m=r+2,b=r+1,p=r,g=f(Fo,u(um,v,s),m,f(Fo,u(um,s,d),b,f(Fo,u(um,d,v),p,o)));n=n,e=l,r+=3,t=u(yr,w(p,b,m),t),o=g}})),bm=t((function(n,e,r){var o,a=u(Bo,(function(n){var e=n.a,r=n.b,a=n.c;return s(Kv,t((function(n,e,r){return w(n,e,r)})),u(rm,e,o),u(rm,r,o),u(rm,a,o))}),Xv(o=r)),i=f(It,Yv(e),F,a),c=d(mm,e,a,0,F,Mo),l=d(vm,e,c.b,a,0,w(c.a,F,c.c)),v=l.a,m=l.b,b=m.b?N(i,m):i;return f(qv,n,u(cm,om(b),v),u(lm,b,v))})),pm=function(n){return{F:u(Ht,(function(n){return w(3*n,3*n+1,3*n+2)}),u(Yr,0,Or(n)-1)),ap:om(Ms(u(Ht,(function(n){return z([n.a,n.b,n.c])}),n)))}},gm=function(n){switch(n.$){case 0:return Uv;case 1:case 2:return f(bm,n.a,_t,pm(u(Ht,Gv,n.b)));case 3:return f(bm,n.a,_t,n.b);case 4:case 5:case 6:case 7:return f(bm,n.a,(function(n){return n.b3}),n.b);case 8:case 9:default:return Uv}},hm=gm(Ov),xm={$:0},Cm=xm,Pm=r((function(n,e){return{$:1,a:n,b:e}})),Mm={src:"\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        void main () {\n            gl_FragColor = texture2D(colorTexture, interpolatedUv);\n        }\n    ",attributes:{},uniforms:{colorTexture:"bP"}},Tm=function(n){return{$:5,a:n}},ym=Tm(1029),Lm=Tm(1028),wm=t((function(n,e,r){return 1===e?u(yr,n?ym:Lm,r):r})),Sm={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute mediump vec2 uv;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedUv = uv;\n        }\n    ",attributes:{position:"b3",uv:"N"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Nm=o((function(n,e,r,t){return u(Pm,e,l((function(e,o,a,i,c,l,u,s){return d(Zs,f(wm,i,t,s),Sm,Mm,r,{bP:n,b:a,c:o,d:l,e:e,f:c})})))})),Fm={src:"\n        precision lowp float;\n        \n        uniform lowp vec3 constantColor;\n        \n        void main () {\n            gl_FragColor = vec4(constantColor, 1.0);\n        }\n    ",attributes:{},uniforms:{constantColor:"aE"}},$m={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{position:"b3"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Dm=o((function(n,e,r,t){return u(Pm,e,l((function(e,o,a,i,c,l,u,s){return d(Zs,f(wm,i,t,s),$m,Fm,r,{aE:n,b:a,c:o,d:l,e:e,f:c})})))})),zm=r((function(n,e){return{$:3,a:n,b:e}})),_m={src:"\n        precision lowp float;\n        \n        uniform lowp vec3 constantColor;\n        uniform lowp float pointRadius;\n        uniform highp mat4 sceneProperties;\n        \n        float pointAlpha(float pointRadius, vec2 pointCoord) {\n            float pointSize = 2.0 * pointRadius;\n            float x = (pointSize + 2.0) * (pointCoord.s - 0.5);\n            float y = (pointSize + 2.0) * (pointCoord.t - 0.5);\n            float r = sqrt(x * x + y * y);\n            float innerRadius = pointRadius;\n            float outerRadius = pointRadius + 1.0;\n            if (r > outerRadius) {\n                return 0.0;\n            } else if (r > innerRadius) {\n                return outerRadius - r;\n            } else {\n                return 1.0;\n            }\n        }\n        \n        void main () {\n            float supersampling = sceneProperties[3][0];\n            float alpha = pointAlpha(pointRadius * supersampling, gl_PointCoord);\n            gl_FragColor = vec4(constantColor, alpha);\n        }\n    ",attributes:{},uniforms:{constantColor:"aE",pointRadius:"b2",sceneProperties:"e"}},Am={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform lowp float pointRadius;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            float supersampling = sceneProperties[3][0];\n            gl_PointSize = 2.0 * pointRadius * supersampling + 2.0;\n        }\n    ",attributes:{position:"b3"},uniforms:{modelMatrix:"b",modelScale:"c",pointRadius:"b2",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Gm=o((function(n,e,r,t){return u(zm,r,l((function(r,o,a,i,c,l,u,f){return d(Zs,f,Am,_m,t,{aE:n,b:a,c:o,b2:e,d:l,e:r,f:c})})))})),Rm={src:"\n        precision mediump float;\n        \n        uniform mediump vec3 emissiveColor;\n        uniform highp mat4 sceneProperties;\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{emissiveColor:"aU",sceneProperties:"e"}},km=Mr,Bm=a((function(n,e,r,t,o){return u(Pm,r,l((function(r,a,i,c,l,s,v,m){return d(Zs,f(wm,c,o,m),$m,Rm,t,{aU:u(km,e,n),b:i,c:a,d:s,e:r,f:l})})))})),Vm={src:"\n        precision mediump float;\n        \n        uniform mediump vec3 emissiveColor;\n        uniform lowp float pointRadius;\n        uniform highp mat4 sceneProperties;\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        float pointAlpha(float pointRadius, vec2 pointCoord) {\n            float pointSize = 2.0 * pointRadius;\n            float x = (pointSize + 2.0) * (pointCoord.s - 0.5);\n            float y = (pointSize + 2.0) * (pointCoord.t - 0.5);\n            float r = sqrt(x * x + y * y);\n            float innerRadius = pointRadius;\n            float outerRadius = pointRadius + 1.0;\n            if (r > outerRadius) {\n                return 0.0;\n            } else if (r > innerRadius) {\n                return outerRadius - r;\n            } else {\n                return 1.0;\n            }\n        }\n        \n        void main () {\n            vec4 color = toSrgb(emissiveColor, sceneProperties);\n            float supersampling = sceneProperties[3][0];\n            float alpha = pointAlpha(pointRadius * supersampling, gl_PointCoord);\n            gl_FragColor = vec4(color.rgb, alpha);\n        }\n    ",attributes:{},uniforms:{emissiveColor:"aU",pointRadius:"b2",sceneProperties:"e"}},Em=a((function(n,e,r,t,o){return u(zm,t,l((function(t,a,i,c,l,f,s,v){return d(Zs,v,Am,Vm,o,{aU:u(km,e,n),b:i,c:a,b2:r,d:f,e:t,f:l})})))})),jm={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 materialColor;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{enabledLights:"U",lights12:"bo",lights34:"bW",lights56:"bX",lights78:"bY",materialColor:"cC",sceneProperties:"e",viewMatrix:"f"}},Im={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n        }\n    ",attributes:{normal:"p",position:"b3"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Hm=o((function(n,e,r,t){return u(Pm,e,l((function(e,o,a,i,c,l,u,s){var v=u.a,m=u.b;return d(Zs,f(wm,i,t,s),Im,jm,r,{U:m,bo:v.bo,bW:v.bW,bX:v.bX,bY:v.bY,cC:n,b:a,c:o,d:l,e:e,f:c})})))})),Wm={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D materialColorTexture;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n            vec3 materialColor = fromSrgb(texture2D(materialColorTexture, interpolatedUv).rgb);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{enabledLights:"U",lights12:"bo",lights34:"bW",lights56:"bX",lights78:"bY",materialColorTexture:"cD",normalMapTexture:"a$",sceneProperties:"e",useNormalMap:"a6",viewMatrix:"f"}},Om={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        attribute mediump vec2 uv;\n        attribute highp vec3 tangent;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getWorldTangent(vec3 modelTangent, vec4 modelScale, mat4 modelMatrix) {\n            return (modelMatrix * vec4(safeNormalize(modelScale.xyz * modelTangent), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = uv;\n            interpolatedTangent = getWorldTangent(tangent, modelScale, modelMatrix);\n        }\n    ",attributes:{normal:"p",position:"b3",tangent:"et",uv:"N"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Um=i((function(n,e,r,t,o,a){return u(Pm,t,l((function(t,i,c,l,u,s,v,m){var b=v.a,p=v.b;return d(Zs,f(wm,l,a,m),Om,Wm,o,{U:p,bo:b.bo,bW:b.bW,bX:b.bX,bY:b.bY,cD:n,b:c,c:i,a$:e,d:s,e:t,a6:r,f:u})})))})),qm={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D baseColorTexture;\n        uniform lowp vec4 constantBaseColor;\n        uniform mediump sampler2D roughnessTexture;\n        uniform lowp vec2 constantRoughness;\n        uniform mediump sampler2D metallicTexture;\n        uniform lowp vec2 constantMetallic;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getFloatValue(sampler2D texture, vec2 uv, vec2 constantValue) {\n            if (constantValue.y == 1.0) {\n                return constantValue.x;\n            } else {\n                vec4 textureColor = texture2D(texture, uv);\n                return dot(textureColor, vec4(0.2126, 0.7152, 0.0722, 0.0));\n            }\n        }\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 baseColor = fromSrgb(texture2D(baseColorTexture, interpolatedUv).rgb) * (1.0 - constantBaseColor.w) + constantBaseColor.rgb * constantBaseColor.w;\n            float roughness = getFloatValue(roughnessTexture, interpolatedUv, constantRoughness);\n            float metallic = getFloatValue(metallicTexture, interpolatedUv, constantMetallic);\n        \n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{baseColorTexture:"cf",constantBaseColor:"cj",constantMetallic:"ck",constantRoughness:"cl",enabledLights:"U",lights12:"bo",lights34:"bW",lights56:"bX",lights78:"bY",metallicTexture:"cG",normalMapTexture:"a$",roughnessTexture:"c1",sceneProperties:"e",useNormalMap:"a6",viewMatrix:"f"}},Ym={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 baseColor;\n        uniform lowp float roughness;\n        uniform lowp float metallic;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{baseColor:"ce",enabledLights:"U",lights12:"bo",lights34:"bW",lights56:"bX",lights78:"bY",metallic:"cF",roughness:"c0",sceneProperties:"e",viewMatrix:"f"}},Xm=i((function(n,e,r,t,o,a){return u(Pm,t,l((function(t,i,c,l,u,s,v,m){var b=v.a,p=v.b;return d(Zs,f(wm,l,a,m),Im,Ym,o,{ce:n,U:p,bo:b.bo,bW:b.bW,bX:b.bX,bY:b.bY,cF:r,b:c,c:i,d:s,c0:e,e:t,f:u})})))})),Km=r((function(n,e){return{$:1,a:n,b:e}})),Zm=r((function(n,e){return e.$?L(e.a.D,1):L(n,0)})),Jm=s(Ds,0,0,0,0),Qm=r((function(n,e){var r;return e.$?L(e.a.D,Jm):L(n,s(Ds,_d(r=e.a),Ad(r),Gd(r),1))})),nb=r((function(n,e){var r,t=L(n,e);return t.a.$?u(Km,L(r=t.a.a.D,Jm),u(Zm,r,e)):t.b.$?u(Km,u(Qm,r=t.b.a.D,n),u(Zm,r,e)):{$:0,a:t.a.a}})),eb=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),rb=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),tb=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),ob=u(nd,0,0),ab=r((function(n,e){return e.$?L(e.a.D,ob):L(n,u(nd,e.a,1))})),ib=o((function(n,e,r,t){var o,a=s(tb,n,e,r,t);return a.a.$?s(rb,L(o=a.a.a.D,Jm),u(ab,o,e),u(ab,o,r),u(Zm,o,t)):a.b.$?s(rb,u(Qm,o=a.b.a.D,n),L(o,ob),u(ab,o,r),u(Zm,o,t)):a.c.$?s(rb,u(Qm,o=a.c.a.D,n),u(ab,o,e),L(o,ob),u(Zm,o,t)):a.d.$?s(rb,u(Qm,o=a.d.a.D,n),u(ab,o,e),u(ab,o,r),L(o,1)):f(eb,a.a.a,a.b.a,a.c.a)})),cb={src:"\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        uniform mediump float backlight;\n        uniform highp mat4 sceneProperties;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            vec3 emissiveColor = fromSrgb(texture2D(colorTexture, interpolatedUv).rgb) * backlight;\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{backlight:"cb",colorTexture:"bP",sceneProperties:"e"}},lb=a((function(n,e,r,t,o){return u(Pm,r,l((function(r,a,i,c,l,u,s,v){return d(Zs,f(wm,c,o,v),Sm,cb,t,{cb:e,bP:n,b:i,c:a,d:u,e:r,f:l})})))})),ub={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        attribute mediump vec2 uv;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = uv;\n            interpolatedTangent = vec3(0.0, 0.0, 0.0);\n        }\n    ",attributes:{normal:"p",position:"b3",uv:"N"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},fb=o((function(n,e,r,t){return u(Pm,e,l((function(e,o,a,i,c,l,u,s){var v=u.a,m=u.b;return d(Zs,f(wm,i,t,s),ub,Wm,r,{U:m,bo:v.bo,bW:v.bW,bX:v.bX,bY:v.bY,cD:n,b:a,c:o,a$:n,d:l,e:e,a6:0,f:c})})))})),sb=function(n){return e(9,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return n(e,r,t,o,a,i,c,l,u)}}}}}}}}}))}((function(n,e,r,t,o,a,i,c,s){return u(Pm,i,l((function(i,l,u,v,m,b,p,g){var h=p.a,x=p.b;return d(Zs,f(wm,v,s,g),ub,qm,c,{cf:n,cj:e,ck:a,cl:t,U:x,bo:h.bo,bW:h.bW,bX:h.bX,bY:h.bY,cG:o,b:u,c:l,a$:n,d:b,c1:r,e:i,a6:0,f:m})})))})),db=t((function(n,e,r){return r>.5?e+(1-r)*(n-e):n+r*(e-n)})),vb=function(n){return f(df,function(n){return f(db,n.d4,n.d1,.5)}(n),function(n){return f(db,n.d5,n.d2,.5)}(n),function(n){return f(db,n.d6,n.d3,.5)}(n))},mb=function(n){var e=xd(n),r=e.a,t=e.b,o=e.c;return{eK:vb(n),eZ:r/2,e_:t/2,e$:o/2}},bb=r((function(n,e){switch(n.$){case 0:if(n.b.$){var r=n.b.a.D;switch(e.$){case 0:case 1:case 2:case 3:case 4:return Cm;case 5:case 6:case 7:return o=e.c,a=e.d,s(Nm,r,mb(G=e.a),o,a);case 8:case 9:default:return Cm}}else{var t=n.b.a;switch(e.$){case 0:return Cm;case 1:var o=e.c,a=e.d;return s(Dm,t,mb(G=e.a),o,a);case 2:case 3:case 4:return o=e.c,a=e.d,s(Dm,t,mb(G=e.a),o,a);case 5:case 6:case 7:return o=e.c,a=e.d,s(Dm,t,mb(G=e.a),o,a);case 8:case 9:return o=e.c,s(Dm,t,mb(G=e.a),o,0);default:return o=e.d,s(Gm,t,e.b,mb(G=e.a),o)}}case 1:if(n.b.$)switch(r=n.b.a.D,c=n.c,e.$){case 0:case 1:case 2:case 3:case 4:return Cm;case 5:case 6:case 7:return o=e.c,a=e.d,d(lb,r,c,mb(G=e.a),o,a);case 8:case 9:default:return Cm}else{var i=n.b.a,c=n.c;switch(e.$){case 0:return Cm;case 1:case 2:case 3:case 4:case 5:case 6:case 7:return o=e.c,a=e.d,d(Bm,i,c,mb(G=e.a),o,a);case 8:case 9:return o=e.c,d(Bm,i,c,mb(G=e.a),o,0);default:return o=e.d,d(Em,i,c,e.b,mb(G=e.a),o)}}case 2:var m=u(nb,n.b,n.c);if(m.$){var b=m.a.a,p=m.b,g=p.a,h=p.b;switch(e.$){case 0:case 1:case 2:case 3:case 4:case 5:return Cm;case 6:return o=e.c,C=e.d,s(fb,b,mb(G=e.a),o,C);case 7:return o=e.c,C=e.d,v(Um,b,g,h,mb(G=e.a),o,C);case 8:case 9:default:return Cm}}else{var x=m.a;switch(e.$){case 0:case 1:return Cm;case 2:o=e.c;var C=e.d;return s(Hm,x,mb(G=e.a),o,C);case 3:return Cm;case 4:return o=e.c,C=e.d,s(Hm,x,mb(G=e.a),o,C);case 5:return Cm;case 6:case 7:return o=e.c,C=e.d,s(Hm,x,mb(G=e.a),o,C);case 8:case 9:default:return Cm}}default:var P=s(ib,n.b,n.c,n.d,n.e);if(P.$){var M=P.a,T=M.a,y=M.b,L=P.b,w=L.a,S=L.b,N=P.c,F=N.a,$=N.b,D=P.d;switch(g=D.a,h=D.b,e.$){case 0:case 1:case 2:case 3:case 4:case 5:return Cm;case 6:return o=e.c,a=e.d,function(n,e,r,t,o,a,i,c,l,u){return 9===n.a?n.f(e,r,t,o,a,i,c,l,u):n(e)(r)(t)(o)(a)(i)(c)(l)(u)}(sb,T,y,w,S,F,$,mb(G=e.a),o,a);case 7:return G=e.a,o=e.c,a=e.d,function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(s){return function(v){return function(m){return u(Pm,s,l((function(l,u,s,b,p,g,h,x){var C=h.a,P=h.b;return d(Zs,f(wm,b,m,x),Om,qm,v,{cf:n,cj:e,ck:a,cl:t,U:P,bo:C.bo,bW:C.bW,bX:C.bX,bY:C.bY,cG:o,b:s,c:u,a$:i,d:g,c1:r,e:l,a6:c,f:p})})))}}}}}}}}}}}(T)(y)(w)(S)(F)($)(g)(h)(mb(G))(o)(a);case 8:case 9:default:return Cm}}else{var z=P.a,_=P.b,A=P.c;switch(e.$){case 0:case 1:return Cm;case 2:return o=e.c,a=e.d,v(Xm,z,_,A,mb(G=e.a),o,a);case 3:return Cm;case 4:return o=e.c,a=e.d,v(Xm,z,_,A,mb(G=e.a),o,a);case 5:return Cm;case 6:return o=e.c,a=e.d,v(Xm,z,_,A,mb(G=e.a),o,a);case 7:var G;return o=e.c,a=e.d,v(Xm,z,_,A,mb(G=e.a),o,a);case 8:case 9:default:return Cm}}}})),pb=function(n){return n.bF},gb=function(n){return n.bG},hb=function(n){return n.di},xb=function(n){var e=n,r=hb(e.dj),t=gb(e.dj),o=pb(e.dj),a=hb(e.dh),i=gb(e.dh),c=pb(e.dh),l=hb(e.dg),u=gb(e.dg),f=pb(e.dg);return f*i*r+u*a*o+l*c*t-l*i*o-u*c*r-f*a*t>0},Cb=r((function(n,e){return{$:5,a:n,b:e}})),Pb=r((function(n,e){var r=e;switch(r.$){case 0:return Cm;case 5:var t=r.b;return u(Cb,u(Bs,r.a,n),t);case 1:case 3:case 2:default:return u(Cb,n,r)}})),Mb=r((function(n,e){return u(Pb,function(n){var e=Nf(n),r=Df(n),t=$f(n),o=Ff(n);return{dE:xb(n),s:o.bF,t:o.bG,u:o.di,v:t.bF,w:t.bG,x:t.di,y:r.bF,z:r.bG,A:r.di,J:e.bF,K:e.bG,L:e.di,b7:1}}(n),e)})),Tb=function(n){return{$:2,a:n}},yb=r((function(n,e){var r=n.a,t=n.b,o=n.c,a=e.eK;return{eK:{bF:r*a.bF,bG:t*a.bG,di:o*a.di},eZ:r*e.eZ,e_:t*e.e_,e$:o*e.e$}})),Lb=function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){var f,s=n.a,d=n.b,v=n.c,m=function(n){return{bF:n[0],bG:n[1],di:n[2],ey:n[3]}}(t),p=(f={ey:m.ey,bF:m.bF*s,bG:m.bG*d,di:m.di*v},new Float64Array([f.bF,f.bG,f.di,f.ey]));return b(e,r,p,o,a,i,c,l,u)}}}}}}}}}},wb=r((function(n,e){switch(e.$){case 0:return xm;case 5:return u(Cb,e.a,u(wb,n,e.b));case 1:var r=e.b;return u(Pm,u(yb,n,e.a),u(Lb,n,r));case 3:return e;case 2:return Tb(u(Lb,n,r=e.a));default:var t=e.a;return Rd(u(Ht,wb(n),t))}})),Sb=r((function(n,e){return u(wb,n,e)})),Nb={src:"\n        precision lowp float;\n        \n        void main () {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        }\n    ",attributes:{},uniforms:{}},Fb=f(od,{cB:0,cZ:0,df:15},{bh:ld,bw:Ys,bH:ld,bI:7683},{bh:ld,bw:Ys,bH:ld,bI:7682}),$b=f(od,{cB:0,cZ:0,df:15},{bh:ld,bw:Ys,bH:ld,bI:7682},{bh:ld,bw:Ys,bH:ld,bI:7683}),Db=r((function(n,e){return u(yr,n?$b:Fb,e)})),zb={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 shadowVertexPosition(vec3 position, vec3 normal, mat4 shadowLight, vec4 modelScale, mat4 modelMatrix, mat4 viewMatrix, mat4 projectionMatrix, mat4 sceneProperties) {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            vec3 worldNormal = getWorldNormal(normal, vec4(modelScale.xyz, 1.0), modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 directionToLight = getDirectionToLight(worldPosition.xyz, xyz_type, rgb_parameter);\n            vec3 offset = vec3(0.0, 0.0, 0.0);\n            float sceneDiameter = sceneProperties[3][1];\n            if (dot(directionToLight, worldNormal) <= 0.0) {\n                offset = -sceneDiameter * directionToLight;\n            } else {\n                offset = -0.001 * sceneDiameter * directionToLight;\n            }\n            vec4 offsetPosition = worldPosition + vec4(offset, 0.0);\n            return projectionMatrix * (viewMatrix * offsetPosition);\n        }\n        \n        void main () {\n            gl_Position = shadowVertexPosition(\n                position,\n                normal,\n                shadowLight,\n                modelScale,\n                modelMatrix,\n                viewMatrix,\n                projectionMatrix,\n                sceneProperties\n            );\n        }\n    ",attributes:{normal:"p",position:"b3"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"b8",viewMatrix:"f"}},_b=function(n){var e=function(n){if(n.$){var e=n.c;return Br(l((function(n,r,t,o,a,i,c,l){return d(Zs,u(Db,o,l),zb,Nb,e,{b:t,c:r,d:i,e:n,b8:c,f:a})})))}return Vr}(n);return e.$?Cm:Tb(e.a)},Ab=o((function(n,e,r,t){var o,a=u(bb,r,Ov),i=(o=L(n,e)).a?o.b?Bd(z([a,_b(hm)])):a:o.b?_b(hm):Cm,c=Sf(t),l=c.a,f=c.b,s=c.c;return u(Mb,wf(t),u(Sb,w(l,f,s),i))})),Gb=r((function(n,e){return s(Ab,!0,!0,n,e)})),Rb=function(n){return{$:0,a:n}},kb=r((function(n,e){return{$:0,a:n,b:e}})),Bb=function(n){return qf(n)},Vb=r((function(n,e){return e/n})),Eb=function(n){var e=n;return{bF:qf(e),bG:Yf(e)}},jb=r((function(n,e){var r=n.b3;return u(yr,{p:Vv(n.p),b3:Bv(r)},e)})),Ib=c((function(n,e,r,t,o,a,i){for(;;){if(!i.b)return Av({d1:e,d2:t,d3:a,d4:n,d5:r,d6:o});var c=i.a,l=i.b,f=Gd(c.b3),s=Ad(c.b3),d=_d(c.b3);n=u(wd,n,d),e=u(st,e,d),r=u(wd,r,s),t=u(st,t,s),o=u(wd,o,f),a=u(st,a,f),i=l}})),Hb=r((function(n,e){var r=Gd(n.b3),t=Ad(n.b3),o=_d(n.b3);return m(Ib,o,o,t,t,r,r,e)})),Wb=r((function(n,e){var r=n.dh,t=n.dg;return{bF:e.bF*t.bF+e.bG*r.bF,bG:e.bF*t.bG+e.bG*r.bG,di:e.bF*t.di+e.bG*r.di}})),Ob=function(n){return Yf(n)},Ub=function(n){return 6.283185307179586*n},qb={cK:Ru,dg:Qd,dh:as},Yb=(aa=u(Vb,72,Ub(1)),ia=sf,ca=uf,ua=f(df,0,0,la=u(Wd,.5,1)),sa=f(df,0,0,fa=u(Wd,-.5,1)),Fv(function(n){var e=f(wr,jb,F,em(n));if(e.b){var r=e.a,t=e.b,o=u(lm,e,Xv(n));return s(yv,u(Hb,r,t),n,o,0)}return $v}(pm(Ms(u(Ht,(function(n){var e=u(Wd,n,aa),r=u(Wb,qb,Eb(e)),t=u(Wd,Bb(e),1),o=u(Wd,Ob(e),1),a=f(df,t,o,la),i=f(df,t,o,fa),c=u(Wd,u(Cc,72,n+1),aa),l=u(Wb,qb,Eb(c)),s=u(Wd,Bb(c),1),d=u(Wd,Ob(c),1),v=f(df,s,d,fa),m=f(df,s,d,la);return z([w({p:ca,b3:sa},{p:ca,b3:v},{p:ca,b3:i}),w({p:r,b3:i},{p:l,b3:v},{p:l,b3:m}),w({p:r,b3:i},{p:l,b3:m},{p:r,b3:a}),w({p:ia,b3:ua},{p:ia,b3:a},{p:ia,b3:m})])}),u(Yr,0,71))))))),Xb=gm(Yb),Kb=function(n){return n.cK},Zb=o((function(n,e,r,t){var o,a=function(n){var e=function(n){return n.eO}(n),r=Au(e),t=r.a,o=r.b;return{cK:Kb(n),dg:t,dh:o,dj:e}}(function(n){return n.l}(t)),i=u(bb,r,Yb),c=(o=L(n,e)).a?o.b?Bd(z([i,_b(Xb)])):i:o.b?_b(Xb):Cm,l=function(n){return n.fm}(t),f=function(n){return n.e8}(t);return u(Mb,a,u(Sb,w(l,l,f),c))})),Jb=r((function(n,e){return s(Zb,!0,!0,n,e)})),Qb={src:"\n        precision highp float;\n        \n        attribute lowp float triangleVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 triangleVertexPositions;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleVertex), triangleVertexPositions, position, normal);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{triangleVertex:"c8"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",triangleVertexPositions:"bC",viewMatrix:"f"}},np={src:"\n        precision highp float;\n        \n        attribute lowp float triangleVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 triangleVertexPositions;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleVertex), triangleVertexPositions, position, normal);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n        }\n    ",attributes:{triangleVertex:"c8"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",triangleVertexPositions:"bC",viewMatrix:"f"}},ep=function(n){var e=n.a,r=n.b,t=n.c;return Vs({dM:e.bF,dN:r.bF,dO:t.bF,dP:0,dQ:e.bG,dR:r.bG,dS:t.bG,dT:0,dU:e.di,dV:r.di,dW:t.di,dX:0,dY:0,dZ:0,d_:0,d$:0})},rp=Hv(z([w({c8:0},{c8:1},{c8:2})])),tp=r((function(n,e){var r=Rv(e),t=mb(r);switch(n.$){case 0:if(n.b.$)return Cm;var o=n.b.a;return u(Pm,t,l((function(n,r,t,a,i,c,l,u){return d(Zs,f(wm,a,0,u),Qb,Fm,rp,{aE:o,b:t,c:r,d:c,e:n,bC:ep(e),f:i})})));case 1:if(n.b.$)return Cm;var a=n.b.a,i=n.c;return u(Pm,t,l((function(n,r,t,o,c,l,s,v){return d(Zs,f(wm,o,0,v),Qb,Rm,rp,{aU:u(km,i,a),b:t,c:r,d:l,e:n,bC:ep(e),f:c})})));case 2:var c=u(nb,n.b,n.c);if(c.$)return Cm;var v=c.a;return u(Pm,t,l((function(n,r,t,o,a,i,c,l){var u=c.a,s=c.b;return d(Zs,f(wm,o,0,l),np,jm,rp,{U:s,bo:u.bo,bW:u.bW,bX:u.bX,bY:u.bY,cC:v,b:t,c:r,d:i,e:n,bC:ep(e),f:a})})));default:var m=s(ib,n.b,n.c,n.d,n.e);if(m.$)return Cm;var b=m.a,p=m.b,g=m.c;return u(Pm,t,l((function(n,r,t,o,a,i,c,l){var u=c.a,s=c.b;return d(Zs,f(wm,o,0,l),np,Ym,rp,{ce:b,U:s,bo:u.bo,bW:u.bW,bX:u.bX,bY:u.bY,cF:g,b:t,c:r,d:i,c0:p,e:n,bC:ep(e),f:a})})))}})),op=(da=z([{a5:u(nd,0,1)},{a5:u(nd,1,1)},{a5:u(nd,2,1)},{a5:u(nd,0,-1)},{a5:u(nd,1,-1)},{a5:u(nd,2,-1)}]),va=z([w(0,1,2),w(3,5,4),w(3,4,1),w(3,1,0),w(4,5,2),w(4,2,1),w(5,3,0),w(5,0,2)]),u(lm,da,va)),ap={src:"\n        precision highp float;\n        \n        attribute highp vec2 triangleShadowVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        uniform highp mat4 triangleVertexPositions;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 shadowVertexPosition(vec3 position, vec3 normal, mat4 shadowLight, vec4 modelScale, mat4 modelMatrix, mat4 viewMatrix, mat4 projectionMatrix, mat4 sceneProperties) {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            vec3 worldNormal = getWorldNormal(normal, vec4(modelScale.xyz, 1.0), modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 directionToLight = getDirectionToLight(worldPosition.xyz, xyz_type, rgb_parameter);\n            vec3 offset = vec3(0.0, 0.0, 0.0);\n            float sceneDiameter = sceneProperties[3][1];\n            if (dot(directionToLight, worldNormal) <= 0.0) {\n                offset = -sceneDiameter * directionToLight;\n            } else {\n                offset = -0.001 * sceneDiameter * directionToLight;\n            }\n            vec4 offsetPosition = worldPosition + vec4(offset, 0.0);\n            return projectionMatrix * (viewMatrix * offsetPosition);\n        }\n        \n        void main () {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleShadowVertex.x), triangleVertexPositions, position, normal);\n            normal *= triangleShadowVertex.y;\n            gl_Position = shadowVertexPosition(\n                position,\n                normal,\n                shadowLight,\n                modelScale,\n                modelMatrix,\n                viewMatrix,\n                projectionMatrix,\n                sceneProperties\n            );\n        }\n    ",attributes:{triangleShadowVertex:"a5"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"b8",triangleVertexPositions:"bC",viewMatrix:"f"}},ip=function(n){return Tb(l((function(e,r,t,o,a,i,c,l){return d(Zs,u(Db,o,l),ap,Nb,op,{b:t,c:r,d:i,e:e,b8:c,bC:ep(n),f:a})})))},cp=o((function(n,e,r,t){var o=u(tp,r,t),a=L(n,e);return a.a?a.b?Bd(z([o,ip(t)])):o:a.b?ip(t):Cm})),lp=r((function(n,e){return s(cp,!0,!0,n,e)})),up=r((function(n,e){var r=pf(e),t=pf(n),o=bf(e),a=bf(n),i=mf(e),c=mf(n);return{d1:u(Ld,c,i),d2:u(Ld,a,o),d3:u(Ld,t,r),d4:u(Sd,c,i),d5:u(Sd,a,o),d6:u(Sd,t,r)}})),fp={src:"\n        precision highp float;\n        \n        attribute lowp float lineSegmentVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp vec3 lineSegmentStartPoint;\n        uniform highp vec3 lineSegmentEndPoint;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = (1.0 - lineSegmentVertex) * lineSegmentStartPoint + lineSegmentVertex * lineSegmentEndPoint;\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{lineSegmentVertex:"dL"},uniforms:{lineSegmentEndPoint:"dJ",lineSegmentStartPoint:"dK",modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},sp=r((function(n,e){return{$:1,a:n,b:e}}))({du:2,dD:0,d8:1})(z([L({dL:0},{dL:1})])),dp=r((function(n,e){var r,t=u(up,(r=e).a,r.b),o=mb(t),a=e.a,i=e.b;switch(n.$){case 0:if(n.b.$)return Cm;var c=n.b.a;return u(Pm,o,l((function(n,e,r,t,o,l,u,f){return d(Zs,f,fp,Fm,sp,{aE:c,dJ:Bv(i),dK:Bv(a),b:r,c:e,d:l,e:n,f:o})})));case 1:if(n.b.$)return Cm;c=n.b.a;var f=n.c;return u(Pm,o,l((function(n,e,r,t,o,l,s,v){return d(Zs,v,fp,Rm,sp,{aU:u(km,f,c),dJ:Bv(i),dK:Bv(a),b:r,c:e,d:l,e:n,f:o})})));case 2:default:return Cm}})),vp=r((function(n,e){return u(dp,n,e)})),mp=t((function(n,e,r){return{$:2,a:n,b:e,c:r}})),bp=function(n){return f(fv,0,1,n>.04045?u(Zi,(n+.055)/1.055,2.4):n/12.92)},pp=function(n){return f(mp,0,Rb(function(n){var e=Tc(n),r=e.cp,t=e.cg;return f(Rs,bp(e.cY),bp(r),bp(t))}(n)),Rb(0))},gp=r((function(n,e){return n/e})),hp=a((function(n,e,r,t,o){for(;;){var a=t(e/r),i=u(yr,a,o);if(P(e,n))return i;n=n,e-=1,r=r,t=t,o=i}})),xp=r((function(n,e){return 1>n?F:d(hp,0,n,n,e,F)})),Cp=r((function(n,e){var r=n.b3,t=n.N,o=t.a,a=t.b;return u(yr,{p:Vv(n.p),b3:Bv(r),N:u(nd,o,a)},e)})),Pp=r((function(n,e){var r=n,t=e,o=qf(t);return{bF:o*qf(r),bG:o*Yf(r),di:Yf(t)}})),Mp=(ma=u(Yr,0,71),ba=u(xp,72,u(db,0,Ub(1))),pa=rt(36),ga=u(Yr,0,pa-1),ha=u(xp,pa,u(db,Pu(90),Pu(-90))),xa=om(Ms(u(Ht,(function(n){return u(Ht,(function(e){return{p:u(Pp,n,e),b3:f(df,u(Wd,Bb(e)*Bb(n),1),u(Wd,Bb(e)*Ob(n),1),u(Wd,Ob(e),1)),N:L(u(gp,n,Ub(1)),u(gp,u(Fd,Pu(90),e),Pu(180)))}}),ha)}),ba))),Ca=r((function(n,e){return n*(pa+1)+e})),Pa=Ms(u(Ht,(function(n){return Ms(u(Ht,(function(e){var r=u(Ca,n+1,e),t=u(Ca,n,e),o=u(Ca,n+1,e+1),a=u(Ca,n,e+1);return z([w(a,o,r),w(a,r,t)])}),ga))}),ma)),Fv(function(n){var e=f(wr,Cp,F,em(n));if(e.b){var r=e.a,t=e.b,o=u(lm,e,Xv(n));return s(Lv,u(Hb,r,t),n,o,0)}return $v}(u(cm,xa,Pa)))),Tp=r((function(n,e){for(;;){var r=u(Cc,144,2*n+3),t=u(Cc,144,2*n+2),o=2*n+1,a=2*n,i=u(yr,w(144,a,t),u(yr,w(a,r,t),u(yr,w(a,o,r),u(yr,w(o,145,r),e))));if(!n)return i;n-=1,e=i}})),yp=t((function(n,e,r){return r>.5?e+(1-r)*(n-e):n+r*(e-n)})),Lp=(Ma=u(r((function(n,e){for(;;){var r=f(yp,0,6.283185307179586,n/72),t=u(yr,{bK:r,b$:0,b6:1},u(yr,{bK:r,b$:1,b6:1},e));if(!n)return t;n-=1,e=t}})),71,z([{bK:0,b$:0,b6:0},{bK:0,b$:1,b6:0}])),u(lm,Ma,u(Tp,71,F))),wp={src:"\n        precision highp float;\n        \n        attribute highp float angle;\n        attribute highp float offsetScale;\n        attribute highp float radiusScale;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const lowp float kPerspectiveProjection = 0.0;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec3 perpendicularTo(vec3 d) {\n            float absX = abs(d.x);\n            float absY = abs(d.y);\n            float absZ = abs(d.z);\n            if (absX <= absY) {\n                if (absX <= absZ) {\n                    float scale = 1.0 / length(d.zy);\n                    return vec3(0.0, -d.z * scale, d.y * scale);\n                } else {\n                    float scale = 1.0 / length(d.xy);\n                    return vec3(-d.y * scale, d.x * scale, 0.0);\n                }\n            } else {\n                if (absY <= absZ) {\n                    float scale = 1.0 / length(d.xz);\n                    return vec3(d.z * scale, 0.0, -d.x * scale);\n                } else {\n                    float scale = 1.0 / length(d.xy);\n                    return vec3(-d.y * scale, d.x * scale, 0.0);\n                }\n            }\n        }\n        \n        void main () {\n            vec4 worldCenter = getWorldPosition(vec3(0.0, 0.0, 0.0), modelScale, modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 zDirection = getDirectionToLight(worldCenter.xyz, xyz_type, rgb_parameter);\n            vec3 xDirection = perpendicularTo(zDirection);\n            vec3 yDirection = cross(zDirection, xDirection);\n            float r = modelScale.x;\n            float adjustedRadius = r;\n            float zOffset = 0.0;\n            if (xyz_type.w == kPointLight) {\n                float distanceToLight = length(xyz_type.xyz - worldCenter.xyz);\n                float rSquared = r * r;\n                zOffset = rSquared / distanceToLight;\n                float zSquared = zOffset * zOffset;\n                adjustedRadius = sqrt(rSquared - zSquared) * radiusScale;\n            }\n            vec3 worldPosition =\n                worldCenter.xyz\n                    + zDirection * zOffset\n                    + xDirection * adjustedRadius * cos(angle)\n                    + yDirection * adjustedRadius * sin(angle);\n            vec3 directionToLight = getDirectionToLight(worldPosition, xyz_type, rgb_parameter);\n            float sceneDiameter = sceneProperties[3][1];\n            vec3 offset = -sceneDiameter * offsetScale * directionToLight;\n            vec4 offsetPosition = vec4(worldPosition + offset, 1.0);\n            gl_Position = projectionMatrix * (viewMatrix * offsetPosition);\n        }\n    ",attributes:{angle:"bK",offsetScale:"b$",radiusScale:"b6"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"b8",viewMatrix:"f"}},Sp=function(){return Tb(l((function(n,e,r,t,o,a,i,c){return d(Zs,u(Db,!0,c),wp,Nb,Lp,{aE:f(Rs,0,0,1),b:r,c:e,d:a,e:n,b8:i,f:o})})))},Np=r((function(n,e){return u(Pb,function(n){return{dE:!0,s:1,t:0,u:0,v:0,w:1,x:0,y:0,z:0,A:1,J:n.bF,K:n.bG,L:n.di,b7:1}}(n),e)})),Fp=o((function(n,e,r,t){var o,a=u(bb,r,Mp),i=(o=L(n,e)).a?o.b?Bd(z([a,Sp()])):a:o.b?Sp():Cm,c=Ef(t);return u(Np,u(wu,Ru,Vf(t)),u(Sb,w(c,c,c),i))})),$p=r((function(n,e){return s(Fp,!0,!0,n,e)})),Dp=function(n){switch(n.$){case 0:var e=n.b;return z([u(Gb,pp(n.a),e)]);case 1:var r=n.b;return z([u(lp,pp(n.a),r)]);case 3:var t=n.b;return z([u($p,pp(n.a),t)]);case 2:var o=n.b;return z([u(Jb,pp(n.a),o)]);case 4:var a=n.b;return z([u(vp,(i=n.a,u(kb,0,Rb(function(n){var e=Tc(n);return f(Rs,e.cY,e.cp,e.cg)}(i)))),a)]);default:return u(Ts,Dp,n.a)}var i},zp=r((function(n,e){return function(n){var e,r=u(cv,n.fq,{ch:vv,eO:n.fx,cr:8e4}),t=uv({ch:dv,cr:2e4,fB:n.fB}),o=uv({ch:iv,cr:15e3,fB:Zd(n.fB)}),a=f(Pv,r,t,o);return function(n){return u(av,{eA:n.eA,dm:n.dm,eH:n.eH,dq:n.dq,dt:n.dt},z([{dx:n.dx,eT:n.eT,fa:n.fa,fA:n.fA,fG:n.fG}]))}({eA:(e=n.cm,{$:2,a:e}),dm:n.dm,eH:n.eH,dq:n.dq,dt:n.dt,dx:n.dx,eT:1.2*u(Zi,2,15),fa:a,fA:lv,fG:iv})}({dm:n.eE,eH:n.eH,dq:.005,cm:n.cm,dt:L(Ji(n.ad.de),Ji(n.ad.cq)),dx:(r=e,u(Ts,Dp,r)),fq:!0,fx:u(Pp,n.fw,n.fy),fB:nv});var r}));Ta={Main:{init:f(hu,r((function(n,e){return u(zp,{eE:Iu,eH:ju,cm:n.cm,ad:n.ad,fw:0,fy:0},u(ps,n,e))})),xu,(function(){return{}}))(u(Ct,(function(n){return wt({cm:n})}),u(Pt,"devicePixelRatio",Mt)))(0)}},n.Elm?function n(e,r){for(var t in r)t in e?"init"==t?C(6):n(e[t],r[t]):e[t]=r[t]}(n.Elm,Ta):n.Elm=Ta}(n);const e=n.Elm.Main.init({node:document.getElementById("elm-node"),flags:{devicePixelRatio:window.devicePixelRatio}});function r(n){const e=[];for(let r=0;r<n.length;r++)e.push({identifier:n[r].identifier,pageX:n[r].pageX,pageY:n[r].pageY});return e}window.addEventListener("touchstart",(n=>{e.ports.touchStart.send(r(n.changedTouches))})),window.addEventListener("touchmove",(n=>{e.ports.touchMove.send(r(n.changedTouches))})),window.addEventListener("touchend",(n=>{e.ports.touchEnd.send(r(n.changedTouches))})),window.addEventListener("touchcancel",(n=>{e.ports.touchCancel.send(r(n.changedTouches))}))}();
//# sourceMappingURL=index.feb5e7ba.js.map
