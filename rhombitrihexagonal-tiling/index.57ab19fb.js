!function(){var n={};!function(n){function e(n,e,r){return r.a=n,r.f=e,r}function r(n){return e(2,n,(function(e){return function(r){return n(e,r)}}))}function t(n){return e(3,n,(function(e){return function(r){return function(t){return n(e,r,t)}}}))}function o(n){return e(4,n,(function(e){return function(r){return function(t){return function(o){return n(e,r,t,o)}}}}))}function a(n){return e(5,n,(function(e){return function(r){return function(t){return function(o){return function(a){return n(e,r,t,o,a)}}}}}))}function i(n){return e(6,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return n(e,r,t,o,a,i)}}}}}}))}function c(n){return e(7,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return n(e,r,t,o,a,i,c)}}}}}}}))}function l(n){return e(8,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return n(e,r,t,o,a,i,c,l)}}}}}}}}))}function u(n,e,r){return 2===n.a?n.f(e,r):n(e)(r)}function f(n,e,r,t){return 3===n.a?n.f(e,r,t):n(e)(r)(t)}function s(n,e,r,t,o){return 4===n.a?n.f(e,r,t,o):n(e)(r)(t)(o)}function d(n,e,r,t,o,a){return 5===n.a?n.f(e,r,t,o,a):n(e)(r)(t)(o)(a)}function m(n,e,r,t,o,a,i){return 6===n.a?n.f(e,r,t,o,a,i):n(e)(r)(t)(o)(a)(i)}function v(n,e,r,t,o,a,i,c){return 7===n.a?n.f(e,r,t,o,a,i,c):n(e)(r)(t)(o)(a)(i)(c)}function b(n,e,r,t,o,a,i,c,l){return 8===n.a?n.f(e,r,t,o,a,i,c,l):n(e)(r)(t)(o)(a)(i)(c)(l)}var p=t((function(n,e,r){for(var t=Array(n),o=0;n>o;o++)t[o]=r(e+o);return t})),g=r((function(n,e){for(var r=Array(n),t=0;n>t&&e.b;t++)r[t]=e.a,e=e.b;return r.length=t,L(r,e)})),h=r((function(n,e){return e[n]})),x=t((function(n,e,r){for(var t=r.length-1;t>=0;t--)e=u(n,r[t],e);return e}));function C(n){throw Error("https://github.com/elm/core/blob/1.0.0/hints/"+n+".md")}function P(n,e){for(var r,t=[],o=M(n,e,0,t);o&&(r=t.pop());o=M(r.a,r.b,0,t));return o}function M(n,e,r,t){if(n===e)return!0;if("object"!=typeof n||null===n||null===e)return"function"==typeof n&&C(5),!1;if(r>100)return t.push(L(n,e)),!0;for(var o in 0>n.$&&(n=Sr(n),e=Sr(e)),n)if(!M(n[o],e[o],r+1,t))return!1;return!0}function y(n,e,r){if("object"!=typeof n)return n===e?0:e>n?-1:1;if(void 0===n.$)return(r=y(n.a,e.a))||(r=y(n.b,e.b))?r:y(n.c,e.c);for(;n.b&&e.b&&!(r=y(n.a,e.a));n=n.b,e=e.b);return r||(n.b?1:e.b?-1:0)}var T=r((function(n,e){var r=y(n,e);return 0>r?$r:r?Er:Nr}));function L(n,e){return{a:n,b:e}}function D(n,e,r){return{a:n,b:e,c:r}}function w(n,e){var r={};for(var t in n)r[t]=n[t];for(var t in e)r[t]=e[t];return r}function S(n,e){if("string"==typeof n)return n+e;if(!n.b)return e;var r=E(n.a,e);n=n.b;for(var t=r;n.b;n=n.b)t=t.b=E(n.a,e);return r}var N={$:0};function E(n,e){return{$:1,a:n,b:e}}var $=r(E);function z(n){for(var e=N,r=n.length;r--;)e=E(n[r],e);return e}function _(n){for(var e=[];n.b;n=n.b)e.push(n.a);return e}var A=t((function(n,e,r){for(var t=[];e.b&&r.b;e=e.b,r=r.b)t.push(u(n,e.a,r.a));return z(t)})),R=r((function(n,e){return n*e})),V=r(Math.pow),F=r((function(n,e){var r=e%n;return 0===n?C(11):r>0&&0>n||0>r&&n>0?r+n:r})),B=Math.cos,k=Math.sin,j=Math.tan,W=Math.ceil,I=Math.floor,H=Math.round,U=Math.sqrt,O=Math.log,Y=isNaN,q=r((function(n,e){return n+e})),G=t((function(n,e,r){for(var t=r.length;t--;){var o=r[t],a=r.charCodeAt(t);56320>a||a>57343||(o=r[--t]+o),e=u(n,o,e)}return e})),X=r((function(n,e){return e.split(n)})),J=r((function(n,e){return e.join(n)})),K=t((function(n,e,r){return r.slice(n,e)})),Q=r((function(n,e){return 0===e.indexOf(n)}));function Z(n){return n+""}function nn(n){return{$:2,b:n}}var en=nn((function(n){return"number"!=typeof n?hn("an INT",n):n>-2147483647&&2147483647>n&&(0|n)===n?Vr(n):!isFinite(n)||n%1?hn("an INT",n):Vr(n)})),rn=nn((function(n){return"boolean"==typeof n?Vr(n):hn("a BOOL",n)})),tn=nn((function(n){return"number"==typeof n?Vr(n):hn("a FLOAT",n)})),on=(nn((function(n){return Vr(n)})),nn((function(n){return"string"==typeof n?Vr(n):n instanceof String?Vr(n+""):hn("a STRING",n)}))),an=r((function(n,e){return{$:6,d:n,b:e}}));function cn(n,e){return{$:9,f:n,g:e}}var ln=r((function(n,e){return{$:10,b:e,h:n}})),un=r((function(n,e){return cn(n,[e])})),fn=t((function(n,e,r){return cn(n,[e,r])})),sn=o((function(n,e,r,t){return cn(n,[e,r,t])})),dn=r((function(n,e){try{return vn(n,JSON.parse(e))}catch(n){return zr(u(_r,"This is not valid JSON! "+n.message,e))}})),mn=r((function(n,e){return vn(n,e)}));function vn(n,e){switch(n.$){case 2:return n.b(e);case 5:return null===e?Vr(n.c):hn("null",e);case 3:return pn(e)?bn(n.b,e,z):hn("a LIST",e);case 4:return pn(e)?bn(n.b,e,gn):hn("an ARRAY",e);case 6:var r=n.d;if("object"!=typeof e||null===e||!(r in e))return hn("an OBJECT with a field named `"+r+"`",e);var t=vn(n.b,e[r]);return xt(t)?t:zr(u(Ar,r,t.a));case 7:var o=n.e;return pn(e)?e.length>o?(t=vn(n.b,e[o]),xt(t)?t:zr(u(Rr,o,t.a))):hn("a LONGER array. Need index "+o+" but only see "+e.length+" entries",e):hn("an ARRAY",e);case 8:if("object"!=typeof e||null===e||pn(e))return hn("an OBJECT",e);var a=N;for(var i in e)if(e.hasOwnProperty(i)){if(t=vn(n.b,e[i]),!xt(t))return zr(u(Ar,i,t.a));a=E(L(i,t.a),a)}return Vr(Kr(a));case 9:for(var c=n.f,l=n.g,f=0;l.length>f;f++){if(t=vn(l[f],e),!xt(t))return t;c=c(t.a)}return Vr(c);case 10:return t=vn(n.b,e),xt(t)?vn(n.h(t.a),e):t;case 11:for(var s=N,d=n.g;d.b;d=d.b){if(t=vn(d.a,e),xt(t))return t;s=E(t.a,s)}return zr(Fr(Kr(s)));case 1:return zr(u(_r,n.a,e));case 0:return Vr(n.a)}}function bn(n,e,r){for(var t=e.length,o=Array(t),a=0;t>a;a++){var i=vn(n,e[a]);if(!xt(i))return zr(u(Rr,a,i.a));o[a]=i.a}return Vr(r(o))}function pn(n){return Array.isArray(n)||"undefined"!=typeof FileList&&n instanceof FileList}function gn(n){return u(ht,n.length,(function(e){return n[e]}))}function hn(n,e){return zr(u(_r,"Expecting "+n,e))}function xn(n,e){if(n===e)return!0;if(n.$!==e.$)return!1;switch(n.$){case 0:case 1:return n.a===e.a;case 2:return n.b===e.b;case 5:return n.c===e.c;case 3:case 4:case 8:return xn(n.b,e.b);case 6:return n.d===e.d&&xn(n.b,e.b);case 7:return n.e===e.e&&xn(n.b,e.b);case 9:return n.f===e.f&&Cn(n.g,e.g);case 10:return n.h===e.h&&xn(n.b,e.b);case 11:return Cn(n.g,e.g)}}function Cn(n,e){var r=n.length;if(r!==e.length)return!1;for(var t=0;r>t;t++)if(!xn(n[t],e[t]))return!1;return!0}var Pn=r((function(n,e){return JSON.stringify(e,null,n)+""}));function Mn(n){return n}var yn=t((function(n,e,r){return r[n]=e,r}));function Tn(n){return{$:0,a:n}}function Ln(n){return{$:2,b:n,c:null}}var Dn=r((function(n,e){return{$:3,b:n,d:e}})),wn=0;function Sn(n){var e={$:0,e:wn++,f:n,g:null,h:[]};return An(e),e}function Nn(n){return Ln((function(e){e(Tn(Sn(n)))}))}function En(n,e){n.h.push(e),An(n)}var $n=r((function(n,e){return Ln((function(r){En(n,e),r(Tn(0))}))})),zn=!1,_n=[];function An(n){if(_n.push(n),!zn){for(zn=!0;n=_n.shift();)Rn(n);zn=!1}}function Rn(n){for(;n.f;){var e=n.f.$;if(0===e||1===e){for(;n.g&&n.g.$!==e;)n.g=n.g.i;if(!n.g)return;n.f=n.g.b(n.f.a),n.g=n.g.i}else{if(2===e)return void(n.f.c=n.f.b((function(e){n.f=e,An(n)})));if(5===e){if(0===n.h.length)return;n.f=n.f.b(n.h.shift())}else n.g={$:3===e?0:1,b:n.f.b,i:n.g},n.f=n.f.d}}}var Vn={};function Fn(n,e,r,t,o){return{b:n,c:e,d:r,e:t,f:o}}function Bn(n,e){var r={g:e,h:void 0},t=n.c,o=n.d,a=n.e,i=n.f;return r.h=Sn(u(Dn,(function n(e){return u(Dn,n,{$:5,b:function(n){var c=n.a;return 0===n.$?f(o,r,c,e):a&&i?s(t,r,c.i,c.j,e):f(t,r,a?c.i:c.j,e)}})}),n.b))}var kn=r((function(n,e){return Ln((function(r){n.g(e),r(Tn(0))}))})),jn=r((function(n,e){return u($n,n.h,{$:0,a:e})}));function Wn(n){return function(e){return{$:1,k:n,l:e}}}function In(n){return{$:2,m:n}}var Hn=r((function(n,e){return{$:3,n:n,o:e}})),Un=[],On=!1;function Yn(n,e,r){if(Un.push({p:n,q:e,r:r}),!On){On=!0;for(var t;t=Un.shift();)qn(t.p,t.q,t.r);On=!1}}function qn(n,e,r){var t={};for(var o in Gn(!0,e,t,null),Gn(!1,r,t,null),n)En(n[o],{$:"fx",a:t[o]||{i:N,j:N}})}function Gn(n,e,r,t){switch(e.$){case 1:var o=e.k,a=function(n,e,r,t){return u(n?Vn[e].e:Vn[e].f,(function(n){for(var e=r;e;e=e.t)n=e.s(n);return n}),t)}(n,o,t,e.l);return void(r[o]=function(n,e,r){return r=r||{i:N,j:N},n?r.i=E(e,r.i):r.j=E(e,r.j),r}(n,a,r[o]));case 2:for(var i=e.m;i.b;i=i.b)Gn(n,i.a,r,t);return;case 3:return void Gn(n,e.o,r,{s:e.n,t:t})}}function Xn(n,e){return function(n){Vn[n]&&C(3)}(n),Vn[n]={f:Jn,u:e,a:Kn},Wn(n)}var Jn=r((function(n,e){return function(r){return n(e(r))}}));function Kn(n,e){var r=N,o=Vn[n].u,a=Tn(null);return Vn[n].b=a,Vn[n].c=t((function(n,e){return r=e,a})),{send:function(n){var t=u(mn,o,n);xt(t)||C(4);for(var a=t.a,i=r;i.b;i=i.b)e(i.a(a))}}}var Qn="undefined"!=typeof document?document:{};function Zn(n,e){n.appendChild(e)}function ne(n){return{$:0,a:n}}var ee,re=r((function(n,e){return r((function(r,t){for(var o=[],a=0;t.b;t=t.b){var i=t.a;a+=i.b||0,o.push(i)}return a+=o.length,{$:1,c:e,d:ue(r),e:o,f:n,b:a}}))}))(void 0),te=r((function(n,e){return r((function(r,t){for(var o=[],a=0;t.b;t=t.b){var i=t.a;a+=i.b.b||0,o.push(i)}return a+=o.length,{$:2,c:e,d:ue(r),e:o,f:n,b:a}}))}))(void 0),oe=r((function(n,e){return{$:4,j:n,k:e,b:1+(e.b||0)}})),ae=r((function(n,e){return{$:"a0",n:n,o:e}})),ie=r((function(n,e){return{$:"a1",n:n,o:e}})),ce=r((function(n,e){return{$:"a2",n:n,o:e}})),le=r((function(n,e){return{$:"a3",n:n,o:e}}));function ue(n){for(var e={};n.b;n=n.b){var r=n.a,t=r.$,o=r.n,a=r.o;if("a2"!==t){var i=e[t]||(e[t]={});"a3"===t&&"class"===o?fe(i,o,a):i[o]=a}else"className"===o?fe(e,o,a):e[o]=a}return e}function fe(n,e,r){var t=n[e];n[e]=t?t+" "+r:r}function se(n,e){var r=n.$;if(5===r)return se(n.k||(n.k=n.m()),e);if(0===r)return Qn.createTextNode(n.a);if(4===r){for(var t=n.k,o=n.j;4===t.$;)"object"!=typeof o?o=[o,t.j]:o.push(t.j),t=t.k;var a={j:o,p:e};return(i=se(t,a)).elm_event_node_ref=a,i}if(3===r)return de(i=n.h(n.g),e,n.d),i;var i=n.f?Qn.createElementNS(n.f,n.c):Qn.createElement(n.c);de(i,e,n.d);for(var c=n.e,l=0;c.length>l;l++)Zn(i,se(1===r?c[l]:c[l].b,e));return i}function de(n,e,r){for(var t in r){var o=r[t];"a1"===t?me(n,o):"a0"===t?pe(n,e,o):"a3"===t?ve(n,o):"a4"===t?be(n,o):("value"!==t&&"checked"!==t||n[t]!==o)&&(n[t]=o)}}function me(n,e){var r=n.style;for(var t in e)r[t]=e[t]}function ve(n,e){for(var r in e){var t=e[r];void 0!==t?n.setAttribute(r,t):n.removeAttribute(r)}}function be(n,e){for(var r in e){var t=e[r],o=t.f,a=t.o;void 0!==a?n.setAttributeNS(o,r,a):n.removeAttributeNS(o,r)}}function pe(n,e,r){var t=n.elmFs||(n.elmFs={});for(var o in r){var a=r[o],i=t[o];if(a){if(i){if(i.q.$===a.$){i.q=a;continue}n.removeEventListener(o,i)}i=ge(e,a),n.addEventListener(o,i,ee&&{passive:2>Dt(a)}),t[o]=i}else n.removeEventListener(o,i),t[o]=void 0}}try{window.addEventListener("t",null,Object.defineProperty({},"passive",{get:function(){ee=!0}}))}catch(n){}function ge(n,e){function r(e){var t=r.q,o=vn(t.a,e);if(xt(o)){for(var a,i=Dt(t),c=o.a,l=i?3>i?c.a:c.as:c,u=1==i?c.b:3==i&&c.c5,f=(u&&e.stopPropagation(),(2==i?c.b:3==i&&c.cV)&&e.preventDefault(),n);a=f.j;){if("function"==typeof a)l=a(l);else for(var s=a.length;s--;)l=a[s](l);f=f.p}f(l,u)}}return r.q=e,r}function he(n,e){return n.$==e.$&&xn(n.a,e.a)}function xe(n,e,r,t){var o={$:e,r:r,s:t,t:void 0,u:void 0};return n.push(o),o}function Ce(n,e,r,t){if(n!==e){var o=n.$,a=e.$;if(o!==a){if(1!==o||2!==a)return void xe(r,0,t,e);e=function(n){for(var e=n.e,r=e.length,t=Array(r),o=0;r>o;o++)t[o]=e[o].b;return{$:1,c:n.c,d:n.d,e:t,f:n.f,b:n.b}}(e),a=1}switch(a){case 5:for(var i=n.l,c=e.l,l=i.length,u=l===c.length;u&&l--;)u=i[l]===c[l];if(u)return void(e.k=n.k);e.k=e.m();var f=[];return Ce(n.k,e.k,f,0),void(f.length>0&&xe(r,1,t,f));case 4:for(var s=n.j,d=e.j,m=!1,v=n.k;4===v.$;)m=!0,"object"!=typeof s?s=[s,v.j]:s.push(v.j),v=v.k;for(var b=e.k;4===b.$;)m=!0,"object"!=typeof d?d=[d,b.j]:d.push(b.j),b=b.k;return m&&s.length!==d.length?void xe(r,0,t,e):((m?function(n,e){for(var r=0;n.length>r;r++)if(n[r]!==e[r])return!1;return!0}(s,d):s===d)||xe(r,2,t,d),void Ce(v,b,r,t+1));case 0:return void(n.a!==e.a&&xe(r,3,t,e.a));case 1:return void Pe(n,e,r,t,ye);case 2:return void Pe(n,e,r,t,Te);case 3:if(n.h!==e.h)return void xe(r,0,t,e);var p=Me(n.d,e.d);p&&xe(r,4,t,p);var g=e.i(n.g,e.g);return void(g&&xe(r,5,t,g))}}}function Pe(n,e,r,t,o){if(n.c===e.c&&n.f===e.f){var a=Me(n.d,e.d);a&&xe(r,4,t,a),o(n,e,r,t)}else xe(r,0,t,e)}function Me(n,e,r){var t;for(var o in n)if("a1"!==o&&"a0"!==o&&"a3"!==o&&"a4"!==o)if(o in e){var a=n[o],i=e[o];a===i&&"value"!==o&&"checked"!==o||"a0"===r&&he(a,i)||((t=t||{})[o]=i)}else(t=t||{})[o]=r?"a1"===r?"":"a0"===r||"a3"===r?void 0:{f:n[o].f,o:void 0}:"string"==typeof n[o]?"":null;else{var c=Me(n[o],e[o]||{},o);c&&((t=t||{})[o]=c)}for(var l in e)l in n||((t=t||{})[l]=e[l]);return t}function ye(n,e,r,t){var o=n.e,a=e.e,i=o.length,c=a.length;i>c?xe(r,6,t,{v:c,i:i-c}):c>i&&xe(r,7,t,{v:i,e:a});for(var l=c>i?i:c,u=0;l>u;u++){var f=o[u];Ce(f,a[u],r,++t),t+=f.b||0}}function Te(n,e,r,t){for(var o=[],a={},i=[],c=n.e,l=e.e,u=c.length,f=l.length,s=0,d=0,m=t;u>s&&f>d;){var v=(D=c[s]).a,b=(w=l[d]).a,p=D.b,g=w.b,h=void 0,x=void 0;if(v!==b){var C=c[s+1],P=l[d+1];if(C){var M=C.a,y=C.b;x=b===M}if(P){var T=P.a,L=P.b;h=v===T}if(h&&x)Ce(p,L,o,++m),De(a,o,v,g,d,i),m+=p.b||0,we(a,o,v,y,++m),m+=y.b||0,s+=2,d+=2;else if(h)m++,De(a,o,b,g,d,i),Ce(p,L,o,m),m+=p.b||0,s+=1,d+=2;else if(x)we(a,o,v,p,++m),m+=p.b||0,Ce(y,g,o,++m),m+=y.b||0,s+=2,d+=1;else{if(!C||M!==T)break;we(a,o,v,p,++m),De(a,o,b,g,d,i),m+=p.b||0,Ce(y,L,o,++m),m+=y.b||0,s+=2,d+=2}}else Ce(p,g,o,++m),m+=p.b||0,s++,d++}for(;u>s;){var D;m++,we(a,o,(D=c[s]).a,p=D.b,m),m+=p.b||0,s++}for(;f>d;){var w,S=S||[];De(a,o,(w=l[d]).a,w.b,void 0,S),d++}(o.length>0||i.length>0||S)&&xe(r,8,t,{w:o,x:i,y:S})}var Le="_elmW6BL";function De(n,e,r,t,o,a){var i=n[r];if(!i)return a.push({r:o,A:i={c:0,z:t,r:o,s:void 0}}),void(n[r]=i);if(1===i.c){a.push({r:o,A:i}),i.c=2;var c=[];return Ce(i.z,t,c,i.r),i.r=o,void(i.s.s={w:c,A:i})}De(n,e,r+Le,t,o,a)}function we(n,e,r,t,o){var a=n[r];if(a){if(0===a.c){a.c=2;var i=[];return Ce(t,a.z,i,o),void xe(e,9,o,{w:i,A:a})}we(n,e,r+Le,t,o)}else{var c=xe(e,9,o,void 0);n[r]={c:1,z:t,r:o,s:c}}}function Se(n,e,r,t){Ne(n,e,r,0,0,e.b,t)}function Ne(n,e,r,t,o,a,i){for(var c=r[t],l=c.r;l===o;){var u=c.$;if(1===u)Se(n,e.k,c.s,i);else if(8===u)c.t=n,c.u=i,(f=c.s.w).length>0&&Ne(n,e,f,0,o,a,i);else if(9===u){c.t=n,c.u=i;var f,s=c.s;s&&(s.A.s=n,(f=s.w).length>0&&Ne(n,e,f,0,o,a,i))}else c.t=n,c.u=i;if(!(c=r[++t])||(l=c.r)>a)return t}var d=e.$;if(4===d){for(var m=e.k;4===m.$;)m=m.k;return Ne(n,m,r,t,o+1,a,n.elm_event_node_ref)}for(var v=e.e,b=n.childNodes,p=0;v.length>p;p++){o++;var g=1===d?v[p]:v[p].b,h=o+(g.b||0);if(!(o>l||l>h||(c=r[t=Ne(b[p],g,r,t,o,h,i)])&&(l=c.r)<=a))return t;o=h}return t}function Ee(n,e){for(var r=0;e.length>r;r++){var t=e[r],o=t.t,a=$e(o,t);o===n&&(n=a)}return n}function $e(n,e){switch(e.$){case 0:return function(n,e,r){var t=n.parentNode,o=se(e,r);return o.elm_event_node_ref||(o.elm_event_node_ref=n.elm_event_node_ref),t&&o!==n&&t.replaceChild(o,n),o}(n,e.s,e.u);case 4:return de(n,e.u,e.s),n;case 3:return n.replaceData(0,n.length,e.s),n;case 1:return Ee(n,e.s);case 2:return n.elm_event_node_ref?n.elm_event_node_ref.j=e.s:n.elm_event_node_ref={j:e.s,p:e.u},n;case 6:for(var r=e.s,t=0;r.i>t;t++)n.removeChild(n.childNodes[r.v]);return n;case 7:for(var o=(r=e.s).e,a=n.childNodes[t=r.v];o.length>t;t++)n.insertBefore(se(o[t],e.u),a);return n;case 9:if(!(r=e.s))return n.parentNode.removeChild(n),n;var i=r.A;return void 0!==i.r&&n.parentNode.removeChild(n),i.s=Ee(n,r.w),n;case 8:return function(n,e){var r=e.s,t=function(n,e){if(n){for(var r=Qn.createDocumentFragment(),t=0;n.length>t;t++){var o=n[t].A;Zn(r,2===o.c?o.s:se(o.z,e.u))}return r}}(r.y,e);n=Ee(n,r.w);for(var o=r.x,a=0;o.length>a;a++){var i=o[a],c=i.A,l=2===c.c?c.s:se(c.z,e.u);n.insertBefore(l,n.childNodes[i.r])}return t&&Zn(n,t),n}(n,e);case 5:return e.s(n);default:C(10)}}function ze(n){if(3===n.nodeType)return ne(n.textContent);if(1!==n.nodeType)return ne("");for(var e=N,r=n.attributes,t=r.length;t--;){var o=r[t];e=E(u(le,o.name,o.value),e)}var a=n.tagName.toLowerCase(),i=N,c=n.childNodes;for(t=c.length;t--;)i=E(ze(c[t]),i);return f(re,a,e,i)}var _e=o((function(n,e,r,t){return function(n,e,r,t,o,a){var i=u(mn,n,e?e.flags:void 0);xt(i)||C(2);var c={},l=r(i.a),f=l.a,s=a(m,f),d=function(n,e){var r;for(var t in Vn){var o=Vn[t];o.a&&((r=r||{})[t]=o.a(t,e)),n[t]=Bn(o,e)}return r}(c,m);function m(n,e){var r=u(t,n,f);s(f=r.a,e),Yn(c,r.b,o(f))}return Yn(c,l.b,o(f)),d?{ports:d}:{}}(e,t,n.e1,n.fz,n.fs,(function(e,r){var o=n.fB,a=t.node,i=ze(a);return function(n,e){e(n);var r=0;function t(){r=1===r?0:(Re(t),e(n),1)}return function(o,a){n=o,a?(e(n),2===r&&(r=1)):(0===r&&Re(t),r=2)}}(r,(function(n){var r=o(n),t=function(n,e){var r=[];return Ce(n,e,r,0),r}(i,r);a=function(n,e,r,t){return 0===r.length?n:(Se(n,e,r,t),Ee(n,r))}(a,i,t,e),i=r}))}))})),Ae="undefined"!=typeof cancelAnimationFrame?cancelAnimationFrame:function(n){clearTimeout(n)},Re="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:function(n){return setTimeout(n,1e3/60)},Ve={addEventListener:function(){},removeEventListener:function(){}},Fe="undefined"!=typeof document?document:Ve,Be="undefined"!=typeof window?window:Ve,ke=t((function(n,e,r){return Nn(Ln((function(){function t(n){Sn(r(n))}return n.addEventListener(e,t,ee&&{passive:!0}),function(){n.removeEventListener(e,t)}})))})),je=r((function(n,e){var r=vn(n,e);return xt(r)?Br(r.a):kr})),We=r((function(n,e){var r="g";n.fa&&(r+="m"),n.eF&&(r+="i");try{return Br(RegExp(e,r))}catch(n){return kr}})),Ie=t((function(n,e,r){for(var t,o=[],a=0,i=r,c=e.lastIndex,l=-1;a++<n&&(t=e.exec(i))&&l!=e.lastIndex;){for(var u=t.length-1,f=Array(u);u>0;){var d=t[u];f[--u]=d?Br(d):kr}o.push(s(vi,t[0],t.index,a,z(f))),l=e.lastIndex}return e.lastIndex=c,z(o)})),He=0;function Ue(n,e){for(;e.b;e=e.b)n(e.a)}function Oe(n){for(var e=0;n.b;n=n.b)e++;return e}var Ye="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:function(n){setTimeout(n,1e3/60)},qe=a((function(n,e,r,t,o){return{$:0,a:n,b:e,c:r,d:t,e:o}})),Ge=r((function(n,e){var r=n.blend;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.BLEND),r.enabled=!0),r.a===e.a&&r.d===e.d||(n.gl.blendEquationSeparate(e.a,e.d),r.a=e.a,r.d=e.d),r.b===e.b&&r.c===e.c&&r.e===e.e&&r.f===e.f||(n.gl.blendFuncSeparate(e.b,e.c,e.e,e.f),r.b=e.b,r.c=e.c,r.e=e.e,r.f=e.f),r.g===e.g&&r.h===e.h&&r.i===e.i&&r.j===e.j||(n.gl.blendColor(e.g,e.h,e.i,e.j),r.g=e.g,r.h=e.h,r.i=e.i,r.j=e.j)})),Xe=r((function(n,e){var r=n.depthTest;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.DEPTH_TEST),r.enabled=!0),r.a!==e.a&&(n.gl.depthFunc(e.a),r.a=e.a),r.b!==e.b&&(n.gl.depthMask(e.b),r.b=e.b),r.c===e.c&&r.d===e.d||(n.gl.depthRange(e.c,e.d),r.c=e.c,r.d=e.d)})),Je=r((function(n,e){var r=n.stencilTest;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.STENCIL_TEST),r.enabled=!0),r.d===e.d&&r.a===e.a&&r.b===e.b||(n.gl.stencilFuncSeparate(n.gl.FRONT,e.d,e.a,e.b),r.d=e.d),r.e===e.e&&r.f===e.f&&r.g===e.g||(n.gl.stencilOpSeparate(n.gl.FRONT,e.e,e.f,e.g),r.e=e.e,r.f=e.f,r.g=e.g),r.c!==e.c&&(n.gl.stencilMask(e.c),r.c=e.c),r.h===e.h&&r.a===e.a&&r.b===e.b||(n.gl.stencilFuncSeparate(n.gl.BACK,e.h,e.a,e.b),r.h=e.h,r.a=e.a,r.b=e.b),r.i===e.i&&r.j===e.j&&r.k===e.k||(n.gl.stencilOpSeparate(n.gl.BACK,e.i,e.j,e.k),r.i=e.i,r.j=e.j,r.k=e.k)})),Ke=r((function(n,e){var r=n.scissor;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.SCISSOR_TEST),r.enabled=!0),r.a===e.a&&r.b===e.b&&r.c===e.c&&r.d===e.d||(n.gl.scissor(e.a,e.b,e.c,e.d),r.a=e.a,r.b=e.b,r.c=e.c,r.d=e.d)})),Qe=r((function(n,e){var r=n.colorMask;r.toggle=n.toggle,r.enabled=!0,r.a===e.a&&r.b===e.b&&r.c===e.c&&r.d===e.d||(n.gl.colorMask(e.a,e.b,e.c,e.d),r.a=e.a,r.b=e.b,r.c=e.c,r.d=e.d)})),Ze=r((function(n,e){var r=n.cullFace;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.CULL_FACE),r.enabled=!0),r.a!==e.a&&(n.gl.cullFace(e.a),r.a=e.a)})),nr=r((function(n,e){var r=n.polygonOffset;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.POLYGON_OFFSET_FILL),r.enabled=!0),r.a===e.a&&r.b===e.b||(n.gl.polygonOffset(e.a,e.b),r.a=e.a,r.b=e.b)})),er=r((function(n,e){var r=n.sampleCoverage;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.SAMPLE_COVERAGE),r.enabled=!0),r.a===e.a&&r.b===e.b||(n.gl.sampleCoverage(e.a,e.b),r.a=e.a,r.b=e.b)})),rr=function(n){n.scissor.enabled&&(n.gl.disable(n.gl.SCISSOR_TEST),n.scissor.enabled=!1)},tr=function(n){var e=n.colorMask;e.a&&e.b&&e.c&&e.d||(n.gl.colorMask(!0,!0,!0,!0),e.a=!0,e.b=!0,e.c=!0,e.d=!0)},or=["blend","depthTest","stencilTest","scissor","colorMask","cullFace","polygonOffset","sampleCoverage","sampleAlphaToCoverage"],ar=[function(n){n.blend.enabled&&(n.gl.disable(n.gl.BLEND),n.blend.enabled=!1)},function(n){n.depthTest.enabled&&(n.gl.disable(n.gl.DEPTH_TEST),n.depthTest.enabled=!1)},function(n){n.stencilTest.enabled&&(n.gl.disable(n.gl.STENCIL_TEST),n.stencilTest.enabled=!1)},rr,tr,function(n){n.gl.disable(n.gl.CULL_FACE)},function(n){n.gl.disable(n.gl.POLYGON_OFFSET_FILL)},function(n){n.gl.disable(n.gl.SAMPLE_COVERAGE)},function(n){n.gl.disable(n.gl.SAMPLE_ALPHA_TO_COVERAGE)}];function ir(n,e,r){var t=n.createShader(r);return n.shaderSource(t,"#extension GL_OES_standard_derivatives : enable\n"+e),n.compileShader(t),t}function cr(n,e){switch(e){case n.FLOAT:return{size:1,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC2:return{size:2,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC3:return{size:3,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC4:return{size:4,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_MAT4:return{size:4,arraySize:4,type:Float32Array,baseType:n.FLOAT};case n.INT:return{size:1,arraySize:1,type:Int32Array,baseType:n.INT}}}function lr(n,e,r,t){for(var o=r.a.dr,a=[],i=0;o>i;i++)a.push(String.fromCharCode(97+i));var c=cr(n,e.type);if(void 0===c)throw Error("No info available for: "+e.type);var l=0,u=c.size*c.arraySize*o,f=new c.type(Oe(r.b)*u);Ue((function(n){!function(n,e,r,t,i){var c;if(1===o)for(c=0;e>c;c++)n[r++]=1===e?t[i]:t[i][c];else a.forEach((function(o){for(c=0;e>c;c++)n[r++]=1===e?t[o][i]:t[o][i][c]}))}(f,c.size*c.arraySize,l,n,t[e.name]||e.name),l+=u}),r.b);var s=n.createBuffer();return n.bindBuffer(n.ARRAY_BUFFER,s),n.bufferData(n.ARRAY_BUFFER,f,n.STATIC_DRAW),s}function ur(n,e){return n+"#"+e}var fr=r((function(n,e){var r=n.f,t=r.gl;return t?(t.viewport(0,0,t.drawingBufferWidth,t.drawingBufferHeight),r.depthTest.b||(t.depthMask(!0),r.depthTest.b=!0),r.stencilTest.c!==r.STENCIL_WRITEMASK&&(t.stencilMask(r.STENCIL_WRITEMASK),r.stencilTest.c=r.STENCIL_WRITEMASK),rr(r),tr(r),t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT|t.STENCIL_BUFFER_BIT),Ue((function(e){if(e.d.b.b){var o,a,i,c,l;if(e.b.id&&e.c.id&&(o=ur(e.b.id,e.c.id),a=r.programs[o]),!a){var u,f;e.b.id?u=r.shaders[e.b.id]:e.b.id=He++,u||(u=ir(t,e.b.src,t.VERTEX_SHADER),r.shaders[e.b.id]=u),e.c.id?f=r.shaders[e.c.id]:e.c.id=He++,f||(f=ir(t,e.c.src,t.FRAGMENT_SHADER),r.shaders[e.c.id]=f);var s=function(n,e,r){var t=n.createProgram();if(n.attachShader(t,e),n.attachShader(t,r),n.linkProgram(t),!n.getProgramParameter(t,n.LINK_STATUS))throw"Link failed: "+n.getProgramInfoLog(t)+"\nvs info-log: "+n.getShaderInfoLog(e)+"\nfs info-log: "+n.getShaderInfoLog(r);return t}(t,u,f);(a={glProgram:s,attributes:Object.assign({},e.b.attributes,e.c.attributes),currentUniforms:{},activeAttributes:[],activeAttributeLocations:[]}).uniformSetters=function(n,e,r,t){var o=r.glProgram,a=r.currentUniforms,i=0,c=e.f;function l(e,r){var t=r.name,o=n.getUniformLocation(e,t);switch(r.type){case n.INT:return function(e){a[t]!==e&&(n.uniform1i(o,e),a[t]=e)};case n.FLOAT:return function(e){a[t]!==e&&(n.uniform1f(o,e),a[t]=e)};case n.FLOAT_VEC2:return function(e){a[t]!==e&&(n.uniform2f(o,e[0],e[1]),a[t]=e)};case n.FLOAT_VEC3:return function(e){a[t]!==e&&(n.uniform3f(o,e[0],e[1],e[2]),a[t]=e)};case n.FLOAT_VEC4:return function(e){a[t]!==e&&(n.uniform4f(o,e[0],e[1],e[2],e[3]),a[t]=e)};case n.FLOAT_MAT4:return function(e){a[t]!==e&&(n.uniformMatrix4fv(o,!1,new Float32Array(e)),a[t]=e)};case n.SAMPLER_2D:var l=i++;return function(e){n.activeTexture(n.TEXTURE0+l);var r=c.textures.get(e);r||(r=e.eJ(n),c.textures.set(e,r)),n.bindTexture(n.TEXTURE_2D,r),a[t]!==e&&(n.uniform1i(o,l),a[t]=e)};case n.BOOL:return function(e){a[t]!==e&&(n.uniform1i(o,e),a[t]=e)};default:return function(){}}}for(var u={},f=n.getProgramParameter(o,n.ACTIVE_UNIFORMS),s=0;f>s;s++){var d=n.getActiveUniform(o,s);u[t[d.name]||d.name]=l(o,d)}return u}(t,n,a,Object.assign({},e.b.uniforms,e.c.uniforms));var d=t.getProgramParameter(s,t.ACTIVE_ATTRIBUTES);for(i=0;d>i;i++){var m=t.getActiveAttrib(s,i),v=t.getAttribLocation(s,m.name);a.activeAttributes.push(m),a.activeAttributeLocations.push(v)}o=ur(e.b.id,e.c.id),r.programs[o]=a}r.lastProgId!==o&&(t.useProgram(a.glProgram),r.lastProgId=o),c=a.uniformSetters,Object.keys(l=e.e).forEach((function(n){var e=c[n];e&&e(l[n])}));var b=r.buffers.get(e.d);for(b||(b=function(n,e){if(e.a.dA>0){var r=n.createBuffer(),t=function(n,e){var r,t=new Uint32Array(Oe(n)*e),o=0;return Ue((function(n){if(1===e)t[o++]=n;else for(r=0;e>r;r++)t[o++]=n[String.fromCharCode(97+r)]}),n),t}(e.c,e.a.dA);return n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,r),n.bufferData(n.ELEMENT_ARRAY_BUFFER,t,n.STATIC_DRAW),{numIndices:t.length,indexBuffer:r,buffers:{}}}return{numIndices:e.a.dr*Oe(e.b),indexBuffer:null,buffers:{}}}(t,e.d),r.buffers.set(e.d,b)),i=0;a.activeAttributes.length>i;i++){v=a.activeAttributeLocations[i],void 0===b.buffers[(m=a.activeAttributes[i]).name]&&(b.buffers[m.name]=lr(t,m,e.d,a.attributes)),t.bindBuffer(t.ARRAY_BUFFER,b.buffers[m.name]);var p=cr(t,m.type);if(1===p.arraySize)t.enableVertexAttribArray(v),t.vertexAttribPointer(v,p.size,p.baseType,!1,0,0);else for(var g=4*p.size,h=g*p.arraySize,x=0;p.arraySize>x;x++)t.enableVertexAttribArray(v+x),t.vertexAttribPointer(v+x,p.size,p.baseType,!1,h,g*x)}for(r.toggle=!r.toggle,Ue(Jf(r),e.a),i=0;9>i;i++){var C=r[or[i]];C.toggle!==r.toggle&&C.enabled&&(ar[i](r),C.enabled=!1,C.toggle=r.toggle)}b.indexBuffer?(t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,b.indexBuffer),t.drawElements(e.d.a.d5,b.numIndices,t.UNSIGNED_INT,0)):t.drawArrays(e.d.a.d5,0,b.numIndices)}}),n.g),e):e})),sr=t((function(n,e,r){return function(n,e,r,t){return{$:3,d:ue(n),g:e,h:r,i:t}}(e,{g:r,f:{},h:n},hr,xr)})),dr=r((function(n,e){n.contextAttributes.alpha=!0,n.contextAttributes.premultipliedAlpha=e.a})),mr=r((function(n,e){n.contextAttributes.depth=!0,n.sceneSettings.push((function(n){n.clearDepth(e.a)}))})),vr=r((function(n,e){n.contextAttributes.stencil=!0,n.sceneSettings.push((function(n){n.clearStencil(e.a)}))})),br=r((function(n){n.contextAttributes.antialias=!0})),pr=r((function(n,e){n.sceneSettings.push((function(n){n.clearColor(e.a,e.b,e.c,e.d)}))})),gr=r((function(n){n.contextAttributes.preserveDrawingBuffer=!0}));function hr(n){var e={contextAttributes:{alpha:!1,depth:!1,stencil:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1},sceneSettings:[]};Ue((function(n){return u(Xf,e,n)}),n.h);var r=Qn.createElement("canvas"),t=r.getContext&&(r.getContext("webgl",e.contextAttributes)||r.getContext("experimental-webgl",e.contextAttributes));return t&&"undefined"!=typeof WeakMap?(e.sceneSettings.forEach((function(n){n(t)})),t.getExtension("OES_standard_derivatives"),t.getExtension("OES_element_index_uint"),n.f.gl=t,n.f.toggle=!1,n.f.blend={enabled:!1,toggle:!1},n.f.depthTest={enabled:!1,toggle:!1},n.f.stencilTest={enabled:!1,toggle:!1},n.f.scissor={enabled:!1,toggle:!1},n.f.colorMask={enabled:!1,toggle:!1},n.f.cullFace={enabled:!1,toggle:!1},n.f.polygonOffset={enabled:!1,toggle:!1},n.f.sampleCoverage={enabled:!1,toggle:!1},n.f.sampleAlphaToCoverage={enabled:!1,toggle:!1},n.f.shaders=[],n.f.programs={},n.f.lastProgId=null,n.f.buffers=new WeakMap,n.f.textures=new WeakMap,n.f.STENCIL_WRITEMASK=t.getParameter(t.STENCIL_WRITEMASK),Ye((function(){return u(fr,n,r)}))):(r=Qn.createElement("div")).innerHTML='<a href="https://get.webgl.org/">Enable WebGL</a> to see this content!',r}function xr(n,e){return e.f=n.f,fr(e)}var Cr=r((function(n,e){return new Float64Array([n,e])}));new Float64Array(3),new Float64Array(3),new Float64Array(3);var Pr=t((function(n,e,r){return new Float64Array([n,e,r])})),Mr=r((function(n,e){return new Float64Array([e[0]*n,e[1]*n,e[2]*n])})),yr=o((function(n,e,r,t){return new Float64Array([n,e,r,t])}));new Float64Array(16),new Float64Array(16),new Float64Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);var Tr=$,Lr=x,Dr=t((function(n,e,t){var o=t.c,a=t.d,i=r((function(e,r){return f(Lr,e.$?n:i,r,e.a)}));return f(Lr,i,f(Lr,n,e,a),o)})),wr=t((function(n,e,r){for(;;){if(-2===r.$)return e;var t=r.d,o=n,a=f(n,r.b,r.c,f(wr,n,e,r.e));n=o,e=a,r=t}})),Sr=function(n){return f(wr,t((function(n,e,r){return u(Tr,L(n,e),r)})),N,n)},Nr=1,Er=2,$r=0,zr=function(n){return{$:1,a:n}},_r=r((function(n,e){return{$:3,a:n,b:e}})),Ar=r((function(n,e){return{$:0,a:n,b:e}})),Rr=r((function(n,e){return{$:1,a:n,b:e}})),Vr=function(n){return{$:0,a:n}},Fr=function(n){return{$:2,a:n}},Br=function(n){return{$:0,a:n}},kr={$:1},jr=Pn,Wr=Z,Ir=r((function(n,e){return u(J,n,_(e))})),Hr=r((function(n,e){return z(u(X,n,e))})),Ur=t((function(n,e,r){for(;;){if(!r.b)return e;var t=r.b,o=n,a=u(n,r.a,e);n=o,e=a,r=t}})),Or=function(n){return f(Ur,r((function(n,e){return e+1})),0,n)},Yr=A,qr=t((function(n,e,r){for(;;){if(y(n,e)>=1)return r;var t=n,o=e-1,a=u(Tr,e,r);n=t,e=o,r=a}})),Gr=r((function(n,e){return f(qr,n,e,N)})),Xr=r((function(n,e){return f(Yr,n,u(Gr,0,Or(e)-1),e)})),Jr=function(n){var e=n.charCodeAt(0);return 55296>e||e>56319?e:1024*(e-55296)+n.charCodeAt(1)-56320+65536},Kr=function(n){return f(Ur,Tr,N,n)},Qr=function(n){var e=n.charCodeAt(0);return isNaN(e)?kr:Br(55296>e||e>56319?L(n[0],n.slice(1)):L(n[0]+n[1],n.slice(2)))},Zr=32,nt=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),et=[],rt=W,tt=r((function(n,e){return O(e)/O(n)})),ot=function(n){return n},at=rt(u(tt,2,Zr)),it=s(nt,0,at,et,et),ct=p,lt=function(n){return{$:1,a:n}},ut=I,ft=function(n){return n.length},st=r((function(n,e){return y(n,e)>0?n:e})),dt=R,mt=g,vt=r((function(n,e){for(;;){var r=u(mt,Zr,n),t=r.b,o=u(Tr,{$:0,a:r.a},e);if(!t.b)return Kr(o);n=t,e=o}})),bt=r((function(n,e){for(;;){var r=rt(e/Zr);if(1===r)return u(mt,Zr,n).a;n=u(vt,n,N),e=r}})),pt=r((function(n,e){if(e.l){var r=e.l*Zr,t=ut(u(tt,Zr,r-1)),o=n?Kr(e.z):e.z,a=u(bt,o,e.l);return s(nt,ft(e.p)+r,u(st,5,t*at),a,e.p)}return s(nt,ft(e.p),at,et,e.p)})),gt=a((function(n,e,r,t,o){for(;;){if(0>e)return u(pt,!1,{z:t,l:r/Zr|0,p:o});var a=lt(f(ct,Zr,e,n));n=n,e-=Zr,r=r,t=u(Tr,a,t),o=o}})),ht=r((function(n,e){if(n>0){var r=n%Zr;return d(gt,e,n-r-Zr,n,N,f(ct,r,n-r,e))}return it})),xt=function(n){return!n.$},Ct=ln,Pt=an,Mt=tn,yt=un,Tt=fn,Lt=function(n){return{$:0,a:n}},Dt=function(n){switch(n.$){case 0:return 0;case 1:return 1;case 2:return 2;default:return 3}},wt=re("div"),St=function(n){return{$:2,a:n}},Nt=function(n){return{$:6,a:n}},Et=function(n){return{$:4,a:n}},$t=t((function(n,e,r){return e(n(r))})),zt=function(n){return n},_t=function(n){return n.length},At=K,Rt=r((function(n,e){return 1>n?e:f(At,n,_t(e),e)})),Vt=Q,Ft=Tn,Bt=Ft(0),kt=o((function(n,e,r,t){if(t.b){var o=t.a,a=t.b;if(a.b){var i=a.a,c=a.b;if(c.b){var l=c.a,d=c.b;if(d.b){var m=d.b;return u(n,o,u(n,i,u(n,l,u(n,d.a,r>500?f(Ur,n,e,Kr(m)):s(kt,n,e,r+1,m)))))}return u(n,o,u(n,i,u(n,l,e)))}return u(n,o,u(n,i,e))}return u(n,o,e)}return e})),jt=t((function(n,e,r){return s(kt,n,e,0,r)})),Wt=r((function(n,e){return f(jt,r((function(e,r){return u(Tr,n(e),r)})),N,e)})),It=Dn,Ht=r((function(n,e){return u(It,(function(e){return Ft(n(e))}),e)})),Ut=t((function(n,e,r){return u(It,(function(e){return u(It,(function(r){return Ft(u(n,e,r))}),r)}),e)})),Ot=function(n){return f(jt,Ut(Tr),Ft(N),n)},Yt=kn,qt=r((function(n,e){var r=e;return Nn(u(It,Yt(n),r))}));Vn.Task=Fn(Bt,t((function(n,e){return u(Ht,(function(){return 0}),Ot(u(Wt,qt(n),e)))})),t((function(){return Ft(0)})),r((function(n,e){return u(Ht,n,e)})));var Gt=Wn("Task"),Xt=r((function(n,e){return Gt(u(Ht,n,e))})),Jt=_e,Kt=r((function(n,e){return{$:0,a:n,b:e}})),Qt=function(n){return{$:7,a:n}},Zt=r((function(n,e){return{$:5,a:n,b:e}})),no=r((function(n,e){return{$:3,a:n,b:e}})),eo=In,ro=Hn,to=function(n){return{$:1,a:n}},oo=t((function(n,e,r){return{cI:r,ei:e,en:n}})),ao=Ft(f(oo,N,kr,0)),io=function(n){return Ln((function(e){var r=n.f;2===r.$&&r.c&&r.c(),n.f=null,e(Tn(0))}))},co=Ln((function(n){n(Tn(Date.now()))})),lo=Ln((function(n){var e=Re((function(){n(Tn(Date.now()))}));return function(){Ae(e)}})),uo=jn,fo=Nn,so=t((function(n,e,r){var t=r.ei,o=r.cI,a=L(t,e);return 1===a.a.$?a.b.b?u(It,(function(n){return u(It,(function(r){return Ft(f(oo,e,Br(n),r))}),co)}),fo(u(It,uo(n),lo))):ao:a.b.b?Ft(f(oo,e,t,o)):u(It,(function(){return ao}),io(a.a.a))})),mo=zt,vo=t((function(n,e,r){var t=r.en,o=r.cI,a=function(r){return u(Yt,n,(0,r.a)(r.$?e-o:mo(e)))};return u(It,(function(n){return u(It,(function(){return Ft(f(oo,t,Br(n),e))}),Ot(u(Wt,a,t)))}),fo(u(It,uo(n),lo)))})),bo=t((function(n,e,r){return n(e(r))}));Vn["Browser.AnimationManager"]=Fn(ao,so,vo,0,r((function(n,e){return e.$?to(u(bo,n,e.a)):{$:0,a:u(bo,n,e.a)}})));var po=Wn("Browser.AnimationManager"),go=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),ho=r((function(n,e){return{ea:e,en:n}})),xo={$:-2},Co=xo,Po=Ft(u(ho,N,Co)),Mo=function(n){return L(S(n.a?"w_":"d_",n.b),n)},yo=a((function(n,e,r,t,o){return{$:-1,a:n,b:e,c:r,d:t,e:o}})),To=a((function(n,e,r,t,o){if(-1!==o.$||o.a){if(-1!==t.$||t.a||-1!==t.d.$||t.d.a)return d(yo,n,e,r,t,o);var a=t.d;return i=t.e,d(yo,0,t.b,t.c,d(yo,1,a.b,a.c,a.d,a.e),d(yo,1,e,r,i,o))}var i,c=o.b,l=o.c,u=o.d,f=o.e;return-1!==t.$||t.a?d(yo,n,c,l,d(yo,0,e,r,t,u),f):d(yo,0,e,r,d(yo,1,t.b,t.c,t.d,i=t.e),d(yo,1,c,l,u,f))})),Lo=T,Do=t((function(n,e,r){if(-2===r.$)return d(yo,0,n,e,xo,xo);var t=r.a,o=r.b,a=r.c,i=r.d,c=r.e;switch(u(Lo,n,o)){case 0:return d(To,t,o,a,f(Do,n,e,i),c);case 1:return d(yo,t,o,e,i,c);default:return d(To,t,o,a,i,f(Do,n,e,c))}})),wo=t((function(n,e,r){var t=f(Do,n,e,r);return-1!==t.$||t.a?t:d(yo,1,t.b,t.c,t.d,t.e)})),So=function(n){return f(Ur,r((function(n,e){return f(wo,n.a,n.b,e)})),Co,n)},No=t((function(n,e,r){for(;;){if(-2===r.$)return e;var t=r.e,o=n,a=f(n,r.b,r.c,f(No,n,e,r.d));n=o,e=a,r=t}})),Eo=i((function(n,e,o,a,i,c){var l=f(No,t((function(r,t,a){n:for(;;){var i=a.a,c=a.b;if(i.b){var l=i.a,u=l.a,d=l.b,m=i.b;if(0>y(u,r)){r=r,t=t,a=L(m,f(n,u,d,c));continue n}return y(u,r)>0?L(i,f(o,r,t,c)):L(m,s(e,u,d,t,c))}return L(i,f(o,r,t,c))}})),L(Sr(a),c),i),u=l.a,d=l.b;return f(Ur,r((function(e,r){return f(n,e.a,e.b,r)})),d,u)})),$o=r((function(n,e){return{dv:e,dC:n}})),zo=t((function(n,e,r){return u(Ht,(function(n){return L(e,n)}),f(ke,r.a?Be:Fe,r.b,(function(r){return u(uo,n,u($o,e,r))})))})),_o=r((function(n,e){return f(No,wo,e,n)})),Ao=t((function(n,e,r){var a=t((function(e,r,t){var o=t.c;return D(t.a,t.b,u(Tr,f(zo,n,e,r),o))})),i=t((function(n,e,r){var t=r.b,o=r.c;return D(u(Tr,e,r.a),t,o)})),c=o((function(n,e,r,t){var o=t.c;return D(t.a,f(wo,n,e,t.b),o)})),l=u(Wt,Mo,e),s=m(Eo,i,c,a,r.ea,So(l),D(N,Co,N)),d=s.b,v=s.c;return u(It,(function(n){return Ft(u(ho,l,u(_o,d,So(n))))}),u(It,(function(){return Ot(v)}),Ot(u(Wt,io,s.a))))})),Ro=t((function(n,e,r){var t=n(e);return t.$?r:u(Tr,t.a,r)})),Vo=r((function(n,e){return f(jt,Ro(n),N,e)}));Vn["Browser.Events"]=Fn(Po,Ao,t((function(n,e,r){var t=e.dC,o=e.dv,a=u(Vo,(function(n){var e=n.b.c;return P(n.a,t)?u(je,e,o):kr}),r.en);return u(It,(function(){return Ft(r)}),Ot(u(Wt,Yt(n),a)))})),0,r((function(n,e){return f(go,e.a,e.b,u(yt,n,e.c))})));var Fo,Bo,ko,jo,Wo,Io,Ho,Uo,Oo,Yo,qo,Go,Xo,Jo,Ko,Qo,Zo,na,ea,ra,ta,oa,aa,ia,ca,la,ua,fa,sa,da,ma,va,ba,pa,ga,ha,xa,Ca=Wn("Browser.Events"),Pa=t((function(n,e,r){return Ca(f(go,n,e,r))})),Ma=u(Pa,0,"click"),ya=u(Pa,0,"keydown"),Ta=u(Pa,0,"keyup"),La=u(Pa,0,"mousedown"),Da=u(Pa,0,"mousemove"),wa=u(Pa,0,"mouseup"),Sa=en,Na=rn,Ea=r((function(n,e){return n(e?1:0)})),$a=function(n){var e=void 0!==Qn.hidden?{e_:"hidden",eI:"visibilitychange"}:void 0!==Qn.mozHidden?{e_:"mozHidden",eI:"mozvisibilitychange"}:void 0!==Qn.msHidden?{e_:"msHidden",eI:"msvisibilitychange"}:void 0!==Qn.webkitHidden?{e_:"webkitHidden",eI:"webkitvisibilitychange"}:{e_:"hidden",eI:"visibilitychange"};return f(Pa,0,e.eI,u(yt,Ea(n),u(Pt,"target",u(Pt,e.e_,Na))))},za=on,_a=function(n){return{$:3,b:n}},Aa=Xn("touchCancel",_a(u(Ct,(function(n){return u(Ct,(function(e){return u(Ct,(function(r){return Lt({bj:r,cK:e,cL:n})}),u(Pt,"identifier",Sa))}),u(Pt,"pageX",Mt))}),u(Pt,"pageY",Mt)))),Ra=Xn("touchEnd",_a(u(Ct,(function(n){return u(Ct,(function(e){return u(Ct,(function(r){return Lt({bj:r,cK:e,cL:n})}),u(Pt,"identifier",Sa))}),u(Pt,"pageX",Mt))}),u(Pt,"pageY",Mt)))),Va=Xn("touchMove",_a(u(Ct,(function(n){return u(Ct,(function(e){return u(Ct,(function(r){return Lt({bj:r,cK:e,cL:n})}),u(Pt,"identifier",Sa))}),u(Pt,"pageX",Mt))}),u(Pt,"pageY",Mt)))),Fa=Xn("touchStart",_a(u(Ct,(function(n){return u(Ct,(function(e){return u(Ct,(function(r){return Lt({bj:r,cK:e,cL:n})}),u(Pt,"identifier",Sa))}),u(Pt,"pageX",Mt))}),u(Pt,"pageY",Mt)))),Ba=eo(u(Wt,ro(Nt),z([(Fo=no,f(Pa,1,"resize",u(Pt,"target",f(Tt,Fo,u(Pt,"innerWidth",Sa),u(Pt,"innerHeight",Sa))))),Ta(u(yt,Kt(!1),u(Pt,"key",za))),ya(u(yt,Kt(!0),u(Pt,"key",za))),(xa=u($t,dt(.001),(function(n){return{$:1,a:n}})),po(to(xa))),$a(Et),Ma(Lt({$:6})),La(Lt(Qt(!0))),wa(Lt(Qt(!1))),Da(f(Tt,Zt,u(Pt,"pageX",Mt),u(Pt,"pageY",Mt))),Fa((function(n){return{$:8,a:n}})),Va((function(n){return{$:9,a:n}})),Ra((function(n){return{$:10,a:n}})),Aa((function(n){return{$:11,a:n}}))]))),ka=o((function(n,e,r,t){return{ch:t,aP:r,bD:n,bE:e}})),ja=Co,Wa={cb:!1,aP:!1,cn:!1,M:ja,ag:!1,a_:!1,c2:!1,c3:!1,b8:!1},Ia=r((function(n,e){return w(e,{ch:n})})),Ha=r((function(n,e){return w(e,{aP:n})})),Ua=t((function(n,e,r){return w(r,{bD:n,bE:e})})),Oa=function(n){if(-1===n.$&&-1===n.d.$&&-1===n.e.$){if(-1!==n.e.d.$||n.e.d.a){var e=n.d,r=n.e;return i=r.b,c=r.c,t=r.d,f=r.e,d(yo,1,n.b,n.c,d(yo,0,e.b,e.c,e.d,e.e),d(yo,0,i,c,t,f))}var t,o=n.d,a=n.e,i=a.b,c=a.c,l=(t=a.d).d,u=t.e,f=a.e;return d(yo,0,t.b,t.c,d(yo,1,n.b,n.c,d(yo,0,o.b,o.c,o.d,o.e),l),d(yo,1,i,c,u,f))}return n},Ya=function(n){if(-1===n.$&&-1===n.d.$&&-1===n.e.$){if(-1!==n.d.d.$||n.d.d.a){var e=n.d,r=n.e;return u=r.b,f=r.c,s=r.d,m=r.e,d(yo,1,t=n.b,o=n.c,d(yo,0,e.b,e.c,e.d,c=e.e),d(yo,0,u,f,s,m))}var t=n.b,o=n.c,a=n.d,i=a.d,c=a.e,l=n.e,u=l.b,f=l.c,s=l.d,m=l.e;return d(yo,0,a.b,a.c,d(yo,1,i.b,i.c,i.d,i.e),d(yo,1,t,o,c,d(yo,0,u,f,s,m)))}return n},qa=c((function(n,e,r,t,o,a,i){if(-1!==a.$||a.a){n:for(;;){if(-1===i.$&&1===i.a){if(-1===i.d.$){if(1===i.d.a)return Ya(e);break n}return Ya(e)}break n}return e}return d(yo,r,a.b,a.c,a.d,d(yo,0,t,o,a.e,i))})),Ga=function(n){if(-1===n.$&&-1===n.d.$){var e=n.a,r=n.b,t=n.c,o=n.d,a=o.d,i=n.e;if(1===o.a){if(-1!==a.$||a.a){var c=Oa(n);if(-1===c.$){var l=c.e;return d(To,c.a,c.b,c.c,Ga(c.d),l)}return xo}return d(yo,e,r,t,Ga(o),i)}return d(yo,e,r,t,Ga(o),i)}return xo},Xa=r((function(n,e){if(-2===e.$)return xo;var r=e.a,t=e.b,o=e.c,a=e.d,i=e.e;if(0>y(n,t)){if(-1===a.$&&1===a.a){var c=a.d;if(-1!==c.$||c.a){var l=Oa(e);if(-1===l.$){var f=l.e;return d(To,l.a,l.b,l.c,u(Xa,n,l.d),f)}return xo}return d(yo,r,t,o,u(Xa,n,a),i)}return d(yo,r,t,o,u(Xa,n,a),i)}return u(Ja,n,v(qa,n,e,r,t,o,a,i))})),Ja=r((function(n,e){if(-1===e.$){var r=e.a,t=e.b,o=e.c,a=e.d,i=e.e;if(P(n,t)){var c=function(n){for(;;){if(-1!==n.$||-1!==n.d.$)return n;n=n.d}}(i);return-1===c.$?d(To,r,c.b,c.c,a,Ga(i)):xo}return d(To,r,t,o,a,u(Xa,n,i))}return xo})),Ka=r((function(n,e){var r=u(Xa,n,e);return-1!==r.$||r.a?r:d(yo,1,r.b,r.c,r.d,r.e)})),Qa=r((function(n,e){return{dk:-e/2,cp:e,ag:-n/2,a_:n/2,by:e/2,dc:n}})),Za=r((function(n,e){return f(wo,n,0,e)})),ni=r((function(n,e){return u(Ka,n,e)})),ei=t((function(n,e,r){var t=u(n?Za:ni,e,r.M);switch(e){case" ":return w(r,{M:t,c3:n});case"Enter":return w(r,{cn:n,M:t});case"Shift":return w(r,{M:t,c2:n});case"Backspace":return w(r,{cb:n,M:t});case"ArrowUp":return w(r,{M:t,b8:n});case"ArrowDown":return w(r,{aP:n,M:t});case"ArrowLeft":return w(r,{M:t,ag:n});case"ArrowRight":return w(r,{M:t,a_:n});default:return w(r,{M:t})}})),ri=r((function(n,e){switch(n.$){case 1:var r=n.a;return w(e,e.G.ch?{G:u(Ia,!1,e.G),a1:e.a1+r}:{a1:e.a1+r});case 2:var t=n.a.fC;return w(e,{aa:u(Qa,t.dc,t.cp)});case 3:return w(e,{aa:u(Qa,n.a,n.b)});case 0:return w(e,{bk:f(ei,n.a,n.b,e.bk)});case 5:return w(e,{G:f(Ua,e.aa.ag+n.a,e.aa.by-n.b,e.G)});case 6:return w(e,{G:u(Ia,!0,e.G)});case 7:return w(e,{G:u(Ha,n.a,e.G)});case 8:case 9:return w(e,{ab:f(Ur,(function(n){return u(wo,n.bj,{bD:e.aa.ag+n.cK,bE:e.aa.by-n.cL})}),e.ab,n.a)});case 10:case 11:return w(e,{ab:f(Ur,(function(n){return Ka(n.bj)}),e.ab,n.a)});default:return w(e,{bk:Wa,G:s(ka,e.G.bD,e.G.bE,!1,!1)})}})),ti=r((function(n,e){return{P:e,U:n}})),oi=f(Tt,r((function(n,e){return L(n,e)})),u(Pt,"A1",za),u(Pt,"A2",za)),ai=sn,ii=s(ai,t((function(n,e,r){return D(n,e,r)})),u(Pt,"A1",Mt),u(Pt,"A2",Mt),u(Pt,"A3",Mt)),ci=f(Tt,r((function(n,e){return L(n,e)})),u(Pt,"A1",za),u(Pt,"A2",ii)),li=f(Tt,ti,u(Pt,"floats",_a(ci)),u(Pt,"colors",_a(oi))),ui=dn,fi=r((function(n,e){return{P:e,aD:"",U:n,aq:""}})),si=u(fi,N,N),di=r((function(n,e){return e.$?kr:n(e.a)})),mi=r((function(n,e){return e.$?zr(e.a):n(e.a)})),vi=o((function(n,e,r,t){return{e0:e,e8:n,fe:r,fr:t}})),bi=Ie,pi=r((function(n,e){return e.$?zr(n):Vr(e.a)})),gi=We,hi=function(n){return n.b?Br(n.a):kr},xi=r((function(n,e){return e.$?kr:Br(n(e.a))})),Ci=r((function(n,e){return e.$?zr(e.a):Vr(n(e.a))})),Pi=r((function(n,e){return Jr(e)-Jr(n)})),Mi=t((function(n,e,r){var t=Jr(r);return 1>y(Jr(n),t)&&1>y(t,Jr(e))})),yi=r((function(n,e){var r=f(Mi,"0","9",e)?Vr(u(Pi,"0",e)):f(Mi,"a","z",e)?Vr(10+u(Pi,"a",e)):f(Mi,"A","Z",e)?Vr(10+u(Pi,"A",e)):zr({$:0,a:e});return u(mi,(function(r){return 0>y(r,n)?Vr(r):zr({$:1,a:e})}),r)})),Ti=r((function(n,e){var r=Qr(e);if(1===r.$)return Vr(0);var t=r.a,o=t.b;return u(mi,(function(e){return u(mi,(function(r){return Vr(e+r*n)}),u(Ti,n,o))}),u(yi,n,t.a))})),Li=function(n){for(var e=n.length,r=Array(e),t=0;e>t;){var o=n.charCodeAt(t);55296>o||o>56319?(r[e-t]=n[t],t++):(r[e-t]=n[t+1],r[e-++t]=n[t-1],t++)}return r.join("")},Di=r((function(n,e){return 2>n||n>36?zr({$:2,a:n}):u(Ti,n,Li(e))})),wi=Di(16),Si=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),Ni=t((function(n,e,r){return s(Si,n,e,r,1)})),Ei=o((function(n,e,r,t){return s(Si,n,e,r,t)})),$i=V,zi=H,_i=r((function(n,e){var r=u($i,10,n);return zi(e*r)/r})),Ai=G,Ri=function(n){return f(Ai,Tr,N,n)},Vi=(Bo=function(n){var e=Ri(n);if(e.b&&!e.b.b){var r=e.a;return _(z([r,r])).join("")}return n},u($t,(function(n){return n.toLowerCase()}),u($t,(function(n){return u(xi,(function(e){return f(bi,1,e,n)}),u(gi,{eF:!1,fa:!1},"^#?(?:(?:([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2}))|(?:([a-f\\d])([a-f\\d])([a-f\\d]))|(?:([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2}))|(?:([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d])))$"))}),u($t,di(hi),u($t,xi((function(n){return n.fr})),u($t,xi(Vo(zt)),u($t,pi("Parsing hex regex failed"),mi((function(n){var e=u(Wt,u($t,Bo,u($t,wi,Ci(ot))),n);n:for(;;){if(e.b&&!e.a.$&&e.b.b&&!e.b.a.$&&e.b.b.b&&!e.b.b.a.$){if(e.b.b.b.b){if(e.b.b.b.a.$||e.b.b.b.b.b)break n;var r=e.b,t=r.b;return Vr(s(Ei,e.a.a/255,r.a.a/255,t.a.a/255,u(_i,2,t.b.a.a/255)))}var o=e.b;return Vr(f(Ni,e.a.a/255,o.a.a/255,o.b.a.a/255))}break n}return zr("Parsing ints from hex failed")}))))))))),Fi=r((function(n,e){return L(e.a,n(e.b))})),Bi=s(Si,1,1,1,1),ki=r((function(n,e){return e.$?n:e.a})),ji=u($t,ui(li),u($t,Ci((function(n){return{P:u(Wt,Fi(u($t,Vi,ki(Bi))),n.P),aD:"",U:n.U,aq:""}})),ki(si))),Wi=function(n){return f(Ur,r((function(n,e){return f(yn,n.a,n.b,e)})),{},n)},Ii=Mn,Hi=function(n){var e=n.b;return Wi(z([L("A1",Ii(n.a)),L("A2",Ii(e))]))},Ui=Mn,Oi=function(n){var e=n.b,r=n.c;return Wi(z([L("A1",Ui(n.a)),L("A2",Ui(e)),L("A3",Ui(r))]))},Yi=function(n){var e=n.b;return Wi(z([L("A1",Ii(n.a)),L("A2",Oi(e))]))},qi=r((function(n,e){return f(Ur,function(n){return r((function(e,r){return r.push(n(e)),r}))}(n),[],e)})),Gi=q,Xi=function(n){return u(Gi,n,"")},Ji=t((function(n,e,r){return n>0?f(Ji,n>>1,S(e,e),1&n?S(r,e):r):r})),Ki=r((function(n,e){return f(Ji,n,e,"")})),Qi=t((function(n,e,r){return S(u(Ki,n-_t(r),Xi(e)),r)})),Zi=function(n){return 0>n||n>1114111?"�":n>65535?String.fromCharCode(Math.floor((n-=65536)/1024)+55296,n%1024+56320):String.fromCharCode(n)},nc=F,ec=function(n){var e=function(n){return 10>n?Wr(n):Xi(Zi(87+n))};return 16>n?e(n):S(ec(n/16|0),e(u(nc,16,n)))},rc=u($t,ec,u(Qi,2,"0")),tc=function(n){return{aO:n.d,cf:n.c,co:n.b,cX:n.a}},oc=function(n){var e=tc(n),r=e.cX,t=e.co,o=e.cf;return u(Ir,"",u(Tr,"#",u(Wt,u($t,zi,rc),z([255*r,255*t,255*o]))))},ac=u($t,(function(n){return{P:u(Wt,Fi(oc),n.P),U:n.U}}),u($t,(function(n){return Wi(z([L("floats",u(qi,Yi,n.U)),L("colors",u(qi,Hi,n.P))]))}),jr(0))),ic=function(n){return 0>n?-n:n},cc=function(n){if(0===n.length||/[\sxbo]/.test(n))return kr;var e=+n;return e==e?Br(e):kr},lc=r((function(n,e){return e.$?n:e.a})),uc=t((function(n,e,r){return u(lc,NaN,cc(u(n,e,r)))})),fc=function(n){return!n},sc=r((function(n,e){for(;;){if(!e.b)return!1;var r=e.b;if(n(e.a))return!0;n=n,e=r}})),dc=r((function(n,e){var r=u(sc,(function(n){return"0"!==n&&"."!==n}),Ri(e));return S(n&&r?"-":"",e)})),mc=Z,vc=function(n){var e=n.a,r=n.b;if("9"===e){var t=Qr(r);return 1===t.$?"01":u(Gi,"0",vc(t.a))}var o=Jr(e);return o>=48&&57>o?u(Gi,Zi(o+1),r):"0"},bc=function(n){return n===1/0||n===-1/0},pc=Y,gc=t((function(n,e,r){return S(r,u(Ki,n-_t(r),Xi(e)))})),hc=function(n){var e=u(Hr,".",n);return e.b?L(e.a,e.b.b?e.b.a:"0"):L("0","0")},xc=r((function(n,e){var r=e.b;return L(n(e.a),r)})),Cc=t((function(n,e,r){if(bc(r)||pc(r))return mc(r);var t=0>r,o=hc(function(n){var e=u(Hr,"e",mc(ic(n)));if(e.b){if(e.b.b){var r=e.a,t=e.b.a,o=u(lc,0,function(n){for(var e=0,r=n.charCodeAt(0),t=43==r||45==r?1:0,o=t;n.length>o;++o){var a=n.charCodeAt(o);if(48>a||a>57)return kr;e=10*e+a-48}return o==t?kr:Br(45==r?-e:e)}(u(Vt,"+",t)?u(Rt,1,t):t)),a=hc(r),i=S(a.a,a.b),c=0>o?u(lc,"0",u(xi,(function(n){return n.a+"."+n.b}),u(xi,xc(Xi),Qr(S(u(Ki,ic(o),"0"),i))))):f(gc,o+1,"0",i);return S(0>n?"-":"",c)}return S(0>n?"-":"",r=e.a)}return""}(ic(r))),a=o.a,i=o.b,c=_t(a)+e,l=S(u(Ki,1-c,"0"),f(gc,c,"0",S(a,i))),s=_t(l),d=u(st,1,c),m=u(n,t,f(At,d,s,l)),v=f(At,0,d,l),b=m?Li(u(lc,"1",u(xi,vc,Qr(Li(v))))):v,p=_t(b),g="0"===b?b:e>0?0>y(e,_t(i))?f(At,0,p-e,b)+"."+f(At,p-e,p,b):S(a+".",f(gc,e,"0",i)):S(b,u(Ki,ic(e),"0"));return u(dc,t,g)})),Pc=Cc(r((function(n,e){var r,t=Qr(e);return 1!==t.$&&("5"===t.a.a?""!==t.a.b||!n:(r=Jr(t.a.a))>53&&n||r>=53&&!n)}))),Mc=uc(Pc),yc=t((function(n,e,r){var t=u(tt,10,ic(e-n));return u(Mc,0>t?3:1>t?2:2>t?1:0,r)})),Tc=r((function(n,e){switch(n.$){case 2:var r=ji(e.aq);return w(r,{aD:r.aD,aq:r.aq});case 3:return w(e,{aq:n.a});case 4:return w(e,{aD:ac(e)});case 0:var t=n.a,o=n.b;return w(e,{U:u(Wt,(function(n){var e=n.a,r=n.b,a=r.a,i=r.c;return P(e,t)?L(e,D(a,f(yc,a,i,o),i)):n}),e.U)});default:return t=n.a,o=n.b,w(e,{P:u(Wt,(function(n){var e=n.a;return P(e,t)?L(e,o):n}),e.P)})}})),Lc=o((function(n,e,r,t){var o=t.F;switch(r.$){case 0:return t;case 1:return w(t,{a6:r.a});case 2:return w(t,{bd:!1});case 3:return w(t,{bd:!0});case 4:return w(t,{af:f(e,t.F,r.a,t.af)});case 5:return w(t,{F:w(o,{bO:u(Tc,r.a,o.bO)})});default:var a=r.a,i=1===a.$?u(n,o,t.af):t.af;return w(t,{F:u(ri,a,t.F),af:i})}})),Dc=(ha=function(){return{ek:(n=Fe.body,e=Fe.documentElement,{dc:Math.max(n.scrollWidth,n.offsetWidth,e.scrollWidth,e.offsetWidth,e.clientWidth),cp:Math.max(n.scrollHeight,n.offsetHeight,e.scrollHeight,e.offsetHeight,e.clientHeight)}),fC:{bD:Be.pageXOffset,bE:Be.pageYOffset,dc:Fe.documentElement.clientWidth,cp:Fe.documentElement.clientHeight}};var n,e},Ln((function(n){Re((function(){n(Tn(ha()))}))}))),wc=r((function(n,e){return{bO:e,cl:n.cl,bk:Wa,G:s(ka,0,0,!1,!1),aa:u(Qa,600,600),a1:0,ab:Co}})),Sc=In,Nc=Sc(N),Ec=function(n){return{$:5,a:n}},$c=function(n){return{$:4,a:n}},zc={$:2},_c={$:0},Ac=function(n){return{$:1,a:n}},Rc={$:3},Vc=r((function(n){return n})),Fc=re("button"),Bc=function(n){return n?"Level Editor":"Configurations"},kc=function(n){return u(lc,0,hi(u(Vo,(function(e){return P(Bc(e),n)?Br(e):kr}),z([0,1]))))},jc=oe,Wc=jc,Ic=ae,Hc=r((function(n,e){return u(Ic,n,{$:0,a:e})})),Uc=r((function(n,e){return f(jt,Pt,e,n)})),Oc=u(Uc,z(["target","value"]),za),Yc=function(n){return u(Hc,"click",Lt(n))},qc=re("option"),Gc=re("select"),Xc=ie,Jc=Xc,Kc=ne,Qc=Kc,Zc=r((function(n,e){return u(ce,n,Ii(e))})),nl=Zc("value"),el=r((function(n,e){return{$:1,a:n,b:e}})),rl=r((function(n,e){return{$:0,a:n,b:e}})),tl=s(Si,0,0,0,1),ol=u(Fc,z([u(Jc,"cursor","pointer"),Yc({$:4})]),z([Qc("Export Configurations as json")])),al=re("h3"),il=re("p"),cl=Mn,ll=r((function(n,e){return u(ce,n,cl(e))})),ul=ll("readOnly"),fl=re("textarea"),sl=function(n){return u(wt,N,z([u(fl,z([ul(!0)]),z([Qc(n.aD)]))]))},dl=function(n){return u(wt,N,z([u(al,N,z([Qc("Export Configurations")])),u(il,N,z([ol])),u(il,N,z([sl(n)]))]))},ml=Zc("htmlFor"),vl=re("hr"),bl=Zc("id"),pl=u(Fc,z([u(Jc,"cursor","pointer"),Yc({$:2})]),z([Qc("Import Configurations")])),gl=function(n){return{$:3,a:n}},hl=function(n){return L(n,!0)},xl=r((function(n,e){return u(Ic,n,{$:1,a:e})})),Cl=function(n){return u(xl,"input",u(yt,hl,u(yt,n,Oc)))},Pl=function(n){return u(wt,N,z([u(fl,z([Cl(gl)]),z([Qc(n.aq)]))]))},Ml=function(n){return u(wt,N,z([u(al,N,z([Qc("Import Configurations")])),u(il,N,z([Pl(n)])),u(il,N,z([pl]))]))},yl=re("input"),Tl=re("label"),Ll=Zc("max"),Dl=Zc("min"),wl=Zc("name"),Sl=re("span"),Nl=Zc("type"),El=t((function(n,e,t){var o,a,i,c,l=u(wt,z([u(Jc,"position","fixed"),u(Jc,"top","0px"),u(Jc,"left","0px"),u(Jc,"width",mc(t.F.aa.dc)+"px"),u(Jc,"height",mc(t.F.aa.cp)+"px"),u(Jc,"font-size","16px")]),z([u(Wc,Vc(_c),u(n,t.F,t.af))])),f=t.a6?u(Wc,$c,u(e,t.F,t.af)):u(Wc,Ec,(o=t.F.bO,a=function(n){var e=n.a,r=n.b,t=r.a,o=r.b,a=r.c;return u(wt,z([u(Jc,"margin-top","15px")]),z([u(wt,N,z([u(Tl,z([ml(e)]),z([Qc(e),Qc(": "),u(Sl,z([u(Jc,"font-family","monospace"),u(Jc,"font-weight","bold")]),z([Qc(mc(o))]))]))])),u(yl,z([Nl("range"),bl(e),wl(e),Dl(mc(t)),Ll(mc(a)),Cl((function(n){return u(rl,e,u(lc,0,cc(n)))})),u(Zc,"step","any"),u(Jc,"width","200px"),nl(mc(o))]),N)]))},i=function(n){var e=n.a,r=n.b;return u(wt,z([u(Jc,"margin-top","15px")]),z([u(wt,N,z([u(Tl,z([ml(e)]),z([Qc(e)]))])),u(yl,z([Nl("color"),u(Jc,"width","200px"),u(Jc,"height","30px"),bl(e),wl(e),Cl((function(n){return u(el,e,u(ki,tl,Vi(n)))})),nl(oc(r))]),N)]))},u(wt,z([u(Jc,"margin-left","20px"),u(Jc,"height","100%"),u(Jc,"overflow","scroll")]),z([u(wt,N,u(Wt,a,o.U)),u(wt,N,u(Wt,i,o.P)),u(vl,N,N),dl(o),Ml(o)])))),s=u(wt,z([u(Jc,"margin-left","0px")]),z([u(Gc,z([(c=u($t,kc,Ac),u(Hc,"change",u(yt,c,Oc))),nl(Bc(t.a6)),u(Jc,"width","200px"),u(Jc,"height","40px"),u(Jc,"font-size","20px")]),u(Wt,(function(n){return u(qc,z([nl(Bc(n))]),z([Qc(Bc(n))]))}),z([0,1])))])),d=r((function(n,e){return u(Fc,z([u(Jc,"font-size","30px"),u(Jc,"width","40px"),u(Jc,"height","40px"),Yc(n)]),z([Qc(e)]))})),m=u(wt,z([u(Jc,"position","fixed"),u(Jc,"top","0px"),u(Jc,"left","0px"),u(Jc,"width",mc(250)+"px"),u(Jc,"height",mc(t.F.aa.cp)+"px"),u(Jc,"font-family",'-apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif'),u(Jc,"font-size","16px")]),z(t.bd?[u(wt,z([u(Jc,"height","100px")]),z([u(d,zc,"✕"),s])),u(wt,z([u(Jc,"height",mc(t.F.aa.cp-100)+"px")]),z([f]))]:[u(d,Rc,"≡")]));return u(wt,z([u(Jc,"touch-action","none"),u(Jc,"user-select","none")]),z([l,m]))})),$l=i((function(n,e,t,o,a,i){return Jt({e1:function(n){var e=u(wc,n,t);return L({a6:0,F:e,bd:!1,af:o(e),db:0},u(Xt,u($t,St,Nt),Dc))},fs:function(n){return 1===n.db?u(ro,Nt,$a(Et)):Ba},fz:r((function(n,r){return L(s(Lc,e,i,n,r),Nc)})),fB:u(El,n,a)})})),zl=o((function(n,e,o,a){return m($l,n,e,o,a,r((function(){return u(wt,N,N)})),t((function(n,e,r){return r})))})),_l=fi,Al=_l,Rl=u(Al,z([L("camera x",D(-40,0,40)),L("camera y",D(-40,0,40)),L("camera z",D(-40,16,40))]),N),Vl=r((function(n,e){return e})),Fl=r((function(n,e){return e.b?f(jt,Tr,e,n):n})),Bl=function(n){return f(jt,Fl,N,n)},kl=r((function(n,e){return Bl(u(Wt,n,e))})),jl=function(n){return kl((function(e){return u(Wt,(function(n){return L(e,n)}),n)}))},Wl=function(n){return{$:5,a:n}},Il=function(n){return Wl(n)},Hl=3.141592653589793,Ul=function(n){return n*Hl/180},Ol=r((function(n,e){return{$:0,a:n,b:e}})),Yl=r((function(n,e){return{$:2,a:n,b:e}})),ql=r((function(n,e){return{$:4,a:n,b:e}})),Gl=r((function(n,e){return{$:3,a:n,b:e}})),Xl=r((function(n,e){return{$:1,a:n,b:e}})),Jl=t((function(n,e,r){return{bD:n,bE:e,a5:r}})),Kl=function(n){return n.eA},Ql=function(n){return n.dq},Zl=function(n){return n.cJ},nu=r((function(n,e){return{bD:e.bD+n.bD,bE:e.bE+n.bE,a5:e.a5+n.a5}})),eu=function(n){return n.de},ru=function(n){return n.df},tu=function(n){return n.dg},ou=r((function(n,e){return{cJ:u(nu,n,Zl(e)),de:eu(e),df:ru(e),dg:tu(e)}})),au=r((function(n,e){return{eA:u(ou,n,Kl(e)),dq:Ql(e)}})),iu=r((function(n,e){return{eL:e,cJ:n}})),cu=r((function(n,e){var r=e;return u(iu,u(nu,n,r.cJ),r.eL)})),lu=r((function(n,e){var r=e;return{k:u(cu,n,r.k),e5:r.e5,fj:r.fj}})),uu=r((function(n,e){var r=e.b;return L(n(e.a),n(r))})),fu=r((function(n,e){return u(uu,nu(n),e)})),su=function(n){return n.eH},du=function(n){return n.fj},mu=function(n){return ic(n)},vu=r((function(n,e){return{eH:e,fj:mu(n)}})),bu=r((function(n,e){return u(vu,du(e),u(nu,n,su(e)))})),pu=r((function(n,e){var r=e.b,t=e.c;return D(n(e.a),n(r),n(t))})),gu=r((function(n,e){return u(pu,nu(n),e)})),hu=r((function(n,e){var r=n.a,t=n.b,o=n.c,a=f(Jl,r,t,o);switch(e.$){case 0:return u(Ol,e.a,u(au,a,e.b));case 1:return u(Xl,e.a,u(gu,a,e.b));case 3:return u(Gl,e.a,u(bu,a,e.b));case 2:return u(Yl,e.a,u(lu,a,e.b));case 4:return u(ql,e.a,u(fu,a,e.b));default:var i=e.a;return Wl(u(Wt,hu(D(r,t,o)),i))}})),xu=function(n){return hu(D(n,0,0))},Cu=function(n){return hu(D(0,n,0))},Pu=function(n){return hu(D(0,0,n))},Mu=B,yu=k,Tu=t((function(n,e,r){var t=n,o=r,a=.5*e,i=Mu(a),c=yu(a),l=t.eL,u=l.bD*c,f=i*u,s=u*u,d=l.bE*c,m=i*d,v=u*d,b=d*d,p=l.a5*c,g=i*p,h=u*p,x=d*p,C=p*p;return{bD:(1-2*(b+C))*o.bD+2*(v-g)*o.bE+2*(h+m)*o.a5,bE:2*(v+g)*o.bD+(1-2*(s+C))*o.bE+2*(x-f)*o.a5,a5:2*(h-m)*o.bD+2*(x+f)*o.bE+(1-2*(s+b))*o.a5}})),Lu=t((function(n,e,r){var t=n,o=r,a=.5*e,i=Mu(a),c=yu(a),l=t.cJ,u=o.bD-l.bD,f=o.bE-l.bE,s=o.a5-l.a5,d=t.eL,m=d.bD*c,v=i*m,b=m*m,p=d.bE*c,g=i*p,h=m*p,x=p*p,C=d.a5*c,P=i*C,M=m*C,y=p*C,T=C*C;return{bD:l.bD+(1-2*(x+T))*u+2*(h-P)*f+2*(M+g)*s,bE:l.bE+2*(h+P)*u+(1-2*(b+T))*f+2*(y-v)*s,a5:l.a5+2*(M-g)*u+2*(y+v)*f+(1-2*(b+x))*s}})),Du=t((function(n,e,r){return{cJ:f(Lu,n,e,Zl(r)),de:f(Tu,n,e,eu(r)),df:f(Tu,n,e,ru(r)),dg:f(Tu,n,e,tu(r))}})),wu=t((function(n,e,r){return{eA:f(Du,n,e,Kl(r)),dq:Ql(r)}})),Su=r((function(n,e){var r=u(Lu,n,e),t=u(Tu,n,e);return function(n){var e=n;return u(iu,r(e.cJ),t(e.eL))}})),Nu=t((function(n,e,r){var t=r;return{k:f(Su,n,e,t.k),e5:t.e5,fj:t.fj}})),Eu=t((function(n,e,r){return u(uu,u(Lu,n,e),r)})),$u=t((function(n,e,r){return u(vu,du(r),f(Lu,n,e,su(r)))})),zu=t((function(n,e,r){return u(pu,u(Lu,n,e),r)})),_u=t((function(n,e,r){switch(r.$){case 0:return u(Ol,r.a,f(wu,n,e,r.b));case 1:return u(Xl,r.a,f(zu,n,e,r.b));case 3:return u(Gl,r.a,f($u,n,e,r.b));case 2:return u(Yl,r.a,f(Nu,n,e,r.b));case 4:return u(ql,r.a,f(Eu,n,e,r.b));default:var t=r.a;return Wl(u(Wt,u(_u,n,e),t))}})),Au={bD:0,bE:0,a5:0},Ru={bD:1,bE:0,a5:0},Vu=Ru,Fu=u(iu,Au,Vu),Bu=r((function(n,e){return f(_u,Fu,n,e)})),ku={bD:0,bE:1,a5:0},ju=ku,Wu=u(iu,Au,ju),Iu=r((function(n,e){return f(_u,Wu,n,e)})),Hu={bD:0,bE:0,a5:1},Uu=Hu,Ou=u(iu,Au,Uu),Yu=r((function(n,e){return f(_u,Ou,n,e)})),qu=U,Gu=o((function(n,e,r,t){var o=D(n,e,r),a=o.a,i=o.b,c=o.c,l=c>.5?c+i-c*i:c*(i+1),u=2*c-l,f=function(n){var e=0>n?n+1:n>1?n-1:n;return 1>6*e?u+(l-u)*e*6:1>2*e?l:2>3*e?u+(l-u)*(2/3-e)*6:u},d=f(a-1/3),m=f(a),v=f(a+1/3);return s(Si,v,m,d,t)})),Xu=t((function(n,e,r){return s(Gu,n,e,r,1)})),Ju=r((function(n,e){return(e-ut(e/n)*n)/n})),Ku=o((function(n,e,r,t){return n+(e-n)*(1+Mu(6.283185307179586*u(Ju,r,t)))/2})),Qu=function(n){return f(Xu,s(Ku,0,1,7,n.a1),.8,.8)},Zu=r((function(n,e){return y(e,n)>-1})),nf=r((function(n,e){return n+.5*(e-n)})),ef=r((function(n,e){return e-n})),rf={bD:-1,bE:0,a5:0},tf={bD:0,bE:-1,a5:0},of={bD:0,bE:0,a5:-1},af=t((function(n,e,r){return{bD:n,bE:e,a5:r}})),cf=i((function(n,e,r,t,o,a){var i=u(Zu,r,a)?Hu:of,c=u(Zu,e,o)?ku:tf,l=u(Zu,n,t)?Ru:rf,s=D(mu(u(ef,n,t)),mu(u(ef,e,o)),mu(u(ef,r,a)));return{eA:{cJ:f(af,u(nf,n,t),u(nf,e,o),u(nf,r,a)),de:l,df:c,dg:i},dq:s}})),lf=function(n){return n.bD},uf=function(n){return n.bE},ff=function(n){return n.a5},sf=r((function(n,e){return m(cf,lf(n),uf(n),ff(n),lf(e),uf(e),ff(e))})),df=t((function(n,e,r){return{bD:n,bE:e,a5:r}})),mf=r((function(n,e){var r=e/2;return u(Ol,n,u(sf,f(df,-r,-r,-r),f(df,r,r,r)))})),vf=function(n){return u(mf,Qu(n),1)},bf=r((function(n,e){var r=D(e.a/2,e.b/2,e.c/2),t=r.a,o=r.b,a=r.c;return u(Ol,n,u(sf,f(df,-t,-o,-a),f(df,t,o,a)))})),pf=t((function(n,e,r){return D(n,e,r)})),gf=r((function(n,e){var r=e.a,t=e.b,o=e.c;return u(Xl,n,f(pf,f(df,r.bD,r.bE,r.a5),f(df,t.bD,t.bE,t.a5),f(df,o.bD,o.bE,o.a5)))})),hf=function(n){var e=u(Cu,-qu(3)/6,u(xu,-.5,u(Yu,-Ul(30),u(gf,Qu(n),D({bD:0,bE:0,a5:0},{bD:Mu(Ul(30)),bE:yu(Ul(30)),a5:0},{bD:0,bE:1,a5:0}))))),r=u(Cu,-qu(3)/6,u(bf,Qu(n),D(1,1e-8,1)));return Il(z([u(Pu,-.5,e),u(Pu,.5,e),r,u(Yu,Ul(120),r),u(Yu,Ul(240),r)]))},xf=r((function(n,e){var t=e.a,o=e.b,a=r((function(n,e){return u(Cu,(1+qu(3))/2,u(Yu,n,u(Cu,-(1+qu(3))/2,e)))})),i=Hl,c=function(e){return u(Bu,s(Ku,0,i,20,n.a1),e)},l=u(a,Ul(240),c(vf(n))),f=u(xu,(3+qu(3))/2,u(Cu,(1+qu(3))/2,c(vf(n)))),d=c(Il(z([u(Yu,Ul(90),u(Cu,.5+qu(3)/6,hf(n))),vf(n)])));return u(Pu,s(Ku,-1,1,7,n.a1),u(Cu,o*(1+qu(3)),u(xu,t*(3+qu(3)),u(Iu,s(Ku,0,i,20,n.a1),u(Bu,s(Ku,0,i,20,n.a1),Il(z([d,u(a,Ul(60),d),u(a,Ul(120),d),u(a,-Ul(60),d),f,l])))))))})),Cf=function(n){return Il(u(Wt,xf(n),u(jl,u(Gr,-1,1),u(Gr,-1,1))))},Pf=r((function(n,e){return u(lc,0,hi(u(Vo,(function(e){var r=e.b.b;return P(e.a,n)?Br(r):kr}),e.U)))})),Mf=r((function(n,e){return u(Pf,n,e.bO)})),yf=Mf,Tf=function(n){return Hl*(n/180)},Lf=r((function(n,e){var r=e.a5-n.a5,t=e.bE-n.bE,o=e.bD-n.bD,a=u(st,ic(o),u(st,ic(t),ic(r)));if(a){var i=r/a,c=t/a,l=o/a,f=qu(l*l+c*c+i*i);return Br({bD:l/f,bE:c/f,a5:i/f})}return kr})),Df=r((function(n,e){return{bD:e.bE*n.a5-e.a5*n.bE,bE:e.a5*n.bD-e.bD*n.a5,a5:e.bD*n.bE-e.bE*n.bD}})),wf=function(n){var e=n,r=u(st,ic(e.bD),u(st,ic(e.bE),ic(e.a5)));if(r){var t=e.a5/r,o=e.bE/r,a=e.bD/r,i=qu(a*a+o*o+t*t);return Br({bD:a/i,bE:o/i,a5:t/i})}return kr},Sf=r((function(n,e){return{bD:e.bD-n.bD,bE:e.bE-n.bE,a5:e.a5-n.a5}})),Nf=r((function(n,e){return e.bD*n.bD+e.bE*n.bE+e.a5*n.a5})),Ef=r((function(n,e){return y(e,n)>0})),$f=r((function(n,e){return 0>y(e,n)})),zf=r((function(n,e){return{bD:e.bD-n.bD,bE:e.bE-n.bE,a5:e.a5-n.a5}})),_f=r((function(n,e){var r=e.bD*n.bD+e.bE*n.bE+e.a5*n.a5;return{bD:n.bD*r,bE:n.bE*r,a5:n.a5*r}})),Af={bD:0,bE:0,a5:0},Rf=t((function(n,e,r){return u(di,(function(t){return u(di,(function(o){var a,i=u(Df,e,n),c=u(Nf,r,i),l=u(Ef,0,c)?i:u($f,0,c)?{bD:-(a=i).bD,bE:-a.bE,a5:-a.a5}:Af;return u(xi,(function(n){return D(t,o,n)}),wf(l))}),wf(u(zf,u(_f,t,e),e)))}),wf(n))})),Vf=function(n){var e=function(n){var e=n,r=ic(e.a5),t=ic(e.bE),o=ic(e.bD);if(1>y(o,t)){if(1>y(o,r)){var a=qu(e.a5*e.a5+e.bE*e.bE);return{bD:0,bE:-e.a5/a,a5:e.bE/a}}return a=qu(e.bE*e.bE+e.bD*e.bD),{bD:-e.bE/a,bE:e.bD/a,a5:0}}return 1>y(t,r)?(a=qu(e.a5*e.a5+e.bD*e.bD),{bD:e.a5/a,bE:0,a5:-e.bD/a}):(a=qu(e.bD*e.bD+e.bE*e.bE),{bD:-e.bE/a,bE:e.bD/a,a5:0})}(n);return L(e,{bD:n.bE*e.a5-n.a5*e.bE,bE:n.a5*e.bD-n.bD*e.a5,a5:n.bD*e.bE-n.bE*e.bD})},Ff=r((function(n,e){var r=Vf(n);return{cJ:e,de:r.a,df:r.b,dg:n}})),Bf=function(n){var e=u(Sf,n.eU,n.eR),r=n.fy,t=f(Rf,e,r,u(Df,e,r));if(t.$){var o=wf(e);if(o.$){var a=Vf(n.fy);return{cJ:n.eR,de:a.b,df:n.fy,dg:a.a}}return u(Ff,o.a,n.eR)}var i=t.a;return{cJ:n.eR,de:i.c,df:i.b,dg:i.a}},kf=function(n){return.5*n},jf=j,Wf=function(n){var e,r,t,o=n.eU,a=n.eR,i=n.fy;return e={et:Tf(40),da:Bf({eR:a,eU:o,fy:u(lc,ku,u(Lf,Au,i))})},t=kf(mu(e.et)),{cW:(r=jf(t),{$:0,a:r}),da:e.da}},If=function(n){return{$:0,a:n}},Hf={$:3},Uf=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),Of=Uf,Yf=function(n){return u(le,"height",Wr(n))},qf=function(n){return te(function(n){return"script"==n?"p":n}(n))},Gf=function(n){return{$:2,a:n}},Xf=r((function(n,e){switch(e.$){case 0:return u(dr,n,e);case 1:return u(mr,n,e);case 2:return u(vr,n,e);case 3:return u(br,n,e);case 4:return u(pr,n,e);default:return u(gr,n,e)}})),Jf=r((function(n,e){switch(e.$){case 0:return u(Ge,n,e);case 1:return u(Xe,n,e);case 2:return u(Je,n,e);case 3:return u(Ke,n,e);case 4:return u(Qe,n,e);case 5:return u(Ze,n,e);case 6:return u(nr,n,e);case 7:return u(er,n,e);default:return function(n){var e=n.sampleAlphaToCoverage;e.toggle=n.toggle,e.enabled||(n.gl.enable(n.gl.SAMPLE_ALPHA_TO_COVERAGE),e.enabled=!0)}(n)}})),Kf=t((function(n,e,r){return f(sr,n,e,r)})),Qf=yr,Zf=s(Qf,1,1,1,1),ns=t((function(n,e,r){return u(Wt,(function(n){return u(n,e,r)}),n)})),es=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),rs=r((function(n,e){var r=e.bD,t=e.bE;return f(es,n*r/t,n,n*(1-r-t)/t)})),ts=Pr,os=r((function(n,e){return f(ts,3.2406*(t=(r=u(rs,n,e)).a)-1.5372*(o=r.b)-.4986*(a=r.c),-.9689*t+1.8758*o+.0415*a,.0557*t-.204*o+1.057*a);var r,t,o,a})),as=r((function(n,e){return{dB:P(n.dB,e.dB),q:n.q*e.q+n.r*e.t+n.s*e.w,r:n.q*e.r+n.r*e.u+n.s*e.x,s:n.q*e.s+n.r*e.v+n.s*e.y,t:n.t*e.q+n.u*e.t+n.v*e.w,u:n.t*e.r+n.u*e.u+n.v*e.x,v:n.t*e.s+n.u*e.v+n.v*e.y,w:n.w*e.q+n.x*e.t+n.y*e.w,x:n.w*e.r+n.x*e.u+n.y*e.x,y:n.w*e.s+n.x*e.v+n.y*e.y,H:e.H+(n.H*e.q+n.I*e.t+n.J*e.w)*e.b6,I:e.I+(n.H*e.r+n.I*e.u+n.J*e.x)*e.b6,J:e.J+(n.H*e.s+n.I*e.v+n.J*e.y)*e.b6,b6:n.b6*e.b6}})),is=function(n){var e=new Float64Array(16);return e[0]=n.dJ,e[1]=n.dN,e[2]=n.dR,e[3]=n.dV,e[4]=n.dK,e[5]=n.dO,e[6]=n.dS,e[7]=n.dW,e[8]=n.dL,e[9]=n.dP,e[10]=n.dT,e[11]=n.dX,e[12]=n.dM,e[13]=n.dQ,e[14]=n.dU,e[15]=n.dY,e},cs=a((function(n,e,r,t,o){return m(o,n,s(Qf,t.b6,t.b6,t.b6,t.dB?1:-1),function(n){return is({dJ:n.q,dK:n.t,dL:n.w,dM:n.H,dN:n.r,dO:n.u,dP:n.x,dQ:n.I,dR:n.s,dS:n.v,dT:n.y,dU:n.J,dV:0,dW:0,dX:0,dY:1})}(t),t.dB,e,r)})),ls=i((function(n,e,r,t,o,a){n:for(;;)switch(o.$){case 0:return a;case 5:var i=o.b;n=n,e=e,r=r,t=u(as,o.a,t),o=i,a=a;continue n;case 1:return{N:u(Tr,d(cs,n,e,r,t,o.b),a.N),W:a.W,fn:a.fn};case 3:return{N:a.N,W:u(Tr,d(cs,n,e,r,t,o.b),a.W),fn:a.fn};case 2:return{N:a.N,W:a.W,fn:u(Tr,d(cs,n,e,r,t,o.a),a.fn)};default:var c=o.a;return f(Ur,s(ls,n,e,r,t),a,c)}})),us=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),fs=us,ss=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),ds=r((function(n,e){return{$:6,a:n,b:e}})),ms=ds,vs=z([s(ss,518,!1,0,1),s(fs,!1,!1,!1,!1),u(ms,0,1)]),bs=519,ps=7681,gs={src:"\n        precision lowp float;\n\n        void main() {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        }\n    ",attributes:{},uniforms:{}},hs=qe,xs=r((function(n,e){return{$:0,a:n,b:e}})),Cs=xs({dr:1,dA:0,d5:5}),Ps=Cr,Ms=Cs(z([{b2:u(Ps,-1,-1)},{b2:u(Ps,1,-1)},{b2:u(Ps,-1,1)},{b2:u(Ps,1,1)}])),ys={src:"\n        precision lowp float;\n\n        attribute vec2 position;\n\n        void main() {\n            gl_Position = vec4(position, 0.0, 1.0);\n        }\n    ",attributes:{position:"b2"},uniforms:{}},Ts=function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return function(f){return{$:2,a:n,b:e,c:r,d:t,e:o,f:a,g:i,h:c,i:l,j:u,k:f}}}}}}}}}}}},Ls=t((function(n,e,t){var o=n.cY,a=n.cA,i=n.dd,c=r((function(n,e){return e(n)})),l=r((function(n,e){return e(n)})),s=function(n){return u($t,c(n.bu),u($t,l(n.bf),u($t,l(n.bF),l(n.bG))))};return u(s,t,u(s,e,f(Ts,o,a,i)))})),Ds=function(n){return f(Ls,{cA:n.cA,cY:n.cY,dd:n.dd},{bf:n.bf,bu:n.bu,bF:n.bF,bG:n.bG},{bf:n.bf,bu:n.bu,bF:n.bF,bG:n.bG})},ws=function(n){return d(hs,z([Ds(n),s(fs,!1,!1,!1,!1)]),ys,gs,Ms,{})},Ss=ws({bf:ps,cA:0,cY:8,bu:bs,dd:15,bF:ps,bG:ps}),Ns=7680,Es=function(n){return ws({bf:Ns,cA:15,cY:8,bu:516,dd:(e=n,u($i,2,e+4)),bF:5386,bG:5386});var e},$s=t((function(n,e,r){return Bl(z([f(ns,n,r,vs),z([Es(e),Ss])]))})),zs=r((function(n,e){return Bl(u(Xr,$s(n),e))})),_s=s(ss,513,!0,0,1),As=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),Rs=r((function(n,e){return f(As,32774,n,e)})),Vs=function(n){var e=n.b4,t=n.bR,o=n.bK,a=n.bH,i=n.bM,c=n.aO;return u(r((function(n,r){var i=n.b,c=n.c,l=r.a,u=r.b,f=r.c;return function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return{$:0,a:n,b:e,c:r,d:t,e:o,f:a,g:i,h:c,i:l,j:u}}}}}}}}}}}(n.a)(i)(c)(l)(u)(f)(e)(t)(o)(a)})),i,c)}({bH:0,aO:u(Rs,1,771),bK:0,bM:u(Rs,770,771),bR:0,b4:0}),Fs=z([_s,Vs]),Bs=function(n){return n.d0},ks=function(n){return n.d3},js=function(n){return D(u(ef,function(n){return n.d1}(n),function(n){return n.d_}(n)),u(ef,function(n){return n.d2}(n),function(n){return n.d$}(n)),u(ef,ks(n),Bs(n)))},Ws=function(n){return Zl(n)},Is=function(n){return{cJ:{bD:n.H,bE:n.I,a5:n.J},de:{bD:n.q,bE:n.r,a5:n.s},df:{bD:n.t,bE:n.u,a5:n.v},dg:{bD:n.w,bE:n.x,a5:n.y}}},Hs=r((function(n,e){var r=n.dg,t=n.df,o=n.de;return{bD:e.bD*o.bD+e.bE*o.bE+e.a5*o.a5,bE:e.bD*t.bD+e.bE*t.bE+e.a5*t.a5,a5:e.bD*r.bD+e.bE*r.bE+e.a5*r.a5}})),Us=r((function(n,e){var r=n.cJ,t=e.bD-r.bD,o=e.bE-r.bE,a=e.a5-r.a5,i=n.dg,c=n.df,l=n.de;return{bD:t*l.bD+o*l.bE+a*l.a5,bE:t*c.bD+o*c.bE+a*c.a5,a5:t*i.bD+o*i.bE+a*i.a5}})),Os=r((function(n,e){return{cJ:u(Us,n,Zl(e)),de:u(Hs,n,eu(e)),df:u(Hs,n,ru(e)),dg:u(Hs,n,tu(e))}})),Ys=r((function(n,e){return u(st,n,e)})),qs=r((function(n,e){return 0>y(n,e)?n:e})),Gs=r((function(n,e){return u(qs,n,e)})),Xs=r((function(n,e){var r=e,t=n;return{d_:u(Ys,t.d_,r.d_),d$:u(Ys,t.d$,r.d$),d0:u(Ys,t.d0,r.d0),d1:u(Gs,t.d1,r.d1),d2:u(Gs,t.d2,r.d2),d3:u(Gs,t.d3,r.d3)}})),Js=r((function(n,e){return e+n})),Ks=r((function(n,e){var r=n.a,t=n.c,o=kf(mu(n.b)),a=kf(mu(r)),i=kf(mu(t)),c=function(n){return D(n.bD,n.bE,n.a5)}(e),l=c.a,f=c.b,s=c.c;return{d_:u(Js,a,l),d$:u(Js,o,f),d0:u(Js,i,s),d1:u(ef,a,l),d2:u(ef,o,f),d3:u(ef,i,s)}})),Qs=o((function(n,e,r,t){var o=r.eH,a=2*r.eY*e,i=2*r.eX*e,c=2*r.eW*e,l=o.a5*e,s=o.bE*e,d=o.bD*e,m=tu(n),v=ic(c*m.bD)+ic(i*m.bE)+ic(a*m.a5),b=ru(n),p=ic(c*b.bD)+ic(i*b.bE)+ic(a*b.a5),g=eu(n),h=ic(c*g.bD)+ic(i*g.bE)+ic(a*g.a5),x=u(Ks,D(h,p,v),u(Us,n,f(df,d,s,l)));return Br(t.$?x:u(Xs,t.a,x))})),Zs=o((function(n,e,r,t){n:for(;;){if(!t.b)return r;var o=t.a,a=t.b;switch(o.$){case 0:n=c=n,e=l=e,r=f=r,t=a;continue n;case 1:var i=s(Qs,n,e,o.a,r);n=c=n,e=l=e,r=f=i,t=a;continue n;case 2:n=c=n,e=l=e,r=f=r,t=a;continue n;case 3:i=s(Qs,n,e,o.a,r),n=c=n,e=l=e,r=f=i,t=a;continue n;case 4:var c=n,l=e,f=s(Zs,n,e,r,o.a);n=c,e=l,r=f,t=a;continue n;default:var d=o.a,m=o.b,v=u(Os,Is(d),n),b=e*d.b6;n=c=n,e=l=e,r=f=s(Zs,v,b,r,z([m])),t=a;continue n}}})),nd=function(n){return n[0]},ed=function(n){return n[1]},rd=function(n){return n[2]},td=function(n){return{$:4,a:n}},od=r((function(n,e){for(;;){if(!n.b)return e;var r=n.a;n=n.b,e=u(Tr,r,e)}})),ad=function(n){return td(u(od,n,N))},id={dB:!0,q:1,r:0,s:0,t:0,u:1,v:0,w:0,x:0,y:1,H:0,I:0,J:0,b6:1},cd=ws({bf:ps,cA:0,cY:8,bu:bs,dd:255,bF:ps,bG:ps}),ld={bK:0,eG:!1,bR:0,cU:0,b4:0,c7:0,bD:0,bE:0,a5:0},ud=r((function(n,e){return is({dJ:n.bD,dK:n.b4,dL:e.bD,dM:e.b4,dN:n.bE,dO:n.bR,dP:e.bE,dQ:e.bR,dR:n.a5,dS:n.bK,dT:e.a5,dU:e.bK,dV:n.c7,dW:n.cU,dX:e.c7,dY:e.cU})})),fd=L({bm:u(ud,ld,ld),bV:u(ud,ld,ld),bW:u(ud,ld,ld),bX:u(ud,ld,ld)},s(Qf,0,0,0,0)),sd=r((function(n,e){return n*e})),dd=function(n){return-n},md=function(n){return s(ss,515,n.ac,n.Y,n.X)},vd=z([md({X:1,Y:0,ac:!0}),Ds({bf:Ns,cA:240,cY:0,bu:514,dd:0,bF:Ns,bG:Ns}),Vs]),bd=r((function(n,e){var r=n,t=e.eT,o=e.ez,a=mu(e.fc),i=mu(t),c=r.cW;if(c.$){var l=c.a;return bc(i)?is({dJ:2/(o*l),dK:0,dL:0,dM:0,dN:0,dO:2/l,dP:0,dQ:0,dR:0,dS:0,dT:0,dU:-1,dV:0,dW:0,dX:0,dY:1}):is({dJ:2/(o*l),dK:0,dL:0,dM:0,dN:0,dO:2/l,dP:0,dQ:0,dR:0,dS:0,dT:-2/(i-a),dU:-(i+a)/(i-a),dV:0,dW:0,dX:0,dY:1})}var u=c.a;return bc(i)?is({dJ:1/(o*u),dK:0,dL:0,dM:0,dN:0,dO:1/u,dP:0,dQ:0,dR:0,dS:0,dT:-1,dU:-2*a,dV:0,dW:0,dX:-1,dY:0}):is({dJ:1/(o*u),dK:0,dL:0,dM:0,dN:0,dO:1/u,dP:0,dQ:0,dR:0,dS:0,dT:-(i+a)/(i-a),dU:-2*i*a/(i-a),dV:0,dW:0,dX:-1,dY:0})})),pd=r((function(n,e){return 1==(1&n>>e)?0:1})),gd=t((function(n,e,r){return Bl(u(Wt,(function(r){var t=r<<4;return f(ns,n,L(e,s(Qf,u(pd,r,0),u(pd,r,1),u(pd,r,2),u(pd,r,3))),function(n){return z([md({X:1,Y:0,ac:!0}),Ds({bf:Ns,cA:240,cY:n,bu:514,dd:0,bF:Ns,bG:Ns}),Vs])}(t))}),u(Gr,1,u($i,2,r)-1)))})),hd=function(n){return{bD:-n.bD,bE:-n.bE,a5:-n.a5}},xd=function(n){return hd(tu(n))},Cd={cJ:Au,de:Vu,df:ju,dg:Uu},Pd=r((function(n,e){var r,t,o,a,i;return t=Zl(r=u(Os,e,n)),o=tu(r),a=ru(r),i=eu(r),is({dJ:i.bD,dK:a.bD,dL:o.bD,dM:t.bD,dN:i.bE,dO:a.bE,dP:o.bE,dQ:t.bE,dR:i.a5,dS:a.a5,dT:o.a5,dU:t.a5,dV:0,dW:0,dX:0,dY:1})})),Md=function(n){return eu(n)},yd=t((function(n,e,r){return{bD:n,bE:e,a5:r}})),Td=function(n){return ru(n)},Ld=r((function(n,e){var r,t=z([(1,{$:1,a:1}),Gf(0),If(!0),s(Of,0,0,0,0)]),o=function(){var e=n.ex;switch(e.$){case 0:return D(t,"0",1);case 1:return D(u(Tr,Hf,t),"1",1);default:return D(t,"0",e.a)}}(),a=o.a,i=o.b,c=o.c,l=n.dq,d=l.a,v=l.b,b=u(Jc,"height",Wr(v)+"px"),p=d,g=p/v,h=u(kl,(function(e){return function(n){var e=function(n){return n.da}(n.eE),r={cJ:Ws(e),de:Md(e),df:Td(e),dg:hd(xd(e))},t=ad(n.du),o=s(Zs,r,1,kr,z([t]));if(1===o.$)return N;var a=o.a,i=u(Pd,Cd,e),c=u(sd,.99,u(Ys,mu(n.dn),dd(Bs(a)))),l=js(a),d=function(n){var e=n,r=u(st,ic(e.bD),u(st,ic(e.bE),ic(e.a5)));if(r){var t=e.a5/r,o=e.bE/r,a=e.bD/r;return qu(a*a+o*o+t*t)*r}return 0}(f(yd,l.a,l.b,l.c)),v=u(sd,1.01,u(Js,d,dd(ks(a)))),b=u(bd,n.eE,{ez:n.ez,eT:v,fc:c}),p=function(n){return{dJ:n[0],dN:n[1],dR:n[2],dV:n[3],dK:n[4],dO:n[5],dS:n[6],dW:n[7],dL:n[8],dP:n[9],dT:n[10],dX:n[11],dM:n[12],dQ:n[13],dU:n[14],dY:n[15]}}(b).dY,g=p?hd(xd(e)):Ws(e),h=function(){var e=n.fx;switch(e.$){case 0:return L(0,0);case 1:return L(1,0);case 2:return L(2,0);case 3:return L(3,e.a);case 4:return L(4,e.a);default:return L(5,0)}}(),x=h.a,C=h.b,P=u(os,n.eQ,n.fD),M=is({dJ:0,dK:g.bD,dL:nd(P),dM:n.eo,dN:0,dO:g.bE,dP:ed(P),dQ:d,dR:0,dS:g.a5,dT:rd(P),dU:x,dV:0,dW:p,dX:0,dY:C}),y=m(ls,M,i,b,id,t,{N:N,W:N,fn:N}),T=n.e7;switch(T.$){case 0:return Bl(z([f(ns,y.N,L(D=T.a,Zf),Fs),f(ns,y.W,fd,Fs)]));case 1:var D=T.a;return Bl(z([f(ns,y.N,fd,Fs),z([cd]),f(ns,y.fn,D.bm,vs),z([Es(0)]),f(ns,y.N,L(D,Zf),vd),f(ns,y.W,fd,Fs)]));default:var w=T.a,S=T.b;return Bl(z([f(ns,y.N,L(S,Zf),Fs),z([cd]),u(zs,y.fn,w),f(gd,y.N,S,Or(w)),f(ns,y.W,fd,Fs)]))}}({ez:g,eE:n.eE,dn:n.dn,du:e.du,eQ:e.eQ,e7:e.e7,eo:c,fx:e.fx,fD:e.fD})}),e),x=u(Jc,"width",Wr(p)+"px"),C=function(n){var e,r,t=n.b,o=n.c,a=n.d,i=function(n){return zi(1e4*n)/100};return e=z(["rgba(",mc(i(n.a)),"%,",mc(i(t)),"%,",mc(i(o)),"%,",mc((r=a,zi(1e3*r)/1e3)),")"]),u(Ir,"",e)}(n.dj);return f(qf,"div",z([u(Jc,"padding","0px"),x,b]),z([L(i,f(Kf,a,z([(r=zi(p*c),u(le,"width",Wr(r))),Yf(zi(v*c)),x,b,u(Jc,"display","block"),u(Jc,"background-color",C)]),h))]))})),Dd={bD:.31271,bE:.32902},wd=r((function(n,e){var r=n,t=e.eL,o=t.bD,a=t.bE,i=t.a5,c=u(os,e.cq,e.cg);return{bK:rd(c),eG:r,bR:ed(c),cU:0,b4:nd(c),c7:1,bD:-o,bE:-a,a5:-i}})),Sd={$:0},Nd=function(n){return function(n){for(;;){if(P(n.e2,0)&&P(n.e3,0))return ld;if(!u(Ef,mu(n.e2),mu(n.e3))){var e=ic(n.e3/Hl),r=ic(n.e2/Hl),t=n.fy,o=t.bD,a=t.bE,i=t.a5,c=u(os,1,n.cg);return{bK:r*rd(c),eG:!1,bR:r*ed(c),cU:e/r,b4:r*nd(c),c7:3,bD:o,bE:a,a5:i}}n={cg:n.cg,e2:n.e3,e3:n.e2,fy:hd(n.fy)}}}({cg:n.cg,e2:n.cq,e3:0,fy:n.fy})},Ed=t((function(n,e,r){return 0>y(r,n)?n:y(r,e)>0?e:r})),$d=function(n){var e=f(Ed,1667,25e3,n),r=e>4e3?-3025846900/(e*e*e)+2107037.9/(e*e)+.2226347*1e3/e+.24039:-266123900.00000003/(e*e*e)-.2343589*1e6/(e*e)+877.6956/e+.17991;return{bD:r,bE:e>2222?e>4e3?r*r*r*3.081758-r*r*5.8733867+3.75112997*r-.37001483:r*r*r*-.9549476-r*r*1.37418593+2.09137015*r-.16748867:r*r*r*-1.1063814-r*r*1.3481102+2.18555832*r-.20219683}},zd=$d(12e3),_d=$d(5600),Ad=r((function(n,e){return{$:2,a:n,b:e}})),Rd=function(n){return{$:0,a:n}},Vd=function(n){return n.eG},Fd=Rd(fd.a),Bd=r((function(n,e){return f(jt,r((function(e,r){var t=r.a,o=r.b;return n(e)?L(u(Tr,e,t),o):L(t,u(Tr,e,o))})),L(N,N),e)})),kd=function(n){return is({dJ:n.bD,dK:n.b4,dL:0,dM:0,dN:n.bE,dO:n.bR,dP:0,dQ:0,dR:n.a5,dS:n.bK,dT:0,dU:0,dV:n.c7,dW:n.cU,dX:0,dY:0})},jd=l((function(n,e,r,t,o,a,i,c){var l=u(Bd,Vd,z([n,e,r,t])),f=l.a;if(f.b){var s=S(f,l.b);if(s.b&&s.b.b&&s.b.b.b&&s.b.b.b.b&&!s.b.b.b.b.b){var d=s.a,m=s.b,v=m.a,b=m.b,p=b.a,g=b.b.a;return u(Ad,u(Wt,kd,f),{bm:u(ud,d,v),bV:u(ud,p,g),bW:u(ud,o,a),bX:u(ud,i,c)})}return Fd}return Rd({bm:u(ud,n,e),bV:u(ud,r,t),bW:u(ud,o,a),bX:u(ud,i,c)})})),Wd=t((function(n,e,r){return b(jd,n,e,r,ld,ld,ld,ld,ld)})),Id=o((function(n,e,r,t){return{$:2,a:n,b:e,c:r,d:t}})),Hd=o((function(n,e,r,t){return{$:3,a:n,b:e,c:r,d:t}})),Ud=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),Od=o((function(n,e,r,t){return{$:6,a:n,b:e,c:r,d:t}})),Yd=o((function(n,e,r,t){return{$:7,a:n,b:e,c:r,d:t}})),qd=o((function(n,e,r,t){return{$:5,a:n,b:e,c:r,d:t}})),Gd=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),Xd=function(n){switch(n.$){case 0:return n;case 1:return s(Gd,n.a,n.b,n.c,1);case 2:return s(Id,n.a,n.b,n.c,1);case 3:return s(Hd,n.a,n.b,n.c,1);case 4:return s(Ud,n.a,n.b,n.c,1);case 5:return s(qd,n.a,n.b,n.c,1);case 6:return s(Od,n.a,n.b,n.c,1);case 7:return s(Yd,n.a,n.b,n.c,1);case 8:case 9:default:return n}},Jd={$:0},Kd=l((function(n,e,r,t,o,a,i,c){for(;;){if(!c.b)return{d_:e,d$:t,d0:a,d1:n,d2:r,d3:o};var l=c.b,f=i(c.a);n=u(Gs,f.d1,n),e=u(Ys,f.d_,e),r=u(Gs,f.d2,r),t=u(Ys,f.d$,t),o=u(Gs,f.d3,o),a=u(Ys,f.d0,a),i=i,c=l}})),Qd=t((function(n,e,r){var t=n(e);return b(Kd,t.d1,t.d_,t.d2,t.d$,t.d3,t.d0,n,r)})),Zd=r((function(n,e){return 1>y(e,n)})),nm=function(n){return u(Zd,n.d_,n.d1)&&u(Zd,n.d$,n.d2)&&u(Zd,n.d0,n.d3)?n:{d_:u(Ys,n.d1,n.d_),d$:u(Ys,n.d2,n.d$),d0:u(Ys,n.d3,n.d0),d1:u(Gs,n.d1,n.d_),d2:u(Gs,n.d2,n.d$),d3:u(Gs,n.d3,n.d0)}},em=function(n){return n},rm=function(n){var e=n.a,r=n.b,t=n.c,o=lf(e),a=uf(e),i=ff(e),c=lf(r),l=uf(r),f=ff(r),s=lf(t),d=uf(t),m=ff(t);return nm({d_:u(Ys,o,u(Ys,c,s)),d$:u(Ys,a,u(Ys,l,d)),d0:u(Ys,i,u(Ys,f,m)),d1:u(Gs,o,u(Gs,c,s)),d2:u(Gs,a,u(Gs,l,d)),d3:u(Gs,i,u(Gs,f,m))})},tm=function(n){return new Float64Array([n.bD,n.bE,n.a5])},om=function(n){return tm(n)},am=function(n){return tm(n)},im=r((function(n,e){var r=n,t=e,o=u(st,ic(t.bD),u(st,ic(t.bE),ic(t.a5)));if(o){var a=t.a5/o,i=t.bE/o,c=t.bD/o,l=qu(c*c+i*i+a*a);return{bD:r*c/l,bE:r*i/l,a5:r*a/l}}return Af}))(1),cm=t((function(n,e,r){return im(u(Df,u(Sf,e,r),u(Sf,n,e)))})),lm=function(n){var e=n.a,r=n.b,t=n.c,o=am(f(cm,e,r,t));return D({o:o,b2:om(e)},{o:o,b2:om(r)},{o:o,b2:om(t)})},um=r((function(n,e){return{$:2,a:n,b:e}}))({dr:3,dA:0,d5:4}),fm=(ko=u(sd,-.5,1),jo=u(sd,-.5,1),Io=f(af,Wo=u(sd,-.5,1),jo,ko),Uo=f(af,Wo,jo,Ho=u(sd,.5,1)),Yo=f(af,Wo,Oo=u(sd,.5,1),ko),qo=f(af,Wo,Oo,Ho),Xo=f(af,Go=u(sd,.5,1),jo,ko),Jo=f(af,Go,Oo,ko),Ko=f(af,Go,jo,Ho),Qo=f(af,Go,Oo,Ho),Xd(function(n){if(n.b){var e=n.a,r=n.b,t=um(u(Wt,lm,n));return s(Id,f(Qd,rm,e,r),n,t,0)}return Jd}(z([f(pf,Io,Jo,Xo),f(pf,Io,Yo,Jo),f(pf,Uo,Ko,Qo),f(pf,Uo,Qo,qo),f(pf,Xo,Jo,Qo),f(pf,Xo,Qo,Ko),f(pf,Io,qo,Yo),f(pf,Io,Uo,qo),f(pf,Io,Xo,Ko),f(pf,Io,Ko,Uo),f(pf,Yo,Qo,Jo),f(pf,Yo,qo,Qo)])))),sm={$:0},dm=t((function(n,e,r){return{$:1,a:n,b:e,c:r}})),mm=t((function(n,e,r){var t=e.a,o=e.b,a=n(e.c),i=n(o),c=n(t),l=am(f(cm,c,i,a)),s={o:l,b2:om(c)},d={o:l,b2:om(i)},m={o:l,b2:om(a)};return u(Tr,s,u(Tr,d,u(Tr,m,r)))})),vm=function(n){return n.C},bm=o((function(n,e,r,t){return 1===e.$||1===r.$||1===t.$?kr:Br(f(n,e.a,r.a,t.a))})),pm=4294967295>>>32-at,gm=h,hm=t((function(n,e,r){for(;;){var t=u(gm,pm&e>>>n,r);if(t.$)return u(gm,pm&e,t.a);n-=at,e=e,r=t.a}})),xm=r((function(n,e){var r=e.a,t=e.b,o=e.c,a=e.d;return 0>n||y(n,r)>-1?kr:y(n,function(n){return n>>>5<<5}(r))>-1?Br(u(gm,pm&n,a)):Br(f(hm,t,n,o))})),Cm=function(n){return n.an},Pm=r((function(n,e){return u(xm,n,Cm(e))})),Mm=t((function(n,e,r){for(;;){var t=u(mt,Zr,n),o=t.a,a=t.b;if(0>y(ft(o),Zr))return u(pt,!0,{z:e,l:r,p:o});n=a,e=u(Tr,lt(o),e),r+=1}})),ym=function(n){return n.b?f(Mm,n,N,0):it},Tm=r((function(n,e){return!u(sc,u(bo,fc,n),e)})),Lm=r((function(n,e){return f(jt,r((function(e,r){return n(e)?u(Tr,e,r):r})),N,e)})),Dm=r((function(n,e){var r=function(n){return n.a}(n),t=function(n){var e=n.a,t=n.b,o=n.c;return e>=0&&0>y(e,r)&&t>=0&&0>y(t,r)&&o>=0&&0>y(o,r)};return u(Tm,t,e)?{C:e,an:n}:{C:u(Lm,t,e),an:n}})),wm=t((function(n,e,r){return{$:3,a:n,b:e,c:r}}))({dr:1,dA:3,d5:4}),Sm=r((function(n,e){var r=e;return L(D(n.bD,n.bE,n.a5),D(r.bD,r.bE,r.a5))})),Nm=r((function(n,e){n:for(;;){if(-2===e.$)return kr;var r=e.c,t=e.d,o=e.e;switch(u(Lo,n,e.b)){case 0:n=n,e=t;continue n;case 1:return Br(r);default:n=n,e=o;continue n}}})),Em=f(ts,0,0,0),$m=i((function(n,e,r,t,o,a){var i=a.a,c=a.b,l=a.c,f=u(Nm,u(Sm,n,e),o);if(f.$){var s={o:Em,b2:om(e)},d={o:Em,b2:om(n)},m=l+1;return D(u(Tr,D(r,l,m),u(Tr,D(r,m,t),i)),u(Tr,s,u(Tr,d,c)),l+2)}return D(u(Tr,D(r,f.a,t),i),c,l)})),zm=a((function(n,e,r,t,o){for(;;){if(!r.b)return L(o.a,Kr(o.b));var a=r.a,i=a.a,c=a.b,l=r.b,u=n(a.c),f=n(c),s=n(i),d=t+2,v=t+1,b=n,p=e,g=l,h=t+3,x=m($m,u,s,d,t,e,m($m,f,u,v,d,e,m($m,s,f,t,v,e,o)));n=b,e=p,r=g,t=h,o=x}})),_m=a((function(n,e,r,t,o){for(;;){if(!e.b)return D(t,o,r);var a=e.a,i=a.a,c=a.b,l=e.b,s=n(a.c),d=n(c),m=n(i),v=r+2,b=r+1,p=r,g=f(wo,u(Sm,m,s),v,f(wo,u(Sm,s,d),b,f(wo,u(Sm,d,m),p,o)));n=n,e=l,r+=3,t=u(Tr,D(p,b,v),t),o=g}})),Am=t((function(n,e,r){var o,a=u(Vo,(function(n){var e=n.a,r=n.b,a=n.c;return s(bm,t((function(n,e,r){return D(n,e,r)})),u(Pm,e,o),u(Pm,r,o),u(Pm,a,o))}),vm(o=r)),i=f(jt,mm(e),N,a),c=d(_m,e,a,0,N,Co),l=d(zm,e,c.b,a,0,D(c.a,N,c.c)),m=l.a,v=l.b,b=v.b?S(i,v):i;return f(dm,n,u(Dm,ym(b),m),u(wm,b,m))})),Rm=function(n){return{C:u(Wt,(function(n){return D(3*n,3*n+1,3*n+2)}),u(Gr,0,Or(n)-1)),an:ym(Bl(u(Wt,(function(n){return z([n.a,n.b,n.c])}),n)))}},Vm=function(n){switch(n.$){case 0:return sm;case 1:case 2:return f(Am,n.a,zt,Rm(u(Wt,em,n.b)));case 3:return f(Am,n.a,zt,n.b);case 4:case 5:case 6:case 7:return f(Am,n.a,(function(n){return n.b2}),n.b);case 8:case 9:default:return sm}},Fm=Vm(fm),Bm={$:0},km=Bm,jm=r((function(n,e){return{$:1,a:n,b:e}})),Wm={src:"\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        void main () {\n            gl_FragColor = texture2D(colorTexture, interpolatedUv);\n        }\n    ",attributes:{},uniforms:{colorTexture:"bN"}},Im=function(n){return{$:5,a:n}},Hm=Im(1029),Um=Im(1028),Om=t((function(n,e,r){return 1===e?u(Tr,n?Hm:Um,r):r})),Ym={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute mediump vec2 uv;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedUv = uv;\n        }\n    ",attributes:{position:"b2",uv:"L"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},qm=o((function(n,e,r,t){return u(jm,e,l((function(e,o,a,i,c,l,u,s){return d(hs,f(Om,i,t,s),Ym,Wm,r,{bN:n,b:a,c:o,d:l,e:e,f:c})})))})),Gm={src:"\n        precision lowp float;\n        \n        uniform lowp vec3 constantColor;\n        \n        void main () {\n            gl_FragColor = vec4(constantColor, 1.0);\n        }\n    ",attributes:{},uniforms:{constantColor:"aC"}},Xm={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{position:"b2"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Jm=o((function(n,e,r,t){return u(jm,e,l((function(e,o,a,i,c,l,u,s){return d(hs,f(Om,i,t,s),Xm,Gm,r,{aC:n,b:a,c:o,d:l,e:e,f:c})})))})),Km=r((function(n,e){return{$:3,a:n,b:e}})),Qm={src:"\n        precision lowp float;\n        \n        uniform lowp vec3 constantColor;\n        uniform lowp float pointRadius;\n        uniform highp mat4 sceneProperties;\n        \n        float pointAlpha(float pointRadius, vec2 pointCoord) {\n            float pointSize = 2.0 * pointRadius;\n            float x = (pointSize + 2.0) * (pointCoord.s - 0.5);\n            float y = (pointSize + 2.0) * (pointCoord.t - 0.5);\n            float r = sqrt(x * x + y * y);\n            float innerRadius = pointRadius;\n            float outerRadius = pointRadius + 1.0;\n            if (r > outerRadius) {\n                return 0.0;\n            } else if (r > innerRadius) {\n                return outerRadius - r;\n            } else {\n                return 1.0;\n            }\n        }\n        \n        void main () {\n            float supersampling = sceneProperties[3][0];\n            float alpha = pointAlpha(pointRadius * supersampling, gl_PointCoord);\n            gl_FragColor = vec4(constantColor, alpha);\n        }\n    ",attributes:{},uniforms:{constantColor:"aC",pointRadius:"b1",sceneProperties:"e"}},Zm={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform lowp float pointRadius;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            float supersampling = sceneProperties[3][0];\n            gl_PointSize = 2.0 * pointRadius * supersampling + 2.0;\n        }\n    ",attributes:{position:"b2"},uniforms:{modelMatrix:"b",modelScale:"c",pointRadius:"b1",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},nv=o((function(n,e,r,t){return u(Km,r,l((function(r,o,a,i,c,l,u,f){return d(hs,f,Zm,Qm,t,{aC:n,b:a,c:o,b1:e,d:l,e:r,f:c})})))})),ev={src:"\n        precision mediump float;\n        \n        uniform mediump vec3 emissiveColor;\n        uniform highp mat4 sceneProperties;\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{emissiveColor:"aR",sceneProperties:"e"}},rv=Mr,tv=a((function(n,e,r,t,o){return u(jm,r,l((function(r,a,i,c,l,s,m,v){return d(hs,f(Om,c,o,v),Xm,ev,t,{aR:u(rv,e,n),b:i,c:a,d:s,e:r,f:l})})))})),ov={src:"\n        precision mediump float;\n        \n        uniform mediump vec3 emissiveColor;\n        uniform lowp float pointRadius;\n        uniform highp mat4 sceneProperties;\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        float pointAlpha(float pointRadius, vec2 pointCoord) {\n            float pointSize = 2.0 * pointRadius;\n            float x = (pointSize + 2.0) * (pointCoord.s - 0.5);\n            float y = (pointSize + 2.0) * (pointCoord.t - 0.5);\n            float r = sqrt(x * x + y * y);\n            float innerRadius = pointRadius;\n            float outerRadius = pointRadius + 1.0;\n            if (r > outerRadius) {\n                return 0.0;\n            } else if (r > innerRadius) {\n                return outerRadius - r;\n            } else {\n                return 1.0;\n            }\n        }\n        \n        void main () {\n            vec4 color = toSrgb(emissiveColor, sceneProperties);\n            float supersampling = sceneProperties[3][0];\n            float alpha = pointAlpha(pointRadius * supersampling, gl_PointCoord);\n            gl_FragColor = vec4(color.rgb, alpha);\n        }\n    ",attributes:{},uniforms:{emissiveColor:"aR",pointRadius:"b1",sceneProperties:"e"}},av=a((function(n,e,r,t,o){return u(Km,t,l((function(t,a,i,c,l,f,s,m){return d(hs,m,Zm,ov,o,{aR:u(rv,e,n),b:i,c:a,b1:r,d:f,e:t,f:l})})))})),iv={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 materialColor;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{enabledLights:"R",lights12:"bm",lights34:"bV",lights56:"bW",lights78:"bX",materialColor:"cB",sceneProperties:"e",viewMatrix:"f"}},cv={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n        }\n    ",attributes:{normal:"o",position:"b2"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},lv=o((function(n,e,r,t){return u(jm,e,l((function(e,o,a,i,c,l,u,s){var m=u.a,v=u.b;return d(hs,f(Om,i,t,s),cv,iv,r,{R:v,bm:m.bm,bV:m.bV,bW:m.bW,bX:m.bX,cB:n,b:a,c:o,d:l,e:e,f:c})})))})),uv={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D materialColorTexture;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n            vec3 materialColor = fromSrgb(texture2D(materialColorTexture, interpolatedUv).rgb);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{enabledLights:"R",lights12:"bm",lights34:"bV",lights56:"bW",lights78:"bX",materialColorTexture:"cC",normalMapTexture:"aY",sceneProperties:"e",useNormalMap:"a3",viewMatrix:"f"}},fv={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        attribute mediump vec2 uv;\n        attribute highp vec3 tangent;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getWorldTangent(vec3 modelTangent, vec4 modelScale, mat4 modelMatrix) {\n            return (modelMatrix * vec4(safeNormalize(modelScale.xyz * modelTangent), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = uv;\n            interpolatedTangent = getWorldTangent(tangent, modelScale, modelMatrix);\n        }\n    ",attributes:{normal:"o",position:"b2",tangent:"eq",uv:"L"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},sv=i((function(n,e,r,t,o,a){return u(jm,t,l((function(t,i,c,l,u,s,m,v){var b=m.a,p=m.b;return d(hs,f(Om,l,a,v),fv,uv,o,{R:p,bm:b.bm,bV:b.bV,bW:b.bW,bX:b.bX,cC:n,b:c,c:i,aY:e,d:s,e:t,a3:r,f:u})})))})),dv={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D baseColorTexture;\n        uniform lowp vec4 constantBaseColor;\n        uniform mediump sampler2D roughnessTexture;\n        uniform lowp vec2 constantRoughness;\n        uniform mediump sampler2D metallicTexture;\n        uniform lowp vec2 constantMetallic;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getFloatValue(sampler2D texture, vec2 uv, vec2 constantValue) {\n            if (constantValue.y == 1.0) {\n                return constantValue.x;\n            } else {\n                vec4 textureColor = texture2D(texture, uv);\n                return dot(textureColor, vec4(0.2126, 0.7152, 0.0722, 0.0));\n            }\n        }\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 baseColor = fromSrgb(texture2D(baseColorTexture, interpolatedUv).rgb) * (1.0 - constantBaseColor.w) + constantBaseColor.rgb * constantBaseColor.w;\n            float roughness = getFloatValue(roughnessTexture, interpolatedUv, constantRoughness);\n            float metallic = getFloatValue(metallicTexture, interpolatedUv, constantMetallic);\n        \n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{baseColorTexture:"ce",constantBaseColor:"ci",constantMetallic:"cj",constantRoughness:"ck",enabledLights:"R",lights12:"bm",lights34:"bV",lights56:"bW",lights78:"bX",metallicTexture:"cF",normalMapTexture:"aY",roughnessTexture:"c0",sceneProperties:"e",useNormalMap:"a3",viewMatrix:"f"}},mv={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 baseColor;\n        uniform lowp float roughness;\n        uniform lowp float metallic;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{baseColor:"cd",enabledLights:"R",lights12:"bm",lights34:"bV",lights56:"bW",lights78:"bX",metallic:"cE",roughness:"c$",sceneProperties:"e",viewMatrix:"f"}},vv=i((function(n,e,r,t,o,a){return u(jm,t,l((function(t,i,c,l,u,s,m,v){var b=m.a,p=m.b;return d(hs,f(Om,l,a,v),cv,mv,o,{cd:n,R:p,bm:b.bm,bV:b.bV,bW:b.bW,bX:b.bX,cE:r,b:c,c:i,d:s,c$:e,e:t,f:u})})))})),bv=r((function(n,e){return{$:1,a:n,b:e}})),pv=r((function(n,e){return e.$?L(e.a.B,1):L(n,0)})),gv=s(Qf,0,0,0,0),hv=r((function(n,e){var r;return e.$?L(e.a.B,gv):L(n,s(Qf,nd(r=e.a),ed(r),rd(r),1))})),xv=r((function(n,e){var r,t=L(n,e);return t.a.$?u(bv,L(r=t.a.a.B,gv),u(pv,r,e)):t.b.$?u(bv,u(hv,r=t.b.a.B,n),u(pv,r,e)):{$:0,a:t.a.a}})),Cv=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),Pv=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),Mv=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),yv=u(Ps,0,0),Tv=r((function(n,e){return e.$?L(e.a.B,yv):L(n,u(Ps,e.a,1))})),Lv=o((function(n,e,r,t){var o,a=s(Mv,n,e,r,t);return a.a.$?s(Pv,L(o=a.a.a.B,gv),u(Tv,o,e),u(Tv,o,r),u(pv,o,t)):a.b.$?s(Pv,u(hv,o=a.b.a.B,n),L(o,yv),u(Tv,o,r),u(pv,o,t)):a.c.$?s(Pv,u(hv,o=a.c.a.B,n),u(Tv,o,e),L(o,yv),u(pv,o,t)):a.d.$?s(Pv,u(hv,o=a.d.a.B,n),u(Tv,o,e),u(Tv,o,r),L(o,1)):f(Cv,a.a.a,a.b.a,a.c.a)})),Dv={src:"\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        uniform mediump float backlight;\n        uniform highp mat4 sceneProperties;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            vec3 emissiveColor = fromSrgb(texture2D(colorTexture, interpolatedUv).rgb) * backlight;\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{backlight:"ca",colorTexture:"bN",sceneProperties:"e"}},wv=a((function(n,e,r,t,o){return u(jm,r,l((function(r,a,i,c,l,u,s,m){return d(hs,f(Om,c,o,m),Ym,Dv,t,{ca:e,bN:n,b:i,c:a,d:u,e:r,f:l})})))})),Sv={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        attribute mediump vec2 uv;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = uv;\n            interpolatedTangent = vec3(0.0, 0.0, 0.0);\n        }\n    ",attributes:{normal:"o",position:"b2",uv:"L"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Nv=o((function(n,e,r,t){return u(jm,e,l((function(e,o,a,i,c,l,u,s){var m=u.a,v=u.b;return d(hs,f(Om,i,t,s),Sv,uv,r,{R:v,bm:m.bm,bV:m.bV,bW:m.bW,bX:m.bX,cC:n,b:a,c:o,aY:n,d:l,e:e,a3:0,f:c})})))})),Ev=function(n){return e(9,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return n(e,r,t,o,a,i,c,l,u)}}}}}}}}}))}((function(n,e,r,t,o,a,i,c,s){return u(jm,i,l((function(i,l,u,m,v,b,p,g){var h=p.a,x=p.b;return d(hs,f(Om,m,s,g),Sv,dv,c,{ce:n,ci:e,cj:a,ck:t,R:x,bm:h.bm,bV:h.bV,bW:h.bW,bX:h.bX,cF:o,b:u,c:l,aY:n,d:b,c0:r,e:i,a3:0,f:v})})))})),$v=t((function(n,e,r){return r>.5?e+(1-r)*(n-e):n+r*(e-n)})),zv=function(n){return f(af,function(n){return f($v,n.d1,n.d_,.5)}(n),function(n){return f($v,n.d2,n.d$,.5)}(n),function(n){return f($v,n.d3,n.d0,.5)}(n))},_v=function(n){var e=js(n),r=e.a,t=e.b,o=e.c;return{eH:zv(n),eW:r/2,eX:t/2,eY:o/2}},Av=r((function(n,e){switch(n.$){case 0:if(n.b.$){var r=n.b.a.B;switch(e.$){case 0:case 1:case 2:case 3:case 4:return km;case 5:case 6:case 7:return o=e.c,a=e.d,s(qm,r,_v(R=e.a),o,a);case 8:case 9:default:return km}}else{var t=n.b.a;switch(e.$){case 0:return km;case 1:var o=e.c,a=e.d;return s(Jm,t,_v(R=e.a),o,a);case 2:case 3:case 4:return o=e.c,a=e.d,s(Jm,t,_v(R=e.a),o,a);case 5:case 6:case 7:return o=e.c,a=e.d,s(Jm,t,_v(R=e.a),o,a);case 8:case 9:return o=e.c,s(Jm,t,_v(R=e.a),o,0);default:return o=e.d,s(nv,t,e.b,_v(R=e.a),o)}}case 1:if(n.b.$)switch(r=n.b.a.B,c=n.c,e.$){case 0:case 1:case 2:case 3:case 4:return km;case 5:case 6:case 7:return o=e.c,a=e.d,d(wv,r,c,_v(R=e.a),o,a);case 8:case 9:default:return km}else{var i=n.b.a,c=n.c;switch(e.$){case 0:return km;case 1:case 2:case 3:case 4:case 5:case 6:case 7:return o=e.c,a=e.d,d(tv,i,c,_v(R=e.a),o,a);case 8:case 9:return o=e.c,d(tv,i,c,_v(R=e.a),o,0);default:return o=e.d,d(av,i,c,e.b,_v(R=e.a),o)}}case 2:var v=u(xv,n.b,n.c);if(v.$){var b=v.a.a,p=v.b,g=p.a,h=p.b;switch(e.$){case 0:case 1:case 2:case 3:case 4:case 5:return km;case 6:return o=e.c,C=e.d,s(Nv,b,_v(R=e.a),o,C);case 7:return o=e.c,C=e.d,m(sv,b,g,h,_v(R=e.a),o,C);case 8:case 9:default:return km}}else{var x=v.a;switch(e.$){case 0:case 1:return km;case 2:o=e.c;var C=e.d;return s(lv,x,_v(R=e.a),o,C);case 3:return km;case 4:return o=e.c,C=e.d,s(lv,x,_v(R=e.a),o,C);case 5:return km;case 6:case 7:return o=e.c,C=e.d,s(lv,x,_v(R=e.a),o,C);case 8:case 9:default:return km}}default:var P=s(Lv,n.b,n.c,n.d,n.e);if(P.$){var M=P.a,y=M.a,T=M.b,L=P.b,D=L.a,w=L.b,S=P.c,N=S.a,E=S.b,$=P.d;switch(g=$.a,h=$.b,e.$){case 0:case 1:case 2:case 3:case 4:case 5:return km;case 6:return o=e.c,a=e.d,function(n,e,r,t,o,a,i,c,l,u){return 9===n.a?n.f(e,r,t,o,a,i,c,l,u):n(e)(r)(t)(o)(a)(i)(c)(l)(u)}(Ev,y,T,D,w,N,E,_v(R=e.a),o,a);case 7:return R=e.a,o=e.c,a=e.d,function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(s){return function(m){return function(v){return u(jm,s,l((function(l,u,s,b,p,g,h,x){var C=h.a,P=h.b;return d(hs,f(Om,b,v,x),fv,dv,m,{ce:n,ci:e,cj:a,ck:t,R:P,bm:C.bm,bV:C.bV,bW:C.bW,bX:C.bX,cF:o,b:s,c:u,aY:i,d:g,c0:r,e:l,a3:c,f:p})})))}}}}}}}}}}}(y)(T)(D)(w)(N)(E)(g)(h)(_v(R))(o)(a);case 8:case 9:default:return km}}else{var z=P.a,_=P.b,A=P.c;switch(e.$){case 0:case 1:return km;case 2:return o=e.c,a=e.d,m(vv,z,_,A,_v(R=e.a),o,a);case 3:return km;case 4:return o=e.c,a=e.d,m(vv,z,_,A,_v(R=e.a),o,a);case 5:return km;case 6:return o=e.c,a=e.d,m(vv,z,_,A,_v(R=e.a),o,a);case 7:var R;return o=e.c,a=e.d,m(vv,z,_,A,_v(R=e.a),o,a);case 8:case 9:default:return km}}}})),Rv=function(n){return n.bD},Vv=function(n){return n.bE},Fv=function(n){return n.a5},Bv=function(n){var e=n,r=Fv(e.dg),t=Vv(e.dg),o=Rv(e.dg),a=Fv(e.df),i=Vv(e.df),c=Rv(e.df),l=Fv(e.de),u=Vv(e.de),f=Rv(e.de);return f*i*r+u*a*o+l*c*t-l*i*o-u*c*r-f*a*t>0},kv=r((function(n,e){return{$:5,a:n,b:e}})),jv=r((function(n,e){var r=e;switch(r.$){case 0:return km;case 5:var t=r.b;return u(kv,u(as,r.a,n),t);case 1:case 3:case 2:default:return u(kv,n,r)}})),Wv=r((function(n,e){return u(jv,function(n){var e=Zl(n),r=tu(n),t=ru(n),o=eu(n);return{dB:Bv(n),q:o.bD,r:o.bE,s:o.a5,t:t.bD,u:t.bE,v:t.a5,w:r.bD,x:r.bE,y:r.a5,H:e.bD,I:e.bE,J:e.a5,b6:1}}(n),e)})),Iv=function(n){return{$:2,a:n}},Hv=r((function(n,e){var r=n.a,t=n.b,o=n.c,a=e.eH;return{eH:{bD:r*a.bD,bE:t*a.bE,a5:o*a.a5},eW:r*e.eW,eX:t*e.eX,eY:o*e.eY}})),Uv=function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){var f,s,d={bD:(s=t)[0],bE:s[1],a5:s[2],ev:s[3]},m=(f={ev:d.ev,bD:d.bD*n.a,bE:d.bE*n.b,a5:d.a5*n.c},new Float64Array([f.bD,f.bE,f.a5,f.ev]));return b(e,r,m,o,a,i,c,l,u)}}}}}}}}}},Ov=r((function(n,e){switch(e.$){case 0:return Bm;case 5:return u(kv,e.a,u(Ov,n,e.b));case 1:var r=e.b;return u(jm,u(Hv,n,e.a),u(Uv,n,r));case 3:return e;case 2:return Iv(u(Uv,n,r=e.a));default:var t=e.a;return td(u(Wt,Ov(n),t))}})),Yv=r((function(n,e){return u(Ov,n,e)})),qv={src:"\n        precision lowp float;\n        \n        void main () {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        }\n    ",attributes:{},uniforms:{}},Gv=f(Ls,{cA:0,cY:0,dd:15},{bf:Ns,bu:bs,bF:Ns,bG:7683},{bf:Ns,bu:bs,bF:Ns,bG:7682}),Xv=f(Ls,{cA:0,cY:0,dd:15},{bf:Ns,bu:bs,bF:Ns,bG:7682},{bf:Ns,bu:bs,bF:Ns,bG:7683}),Jv=r((function(n,e){return u(Tr,n?Xv:Gv,e)})),Kv={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 shadowVertexPosition(vec3 position, vec3 normal, mat4 shadowLight, vec4 modelScale, mat4 modelMatrix, mat4 viewMatrix, mat4 projectionMatrix, mat4 sceneProperties) {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            vec3 worldNormal = getWorldNormal(normal, vec4(modelScale.xyz, 1.0), modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 directionToLight = getDirectionToLight(worldPosition.xyz, xyz_type, rgb_parameter);\n            vec3 offset = vec3(0.0, 0.0, 0.0);\n            float sceneDiameter = sceneProperties[3][1];\n            if (dot(directionToLight, worldNormal) <= 0.0) {\n                offset = -sceneDiameter * directionToLight;\n            } else {\n                offset = -0.001 * sceneDiameter * directionToLight;\n            }\n            vec4 offsetPosition = worldPosition + vec4(offset, 0.0);\n            return projectionMatrix * (viewMatrix * offsetPosition);\n        }\n        \n        void main () {\n            gl_Position = shadowVertexPosition(\n                position,\n                normal,\n                shadowLight,\n                modelScale,\n                modelMatrix,\n                viewMatrix,\n                projectionMatrix,\n                sceneProperties\n            );\n        }\n    ",attributes:{normal:"o",position:"b2"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"b7",viewMatrix:"f"}},Qv=function(n){var e=function(n){if(n.$){var e=n.c;return Br(l((function(n,r,t,o,a,i,c,l){return d(hs,u(Jv,o,l),Kv,qv,e,{b:t,c:r,d:i,e:n,b7:c,f:a})})))}return kr}(n);return e.$?km:Iv(e.a)},Zv=o((function(n,e,r,t){var o,a=u(Av,r,fm),i=(o=L(n,e)).a?o.b?ad(z([a,Qv(Fm)])):a:o.b?Qv(Fm):km,c=Ql(t),l=c.a,f=c.b,s=c.c;return u(Wv,Kl(t),u(Yv,D(l,f,s),i))})),nb=r((function(n,e){return s(Zv,!0,!0,n,e)})),eb=function(n){return{$:0,a:n}},rb=r((function(n,e){return{$:0,a:n,b:e}})),tb=function(n){return Mu(n)},ob=r((function(n,e){return e/n})),ab=function(n){var e=n;return{bD:Mu(e),bE:yu(e)}},ib=r((function(n,e){var r=n.b2;return u(Tr,{o:am(n.o),b2:om(r)},e)})),cb=c((function(n,e,r,t,o,a,i){for(;;){if(!i.b)return nm({d_:e,d$:t,d0:a,d1:n,d2:r,d3:o});var c=i.a,l=i.b,f=rd(c.b2),s=ed(c.b2),d=nd(c.b2);n=u(qs,n,d),e=u(st,e,d),r=u(qs,r,s),t=u(st,t,s),o=u(qs,o,f),a=u(st,a,f),i=l}})),lb=r((function(n,e){var r=rd(n.b2),t=ed(n.b2),o=nd(n.b2);return v(cb,o,o,t,t,r,r,e)})),ub=r((function(n,e){var r=n.df,t=n.de;return{bD:e.bD*t.bD+e.bE*r.bD,bE:e.bD*t.bE+e.bE*r.bE,a5:e.bD*t.a5+e.bE*r.a5}})),fb=function(n){return yu(n)},sb=function(n){return 6.283185307179586*n},db={cJ:Au,de:Vu,df:ju},mb=(Zo=u(ob,72,sb(1)),na=Hu,ea=of,ta=f(af,0,0,ra=u(sd,.5,1)),aa=f(af,0,0,oa=u(sd,-.5,1)),Xd(function(n){var e=f(Dr,ib,N,Cm(n));if(e.b){var r=e.a,t=e.b,o=u(wm,e,vm(n));return s(Ud,u(lb,r,t),n,o,0)}return Jd}(Rm(Bl(u(Wt,(function(n){var e=u(sd,n,Zo),r=u(ub,db,ab(e)),t=u(sd,tb(e),1),o=u(sd,fb(e),1),a=f(af,t,o,ra),i=f(af,t,o,oa),c=u(sd,u(nc,72,n+1),Zo),l=u(ub,db,ab(c)),s=u(sd,tb(c),1),d=u(sd,fb(c),1),m=f(af,s,d,oa),v=f(af,s,d,ra);return z([D({o:ea,b2:aa},{o:ea,b2:m},{o:ea,b2:i}),D({o:r,b2:i},{o:l,b2:m},{o:l,b2:v}),D({o:r,b2:i},{o:l,b2:v},{o:r,b2:a}),D({o:na,b2:ta},{o:na,b2:a},{o:na,b2:v})])}),u(Gr,0,71))))))),vb=Vm(mb),bb=function(n){return n.cJ},pb=o((function(n,e,r,t){var o,a=function(n){var e=function(n){return n.eL}(n),r=Vf(e),t=r.a,o=r.b;return{cJ:bb(n),de:t,df:o,dg:e}}(function(n){return n.k}(t)),i=u(Av,r,mb),c=(o=L(n,e)).a?o.b?ad(z([i,Qv(vb)])):i:o.b?Qv(vb):km,l=function(n){return n.fj}(t),f=function(n){return n.e5}(t);return u(Wv,a,u(Yv,D(l,l,f),c))})),gb=r((function(n,e){return s(pb,!0,!0,n,e)})),hb={src:"\n        precision highp float;\n        \n        attribute lowp float triangleVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 triangleVertexPositions;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleVertex), triangleVertexPositions, position, normal);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{triangleVertex:"c6"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",triangleVertexPositions:"bA",viewMatrix:"f"}},xb={src:"\n        precision highp float;\n        \n        attribute lowp float triangleVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 triangleVertexPositions;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleVertex), triangleVertexPositions, position, normal);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n        }\n    ",attributes:{triangleVertex:"c6"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",triangleVertexPositions:"bA",viewMatrix:"f"}},Cb=function(n){var e=n.a,r=n.b,t=n.c;return is({dJ:e.bD,dK:r.bD,dL:t.bD,dM:0,dN:e.bE,dO:r.bE,dP:t.bE,dQ:0,dR:e.a5,dS:r.a5,dT:t.a5,dU:0,dV:0,dW:0,dX:0,dY:0})},Pb=um(z([D({c6:0},{c6:1},{c6:2})])),Mb=r((function(n,e){var r=rm(e),t=_v(r);switch(n.$){case 0:if(n.b.$)return km;var o=n.b.a;return u(jm,t,l((function(n,r,t,a,i,c,l,u){return d(hs,f(Om,a,0,u),hb,Gm,Pb,{aC:o,b:t,c:r,d:c,e:n,bA:Cb(e),f:i})})));case 1:if(n.b.$)return km;var a=n.b.a,i=n.c;return u(jm,t,l((function(n,r,t,o,c,l,s,m){return d(hs,f(Om,o,0,m),hb,ev,Pb,{aR:u(rv,i,a),b:t,c:r,d:l,e:n,bA:Cb(e),f:c})})));case 2:var c=u(xv,n.b,n.c);if(c.$)return km;var m=c.a;return u(jm,t,l((function(n,r,t,o,a,i,c,l){var u=c.a,s=c.b;return d(hs,f(Om,o,0,l),xb,iv,Pb,{R:s,bm:u.bm,bV:u.bV,bW:u.bW,bX:u.bX,cB:m,b:t,c:r,d:i,e:n,bA:Cb(e),f:a})})));default:var v=s(Lv,n.b,n.c,n.d,n.e);if(v.$)return km;var b=v.a,p=v.b,g=v.c;return u(jm,t,l((function(n,r,t,o,a,i,c,l){var u=c.a,s=c.b;return d(hs,f(Om,o,0,l),xb,mv,Pb,{cd:b,R:s,bm:u.bm,bV:u.bV,bW:u.bW,bX:u.bX,cE:g,b:t,c:r,d:i,c$:p,e:n,bA:Cb(e),f:a})})))}})),yb=(ia=z([{a2:u(Ps,0,1)},{a2:u(Ps,1,1)},{a2:u(Ps,2,1)},{a2:u(Ps,0,-1)},{a2:u(Ps,1,-1)},{a2:u(Ps,2,-1)}]),ca=z([D(0,1,2),D(3,5,4),D(3,4,1),D(3,1,0),D(4,5,2),D(4,2,1),D(5,3,0),D(5,0,2)]),u(wm,ia,ca)),Tb={src:"\n        precision highp float;\n        \n        attribute highp vec2 triangleShadowVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        uniform highp mat4 triangleVertexPositions;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 shadowVertexPosition(vec3 position, vec3 normal, mat4 shadowLight, vec4 modelScale, mat4 modelMatrix, mat4 viewMatrix, mat4 projectionMatrix, mat4 sceneProperties) {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            vec3 worldNormal = getWorldNormal(normal, vec4(modelScale.xyz, 1.0), modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 directionToLight = getDirectionToLight(worldPosition.xyz, xyz_type, rgb_parameter);\n            vec3 offset = vec3(0.0, 0.0, 0.0);\n            float sceneDiameter = sceneProperties[3][1];\n            if (dot(directionToLight, worldNormal) <= 0.0) {\n                offset = -sceneDiameter * directionToLight;\n            } else {\n                offset = -0.001 * sceneDiameter * directionToLight;\n            }\n            vec4 offsetPosition = worldPosition + vec4(offset, 0.0);\n            return projectionMatrix * (viewMatrix * offsetPosition);\n        }\n        \n        void main () {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleShadowVertex.x), triangleVertexPositions, position, normal);\n            normal *= triangleShadowVertex.y;\n            gl_Position = shadowVertexPosition(\n                position,\n                normal,\n                shadowLight,\n                modelScale,\n                modelMatrix,\n                viewMatrix,\n                projectionMatrix,\n                sceneProperties\n            );\n        }\n    ",attributes:{triangleShadowVertex:"a2"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"b7",triangleVertexPositions:"bA",viewMatrix:"f"}},Lb=function(n){return Iv(l((function(e,r,t,o,a,i,c,l){return d(hs,u(Jv,o,l),Tb,qv,yb,{b:t,c:r,d:i,e:e,b7:c,bA:Cb(n),f:a})})))},Db=o((function(n,e,r,t){var o=u(Mb,r,t),a=L(n,e);return a.a?a.b?ad(z([o,Lb(t)])):o:a.b?Lb(t):km})),wb=r((function(n,e){return s(Db,!0,!0,n,e)})),Sb=r((function(n,e){var r=ff(e),t=ff(n),o=uf(e),a=uf(n),i=lf(e),c=lf(n);return{d_:u(Ys,c,i),d$:u(Ys,a,o),d0:u(Ys,t,r),d1:u(Gs,c,i),d2:u(Gs,a,o),d3:u(Gs,t,r)}})),Nb={src:"\n        precision highp float;\n        \n        attribute lowp float lineSegmentVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp vec3 lineSegmentStartPoint;\n        uniform highp vec3 lineSegmentEndPoint;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = (1.0 - lineSegmentVertex) * lineSegmentStartPoint + lineSegmentVertex * lineSegmentEndPoint;\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{lineSegmentVertex:"dI"},uniforms:{lineSegmentEndPoint:"dG",lineSegmentStartPoint:"dH",modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Eb=r((function(n,e){return{$:1,a:n,b:e}}))({dr:2,dA:0,d5:1})(z([L({dI:0},{dI:1})])),$b=r((function(n,e){var r,t=u(Sb,(r=e).a,r.b),o=_v(t),a=e.a,i=e.b;switch(n.$){case 0:if(n.b.$)return km;var c=n.b.a;return u(jm,o,l((function(n,e,r,t,o,l,u,f){return d(hs,f,Nb,Gm,Eb,{aC:c,dG:om(i),dH:om(a),b:r,c:e,d:l,e:n,f:o})})));case 1:if(n.b.$)return km;c=n.b.a;var f=n.c;return u(jm,o,l((function(n,e,r,t,o,l,s,m){return d(hs,m,Nb,ev,Eb,{aR:u(rv,f,c),dG:om(i),dH:om(a),b:r,c:e,d:l,e:n,f:o})})));case 2:default:return km}})),zb=r((function(n,e){return u($b,n,e)})),_b=t((function(n,e,r){return{$:2,a:n,b:e,c:r}})),Ab=function(n){return f(Ed,0,1,n>.04045?u($i,(n+.055)/1.055,2.4):n/12.92)},Rb=function(n){return f(_b,0,eb(function(n){var e=tc(n),r=e.co,t=e.cf;return f(ts,Ab(e.cX),Ab(r),Ab(t))}(n)),eb(0))},Vb=r((function(n,e){return n/e})),Fb=a((function(n,e,r,t,o){for(;;){var a=t(e/r),i=u(Tr,a,o);if(P(e,n))return i;n=n,e-=1,r=r,t=t,o=i}})),Bb=r((function(n,e){return 1>n?N:d(Fb,0,n,n,e,N)})),kb=r((function(n,e){var r=n.b2,t=n.L,o=t.a,a=t.b;return u(Tr,{o:am(n.o),b2:om(r),L:u(Ps,o,a)},e)})),jb=r((function(n,e){var r=n,t=e,o=Mu(t);return{bD:o*Mu(r),bE:o*yu(r),a5:yu(t)}})),Wb=(la=u(Gr,0,71),ua=u(Bb,72,u($v,0,sb(1))),fa=rt(36),sa=u(Gr,0,fa-1),da=u(Bb,fa,u($v,Tf(90),Tf(-90))),ma=ym(Bl(u(Wt,(function(n){return u(Wt,(function(e){return{o:u(jb,n,e),b2:f(af,u(sd,tb(e)*tb(n),1),u(sd,tb(e)*fb(n),1),u(sd,fb(e),1)),L:L(u(Vb,n,sb(1)),u(Vb,u(Js,Tf(90),e),Tf(180)))}}),da)}),ua))),va=r((function(n,e){return n*(fa+1)+e})),ba=Bl(u(Wt,(function(n){return Bl(u(Wt,(function(e){var r=u(va,n+1,e),t=u(va,n,e),o=u(va,n+1,e+1),a=u(va,n,e+1);return z([D(a,o,r),D(a,r,t)])}),sa))}),la)),Xd(function(n){var e=f(Dr,kb,N,Cm(n));if(e.b){var r=e.a,t=e.b,o=u(wm,e,vm(n));return s(Od,u(lb,r,t),n,o,0)}return Jd}(u(Dm,ma,ba)))),Ib=r((function(n,e){for(;;){var r=u(nc,144,2*n+3),t=u(nc,144,2*n+2),o=2*n+1,a=2*n,i=u(Tr,D(144,a,t),u(Tr,D(a,r,t),u(Tr,D(a,o,r),u(Tr,D(o,145,r),e))));if(!n)return i;n-=1,e=i}})),Hb=t((function(n,e,r){return r>.5?e+(1-r)*(n-e):n+r*(e-n)})),Ub=(pa=u(r((function(n,e){for(;;){var r=f(Hb,0,6.283185307179586,n/72),t=u(Tr,{bI:r,b_:0,b5:1},u(Tr,{bI:r,b_:1,b5:1},e));if(!n)return t;n-=1,e=t}})),71,z([{bI:0,b_:0,b5:0},{bI:0,b_:1,b5:0}])),u(wm,pa,u(Ib,71,N))),Ob={src:"\n        precision highp float;\n        \n        attribute highp float angle;\n        attribute highp float offsetScale;\n        attribute highp float radiusScale;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const lowp float kPerspectiveProjection = 0.0;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec3 perpendicularTo(vec3 d) {\n            float absX = abs(d.x);\n            float absY = abs(d.y);\n            float absZ = abs(d.z);\n            if (absX <= absY) {\n                if (absX <= absZ) {\n                    float scale = 1.0 / length(d.zy);\n                    return vec3(0.0, -d.z * scale, d.y * scale);\n                } else {\n                    float scale = 1.0 / length(d.xy);\n                    return vec3(-d.y * scale, d.x * scale, 0.0);\n                }\n            } else {\n                if (absY <= absZ) {\n                    float scale = 1.0 / length(d.xz);\n                    return vec3(d.z * scale, 0.0, -d.x * scale);\n                } else {\n                    float scale = 1.0 / length(d.xy);\n                    return vec3(-d.y * scale, d.x * scale, 0.0);\n                }\n            }\n        }\n        \n        void main () {\n            vec4 worldCenter = getWorldPosition(vec3(0.0, 0.0, 0.0), modelScale, modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 zDirection = getDirectionToLight(worldCenter.xyz, xyz_type, rgb_parameter);\n            vec3 xDirection = perpendicularTo(zDirection);\n            vec3 yDirection = cross(zDirection, xDirection);\n            float r = modelScale.x;\n            float adjustedRadius = r;\n            float zOffset = 0.0;\n            if (xyz_type.w == kPointLight) {\n                float distanceToLight = length(xyz_type.xyz - worldCenter.xyz);\n                float rSquared = r * r;\n                zOffset = rSquared / distanceToLight;\n                float zSquared = zOffset * zOffset;\n                adjustedRadius = sqrt(rSquared - zSquared) * radiusScale;\n            }\n            vec3 worldPosition =\n                worldCenter.xyz\n                    + zDirection * zOffset\n                    + xDirection * adjustedRadius * cos(angle)\n                    + yDirection * adjustedRadius * sin(angle);\n            vec3 directionToLight = getDirectionToLight(worldPosition, xyz_type, rgb_parameter);\n            float sceneDiameter = sceneProperties[3][1];\n            vec3 offset = -sceneDiameter * offsetScale * directionToLight;\n            vec4 offsetPosition = vec4(worldPosition + offset, 1.0);\n            gl_Position = projectionMatrix * (viewMatrix * offsetPosition);\n        }\n    ",attributes:{angle:"bI",offsetScale:"b_",radiusScale:"b5"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"b7",viewMatrix:"f"}},Yb=function(){return Iv(l((function(n,e,r,t,o,a,i,c){return d(hs,u(Jv,!0,c),Ob,qv,Ub,{aC:f(ts,0,0,1),b:r,c:e,d:a,e:n,b7:i,f:o})})))},qb=r((function(n,e){return u(jv,function(n){return{dB:!0,q:1,r:0,s:0,t:0,u:1,v:0,w:0,x:0,y:1,H:n.bD,I:n.bE,J:n.a5,b6:1}}(n),e)})),Gb=o((function(n,e,r,t){var o,a=u(Av,r,Wb),i=(o=L(n,e)).a?o.b?ad(z([a,Yb()])):a:o.b?Yb():km,c=du(t);return u(qb,u(Sf,Au,su(t)),u(Yv,D(c,c,c),i))})),Xb=r((function(n,e){return s(Gb,!0,!0,n,e)})),Jb=function(n){switch(n.$){case 0:var e=n.b;return z([u(nb,Rb(n.a),e)]);case 1:var r=n.b;return z([u(wb,Rb(n.a),r)]);case 3:var t=n.b;return z([u(Xb,Rb(n.a),t)]);case 2:var o=n.b;return z([u(gb,Rb(n.a),o)]);case 4:var a=n.b;return z([u(zb,(i=n.a,u(rb,0,eb(function(n){var e=tc(n);return f(ts,e.cX,e.co,e.cf)}(i)))),a)]);default:return u(kl,Jb,n.a)}var i},Kb=r((function(n,e){return function(n){var e,r=u(wd,n.fn,{cg:_d,eL:n.fu,cq:8e4}),t=Nd({cg:zd,cq:2e4,fy:n.fy}),o=Nd({cg:Dd,cq:15e3,fy:hd(n.fy)}),a=f(Wd,r,t,o);return function(n){return u(Ld,{ex:n.ex,dj:n.dj,eE:n.eE,dn:n.dn,dq:n.dq},z([{du:n.du,eQ:n.eQ,e7:n.e7,fx:n.fx,fD:n.fD}]))}({ex:(e=n.cl,{$:2,a:e}),dj:n.dj,eE:n.eE,dn:n.dn,dq:n.dq,du:n.du,eQ:1.2*u($i,2,15),e7:a,fx:Sd,fD:Dd})}({dj:n.eB,eE:n.eE,dn:.005,cl:n.cl,dq:L(zi(n.aa.dc),zi(n.aa.cp)),du:(r=e,u(kl,Jb,r)),fn:!0,fu:u(jb,n.ft,n.fv),fy:Uu});var r}));ga={Main:{init:s(zl,r((function(n){return u(Kb,{eB:Bi,eE:Wf({eR:{bD:u(yf,"camera x",n),bE:u(yf,"camera y",n),a5:u(yf,"camera z",n)},eU:{bD:0,bE:0,a5:0},fy:{bD:0,bE:1,a5:0}}),cl:n.cl,aa:n.aa,ft:-Ul(135),fv:-Ul(45)},z([u(Pu,-4,u(bf,Bi,D(40,40,1))),u(Pu,-.5,Cf(n))]))})),Vl,Rl,(function(){return{}}))(u(Ct,(function(n){return Lt({cl:n})}),u(Pt,"devicePixelRatio",Mt)))(0)}},n.Elm?function n(e,r){for(var t in r)t in e?"init"==t?C(6):n(e[t],r[t]):e[t]=r[t]}(n.Elm,ga):n.Elm=ga}(n);const e=n.Elm.Main.init({node:document.getElementById("elm-node"),flags:{devicePixelRatio:window.devicePixelRatio}});function r(n){const e=[];for(let r=0;r<n.length;r++)e.push({identifier:n[r].identifier,pageX:n[r].pageX,pageY:n[r].pageY});return e}window.addEventListener("touchstart",(n=>{e.ports.touchStart.send(r(n.changedTouches))})),window.addEventListener("touchmove",(n=>{e.ports.touchMove.send(r(n.changedTouches))})),window.addEventListener("touchend",(n=>{e.ports.touchEnd.send(r(n.changedTouches))})),window.addEventListener("touchcancel",(n=>{e.ports.touchCancel.send(r(n.changedTouches))}))}();
//# sourceMappingURL=index.57ab19fb.js.map
