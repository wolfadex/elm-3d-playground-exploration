!function(){var n={};!function(n){function e(n,e,r){return r.a=n,r.f=e,r}function r(n){return e(2,n,(function(e){return function(r){return n(e,r)}}))}function t(n){return e(3,n,(function(e){return function(r){return function(t){return n(e,r,t)}}}))}function o(n){return e(4,n,(function(e){return function(r){return function(t){return function(o){return n(e,r,t,o)}}}}))}function a(n){return e(5,n,(function(e){return function(r){return function(t){return function(o){return function(a){return n(e,r,t,o,a)}}}}}))}function i(n){return e(6,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return n(e,r,t,o,a,i)}}}}}}))}function c(n){return e(7,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return n(e,r,t,o,a,i,c)}}}}}}}))}function l(n){return e(8,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return n(e,r,t,o,a,i,c,l)}}}}}}}}))}function u(n,e,r){return 2===n.a?n.f(e,r):n(e)(r)}function f(n,e,r,t){return 3===n.a?n.f(e,r,t):n(e)(r)(t)}function s(n,e,r,t,o){return 4===n.a?n.f(e,r,t,o):n(e)(r)(t)(o)}function d(n,e,r,t,o,a){return 5===n.a?n.f(e,r,t,o,a):n(e)(r)(t)(o)(a)}function v(n,e,r,t,o,a,i){return 6===n.a?n.f(e,r,t,o,a,i):n(e)(r)(t)(o)(a)(i)}function m(n,e,r,t,o,a,i,c){return 7===n.a?n.f(e,r,t,o,a,i,c):n(e)(r)(t)(o)(a)(i)(c)}function b(n,e,r,t,o,a,i,c,l){return 8===n.a?n.f(e,r,t,o,a,i,c,l):n(e)(r)(t)(o)(a)(i)(c)(l)}var p=t((function(n,e,r){for(var t=Array(n),o=0;n>o;o++)t[o]=r(e+o);return t})),g=r((function(n,e){for(var r=Array(n),t=0;n>t&&e.b;t++)r[t]=e.a,e=e.b;return r.length=t,L(r,e)})),h=r((function(n,e){return e[n]})),x=t((function(n,e,r){for(var t=r.length-1;t>=0;t--)e=u(n,r[t],e);return e}));function C(n){throw Error("https://github.com/elm/core/blob/1.0.0/hints/"+n+".md")}function P(n,e){for(var r,t=[],o=M(n,e,0,t);o&&(r=t.pop());o=M(r.a,r.b,0,t));return o}function M(n,e,r,t){if(n===e)return!0;if("object"!=typeof n||null===n||null===e)return"function"==typeof n&&C(5),!1;if(r>100)return t.push(L(n,e)),!0;for(var o in 0>n.$&&(n=Nr(n),e=Nr(e)),n)if(!M(n[o],e[o],r+1,t))return!1;return!0}function T(n,e,r){if("object"!=typeof n)return n===e?0:e>n?-1:1;if(void 0===n.$)return(r=T(n.a,e.a))||(r=T(n.b,e.b))?r:T(n.c,e.c);for(;n.b&&e.b&&!(r=T(n.a,e.a));n=n.b,e=e.b);return r||(n.b?1:e.b?-1:0)}var y=r((function(n,e){var r=T(n,e);return 0>r?zr:r?Dr:$r}));function L(n,e){return{a:n,b:e}}function w(n,e,r){return{a:n,b:e,c:r}}function S(n,e){var r={};for(var t in n)r[t]=n[t];for(var t in e)r[t]=e[t];return r}function B(n,e){if("string"==typeof n)return n+e;if(!n.b)return e;var r=$(n.a,e);n=n.b;for(var t=r;n.b;n=n.b)t=t.b=$(n.a,e);return r}var N={$:0};function $(n,e){return{$:1,a:n,b:e}}var D=r($);function z(n){for(var e=N,r=n.length;r--;)e=$(n[r],e);return e}function H(n){for(var e=[];n.b;n=n.b)e.push(n.a);return e}var _=t((function(n,e,r){for(var t=[];e.b&&r.b;e=e.b,r=r.b)t.push(u(n,e.a,r.a));return z(t)})),G=r((function(n,e){return n*e})),A=r(Math.pow),R=r((function(n,e){var r=e%n;return 0===n?C(11):r>0&&0>n||0>r&&n>0?r+n:r})),k=Math.cos,V=Math.sin,F=Math.tan,E=Math.acos,I=Math.ceil,j=Math.floor,W=Math.round,O=Math.sqrt,U=Math.log,Y=isNaN,X=r((function(n,e){return n+e})),q=t((function(n,e,r){for(var t=r.length;t--;){var o=r[t],a=r.charCodeAt(t);56320>a||a>57343||(o=r[--t]+o),e=u(n,o,e)}return e})),J=r((function(n,e){return e.split(n)})),K=r((function(n,e){return e.join(n)})),Z=t((function(n,e,r){return r.slice(n,e)})),Q=r((function(n,e){return 0===e.indexOf(n)}));function nn(n){return n+""}function en(n){return{$:2,b:n}}var rn=en((function(n){return"number"!=typeof n?xn("an INT",n):n>-2147483647&&2147483647>n&&(0|n)===n?Rr(n):!isFinite(n)||n%1?xn("an INT",n):Rr(n)})),tn=en((function(n){return"boolean"==typeof n?Rr(n):xn("a BOOL",n)})),on=en((function(n){return"number"==typeof n?Rr(n):xn("a FLOAT",n)})),an=(en((function(n){return Rr(n)})),en((function(n){return"string"==typeof n?Rr(n):n instanceof String?Rr(n+""):xn("a STRING",n)}))),cn=r((function(n,e){return{$:6,d:n,b:e}}));function ln(n,e){return{$:9,f:n,g:e}}var un=r((function(n,e){return{$:10,b:e,h:n}})),fn=r((function(n,e){return ln(n,[e])})),sn=t((function(n,e,r){return ln(n,[e,r])})),dn=o((function(n,e,r,t){return ln(n,[e,r,t])})),vn=r((function(n,e){try{return bn(n,JSON.parse(e))}catch(n){return Hr(u(_r,"This is not valid JSON! "+n.message,e))}})),mn=r((function(n,e){return bn(n,e)}));function bn(n,e){switch(n.$){case 2:return n.b(e);case 5:return null===e?Rr(n.c):xn("null",e);case 3:return gn(e)?pn(n.b,e,z):xn("a LIST",e);case 4:return gn(e)?pn(n.b,e,hn):xn("an ARRAY",e);case 6:var r=n.d;if("object"!=typeof e||null===e||!(r in e))return xn("an OBJECT with a field named `"+r+"`",e);var t=bn(n.b,e[r]);return Ct(t)?t:Hr(u(Gr,r,t.a));case 7:var o=n.e;return gn(e)?e.length>o?(t=bn(n.b,e[o]),Ct(t)?t:Hr(u(Ar,o,t.a))):xn("a LONGER array. Need index "+o+" but only see "+e.length+" entries",e):xn("an ARRAY",e);case 8:if("object"!=typeof e||null===e||gn(e))return xn("an OBJECT",e);var a=N;for(var i in e)if(e.hasOwnProperty(i)){if(t=bn(n.b,e[i]),!Ct(t))return Hr(u(Gr,i,t.a));a=$(L(i,t.a),a)}return Rr(Zr(a));case 9:for(var c=n.f,l=n.g,f=0;l.length>f;f++){if(t=bn(l[f],e),!Ct(t))return t;c=c(t.a)}return Rr(c);case 10:return t=bn(n.b,e),Ct(t)?bn(n.h(t.a),e):t;case 11:for(var s=N,d=n.g;d.b;d=d.b){if(t=bn(d.a,e),Ct(t))return t;s=$(t.a,s)}return Hr(kr(Zr(s)));case 1:return Hr(u(_r,n.a,e));case 0:return Rr(n.a)}}function pn(n,e,r){for(var t=e.length,o=Array(t),a=0;t>a;a++){var i=bn(n,e[a]);if(!Ct(i))return Hr(u(Ar,a,i.a));o[a]=i.a}return Rr(r(o))}function gn(n){return Array.isArray(n)||"undefined"!=typeof FileList&&n instanceof FileList}function hn(n){return u(xt,n.length,(function(e){return n[e]}))}function xn(n,e){return Hr(u(_r,"Expecting "+n,e))}function Cn(n,e){if(n===e)return!0;if(n.$!==e.$)return!1;switch(n.$){case 0:case 1:return n.a===e.a;case 2:return n.b===e.b;case 5:return n.c===e.c;case 3:case 4:case 8:return Cn(n.b,e.b);case 6:return n.d===e.d&&Cn(n.b,e.b);case 7:return n.e===e.e&&Cn(n.b,e.b);case 9:return n.f===e.f&&Pn(n.g,e.g);case 10:return n.h===e.h&&Cn(n.b,e.b);case 11:return Pn(n.g,e.g)}}function Pn(n,e){var r=n.length;if(r!==e.length)return!1;for(var t=0;r>t;t++)if(!Cn(n[t],e[t]))return!1;return!0}var Mn=r((function(n,e){return JSON.stringify(e,null,n)+""}));function Tn(n){return n}var yn=t((function(n,e,r){return r[n]=e,r}));function Ln(n){return{$:0,a:n}}function wn(n){return{$:2,b:n,c:null}}var Sn=r((function(n,e){return{$:3,b:n,d:e}})),Bn=0;function Nn(n){var e={$:0,e:Bn++,f:n,g:null,h:[]};return Gn(e),e}function $n(n){return wn((function(e){e(Ln(Nn(n)))}))}function Dn(n,e){n.h.push(e),Gn(n)}var zn=r((function(n,e){return wn((function(r){Dn(n,e),r(Ln(0))}))})),Hn=!1,_n=[];function Gn(n){if(_n.push(n),!Hn){for(Hn=!0;n=_n.shift();)An(n);Hn=!1}}function An(n){for(;n.f;){var e=n.f.$;if(0===e||1===e){for(;n.g&&n.g.$!==e;)n.g=n.g.i;if(!n.g)return;n.f=n.g.b(n.f.a),n.g=n.g.i}else{if(2===e)return void(n.f.c=n.f.b((function(e){n.f=e,Gn(n)})));if(5===e){if(0===n.h.length)return;n.f=n.f.b(n.h.shift())}else n.g={$:3===e?0:1,b:n.f.b,i:n.g},n.f=n.f.d}}}var Rn={};function kn(n,e,r,t,o){return{b:n,c:e,d:r,e:t,f:o}}function Vn(n,e){var r={g:e,h:void 0},t=n.c,o=n.d,a=n.e,i=n.f;return r.h=Nn(u(Sn,(function n(e){return u(Sn,n,{$:5,b:function(n){var c=n.a;return 0===n.$?f(o,r,c,e):a&&i?s(t,r,c.i,c.j,e):f(t,r,a?c.i:c.j,e)}})}),n.b))}var Fn=r((function(n,e){return wn((function(r){n.g(e),r(Ln(0))}))})),En=r((function(n,e){return u(zn,n.h,{$:0,a:e})}));function In(n){return function(e){return{$:1,k:n,l:e}}}function jn(n){return{$:2,m:n}}var Wn=r((function(n,e){return{$:3,n:n,o:e}})),On=[],Un=!1;function Yn(n,e,r){if(On.push({p:n,q:e,r:r}),!Un){Un=!0;for(var t;t=On.shift();)Xn(t.p,t.q,t.r);Un=!1}}function Xn(n,e,r){var t={};for(var o in qn(!0,e,t,null),qn(!1,r,t,null),n)Dn(n[o],{$:"fx",a:t[o]||{i:N,j:N}})}function qn(n,e,r,t){switch(e.$){case 1:var o=e.k,a=function(n,e,r,t){return u(n?Rn[e].e:Rn[e].f,(function(n){for(var e=r;e;e=e.t)n=e.s(n);return n}),t)}(n,o,t,e.l);return void(r[o]=function(n,e,r){return r=r||{i:N,j:N},n?r.i=$(e,r.i):r.j=$(e,r.j),r}(n,a,r[o]));case 2:for(var i=e.m;i.b;i=i.b)qn(n,i.a,r,t);return;case 3:return void qn(n,e.o,r,{s:e.n,t:t})}}function Jn(n,e){return function(n){Rn[n]&&C(3)}(n),Rn[n]={f:Kn,u:e,a:Zn},In(n)}var Kn=r((function(n,e){return function(r){return n(e(r))}}));function Zn(n,e){var r=N,o=Rn[n].u,a=Ln(null);return Rn[n].b=a,Rn[n].c=t((function(n,e){return r=e,a})),{send:function(n){var t=u(mn,o,n);Ct(t)||C(4);for(var a=t.a,i=r;i.b;i=i.b)e(i.a(a))}}}var Qn="undefined"!=typeof document?document:{};function ne(n,e){n.appendChild(e)}function ee(n){return{$:0,a:n}}var re,te=r((function(n,e){return r((function(r,t){for(var o=[],a=0;t.b;t=t.b){var i=t.a;a+=i.b||0,o.push(i)}return a+=o.length,{$:1,c:e,d:fe(r),e:o,f:n,b:a}}))}))(void 0),oe=r((function(n,e){return r((function(r,t){for(var o=[],a=0;t.b;t=t.b){var i=t.a;a+=i.b.b||0,o.push(i)}return a+=o.length,{$:2,c:e,d:fe(r),e:o,f:n,b:a}}))}))(void 0),ae=r((function(n,e){return{$:4,j:n,k:e,b:1+(e.b||0)}})),ie=r((function(n,e){return{$:"a0",n:n,o:e}})),ce=r((function(n,e){return{$:"a1",n:n,o:e}})),le=r((function(n,e){return{$:"a2",n:n,o:e}})),ue=r((function(n,e){return{$:"a3",n:n,o:e}}));function fe(n){for(var e={};n.b;n=n.b){var r=n.a,t=r.$,o=r.n,a=r.o;if("a2"!==t){var i=e[t]||(e[t]={});"a3"===t&&"class"===o?se(i,o,a):i[o]=a}else"className"===o?se(e,o,a):e[o]=a}return e}function se(n,e,r){var t=n[e];n[e]=t?t+" "+r:r}function de(n,e){var r=n.$;if(5===r)return de(n.k||(n.k=n.m()),e);if(0===r)return Qn.createTextNode(n.a);if(4===r){for(var t=n.k,o=n.j;4===t.$;)"object"!=typeof o?o=[o,t.j]:o.push(t.j),t=t.k;var a={j:o,p:e};return(i=de(t,a)).elm_event_node_ref=a,i}if(3===r)return ve(i=n.h(n.g),e,n.d),i;var i=n.f?Qn.createElementNS(n.f,n.c):Qn.createElement(n.c);ve(i,e,n.d);for(var c=n.e,l=0;c.length>l;l++)ne(i,de(1===r?c[l]:c[l].b,e));return i}function ve(n,e,r){for(var t in r){var o=r[t];"a1"===t?me(n,o):"a0"===t?ge(n,e,o):"a3"===t?be(n,o):"a4"===t?pe(n,o):("value"!==t&&"checked"!==t||n[t]!==o)&&(n[t]=o)}}function me(n,e){var r=n.style;for(var t in e)r[t]=e[t]}function be(n,e){for(var r in e){var t=e[r];void 0!==t?n.setAttribute(r,t):n.removeAttribute(r)}}function pe(n,e){for(var r in e){var t=e[r],o=t.f,a=t.o;void 0!==a?n.setAttributeNS(o,r,a):n.removeAttributeNS(o,r)}}function ge(n,e,r){var t=n.elmFs||(n.elmFs={});for(var o in r){var a=r[o],i=t[o];if(a){if(i){if(i.q.$===a.$){i.q=a;continue}n.removeEventListener(o,i)}i=he(e,a),n.addEventListener(o,i,re&&{passive:2>St(a)}),t[o]=i}else n.removeEventListener(o,i),t[o]=void 0}}try{window.addEventListener("t",null,Object.defineProperty({},"passive",{get:function(){re=!0}}))}catch(n){}function he(n,e){function r(e){var t=r.q,o=bn(t.a,e);if(Ct(o)){for(var a,i=St(t),c=o.a,l=i?3>i?c.a:c.au:c,u=1==i?c.b:3==i&&c.c4,f=(u&&e.stopPropagation(),(2==i?c.b:3==i&&c.cU)&&e.preventDefault(),n);a=f.j;){if("function"==typeof a)l=a(l);else for(var s=a.length;s--;)l=a[s](l);f=f.p}f(l,u)}}return r.q=e,r}function xe(n,e){return n.$==e.$&&Cn(n.a,e.a)}function Ce(n,e,r,t){var o={$:e,r:r,s:t,t:void 0,u:void 0};return n.push(o),o}function Pe(n,e,r,t){if(n!==e){var o=n.$,a=e.$;if(o!==a){if(1!==o||2!==a)return void Ce(r,0,t,e);e=function(n){for(var e=n.e,r=e.length,t=Array(r),o=0;r>o;o++)t[o]=e[o].b;return{$:1,c:n.c,d:n.d,e:t,f:n.f,b:n.b}}(e),a=1}switch(a){case 5:for(var i=n.l,c=e.l,l=i.length,u=l===c.length;u&&l--;)u=i[l]===c[l];if(u)return void(e.k=n.k);e.k=e.m();var f=[];return Pe(n.k,e.k,f,0),void(f.length>0&&Ce(r,1,t,f));case 4:for(var s=n.j,d=e.j,v=!1,m=n.k;4===m.$;)v=!0,"object"!=typeof s?s=[s,m.j]:s.push(m.j),m=m.k;for(var b=e.k;4===b.$;)v=!0,"object"!=typeof d?d=[d,b.j]:d.push(b.j),b=b.k;return v&&s.length!==d.length?void Ce(r,0,t,e):((v?function(n,e){for(var r=0;n.length>r;r++)if(n[r]!==e[r])return!1;return!0}(s,d):s===d)||Ce(r,2,t,d),void Pe(m,b,r,t+1));case 0:return void(n.a!==e.a&&Ce(r,3,t,e.a));case 1:return void Me(n,e,r,t,ye);case 2:return void Me(n,e,r,t,Le);case 3:if(n.h!==e.h)return void Ce(r,0,t,e);var p=Te(n.d,e.d);p&&Ce(r,4,t,p);var g=e.i(n.g,e.g);return void(g&&Ce(r,5,t,g))}}}function Me(n,e,r,t,o){if(n.c===e.c&&n.f===e.f){var a=Te(n.d,e.d);a&&Ce(r,4,t,a),o(n,e,r,t)}else Ce(r,0,t,e)}function Te(n,e,r){var t;for(var o in n)if("a1"!==o&&"a0"!==o&&"a3"!==o&&"a4"!==o)if(o in e){var a=n[o],i=e[o];a===i&&"value"!==o&&"checked"!==o||"a0"===r&&xe(a,i)||((t=t||{})[o]=i)}else(t=t||{})[o]=r?"a1"===r?"":"a0"===r||"a3"===r?void 0:{f:n[o].f,o:void 0}:"string"==typeof n[o]?"":null;else{var c=Te(n[o],e[o]||{},o);c&&((t=t||{})[o]=c)}for(var l in e)l in n||((t=t||{})[l]=e[l]);return t}function ye(n,e,r,t){var o=n.e,a=e.e,i=o.length,c=a.length;i>c?Ce(r,6,t,{v:c,i:i-c}):c>i&&Ce(r,7,t,{v:i,e:a});for(var l=c>i?i:c,u=0;l>u;u++){var f=o[u];Pe(f,a[u],r,++t),t+=f.b||0}}function Le(n,e,r,t){for(var o=[],a={},i=[],c=n.e,l=e.e,u=c.length,f=l.length,s=0,d=0,v=t;u>s&&f>d;){var m=(w=c[s]).a,b=(S=l[d]).a,p=w.b,g=S.b,h=void 0,x=void 0;if(m!==b){var C=c[s+1],P=l[d+1];if(C){var M=C.a,T=C.b;x=b===M}if(P){var y=P.a,L=P.b;h=m===y}if(h&&x)Pe(p,L,o,++v),Se(a,o,m,g,d,i),v+=p.b||0,Be(a,o,m,T,++v),v+=T.b||0,s+=2,d+=2;else if(h)v++,Se(a,o,b,g,d,i),Pe(p,L,o,v),v+=p.b||0,s+=1,d+=2;else if(x)Be(a,o,m,p,++v),v+=p.b||0,Pe(T,g,o,++v),v+=T.b||0,s+=2,d+=1;else{if(!C||M!==y)break;Be(a,o,m,p,++v),Se(a,o,b,g,d,i),v+=p.b||0,Pe(T,L,o,++v),v+=T.b||0,s+=2,d+=2}}else Pe(p,g,o,++v),v+=p.b||0,s++,d++}for(;u>s;){var w;v++,Be(a,o,(w=c[s]).a,p=w.b,v),v+=p.b||0,s++}for(;f>d;){var S,B=B||[];Se(a,o,(S=l[d]).a,S.b,void 0,B),d++}(o.length>0||i.length>0||B)&&Ce(r,8,t,{w:o,x:i,y:B})}var we="_elmW6BL";function Se(n,e,r,t,o,a){var i=n[r];if(!i)return a.push({r:o,A:i={c:0,z:t,r:o,s:void 0}}),void(n[r]=i);if(1===i.c){a.push({r:o,A:i}),i.c=2;var c=[];return Pe(i.z,t,c,i.r),i.r=o,void(i.s.s={w:c,A:i})}Se(n,e,r+we,t,o,a)}function Be(n,e,r,t,o){var a=n[r];if(a){if(0===a.c){a.c=2;var i=[];return Pe(t,a.z,i,o),void Ce(e,9,o,{w:i,A:a})}Be(n,e,r+we,t,o)}else{var c=Ce(e,9,o,void 0);n[r]={c:1,z:t,r:o,s:c}}}function Ne(n,e,r,t){$e(n,e,r,0,0,e.b,t)}function $e(n,e,r,t,o,a,i){for(var c=r[t],l=c.r;l===o;){var u=c.$;if(1===u)Ne(n,e.k,c.s,i);else if(8===u)c.t=n,c.u=i,(f=c.s.w).length>0&&$e(n,e,f,0,o,a,i);else if(9===u){c.t=n,c.u=i;var f,s=c.s;s&&(s.A.s=n,(f=s.w).length>0&&$e(n,e,f,0,o,a,i))}else c.t=n,c.u=i;if(!(c=r[++t])||(l=c.r)>a)return t}var d=e.$;if(4===d){for(var v=e.k;4===v.$;)v=v.k;return $e(n,v,r,t,o+1,a,n.elm_event_node_ref)}for(var m=e.e,b=n.childNodes,p=0;m.length>p;p++){o++;var g=1===d?m[p]:m[p].b,h=o+(g.b||0);if(!(o>l||l>h||(c=r[t=$e(b[p],g,r,t,o,h,i)])&&(l=c.r)<=a))return t;o=h}return t}function De(n,e){for(var r=0;e.length>r;r++){var t=e[r],o=t.t,a=ze(o,t);o===n&&(n=a)}return n}function ze(n,e){switch(e.$){case 0:return function(n,e,r){var t=n.parentNode,o=de(e,r);return o.elm_event_node_ref||(o.elm_event_node_ref=n.elm_event_node_ref),t&&o!==n&&t.replaceChild(o,n),o}(n,e.s,e.u);case 4:return ve(n,e.u,e.s),n;case 3:return n.replaceData(0,n.length,e.s),n;case 1:return De(n,e.s);case 2:return n.elm_event_node_ref?n.elm_event_node_ref.j=e.s:n.elm_event_node_ref={j:e.s,p:e.u},n;case 6:for(var r=e.s,t=0;r.i>t;t++)n.removeChild(n.childNodes[r.v]);return n;case 7:for(var o=(r=e.s).e,a=n.childNodes[t=r.v];o.length>t;t++)n.insertBefore(de(o[t],e.u),a);return n;case 9:if(!(r=e.s))return n.parentNode.removeChild(n),n;var i=r.A;return void 0!==i.r&&n.parentNode.removeChild(n),i.s=De(n,r.w),n;case 8:return function(n,e){var r=e.s,t=function(n,e){if(n){for(var r=Qn.createDocumentFragment(),t=0;n.length>t;t++){var o=n[t].A;ne(r,2===o.c?o.s:de(o.z,e.u))}return r}}(r.y,e);n=De(n,r.w);for(var o=r.x,a=0;o.length>a;a++){var i=o[a],c=i.A,l=2===c.c?c.s:de(c.z,e.u);n.insertBefore(l,n.childNodes[i.r])}return t&&ne(n,t),n}(n,e);case 5:return e.s(n);default:C(10)}}function He(n){if(3===n.nodeType)return ee(n.textContent);if(1!==n.nodeType)return ee("");for(var e=N,r=n.attributes,t=r.length;t--;){var o=r[t];e=$(u(ue,o.name,o.value),e)}var a=n.tagName.toLowerCase(),i=N,c=n.childNodes;for(t=c.length;t--;)i=$(He(c[t]),i);return f(te,a,e,i)}var _e=o((function(n,e,r,t){return function(n,e,r,t,o,a){var i=u(mn,n,e?e.flags:void 0);Ct(i)||C(2);var c={},l=r(i.a),f=l.a,s=a(v,f),d=function(n,e){var r;for(var t in Rn){var o=Rn[t];o.a&&((r=r||{})[t]=o.a(t,e)),n[t]=Vn(o,e)}return r}(c,v);function v(n,e){var r=u(t,n,f);s(f=r.a,e),Yn(c,r.b,o(f))}return Yn(c,l.b,o(f)),d?{ports:d}:{}}(e,t,n.e4,n.fC,n.fv,(function(e,r){var o=n.fE,a=t.node,i=He(a);return function(n,e){e(n);var r=0;function t(){r=1===r?0:(Ae(t),e(n),1)}return function(o,a){n=o,a?(e(n),2===r&&(r=1)):(0===r&&Ae(t),r=2)}}(r,(function(n){var r=o(n),t=function(n,e){var r=[];return Pe(n,e,r,0),r}(i,r);a=function(n,e,r,t){return 0===r.length?n:(Ne(n,e,r,t),De(n,r))}(a,i,t,e),i=r}))}))})),Ge="undefined"!=typeof cancelAnimationFrame?cancelAnimationFrame:function(n){clearTimeout(n)},Ae="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:function(n){return setTimeout(n,1e3/60)},Re={addEventListener:function(){},removeEventListener:function(){}},ke="undefined"!=typeof document?document:Re,Ve="undefined"!=typeof window?window:Re,Fe=t((function(n,e,r){return $n(wn((function(){function t(n){Nn(r(n))}return n.addEventListener(e,t,re&&{passive:!0}),function(){n.removeEventListener(e,t)}})))})),Ee=r((function(n,e){var r=bn(n,e);return Ct(r)?Vr(r.a):Fr})),Ie=r((function(n,e){var r="g";n.fd&&(r+="m"),n.eH&&(r+="i");try{return Vr(RegExp(e,r))}catch(n){return Fr}})),je=t((function(n,e,r){for(var t,o=[],a=0,i=r,c=e.lastIndex,l=-1;a++<n&&(t=e.exec(i))&&l!=e.lastIndex;){for(var u=t.length-1,f=Array(u);u>0;){var d=t[u];f[--u]=d?Vr(d):Fr}o.push(s(Ri,t[0],t.index,a,z(f))),l=e.lastIndex}return e.lastIndex=c,z(o)})),We=0;function Oe(n,e){for(;e.b;e=e.b)n(e.a)}function Ue(n){for(var e=0;n.b;n=n.b)e++;return e}var Ye="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:function(n){setTimeout(n,1e3/60)},Xe=a((function(n,e,r,t,o){return{$:0,a:n,b:e,c:r,d:t,e:o}})),qe=r((function(n,e){var r=n.blend;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.BLEND),r.enabled=!0),r.a===e.a&&r.d===e.d||(n.gl.blendEquationSeparate(e.a,e.d),r.a=e.a,r.d=e.d),r.b===e.b&&r.c===e.c&&r.e===e.e&&r.f===e.f||(n.gl.blendFuncSeparate(e.b,e.c,e.e,e.f),r.b=e.b,r.c=e.c,r.e=e.e,r.f=e.f),r.g===e.g&&r.h===e.h&&r.i===e.i&&r.j===e.j||(n.gl.blendColor(e.g,e.h,e.i,e.j),r.g=e.g,r.h=e.h,r.i=e.i,r.j=e.j)})),Je=r((function(n,e){var r=n.depthTest;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.DEPTH_TEST),r.enabled=!0),r.a!==e.a&&(n.gl.depthFunc(e.a),r.a=e.a),r.b!==e.b&&(n.gl.depthMask(e.b),r.b=e.b),r.c===e.c&&r.d===e.d||(n.gl.depthRange(e.c,e.d),r.c=e.c,r.d=e.d)})),Ke=r((function(n,e){var r=n.stencilTest;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.STENCIL_TEST),r.enabled=!0),r.d===e.d&&r.a===e.a&&r.b===e.b||(n.gl.stencilFuncSeparate(n.gl.FRONT,e.d,e.a,e.b),r.d=e.d),r.e===e.e&&r.f===e.f&&r.g===e.g||(n.gl.stencilOpSeparate(n.gl.FRONT,e.e,e.f,e.g),r.e=e.e,r.f=e.f,r.g=e.g),r.c!==e.c&&(n.gl.stencilMask(e.c),r.c=e.c),r.h===e.h&&r.a===e.a&&r.b===e.b||(n.gl.stencilFuncSeparate(n.gl.BACK,e.h,e.a,e.b),r.h=e.h,r.a=e.a,r.b=e.b),r.i===e.i&&r.j===e.j&&r.k===e.k||(n.gl.stencilOpSeparate(n.gl.BACK,e.i,e.j,e.k),r.i=e.i,r.j=e.j,r.k=e.k)})),Ze=r((function(n,e){var r=n.scissor;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.SCISSOR_TEST),r.enabled=!0),r.a===e.a&&r.b===e.b&&r.c===e.c&&r.d===e.d||(n.gl.scissor(e.a,e.b,e.c,e.d),r.a=e.a,r.b=e.b,r.c=e.c,r.d=e.d)})),Qe=r((function(n,e){var r=n.colorMask;r.toggle=n.toggle,r.enabled=!0,r.a===e.a&&r.b===e.b&&r.c===e.c&&r.d===e.d||(n.gl.colorMask(e.a,e.b,e.c,e.d),r.a=e.a,r.b=e.b,r.c=e.c,r.d=e.d)})),nr=r((function(n,e){var r=n.cullFace;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.CULL_FACE),r.enabled=!0),r.a!==e.a&&(n.gl.cullFace(e.a),r.a=e.a)})),er=r((function(n,e){var r=n.polygonOffset;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.POLYGON_OFFSET_FILL),r.enabled=!0),r.a===e.a&&r.b===e.b||(n.gl.polygonOffset(e.a,e.b),r.a=e.a,r.b=e.b)})),rr=r((function(n,e){var r=n.sampleCoverage;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.SAMPLE_COVERAGE),r.enabled=!0),r.a===e.a&&r.b===e.b||(n.gl.sampleCoverage(e.a,e.b),r.a=e.a,r.b=e.b)})),tr=function(n){n.scissor.enabled&&(n.gl.disable(n.gl.SCISSOR_TEST),n.scissor.enabled=!1)},or=function(n){var e=n.colorMask;e.a&&e.b&&e.c&&e.d||(n.gl.colorMask(!0,!0,!0,!0),e.a=!0,e.b=!0,e.c=!0,e.d=!0)},ar=["blend","depthTest","stencilTest","scissor","colorMask","cullFace","polygonOffset","sampleCoverage","sampleAlphaToCoverage"],ir=[function(n){n.blend.enabled&&(n.gl.disable(n.gl.BLEND),n.blend.enabled=!1)},function(n){n.depthTest.enabled&&(n.gl.disable(n.gl.DEPTH_TEST),n.depthTest.enabled=!1)},function(n){n.stencilTest.enabled&&(n.gl.disable(n.gl.STENCIL_TEST),n.stencilTest.enabled=!1)},tr,or,function(n){n.gl.disable(n.gl.CULL_FACE)},function(n){n.gl.disable(n.gl.POLYGON_OFFSET_FILL)},function(n){n.gl.disable(n.gl.SAMPLE_COVERAGE)},function(n){n.gl.disable(n.gl.SAMPLE_ALPHA_TO_COVERAGE)}];function cr(n,e,r){var t=n.createShader(r);return n.shaderSource(t,"#extension GL_OES_standard_derivatives : enable\n"+e),n.compileShader(t),t}function lr(n,e){switch(e){case n.FLOAT:return{size:1,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC2:return{size:2,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC3:return{size:3,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC4:return{size:4,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_MAT4:return{size:4,arraySize:4,type:Float32Array,baseType:n.FLOAT};case n.INT:return{size:1,arraySize:1,type:Int32Array,baseType:n.INT}}}function ur(n,e,r,t){for(var o=r.a.dr,a=[],i=0;o>i;i++)a.push(String.fromCharCode(97+i));var c=lr(n,e.type);if(void 0===c)throw Error("No info available for: "+e.type);var l=0,u=c.size*c.arraySize*o,f=new c.type(Ue(r.b)*u);Oe((function(n){!function(n,e,r,t,i){var c;if(1===o)for(c=0;e>c;c++)n[r++]=1===e?t[i]:t[i][c];else a.forEach((function(o){for(c=0;e>c;c++)n[r++]=1===e?t[o][i]:t[o][i][c]}))}(f,c.size*c.arraySize,l,n,t[e.name]||e.name),l+=u}),r.b);var s=n.createBuffer();return n.bindBuffer(n.ARRAY_BUFFER,s),n.bufferData(n.ARRAY_BUFFER,f,n.STATIC_DRAW),s}function fr(n,e){return n+"#"+e}var sr=r((function(n,e){var r=n.f,t=r.gl;return t?(t.viewport(0,0,t.drawingBufferWidth,t.drawingBufferHeight),r.depthTest.b||(t.depthMask(!0),r.depthTest.b=!0),r.stencilTest.c!==r.STENCIL_WRITEMASK&&(t.stencilMask(r.STENCIL_WRITEMASK),r.stencilTest.c=r.STENCIL_WRITEMASK),tr(r),or(r),t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT|t.STENCIL_BUFFER_BIT),Oe((function(e){if(e.d.b.b){var o,a,i,c,l;if(e.b.id&&e.c.id&&(o=fr(e.b.id,e.c.id),a=r.programs[o]),!a){var u,f;e.b.id?u=r.shaders[e.b.id]:e.b.id=We++,u||(u=cr(t,e.b.src,t.VERTEX_SHADER),r.shaders[e.b.id]=u),e.c.id?f=r.shaders[e.c.id]:e.c.id=We++,f||(f=cr(t,e.c.src,t.FRAGMENT_SHADER),r.shaders[e.c.id]=f);var s=function(n,e,r){var t=n.createProgram();if(n.attachShader(t,e),n.attachShader(t,r),n.linkProgram(t),!n.getProgramParameter(t,n.LINK_STATUS))throw"Link failed: "+n.getProgramInfoLog(t)+"\nvs info-log: "+n.getShaderInfoLog(e)+"\nfs info-log: "+n.getShaderInfoLog(r);return t}(t,u,f);(a={glProgram:s,attributes:Object.assign({},e.b.attributes,e.c.attributes),currentUniforms:{},activeAttributes:[],activeAttributeLocations:[]}).uniformSetters=function(n,e,r,t){var o=r.glProgram,a=r.currentUniforms,i=0,c=e.f;function l(e,r){var t=r.name,o=n.getUniformLocation(e,t);switch(r.type){case n.INT:return function(e){a[t]!==e&&(n.uniform1i(o,e),a[t]=e)};case n.FLOAT:return function(e){a[t]!==e&&(n.uniform1f(o,e),a[t]=e)};case n.FLOAT_VEC2:return function(e){a[t]!==e&&(n.uniform2f(o,e[0],e[1]),a[t]=e)};case n.FLOAT_VEC3:return function(e){a[t]!==e&&(n.uniform3f(o,e[0],e[1],e[2]),a[t]=e)};case n.FLOAT_VEC4:return function(e){a[t]!==e&&(n.uniform4f(o,e[0],e[1],e[2],e[3]),a[t]=e)};case n.FLOAT_MAT4:return function(e){a[t]!==e&&(n.uniformMatrix4fv(o,!1,new Float32Array(e)),a[t]=e)};case n.SAMPLER_2D:var l=i++;return function(e){n.activeTexture(n.TEXTURE0+l);var r=c.textures.get(e);r||(r=e.eM(n),c.textures.set(e,r)),n.bindTexture(n.TEXTURE_2D,r),a[t]!==e&&(n.uniform1i(o,l),a[t]=e)};case n.BOOL:return function(e){a[t]!==e&&(n.uniform1i(o,e),a[t]=e)};default:return function(){}}}for(var u={},f=n.getProgramParameter(o,n.ACTIVE_UNIFORMS),s=0;f>s;s++){var d=n.getActiveUniform(o,s);u[t[d.name]||d.name]=l(o,d)}return u}(t,n,a,Object.assign({},e.b.uniforms,e.c.uniforms));var d=t.getProgramParameter(s,t.ACTIVE_ATTRIBUTES);for(i=0;d>i;i++){var v=t.getActiveAttrib(s,i),m=t.getAttribLocation(s,v.name);a.activeAttributes.push(v),a.activeAttributeLocations.push(m)}o=fr(e.b.id,e.c.id),r.programs[o]=a}r.lastProgId!==o&&(t.useProgram(a.glProgram),r.lastProgId=o),c=a.uniformSetters,Object.keys(l=e.e).forEach((function(n){var e=c[n];e&&e(l[n])}));var b=r.buffers.get(e.d);for(b||(b=function(n,e){if(e.a.dB>0){var r=n.createBuffer(),t=function(n,e){var r,t=new Uint32Array(Ue(n)*e),o=0;return Oe((function(n){if(1===e)t[o++]=n;else for(r=0;e>r;r++)t[o++]=n[String.fromCharCode(97+r)]}),n),t}(e.c,e.a.dB);return n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,r),n.bufferData(n.ELEMENT_ARRAY_BUFFER,t,n.STATIC_DRAW),{numIndices:t.length,indexBuffer:r,buffers:{}}}return{numIndices:e.a.dr*Ue(e.b),indexBuffer:null,buffers:{}}}(t,e.d),r.buffers.set(e.d,b)),i=0;a.activeAttributes.length>i;i++){m=a.activeAttributeLocations[i],void 0===b.buffers[(v=a.activeAttributes[i]).name]&&(b.buffers[v.name]=ur(t,v,e.d,a.attributes)),t.bindBuffer(t.ARRAY_BUFFER,b.buffers[v.name]);var p=lr(t,v.type);if(1===p.arraySize)t.enableVertexAttribArray(m),t.vertexAttribPointer(m,p.size,p.baseType,!1,0,0);else for(var g=4*p.size,h=g*p.arraySize,x=0;p.arraySize>x;x++)t.enableVertexAttribArray(m+x),t.vertexAttribPointer(m+x,p.size,p.baseType,!1,h,g*x)}for(r.toggle=!r.toggle,Oe(cf(r),e.a),i=0;9>i;i++){var C=r[ar[i]];C.toggle!==r.toggle&&C.enabled&&(ir[i](r),C.enabled=!1,C.toggle=r.toggle)}b.indexBuffer?(t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,b.indexBuffer),t.drawElements(e.d.a.d6,b.numIndices,t.UNSIGNED_INT,0)):t.drawArrays(e.d.a.d6,0,b.numIndices)}}),n.g),e):e})),dr=t((function(n,e,r){return function(n,e,r,t){return{$:3,d:fe(n),g:e,h:r,i:t}}(e,{g:r,f:{},h:n},xr,Cr)})),vr=r((function(n,e){n.contextAttributes.alpha=!0,n.contextAttributes.premultipliedAlpha=e.a})),mr=r((function(n,e){n.contextAttributes.depth=!0,n.sceneSettings.push((function(n){n.clearDepth(e.a)}))})),br=r((function(n,e){n.contextAttributes.stencil=!0,n.sceneSettings.push((function(n){n.clearStencil(e.a)}))})),pr=r((function(n){n.contextAttributes.antialias=!0})),gr=r((function(n,e){n.sceneSettings.push((function(n){n.clearColor(e.a,e.b,e.c,e.d)}))})),hr=r((function(n){n.contextAttributes.preserveDrawingBuffer=!0}));function xr(n){var e={contextAttributes:{alpha:!1,depth:!1,stencil:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1},sceneSettings:[]};Oe((function(n){return u(af,e,n)}),n.h);var r=Qn.createElement("canvas"),t=r.getContext&&(r.getContext("webgl",e.contextAttributes)||r.getContext("experimental-webgl",e.contextAttributes));return t&&"undefined"!=typeof WeakMap?(e.sceneSettings.forEach((function(n){n(t)})),t.getExtension("OES_standard_derivatives"),t.getExtension("OES_element_index_uint"),n.f.gl=t,n.f.toggle=!1,n.f.blend={enabled:!1,toggle:!1},n.f.depthTest={enabled:!1,toggle:!1},n.f.stencilTest={enabled:!1,toggle:!1},n.f.scissor={enabled:!1,toggle:!1},n.f.colorMask={enabled:!1,toggle:!1},n.f.cullFace={enabled:!1,toggle:!1},n.f.polygonOffset={enabled:!1,toggle:!1},n.f.sampleCoverage={enabled:!1,toggle:!1},n.f.sampleAlphaToCoverage={enabled:!1,toggle:!1},n.f.shaders=[],n.f.programs={},n.f.lastProgId=null,n.f.buffers=new WeakMap,n.f.textures=new WeakMap,n.f.STENCIL_WRITEMASK=t.getParameter(t.STENCIL_WRITEMASK),Ye((function(){return u(sr,n,r)}))):(r=Qn.createElement("div")).innerHTML='<a href="https://get.webgl.org/">Enable WebGL</a> to see this content!',r}function Cr(n,e){return e.f=n.f,sr(e)}var Pr=r((function(n,e){return new Float64Array([n,e])}));new Float64Array(3),new Float64Array(3),new Float64Array(3);var Mr=t((function(n,e,r){return new Float64Array([n,e,r])})),Tr=r((function(n,e){return new Float64Array([e[0]*n,e[1]*n,e[2]*n])})),yr=o((function(n,e,r,t){return new Float64Array([n,e,r,t])}));new Float64Array(16),new Float64Array(16),new Float64Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);var Lr=D,wr=x,Sr=t((function(n,e,t){var o=t.c,a=t.d,i=r((function(e,r){return f(wr,e.$?n:i,r,e.a)}));return f(wr,i,f(wr,n,e,a),o)})),Br=t((function(n,e,r){for(;;){if(-2===r.$)return e;var t=r.d,o=n,a=f(n,r.b,r.c,f(Br,n,e,r.e));n=o,e=a,r=t}})),Nr=function(n){return f(Br,t((function(n,e,r){return u(Lr,L(n,e),r)})),N,n)},$r=1,Dr=2,zr=0,Hr=function(n){return{$:1,a:n}},_r=r((function(n,e){return{$:3,a:n,b:e}})),Gr=r((function(n,e){return{$:0,a:n,b:e}})),Ar=r((function(n,e){return{$:1,a:n,b:e}})),Rr=function(n){return{$:0,a:n}},kr=function(n){return{$:2,a:n}},Vr=function(n){return{$:0,a:n}},Fr={$:1},Er=Mn,Ir=nn,jr=r((function(n,e){return u(K,n,H(e))})),Wr=r((function(n,e){return z(u(J,n,e))})),Or=t((function(n,e,r){for(;;){if(!r.b)return e;var t=r.b,o=n,a=u(n,r.a,e);n=o,e=a,r=t}})),Ur=function(n){return f(Or,r((function(n,e){return e+1})),0,n)},Yr=_,Xr=t((function(n,e,r){for(;;){if(T(n,e)>=1)return r;var t=n,o=e-1,a=u(Lr,e,r);n=t,e=o,r=a}})),qr=r((function(n,e){return f(Xr,n,e,N)})),Jr=r((function(n,e){return f(Yr,n,u(qr,0,Ur(e)-1),e)})),Kr=function(n){var e=n.charCodeAt(0);return 55296>e||e>56319?e:1024*(e-55296)+n.charCodeAt(1)-56320+65536},Zr=function(n){return f(Or,Lr,N,n)},Qr=function(n){var e=n.charCodeAt(0);return isNaN(e)?Fr:Vr(55296>e||e>56319?L(n[0],n.slice(1)):L(n[0]+n[1],n.slice(2)))},nt=32,et=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),rt=[],tt=I,ot=r((function(n,e){return U(e)/U(n)})),at=function(n){return n},it=tt(u(ot,2,nt)),ct=s(et,0,it,rt,rt),lt=p,ut=function(n){return{$:1,a:n}},ft=j,st=function(n){return n.length},dt=r((function(n,e){return T(n,e)>0?n:e})),vt=G,mt=g,bt=r((function(n,e){for(;;){var r=u(mt,nt,n),t=r.b,o=u(Lr,{$:0,a:r.a},e);if(!t.b)return Zr(o);n=t,e=o}})),pt=r((function(n,e){for(;;){var r=tt(e/nt);if(1===r)return u(mt,nt,n).a;n=u(bt,n,N),e=r}})),gt=r((function(n,e){if(e.m){var r=e.m*nt,t=ft(u(ot,nt,r-1)),o=n?Zr(e.B):e.B,a=u(pt,o,e.m);return s(et,st(e.r)+r,u(dt,5,t*it),a,e.r)}return s(et,st(e.r),it,rt,e.r)})),ht=a((function(n,e,r,t,o){for(;;){if(0>e)return u(gt,!1,{B:t,m:r/nt|0,r:o});var a=ut(f(lt,nt,e,n));n=n,e-=nt,r=r,t=u(Lr,a,t),o=o}})),xt=r((function(n,e){if(n>0){var r=n%nt;return d(ht,e,n-r-nt,n,N,f(lt,r,n-r,e))}return ct})),Ct=function(n){return!n.$},Pt=un,Mt=cn,Tt=on,yt=fn,Lt=sn,wt=function(n){return{$:0,a:n}},St=function(n){switch(n.$){case 0:return 0;case 1:return 1;case 2:return 2;default:return 3}},Bt=te("div"),Nt=function(n){return{$:1,a:n}},$t=function(n){return{$:7,a:n}},Dt=function(n){return{$:3,a:n}},zt=t((function(n,e,r){return e(n(r))})),Ht=function(n){return n},_t=function(n){return n.length},Gt=Z,At=r((function(n,e){return 1>n?e:f(Gt,n,_t(e),e)})),Rt=function(n){for(var e=0,r=n.charCodeAt(0),t=43==r||45==r?1:0,o=t;n.length>o;++o){var a=n.charCodeAt(o);if(48>a||a>57)return Fr;e=10*e+a-48}return o==t?Fr:Vr(45==r?-e:e)},kt=Q,Vt=Ln,Ft=Vt(0),Et=o((function(n,e,r,t){if(t.b){var o=t.a,a=t.b;if(a.b){var i=a.a,c=a.b;if(c.b){var l=c.a,d=c.b;if(d.b){var v=d.b;return u(n,o,u(n,i,u(n,l,u(n,d.a,r>500?f(Or,n,e,Zr(v)):s(Et,n,e,r+1,v)))))}return u(n,o,u(n,i,u(n,l,e)))}return u(n,o,u(n,i,e))}return u(n,o,e)}return e})),It=t((function(n,e,r){return s(Et,n,e,0,r)})),jt=r((function(n,e){return f(It,r((function(e,r){return u(Lr,n(e),r)})),N,e)})),Wt=Sn,Ot=r((function(n,e){return u(Wt,(function(e){return Vt(n(e))}),e)})),Ut=t((function(n,e,r){return u(Wt,(function(e){return u(Wt,(function(r){return Vt(u(n,e,r))}),r)}),e)})),Yt=function(n){return f(It,Ut(Lr),Vt(N),n)},Xt=Fn,qt=r((function(n,e){var r=e;return $n(u(Wt,Xt(n),r))}));Rn.Task=kn(Ft,t((function(n,e){return u(Ot,(function(){return 0}),Yt(u(jt,qt(n),e)))})),t((function(){return Vt(0)})),r((function(n,e){return u(Ot,n,e)})));var Jt=In("Task"),Kt=r((function(n,e){return Jt(u(Ot,n,e))})),Zt=_e,Qt=r((function(n,e){return{$:0,a:n,b:e}})),no=function(n){return{$:6,a:n}},eo=r((function(n,e){return{$:4,a:n,b:e}})),ro=r((function(n,e){return{$:2,a:n,b:e}})),to=jn,oo=Wn,ao=function(n){return{$:1,a:n}},io=t((function(n,e,r){return{cH:r,ek:e,ep:n}})),co=Vt(f(io,N,Fr,0)),lo=function(n){return wn((function(e){var r=n.f;2===r.$&&r.c&&r.c(),n.f=null,e(Ln(0))}))},uo=wn((function(n){n(Ln(Date.now()))})),fo=wn((function(n){var e=Ae((function(){n(Ln(Date.now()))}));return function(){Ge(e)}})),so=En,vo=$n,mo=t((function(n,e,r){var t=r.ek,o=r.cH,a=L(t,e);return 1===a.a.$?a.b.b?u(Wt,(function(n){return u(Wt,(function(r){return Vt(f(io,e,Vr(n),r))}),uo)}),vo(u(Wt,so(n),fo))):co:a.b.b?Vt(f(io,e,t,o)):u(Wt,(function(){return co}),lo(a.a.a))})),bo=Ht,po=t((function(n,e,r){var t=r.ep,o=r.cH,a=function(r){return u(Xt,n,(0,r.a)(r.$?e-o:bo(e)))};return u(Wt,(function(n){return u(Wt,(function(){return Vt(f(io,t,Vr(n),e))}),Yt(u(jt,a,t)))}),vo(u(Wt,so(n),fo)))})),go=t((function(n,e,r){return n(e(r))}));Rn["Browser.AnimationManager"]=kn(co,mo,po,0,r((function(n,e){return e.$?ao(u(go,n,e.a)):{$:0,a:u(go,n,e.a)}})));var ho=In("Browser.AnimationManager"),xo=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),Co=r((function(n,e){return{eb:e,ep:n}})),Po={$:-2},Mo=Po,To=Vt(u(Co,N,Mo)),yo=function(n){return L(B(n.a?"w_":"d_",n.b),n)},Lo=a((function(n,e,r,t,o){return{$:-1,a:n,b:e,c:r,d:t,e:o}})),wo=a((function(n,e,r,t,o){if(-1!==o.$||o.a){if(-1!==t.$||t.a||-1!==t.d.$||t.d.a)return d(Lo,n,e,r,t,o);var a=t.d;return i=t.e,d(Lo,0,t.b,t.c,d(Lo,1,a.b,a.c,a.d,a.e),d(Lo,1,e,r,i,o))}var i,c=o.b,l=o.c,u=o.d,f=o.e;return-1!==t.$||t.a?d(Lo,n,c,l,d(Lo,0,e,r,t,u),f):d(Lo,0,e,r,d(Lo,1,t.b,t.c,t.d,i=t.e),d(Lo,1,c,l,u,f))})),So=y,Bo=t((function(n,e,r){if(-2===r.$)return d(Lo,0,n,e,Po,Po);var t=r.a,o=r.b,a=r.c,i=r.d,c=r.e;switch(u(So,n,o)){case 0:return d(wo,t,o,a,f(Bo,n,e,i),c);case 1:return d(Lo,t,o,e,i,c);default:return d(wo,t,o,a,i,f(Bo,n,e,c))}})),No=t((function(n,e,r){var t=f(Bo,n,e,r);return-1!==t.$||t.a?t:d(Lo,1,t.b,t.c,t.d,t.e)})),$o=function(n){return f(Or,r((function(n,e){return f(No,n.a,n.b,e)})),Mo,n)},Do=t((function(n,e,r){for(;;){if(-2===r.$)return e;var t=r.e,o=n,a=f(n,r.b,r.c,f(Do,n,e,r.d));n=o,e=a,r=t}})),zo=i((function(n,e,o,a,i,c){var l=f(Do,t((function(r,t,a){n:for(;;){var i=a.a,c=a.b;if(i.b){var l=i.a,u=l.a,d=l.b,v=i.b;if(0>T(u,r)){r=r,t=t,a=L(v,f(n,u,d,c));continue n}return T(u,r)>0?L(i,f(o,r,t,c)):L(v,s(e,u,d,t,c))}return L(i,f(o,r,t,c))}})),L(Nr(a),c),i),u=l.a,d=l.b;return f(Or,r((function(e,r){return f(n,e.a,e.b,r)})),d,u)})),Ho=r((function(n,e){return{dw:e,dD:n}})),_o=t((function(n,e,r){return u(Ot,(function(n){return L(e,n)}),f(Fe,r.a?Ve:ke,r.b,(function(r){return u(so,n,u(Ho,e,r))})))})),Go=r((function(n,e){return f(Do,No,e,n)})),Ao=t((function(n,e,r){var a=t((function(e,r,t){var o=t.c;return w(t.a,t.b,u(Lr,f(_o,n,e,r),o))})),i=t((function(n,e,r){var t=r.b,o=r.c;return w(u(Lr,e,r.a),t,o)})),c=o((function(n,e,r,t){var o=t.c;return w(t.a,f(No,n,e,t.b),o)})),l=u(jt,yo,e),s=v(zo,i,c,a,r.eb,$o(l),w(N,Mo,N)),d=s.b,m=s.c;return u(Wt,(function(n){return Vt(u(Co,l,u(Go,d,$o(n))))}),u(Wt,(function(){return Yt(m)}),Yt(u(jt,lo,s.a))))})),Ro=t((function(n,e,r){var t=n(e);return t.$?r:u(Lr,t.a,r)})),ko=r((function(n,e){return f(It,Ro(n),N,e)}));Rn["Browser.Events"]=kn(To,Ao,t((function(n,e,r){var t=e.dD,o=e.dw,a=u(ko,(function(n){var e=n.b.c;return P(n.a,t)?u(Ee,e,o):Fr}),r.ep);return u(Wt,(function(){return Vt(r)}),Yt(u(jt,Xt(n),a)))})),0,r((function(n,e){return f(xo,e.a,e.b,u(yt,n,e.c))})));var Vo,Fo,Eo,Io,jo,Wo,Oo,Uo,Yo,Xo,qo,Jo,Ko,Zo,Qo,na,ea,ra,ta,oa,aa,ia,ca,la,ua,fa,sa,da,va,ma,ba,pa,ga,ha,xa,Ca,Pa,Ma,Ta,ya,La,wa,Sa,Ba,Na,$a=In("Browser.Events"),Da=t((function(n,e,r){return $a(f(xo,n,e,r))})),za=u(Da,0,"click"),Ha=u(Da,0,"keydown"),_a=u(Da,0,"keyup"),Ga=u(Da,0,"mousedown"),Aa=u(Da,0,"mousemove"),Ra=u(Da,0,"mouseup"),ka=rn,Va=tn,Fa=r((function(n,e){return n(e?1:0)})),Ea=function(n){var e=void 0!==Qn.hidden?{e1:"hidden",eK:"visibilitychange"}:void 0!==Qn.mozHidden?{e1:"mozHidden",eK:"mozvisibilitychange"}:void 0!==Qn.msHidden?{e1:"msHidden",eK:"msvisibilitychange"}:void 0!==Qn.webkitHidden?{e1:"webkitHidden",eK:"webkitvisibilitychange"}:{e1:"hidden",eK:"visibilitychange"};return f(Da,0,e.eK,u(yt,Fa(n),u(Mt,"target",u(Mt,e.e1,Va))))},Ia=an,ja=function(n){return{$:3,b:n}},Wa=Jn("touchCancel",ja(u(Pt,(function(n){return u(Pt,(function(e){return u(Pt,(function(r){return wt({bm:r,cJ:e,cK:n})}),u(Mt,"identifier",ka))}),u(Mt,"pageX",Tt))}),u(Mt,"pageY",Tt)))),Oa=Jn("touchEnd",ja(u(Pt,(function(n){return u(Pt,(function(e){return u(Pt,(function(r){return wt({bm:r,cJ:e,cK:n})}),u(Mt,"identifier",ka))}),u(Mt,"pageX",Tt))}),u(Mt,"pageY",Tt)))),Ua=Jn("touchMove",ja(u(Pt,(function(n){return u(Pt,(function(e){return u(Pt,(function(r){return wt({bm:r,cJ:e,cK:n})}),u(Mt,"identifier",ka))}),u(Mt,"pageX",Tt))}),u(Mt,"pageY",Tt)))),Ya=Jn("touchStart",ja(u(Pt,(function(n){return u(Pt,(function(e){return u(Pt,(function(r){return wt({bm:r,cJ:e,cK:n})}),u(Mt,"identifier",ka))}),u(Mt,"pageX",Tt))}),u(Mt,"pageY",Tt)))),Xa=to(u(Lr,(Na=u(zt,vt(.001),(function(n){return{$:6,a:n}})),ho(ao(Na))),u(jt,oo($t),z([(Vo=ro,f(Da,1,"resize",u(Mt,"target",f(Lt,Vo,u(Mt,"innerWidth",ka),u(Mt,"innerHeight",ka))))),_a(u(yt,Qt(!1),u(Mt,"key",Ia))),Ha(u(yt,Qt(!0),u(Mt,"key",Ia))),Ea(Dt),za(wt({$:5})),Ga(wt(no(!0))),Ra(wt(no(!1))),Aa(f(Lt,eo,u(Mt,"pageX",Tt),u(Mt,"pageY",Tt))),Ya((function(n){return{$:7,a:n}})),Ua((function(n){return{$:8,a:n}})),Oa((function(n){return{$:9,a:n}})),Wa((function(n){return{$:10,a:n}}))])))),qa={$:1},Ja=function(n){return{$:2,a:n}},Ka=r((function(n,e){return{$:0,a:n,b:e}})),Za=function(n){return n.b.k.a},Qa=function(n){var e=n.b.E;return e.b?Vr(u(Ka,n.a,{k:e.a,E:e.b,q:B(n.b.q,z([n.b.k]))})):Fr},ni=r((function(n,e){return S(e,{cg:n})})),ei=r((function(n,e){return S(e,e.I.cg?{I:u(ni,!1,e.I),a5:e.a5+n}:{a5:e.a5+n})})),ri=r((function(n,e){return e.$?n:e.a})),ti=t((function(n,e,r){var t=r.a,o=r.b;switch(t.$){case 1:return r;case 2:var a=t.a.c5;return(T(a+e,Za(r).a5)>0?u(zt,Qa,ri(u(Ka,qa,o))):Ht)(u(Ka,Ja({c5:a+e}),o));default:var i=o.k,c=i.b,l=u(ei,e,i.a);return u(Ka,t,{k:L(l,u(n,l,c)),E:N,q:B(o.q,z([o.k]))})}})),oi=r((function(n,e){n:for(;;){if(n>0){if(e.b){n-=1,e=e.b;continue n}return e}return e}})),ai=t((function(n,e,r){n:for(;;){if(n>0){if(e.b){var t=e.a;n-=1,e=e.b,r=u(Lr,t,r);continue n}return r}return r}})),ii=r((function(n,e){return Zr(f(ai,n,e,N))})),ci=t((function(n,e,r){if(e>0){var t=L(e,r);n:for(;;){e:for(;;){if(!t.b.b)return r;if(!t.b.b.b){if(1===t.a)break n;break e}switch(t.a){case 1:break n;case 2:var o=t.b;return z([o.a,o.b.a]);case 3:if(t.b.b.b.b){var a=t.b,i=a.b;return z([a.a,i.a,i.b.a])}break e;default:if(t.b.b.b.b&&t.b.b.b.b.b){var c=t.b,l=c.b,s=l.b,d=s.b,v=d.b;return u(Lr,c.a,u(Lr,l.a,u(Lr,s.a,u(Lr,d.a,n>1e3?u(ii,e-4,v):f(ci,n+1,e-4,v)))))}break e}}return r}return z([t.b.a])}return N})),li=r((function(n,e){return f(ci,0,n,e)})),ui=r((function(n,e){var r=e.b.E,t=B(e.b.q,B(z([e.b.k]),r)),o=u(li,n,t),a=u(oi,n,t);if(a.b)return u(Ka,qa,{k:a.a,E:a.b,q:o});var i=Zr(o);return i.b?u(Ka,qa,{k:i.a,E:N,q:Zr(i.b)}):e})),fi={$:0},si=r((function(n,e){switch(n.$){case 1:return function(n){var e=n.b.q,r=n.b.E;return e.b?u(Ka,qa,{k:e.a,E:B(e.b,B(z([n.b.k]),r)),q:N}):n}(e);case 2:return u(ri,e,function(n){var e=n.b.k,r=n.b.E,t=Zr(n.b.q);if(t.b){var o=t.b;return Vr(u(Ka,qa,{k:t.a,E:u(Lr,e,r),q:Zr(o)}))}return Fr}(e));case 3:return u(Ka,qa,e.b);case 4:return function(n){return u(Ka,fi,n.b)}(e);case 5:return function(n){var e=n.b;return u(Ka,Ja({c5:Za(n).a5}),e)}(e);case 6:return u(ri,e,Qa(e));case 7:return function(n){var e=n.b.q,r=n.b.k,t=Zr(n.b.E);if(t.b){var o=t.b;return u(Ka,qa,{k:t.a,E:N,q:B(e,B(z([r]),Zr(o)))})}return n}(e);default:return u(ui,n.a,e)}})),di=r((function(n,e){var r=e.b;return L(n(e.a),r)})),vi=o((function(n,e,r,t){return{cg:t,aT:r,bG:n,bH:e}})),mi=Mo,bi={cb:!1,aT:!1,cm:!1,O:mi,ai:!1,a2:!1,c1:!1,c2:!1,b8:!1},pi=r((function(n,e){return S(e,{aT:n})})),gi=t((function(n,e,r){return S(r,{bG:n,bH:e})})),hi=function(n){if(-1===n.$&&-1===n.d.$&&-1===n.e.$){if(-1!==n.e.d.$||n.e.d.a){var e=n.d,r=n.e;return i=r.b,c=r.c,t=r.d,f=r.e,d(Lo,1,n.b,n.c,d(Lo,0,e.b,e.c,e.d,e.e),d(Lo,0,i,c,t,f))}var t,o=n.d,a=n.e,i=a.b,c=a.c,l=(t=a.d).d,u=t.e,f=a.e;return d(Lo,0,t.b,t.c,d(Lo,1,n.b,n.c,d(Lo,0,o.b,o.c,o.d,o.e),l),d(Lo,1,i,c,u,f))}return n},xi=function(n){if(-1===n.$&&-1===n.d.$&&-1===n.e.$){if(-1!==n.d.d.$||n.d.d.a){var e=n.d,r=n.e;return u=r.b,f=r.c,s=r.d,v=r.e,d(Lo,1,t=n.b,o=n.c,d(Lo,0,e.b,e.c,e.d,c=e.e),d(Lo,0,u,f,s,v))}var t=n.b,o=n.c,a=n.d,i=a.d,c=a.e,l=n.e,u=l.b,f=l.c,s=l.d,v=l.e;return d(Lo,0,a.b,a.c,d(Lo,1,i.b,i.c,i.d,i.e),d(Lo,1,t,o,c,d(Lo,0,u,f,s,v)))}return n},Ci=c((function(n,e,r,t,o,a,i){if(-1!==a.$||a.a){n:for(;;){if(-1===i.$&&1===i.a){if(-1===i.d.$){if(1===i.d.a)return xi(e);break n}return xi(e)}break n}return e}return d(Lo,r,a.b,a.c,a.d,d(Lo,0,t,o,a.e,i))})),Pi=function(n){if(-1===n.$&&-1===n.d.$){var e=n.a,r=n.b,t=n.c,o=n.d,a=o.d,i=n.e;if(1===o.a){if(-1!==a.$||a.a){var c=hi(n);if(-1===c.$){var l=c.e;return d(wo,c.a,c.b,c.c,Pi(c.d),l)}return Po}return d(Lo,e,r,t,Pi(o),i)}return d(Lo,e,r,t,Pi(o),i)}return Po},Mi=r((function(n,e){if(-2===e.$)return Po;var r=e.a,t=e.b,o=e.c,a=e.d,i=e.e;if(0>T(n,t)){if(-1===a.$&&1===a.a){var c=a.d;if(-1!==c.$||c.a){var l=hi(e);if(-1===l.$){var f=l.e;return d(wo,l.a,l.b,l.c,u(Mi,n,l.d),f)}return Po}return d(Lo,r,t,o,u(Mi,n,a),i)}return d(Lo,r,t,o,u(Mi,n,a),i)}return u(Ti,n,m(Ci,n,e,r,t,o,a,i))})),Ti=r((function(n,e){if(-1===e.$){var r=e.a,t=e.b,o=e.c,a=e.d,i=e.e;if(P(n,t)){var c=function(n){for(;;){if(-1!==n.$||-1!==n.d.$)return n;n=n.d}}(i);return-1===c.$?d(wo,r,c.b,c.c,a,Pi(i)):Po}return d(wo,r,t,o,a,u(Mi,n,i))}return Po})),yi=r((function(n,e){var r=u(Mi,n,e);return-1!==r.$||r.a?r:d(Lo,1,r.b,r.c,r.d,r.e)})),Li=r((function(n,e){return{dl:-e/2,co:e,ai:-n/2,a2:n/2,bB:e/2,dc:n}})),wi=r((function(n,e){return{S:e,X:n}})),Si=f(Lt,r((function(n,e){return L(n,e)})),u(Mt,"A1",Ia),u(Mt,"A2",Ia)),Bi=dn,Ni=s(Bi,t((function(n,e,r){return w(n,e,r)})),u(Mt,"A1",Tt),u(Mt,"A2",Tt),u(Mt,"A3",Tt)),$i=f(Lt,r((function(n,e){return L(n,e)})),u(Mt,"A1",Ia),u(Mt,"A2",Ni)),Di=f(Lt,wi,u(Mt,"floats",ja($i)),u(Mt,"colors",ja(Si))),zi=vn,Hi=r((function(n,e){return{S:e,aG:"",X:n,as:""}})),_i=u(Hi,N,N),Gi=r((function(n,e){return e.$?Fr:n(e.a)})),Ai=r((function(n,e){return e.$?Hr(e.a):n(e.a)})),Ri=o((function(n,e,r,t){return{e3:e,fb:n,fh:r,fu:t}})),ki=je,Vi=r((function(n,e){return e.$?Hr(n):Rr(e.a)})),Fi=Ie,Ei=function(n){return n.b?Vr(n.a):Fr},Ii=r((function(n,e){return e.$?Fr:Vr(n(e.a))})),ji=r((function(n,e){return e.$?Hr(e.a):Rr(n(e.a))})),Wi=r((function(n,e){return Kr(e)-Kr(n)})),Oi=t((function(n,e,r){var t=Kr(r);return 1>T(Kr(n),t)&&1>T(t,Kr(e))})),Ui=r((function(n,e){var r=f(Oi,"0","9",e)?Rr(u(Wi,"0",e)):f(Oi,"a","z",e)?Rr(10+u(Wi,"a",e)):f(Oi,"A","Z",e)?Rr(10+u(Wi,"A",e)):Hr({$:0,a:e});return u(Ai,(function(r){return 0>T(r,n)?Rr(r):Hr({$:1,a:e})}),r)})),Yi=r((function(n,e){var r=Qr(e);if(1===r.$)return Rr(0);var t=r.a,o=t.b;return u(Ai,(function(e){return u(Ai,(function(r){return Rr(e+r*n)}),u(Yi,n,o))}),u(Ui,n,t.a))})),Xi=function(n){for(var e=n.length,r=Array(e),t=0;e>t;){var o=n.charCodeAt(t);55296>o||o>56319?(r[e-t]=n[t],t++):(r[e-t]=n[t+1],r[e-++t]=n[t-1],t++)}return r.join("")},qi=r((function(n,e){return 2>n||n>36?Hr({$:2,a:n}):u(Yi,n,Xi(e))})),Ji=qi(16),Ki=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),Zi=t((function(n,e,r){return s(Ki,n,e,r,1)})),Qi=o((function(n,e,r,t){return s(Ki,n,e,r,t)})),nc=A,ec=W,rc=r((function(n,e){var r=u(nc,10,n);return ec(e*r)/r})),tc=q,oc=function(n){return f(tc,Lr,N,n)},ac=(Fo=function(n){var e=oc(n);if(e.b&&!e.b.b){var r=e.a;return H(z([r,r])).join("")}return n},u(zt,(function(n){return n.toLowerCase()}),u(zt,(function(n){return u(Ii,(function(e){return f(ki,1,e,n)}),u(Fi,{eH:!1,fd:!1},"^#?(?:(?:([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2}))|(?:([a-f\\d])([a-f\\d])([a-f\\d]))|(?:([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2}))|(?:([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d])))$"))}),u(zt,Gi(Ei),u(zt,Ii((function(n){return n.fu})),u(zt,Ii(ko(Ht)),u(zt,Vi("Parsing hex regex failed"),Ai((function(n){var e=u(jt,u(zt,Fo,u(zt,Ji,ji(at))),n);n:for(;;){if(e.b&&!e.a.$&&e.b.b&&!e.b.a.$&&e.b.b.b&&!e.b.b.a.$){if(e.b.b.b.b){if(e.b.b.b.a.$||e.b.b.b.b.b)break n;var r=e.b,t=r.b;return Rr(s(Qi,e.a.a/255,r.a.a/255,t.a.a/255,u(rc,2,t.b.a.a/255)))}var o=e.b;return Rr(f(Zi,e.a.a/255,o.a.a/255,o.b.a.a/255))}break n}return Hr("Parsing ints from hex failed")}))))))))),ic=r((function(n,e){return L(e.a,n(e.b))})),cc=s(Ki,1,1,1,1),lc=r((function(n,e){return e.$?n:e.a})),uc=u(zt,zi(Di),u(zt,ji((function(n){return{S:u(jt,ic(u(zt,ac,lc(cc))),n.S),aG:"",X:n.X,as:""}})),lc(_i))),fc=function(n){return f(Or,r((function(n,e){return f(yn,n.a,n.b,e)})),{},n)},sc=Tn,dc=function(n){var e=n.b;return fc(z([L("A1",sc(n.a)),L("A2",sc(e))]))},vc=Tn,mc=function(n){var e=n.b,r=n.c;return fc(z([L("A1",vc(n.a)),L("A2",vc(e)),L("A3",vc(r))]))},bc=function(n){var e=n.b;return fc(z([L("A1",sc(n.a)),L("A2",mc(e))]))},pc=r((function(n,e){return f(Or,function(n){return r((function(e,r){return r.push(n(e)),r}))}(n),[],e)})),gc=X,hc=function(n){return u(gc,n,"")},xc=t((function(n,e,r){return n>0?f(xc,n>>1,B(e,e),1&n?B(r,e):r):r})),Cc=r((function(n,e){return f(xc,n,e,"")})),Pc=t((function(n,e,r){return B(u(Cc,n-_t(r),hc(e)),r)})),Mc=function(n){return 0>n||n>1114111?"�":n>65535?String.fromCharCode(Math.floor((n-=65536)/1024)+55296,n%1024+56320):String.fromCharCode(n)},Tc=R,yc=function(n){var e=function(n){return 10>n?Ir(n):hc(Mc(87+n))};return 16>n?e(n):B(yc(n/16|0),e(u(Tc,16,n)))},Lc=u(zt,yc,u(Pc,2,"0")),wc=function(n){return{aR:n.d,cf:n.c,cn:n.b,cW:n.a}},Sc=function(n){var e=wc(n),r=e.cW,t=e.cn,o=e.cf;return u(jr,"",u(Lr,"#",u(jt,u(zt,ec,Lc),z([255*r,255*t,255*o]))))},Bc=u(zt,(function(n){return{S:u(jt,ic(Sc),n.S),X:n.X}}),u(zt,(function(n){return fc(z([L("floats",u(pc,bc,n.X)),L("colors",u(pc,dc,n.S))]))}),Er(0))),Nc=function(n){return 0>n?-n:n},$c=function(n){if(0===n.length||/[\sxbo]/.test(n))return Fr;var e=+n;return e==e?Vr(e):Fr},Dc=t((function(n,e,r){return u(ri,NaN,$c(u(n,e,r)))})),zc=function(n){return!n},Hc=r((function(n,e){for(;;){if(!e.b)return!1;var r=e.b;if(n(e.a))return!0;n=n,e=r}})),_c=r((function(n,e){var r=u(Hc,(function(n){return"0"!==n&&"."!==n}),oc(e));return B(n&&r?"-":"",e)})),Gc=nn,Ac=function(n){var e=n.a,r=n.b;if("9"===e){var t=Qr(r);return 1===t.$?"01":u(gc,"0",Ac(t.a))}var o=Kr(e);return o>=48&&57>o?u(gc,Mc(o+1),r):"0"},Rc=function(n){return n===1/0||n===-1/0},kc=Y,Vc=t((function(n,e,r){return B(r,u(Cc,n-_t(r),hc(e)))})),Fc=function(n){var e=u(Wr,".",n);return e.b?L(e.a,e.b.b?e.b.a:"0"):L("0","0")},Ec=t((function(n,e,r){if(Rc(r)||kc(r))return Gc(r);var t=0>r,o=Fc(function(n){var e=u(Wr,"e",Gc(Nc(n)));if(e.b){if(e.b.b){var r=e.a,t=e.b.a,o=u(ri,0,Rt(u(kt,"+",t)?u(At,1,t):t)),a=Fc(r),i=B(a.a,a.b),c=0>o?u(ri,"0",u(Ii,(function(n){return n.a+"."+n.b}),u(Ii,di(hc),Qr(B(u(Cc,Nc(o),"0"),i))))):f(Vc,o+1,"0",i);return B(0>n?"-":"",c)}return B(0>n?"-":"",r=e.a)}return""}(Nc(r))),a=o.a,i=o.b,c=_t(a)+e,l=B(u(Cc,1-c,"0"),f(Vc,c,"0",B(a,i))),s=_t(l),d=u(dt,1,c),v=u(n,t,f(Gt,d,s,l)),m=f(Gt,0,d,l),b=v?Xi(u(ri,"1",u(Ii,Ac,Qr(Xi(m))))):m,p=_t(b),g="0"===b?b:e>0?0>T(e,_t(i))?f(Gt,0,p-e,b)+"."+f(Gt,p-e,p,b):B(a+".",f(Vc,e,"0",i)):B(b,u(Cc,Nc(e),"0"));return u(_c,t,g)})),Ic=Ec(r((function(n,e){var r,t=Qr(e);return 1!==t.$&&("5"===t.a.a?""!==t.a.b||!n:(r=Kr(t.a.a))>53&&n||r>=53&&!n)}))),jc=Dc(Ic),Wc=t((function(n,e,r){var t=u(ot,10,Nc(e-n));return u(jc,0>t?3:1>t?2:2>t?1:0,r)})),Oc=r((function(n,e){switch(n.$){case 2:var r=uc(e.as);return S(r,{aG:r.aG,as:r.as});case 3:return S(e,{as:n.a});case 4:return S(e,{aG:Bc(e)});case 0:var t=n.a,o=n.b;return S(e,{X:u(jt,(function(n){var e=n.a,r=n.b,a=r.a,i=r.c;return P(e,t)?L(e,w(a,f(Wc,a,i,o),i)):n}),e.X)});default:return t=n.a,o=n.b,S(e,{S:u(jt,(function(n){var e=n.a;return P(e,t)?L(e,o):n}),e.S)})}})),Uc=r((function(n,e){return f(No,n,0,e)})),Yc=r((function(n,e){return u(yi,n,e)})),Xc=t((function(n,e,r){var t=u(n?Uc:Yc,e,r.O);switch(e){case" ":return S(r,{O:t,c2:n});case"Enter":return S(r,{cm:n,O:t});case"Shift":return S(r,{O:t,c1:n});case"Backspace":return S(r,{cb:n,O:t});case"ArrowUp":return S(r,{O:t,b8:n});case"ArrowDown":return S(r,{aT:n,O:t});case"ArrowLeft":return S(r,{O:t,ai:n});case"ArrowRight":return S(r,{O:t,a2:n});default:return S(r,{O:t})}})),qc=r((function(n,e){switch(n.$){case 1:var r=n.a.fF;return S(e,{ad:u(Li,r.dc,r.co)});case 2:return S(e,{ad:u(Li,n.a,n.b)});case 3:return S(e,{bn:bi,I:s(vi,e.I.bG,e.I.bH,!1,!1)});case 0:return S(e,{bn:f(Xc,n.a,n.b,e.bn)});case 4:return S(e,{I:f(gi,e.ad.ai+n.a,e.ad.bB-n.b,e.I)});case 5:return S(e,{I:u(ni,!0,e.I)});case 6:return S(e,{I:u(pi,n.a,e.I)});case 7:case 8:return S(e,{ae:f(Or,(function(n){return u(No,n.bm,{bG:e.ad.ai+n.cJ,bH:e.ad.bB-n.cK})}),e.ae,n.a)});case 9:case 10:return S(e,{ae:f(Or,(function(n){return yi(n.bm)}),e.ae,n.a)});default:return S(e,{aS:u(Oc,n.a,e.aS)})}})),Jc=r((function(n,e){var r=e.b;return u(Ka,e.a,S(r,{k:u(di,qc(n),r.k)}))})),Kc=t((function(n,e,r){var t=r.b,o=t.k;return u(Ka,r.a,S(t,{k:u(ic,u(n,o.a,e),o)}))})),Zc=o((function(n,e,r,t){switch(r.$){case 0:return t;case 1:return S(t,{a9:r.a});case 2:return S(t,{bg:!1});case 3:return S(t,{bg:!0});case 4:return S(t,{R:f(Kc,e,r.a,t.R)});case 5:return S(t,{R:u(si,r.a,t.R)});case 7:return S(t,{R:u(Jc,r.a,t.R)});default:return S(t,{R:f(ti,n,r.a,t.R)})}})),Qc=(Ba=function(){return{em:(n=ke.body,e=ke.documentElement,{dc:Math.max(n.scrollWidth,n.offsetWidth,e.scrollWidth,e.offsetWidth,e.clientWidth),co:Math.max(n.scrollHeight,n.offsetHeight,e.scrollHeight,e.offsetHeight,e.clientHeight)}),fF:{bG:Ve.pageXOffset,bH:Ve.pageYOffset,dc:ke.documentElement.clientWidth,co:ke.documentElement.clientHeight}};var n,e},wn((function(n){Ae((function(){n(Ln(Ba()))}))}))),nl=r((function(n,e){return{aS:e,ck:n.ck,bn:bi,I:s(vi,0,0,!1,!1),ad:u(Li,600,600),a5:0,ae:Mo}})),el=r((function(n,e){return u(Ka,fi,{k:L(n,e(n)),E:N,q:N})})),rl=jn,tl=rl(N),ol=function(n){return{$:11,a:n}},al=function(n){return{$:4,a:n}},il=function(n){return{$:5,a:n}},cl={$:2},ll={$:0},ul=function(n){return{$:1,a:n}},fl={$:3},sl=r((function(n){return n})),dl=te("button"),vl=function(n){return n?"Level Editor":"Configurations"},ml=function(n){return u(ri,0,Ei(u(ko,(function(e){return P(vl(e),n)?Vr(e):Fr}),z([0,1]))))},bl=ae,pl=bl,gl=ie,hl=r((function(n,e){return u(gl,n,{$:0,a:e})})),xl=r((function(n,e){return f(It,Mt,e,n)})),Cl=u(xl,z(["target","value"]),Ia),Pl=function(n){return u(hl,"click",wt(n))},Ml=te("option"),Tl=te("select"),yl=ce,Ll=yl,wl=ee,Sl=wl,Bl=r((function(n,e){return u(le,n,sc(e))})),Nl=Bl("value"),$l=r((function(n,e){return{$:1,a:n,b:e}})),Dl=r((function(n,e){return{$:0,a:n,b:e}})),zl=s(Ki,0,0,0,1),Hl=u(dl,z([u(Ll,"cursor","pointer"),Pl({$:4})]),z([Sl("Export Configurations as json")])),_l=te("h3"),Gl=te("p"),Al=Tn,Rl=r((function(n,e){return u(le,n,Al(e))})),kl=Rl("readOnly"),Vl=te("textarea"),Fl=function(n){return u(Bt,N,z([u(Vl,z([kl(!0)]),z([Sl(n.aG)]))]))},El=function(n){return u(Bt,N,z([u(_l,N,z([Sl("Export Configurations")])),u(Gl,N,z([Hl])),u(Gl,N,z([Fl(n)]))]))},Il=Bl("htmlFor"),jl=te("hr"),Wl=Bl("id"),Ol=u(dl,z([u(Ll,"cursor","pointer"),Pl({$:2})]),z([Sl("Import Configurations")])),Ul=function(n){return{$:3,a:n}},Yl=function(n){return L(n,!0)},Xl=r((function(n,e){return u(gl,n,{$:1,a:e})})),ql=function(n){return u(Xl,"input",u(yt,Yl,u(yt,n,Cl)))},Jl=function(n){return u(Bt,N,z([u(Vl,z([ql(Ul)]),z([Sl(n.as)]))]))},Kl=function(n){return u(Bt,N,z([u(_l,N,z([Sl("Import Configurations")])),u(Gl,N,z([Jl(n)])),u(Gl,N,z([Ol]))]))},Zl=te("input"),Ql=te("label"),nu=Bl("max"),eu=Bl("min"),ru=Bl("name"),tu=te("span"),ou=Bl("type"),au=function(n){return{$:0,a:n}},iu=function(n){return Ur(n.b.q)},cu=function(n){return u(Zl,z([u(Ll,"position","absolute"),ou("range"),u(Ll,"width","100%"),eu("0"),nu(Ir((e=n,r=e.b.E,Ur(e.b.q)+1+Ur(r)-1))),Nl(Ir(iu(n))),ql(u(zt,Rt,u(zt,ri(0),au)))]),N);var e,r},lu=function(n){var e=n.b.k,r=n.b.E,t=u(ri,e,Ei(n.b.q)).a.a5,o=u(ri,e,Ei(Zr(r))).a.a5-t,a=ft(o/1);return u(Bt,z([u(Ll,"position","absolute"),u(Ll,"width","100%"),u(Ll,"height","20px")]),u(jt,(function(n){return u(Bt,z([u(Ll,"position","absolute"),u(Ll,"background-color","yellow"),u(Ll,"width","1px"),u(Ll,"height","20px"),u(Ll,"left",Gc(100*n*1/o)+"%")]),N)}),u(qr,0,a)))},uu={$:1},fu={$:7},su={$:6},du={$:2},vu={$:3},mu={$:5},bu={$:4},pu=r((function(n,e){return u(dl,z([u(Ll,"display","inline-block"),u(Ll,"width","30px"),u(Ll,"height","30px"),u(Ll,"margin","2px"),u(Ll,"padding","0px"),u(Ll,"top","0px"),u(Ll,"font-size","20px"),Pl(n)]),z([Sl(e)]))})),gu=function(n){return u(Bt,z([u(Ll,"width","100%")]),z([(e=n,r=e.a,u(Bt,N,z([u(pu,uu,"⏮️"),u(pu,du,"◀️"),1===r.$?u(pu,mu,"▶️"):u(pu,vu,"⏸️"),r.$?u(pu,bu,"⏺️"):u(pu,vu,"⏹"),u(pu,su,"⏯️"),u(pu,fu,"⏭️")]))),u(Bt,N,z([lu(n),cu(n)]))]));var e,r},hu=t((function(n,e,t){var o,a,i,c,l=t.R.b.k.b,f=u(Bt,z([u(Ll,"margin-left","0px")]),z([u(Tl,z([(o=u(zt,ml,ul),u(hl,"change",u(yt,o,Cl))),Nl(vl(t.a9)),u(Ll,"width","200px"),u(Ll,"height","40px"),u(Ll,"font-size","20px")]),u(jt,(function(n){return u(Ml,z([Nl(vl(n))]),z([Sl(vl(n))]))}),z([0,1])))])),s=r((function(n,e){return u(dl,z([u(Ll,"font-size","30px"),u(Ll,"width","40px"),u(Ll,"height","40px"),Pl(n)]),z([Sl(e)]))})),d=Za(t.R),v=t.a9?u(pl,al,u(e,d,l)):u(Bt,N,z([u(pl,il,gu(t.R)),u(pl,u(zt,ol,$t),(a=d.aS,i=function(n){var e=n.a,r=n.b,t=r.a,o=r.b,a=r.c;return u(Bt,z([u(Ll,"margin-top","15px")]),z([u(Bt,N,z([u(Ql,z([Il(e)]),z([Sl(e),Sl(": "),u(tu,z([u(Ll,"font-family","monospace"),u(Ll,"font-weight","bold")]),z([Sl(Gc(o))]))]))])),u(Zl,z([ou("range"),Wl(e),ru(e),eu(Gc(t)),nu(Gc(a)),ql((function(n){return u(Dl,e,u(ri,0,$c(n)))})),u(Bl,"step","any"),u(Ll,"width","200px"),Nl(Gc(o))]),N)]))},c=function(n){var e=n.a,r=n.b;return u(Bt,z([u(Ll,"margin-top","15px")]),z([u(Bt,N,z([u(Ql,z([Il(e)]),z([Sl(e)]))])),u(Zl,z([ou("color"),u(Ll,"width","200px"),u(Ll,"height","30px"),Wl(e),ru(e),ql((function(n){return u($l,e,u(lc,zl,ac(n)))})),Nl(Sc(r))]),N)]))},u(Bt,z([u(Ll,"margin-left","20px"),u(Ll,"height","100%"),u(Ll,"overflow","scroll")]),z([u(Bt,N,u(jt,i,a.X)),u(Bt,N,u(jt,c,a.S)),u(jl,N,N),El(a),Kl(a)]))))])),m=u(Bt,z([u(Ll,"position","fixed"),u(Ll,"top","0px"),u(Ll,"left","0px"),u(Ll,"width",Gc(250)+"px"),u(Ll,"height",Gc(d.ad.co)+"px"),u(Ll,"font-family",'-apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif'),u(Ll,"font-size","16px")]),z(t.bg?[u(Bt,z([u(Ll,"height","100px")]),z([u(s,cl,"✕"),f])),u(Bt,z([u(Ll,"height",Gc(d.ad.co-100)+"px")]),z([v]))]:[u(s,fl,"≡")])),b=u(Bt,z([u(Ll,"position","fixed"),u(Ll,"top","0px"),u(Ll,"left","0px"),u(Ll,"width",Gc(d.ad.dc)+"px"),u(Ll,"height",Gc(d.ad.co)+"px"),u(Ll,"font-size","16px")]),z([u(pl,sl(ll),u(n,d,l))]));return u(Bt,z([u(Ll,"touch-action","none"),u(Ll,"user-select","none")]),z([b,m]))})),xu=i((function(n,e,t,o,a,i){return Zt({e4:function(n){return L({a9:0,bg:!1,R:u(el,u(nl,n,t),o),db:0},u(Kt,u(zt,Nt,$t),Qc))},fv:function(n){return 1===n.db?u(oo,$t,Ea(Dt)):Xa},fC:r((function(n,r){return L(s(Zc,e,i,n,r),tl)})),fE:u(hu,n,a)})})),Cu=o((function(n,e,o,a){return v(xu,n,e,o,a,r((function(){return u(Bt,N,N)})),t((function(n,e,r){return r})))})),Pu=Hi,Mu=Pu,Tu=3.141592653589793,yu=u(Mu,z([L("number of tree blocks",w(1,16,20)),L("turning speed of the tree",w(.1,1,4)),L("azimuth for third light",w(-3.141592653589793,1,Tu)),L("elevation for third light",w(-3.141592653589793,-2,Tu)),L("azimuth for fourth light",w(-3.141592653589793,1,Tu)),L("elevation for fourth light",w(-3.141592653589793,-2,Tu))]),N),Lu=r((function(n,e){return e})),wu=function(n){return Tu*(n/180)},Su=O,Bu=r((function(n,e){var r=e.aB-n.aB,t=e.bH-n.bH,o=e.bG-n.bG,a=u(dt,Nc(o),u(dt,Nc(t),Nc(r)));if(a){var i=r/a,c=t/a,l=o/a,f=Su(l*l+c*c+i*i);return Vr({bG:l/f,bH:c/f,aB:i/f})}return Fr})),Nu=r((function(n,e){return{bG:e.bH*n.aB-e.aB*n.bH,bH:e.aB*n.bG-e.bG*n.aB,aB:e.bG*n.bH-e.bH*n.bG}})),$u=function(n){var e=n,r=u(dt,Nc(e.bG),u(dt,Nc(e.bH),Nc(e.aB)));if(r){var t=e.aB/r,o=e.bH/r,a=e.bG/r,i=Su(a*a+o*o+t*t);return Vr({bG:a/i,bH:o/i,aB:t/i})}return Fr},Du=r((function(n,e){return{bG:e.bG-n.bG,bH:e.bH-n.bH,aB:e.aB-n.aB}})),zu=r((function(n,e){return e.bG*n.bG+e.bH*n.bH+e.aB*n.aB})),Hu=r((function(n,e){return T(e,n)>0})),_u=r((function(n,e){return 0>T(e,n)})),Gu=r((function(n,e){return{bG:e.bG-n.bG,bH:e.bH-n.bH,aB:e.aB-n.aB}})),Au=r((function(n,e){var r=e.bG*n.bG+e.bH*n.bH+e.aB*n.aB;return{bG:n.bG*r,bH:n.bH*r,aB:n.aB*r}})),Ru={bG:0,bH:0,aB:0},ku=t((function(n,e,r){return u(Gi,(function(t){return u(Gi,(function(o){var a,i=u(Nu,e,n),c=u(zu,r,i),l=u(Hu,0,c)?i:u(_u,0,c)?{bG:-(a=i).bG,bH:-a.bH,aB:-a.aB}:Ru;return u(Ii,(function(n){return w(t,o,n)}),$u(l))}),$u(u(Gu,u(Au,t,e),e)))}),$u(n))})),Vu=function(n){var e=function(n){var e=n,r=Nc(e.aB),t=Nc(e.bH),o=Nc(e.bG);if(1>T(o,t)){if(1>T(o,r)){var a=Su(e.aB*e.aB+e.bH*e.bH);return{bG:0,bH:-e.aB/a,aB:e.bH/a}}return a=Su(e.bH*e.bH+e.bG*e.bG),{bG:-e.bH/a,bH:e.bG/a,aB:0}}return 1>T(t,r)?(a=Su(e.aB*e.aB+e.bG*e.bG),{bG:e.aB/a,bH:0,aB:-e.bG/a}):(a=Su(e.bG*e.bG+e.bH*e.bH),{bG:-e.bH/a,bH:e.bG/a,aB:0})}(n);return L(e,{bG:n.bH*e.aB-n.aB*e.bH,bH:n.aB*e.bG-n.bG*e.aB,aB:n.bG*e.bH-n.bH*e.bG})},Fu=r((function(n,e){var r=Vu(n);return{cI:e,de:r.a,df:r.b,dg:n}})),Eu={bG:0,bH:0,aB:0},Iu=function(n){return Nc(n)},ju=function(n){return.5*n},Wu=F,Ou={bG:0,bH:1,aB:0},Uu=(Eo={eU:{bG:5,bH:5,aB:12},eX:{bG:0,bH:1,aB:0},fB:{bG:0,bH:1,aB:0}},Io=Eo.eX,jo=Eo.eU,Wo=Eo.fB,function(n){var e,r=ju(Iu(n.ev));return{cV:(e=Wu(r),{$:0,a:e}),da:n.da}}({ev:wu(40),da:function(n){var e=u(Du,n.eX,n.eU),r=n.fB,t=f(ku,e,r,u(Nu,e,r));if(t.$){var o=$u(e);if(o.$){var a=Vu(n.fB);return{cI:n.eU,de:a.b,df:n.fB,dg:a.a}}return u(Fu,o.a,n.eU)}var i=t.a;return{cI:n.eU,de:i.c,df:i.b,dg:i.a}}({eU:jo,eX:Io,fB:u(ri,Ou,u(Bu,Eu,Wo))})})),Yu=t((function(n,e,r){return 0>T(r,n)?n:T(r,e)>0?e:r})),Xu=function(n){return{$:0,a:n}},qu={$:3},Ju=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),Ku=Ju,Zu=r((function(n,e){return e.b?f(It,Lr,e,n):n})),Qu=function(n){return f(It,Zu,N,n)},nf=r((function(n,e){return Qu(u(jt,n,e))})),ef=function(n){return{$:1,a:n}},rf=function(n){return u(ue,"height",Ir(n))},tf=function(n){return oe(function(n){return"script"==n?"p":n}(n))},of=function(n){return{$:2,a:n}},af=r((function(n,e){switch(e.$){case 0:return u(vr,n,e);case 1:return u(mr,n,e);case 2:return u(br,n,e);case 3:return u(pr,n,e);case 4:return u(gr,n,e);default:return u(hr,n,e)}})),cf=r((function(n,e){switch(e.$){case 0:return u(qe,n,e);case 1:return u(Je,n,e);case 2:return u(Ke,n,e);case 3:return u(Ze,n,e);case 4:return u(Qe,n,e);case 5:return u(nr,n,e);case 6:return u(er,n,e);case 7:return u(rr,n,e);default:return function(n){var e=n.sampleAlphaToCoverage;e.toggle=n.toggle,e.enabled||(n.gl.enable(n.gl.SAMPLE_ALPHA_TO_COVERAGE),e.enabled=!0)}(n)}})),lf=t((function(n,e,r){return f(dr,n,e,r)})),uf=yr,ff=s(uf,1,1,1,1),sf=t((function(n,e,r){return u(jt,(function(n){return u(n,e,r)}),n)})),df=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),vf=r((function(n,e){var r=e.bG,t=e.bH;return f(df,n*r/t,n,n*(1-r-t)/t)})),mf=Mr,bf=r((function(n,e){return function(n){var e=n.a,r=n.b,t=n.c;return f(mf,3.2406*e-1.5372*r-.4986*t,-.9689*e+1.8758*r+.0415*t,.0557*e-.204*r+1.057*t)}(u(vf,n,e))})),pf=r((function(n,e){return{dC:P(n.dC,e.dC),s:n.s*e.s+n.t*e.v+n.u*e.y,t:n.s*e.t+n.t*e.w+n.u*e.z,u:n.s*e.u+n.t*e.x+n.u*e.A,v:n.v*e.s+n.w*e.v+n.x*e.y,w:n.v*e.t+n.w*e.w+n.x*e.z,x:n.v*e.u+n.w*e.x+n.x*e.A,y:n.y*e.s+n.z*e.v+n.A*e.y,z:n.y*e.t+n.z*e.w+n.A*e.z,A:n.y*e.u+n.z*e.x+n.A*e.A,J:e.J+(n.J*e.s+n.K*e.v+n.L*e.y)*e.b6,K:e.K+(n.J*e.t+n.K*e.w+n.L*e.z)*e.b6,L:e.L+(n.J*e.u+n.K*e.x+n.L*e.A)*e.b6,b6:n.b6*e.b6}})),gf=function(n){var e=new Float64Array(16);return e[0]=n.dK,e[1]=n.dO,e[2]=n.dS,e[3]=n.dW,e[4]=n.dL,e[5]=n.dP,e[6]=n.dT,e[7]=n.dX,e[8]=n.dM,e[9]=n.dQ,e[10]=n.dU,e[11]=n.dY,e[12]=n.dN,e[13]=n.dR,e[14]=n.dV,e[15]=n.dZ,e},hf=a((function(n,e,r,t,o){return v(o,n,s(uf,t.b6,t.b6,t.b6,t.dC?1:-1),function(n){return gf({dK:n.s,dL:n.v,dM:n.y,dN:n.J,dO:n.t,dP:n.w,dQ:n.z,dR:n.K,dS:n.u,dT:n.x,dU:n.A,dV:n.L,dW:0,dX:0,dY:0,dZ:1})}(t),t.dC,e,r)})),xf=i((function(n,e,r,t,o,a){n:for(;;)switch(o.$){case 0:return a;case 5:var i=o.b;n=n,e=e,r=r,t=u(pf,o.a,t),o=i,a=a;continue n;case 1:return{P:u(Lr,d(hf,n,e,r,t,o.b),a.P),Z:a.Z,fq:a.fq};case 3:return{P:a.P,Z:u(Lr,d(hf,n,e,r,t,o.b),a.Z),fq:a.fq};case 2:return{P:a.P,Z:a.Z,fq:u(Lr,d(hf,n,e,r,t,o.a),a.fq)};default:var c=o.a;return f(Or,s(xf,n,e,r,t),a,c)}})),Cf=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),Pf=Cf,Mf=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),Tf=r((function(n,e){return{$:6,a:n,b:e}})),yf=Tf,Lf=z([s(Mf,518,!1,0,1),s(Pf,!1,!1,!1,!1),u(yf,0,1)]),wf=519,Sf=7681,Bf={src:"\n        precision lowp float;\n\n        void main() {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        }\n    ",attributes:{},uniforms:{}},Nf=Xe,$f=r((function(n,e){return{$:0,a:n,b:e}})),Df=$f({dr:1,dB:0,d6:5}),zf=Pr,Hf=Df(z([{ee:u(zf,-1,-1)},{ee:u(zf,1,-1)},{ee:u(zf,-1,1)},{ee:u(zf,1,1)}])),_f={src:"\n        precision lowp float;\n\n        attribute vec2 position;\n\n        void main() {\n            gl_Position = vec4(position, 0.0, 1.0);\n        }\n    ",attributes:{position:"ee"},uniforms:{}},Gf=function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return function(f){return{$:2,a:n,b:e,c:r,d:t,e:o,f:a,g:i,h:c,i:l,j:u,k:f}}}}}}}}}}}},Af=t((function(n,e,t){var o=n.cX,a=n.cz,i=n.dd,c=r((function(n,e){return e(n)})),l=r((function(n,e){return e(n)})),s=function(n){return u(zt,c(n.bx),u(zt,l(n.bi),u(zt,l(n.bI),l(n.bJ))))};return u(s,t,u(s,e,f(Gf,o,a,i)))})),Rf=function(n){return f(Af,{cz:n.cz,cX:n.cX,dd:n.dd},{bi:n.bi,bx:n.bx,bI:n.bI,bJ:n.bJ},{bi:n.bi,bx:n.bx,bI:n.bI,bJ:n.bJ})},kf=function(n){return d(Nf,z([Rf(n),s(Pf,!1,!1,!1,!1)]),_f,Bf,Hf,{})},Vf=kf({bi:Sf,cz:0,cX:8,bx:wf,dd:15,bI:Sf,bJ:Sf}),Ff=7680,Ef=function(n){return kf({bi:Ff,cz:15,cX:8,bx:516,dd:(e=n,u(nc,2,e+4)),bI:5386,bJ:5386});var e},If=t((function(n,e,r){return Qu(z([f(sf,n,r,Lf),z([Ef(e),Vf])]))})),jf=r((function(n,e){return Qu(u(Jr,If(n),e))})),Wf=s(Mf,513,!0,0,1),Of=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),Uf=r((function(n,e){return f(Of,32774,n,e)})),Yf=function(n){var e=n.b4,t=n.bS,o=n.bM,a=n.bK,i=n.bP,c=n.aR;return u(r((function(n,r){var i=n.b,c=n.c,l=r.a,u=r.b,f=r.c;return function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return{$:0,a:n,b:e,c:r,d:t,e:o,f:a,g:i,h:c,i:l,j:u}}}}}}}}}}}(n.a)(i)(c)(l)(u)(f)(e)(t)(o)(a)})),i,c)}({bK:0,aR:u(Uf,1,771),bM:0,bP:u(Uf,770,771),bS:0,b4:0}),Xf=z([Wf,Yf]),qf=function(n){return n.d1},Jf=function(n){return n.d4},Kf=r((function(n,e){return e-n})),Zf=function(n){return w(u(Kf,function(n){return n.d2}(n),function(n){return n.d$}(n)),u(Kf,function(n){return n.d3}(n),function(n){return n.d0}(n)),u(Kf,Jf(n),qf(n)))},Qf=function(n){return n.cI},ns=function(n){return Qf(n)},es=function(n){return{cI:{bG:n.J,bH:n.K,aB:n.L},de:{bG:n.s,bH:n.t,aB:n.u},df:{bG:n.v,bH:n.w,aB:n.x},dg:{bG:n.y,bH:n.z,aB:n.A}}},rs=r((function(n,e){var r=n.dg,t=n.df,o=n.de;return{bG:e.bG*o.bG+e.bH*o.bH+e.aB*o.aB,bH:e.bG*t.bG+e.bH*t.bH+e.aB*t.aB,aB:e.bG*r.bG+e.bH*r.bH+e.aB*r.aB}})),ts=r((function(n,e){var r=n.cI,t=e.bG-r.bG,o=e.bH-r.bH,a=e.aB-r.aB,i=n.dg,c=n.df,l=n.de;return{bG:t*l.bG+o*l.bH+a*l.aB,bH:t*c.bG+o*c.bH+a*c.aB,aB:t*i.bG+o*i.bH+a*i.aB}})),os=function(n){return n.de},as=function(n){return n.df},is=function(n){return n.dg},cs=r((function(n,e){return{cI:u(ts,n,Qf(e)),de:u(rs,n,os(e)),df:u(rs,n,as(e)),dg:u(rs,n,is(e))}})),ls=t((function(n,e,r){return{bG:n,bH:e,aB:r}})),us=r((function(n,e){return u(dt,n,e)})),fs=r((function(n,e){return 0>T(n,e)?n:e})),ss=r((function(n,e){return u(fs,n,e)})),ds=r((function(n,e){var r=e,t=n;return{d$:u(us,t.d$,r.d$),d0:u(us,t.d0,r.d0),d1:u(us,t.d1,r.d1),d2:u(ss,t.d2,r.d2),d3:u(ss,t.d3,r.d3),d4:u(ss,t.d4,r.d4)}})),vs=r((function(n,e){return e+n})),ms=r((function(n,e){var r=n.a,t=n.c,o=ju(Iu(n.b)),a=ju(Iu(r)),i=ju(Iu(t)),c=function(n){return w(n.bG,n.bH,n.aB)}(e),l=c.a,f=c.b,s=c.c;return{d$:u(vs,a,l),d0:u(vs,o,f),d1:u(vs,i,s),d2:u(Kf,a,l),d3:u(Kf,o,f),d4:u(Kf,i,s)}})),bs=o((function(n,e,r,t){var o=r.eJ,a=2*r.e$*e,i=2*r.e_*e,c=2*r.eZ*e,l=o.aB*e,s=o.bH*e,d=o.bG*e,v=is(n),m=Nc(c*v.bG)+Nc(i*v.bH)+Nc(a*v.aB),b=as(n),p=Nc(c*b.bG)+Nc(i*b.bH)+Nc(a*b.aB),g=os(n),h=Nc(c*g.bG)+Nc(i*g.bH)+Nc(a*g.aB),x=u(ms,w(h,p,m),u(ts,n,f(ls,d,s,l)));return Vr(t.$?x:u(ds,t.a,x))})),ps=o((function(n,e,r,t){n:for(;;){if(!t.b)return r;var o=t.a,a=t.b;switch(o.$){case 0:n=c=n,e=l=e,r=f=r,t=a;continue n;case 1:var i=s(bs,n,e,o.a,r);n=c=n,e=l=e,r=f=i,t=a;continue n;case 2:n=c=n,e=l=e,r=f=r,t=a;continue n;case 3:i=s(bs,n,e,o.a,r),n=c=n,e=l=e,r=f=i,t=a;continue n;case 4:var c=n,l=e,f=s(ps,n,e,r,o.a);n=c,e=l,r=f,t=a;continue n;default:var d=o.a,v=o.b,m=u(cs,es(d),n),b=e*d.b6;n=c=n,e=l=e,r=f=s(ps,m,b,r,z([v])),t=a;continue n}}})),gs=function(n){return n[0]},hs=function(n){return n[1]},xs=function(n){return n[2]},Cs=function(n){return{$:4,a:n}},Ps=r((function(n,e){for(;;){if(!n.b)return e;var r=n.a;n=n.b,e=u(Lr,r,e)}})),Ms=function(n){return Cs(u(Ps,n,N))},Ts={dC:!0,s:1,t:0,u:0,v:0,w:1,x:0,y:0,z:0,A:1,J:0,K:0,L:0,b6:1},ys=kf({bi:Sf,cz:0,cX:8,bx:wf,dd:255,bI:Sf,bJ:Sf}),Ls={bM:0,eI:!1,bS:0,cT:0,b4:0,c7:0,bG:0,bH:0,aB:0},ws=r((function(n,e){return gf({dK:n.bG,dL:n.b4,dM:e.bG,dN:e.b4,dO:n.bH,dP:n.bS,dQ:e.bH,dR:e.bS,dS:n.aB,dT:n.bM,dU:e.aB,dV:e.bM,dW:n.c7,dX:n.cT,dY:e.c7,dZ:e.cT})})),Ss=L({bp:u(ws,Ls,Ls),bW:u(ws,Ls,Ls),bX:u(ws,Ls,Ls),bY:u(ws,Ls,Ls)},s(uf,0,0,0,0)),Bs=r((function(n,e){return n*e})),Ns=function(n){return-n},$s=function(n){return s(Mf,515,n.af,n.aa,n._)},Ds=z([$s({_:1,aa:0,af:!0}),Rf({bi:Ff,cz:240,cX:0,bx:514,dd:0,bI:Ff,bJ:Ff}),Yf]),zs=r((function(n,e){var r=n,t=e.eW,o=e.eB,a=Iu(e.ff),i=Iu(t),c=r.cV;if(c.$){var l=c.a;return Rc(i)?gf({dK:2/(o*l),dL:0,dM:0,dN:0,dO:0,dP:2/l,dQ:0,dR:0,dS:0,dT:0,dU:0,dV:-1,dW:0,dX:0,dY:0,dZ:1}):gf({dK:2/(o*l),dL:0,dM:0,dN:0,dO:0,dP:2/l,dQ:0,dR:0,dS:0,dT:0,dU:-2/(i-a),dV:-(i+a)/(i-a),dW:0,dX:0,dY:0,dZ:1})}var u=c.a;return Rc(i)?gf({dK:1/(o*u),dL:0,dM:0,dN:0,dO:0,dP:1/u,dQ:0,dR:0,dS:0,dT:0,dU:-1,dV:-2*a,dW:0,dX:0,dY:-1,dZ:0}):gf({dK:1/(o*u),dL:0,dM:0,dN:0,dO:0,dP:1/u,dQ:0,dR:0,dS:0,dT:0,dU:-(i+a)/(i-a),dV:-2*i*a/(i-a),dW:0,dX:0,dY:-1,dZ:0})})),Hs=r((function(n,e){return 1==(1&n>>e)?0:1})),_s=t((function(n,e,r){return Qu(u(jt,(function(r){var t=r<<4;return f(sf,n,L(e,s(uf,u(Hs,r,0),u(Hs,r,1),u(Hs,r,2),u(Hs,r,3))),function(n){return z([$s({_:1,aa:0,af:!0}),Rf({bi:Ff,cz:240,cX:n,bx:514,dd:0,bI:Ff,bJ:Ff}),Yf])}(t))}),u(qr,1,u(nc,2,r)-1)))})),Gs=function(n){return{bG:-n.bG,bH:-n.bH,aB:-n.aB}},As=function(n){return Gs(is(n))},Rs={bG:1,bH:0,aB:0},ks=Rs,Vs=Ou,Fs={bG:0,bH:0,aB:1},Es=Fs,Is={cI:Eu,de:ks,df:Vs,dg:Es},js=r((function(n,e){var r,t,o,a,i;return t=Qf(r=u(cs,e,n)),o=is(r),a=as(r),i=os(r),gf({dK:i.bG,dL:a.bG,dM:o.bG,dN:t.bG,dO:i.bH,dP:a.bH,dQ:o.bH,dR:t.bH,dS:i.aB,dT:a.aB,dU:o.aB,dV:t.aB,dW:0,dX:0,dY:0,dZ:1})})),Ws=function(n){return os(n)},Os=t((function(n,e,r){return{bG:n,bH:e,aB:r}})),Us=function(n){return as(n)},Ys=r((function(n,e){var r,t=z([ef(1),of(0),Xu(!0),s(Ku,0,0,0,0)]),o=function(){var e=n.ez;switch(e.$){case 0:return w(t,"0",1);case 1:return w(u(Lr,qu,t),"1",1);default:return w(t,"0",e.a)}}(),a=o.a,i=o.b,c=o.c,l=n.dq,d=l.a,m=l.b,b=u(Ll,"height",Ir(m)+"px"),p=d,g=p/m,h=u(nf,(function(e){return function(n){var e=function(n){return n.da}(n.eG),r={cI:ns(e),de:Ws(e),df:Us(e),dg:Gs(As(e))},t=Ms(n.dv),o=s(ps,r,1,Fr,z([t]));if(1===o.$)return N;var a=o.a,i=u(js,Is,e),c=u(Bs,.99,u(us,Iu(n.eL),Ns(qf(a)))),l=Zf(a),d=function(n){var e=n,r=u(dt,Nc(e.bG),u(dt,Nc(e.bH),Nc(e.aB)));if(r){var t=e.aB/r,o=e.bH/r,a=e.bG/r;return Su(a*a+o*o+t*t)*r}return 0}(f(Os,l.a,l.b,l.c)),m=u(Bs,1.01,u(vs,d,Ns(Jf(a)))),b=u(zs,n.eG,{eB:n.eB,eW:m,ff:c}),p=function(n){return{dK:n[0],dO:n[1],dS:n[2],dW:n[3],dL:n[4],dP:n[5],dT:n[6],dX:n[7],dM:n[8],dQ:n[9],dU:n[10],dY:n[11],dN:n[12],dR:n[13],dV:n[14],dZ:n[15]}}(b).dZ,g=p?Gs(As(e)):ns(e),h=function(){var e=n.fA;switch(e.$){case 0:return L(0,0);case 1:return L(1,0);case 2:return L(2,0);case 3:return L(3,e.a);case 4:return L(4,e.a);default:return L(5,0)}}(),x=h.a,C=h.b,P=u(bf,n.eT,n.fG),M=gf({dK:0,dL:g.bG,dM:gs(P),dN:n.eq,dO:0,dP:g.bH,dQ:hs(P),dR:d,dS:0,dT:g.aB,dU:xs(P),dV:x,dW:0,dX:p,dY:0,dZ:C}),T=v(xf,M,i,b,Ts,t,{P:N,Z:N,fq:N}),y=n.fa;switch(y.$){case 0:return Qu(z([f(sf,T.P,L(w=y.a,ff),Xf),f(sf,T.Z,Ss,Xf)]));case 1:var w=y.a;return Qu(z([f(sf,T.P,Ss,Xf),z([ys]),f(sf,T.fq,w.bp,Lf),z([Ef(0)]),f(sf,T.P,L(w,ff),Ds),f(sf,T.Z,Ss,Xf)]));default:var S=y.a,B=y.b;return Qu(z([f(sf,T.P,L(B,ff),Xf),z([ys]),u(jf,T.fq,S),f(_s,T.P,B,Ur(S)),f(sf,T.Z,Ss,Xf)]))}}({eB:g,eG:n.eG,eL:n.eL,dv:e.dv,eT:e.eT,fa:e.fa,eq:c,fA:e.fA,fG:e.fG})}),e),x=u(Ll,"width",Ir(p)+"px"),C=function(n){var e,r,t=n.b,o=n.c,a=n.d,i=function(n){return ec(1e4*n)/100};return e=z(["rgba(",Gc(i(n.a)),"%,",Gc(i(t)),"%,",Gc(i(o)),"%,",Gc((r=a,ec(1e3*r)/1e3)),")"]),u(jr,"",e)}(n.dk);return f(tf,"div",z([u(Ll,"padding","0px"),x,b]),z([L(i,f(lf,a,z([(r=ec(p*c),u(ue,"width",Ir(r))),rf(ec(m*c)),x,b,u(Ll,"display","block"),u(Ll,"background-color",C)]),h))]))})),Xs=function(n){return n.eC},qs=o((function(n,e,r,t){return{$:2,a:n,b:e,c:r,d:t}})),Js=o((function(n,e,r,t){return{$:3,a:n,b:e,c:r,d:t}})),Ks=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),Zs=o((function(n,e,r,t){return{$:6,a:n,b:e,c:r,d:t}})),Qs=o((function(n,e,r,t){return{$:7,a:n,b:e,c:r,d:t}})),nd=o((function(n,e,r,t){return{$:5,a:n,b:e,c:r,d:t}})),ed=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),rd=function(n){switch(n.$){case 0:return n;case 1:return s(ed,n.a,n.b,n.c,1);case 2:return s(qs,n.a,n.b,n.c,1);case 3:return s(Js,n.a,n.b,n.c,1);case 4:return s(Ks,n.a,n.b,n.c,1);case 5:return s(nd,n.a,n.b,n.c,1);case 6:return s(Zs,n.a,n.b,n.c,1);case 7:return s(Qs,n.a,n.b,n.c,1);case 8:case 9:default:return n}},td={$:0},od=l((function(n,e,r,t,o,a,i,c){for(;;){if(!c.b)return{d$:e,d0:t,d1:a,d2:n,d3:r,d4:o};var l=c.b,f=i(c.a);n=u(ss,f.d2,n),e=u(us,f.d$,e),r=u(ss,f.d3,r),t=u(us,f.d0,t),o=u(ss,f.d4,o),a=u(us,f.d1,a),i=i,c=l}})),ad=t((function(n,e,r){var t=n(e);return b(od,t.d2,t.d$,t.d3,t.d0,t.d4,t.d1,n,r)})),id=r((function(n,e){return 1>T(e,n)})),cd=function(n){return u(id,n.d$,n.d2)&&u(id,n.d0,n.d3)&&u(id,n.d1,n.d4)?n:{d$:u(us,n.d2,n.d$),d0:u(us,n.d3,n.d0),d1:u(us,n.d4,n.d1),d2:u(ss,n.d2,n.d$),d3:u(ss,n.d3,n.d0),d4:u(ss,n.d4,n.d1)}},ld=function(n){return n},ud=function(n){return n.bG},fd=function(n){return n.bH},sd=function(n){return n.aB},dd=function(n){var e=n.a,r=n.b,t=n.c,o=ud(e),a=fd(e),i=sd(e),c=ud(r),l=fd(r),f=sd(r),s=ud(t),d=fd(t),v=sd(t);return cd({d$:u(us,o,u(us,c,s)),d0:u(us,a,u(us,l,d)),d1:u(us,i,u(us,f,v)),d2:u(ss,o,u(ss,c,s)),d3:u(ss,a,u(ss,l,d)),d4:u(ss,i,u(ss,f,v))})},vd=function(n){return new Float64Array([n.bG,n.bH,n.aB])},md=function(n){return vd(n)},bd=function(n){return vd(n)},pd=r((function(n,e){var r=n,t=e,o=u(dt,Nc(t.bG),u(dt,Nc(t.bH),Nc(t.aB)));if(o){var a=t.aB/o,i=t.bH/o,c=t.bG/o,l=Su(c*c+i*i+a*a);return{bG:r*c/l,bH:r*i/l,aB:r*a/l}}return Ru})),gd=pd(1),hd=t((function(n,e,r){return gd(u(Nu,u(Du,e,r),u(Du,n,e)))})),xd=function(n){var e=n.a,r=n.b,t=n.c,o=bd(f(hd,e,r,t));return w({p:o,ee:md(e)},{p:o,ee:md(r)},{p:o,ee:md(t)})},Cd=r((function(n,e){return{$:2,a:n,b:e}})),Pd=Cd({dr:3,dB:0,d6:4}),Md=t((function(n,e,r){return w(n,e,r)})),Td=t((function(n,e,r){return{bG:n,bH:e,aB:r}})),yd=(Oo=u(Bs,-.5,1),Uo=u(Bs,-.5,1),Yo=u(Bs,-.5,1),Xo=f(Td,Yo,Uo,Oo),qo=u(Bs,.5,1),Jo=f(Td,Yo,Uo,qo),Ko=u(Bs,.5,1),Zo=f(Td,Yo,Ko,Oo),Qo=f(Td,Yo,Ko,qo),na=u(Bs,.5,1),ea=f(Td,na,Uo,Oo),ra=f(Td,na,Ko,Oo),ta=f(Td,na,Uo,qo),oa=f(Td,na,Ko,qo),rd(function(n){if(n.b){var e=n.a,r=n.b,t=Pd(u(jt,xd,n));return s(qs,f(ad,dd,e,r),n,t,0)}return td}(z([f(Md,Xo,ra,ea),f(Md,Xo,Zo,ra),f(Md,Jo,ta,oa),f(Md,Jo,oa,Qo),f(Md,ea,ra,oa),f(Md,ea,oa,ta),f(Md,Xo,Qo,Zo),f(Md,Xo,Jo,Qo),f(Md,Xo,ea,ta),f(Md,Xo,ta,Jo),f(Md,Zo,oa,ra),f(Md,Zo,Qo,oa)])))),Ld={$:0},wd=t((function(n,e,r){return{$:1,a:n,b:e,c:r}})),Sd=t((function(n,e,r){var t=e.a,o=e.b,a=n(e.c),i=n(o),c=n(t),l=bd(f(hd,c,i,a)),s={p:l,ee:md(c)},d={p:l,ee:md(i)},v={p:l,ee:md(a)};return u(Lr,s,u(Lr,d,u(Lr,v,r)))})),Bd=function(n){return n.F},Nd=o((function(n,e,r,t){return 1===e.$||1===r.$||1===t.$?Fr:Vr(f(n,e.a,r.a,t.a))})),$d=4294967295>>>32-it,Dd=h,zd=t((function(n,e,r){for(;;){var t=u(Dd,$d&e>>>n,r);if(t.$)return u(Dd,$d&e,t.a);n-=it,e=e,r=t.a}})),Hd=r((function(n,e){var r=e.a,t=e.b,o=e.c,a=e.d;return 0>n||T(n,r)>-1?Fr:T(n,function(n){return n>>>5<<5}(r))>-1?Vr(u(Dd,$d&n,a)):Vr(f(zd,t,n,o))})),_d=function(n){return n.ap},Gd=r((function(n,e){return u(Hd,n,_d(e))})),Ad=t((function(n,e,r){for(;;){var t=u(mt,nt,n),o=t.a,a=t.b;if(0>T(st(o),nt))return u(gt,!0,{B:e,m:r,r:o});n=a,e=u(Lr,ut(o),e),r+=1}})),Rd=function(n){return n.b?f(Ad,n,N,0):ct},kd=r((function(n,e){return!u(Hc,u(go,zc,n),e)})),Vd=r((function(n,e){return f(It,r((function(e,r){return n(e)?u(Lr,e,r):r})),N,e)})),Fd=r((function(n,e){var r=function(n){return n.a}(n),t=function(n){var e=n.a,t=n.b,o=n.c;return e>=0&&0>T(e,r)&&t>=0&&0>T(t,r)&&o>=0&&0>T(o,r)};return u(kd,t,e)?{F:e,ap:n}:{F:u(Vd,t,e),ap:n}})),Ed=t((function(n,e,r){return{$:3,a:n,b:e,c:r}})),Id=Ed({dr:1,dB:3,d6:4}),jd=r((function(n,e){var r=e;return L(w(n.bG,n.bH,n.aB),w(r.bG,r.bH,r.aB))})),Wd=r((function(n,e){n:for(;;){if(-2===e.$)return Fr;var r=e.c,t=e.d,o=e.e;switch(u(So,n,e.b)){case 0:n=n,e=t;continue n;case 1:return Vr(r);default:n=n,e=o;continue n}}})),Od=f(mf,0,0,0),Ud=i((function(n,e,r,t,o,a){var i=a.a,c=a.b,l=a.c,f=u(Wd,u(jd,n,e),o);if(f.$){var s={p:Od,ee:md(e)},d={p:Od,ee:md(n)},v=l+1;return w(u(Lr,w(r,l,v),u(Lr,w(r,v,t),i)),u(Lr,s,u(Lr,d,c)),l+2)}return w(u(Lr,w(r,f.a,t),i),c,l)})),Yd=a((function(n,e,r,t,o){for(;;){if(!r.b)return L(o.a,Zr(o.b));var a=r.a,i=a.a,c=a.b,l=r.b,u=n(a.c),f=n(c),s=n(i),d=t+2,m=t+1,b=n,p=e,g=l,h=t+3,x=v(Ud,u,s,d,t,e,v(Ud,f,u,m,d,e,v(Ud,s,f,t,m,e,o)));n=b,e=p,r=g,t=h,o=x}})),Xd=a((function(n,e,r,t,o){for(;;){if(!e.b)return w(t,o,r);var a=e.a,i=a.a,c=a.b,l=e.b,s=n(a.c),d=n(c),v=n(i),m=r+2,b=r+1,p=r,g=f(No,u(jd,v,s),m,f(No,u(jd,s,d),b,f(No,u(jd,d,v),p,o)));n=n,e=l,r+=3,t=u(Lr,w(p,b,m),t),o=g}})),qd=t((function(n,e,r){var o,a=u(ko,(function(n){var e=n.a,r=n.b,a=n.c;return s(Nd,t((function(n,e,r){return w(n,e,r)})),u(Gd,e,o),u(Gd,r,o),u(Gd,a,o))}),Bd(o=r)),i=f(It,Sd(e),N,a),c=d(Xd,e,a,0,N,Mo),l=d(Yd,e,c.b,a,0,w(c.a,N,c.c)),v=l.a,m=l.b,b=m.b?B(i,m):i;return f(wd,n,u(Fd,Rd(b),v),u(Id,b,v))})),Jd=function(n){return{F:u(jt,(function(n){return w(3*n,3*n+1,3*n+2)}),u(qr,0,Ur(n)-1)),ap:Rd(Qu(u(jt,(function(n){return z([n.a,n.b,n.c])}),n)))}},Kd=function(n){switch(n.$){case 0:return Ld;case 1:case 2:return f(qd,n.a,Ht,Jd(u(jt,ld,n.b)));case 3:return f(qd,n.a,Ht,n.b);case 4:case 5:case 6:case 7:return f(qd,n.a,(function(n){return n.ee}),n.b);case 8:case 9:default:return Ld}},Zd=Kd(yd),Qd=function(n){return n.dq},nv={$:0},ev=nv,rv=r((function(n,e){return{$:1,a:n,b:e}})),tv={src:"\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        void main () {\n            gl_FragColor = texture2D(colorTexture, interpolatedUv);\n        }\n    ",attributes:{},uniforms:{colorTexture:"bQ"}},ov=function(n){return{$:5,a:n}},av=ov(1029),iv=ov(1028),cv=t((function(n,e,r){return 1===e?u(Lr,n?av:iv,r):r})),lv={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute mediump vec2 uv;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedUv = uv;\n        }\n    ",attributes:{position:"ee",uv:"N"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},uv=o((function(n,e,r,t){return u(rv,e,l((function(e,o,a,i,c,l,u,s){return d(Nf,f(cv,i,t,s),lv,tv,r,{bQ:n,b:a,c:o,d:l,e:e,f:c})})))})),fv={src:"\n        precision lowp float;\n        \n        uniform lowp vec3 constantColor;\n        \n        void main () {\n            gl_FragColor = vec4(constantColor, 1.0);\n        }\n    ",attributes:{},uniforms:{constantColor:"aF"}},sv={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{position:"ee"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},dv=o((function(n,e,r,t){return u(rv,e,l((function(e,o,a,i,c,l,u,s){return d(Nf,f(cv,i,t,s),sv,fv,r,{aF:n,b:a,c:o,d:l,e:e,f:c})})))})),vv=r((function(n,e){return{$:3,a:n,b:e}})),mv={src:"\n        precision lowp float;\n        \n        uniform lowp vec3 constantColor;\n        uniform lowp float pointRadius;\n        uniform highp mat4 sceneProperties;\n        \n        float pointAlpha(float pointRadius, vec2 pointCoord) {\n            float pointSize = 2.0 * pointRadius;\n            float x = (pointSize + 2.0) * (pointCoord.s - 0.5);\n            float y = (pointSize + 2.0) * (pointCoord.t - 0.5);\n            float r = sqrt(x * x + y * y);\n            float innerRadius = pointRadius;\n            float outerRadius = pointRadius + 1.0;\n            if (r > outerRadius) {\n                return 0.0;\n            } else if (r > innerRadius) {\n                return outerRadius - r;\n            } else {\n                return 1.0;\n            }\n        }\n        \n        void main () {\n            float supersampling = sceneProperties[3][0];\n            float alpha = pointAlpha(pointRadius * supersampling, gl_PointCoord);\n            gl_FragColor = vec4(constantColor, alpha);\n        }\n    ",attributes:{},uniforms:{constantColor:"aF",pointRadius:"b2",sceneProperties:"e"}},bv={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform lowp float pointRadius;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            float supersampling = sceneProperties[3][0];\n            gl_PointSize = 2.0 * pointRadius * supersampling + 2.0;\n        }\n    ",attributes:{position:"ee"},uniforms:{modelMatrix:"b",modelScale:"c",pointRadius:"b2",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},pv=o((function(n,e,r,t){return u(vv,r,l((function(r,o,a,i,c,l,u,f){return d(Nf,f,bv,mv,t,{aF:n,b:a,c:o,b2:e,d:l,e:r,f:c})})))})),gv={src:"\n        precision mediump float;\n        \n        uniform mediump vec3 emissiveColor;\n        uniform highp mat4 sceneProperties;\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{emissiveColor:"aV",sceneProperties:"e"}},hv=Tr,xv=a((function(n,e,r,t,o){return u(rv,r,l((function(r,a,i,c,l,s,v,m){return d(Nf,f(cv,c,o,m),sv,gv,t,{aV:u(hv,e,n),b:i,c:a,d:s,e:r,f:l})})))})),Cv={src:"\n        precision mediump float;\n        \n        uniform mediump vec3 emissiveColor;\n        uniform lowp float pointRadius;\n        uniform highp mat4 sceneProperties;\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        float pointAlpha(float pointRadius, vec2 pointCoord) {\n            float pointSize = 2.0 * pointRadius;\n            float x = (pointSize + 2.0) * (pointCoord.s - 0.5);\n            float y = (pointSize + 2.0) * (pointCoord.t - 0.5);\n            float r = sqrt(x * x + y * y);\n            float innerRadius = pointRadius;\n            float outerRadius = pointRadius + 1.0;\n            if (r > outerRadius) {\n                return 0.0;\n            } else if (r > innerRadius) {\n                return outerRadius - r;\n            } else {\n                return 1.0;\n            }\n        }\n        \n        void main () {\n            vec4 color = toSrgb(emissiveColor, sceneProperties);\n            float supersampling = sceneProperties[3][0];\n            float alpha = pointAlpha(pointRadius * supersampling, gl_PointCoord);\n            gl_FragColor = vec4(color.rgb, alpha);\n        }\n    ",attributes:{},uniforms:{emissiveColor:"aV",pointRadius:"b2",sceneProperties:"e"}},Pv=a((function(n,e,r,t,o){return u(vv,t,l((function(t,a,i,c,l,f,s,v){return d(Nf,v,bv,Cv,o,{aV:u(hv,e,n),b:i,c:a,b2:r,d:f,e:t,f:l})})))})),Mv={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 materialColor;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{enabledLights:"U",lights12:"bp",lights34:"bW",lights56:"bX",lights78:"bY",materialColor:"cA",sceneProperties:"e",viewMatrix:"f"}},Tv={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n        }\n    ",attributes:{normal:"p",position:"ee"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},yv=o((function(n,e,r,t){return u(rv,e,l((function(e,o,a,i,c,l,u,s){var v=u.a,m=u.b;return d(Nf,f(cv,i,t,s),Tv,Mv,r,{U:m,bp:v.bp,bW:v.bW,bX:v.bX,bY:v.bY,cA:n,b:a,c:o,d:l,e:e,f:c})})))})),Lv={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D materialColorTexture;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n            vec3 materialColor = fromSrgb(texture2D(materialColorTexture, interpolatedUv).rgb);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{enabledLights:"U",lights12:"bp",lights34:"bW",lights56:"bX",lights78:"bY",materialColorTexture:"cB",normalMapTexture:"a0",sceneProperties:"e",useNormalMap:"a7",viewMatrix:"f"}},wv={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        attribute mediump vec2 uv;\n        attribute highp vec3 tangent;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getWorldTangent(vec3 modelTangent, vec4 modelScale, mat4 modelMatrix) {\n            return (modelMatrix * vec4(safeNormalize(modelScale.xyz * modelTangent), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = uv;\n            interpolatedTangent = getWorldTangent(tangent, modelScale, modelMatrix);\n        }\n    ",attributes:{normal:"p",position:"ee",tangent:"es",uv:"N"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Sv=i((function(n,e,r,t,o,a){return u(rv,t,l((function(t,i,c,l,u,s,v,m){var b=v.a,p=v.b;return d(Nf,f(cv,l,a,m),wv,Lv,o,{U:p,bp:b.bp,bW:b.bW,bX:b.bX,bY:b.bY,cB:n,b:c,c:i,a0:e,d:s,e:t,a7:r,f:u})})))})),Bv={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D baseColorTexture;\n        uniform lowp vec4 constantBaseColor;\n        uniform mediump sampler2D roughnessTexture;\n        uniform lowp vec2 constantRoughness;\n        uniform mediump sampler2D metallicTexture;\n        uniform lowp vec2 constantMetallic;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getFloatValue(sampler2D texture, vec2 uv, vec2 constantValue) {\n            if (constantValue.y == 1.0) {\n                return constantValue.x;\n            } else {\n                vec4 textureColor = texture2D(texture, uv);\n                return dot(textureColor, vec4(0.2126, 0.7152, 0.0722, 0.0));\n            }\n        }\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 baseColor = fromSrgb(texture2D(baseColorTexture, interpolatedUv).rgb) * (1.0 - constantBaseColor.w) + constantBaseColor.rgb * constantBaseColor.w;\n            float roughness = getFloatValue(roughnessTexture, interpolatedUv, constantRoughness);\n            float metallic = getFloatValue(metallicTexture, interpolatedUv, constantMetallic);\n        \n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{baseColorTexture:"ce",constantBaseColor:"ch",constantMetallic:"ci",constantRoughness:"cj",enabledLights:"U",lights12:"bp",lights34:"bW",lights56:"bX",lights78:"bY",metallicTexture:"cE",normalMapTexture:"a0",roughnessTexture:"c$",sceneProperties:"e",useNormalMap:"a7",viewMatrix:"f"}},Nv={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 baseColor;\n        uniform lowp float roughness;\n        uniform lowp float metallic;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{baseColor:"cd",enabledLights:"U",lights12:"bp",lights34:"bW",lights56:"bX",lights78:"bY",metallic:"cD",roughness:"c_",sceneProperties:"e",viewMatrix:"f"}},$v=i((function(n,e,r,t,o,a){return u(rv,t,l((function(t,i,c,l,u,s,v,m){var b=v.a,p=v.b;return d(Nf,f(cv,l,a,m),Tv,Nv,o,{cd:n,U:p,bp:b.bp,bW:b.bW,bX:b.bX,bY:b.bY,cD:r,b:c,c:i,d:s,c_:e,e:t,f:u})})))})),Dv=r((function(n,e){return{$:1,a:n,b:e}})),zv=r((function(n,e){return e.$?L(e.a.D,1):L(n,0)})),Hv=s(uf,0,0,0,0),_v=r((function(n,e){var r;return e.$?L(e.a.D,Hv):L(n,s(uf,gs(r=e.a),hs(r),xs(r),1))})),Gv=r((function(n,e){var r,t=L(n,e);return t.a.$?u(Dv,L(r=t.a.a.D,Hv),u(zv,r,e)):t.b.$?u(Dv,u(_v,r=t.b.a.D,n),u(zv,r,e)):{$:0,a:t.a.a}})),Av=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),Rv=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),kv=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),Vv=u(zf,0,0),Fv=r((function(n,e){return e.$?L(e.a.D,Vv):L(n,u(zf,e.a,1))})),Ev=o((function(n,e,r,t){var o,a=s(kv,n,e,r,t);return a.a.$?s(Rv,L(o=a.a.a.D,Hv),u(Fv,o,e),u(Fv,o,r),u(zv,o,t)):a.b.$?s(Rv,u(_v,o=a.b.a.D,n),L(o,Vv),u(Fv,o,r),u(zv,o,t)):a.c.$?s(Rv,u(_v,o=a.c.a.D,n),u(Fv,o,e),L(o,Vv),u(zv,o,t)):a.d.$?s(Rv,u(_v,o=a.d.a.D,n),u(Fv,o,e),u(Fv,o,r),L(o,1)):f(Av,a.a.a,a.b.a,a.c.a)})),Iv={src:"\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        uniform mediump float backlight;\n        uniform highp mat4 sceneProperties;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            vec3 emissiveColor = fromSrgb(texture2D(colorTexture, interpolatedUv).rgb) * backlight;\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{backlight:"ca",colorTexture:"bQ",sceneProperties:"e"}},jv=a((function(n,e,r,t,o){return u(rv,r,l((function(r,a,i,c,l,u,s,v){return d(Nf,f(cv,c,o,v),lv,Iv,t,{ca:e,bQ:n,b:i,c:a,d:u,e:r,f:l})})))})),Wv={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        attribute mediump vec2 uv;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = uv;\n            interpolatedTangent = vec3(0.0, 0.0, 0.0);\n        }\n    ",attributes:{normal:"p",position:"ee",uv:"N"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Ov=o((function(n,e,r,t){return u(rv,e,l((function(e,o,a,i,c,l,u,s){var v=u.a,m=u.b;return d(Nf,f(cv,i,t,s),Wv,Lv,r,{U:m,bp:v.bp,bW:v.bW,bX:v.bX,bY:v.bY,cB:n,b:a,c:o,a0:n,d:l,e:e,a7:0,f:c})})))})),Uv=function(n){return e(9,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return n(e,r,t,o,a,i,c,l,u)}}}}}}}}}))}((function(n,e,r,t,o,a,i,c,s){return u(rv,i,l((function(i,l,u,v,m,b,p,g){var h=p.a,x=p.b;return d(Nf,f(cv,v,s,g),Wv,Bv,c,{ce:n,ch:e,ci:a,cj:t,U:x,bp:h.bp,bW:h.bW,bX:h.bX,bY:h.bY,cE:o,b:u,c:l,a0:n,d:b,c$:r,e:i,a7:0,f:m})})))})),Yv=t((function(n,e,r){return r>.5?e+(1-r)*(n-e):n+r*(e-n)})),Xv=function(n){return f(Td,function(n){return f(Yv,n.d2,n.d$,.5)}(n),function(n){return f(Yv,n.d3,n.d0,.5)}(n),function(n){return f(Yv,n.d4,n.d1,.5)}(n))},qv=function(n){var e=Zf(n),r=e.a,t=e.b,o=e.c;return{eJ:Xv(n),eZ:r/2,e_:t/2,e$:o/2}},Jv=r((function(n,e){switch(n.$){case 0:if(n.b.$){var r=n.b.a.D;switch(e.$){case 0:case 1:case 2:case 3:case 4:return ev;case 5:case 6:case 7:return o=e.c,a=e.d,s(uv,r,qv(G=e.a),o,a);case 8:case 9:default:return ev}}else{var t=n.b.a;switch(e.$){case 0:return ev;case 1:var o=e.c,a=e.d;return s(dv,t,qv(G=e.a),o,a);case 2:case 3:case 4:return o=e.c,a=e.d,s(dv,t,qv(G=e.a),o,a);case 5:case 6:case 7:return o=e.c,a=e.d,s(dv,t,qv(G=e.a),o,a);case 8:case 9:return o=e.c,s(dv,t,qv(G=e.a),o,0);default:return o=e.d,s(pv,t,e.b,qv(G=e.a),o)}}case 1:if(n.b.$)switch(r=n.b.a.D,c=n.c,e.$){case 0:case 1:case 2:case 3:case 4:return ev;case 5:case 6:case 7:return o=e.c,a=e.d,d(jv,r,c,qv(G=e.a),o,a);case 8:case 9:default:return ev}else{var i=n.b.a,c=n.c;switch(e.$){case 0:return ev;case 1:case 2:case 3:case 4:case 5:case 6:case 7:return o=e.c,a=e.d,d(xv,i,c,qv(G=e.a),o,a);case 8:case 9:return o=e.c,d(xv,i,c,qv(G=e.a),o,0);default:return o=e.d,d(Pv,i,c,e.b,qv(G=e.a),o)}}case 2:var m=u(Gv,n.b,n.c);if(m.$){var b=m.a.a,p=m.b,g=p.a,h=p.b;switch(e.$){case 0:case 1:case 2:case 3:case 4:case 5:return ev;case 6:return o=e.c,C=e.d,s(Ov,b,qv(G=e.a),o,C);case 7:return o=e.c,C=e.d,v(Sv,b,g,h,qv(G=e.a),o,C);case 8:case 9:default:return ev}}else{var x=m.a;switch(e.$){case 0:case 1:return ev;case 2:o=e.c;var C=e.d;return s(yv,x,qv(G=e.a),o,C);case 3:return ev;case 4:return o=e.c,C=e.d,s(yv,x,qv(G=e.a),o,C);case 5:return ev;case 6:case 7:return o=e.c,C=e.d,s(yv,x,qv(G=e.a),o,C);case 8:case 9:default:return ev}}default:var P=s(Ev,n.b,n.c,n.d,n.e);if(P.$){var M=P.a,T=M.a,y=M.b,L=P.b,w=L.a,S=L.b,B=P.c,N=B.a,$=B.b,D=P.d;switch(g=D.a,h=D.b,e.$){case 0:case 1:case 2:case 3:case 4:case 5:return ev;case 6:return o=e.c,a=e.d,function(n,e,r,t,o,a,i,c,l,u){return 9===n.a?n.f(e,r,t,o,a,i,c,l,u):n(e)(r)(t)(o)(a)(i)(c)(l)(u)}(Uv,T,y,w,S,N,$,qv(G=e.a),o,a);case 7:return G=e.a,o=e.c,a=e.d,function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(s){return function(v){return function(m){return u(rv,s,l((function(l,u,s,b,p,g,h,x){var C=h.a,P=h.b;return d(Nf,f(cv,b,m,x),wv,Bv,v,{ce:n,ch:e,ci:a,cj:t,U:P,bp:C.bp,bW:C.bW,bX:C.bX,bY:C.bY,cE:o,b:s,c:u,a0:i,d:g,c$:r,e:l,a7:c,f:p})})))}}}}}}}}}}}(T)(y)(w)(S)(N)($)(g)(h)(qv(G))(o)(a);case 8:case 9:default:return ev}}else{var z=P.a,H=P.b,_=P.c;switch(e.$){case 0:case 1:return ev;case 2:return o=e.c,a=e.d,v($v,z,H,_,qv(G=e.a),o,a);case 3:return ev;case 4:return o=e.c,a=e.d,v($v,z,H,_,qv(G=e.a),o,a);case 5:return ev;case 6:return o=e.c,a=e.d,v($v,z,H,_,qv(G=e.a),o,a);case 7:var G;return o=e.c,a=e.d,v($v,z,H,_,qv(G=e.a),o,a);case 8:case 9:default:return ev}}}})),Kv=function(n){return n.bG},Zv=function(n){return n.bH},Qv=function(n){return n.aB},nm=function(n){var e=n,r=Qv(e.dg),t=Zv(e.dg),o=Kv(e.dg),a=Qv(e.df),i=Zv(e.df),c=Kv(e.df),l=Qv(e.de),u=Zv(e.de),f=Kv(e.de);return f*i*r+u*a*o+l*c*t-l*i*o-u*c*r-f*a*t>0},em=r((function(n,e){return{$:5,a:n,b:e}})),rm=r((function(n,e){var r=e;switch(r.$){case 0:return ev;case 5:var t=r.b;return u(em,u(pf,r.a,n),t);case 1:case 3:case 2:default:return u(em,n,r)}})),tm=r((function(n,e){return u(rm,function(n){var e=Qf(n),r=is(n),t=as(n),o=os(n);return{dC:nm(n),s:o.bG,t:o.bH,u:o.aB,v:t.bG,w:t.bH,x:t.aB,y:r.bG,z:r.bH,A:r.aB,J:e.bG,K:e.bH,L:e.aB,b6:1}}(n),e)})),om=function(n){return{$:2,a:n}},am=r((function(n,e){var r=n.a,t=n.b,o=n.c,a=e.eJ;return{eJ:{bG:r*a.bG,bH:t*a.bH,aB:o*a.aB},eZ:r*e.eZ,e_:t*e.e_,e$:o*e.e$}})),im=function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){var f,s=n.a,d=n.b,v=n.c,m=function(n){return{bG:n[0],bH:n[1],aB:n[2],ex:n[3]}}(t),p=(f={ex:m.ex,bG:m.bG*s,bH:m.bH*d,aB:m.aB*v},new Float64Array([f.bG,f.bH,f.aB,f.ex]));return b(e,r,p,o,a,i,c,l,u)}}}}}}}}}},cm=r((function(n,e){switch(e.$){case 0:return nv;case 5:return u(em,e.a,u(cm,n,e.b));case 1:var r=e.b;return u(rv,u(am,n,e.a),u(im,n,r));case 3:return e;case 2:return om(u(im,n,r=e.a));default:var t=e.a;return Cs(u(jt,cm(n),t))}})),lm=r((function(n,e){return u(cm,n,e)})),um={src:"\n        precision lowp float;\n        \n        void main () {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        }\n    ",attributes:{},uniforms:{}},fm=f(Af,{cz:0,cX:0,dd:15},{bi:Ff,bx:wf,bI:Ff,bJ:7683},{bi:Ff,bx:wf,bI:Ff,bJ:7682}),sm=f(Af,{cz:0,cX:0,dd:15},{bi:Ff,bx:wf,bI:Ff,bJ:7682},{bi:Ff,bx:wf,bI:Ff,bJ:7683}),dm=r((function(n,e){return u(Lr,n?sm:fm,e)})),vm={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 shadowVertexPosition(vec3 position, vec3 normal, mat4 shadowLight, vec4 modelScale, mat4 modelMatrix, mat4 viewMatrix, mat4 projectionMatrix, mat4 sceneProperties) {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            vec3 worldNormal = getWorldNormal(normal, vec4(modelScale.xyz, 1.0), modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 directionToLight = getDirectionToLight(worldPosition.xyz, xyz_type, rgb_parameter);\n            vec3 offset = vec3(0.0, 0.0, 0.0);\n            float sceneDiameter = sceneProperties[3][1];\n            if (dot(directionToLight, worldNormal) <= 0.0) {\n                offset = -sceneDiameter * directionToLight;\n            } else {\n                offset = -0.001 * sceneDiameter * directionToLight;\n            }\n            vec4 offsetPosition = worldPosition + vec4(offset, 0.0);\n            return projectionMatrix * (viewMatrix * offsetPosition);\n        }\n        \n        void main () {\n            gl_Position = shadowVertexPosition(\n                position,\n                normal,\n                shadowLight,\n                modelScale,\n                modelMatrix,\n                viewMatrix,\n                projectionMatrix,\n                sceneProperties\n            );\n        }\n    ",attributes:{normal:"p",position:"ee"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"b7",viewMatrix:"f"}},mm=function(n){var e=function(n){if(n.$){var e=n.c;return Vr(l((function(n,r,t,o,a,i,c,l){return d(Nf,u(dm,o,l),vm,um,e,{b:t,c:r,d:i,e:n,b7:c,f:a})})))}return Fr}(n);return e.$?ev:om(e.a)},bm=o((function(n,e,r,t){var o,a=u(Jv,r,yd),i=(o=L(n,e)).a?o.b?Ms(z([a,mm(Zd)])):a:o.b?mm(Zd):ev,c=Qd(t),l=c.a,f=c.b,s=c.c;return u(tm,Xs(t),u(lm,w(l,f,s),i))})),pm=r((function(n,e){return s(bm,!0,!0,n,e)})),gm=function(n){return{$:0,a:n}},hm=r((function(n,e){return{$:0,a:n,b:e}})),xm=function(n){return n.l},Cm=k,Pm=function(n){return Cm(n)},Mm=r((function(n,e){return e/n})),Tm=V,ym=function(n){var e=n;return{bG:Cm(e),bH:Tm(e)}},Lm=r((function(n,e){var r=n.ee;return u(Lr,{p:bd(n.p),ee:md(r)},e)})),wm=c((function(n,e,r,t,o,a,i){for(;;){if(!i.b)return cd({d$:e,d0:t,d1:a,d2:n,d3:r,d4:o});var c=i.a,l=i.b,f=xs(c.ee),s=hs(c.ee),d=gs(c.ee);n=u(fs,n,d),e=u(dt,e,d),r=u(fs,r,s),t=u(dt,t,s),o=u(fs,o,f),a=u(dt,a,f),i=l}})),Sm=r((function(n,e){var r=xs(n.ee),t=hs(n.ee),o=gs(n.ee);return m(wm,o,o,t,t,r,r,e)})),Bm={bG:0,bH:0,aB:-1},Nm=r((function(n,e){var r=n.df,t=n.de;return{bG:e.bG*t.bG+e.bH*r.bG,bH:e.bG*t.bH+e.bH*r.bH,aB:e.bG*t.aB+e.bH*r.aB}})),$m=function(n){return Tm(n)},Dm=function(n){return 6.283185307179586*n},zm={cI:Eu,de:ks,df:Vs},Hm=(aa=u(Mm,72,Dm(1)),ia=Fs,ca=Bm,ua=f(Td,0,0,la=u(Bs,.5,1)),sa=f(Td,0,0,fa=u(Bs,-.5,1)),rd(function(n){var e=f(Sr,Lm,N,_d(n));if(e.b){var r=e.a,t=e.b,o=u(Id,e,Bd(n));return s(Ks,u(Sm,r,t),n,o,0)}return td}(Jd(Qu(u(jt,(function(n){var e=u(Bs,n,aa),r=u(Nm,zm,ym(e)),t=u(Bs,Pm(e),1),o=u(Bs,$m(e),1),a=f(Td,t,o,la),i=f(Td,t,o,fa),c=u(Bs,u(Tc,72,n+1),aa),l=u(Nm,zm,ym(c)),s=u(Bs,Pm(c),1),d=u(Bs,$m(c),1),v=f(Td,s,d,fa),m=f(Td,s,d,la);return z([w({p:ca,ee:sa},{p:ca,ee:v},{p:ca,ee:i}),w({p:r,ee:i},{p:l,ee:v},{p:l,ee:m}),w({p:r,ee:i},{p:l,ee:m},{p:r,ee:a}),w({p:ia,ee:ua},{p:ia,ee:a},{p:ia,ee:m})])}),u(qr,0,71))))))),_m=Kd(Hm),Gm=function(n){return n.eO},Am=function(n){return n.cI},Rm=function(n){return n.e8},km=function(n){return n.fm},Vm=o((function(n,e,r,t){var o,a=function(n){var e=Gm(n),r=Vu(e),t=r.a,o=r.b;return{cI:Am(n),de:t,df:o,dg:e}}(xm(t)),i=u(Jv,r,Hm),c=(o=L(n,e)).a?o.b?Ms(z([i,mm(_m)])):i:o.b?mm(_m):ev,l=km(t),f=Rm(t);return u(tm,a,u(lm,w(l,l,f),c))})),Fm=r((function(n,e){return s(Vm,!0,!0,n,e)})),Em={src:"\n        precision highp float;\n        \n        attribute lowp float triangleVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 triangleVertexPositions;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleVertex), triangleVertexPositions, position, normal);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{triangleVertex:"c6"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",triangleVertexPositions:"bD",viewMatrix:"f"}},Im={src:"\n        precision highp float;\n        \n        attribute lowp float triangleVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 triangleVertexPositions;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleVertex), triangleVertexPositions, position, normal);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n        }\n    ",attributes:{triangleVertex:"c6"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",triangleVertexPositions:"bD",viewMatrix:"f"}},jm=function(n){var e=n.a,r=n.b,t=n.c;return gf({dK:e.bG,dL:r.bG,dM:t.bG,dN:0,dO:e.bH,dP:r.bH,dQ:t.bH,dR:0,dS:e.aB,dT:r.aB,dU:t.aB,dV:0,dW:0,dX:0,dY:0,dZ:0})},Wm=Pd(z([w({c6:0},{c6:1},{c6:2})])),Om=r((function(n,e){var r=dd(e),t=qv(r);switch(n.$){case 0:if(n.b.$)return ev;var o=n.b.a;return u(rv,t,l((function(n,r,t,a,i,c,l,u){return d(Nf,f(cv,a,0,u),Em,fv,Wm,{aF:o,b:t,c:r,d:c,e:n,bD:jm(e),f:i})})));case 1:if(n.b.$)return ev;var a=n.b.a,i=n.c;return u(rv,t,l((function(n,r,t,o,c,l,s,v){return d(Nf,f(cv,o,0,v),Em,gv,Wm,{aV:u(hv,i,a),b:t,c:r,d:l,e:n,bD:jm(e),f:c})})));case 2:var c=u(Gv,n.b,n.c);if(c.$)return ev;var v=c.a;return u(rv,t,l((function(n,r,t,o,a,i,c,l){var u=c.a,s=c.b;return d(Nf,f(cv,o,0,l),Im,Mv,Wm,{U:s,bp:u.bp,bW:u.bW,bX:u.bX,bY:u.bY,cA:v,b:t,c:r,d:i,e:n,bD:jm(e),f:a})})));default:var m=s(Ev,n.b,n.c,n.d,n.e);if(m.$)return ev;var b=m.a,p=m.b,g=m.c;return u(rv,t,l((function(n,r,t,o,a,i,c,l){var u=c.a,s=c.b;return d(Nf,f(cv,o,0,l),Im,Nv,Wm,{cd:b,U:s,bp:u.bp,bW:u.bW,bX:u.bX,bY:u.bY,cD:g,b:t,c:r,d:i,c_:p,e:n,bD:jm(e),f:a})})))}})),Um=(da=z([{a6:u(zf,0,1)},{a6:u(zf,1,1)},{a6:u(zf,2,1)},{a6:u(zf,0,-1)},{a6:u(zf,1,-1)},{a6:u(zf,2,-1)}]),va=z([w(0,1,2),w(3,5,4),w(3,4,1),w(3,1,0),w(4,5,2),w(4,2,1),w(5,3,0),w(5,0,2)]),u(Id,da,va)),Ym={src:"\n        precision highp float;\n        \n        attribute highp vec2 triangleShadowVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        uniform highp mat4 triangleVertexPositions;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 shadowVertexPosition(vec3 position, vec3 normal, mat4 shadowLight, vec4 modelScale, mat4 modelMatrix, mat4 viewMatrix, mat4 projectionMatrix, mat4 sceneProperties) {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            vec3 worldNormal = getWorldNormal(normal, vec4(modelScale.xyz, 1.0), modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 directionToLight = getDirectionToLight(worldPosition.xyz, xyz_type, rgb_parameter);\n            vec3 offset = vec3(0.0, 0.0, 0.0);\n            float sceneDiameter = sceneProperties[3][1];\n            if (dot(directionToLight, worldNormal) <= 0.0) {\n                offset = -sceneDiameter * directionToLight;\n            } else {\n                offset = -0.001 * sceneDiameter * directionToLight;\n            }\n            vec4 offsetPosition = worldPosition + vec4(offset, 0.0);\n            return projectionMatrix * (viewMatrix * offsetPosition);\n        }\n        \n        void main () {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleShadowVertex.x), triangleVertexPositions, position, normal);\n            normal *= triangleShadowVertex.y;\n            gl_Position = shadowVertexPosition(\n                position,\n                normal,\n                shadowLight,\n                modelScale,\n                modelMatrix,\n                viewMatrix,\n                projectionMatrix,\n                sceneProperties\n            );\n        }\n    ",attributes:{triangleShadowVertex:"a6"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"b7",triangleVertexPositions:"bD",viewMatrix:"f"}},Xm=function(n){return om(l((function(e,r,t,o,a,i,c,l){return d(Nf,u(dm,o,l),Ym,um,Um,{b:t,c:r,d:i,e:e,b7:c,bD:jm(n),f:a})})))},qm=o((function(n,e,r,t){var o=u(Om,r,t),a=L(n,e);return a.a?a.b?Ms(z([o,Xm(t)])):o:a.b?Xm(t):ev})),Jm=r((function(n,e){return s(qm,!0,!0,n,e)})),Km=r((function(n,e){var r=sd(e),t=sd(n),o=fd(e),a=fd(n),i=ud(e),c=ud(n);return{d$:u(us,c,i),d0:u(us,a,o),d1:u(us,t,r),d2:u(ss,c,i),d3:u(ss,a,o),d4:u(ss,t,r)}})),Zm={src:"\n        precision highp float;\n        \n        attribute lowp float lineSegmentVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp vec3 lineSegmentStartPoint;\n        uniform highp vec3 lineSegmentEndPoint;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = (1.0 - lineSegmentVertex) * lineSegmentStartPoint + lineSegmentVertex * lineSegmentEndPoint;\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{lineSegmentVertex:"dJ"},uniforms:{lineSegmentEndPoint:"dH",lineSegmentStartPoint:"dI",modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Qm=r((function(n,e){return{$:1,a:n,b:e}}))({dr:2,dB:0,d6:1})(z([L({dJ:0},{dJ:1})])),nb=r((function(n,e){var r,t=u(Km,(r=e).a,r.b),o=qv(t),a=e.a,i=e.b;switch(n.$){case 0:if(n.b.$)return ev;var c=n.b.a;return u(rv,o,l((function(n,e,r,t,o,l,u,f){return d(Nf,f,Zm,fv,Qm,{aF:c,dH:md(i),dI:md(a),b:r,c:e,d:l,e:n,f:o})})));case 1:if(n.b.$)return ev;c=n.b.a;var f=n.c;return u(rv,o,l((function(n,e,r,t,o,l,s,v){return d(Nf,v,Zm,gv,Qm,{aV:u(hv,f,c),dH:md(i),dI:md(a),b:r,c:e,d:l,e:n,f:o})})));case 2:default:return ev}})),eb=r((function(n,e){return u(nb,n,e)})),rb=t((function(n,e,r){return{$:2,a:n,b:e,c:r}})),tb=function(n){return f(Yu,0,1,n>.04045?u(nc,(n+.055)/1.055,2.4):n/12.92)},ob=function(n){return f(rb,0,gm(function(n){var e=wc(n),r=e.cn,t=e.cf;return f(mf,tb(e.cW),tb(r),tb(t))}(n)),gm(0))},ab=function(n){return n.eJ},ib=function(n){return n.fm},cb=r((function(n,e){return n/e})),lb=a((function(n,e,r,t,o){for(;;){var a=t(e/r),i=u(Lr,a,o);if(P(e,n))return i;n=n,e-=1,r=r,t=t,o=i}})),ub=r((function(n,e){return 1>n?N:d(lb,0,n,n,e,N)})),fb=r((function(n,e){var r=n.ee,t=n.N,o=t.a,a=t.b;return u(Lr,{p:bd(n.p),ee:md(r),N:u(zf,o,a)},e)})),sb=r((function(n,e){var r=n,t=e,o=Cm(t);return{bG:o*Cm(r),bH:o*Tm(r),aB:Tm(t)}})),db=(ma=u(qr,0,71),ba=u(ub,72,u(Yv,0,Dm(1))),pa=tt(36),ga=u(qr,0,pa-1),ha=u(ub,pa,u(Yv,wu(90),wu(-90))),xa=Rd(Qu(u(jt,(function(n){return u(jt,(function(e){return{p:u(sb,n,e),ee:f(Td,u(Bs,Pm(e)*Pm(n),1),u(Bs,Pm(e)*$m(n),1),u(Bs,$m(e),1)),N:L(u(cb,n,Dm(1)),u(cb,u(vs,wu(90),e),wu(180)))}}),ha)}),ba))),Ca=r((function(n,e){return n*(pa+1)+e})),Pa=Qu(u(jt,(function(n){return Qu(u(jt,(function(e){var r=u(Ca,n+1,e),t=u(Ca,n,e),o=u(Ca,n+1,e+1),a=u(Ca,n,e+1);return z([w(a,o,r),w(a,r,t)])}),ga))}),ma)),rd(function(n){var e=f(Sr,fb,N,_d(n));if(e.b){var r=e.a,t=e.b,o=u(Id,e,Bd(n));return s(Zs,u(Sm,r,t),n,o,0)}return td}(u(Fd,xa,Pa)))),vb=r((function(n,e){for(;;){var r=u(Tc,144,2*n+3),t=u(Tc,144,2*n+2),o=2*n+1,a=2*n,i=u(Lr,w(144,a,t),u(Lr,w(a,r,t),u(Lr,w(a,o,r),u(Lr,w(o,145,r),e))));if(!n)return i;n-=1,e=i}})),mb=t((function(n,e,r){return r>.5?e+(1-r)*(n-e):n+r*(e-n)})),bb=(Ma=u(r((function(n,e){for(;;){var r=f(mb,0,6.283185307179586,n/72),t=u(Lr,{bL:r,b$:0,b5:1},u(Lr,{bL:r,b$:1,b5:1},e));if(!n)return t;n-=1,e=t}})),71,z([{bL:0,b$:0,b5:0},{bL:0,b$:1,b5:0}])),u(Id,Ma,u(vb,71,N))),pb={src:"\n        precision highp float;\n        \n        attribute highp float angle;\n        attribute highp float offsetScale;\n        attribute highp float radiusScale;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const lowp float kPerspectiveProjection = 0.0;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec3 perpendicularTo(vec3 d) {\n            float absX = abs(d.x);\n            float absY = abs(d.y);\n            float absZ = abs(d.z);\n            if (absX <= absY) {\n                if (absX <= absZ) {\n                    float scale = 1.0 / length(d.zy);\n                    return vec3(0.0, -d.z * scale, d.y * scale);\n                } else {\n                    float scale = 1.0 / length(d.xy);\n                    return vec3(-d.y * scale, d.x * scale, 0.0);\n                }\n            } else {\n                if (absY <= absZ) {\n                    float scale = 1.0 / length(d.xz);\n                    return vec3(d.z * scale, 0.0, -d.x * scale);\n                } else {\n                    float scale = 1.0 / length(d.xy);\n                    return vec3(-d.y * scale, d.x * scale, 0.0);\n                }\n            }\n        }\n        \n        void main () {\n            vec4 worldCenter = getWorldPosition(vec3(0.0, 0.0, 0.0), modelScale, modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 zDirection = getDirectionToLight(worldCenter.xyz, xyz_type, rgb_parameter);\n            vec3 xDirection = perpendicularTo(zDirection);\n            vec3 yDirection = cross(zDirection, xDirection);\n            float r = modelScale.x;\n            float adjustedRadius = r;\n            float zOffset = 0.0;\n            if (xyz_type.w == kPointLight) {\n                float distanceToLight = length(xyz_type.xyz - worldCenter.xyz);\n                float rSquared = r * r;\n                zOffset = rSquared / distanceToLight;\n                float zSquared = zOffset * zOffset;\n                adjustedRadius = sqrt(rSquared - zSquared) * radiusScale;\n            }\n            vec3 worldPosition =\n                worldCenter.xyz\n                    + zDirection * zOffset\n                    + xDirection * adjustedRadius * cos(angle)\n                    + yDirection * adjustedRadius * sin(angle);\n            vec3 directionToLight = getDirectionToLight(worldPosition, xyz_type, rgb_parameter);\n            float sceneDiameter = sceneProperties[3][1];\n            vec3 offset = -sceneDiameter * offsetScale * directionToLight;\n            vec4 offsetPosition = vec4(worldPosition + offset, 1.0);\n            gl_Position = projectionMatrix * (viewMatrix * offsetPosition);\n        }\n    ",attributes:{angle:"bL",offsetScale:"b$",radiusScale:"b5"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"b7",viewMatrix:"f"}},gb=function(){return om(l((function(n,e,r,t,o,a,i,c){return d(Nf,u(dm,!0,c),pb,um,bb,{aF:f(mf,0,0,1),b:r,c:e,d:a,e:n,b7:i,f:o})})))},hb=r((function(n,e){return u(rm,function(n){return{dC:!0,s:1,t:0,u:0,v:0,w:1,x:0,y:0,z:0,A:1,J:n.bG,K:n.bH,L:n.aB,b6:1}}(n),e)})),xb=o((function(n,e,r,t){var o,a=u(Jv,r,db),i=(o=L(n,e)).a?o.b?Ms(z([a,gb()])):a:o.b?gb():ev,c=ib(t);return u(hb,u(Du,Eu,ab(t)),u(lm,w(c,c,c),i))})),Cb=r((function(n,e){return s(xb,!0,!0,n,e)})),Pb=function(n){switch(n.$){case 0:var e=n.b;return z([u(pm,ob(n.a),e)]);case 1:var r=n.b;return z([u(Jm,ob(n.a),r)]);case 3:var t=n.b;return z([u(Cb,ob(n.a),t)]);case 2:var o=n.b;return z([u(Fm,ob(n.a),o)]);case 4:var a=n.b;return z([u(eb,(i=n.a,u(hm,0,gm(function(n){var e=wc(n);return f(mf,e.cW,e.cn,e.cf)}(i)))),a)]);default:return u(nf,Pb,n.a)}var i},Mb=r((function(n,e){return r={ez:n.ez,dk:n.eD,eG:n.eG,eL:n.eL,dq:L(ec(n.ad.dc),ec(n.ad.co)),dv:(t=e,u(nf,Pb,t)),eT:n.eT,fa:n.fa,fA:n.fA,fG:n.fG},u(Ys,{ez:r.ez,dk:r.dk,eG:r.eG,eL:r.eL,dq:r.dq},z([{dv:r.dv,eT:r.eT,fa:r.fa,fA:r.fA,fG:r.fG}]));var r,t})),Tb=r((function(n,e){var r=n,t=e.eO,o=t.bG,a=t.bH,i=t.aB,c=u(bf,e.cp,e.bO);return{bM:xs(c),eI:r,bS:hs(c),cT:0,b4:gs(c),c7:1,bG:-o,bH:-a,aB:-i}})),yb={bG:.37208,bH:.37529},Lb=r((function(n,e){return{$:2,a:n,b:e}})),wb=function(n){return{$:0,a:n}},Sb=function(n){return n.eI},Bb=wb(Ss.a),Nb=r((function(n,e){return f(It,r((function(e,r){var t=r.a,o=r.b;return n(e)?L(u(Lr,e,t),o):L(t,u(Lr,e,o))})),L(N,N),e)})),$b=function(n){return gf({dK:n.bG,dL:n.b4,dM:0,dN:0,dO:n.bH,dP:n.bS,dQ:0,dR:0,dS:n.aB,dT:n.bM,dU:0,dV:0,dW:n.c7,dX:n.cT,dY:0,dZ:0})},Db=l((function(n,e,r,t,o,a,i,c){var l=u(Nb,Sb,z([n,e,r,t])),f=l.a;if(f.b){var s=B(f,l.b);if(s.b&&s.b.b&&s.b.b.b&&s.b.b.b.b&&!s.b.b.b.b.b){var d=s.a,v=s.b,m=v.a,b=v.b,p=b.a,g=b.b.a;return u(Lb,u(jt,$b,f),{bp:u(ws,d,m),bW:u(ws,p,g),bX:u(ws,o,a),bY:u(ws,i,c)})}return Bb}return wb({bp:u(ws,n,e),bW:u(ws,r,t),bX:u(ws,o,a),bY:u(ws,i,c)})})),zb=o((function(n,e,r,t){return b(Db,n,e,r,t,Ls,Ls,Ls,Ls)})),Hb=r((function(n,e){return u(ri,0,Ei(u(ko,(function(e){var r=e.b.b;return P(e.a,n)?Vr(r):Fr}),e.X)))})),_b=r((function(n,e){return u(Hb,n,e.aS)})),Gb={$:5},Ab={bG:.44757,bH:.40745},Rb=s(Ki,114/255,159/255,207/255,1),kb={$:1},Vb=r((function(n,e){var r=n,t=e.ee,o=t.bG,a=t.bH,i=t.aB,c=u(bf,e.cp,e.bO);return{bM:xs(c),eI:r,bS:hs(c),cT:0,b4:gs(c),c7:2,bG:o,bH:a,aB:i}})),Fb=function(n){return u(Vb,!0,{bO:n.bO,cp:n.cp,ee:n.ee})},Eb=s(Ki,52/255,101/255,164/255,1),Ib=r((function(n,e){return{$:0,a:n,b:e}})),jb=r((function(n,e){return T(e,n)>-1})),Wb=r((function(n,e){return n+.5*(e-n)})),Ob={bG:-1,bH:0,aB:0},Ub={bG:0,bH:-1,aB:0},Yb=i((function(n,e,r,t,o,a){var i=u(jb,r,a)?Fs:Bm,c=u(jb,e,o)?Ou:Ub,l=u(jb,n,t)?Rs:Ob,s=w(Iu(u(Kf,n,t)),Iu(u(Kf,e,o)),Iu(u(Kf,r,a)));return{eC:{cI:f(Td,u(Wb,n,t),u(Wb,e,o),u(Wb,r,a)),de:l,df:c,dg:i},dq:s}})),Xb=r((function(n,e){return v(Yb,ud(n),fd(n),sd(n),ud(e),fd(e),sd(e))})),qb=r((function(n,e){var r=e/2;return u(Ib,n,u(Xb,f(ls,-r,-r,-r),f(ls,r,r,r)))})),Jb=function(n){return{$:5,a:n}},Kb=function(n){return Jb(n)},Zb=s(Ki,138/255,226/255,52/255,1),Qb=s(Ki,173/255,127/255,168/255,1),np=r((function(n,e){return{$:2,a:n,b:e}})),ep=r((function(n,e){return{$:4,a:n,b:e}})),rp=r((function(n,e){return{$:3,a:n,b:e}})),tp=r((function(n,e){return{$:1,a:n,b:e}})),op=t((function(n,e,r){return{bG:n,bH:e,aB:r}})),ap=r((function(n,e){return{bG:e.bG+n.bG,bH:e.bH+n.bH,aB:e.aB+n.aB}})),ip=r((function(n,e){return{cI:u(ap,n,Qf(e)),de:os(e),df:as(e),dg:is(e)}})),cp=r((function(n,e){return{eC:u(ip,n,Xs(e)),dq:Qd(e)}})),lp=r((function(n,e){return{eO:e,cI:n}})),up=r((function(n,e){var r=e;return u(lp,u(ap,n,r.cI),r.eO)})),fp=r((function(n,e){var r=e;return{l:u(up,n,r.l),e8:r.e8,fm:r.fm}})),sp=r((function(n,e){var r=e.b;return L(n(e.a),n(r))})),dp=r((function(n,e){return u(sp,ap(n),e)})),vp=r((function(n,e){return{eJ:e,fm:Iu(n)}})),mp=r((function(n,e){return u(vp,ib(e),u(ap,n,ab(e)))})),bp=r((function(n,e){var r=e.b,t=e.c;return w(n(e.a),n(r),n(t))})),pp=r((function(n,e){return u(bp,ap(n),e)})),gp=r((function(n,e){var r=n.a,t=n.b,o=n.c,a=f(op,r,t,o);switch(e.$){case 0:return u(Ib,e.a,u(cp,a,e.b));case 1:return u(tp,e.a,u(pp,a,e.b));case 3:return u(rp,e.a,u(mp,a,e.b));case 2:return u(np,e.a,u(fp,a,e.b));case 4:return u(ep,e.a,u(dp,a,e.b));default:var i=e.a;return Jb(u(jt,gp(w(r,t,o)),i))}})),hp=function(n){return gp(w(n,0,0))},xp=function(n){return gp(w(0,n,0))},Cp=t((function(n,e,r){var t=n,o=r,a=.5*e,i=Cm(a),c=Tm(a),l=t.eO,u=l.bG*c,f=i*u,s=u*u,d=l.bH*c,v=i*d,m=u*d,b=d*d,p=l.aB*c,g=i*p,h=u*p,x=d*p,C=p*p;return{bG:(1-2*(b+C))*o.bG+2*(m-g)*o.bH+2*(h+v)*o.aB,bH:2*(m+g)*o.bG+(1-2*(s+C))*o.bH+2*(x-f)*o.aB,aB:2*(h-v)*o.bG+2*(x+f)*o.bH+(1-2*(s+b))*o.aB}})),Pp=t((function(n,e,r){var t=n,o=r,a=.5*e,i=Cm(a),c=Tm(a),l=t.cI,u=o.bG-l.bG,f=o.bH-l.bH,s=o.aB-l.aB,d=t.eO,v=d.bG*c,m=i*v,b=v*v,p=d.bH*c,g=i*p,h=v*p,x=p*p,C=d.aB*c,P=i*C,M=v*C,T=p*C,y=C*C;return{bG:l.bG+(1-2*(x+y))*u+2*(h-P)*f+2*(M+g)*s,bH:l.bH+2*(h+P)*u+(1-2*(b+y))*f+2*(T-m)*s,aB:l.aB+2*(M-g)*u+2*(T+m)*f+(1-2*(b+x))*s}})),Mp=t((function(n,e,r){return{cI:f(Pp,n,e,Qf(r)),de:f(Cp,n,e,os(r)),df:f(Cp,n,e,as(r)),dg:f(Cp,n,e,is(r))}})),Tp=t((function(n,e,r){return{eC:f(Mp,n,e,Xs(r)),dq:Qd(r)}})),yp=r((function(n,e){var r=u(Pp,n,e),t=u(Cp,n,e);return function(n){var e=n;return u(lp,r(e.cI),t(e.eO))}})),Lp=t((function(n,e,r){var t=r;return{l:f(yp,n,e,t.l),e8:t.e8,fm:t.fm}})),wp=t((function(n,e,r){return u(sp,u(Pp,n,e),r)})),Sp=t((function(n,e,r){return u(vp,ib(r),f(Pp,n,e,ab(r)))})),Bp=t((function(n,e,r){return u(bp,u(Pp,n,e),r)})),Np=t((function(n,e,r){switch(r.$){case 0:return u(Ib,r.a,f(Tp,n,e,r.b));case 1:return u(tp,r.a,f(Bp,n,e,r.b));case 3:return u(rp,r.a,f(Sp,n,e,r.b));case 2:return u(np,r.a,f(Lp,n,e,r.b));case 4:return u(ep,r.a,f(wp,n,e,r.b));default:var t=r.a;return Jb(u(jt,u(Np,n,e),t))}})),$p=u(lp,Eu,ks),Dp=r((function(n,e){return f(Np,$p,n,e)})),zp=u(lp,Eu,Vs),Hp=r((function(n,e){return f(Np,zp,n,e)})),_p=u(lp,Eu,Es),Gp=r((function(n,e){return f(Np,_p,n,e)})),Ap=r((function(n,e){return(e-ft(e/n)*n)/n})),Rp=r((function(n,e){return 360*u(Ap,n,e)})),kp=E,Vp=function(n){return n*Tu/180},Fp=r((function(n,e){var r=e.a,t=e.b,o=e.c;return u(tp,n,f(Md,f(ls,r.bG,r.bH,r.aB),f(ls,t.bG,t.bH,t.aB),f(ls,o.bG,o.bH,o.aB)))})),Ep=(Ta=Su(3)/2,ya=u(Fp,cc,w({bG:Ta,bH:0,aB:0},{bG:0,bH:.5,aB:0},{bG:0,bH:-.5,aB:0})),La=u(hp,-Ta/3,u(Hp,kp(1/3),ya)),u(xp,-Ta/3,u(Dp,Vp(90),Kb(z([u(hp,-Ta/3,ya),La,u(Gp,Vp(120),La),u(Gp,Vp(240),La)]))))),Ip=function(n){var e=function(e){return u(Gp,u(Rp,300,n.a5),u(Hp,u(Rp,300,n.a5),u(Dp,u(Rp,300,n.a5),e)))};return Kb(z([u(xp,2,u(hp,-2,e(u(qb,Zb,1)))),u(xp,2,u(hp,2,e(u(qb,Eb,1)))),u(xp,4,e(u(qb,Qb,1))),u(xp,1.5,e(Ep))]))},jp=r((function(n,e){var r=w(e.a/2,e.b/2,e.c/2),t=r.a,o=r.b,a=r.c;return u(Ib,n,u(Xb,f(ls,-t,-o,-a),f(ls,t,o,a)))})),Wp=t((function(n,e,r){return{l:u(lp,n,e),e8:Iu(r.e8),fm:Iu(r.fm)}})),Op=t((function(n,e,r){return u(np,n,f(Wp,Eu,Ou,{e8:r,fm:e}))})),Up=t((function(n,e,r){return{bG:n.bG+e*(r.bG-n.bG),bH:n.bH+e*(r.bH-n.bH),aB:n.aB+e*(r.aB-n.aB)}})),Yp=t((function(n,e,r){var t=Xs(r),o=os(t),a=as(t),i=is(t),c=f(Up,n,e,Qf(t)),l=0>e?{cI:c,de:Gs(o),df:Gs(a),dg:Gs(i)}:{cI:c,de:o,df:a,dg:i},s=Qd(r),d=s.b,v=s.c;return{eC:l,dq:w(Iu(u(Bs,e,s.a)),Iu(u(Bs,e,d)),Iu(u(Bs,e,v)))}})),Xp=function(n){return Gm(xm(n))},qp=t((function(n,e,r){var t=Iu(u(Bs,e,km(r))),o=Iu(u(Bs,e,Rm(r))),a=0>e?Gs(Xp(r)):Xp(r),i=f(Up,n,e,function(n){return Am(xm(n))}(r));return{l:u(lp,i,a),e8:o,fm:t}})),Jp=t((function(n,e,r){return u(sp,u(Up,n,e),r)})),Kp=t((function(n,e,r){return u(vp,u(Bs,Nc(e),ib(r)),f(Up,n,e,ab(r)))})),Zp=t((function(n,e,r){return u(bp,u(Up,n,e),r)})),Qp=r((function(n,e){switch(e.$){case 0:return u(Ib,e.a,f(Yp,Eu,n,e.b));case 1:return u(tp,e.a,f(Zp,Eu,n,e.b));case 3:return u(rp,e.a,f(Kp,Eu,n,e.b));case 2:return u(np,e.a,f(qp,Eu,n,e.b));case 4:return u(ep,e.a,f(Jp,Eu,n,e.b));default:var r=e.a;return Jb(u(jt,Qp(n),r))}})),ng=(wa=Kb(z([u(qb,cc,1),u(Hp,Vp(45),u(qb,cc,1))])),Kb(z([Kb(z([wa,u(xp,-.4,u(Qp,1.3,wa))])),u(xp,-.7,f(Op,cc,1,.5))]))),eg=s(Ki,211/255,215/255,207/255,1),rg=s(Ki,193/255,125/255,17/255,1),tg=o((function(n,e,r,t){var o=w(n,e,r),a=o.a,i=o.b,c=o.c,l=c>.5?c+i-c*i:c*(i+1),u=2*c-l,f=function(n){var e=0>n?n+1:n>1?n-1:n;return 1>6*e?u+(l-u)*e*6:1>2*e?l:2>3*e?u+(l-u)*(2/3-e)*6:u},d=f(a-1/3),v=f(a),m=f(a+1/3);return s(Ki,m,v,d,t)})),og=t((function(n,e,r){return s(tg,n,e,r,1)})),ag=o((function(n,e,r,t){return n+(e-n)*(1+Cm(6.283185307179586*u(Ap,r,t)))/2})),ig=function(n){var e=u(_b,"number of tree blocks",n);return Kb(z([u(jp,rg,w(.2,8,.2)),Kb(u(jt,(function(r){var t=u(fs,2,.2*(e-r)),o=f(og,s(ag,r/e,1,10,n.a5),.6,.6);return u(Hp,u(_b,"turning speed of the tree",n)*r*s(ag,3,5,10,n.a5),u(xp,1.2*r*.25,u(jp,o,w(t,.25,t))))}),u(qr,0,ft(e)-1)))]))},cg=function(n){var e=function(n){return u(xp,-1,u(jp,n,w(10,1,10)))},r=function(n){return Kb(z([e(n),u(Hp,Vp(45),e(n))]))};return u(Hp,u(Rp,1e3,n.a5),Kb(z([ng,r(eg),u(xp,-.1,u(Qp,1.1,r(Eb))),u(xp,-.2,u(Qp,1.2,r(eg))),u(xp,1,u(hp,5,ig(n))),Kb(u(jt,(function(n){return u(Hp,Vp(45*n),u(xp,-1/3,u(hp,5.5,u(Qp,2,Ep))))}),u(qr,1,7)))])))},lg=s(Ki,245/255,121/255,0,1),ug=function(n){return Kb(u(jt,(function(e){return u(xp,4,u(Gp,u(Rp,1e3,n.a5),u(Dp,u(Rp,1e3,n.a5),u(Hp,-u(Rp,200,n.a5),u(Hp,-e/14*Vp(360),u(hp,1.3,u(xp,s(ag,-1,1,10,n.a5),u(Dp,u(Rp,600,n.a5),u(Gp,u(Rp,300,n.a5),u(qb,lg,.3))))))))))}),u(qr,0,13)))},fg=function(n){return gp(w(0,0,n))},sg=r((function(n,e){return u(rp,n,u(vp,e,Eu))})),dg=function(n){return Kb(z([u(Hp,-u(Rp,640,n.a5),u(fg,3.5,u(Gp,u(Rp,100,n.a5),Kb(z([u(hp,-.02,u(sg,Rb,.5)),u(hp,.02,u(sg,Zb,.5))])))))]))},vg=r((function(n){return z([cg(n),Ip(n),ug(n),dg(n)])}));Sa={Main:{init:s(Cu,r((function(n,e){var r,t,o,a=(r={dj:u(_b,"azimuth for third light",n),bO:(t=f(Yu,1667,25e3,2e3),o=t>4e3?-3025846900/(t*t*t)+2107037.9/(t*t)+.2226347*1e3/t+.24039:-266123900.00000003/(t*t*t)-.2343589*1e6/(t*t)+877.6956/t+.17991,{bG:o,bH:t>2222?t>4e3?o*o*o*3.081758-o*o*5.8733867+3.75112997*o-.37001483:o*o*o*-.9549476-o*o*1.37418593+2.09137015*o-.16748867:o*o*o*-1.1063814-o*o*1.3481102+2.18555832*o-.20219683}),ds:u(_b,"elevation for third light",n),cp:120},u(Tb,!0,{bO:r.bO,eO:u(sb,r.dj,r.ds),cp:r.cp})),i=Fb({bO:yb,cp:6e3,ee:{bG:2,bH:3,aB:1}}),c=function(n){return function(n){for(;;){if(P(n.e5,0)&&P(n.e6,0))return Ls;if(!u(Hu,Iu(n.e5),Iu(n.e6))){var e=Nc(n.e6/Tu),r=Nc(n.e5/Tu),t=n.fB,o=t.bG,a=t.bH,i=t.aB,c=u(bf,1,n.bO);return{bM:r*xs(c),eI:!1,bS:r*hs(c),cT:e/r,b4:r*gs(c),c7:3,bG:o,bH:a,aB:i}}n={bO:n.bO,e5:n.e6,e6:n.e5,fB:Gs(n.fB)}}}({bO:n.bO,e5:n.e5,e6:n.e6,fB:u(sb,n.dj,n.ds)})}({dj:u(_b,"azimuth for fourth light",n),bO:yb,ds:u(_b,"elevation for fourth light",n),e5:20,e6:10}),l=Fb({bO:Ab,cp:6e3,ee:{bG:-2,bH:4,aB:1}});return u(Mb,{ez:kb,eD:Rb,eG:Uu,eL:.1,eT:1.2*u(nc,2,6),fa:s(zb,l,i,a,c),ad:n.ad,fA:Gb,fG:yb},u(vg,n,e))})),Lu,yu,(function(){return{}}))(u(Pt,(function(n){return wt({ck:n})}),u(Mt,"devicePixelRatio",Tt)))(0)}},n.Elm?function n(e,r){for(var t in r)t in e?"init"==t?C(6):n(e[t],r[t]):e[t]=r[t]}(n.Elm,Sa):n.Elm=Sa}(n);const e=n.Elm.Main.init({node:document.getElementById("elm-node"),flags:{devicePixelRatio:window.devicePixelRatio}});function r(n){const e=[];for(let r=0;r<n.length;r++)e.push({identifier:n[r].identifier,pageX:n[r].pageX,pageY:n[r].pageY});return e}window.addEventListener("touchstart",(n=>{e.ports.touchStart.send(r(n.changedTouches))})),window.addEventListener("touchmove",(n=>{e.ports.touchMove.send(r(n.changedTouches))})),window.addEventListener("touchend",(n=>{e.ports.touchEnd.send(r(n.changedTouches))})),window.addEventListener("touchcancel",(n=>{e.ports.touchCancel.send(r(n.changedTouches))}))}();
//# sourceMappingURL=index.4ceaa0c1.js.map
