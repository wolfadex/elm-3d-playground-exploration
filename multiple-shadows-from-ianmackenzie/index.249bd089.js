!function(){var n={};!function(n){function e(n,e,r){return r.a=n,r.f=e,r}function r(n){return e(2,n,(function(e){return function(r){return n(e,r)}}))}function t(n){return e(3,n,(function(e){return function(r){return function(t){return n(e,r,t)}}}))}function o(n){return e(4,n,(function(e){return function(r){return function(t){return function(o){return n(e,r,t,o)}}}}))}function a(n){return e(5,n,(function(e){return function(r){return function(t){return function(o){return function(a){return n(e,r,t,o,a)}}}}}))}function i(n){return e(6,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return n(e,r,t,o,a,i)}}}}}}))}function c(n){return e(7,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return n(e,r,t,o,a,i,c)}}}}}}}))}function l(n){return e(8,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return n(e,r,t,o,a,i,c,l)}}}}}}}}))}function u(n,e,r){return 2===n.a?n.f(e,r):n(e)(r)}function f(n,e,r,t){return 3===n.a?n.f(e,r,t):n(e)(r)(t)}function s(n,e,r,t,o){return 4===n.a?n.f(e,r,t,o):n(e)(r)(t)(o)}function d(n,e,r,t,o,a){return 5===n.a?n.f(e,r,t,o,a):n(e)(r)(t)(o)(a)}function m(n,e,r,t,o,a,i){return 6===n.a?n.f(e,r,t,o,a,i):n(e)(r)(t)(o)(a)(i)}function v(n,e,r,t,o,a,i,c){return 7===n.a?n.f(e,r,t,o,a,i,c):n(e)(r)(t)(o)(a)(i)(c)}function b(n,e,r,t,o,a,i,c,l){return 8===n.a?n.f(e,r,t,o,a,i,c,l):n(e)(r)(t)(o)(a)(i)(c)(l)}var p=t((function(n,e,r){for(var t=Array(n),o=0;n>o;o++)t[o]=r(e+o);return t})),g=r((function(n,e){for(var r=Array(n),t=0;n>t&&e.b;t++)r[t]=e.a,e=e.b;return r.length=t,L(r,e)})),h=r((function(n,e){return e[n]})),x=t((function(n,e,r){for(var t=r.length-1;t>=0;t--)e=u(n,r[t],e);return e}));function C(n){throw Error("https://github.com/elm/core/blob/1.0.0/hints/"+n+".md")}function P(n,e){for(var r,t=[],o=M(n,e,0,t);o&&(r=t.pop());o=M(r.a,r.b,0,t));return o}function M(n,e,r,t){if(n===e)return!0;if("object"!=typeof n||null===n||null===e)return"function"==typeof n&&C(5),!1;if(r>100)return t.push(L(n,e)),!0;for(var o in 0>n.$&&(n=Sr(n),e=Sr(e)),n)if(!M(n[o],e[o],r+1,t))return!1;return!0}function y(n,e,r){if("object"!=typeof n)return n===e?0:e>n?-1:1;if(void 0===n.$)return(r=y(n.a,e.a))||(r=y(n.b,e.b))?r:y(n.c,e.c);for(;n.b&&e.b&&!(r=y(n.a,e.a));n=n.b,e=e.b);return r||(n.b?1:e.b?-1:0)}var T=r((function(n,e){var r=y(n,e);return 0>r?$r:r?Er:Nr}));function L(n,e){return{a:n,b:e}}function D(n,e,r){return{a:n,b:e,c:r}}function w(n,e){var r={};for(var t in n)r[t]=n[t];for(var t in e)r[t]=e[t];return r}function z(n,e){if("string"==typeof n)return n+e;if(!n.b)return e;var r=N(n.a,e);n=n.b;for(var t=r;n.b;n=n.b)t=t.b=N(n.a,e);return r}var S={$:0};function N(n,e){return{$:1,a:n,b:e}}var E=r(N);function $(n){for(var e=S,r=n.length;r--;)e=N(n[r],e);return e}function _(n){for(var e=[];n.b;n=n.b)e.push(n.a);return e}var A=t((function(n,e,r){for(var t=[];e.b&&r.b;e=e.b,r=r.b)t.push(u(n,e.a,r.a));return $(t)})),R=r((function(n,e){return n*e})),V=r(Math.pow),F=r((function(n,e){var r=e%n;return 0===n?C(11):r>0&&0>n||0>r&&n>0?r+n:r})),B=Math.cos,k=Math.sin,I=Math.tan,j=Math.acos,W=Math.ceil,H=Math.floor,U=Math.round,G=Math.sqrt,O=Math.log,Y=isNaN,q=r((function(n,e){return n+e})),Z=t((function(n,e,r){for(var t=r.length;t--;){var o=r[t],a=r.charCodeAt(t);56320>a||a>57343||(o=r[--t]+o),e=u(n,o,e)}return e})),Q=r((function(n,e){return e.split(n)})),J=r((function(n,e){return e.join(n)})),X=t((function(n,e,r){return r.slice(n,e)})),K=r((function(n,e){return 0===e.indexOf(n)}));function nn(n){return n+""}function en(n){return{$:2,b:n}}var rn=en((function(n){return"number"!=typeof n?xn("an INT",n):n>-2147483647&&2147483647>n&&(0|n)===n?Fr(n):!isFinite(n)||n%1?xn("an INT",n):Fr(n)})),tn=en((function(n){return"boolean"==typeof n?Fr(n):xn("a BOOL",n)})),on=en((function(n){return"number"==typeof n?Fr(n):xn("a FLOAT",n)})),an=(en((function(n){return Fr(n)})),en((function(n){return"string"==typeof n?Fr(n):n instanceof String?Fr(n+""):xn("a STRING",n)}))),cn=r((function(n,e){return{$:6,d:n,b:e}}));function ln(n,e){return{$:9,f:n,g:e}}var un=r((function(n,e){return{$:10,b:e,h:n}})),fn=r((function(n,e){return ln(n,[e])})),sn=t((function(n,e,r){return ln(n,[e,r])})),dn=o((function(n,e,r,t){return ln(n,[e,r,t])})),mn=r((function(n,e){try{return bn(n,JSON.parse(e))}catch(n){return _r(u(Ar,"This is not valid JSON! "+n.message,e))}})),vn=r((function(n,e){return bn(n,e)}));function bn(n,e){switch(n.$){case 2:return n.b(e);case 5:return null===e?Fr(n.c):xn("null",e);case 3:return gn(e)?pn(n.b,e,$):xn("a LIST",e);case 4:return gn(e)?pn(n.b,e,hn):xn("an ARRAY",e);case 6:var r=n.d;if("object"!=typeof e||null===e||!(r in e))return xn("an OBJECT with a field named `"+r+"`",e);var t=bn(n.b,e[r]);return Ct(t)?t:_r(u(Rr,r,t.a));case 7:var o=n.e;return gn(e)?e.length>o?(t=bn(n.b,e[o]),Ct(t)?t:_r(u(Vr,o,t.a))):xn("a LONGER array. Need index "+o+" but only see "+e.length+" entries",e):xn("an ARRAY",e);case 8:if("object"!=typeof e||null===e||gn(e))return xn("an OBJECT",e);var a=S;for(var i in e)if(e.hasOwnProperty(i)){if(t=bn(n.b,e[i]),!Ct(t))return _r(u(Rr,i,t.a));a=N(L(i,t.a),a)}return Fr(Xr(a));case 9:for(var c=n.f,l=n.g,f=0;l.length>f;f++){if(t=bn(l[f],e),!Ct(t))return t;c=c(t.a)}return Fr(c);case 10:return t=bn(n.b,e),Ct(t)?bn(n.h(t.a),e):t;case 11:for(var s=S,d=n.g;d.b;d=d.b){if(t=bn(d.a,e),Ct(t))return t;s=N(t.a,s)}return _r(Br(Xr(s)));case 1:return _r(u(Ar,n.a,e));case 0:return Fr(n.a)}}function pn(n,e,r){for(var t=e.length,o=Array(t),a=0;t>a;a++){var i=bn(n,e[a]);if(!Ct(i))return _r(u(Vr,a,i.a));o[a]=i.a}return Fr(r(o))}function gn(n){return Array.isArray(n)||"undefined"!=typeof FileList&&n instanceof FileList}function hn(n){return u(xt,n.length,(function(e){return n[e]}))}function xn(n,e){return _r(u(Ar,"Expecting "+n,e))}function Cn(n,e){if(n===e)return!0;if(n.$!==e.$)return!1;switch(n.$){case 0:case 1:return n.a===e.a;case 2:return n.b===e.b;case 5:return n.c===e.c;case 3:case 4:case 8:return Cn(n.b,e.b);case 6:return n.d===e.d&&Cn(n.b,e.b);case 7:return n.e===e.e&&Cn(n.b,e.b);case 9:return n.f===e.f&&Pn(n.g,e.g);case 10:return n.h===e.h&&Cn(n.b,e.b);case 11:return Pn(n.g,e.g)}}function Pn(n,e){var r=n.length;if(r!==e.length)return!1;for(var t=0;r>t;t++)if(!Cn(n[t],e[t]))return!1;return!0}var Mn=r((function(n,e){return JSON.stringify(e,null,n)+""}));function yn(n){return n}var Tn=t((function(n,e,r){return r[n]=e,r}));function Ln(n){return{$:0,a:n}}function Dn(n){return{$:2,b:n,c:null}}var wn=r((function(n,e){return{$:3,b:n,d:e}})),zn=0;function Sn(n){var e={$:0,e:zn++,f:n,g:null,h:[]};return Rn(e),e}function Nn(n){return Dn((function(e){e(Ln(Sn(n)))}))}function En(n,e){n.h.push(e),Rn(n)}var $n=r((function(n,e){return Dn((function(r){En(n,e),r(Ln(0))}))})),_n=!1,An=[];function Rn(n){if(An.push(n),!_n){for(_n=!0;n=An.shift();)Vn(n);_n=!1}}function Vn(n){for(;n.f;){var e=n.f.$;if(0===e||1===e){for(;n.g&&n.g.$!==e;)n.g=n.g.i;if(!n.g)return;n.f=n.g.b(n.f.a),n.g=n.g.i}else{if(2===e)return void(n.f.c=n.f.b((function(e){n.f=e,Rn(n)})));if(5===e){if(0===n.h.length)return;n.f=n.f.b(n.h.shift())}else n.g={$:3===e?0:1,b:n.f.b,i:n.g},n.f=n.f.d}}}var Fn={};function Bn(n,e,r,t,o){return{b:n,c:e,d:r,e:t,f:o}}function kn(n,e){var r={g:e,h:void 0},t=n.c,o=n.d,a=n.e,i=n.f;return r.h=Sn(u(wn,(function n(e){return u(wn,n,{$:5,b:function(n){var c=n.a;return 0===n.$?f(o,r,c,e):a&&i?s(t,r,c.i,c.j,e):f(t,r,a?c.i:c.j,e)}})}),n.b))}var In=r((function(n,e){return Dn((function(r){n.g(e),r(Ln(0))}))})),jn=r((function(n,e){return u($n,n.h,{$:0,a:e})}));function Wn(n){return function(e){return{$:1,k:n,l:e}}}function Hn(n){return{$:2,m:n}}var Un=r((function(n,e){return{$:3,n:n,o:e}})),Gn=[],On=!1;function Yn(n,e,r){if(Gn.push({p:n,q:e,r:r}),!On){On=!0;for(var t;t=Gn.shift();)qn(t.p,t.q,t.r);On=!1}}function qn(n,e,r){var t={};for(var o in Zn(!0,e,t,null),Zn(!1,r,t,null),n)En(n[o],{$:"fx",a:t[o]||{i:S,j:S}})}function Zn(n,e,r,t){switch(e.$){case 1:var o=e.k,a=function(n,e,r,t){return u(n?Fn[e].e:Fn[e].f,(function(n){for(var e=r;e;e=e.t)n=e.s(n);return n}),t)}(n,o,t,e.l);return void(r[o]=function(n,e,r){return r=r||{i:S,j:S},n?r.i=N(e,r.i):r.j=N(e,r.j),r}(n,a,r[o]));case 2:for(var i=e.m;i.b;i=i.b)Zn(n,i.a,r,t);return;case 3:return void Zn(n,e.o,r,{s:e.n,t:t})}}function Qn(n,e){return function(n){Fn[n]&&C(3)}(n),Fn[n]={f:Jn,u:e,a:Xn},Wn(n)}var Jn=r((function(n,e){return function(r){return n(e(r))}}));function Xn(n,e){var r=S,o=Fn[n].u,a=Ln(null);return Fn[n].b=a,Fn[n].c=t((function(n,e){return r=e,a})),{send:function(n){var t=u(vn,o,n);Ct(t)||C(4);for(var a=t.a,i=r;i.b;i=i.b)e(i.a(a))}}}var Kn="undefined"!=typeof document?document:{};function ne(n,e){n.appendChild(e)}function ee(n){return{$:0,a:n}}var re,te=r((function(n,e){return r((function(r,t){for(var o=[],a=0;t.b;t=t.b){var i=t.a;a+=i.b||0,o.push(i)}return a+=o.length,{$:1,c:e,d:fe(r),e:o,f:n,b:a}}))}))(void 0),oe=r((function(n,e){return r((function(r,t){for(var o=[],a=0;t.b;t=t.b){var i=t.a;a+=i.b.b||0,o.push(i)}return a+=o.length,{$:2,c:e,d:fe(r),e:o,f:n,b:a}}))}))(void 0),ae=r((function(n,e){return{$:4,j:n,k:e,b:1+(e.b||0)}})),ie=r((function(n,e){return{$:"a0",n:n,o:e}})),ce=r((function(n,e){return{$:"a1",n:n,o:e}})),le=r((function(n,e){return{$:"a2",n:n,o:e}})),ue=r((function(n,e){return{$:"a3",n:n,o:e}}));function fe(n){for(var e={};n.b;n=n.b){var r=n.a,t=r.$,o=r.n,a=r.o;if("a2"!==t){var i=e[t]||(e[t]={});"a3"===t&&"class"===o?se(i,o,a):i[o]=a}else"className"===o?se(e,o,a):e[o]=a}return e}function se(n,e,r){var t=n[e];n[e]=t?t+" "+r:r}function de(n,e){var r=n.$;if(5===r)return de(n.k||(n.k=n.m()),e);if(0===r)return Kn.createTextNode(n.a);if(4===r){for(var t=n.k,o=n.j;4===t.$;)"object"!=typeof o?o=[o,t.j]:o.push(t.j),t=t.k;var a={j:o,p:e};return(i=de(t,a)).elm_event_node_ref=a,i}if(3===r)return me(i=n.h(n.g),e,n.d),i;var i=n.f?Kn.createElementNS(n.f,n.c):Kn.createElement(n.c);me(i,e,n.d);for(var c=n.e,l=0;c.length>l;l++)ne(i,de(1===r?c[l]:c[l].b,e));return i}function me(n,e,r){for(var t in r){var o=r[t];"a1"===t?ve(n,o):"a0"===t?ge(n,e,o):"a3"===t?be(n,o):"a4"===t?pe(n,o):("value"!==t&&"checked"!==t||n[t]!==o)&&(n[t]=o)}}function ve(n,e){var r=n.style;for(var t in e)r[t]=e[t]}function be(n,e){for(var r in e){var t=e[r];void 0!==t?n.setAttribute(r,t):n.removeAttribute(r)}}function pe(n,e){for(var r in e){var t=e[r],o=t.f,a=t.o;void 0!==a?n.setAttributeNS(o,r,a):n.removeAttributeNS(o,r)}}function ge(n,e,r){var t=n.elmFs||(n.elmFs={});for(var o in r){var a=r[o],i=t[o];if(a){if(i){if(i.q.$===a.$){i.q=a;continue}n.removeEventListener(o,i)}i=he(e,a),n.addEventListener(o,i,re&&{passive:2>wt(a)}),t[o]=i}else n.removeEventListener(o,i),t[o]=void 0}}try{window.addEventListener("t",null,Object.defineProperty({},"passive",{get:function(){re=!0}}))}catch(n){}function he(n,e){function r(e){var t=r.q,o=bn(t.a,e);if(Ct(o)){for(var a,i=wt(t),c=o.a,l=i?3>i?c.a:c.as:c,u=1==i?c.b:3==i&&c.c2,f=(u&&e.stopPropagation(),(2==i?c.b:3==i&&c.cS)&&e.preventDefault(),n);a=f.j;){if("function"==typeof a)l=a(l);else for(var s=a.length;s--;)l=a[s](l);f=f.p}f(l,u)}}return r.q=e,r}function xe(n,e){return n.$==e.$&&Cn(n.a,e.a)}function Ce(n,e,r,t){var o={$:e,r:r,s:t,t:void 0,u:void 0};return n.push(o),o}function Pe(n,e,r,t){if(n!==e){var o=n.$,a=e.$;if(o!==a){if(1!==o||2!==a)return void Ce(r,0,t,e);e=function(n){for(var e=n.e,r=e.length,t=Array(r),o=0;r>o;o++)t[o]=e[o].b;return{$:1,c:n.c,d:n.d,e:t,f:n.f,b:n.b}}(e),a=1}switch(a){case 5:for(var i=n.l,c=e.l,l=i.length,u=l===c.length;u&&l--;)u=i[l]===c[l];if(u)return void(e.k=n.k);e.k=e.m();var f=[];return Pe(n.k,e.k,f,0),void(f.length>0&&Ce(r,1,t,f));case 4:for(var s=n.j,d=e.j,m=!1,v=n.k;4===v.$;)m=!0,"object"!=typeof s?s=[s,v.j]:s.push(v.j),v=v.k;for(var b=e.k;4===b.$;)m=!0,"object"!=typeof d?d=[d,b.j]:d.push(b.j),b=b.k;return m&&s.length!==d.length?void Ce(r,0,t,e):((m?function(n,e){for(var r=0;n.length>r;r++)if(n[r]!==e[r])return!1;return!0}(s,d):s===d)||Ce(r,2,t,d),void Pe(v,b,r,t+1));case 0:return void(n.a!==e.a&&Ce(r,3,t,e.a));case 1:return void Me(n,e,r,t,Te);case 2:return void Me(n,e,r,t,Le);case 3:if(n.h!==e.h)return void Ce(r,0,t,e);var p=ye(n.d,e.d);p&&Ce(r,4,t,p);var g=e.i(n.g,e.g);return void(g&&Ce(r,5,t,g))}}}function Me(n,e,r,t,o){if(n.c===e.c&&n.f===e.f){var a=ye(n.d,e.d);a&&Ce(r,4,t,a),o(n,e,r,t)}else Ce(r,0,t,e)}function ye(n,e,r){var t;for(var o in n)if("a1"!==o&&"a0"!==o&&"a3"!==o&&"a4"!==o)if(o in e){var a=n[o],i=e[o];a===i&&"value"!==o&&"checked"!==o||"a0"===r&&xe(a,i)||((t=t||{})[o]=i)}else(t=t||{})[o]=r?"a1"===r?"":"a0"===r||"a3"===r?void 0:{f:n[o].f,o:void 0}:"string"==typeof n[o]?"":null;else{var c=ye(n[o],e[o]||{},o);c&&((t=t||{})[o]=c)}for(var l in e)l in n||((t=t||{})[l]=e[l]);return t}function Te(n,e,r,t){var o=n.e,a=e.e,i=o.length,c=a.length;i>c?Ce(r,6,t,{v:c,i:i-c}):c>i&&Ce(r,7,t,{v:i,e:a});for(var l=c>i?i:c,u=0;l>u;u++){var f=o[u];Pe(f,a[u],r,++t),t+=f.b||0}}function Le(n,e,r,t){for(var o=[],a={},i=[],c=n.e,l=e.e,u=c.length,f=l.length,s=0,d=0,m=t;u>s&&f>d;){var v=(D=c[s]).a,b=(w=l[d]).a,p=D.b,g=w.b,h=void 0,x=void 0;if(v!==b){var C=c[s+1],P=l[d+1];if(C){var M=C.a,y=C.b;x=b===M}if(P){var T=P.a,L=P.b;h=v===T}if(h&&x)Pe(p,L,o,++m),we(a,o,v,g,d,i),m+=p.b||0,ze(a,o,v,y,++m),m+=y.b||0,s+=2,d+=2;else if(h)m++,we(a,o,b,g,d,i),Pe(p,L,o,m),m+=p.b||0,s+=1,d+=2;else if(x)ze(a,o,v,p,++m),m+=p.b||0,Pe(y,g,o,++m),m+=y.b||0,s+=2,d+=1;else{if(!C||M!==T)break;ze(a,o,v,p,++m),we(a,o,b,g,d,i),m+=p.b||0,Pe(y,L,o,++m),m+=y.b||0,s+=2,d+=2}}else Pe(p,g,o,++m),m+=p.b||0,s++,d++}for(;u>s;){var D;m++,ze(a,o,(D=c[s]).a,p=D.b,m),m+=p.b||0,s++}for(;f>d;){var w,z=z||[];we(a,o,(w=l[d]).a,w.b,void 0,z),d++}(o.length>0||i.length>0||z)&&Ce(r,8,t,{w:o,x:i,y:z})}var De="_elmW6BL";function we(n,e,r,t,o,a){var i=n[r];if(!i)return a.push({r:o,A:i={c:0,z:t,r:o,s:void 0}}),void(n[r]=i);if(1===i.c){a.push({r:o,A:i}),i.c=2;var c=[];return Pe(i.z,t,c,i.r),i.r=o,void(i.s.s={w:c,A:i})}we(n,e,r+De,t,o,a)}function ze(n,e,r,t,o){var a=n[r];if(a){if(0===a.c){a.c=2;var i=[];return Pe(t,a.z,i,o),void Ce(e,9,o,{w:i,A:a})}ze(n,e,r+De,t,o)}else{var c=Ce(e,9,o,void 0);n[r]={c:1,z:t,r:o,s:c}}}function Se(n,e,r,t){Ne(n,e,r,0,0,e.b,t)}function Ne(n,e,r,t,o,a,i){for(var c=r[t],l=c.r;l===o;){var u=c.$;if(1===u)Se(n,e.k,c.s,i);else if(8===u)c.t=n,c.u=i,(f=c.s.w).length>0&&Ne(n,e,f,0,o,a,i);else if(9===u){c.t=n,c.u=i;var f,s=c.s;s&&(s.A.s=n,(f=s.w).length>0&&Ne(n,e,f,0,o,a,i))}else c.t=n,c.u=i;if(!(c=r[++t])||(l=c.r)>a)return t}var d=e.$;if(4===d){for(var m=e.k;4===m.$;)m=m.k;return Ne(n,m,r,t,o+1,a,n.elm_event_node_ref)}for(var v=e.e,b=n.childNodes,p=0;v.length>p;p++){o++;var g=1===d?v[p]:v[p].b,h=o+(g.b||0);if(!(o>l||l>h||(c=r[t=Ne(b[p],g,r,t,o,h,i)])&&(l=c.r)<=a))return t;o=h}return t}function Ee(n,e){for(var r=0;e.length>r;r++){var t=e[r],o=t.t,a=$e(o,t);o===n&&(n=a)}return n}function $e(n,e){switch(e.$){case 0:return function(n,e,r){var t=n.parentNode,o=de(e,r);return o.elm_event_node_ref||(o.elm_event_node_ref=n.elm_event_node_ref),t&&o!==n&&t.replaceChild(o,n),o}(n,e.s,e.u);case 4:return me(n,e.u,e.s),n;case 3:return n.replaceData(0,n.length,e.s),n;case 1:return Ee(n,e.s);case 2:return n.elm_event_node_ref?n.elm_event_node_ref.j=e.s:n.elm_event_node_ref={j:e.s,p:e.u},n;case 6:for(var r=e.s,t=0;r.i>t;t++)n.removeChild(n.childNodes[r.v]);return n;case 7:for(var o=(r=e.s).e,a=n.childNodes[t=r.v];o.length>t;t++)n.insertBefore(de(o[t],e.u),a);return n;case 9:if(!(r=e.s))return n.parentNode.removeChild(n),n;var i=r.A;return void 0!==i.r&&n.parentNode.removeChild(n),i.s=Ee(n,r.w),n;case 8:return function(n,e){var r=e.s,t=function(n,e){if(n){for(var r=Kn.createDocumentFragment(),t=0;n.length>t;t++){var o=n[t].A;ne(r,2===o.c?o.s:de(o.z,e.u))}return r}}(r.y,e);n=Ee(n,r.w);for(var o=r.x,a=0;o.length>a;a++){var i=o[a],c=i.A,l=2===c.c?c.s:de(c.z,e.u);n.insertBefore(l,n.childNodes[i.r])}return t&&ne(n,t),n}(n,e);case 5:return e.s(n);default:C(10)}}function _e(n){if(3===n.nodeType)return ee(n.textContent);if(1!==n.nodeType)return ee("");for(var e=S,r=n.attributes,t=r.length;t--;){var o=r[t];e=N(u(ue,o.name,o.value),e)}var a=n.tagName.toLowerCase(),i=S,c=n.childNodes;for(t=c.length;t--;)i=N(_e(c[t]),i);return f(te,a,e,i)}var Ae=o((function(n,e,r,t){return function(n,e,r,t,o,a){var i=u(vn,n,e?e.flags:void 0);Ct(i)||C(2);var c={},l=r(i.a),f=l.a,s=a(m,f),d=function(n,e){var r;for(var t in Fn){var o=Fn[t];o.a&&((r=r||{})[t]=o.a(t,e)),n[t]=kn(o,e)}return r}(c,m);function m(n,e){var r=u(t,n,f);s(f=r.a,e),Yn(c,r.b,o(f))}return Yn(c,l.b,o(f)),d?{ports:d}:{}}(e,t,n.e1,n.fz,n.fs,(function(e,r){var o=n.fB,a=t.node,i=_e(a);return function(n,e){e(n);var r=0;function t(){r=1===r?0:(Ve(t),e(n),1)}return function(o,a){n=o,a?(e(n),2===r&&(r=1)):(0===r&&Ve(t),r=2)}}(r,(function(n){var r=o(n),t=function(n,e){var r=[];return Pe(n,e,r,0),r}(i,r);a=function(n,e,r,t){return 0===r.length?n:(Se(n,e,r,t),Ee(n,r))}(a,i,t,e),i=r}))}))})),Re="undefined"!=typeof cancelAnimationFrame?cancelAnimationFrame:function(n){clearTimeout(n)},Ve="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:function(n){return setTimeout(n,1e3/60)},Fe={addEventListener:function(){},removeEventListener:function(){}},Be="undefined"!=typeof document?document:Fe,ke="undefined"!=typeof window?window:Fe,Ie=t((function(n,e,r){return Nn(Dn((function(){function t(n){Sn(r(n))}return n.addEventListener(e,t,re&&{passive:!0}),function(){n.removeEventListener(e,t)}})))})),je=r((function(n,e){var r=bn(n,e);return Ct(r)?kr(r.a):Ir})),We=r((function(n,e){var r="g";n.fa&&(r+="m"),n.eE&&(r+="i");try{return kr(RegExp(e,r))}catch(n){return Ir}})),He=t((function(n,e,r){for(var t,o=[],a=0,i=r,c=e.lastIndex,l=-1;a++<n&&(t=e.exec(i))&&l!=e.lastIndex;){for(var u=t.length-1,f=Array(u);u>0;){var d=t[u];f[--u]=d?kr(d):Ir}o.push(s(yi,t[0],t.index,a,$(f))),l=e.lastIndex}return e.lastIndex=c,$(o)})),Ue=0;function Ge(n,e){for(;e.b;e=e.b)n(e.a)}function Oe(n){for(var e=0;n.b;n=n.b)e++;return e}var Ye="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:function(n){setTimeout(n,1e3/60)},qe=a((function(n,e,r,t,o){return{$:0,a:n,b:e,c:r,d:t,e:o}})),Ze=r((function(n,e){var r=n.blend;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.BLEND),r.enabled=!0),r.a===e.a&&r.d===e.d||(n.gl.blendEquationSeparate(e.a,e.d),r.a=e.a,r.d=e.d),r.b===e.b&&r.c===e.c&&r.e===e.e&&r.f===e.f||(n.gl.blendFuncSeparate(e.b,e.c,e.e,e.f),r.b=e.b,r.c=e.c,r.e=e.e,r.f=e.f),r.g===e.g&&r.h===e.h&&r.i===e.i&&r.j===e.j||(n.gl.blendColor(e.g,e.h,e.i,e.j),r.g=e.g,r.h=e.h,r.i=e.i,r.j=e.j)})),Qe=r((function(n,e){var r=n.depthTest;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.DEPTH_TEST),r.enabled=!0),r.a!==e.a&&(n.gl.depthFunc(e.a),r.a=e.a),r.b!==e.b&&(n.gl.depthMask(e.b),r.b=e.b),r.c===e.c&&r.d===e.d||(n.gl.depthRange(e.c,e.d),r.c=e.c,r.d=e.d)})),Je=r((function(n,e){var r=n.stencilTest;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.STENCIL_TEST),r.enabled=!0),r.d===e.d&&r.a===e.a&&r.b===e.b||(n.gl.stencilFuncSeparate(n.gl.FRONT,e.d,e.a,e.b),r.d=e.d),r.e===e.e&&r.f===e.f&&r.g===e.g||(n.gl.stencilOpSeparate(n.gl.FRONT,e.e,e.f,e.g),r.e=e.e,r.f=e.f,r.g=e.g),r.c!==e.c&&(n.gl.stencilMask(e.c),r.c=e.c),r.h===e.h&&r.a===e.a&&r.b===e.b||(n.gl.stencilFuncSeparate(n.gl.BACK,e.h,e.a,e.b),r.h=e.h,r.a=e.a,r.b=e.b),r.i===e.i&&r.j===e.j&&r.k===e.k||(n.gl.stencilOpSeparate(n.gl.BACK,e.i,e.j,e.k),r.i=e.i,r.j=e.j,r.k=e.k)})),Xe=r((function(n,e){var r=n.scissor;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.SCISSOR_TEST),r.enabled=!0),r.a===e.a&&r.b===e.b&&r.c===e.c&&r.d===e.d||(n.gl.scissor(e.a,e.b,e.c,e.d),r.a=e.a,r.b=e.b,r.c=e.c,r.d=e.d)})),Ke=r((function(n,e){var r=n.colorMask;r.toggle=n.toggle,r.enabled=!0,r.a===e.a&&r.b===e.b&&r.c===e.c&&r.d===e.d||(n.gl.colorMask(e.a,e.b,e.c,e.d),r.a=e.a,r.b=e.b,r.c=e.c,r.d=e.d)})),nr=r((function(n,e){var r=n.cullFace;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.CULL_FACE),r.enabled=!0),r.a!==e.a&&(n.gl.cullFace(e.a),r.a=e.a)})),er=r((function(n,e){var r=n.polygonOffset;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.POLYGON_OFFSET_FILL),r.enabled=!0),r.a===e.a&&r.b===e.b||(n.gl.polygonOffset(e.a,e.b),r.a=e.a,r.b=e.b)})),rr=r((function(n,e){var r=n.sampleCoverage;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.SAMPLE_COVERAGE),r.enabled=!0),r.a===e.a&&r.b===e.b||(n.gl.sampleCoverage(e.a,e.b),r.a=e.a,r.b=e.b)})),tr=function(n){n.scissor.enabled&&(n.gl.disable(n.gl.SCISSOR_TEST),n.scissor.enabled=!1)},or=function(n){var e=n.colorMask;e.a&&e.b&&e.c&&e.d||(n.gl.colorMask(!0,!0,!0,!0),e.a=!0,e.b=!0,e.c=!0,e.d=!0)},ar=["blend","depthTest","stencilTest","scissor","colorMask","cullFace","polygonOffset","sampleCoverage","sampleAlphaToCoverage"],ir=[function(n){n.blend.enabled&&(n.gl.disable(n.gl.BLEND),n.blend.enabled=!1)},function(n){n.depthTest.enabled&&(n.gl.disable(n.gl.DEPTH_TEST),n.depthTest.enabled=!1)},function(n){n.stencilTest.enabled&&(n.gl.disable(n.gl.STENCIL_TEST),n.stencilTest.enabled=!1)},tr,or,function(n){n.gl.disable(n.gl.CULL_FACE)},function(n){n.gl.disable(n.gl.POLYGON_OFFSET_FILL)},function(n){n.gl.disable(n.gl.SAMPLE_COVERAGE)},function(n){n.gl.disable(n.gl.SAMPLE_ALPHA_TO_COVERAGE)}];function cr(n,e,r){var t=n.createShader(r);return n.shaderSource(t,"#extension GL_OES_standard_derivatives : enable\n"+e),n.compileShader(t),t}function lr(n,e){switch(e){case n.FLOAT:return{size:1,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC2:return{size:2,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC3:return{size:3,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC4:return{size:4,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_MAT4:return{size:4,arraySize:4,type:Float32Array,baseType:n.FLOAT};case n.INT:return{size:1,arraySize:1,type:Int32Array,baseType:n.INT}}}function ur(n,e,r,t){for(var o=r.a.$7,a=[],i=0;o>i;i++)a.push(String.fromCharCode(97+i));var c=lr(n,e.type);if(void 0===c)throw Error("No info available for: "+e.type);var l=0,u=c.size*c.arraySize*o,f=new c.type(Oe(r.b)*u);Ge((function(n){!function(n,e,r,t,i){var c;if(1===o)for(c=0;e>c;c++)n[r++]=1===e?t[i]:t[i][c];else a.forEach((function(o){for(c=0;e>c;c++)n[r++]=1===e?t[o][i]:t[o][i][c]}))}(f,c.size*c.arraySize,l,n,t[e.name]||e.name),l+=u}),r.b);var s=n.createBuffer();return n.bindBuffer(n.ARRAY_BUFFER,s),n.bufferData(n.ARRAY_BUFFER,f,n.STATIC_DRAW),s}function fr(n,e){return n+"#"+e}var sr=r((function(n,e){var r=n.f,t=r.gl;return t?(t.viewport(0,0,t.drawingBufferWidth,t.drawingBufferHeight),r.depthTest.b||(t.depthMask(!0),r.depthTest.b=!0),r.stencilTest.c!==r.STENCIL_WRITEMASK&&(t.stencilMask(r.STENCIL_WRITEMASK),r.stencilTest.c=r.STENCIL_WRITEMASK),tr(r),or(r),t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT|t.STENCIL_BUFFER_BIT),Ge((function(e){if(e.d.b.b){var o,a,i,c,l;if(e.b.id&&e.c.id&&(o=fr(e.b.id,e.c.id),a=r.programs[o]),!a){var u,f;e.b.id?u=r.shaders[e.b.id]:e.b.id=Ue++,u||(u=cr(t,e.b.src,t.VERTEX_SHADER),r.shaders[e.b.id]=u),e.c.id?f=r.shaders[e.c.id]:e.c.id=Ue++,f||(f=cr(t,e.c.src,t.FRAGMENT_SHADER),r.shaders[e.c.id]=f);var s=function(n,e,r){var t=n.createProgram();if(n.attachShader(t,e),n.attachShader(t,r),n.linkProgram(t),!n.getProgramParameter(t,n.LINK_STATUS))throw"Link failed: "+n.getProgramInfoLog(t)+"\nvs info-log: "+n.getShaderInfoLog(e)+"\nfs info-log: "+n.getShaderInfoLog(r);return t}(t,u,f);(a={glProgram:s,attributes:Object.assign({},e.b.attributes,e.c.attributes),currentUniforms:{},activeAttributes:[],activeAttributeLocations:[]}).uniformSetters=function(n,e,r,t){var o=r.glProgram,a=r.currentUniforms,i=0,c=e.f;function l(e,r){var t=r.name,o=n.getUniformLocation(e,t);switch(r.type){case n.INT:return function(e){a[t]!==e&&(n.uniform1i(o,e),a[t]=e)};case n.FLOAT:return function(e){a[t]!==e&&(n.uniform1f(o,e),a[t]=e)};case n.FLOAT_VEC2:return function(e){a[t]!==e&&(n.uniform2f(o,e[0],e[1]),a[t]=e)};case n.FLOAT_VEC3:return function(e){a[t]!==e&&(n.uniform3f(o,e[0],e[1],e[2]),a[t]=e)};case n.FLOAT_VEC4:return function(e){a[t]!==e&&(n.uniform4f(o,e[0],e[1],e[2],e[3]),a[t]=e)};case n.FLOAT_MAT4:return function(e){a[t]!==e&&(n.uniformMatrix4fv(o,!1,new Float32Array(e)),a[t]=e)};case n.SAMPLER_2D:var l=i++;return function(e){n.activeTexture(n.TEXTURE0+l);var r=c.textures.get(e);r||(r=e.eJ(n),c.textures.set(e,r)),n.bindTexture(n.TEXTURE_2D,r),a[t]!==e&&(n.uniform1i(o,l),a[t]=e)};case n.BOOL:return function(e){a[t]!==e&&(n.uniform1i(o,e),a[t]=e)};default:return function(){}}}for(var u={},f=n.getProgramParameter(o,n.ACTIVE_UNIFORMS),s=0;f>s;s++){var d=n.getActiveUniform(o,s);u[t[d.name]||d.name]=l(o,d)}return u}(t,n,a,Object.assign({},e.b.uniforms,e.c.uniforms));var d=t.getProgramParameter(s,t.ACTIVE_ATTRIBUTES);for(i=0;d>i;i++){var m=t.getActiveAttrib(s,i),v=t.getAttribLocation(s,m.name);a.activeAttributes.push(m),a.activeAttributeLocations.push(v)}o=fr(e.b.id,e.c.id),r.programs[o]=a}r.lastProgId!==o&&(t.useProgram(a.glProgram),r.lastProgId=o),c=a.uniformSetters,Object.keys(l=e.e).forEach((function(n){var e=c[n];e&&e(l[n])}));var b=r.buffers.get(e.d);for(b||(b=function(n,e){if(e.a.dy>0){var r=n.createBuffer(),t=function(n,e){var r,t=new Uint32Array(Oe(n)*e),o=0;return Ge((function(n){if(1===e)t[o++]=n;else for(r=0;e>r;r++)t[o++]=n[String.fromCharCode(97+r)]}),n),t}(e.c,e.a.dy);return n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,r),n.bufferData(n.ELEMENT_ARRAY_BUFFER,t,n.STATIC_DRAW),{numIndices:t.length,indexBuffer:r,buffers:{}}}return{numIndices:e.a.$7*Oe(e.b),indexBuffer:null,buffers:{}}}(t,e.d),r.buffers.set(e.d,b)),i=0;a.activeAttributes.length>i;i++){v=a.activeAttributeLocations[i],void 0===b.buffers[(m=a.activeAttributes[i]).name]&&(b.buffers[m.name]=ur(t,m,e.d,a.attributes)),t.bindBuffer(t.ARRAY_BUFFER,b.buffers[m.name]);var p=lr(t,m.type);if(1===p.arraySize)t.enableVertexAttribArray(v),t.vertexAttribPointer(v,p.size,p.baseType,!1,0,0);else for(var g=4*p.size,h=g*p.arraySize,x=0;p.arraySize>x;x++)t.enableVertexAttribArray(v+x),t.vertexAttribPointer(v+x,p.size,p.baseType,!1,h,g*x)}for(r.toggle=!r.toggle,Ge(wu(r),e.a),i=0;9>i;i++){var C=r[ar[i]];C.toggle!==r.toggle&&C.enabled&&(ir[i](r),C.enabled=!1,C.toggle=r.toggle)}b.indexBuffer?(t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,b.indexBuffer),t.drawElements(e.d.a.d3,b.numIndices,t.UNSIGNED_INT,0)):t.drawArrays(e.d.a.d3,0,b.numIndices)}}),n.g),e):e})),dr=t((function(n,e,r){return function(n,e,r,t){return{$:3,d:fe(n),g:e,h:r,i:t}}(e,{g:r,f:{},h:n},xr,Cr)})),mr=r((function(n,e){n.contextAttributes.alpha=!0,n.contextAttributes.premultipliedAlpha=e.a})),vr=r((function(n,e){n.contextAttributes.depth=!0,n.sceneSettings.push((function(n){n.clearDepth(e.a)}))})),br=r((function(n,e){n.contextAttributes.stencil=!0,n.sceneSettings.push((function(n){n.clearStencil(e.a)}))})),pr=r((function(n){n.contextAttributes.antialias=!0})),gr=r((function(n,e){n.sceneSettings.push((function(n){n.clearColor(e.a,e.b,e.c,e.d)}))})),hr=r((function(n){n.contextAttributes.preserveDrawingBuffer=!0}));function xr(n){var e={contextAttributes:{alpha:!1,depth:!1,stencil:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1},sceneSettings:[]};Ge((function(n){return u(Du,e,n)}),n.h);var r=Kn.createElement("canvas"),t=r.getContext&&(r.getContext("webgl",e.contextAttributes)||r.getContext("experimental-webgl",e.contextAttributes));return t&&"undefined"!=typeof WeakMap?(e.sceneSettings.forEach((function(n){n(t)})),t.getExtension("OES_standard_derivatives"),t.getExtension("OES_element_index_uint"),n.f.gl=t,n.f.toggle=!1,n.f.blend={enabled:!1,toggle:!1},n.f.depthTest={enabled:!1,toggle:!1},n.f.stencilTest={enabled:!1,toggle:!1},n.f.scissor={enabled:!1,toggle:!1},n.f.colorMask={enabled:!1,toggle:!1},n.f.cullFace={enabled:!1,toggle:!1},n.f.polygonOffset={enabled:!1,toggle:!1},n.f.sampleCoverage={enabled:!1,toggle:!1},n.f.sampleAlphaToCoverage={enabled:!1,toggle:!1},n.f.shaders=[],n.f.programs={},n.f.lastProgId=null,n.f.buffers=new WeakMap,n.f.textures=new WeakMap,n.f.STENCIL_WRITEMASK=t.getParameter(t.STENCIL_WRITEMASK),Ye((function(){return u(sr,n,r)}))):(r=Kn.createElement("div")).innerHTML='<a href="https://get.webgl.org/">Enable WebGL</a> to see this content!',r}function Cr(n,e){return e.f=n.f,sr(e)}var Pr=r((function(n,e){return new Float64Array([n,e])}));new Float64Array(3),new Float64Array(3),new Float64Array(3);var Mr=t((function(n,e,r){return new Float64Array([n,e,r])})),yr=r((function(n,e){return new Float64Array([e[0]*n,e[1]*n,e[2]*n])})),Tr=o((function(n,e,r,t){return new Float64Array([n,e,r,t])}));new Float64Array(16),new Float64Array(16),new Float64Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);var Lr=E,Dr=x,wr=t((function(n,e,t){var o=t.c,a=t.d,i=r((function(e,r){return f(Dr,e.$?n:i,r,e.a)}));return f(Dr,i,f(Dr,n,e,a),o)})),zr=t((function(n,e,r){for(;;){if(-2===r.$)return e;var t=r.d,o=n,a=f(n,r.b,r.c,f(zr,n,e,r.e));n=o,e=a,r=t}})),Sr=function(n){return f(zr,t((function(n,e,r){return u(Lr,L(n,e),r)})),S,n)},Nr=1,Er=2,$r=0,_r=function(n){return{$:1,a:n}},Ar=r((function(n,e){return{$:3,a:n,b:e}})),Rr=r((function(n,e){return{$:0,a:n,b:e}})),Vr=r((function(n,e){return{$:1,a:n,b:e}})),Fr=function(n){return{$:0,a:n}},Br=function(n){return{$:2,a:n}},kr=function(n){return{$:0,a:n}},Ir={$:1},jr=Mn,Wr=nn,Hr=r((function(n,e){return u(J,n,_(e))})),Ur=r((function(n,e){return $(u(Q,n,e))})),Gr=t((function(n,e,r){for(;;){if(!r.b)return e;var t=r.b,o=n,a=u(n,r.a,e);n=o,e=a,r=t}})),Or=function(n){return f(Gr,r((function(n,e){return e+1})),0,n)},Yr=A,qr=t((function(n,e,r){for(;;){if(y(n,e)>=1)return r;var t=n,o=e-1,a=u(Lr,e,r);n=t,e=o,r=a}})),Zr=r((function(n,e){return f(qr,n,e,S)})),Qr=r((function(n,e){return f(Yr,n,u(Zr,0,Or(e)-1),e)})),Jr=function(n){var e=n.charCodeAt(0);return 55296>e||e>56319?e:1024*(e-55296)+n.charCodeAt(1)-56320+65536},Xr=function(n){return f(Gr,Lr,S,n)},Kr=function(n){var e=n.charCodeAt(0);return isNaN(e)?Ir:kr(55296>e||e>56319?L(n[0],n.slice(1)):L(n[0]+n[1],n.slice(2)))},nt=32,et=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),rt=[],tt=W,ot=r((function(n,e){return O(e)/O(n)})),at=function(n){return n},it=tt(u(ot,2,nt)),ct=s(et,0,it,rt,rt),lt=p,ut=function(n){return{$:1,a:n}},ft=H,st=function(n){return n.length},dt=r((function(n,e){return y(n,e)>0?n:e})),mt=R,vt=g,bt=r((function(n,e){for(;;){var r=u(vt,nt,n),t=r.b,o=u(Lr,{$:0,a:r.a},e);if(!t.b)return Xr(o);n=t,e=o}})),pt=r((function(n,e){for(;;){var r=tt(e/nt);if(1===r)return u(vt,nt,n).a;n=u(bt,n,S),e=r}})),gt=r((function(n,e){if(e.l){var r=e.l*nt,t=ft(u(ot,nt,r-1)),o=n?Xr(e.z):e.z,a=u(pt,o,e.l);return s(et,st(e.p)+r,u(dt,5,t*it),a,e.p)}return s(et,st(e.p),it,rt,e.p)})),ht=a((function(n,e,r,t,o){for(;;){if(0>e)return u(gt,!1,{z:t,l:r/nt|0,p:o});var a=ut(f(lt,nt,e,n));n=n,e-=nt,r=r,t=u(Lr,a,t),o=o}})),xt=r((function(n,e){if(n>0){var r=n%nt;return d(ht,e,n-r-nt,n,S,f(lt,r,n-r,e))}return ct})),Ct=function(n){return!n.$},Pt=un,Mt=cn,yt=on,Tt=fn,Lt=sn,Dt=function(n){return{$:0,a:n}},wt=function(n){switch(n.$){case 0:return 0;case 1:return 1;case 2:return 2;default:return 3}},zt=te("div"),St=function(n){return{$:2,a:n}},Nt=function(n){return{$:6,a:n}},Et=function(n){return{$:4,a:n}},$t=t((function(n,e,r){return e(n(r))})),_t=function(n){return n},At=function(n){return n.length},Rt=X,Vt=r((function(n,e){return 1>n?e:f(Rt,n,At(e),e)})),Ft=K,Bt=Ln,kt=Bt(0),It=o((function(n,e,r,t){if(t.b){var o=t.a,a=t.b;if(a.b){var i=a.a,c=a.b;if(c.b){var l=c.a,d=c.b;if(d.b){var m=d.b;return u(n,o,u(n,i,u(n,l,u(n,d.a,r>500?f(Gr,n,e,Xr(m)):s(It,n,e,r+1,m)))))}return u(n,o,u(n,i,u(n,l,e)))}return u(n,o,u(n,i,e))}return u(n,o,e)}return e})),jt=t((function(n,e,r){return s(It,n,e,0,r)})),Wt=r((function(n,e){return f(jt,r((function(e,r){return u(Lr,n(e),r)})),S,e)})),Ht=wn,Ut=r((function(n,e){return u(Ht,(function(e){return Bt(n(e))}),e)})),Gt=t((function(n,e,r){return u(Ht,(function(e){return u(Ht,(function(r){return Bt(u(n,e,r))}),r)}),e)})),Ot=function(n){return f(jt,Gt(Lr),Bt(S),n)},Yt=In,qt=r((function(n,e){var r=e;return Nn(u(Ht,Yt(n),r))}));Fn.Task=Bn(kt,t((function(n,e){return u(Ut,(function(){return 0}),Ot(u(Wt,qt(n),e)))})),t((function(){return Bt(0)})),r((function(n,e){return u(Ut,n,e)})));var Zt=Wn("Task"),Qt=r((function(n,e){return Zt(u(Ut,n,e))})),Jt=Ae,Xt=r((function(n,e){return{$:0,a:n,b:e}})),Kt=function(n){return{$:7,a:n}},no=r((function(n,e){return{$:5,a:n,b:e}})),eo=r((function(n,e){return{$:3,a:n,b:e}})),ro=Hn,to=Un,oo=function(n){return{$:1,a:n}},ao=t((function(n,e,r){return{cF:r,eh:e,em:n}})),io=Bt(f(ao,S,Ir,0)),co=function(n){return Dn((function(e){var r=n.f;2===r.$&&r.c&&r.c(),n.f=null,e(Ln(0))}))},lo=Dn((function(n){n(Ln(Date.now()))})),uo=Dn((function(n){var e=Ve((function(){n(Ln(Date.now()))}));return function(){Re(e)}})),fo=jn,so=Nn,mo=t((function(n,e,r){var t=r.eh,o=r.cF,a=L(t,e);return 1===a.a.$?a.b.b?u(Ht,(function(n){return u(Ht,(function(r){return Bt(f(ao,e,kr(n),r))}),lo)}),so(u(Ht,fo(n),uo))):io:a.b.b?Bt(f(ao,e,t,o)):u(Ht,(function(){return io}),co(a.a.a))})),vo=_t,bo=t((function(n,e,r){var t=r.em,o=r.cF,a=function(r){return u(Yt,n,(0,r.a)(r.$?e-o:vo(e)))};return u(Ht,(function(n){return u(Ht,(function(){return Bt(f(ao,t,kr(n),e))}),Ot(u(Wt,a,t)))}),so(u(Ht,fo(n),uo)))})),po=t((function(n,e,r){return n(e(r))}));Fn["Browser.AnimationManager"]=Bn(io,mo,bo,0,r((function(n,e){return e.$?oo(u(po,n,e.a)):{$:0,a:u(po,n,e.a)}})));var go=Wn("Browser.AnimationManager"),ho=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),xo=r((function(n,e){return{d8:e,em:n}})),Co={$:-2},Po=Co,Mo=Bt(u(xo,S,Po)),yo=function(n){return L(z(n.a?"w_":"d_",n.b),n)},To=a((function(n,e,r,t,o){return{$:-1,a:n,b:e,c:r,d:t,e:o}})),Lo=a((function(n,e,r,t,o){if(-1!==o.$||o.a){if(-1!==t.$||t.a||-1!==t.d.$||t.d.a)return d(To,n,e,r,t,o);var a=t.d;return i=t.e,d(To,0,t.b,t.c,d(To,1,a.b,a.c,a.d,a.e),d(To,1,e,r,i,o))}var i,c=o.b,l=o.c,u=o.d,f=o.e;return-1!==t.$||t.a?d(To,n,c,l,d(To,0,e,r,t,u),f):d(To,0,e,r,d(To,1,t.b,t.c,t.d,i=t.e),d(To,1,c,l,u,f))})),Do=T,wo=t((function(n,e,r){if(-2===r.$)return d(To,0,n,e,Co,Co);var t=r.a,o=r.b,a=r.c,i=r.d,c=r.e;switch(u(Do,n,o)){case 0:return d(Lo,t,o,a,f(wo,n,e,i),c);case 1:return d(To,t,o,e,i,c);default:return d(Lo,t,o,a,i,f(wo,n,e,c))}})),zo=t((function(n,e,r){var t=f(wo,n,e,r);return-1!==t.$||t.a?t:d(To,1,t.b,t.c,t.d,t.e)})),So=function(n){return f(Gr,r((function(n,e){return f(zo,n.a,n.b,e)})),Po,n)},No=t((function(n,e,r){for(;;){if(-2===r.$)return e;var t=r.e,o=n,a=f(n,r.b,r.c,f(No,n,e,r.d));n=o,e=a,r=t}})),Eo=i((function(n,e,o,a,i,c){var l=f(No,t((function(r,t,a){n:for(;;){var i=a.a,c=a.b;if(i.b){var l=i.a,u=l.a,d=l.b,m=i.b;if(0>y(u,r)){r=r,t=t,a=L(m,f(n,u,d,c));continue n}return y(u,r)>0?L(i,f(o,r,t,c)):L(m,s(e,u,d,t,c))}return L(i,f(o,r,t,c))}})),L(Sr(a),c),i),u=l.a,d=l.b;return f(Gr,r((function(e,r){return f(n,e.a,e.b,r)})),d,u)})),$o=r((function(n,e){return{dt:e,dA:n}})),_o=t((function(n,e,r){return u(Ut,(function(n){return L(e,n)}),f(Ie,r.a?ke:Be,r.b,(function(r){return u(fo,n,u($o,e,r))})))})),Ao=r((function(n,e){return f(No,zo,e,n)})),Ro=t((function(n,e,r){var a=t((function(e,r,t){var o=t.c;return D(t.a,t.b,u(Lr,f(_o,n,e,r),o))})),i=t((function(n,e,r){var t=r.b,o=r.c;return D(u(Lr,e,r.a),t,o)})),c=o((function(n,e,r,t){var o=t.c;return D(t.a,f(zo,n,e,t.b),o)})),l=u(Wt,yo,e),s=m(Eo,i,c,a,r.d8,So(l),D(S,Po,S)),d=s.b,v=s.c;return u(Ht,(function(n){return Bt(u(xo,l,u(Ao,d,So(n))))}),u(Ht,(function(){return Ot(v)}),Ot(u(Wt,co,s.a))))})),Vo=t((function(n,e,r){var t=n(e);return t.$?r:u(Lr,t.a,r)})),Fo=r((function(n,e){return f(jt,Vo(n),S,e)}));Fn["Browser.Events"]=Bn(Mo,Ro,t((function(n,e,r){var t=e.dA,o=e.dt,a=u(Fo,(function(n){var e=n.b.c;return P(n.a,t)?u(je,e,o):Ir}),r.em);return u(Ht,(function(){return Bt(r)}),Ot(u(Wt,Yt(n),a)))})),0,r((function(n,e){return f(ho,e.a,e.b,u(Tt,n,e.c))})));var Bo,ko,Io,jo,Wo,Ho,Uo,Go,Oo,Yo,qo,Zo,Qo,Jo,Xo,Ko,na,ea,ra,ta,oa,aa,ia,ca,la,ua,fa,sa,da,ma,va,ba,pa,ga,ha,xa,Ca,Pa,Ma,ya,Ta,La,Da,wa,za,Sa=Wn("Browser.Events"),Na=t((function(n,e,r){return Sa(f(ho,n,e,r))})),Ea=u(Na,0,"click"),$a=u(Na,0,"keydown"),_a=u(Na,0,"keyup"),Aa=u(Na,0,"mousedown"),Ra=u(Na,0,"mousemove"),Va=u(Na,0,"mouseup"),Fa=rn,Ba=tn,ka=r((function(n,e){return n(e?1:0)})),Ia=function(n){var e=void 0!==Kn.hidden?{e_:"hidden",eH:"visibilitychange"}:void 0!==Kn.mozHidden?{e_:"mozHidden",eH:"mozvisibilitychange"}:void 0!==Kn.msHidden?{e_:"msHidden",eH:"msvisibilitychange"}:void 0!==Kn.webkitHidden?{e_:"webkitHidden",eH:"webkitvisibilitychange"}:{e_:"hidden",eH:"visibilitychange"};return f(Na,0,e.eH,u(Tt,ka(n),u(Mt,"target",u(Mt,e.e_,Ba))))},ja=an,Wa=function(n){return{$:3,b:n}},Ha=Qn("touchCancel",Wa(u(Pt,(function(n){return u(Pt,(function(e){return u(Pt,(function(r){return Dt({bj:r,cH:e,cI:n})}),u(Mt,"identifier",Fa))}),u(Mt,"pageX",yt))}),u(Mt,"pageY",yt)))),Ua=Qn("touchEnd",Wa(u(Pt,(function(n){return u(Pt,(function(e){return u(Pt,(function(r){return Dt({bj:r,cH:e,cI:n})}),u(Mt,"identifier",Fa))}),u(Mt,"pageX",yt))}),u(Mt,"pageY",yt)))),Ga=Qn("touchMove",Wa(u(Pt,(function(n){return u(Pt,(function(e){return u(Pt,(function(r){return Dt({bj:r,cH:e,cI:n})}),u(Mt,"identifier",Fa))}),u(Mt,"pageX",yt))}),u(Mt,"pageY",yt)))),Oa=Qn("touchStart",Wa(u(Pt,(function(n){return u(Pt,(function(e){return u(Pt,(function(r){return Dt({bj:r,cH:e,cI:n})}),u(Mt,"identifier",Fa))}),u(Mt,"pageX",yt))}),u(Mt,"pageY",yt)))),Ya=ro(u(Wt,to(Nt),$([(Bo=eo,f(Na,1,"resize",u(Mt,"target",f(Lt,Bo,u(Mt,"innerWidth",Fa),u(Mt,"innerHeight",Fa))))),_a(u(Tt,Xt(!1),u(Mt,"key",ja))),$a(u(Tt,Xt(!0),u(Mt,"key",ja))),(za=u($t,mt(.001),(function(n){return{$:1,a:n}})),go(oo(za))),Ia(Et),Ea(Dt({$:6})),Aa(Dt(Kt(!0))),Va(Dt(Kt(!1))),Ra(f(Lt,no,u(Mt,"pageX",yt),u(Mt,"pageY",yt))),Oa((function(n){return{$:8,a:n}})),Ga((function(n){return{$:9,a:n}})),Ua((function(n){return{$:10,a:n}})),Ha((function(n){return{$:11,a:n}}))]))),qa=o((function(n,e,r,t){return{ce:t,aQ:r,bD:n,bE:e}})),Za=Po,Qa={b9:!1,aQ:!1,ck:!1,M:Za,ag:!1,a$:!1,c$:!1,c0:!1,b6:!1},Ja=r((function(n,e){return w(e,{ce:n})})),Xa=r((function(n,e){return w(e,{aQ:n})})),Ka=t((function(n,e,r){return w(r,{bD:n,bE:e})})),ni=function(n){if(-1===n.$&&-1===n.d.$&&-1===n.e.$){if(-1!==n.e.d.$||n.e.d.a){var e=n.d,r=n.e;return i=r.b,c=r.c,t=r.d,f=r.e,d(To,1,n.b,n.c,d(To,0,e.b,e.c,e.d,e.e),d(To,0,i,c,t,f))}var t,o=n.d,a=n.e,i=a.b,c=a.c,l=(t=a.d).d,u=t.e,f=a.e;return d(To,0,t.b,t.c,d(To,1,n.b,n.c,d(To,0,o.b,o.c,o.d,o.e),l),d(To,1,i,c,u,f))}return n},ei=function(n){if(-1===n.$&&-1===n.d.$&&-1===n.e.$){if(-1!==n.d.d.$||n.d.d.a){var e=n.d,r=n.e;return u=r.b,f=r.c,s=r.d,m=r.e,d(To,1,t=n.b,o=n.c,d(To,0,e.b,e.c,e.d,c=e.e),d(To,0,u,f,s,m))}var t=n.b,o=n.c,a=n.d,i=a.d,c=a.e,l=n.e,u=l.b,f=l.c,s=l.d,m=l.e;return d(To,0,a.b,a.c,d(To,1,i.b,i.c,i.d,i.e),d(To,1,t,o,c,d(To,0,u,f,s,m)))}return n},ri=c((function(n,e,r,t,o,a,i){if(-1!==a.$||a.a){n:for(;;){if(-1===i.$&&1===i.a){if(-1===i.d.$){if(1===i.d.a)return ei(e);break n}return ei(e)}break n}return e}return d(To,r,a.b,a.c,a.d,d(To,0,t,o,a.e,i))})),ti=function(n){if(-1===n.$&&-1===n.d.$){var e=n.a,r=n.b,t=n.c,o=n.d,a=o.d,i=n.e;if(1===o.a){if(-1!==a.$||a.a){var c=ni(n);if(-1===c.$){var l=c.e;return d(Lo,c.a,c.b,c.c,ti(c.d),l)}return Co}return d(To,e,r,t,ti(o),i)}return d(To,e,r,t,ti(o),i)}return Co},oi=r((function(n,e){if(-2===e.$)return Co;var r=e.a,t=e.b,o=e.c,a=e.d,i=e.e;if(0>y(n,t)){if(-1===a.$&&1===a.a){var c=a.d;if(-1!==c.$||c.a){var l=ni(e);if(-1===l.$){var f=l.e;return d(Lo,l.a,l.b,l.c,u(oi,n,l.d),f)}return Co}return d(To,r,t,o,u(oi,n,a),i)}return d(To,r,t,o,u(oi,n,a),i)}return u(ai,n,v(ri,n,e,r,t,o,a,i))})),ai=r((function(n,e){if(-1===e.$){var r=e.a,t=e.b,o=e.c,a=e.d,i=e.e;if(P(n,t)){var c=function(n){for(;;){if(-1!==n.$||-1!==n.d.$)return n;n=n.d}}(i);return-1===c.$?d(Lo,r,c.b,c.c,a,ti(i)):Co}return d(Lo,r,t,o,a,u(oi,n,i))}return Co})),ii=r((function(n,e){var r=u(oi,n,e);return-1!==r.$||r.a?r:d(To,1,r.b,r.c,r.d,r.e)})),ci=r((function(n,e){return{di:-e/2,cm:e,ag:-n/2,a$:n/2,by:e/2,c9:n}})),li=r((function(n,e){return f(zo,n,0,e)})),ui=r((function(n,e){return u(ii,n,e)})),fi=t((function(n,e,r){var t=u(n?li:ui,e,r.M);switch(e){case" ":return w(r,{M:t,c0:n});case"Enter":return w(r,{ck:n,M:t});case"Shift":return w(r,{M:t,c$:n});case"Backspace":return w(r,{b9:n,M:t});case"ArrowUp":return w(r,{M:t,b6:n});case"ArrowDown":return w(r,{aQ:n,M:t});case"ArrowLeft":return w(r,{M:t,ag:n});case"ArrowRight":return w(r,{M:t,a$:n});default:return w(r,{M:t})}})),si=r((function(n,e){switch(n.$){case 1:var r=n.a;return w(e,e.G.ce?{G:u(Ja,!1,e.G),a2:e.a2+r}:{a2:e.a2+r});case 2:var t=n.a.fC;return w(e,{aa:u(ci,t.c9,t.cm)});case 3:return w(e,{aa:u(ci,n.a,n.b)});case 0:return w(e,{bk:f(fi,n.a,n.b,e.bk)});case 5:return w(e,{G:f(Ka,e.aa.ag+n.a,e.aa.by-n.b,e.G)});case 6:return w(e,{G:u(Ja,!0,e.G)});case 7:return w(e,{G:u(Xa,n.a,e.G)});case 8:case 9:return w(e,{ab:f(Gr,(function(n){return u(zo,n.bj,{bD:e.aa.ag+n.cH,bE:e.aa.by-n.cI})}),e.ab,n.a)});case 10:case 11:return w(e,{ab:f(Gr,(function(n){return ii(n.bj)}),e.ab,n.a)});default:return w(e,{bk:Qa,G:s(qa,e.G.bD,e.G.bE,!1,!1)})}})),di=r((function(n,e){return{P:e,U:n}})),mi=f(Lt,r((function(n,e){return L(n,e)})),u(Mt,"A1",ja),u(Mt,"A2",ja)),vi=dn,bi=s(vi,t((function(n,e,r){return D(n,e,r)})),u(Mt,"A1",yt),u(Mt,"A2",yt),u(Mt,"A3",yt)),pi=f(Lt,r((function(n,e){return L(n,e)})),u(Mt,"A1",ja),u(Mt,"A2",bi)),gi=f(Lt,di,u(Mt,"floats",Wa(pi)),u(Mt,"colors",Wa(mi))),hi=mn,xi=r((function(n,e){return{P:e,aE:"",U:n,aq:""}})),Ci=u(xi,S,S),Pi=r((function(n,e){return e.$?Ir:n(e.a)})),Mi=r((function(n,e){return e.$?_r(e.a):n(e.a)})),yi=o((function(n,e,r,t){return{e0:e,e8:n,fe:r,fr:t}})),Ti=He,Li=r((function(n,e){return e.$?_r(n):Fr(e.a)})),Di=We,wi=function(n){return n.b?kr(n.a):Ir},zi=r((function(n,e){return e.$?Ir:kr(n(e.a))})),Si=r((function(n,e){return e.$?_r(e.a):Fr(n(e.a))})),Ni=r((function(n,e){return Jr(e)-Jr(n)})),Ei=t((function(n,e,r){var t=Jr(r);return 1>y(Jr(n),t)&&1>y(t,Jr(e))})),$i=r((function(n,e){var r=f(Ei,"0","9",e)?Fr(u(Ni,"0",e)):f(Ei,"a","z",e)?Fr(10+u(Ni,"a",e)):f(Ei,"A","Z",e)?Fr(10+u(Ni,"A",e)):_r({$:0,a:e});return u(Mi,(function(r){return 0>y(r,n)?Fr(r):_r({$:1,a:e})}),r)})),_i=r((function(n,e){var r=Kr(e);if(1===r.$)return Fr(0);var t=r.a,o=t.b;return u(Mi,(function(e){return u(Mi,(function(r){return Fr(e+r*n)}),u(_i,n,o))}),u($i,n,t.a))})),Ai=function(n){for(var e=n.length,r=Array(e),t=0;e>t;){var o=n.charCodeAt(t);55296>o||o>56319?(r[e-t]=n[t],t++):(r[e-t]=n[t+1],r[e-++t]=n[t-1],t++)}return r.join("")},Ri=r((function(n,e){return 2>n||n>36?_r({$:2,a:n}):u(_i,n,Ai(e))})),Vi=Ri(16),Fi=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),Bi=t((function(n,e,r){return s(Fi,n,e,r,1)})),ki=o((function(n,e,r,t){return s(Fi,n,e,r,t)})),Ii=V,ji=U,Wi=r((function(n,e){var r=u(Ii,10,n);return ji(e*r)/r})),Hi=Z,Ui=function(n){return f(Hi,Lr,S,n)},Gi=(ko=function(n){var e=Ui(n);if(e.b&&!e.b.b){var r=e.a;return _($([r,r])).join("")}return n},u($t,(function(n){return n.toLowerCase()}),u($t,(function(n){return u(zi,(function(e){return f(Ti,1,e,n)}),u(Di,{eE:!1,fa:!1},"^#?(?:(?:([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2}))|(?:([a-f\\d])([a-f\\d])([a-f\\d]))|(?:([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2}))|(?:([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d])))$"))}),u($t,Pi(wi),u($t,zi((function(n){return n.fr})),u($t,zi(Fo(_t)),u($t,Li("Parsing hex regex failed"),Mi((function(n){var e=u(Wt,u($t,ko,u($t,Vi,Si(at))),n);n:for(;;){if(e.b&&!e.a.$&&e.b.b&&!e.b.a.$&&e.b.b.b&&!e.b.b.a.$){if(e.b.b.b.b){if(e.b.b.b.a.$||e.b.b.b.b.b)break n;var r=e.b,t=r.b;return Fr(s(ki,e.a.a/255,r.a.a/255,t.a.a/255,u(Wi,2,t.b.a.a/255)))}var o=e.b;return Fr(f(Bi,e.a.a/255,o.a.a/255,o.b.a.a/255))}break n}return _r("Parsing ints from hex failed")}))))))))),Oi=r((function(n,e){return L(e.a,n(e.b))})),Yi=s(Fi,1,1,1,1),qi=r((function(n,e){return e.$?n:e.a})),Zi=u($t,hi(gi),u($t,Si((function(n){return{P:u(Wt,Oi(u($t,Gi,qi(Yi))),n.P),aE:"",U:n.U,aq:""}})),qi(Ci))),Qi=function(n){return f(Gr,r((function(n,e){return f(Tn,n.a,n.b,e)})),{},n)},Ji=yn,Xi=function(n){var e=n.b;return Qi($([L("A1",Ji(n.a)),L("A2",Ji(e))]))},Ki=yn,nc=function(n){var e=n.b,r=n.c;return Qi($([L("A1",Ki(n.a)),L("A2",Ki(e)),L("A3",Ki(r))]))},ec=function(n){var e=n.b;return Qi($([L("A1",Ji(n.a)),L("A2",nc(e))]))},rc=r((function(n,e){return f(Gr,function(n){return r((function(e,r){return r.push(n(e)),r}))}(n),[],e)})),tc=q,oc=function(n){return u(tc,n,"")},ac=t((function(n,e,r){return n>0?f(ac,n>>1,z(e,e),1&n?z(r,e):r):r})),ic=r((function(n,e){return f(ac,n,e,"")})),cc=t((function(n,e,r){return z(u(ic,n-At(r),oc(e)),r)})),lc=function(n){return 0>n||n>1114111?"�":n>65535?String.fromCharCode(Math.floor((n-=65536)/1024)+55296,n%1024+56320):String.fromCharCode(n)},uc=F,fc=function(n){var e=function(n){return 10>n?Wr(n):oc(lc(87+n))};return 16>n?e(n):z(fc(n/16|0),e(u(uc,16,n)))},sc=u($t,fc,u(cc,2,"0")),dc=function(n){return{aP:n.d,cd:n.c,cl:n.b,cU:n.a}},mc=function(n){var e=dc(n),r=e.cU,t=e.cl,o=e.cd;return u(Hr,"",u(Lr,"#",u(Wt,u($t,ji,sc),$([255*r,255*t,255*o]))))},vc=u($t,(function(n){return{P:u(Wt,Oi(mc),n.P),U:n.U}}),u($t,(function(n){return Qi($([L("floats",u(rc,ec,n.U)),L("colors",u(rc,Xi,n.P))]))}),jr(0))),bc=function(n){return 0>n?-n:n},pc=function(n){if(0===n.length||/[\sxbo]/.test(n))return Ir;var e=+n;return e==e?kr(e):Ir},gc=r((function(n,e){return e.$?n:e.a})),hc=t((function(n,e,r){return u(gc,NaN,pc(u(n,e,r)))})),xc=function(n){return!n},Cc=r((function(n,e){for(;;){if(!e.b)return!1;var r=e.b;if(n(e.a))return!0;n=n,e=r}})),Pc=r((function(n,e){var r=u(Cc,(function(n){return"0"!==n&&"."!==n}),Ui(e));return z(n&&r?"-":"",e)})),Mc=nn,yc=function(n){var e=n.a,r=n.b;if("9"===e){var t=Kr(r);return 1===t.$?"01":u(tc,"0",yc(t.a))}var o=Jr(e);return o>=48&&57>o?u(tc,lc(o+1),r):"0"},Tc=function(n){return n===1/0||n===-1/0},Lc=Y,Dc=t((function(n,e,r){return z(r,u(ic,n-At(r),oc(e)))})),wc=function(n){var e=u(Ur,".",n);return e.b?L(e.a,e.b.b?e.b.a:"0"):L("0","0")},zc=r((function(n,e){var r=e.b;return L(n(e.a),r)})),Sc=t((function(n,e,r){if(Tc(r)||Lc(r))return Mc(r);var t=0>r,o=wc(function(n){var e=u(Ur,"e",Mc(bc(n)));if(e.b){if(e.b.b){var r=e.a,t=e.b.a,o=u(gc,0,function(n){for(var e=0,r=n.charCodeAt(0),t=43==r||45==r?1:0,o=t;n.length>o;++o){var a=n.charCodeAt(o);if(48>a||a>57)return Ir;e=10*e+a-48}return o==t?Ir:kr(45==r?-e:e)}(u(Ft,"+",t)?u(Vt,1,t):t)),a=wc(r),i=z(a.a,a.b),c=0>o?u(gc,"0",u(zi,(function(n){return n.a+"."+n.b}),u(zi,zc(oc),Kr(z(u(ic,bc(o),"0"),i))))):f(Dc,o+1,"0",i);return z(0>n?"-":"",c)}return z(0>n?"-":"",r=e.a)}return""}(bc(r))),a=o.a,i=o.b,c=At(a)+e,l=z(u(ic,1-c,"0"),f(Dc,c,"0",z(a,i))),s=At(l),d=u(dt,1,c),m=u(n,t,f(Rt,d,s,l)),v=f(Rt,0,d,l),b=m?Ai(u(gc,"1",u(zi,yc,Kr(Ai(v))))):v,p=At(b),g="0"===b?b:e>0?0>y(e,At(i))?f(Rt,0,p-e,b)+"."+f(Rt,p-e,p,b):z(a+".",f(Dc,e,"0",i)):z(b,u(ic,bc(e),"0"));return u(Pc,t,g)})),Nc=Sc(r((function(n,e){var r,t=Kr(e);return 1!==t.$&&("5"===t.a.a?""!==t.a.b||!n:(r=Jr(t.a.a))>53&&n||r>=53&&!n)}))),Ec=hc(Nc),$c=t((function(n,e,r){var t=u(ot,10,bc(e-n));return u(Ec,0>t?3:1>t?2:2>t?1:0,r)})),_c=r((function(n,e){switch(n.$){case 2:var r=Zi(e.aq);return w(r,{aE:r.aE,aq:r.aq});case 3:return w(e,{aq:n.a});case 4:return w(e,{aE:vc(e)});case 0:var t=n.a,o=n.b;return w(e,{U:u(Wt,(function(n){var e=n.a,r=n.b,a=r.a,i=r.c;return P(e,t)?L(e,D(a,f($c,a,i,o),i)):n}),e.U)});default:return t=n.a,o=n.b,w(e,{P:u(Wt,(function(n){var e=n.a;return P(e,t)?L(e,o):n}),e.P)})}})),Ac=o((function(n,e,r,t){var o=t.F;switch(r.$){case 0:return t;case 1:return w(t,{a6:r.a});case 2:return w(t,{bd:!1});case 3:return w(t,{bd:!0});case 4:return w(t,{af:f(e,t.F,r.a,t.af)});case 5:return w(t,{F:w(o,{bO:u(_c,r.a,o.bO)})});default:var a=r.a,i=1===a.$?u(n,o,t.af):t.af;return w(t,{F:u(si,a,t.F),af:i})}})),Rc=(wa=function(){return{ej:(n=Be.body,e=Be.documentElement,{c9:Math.max(n.scrollWidth,n.offsetWidth,e.scrollWidth,e.offsetWidth,e.clientWidth),cm:Math.max(n.scrollHeight,n.offsetHeight,e.scrollHeight,e.offsetHeight,e.clientHeight)}),fC:{bD:ke.pageXOffset,bE:ke.pageYOffset,c9:Be.documentElement.clientWidth,cm:Be.documentElement.clientHeight}};var n,e},Dn((function(n){Ve((function(){n(Ln(wa()))}))}))),Vc=r((function(n,e){return{bO:e,ci:n.ci,bk:Qa,G:s(qa,0,0,!1,!1),aa:u(ci,600,600),a2:0,ab:Po}})),Fc=Hn,Bc=Fc(S),kc=function(n){return{$:5,a:n}},Ic=function(n){return{$:4,a:n}},jc={$:2},Wc={$:0},Hc=function(n){return{$:1,a:n}},Uc={$:3},Gc=r((function(n){return n})),Oc=te("button"),Yc=function(n){return n?"Level Editor":"Configurations"},qc=function(n){return u(gc,0,wi(u(Fo,(function(e){return P(Yc(e),n)?kr(e):Ir}),$([0,1]))))},Zc=ae,Qc=Zc,Jc=ie,Xc=r((function(n,e){return u(Jc,n,{$:0,a:e})})),Kc=r((function(n,e){return f(jt,Mt,e,n)})),nl=u(Kc,$(["target","value"]),ja),el=function(n){return u(Xc,"click",Dt(n))},rl=te("option"),tl=te("select"),ol=ce,al=ol,il=ee,cl=il,ll=r((function(n,e){return u(le,n,Ji(e))})),ul=ll("value"),fl=r((function(n,e){return{$:1,a:n,b:e}})),sl=r((function(n,e){return{$:0,a:n,b:e}})),dl=s(Fi,0,0,0,1),ml=u(Oc,$([u(al,"cursor","pointer"),el({$:4})]),$([cl("Export Configurations as json")])),vl=te("h3"),bl=te("p"),pl=yn,gl=r((function(n,e){return u(le,n,pl(e))})),hl=gl("readOnly"),xl=te("textarea"),Cl=function(n){return u(zt,S,$([u(xl,$([hl(!0)]),$([cl(n.aE)]))]))},Pl=function(n){return u(zt,S,$([u(vl,S,$([cl("Export Configurations")])),u(bl,S,$([ml])),u(bl,S,$([Cl(n)]))]))},Ml=ll("htmlFor"),yl=te("hr"),Tl=ll("id"),Ll=u(Oc,$([u(al,"cursor","pointer"),el({$:2})]),$([cl("Import Configurations")])),Dl=function(n){return{$:3,a:n}},wl=function(n){return L(n,!0)},zl=r((function(n,e){return u(Jc,n,{$:1,a:e})})),Sl=function(n){return u(zl,"input",u(Tt,wl,u(Tt,n,nl)))},Nl=function(n){return u(zt,S,$([u(xl,$([Sl(Dl)]),$([cl(n.aq)]))]))},El=function(n){return u(zt,S,$([u(vl,S,$([cl("Import Configurations")])),u(bl,S,$([Nl(n)])),u(bl,S,$([Ll]))]))},$l=te("input"),_l=te("label"),Al=ll("max"),Rl=ll("min"),Vl=ll("name"),Fl=te("span"),Bl=ll("type"),kl=t((function(n,e,t){var o,a,i,c,l=u(zt,$([u(al,"position","fixed"),u(al,"top","0px"),u(al,"left","0px"),u(al,"width",Mc(t.F.aa.c9)+"px"),u(al,"height",Mc(t.F.aa.cm)+"px"),u(al,"font-size","16px")]),$([u(Qc,Gc(Wc),u(n,t.F,t.af))])),f=t.a6?u(Qc,Ic,u(e,t.F,t.af)):u(Qc,kc,(o=t.F.bO,a=function(n){var e=n.a,r=n.b,t=r.a,o=r.b,a=r.c;return u(zt,$([u(al,"margin-top","15px")]),$([u(zt,S,$([u(_l,$([Ml(e)]),$([cl(e),cl(": "),u(Fl,$([u(al,"font-family","monospace"),u(al,"font-weight","bold")]),$([cl(Mc(o))]))]))])),u($l,$([Bl("range"),Tl(e),Vl(e),Rl(Mc(t)),Al(Mc(a)),Sl((function(n){return u(sl,e,u(gc,0,pc(n)))})),u(ll,"step","any"),u(al,"width","200px"),ul(Mc(o))]),S)]))},i=function(n){var e=n.a,r=n.b;return u(zt,$([u(al,"margin-top","15px")]),$([u(zt,S,$([u(_l,$([Ml(e)]),$([cl(e)]))])),u($l,$([Bl("color"),u(al,"width","200px"),u(al,"height","30px"),Tl(e),Vl(e),Sl((function(n){return u(fl,e,u(qi,dl,Gi(n)))})),ul(mc(r))]),S)]))},u(zt,$([u(al,"margin-left","20px"),u(al,"height","100%"),u(al,"overflow","scroll")]),$([u(zt,S,u(Wt,a,o.U)),u(zt,S,u(Wt,i,o.P)),u(yl,S,S),Pl(o),El(o)])))),s=u(zt,$([u(al,"margin-left","0px")]),$([u(tl,$([(c=u($t,qc,Hc),u(Xc,"change",u(Tt,c,nl))),ul(Yc(t.a6)),u(al,"width","200px"),u(al,"height","40px"),u(al,"font-size","20px")]),u(Wt,(function(n){return u(rl,$([ul(Yc(n))]),$([cl(Yc(n))]))}),$([0,1])))])),d=r((function(n,e){return u(Oc,$([u(al,"font-size","30px"),u(al,"width","40px"),u(al,"height","40px"),el(n)]),$([cl(e)]))})),m=u(zt,$([u(al,"position","fixed"),u(al,"top","0px"),u(al,"left","0px"),u(al,"width",Mc(250)+"px"),u(al,"height",Mc(t.F.aa.cm)+"px"),u(al,"font-family",'-apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif'),u(al,"font-size","16px")]),$(t.bd?[u(zt,$([u(al,"height","100px")]),$([u(d,jc,"✕"),s])),u(zt,$([u(al,"height",Mc(t.F.aa.cm-100)+"px")]),$([f]))]:[u(d,Uc,"≡")]));return u(zt,$([u(al,"touch-action","none"),u(al,"user-select","none")]),$([l,m]))})),Il=i((function(n,e,t,o,a,i){return Jt({e1:function(n){var e=u(Vc,n,t);return L({a6:0,F:e,bd:!1,af:o(e),c8:0},u(Qt,u($t,St,Nt),Rc))},fs:function(n){return 1===n.c8?u(to,Nt,Ia(Et)):Ya},fz:r((function(n,r){return L(s(Ac,e,i,n,r),Bc)})),fB:u(kl,n,a)})})),jl=o((function(n,e,o,a){return m(Il,n,e,o,a,r((function(){return u(zt,S,S)})),t((function(n,e,r){return r})))})),Wl=xi,Hl=Wl,Ul=3.141592653589793,Gl=u(Hl,$([L("number of tree blocks",D(1,16,20)),L("turning speed of the tree",D(.1,1,4)),L("azimuth for third light",D(-3.141592653589793,1,Ul)),L("elevation for third light",D(-3.141592653589793,-2,Ul)),L("azimuth for fourth light",D(-3.141592653589793,1,Ul)),L("elevation for fourth light",D(-3.141592653589793,-2,Ul))]),S),Ol=r((function(n,e){return e})),Yl=function(n){return Ul*(n/180)},ql=G,Zl=r((function(n,e){var r=e.az-n.az,t=e.bE-n.bE,o=e.bD-n.bD,a=u(dt,bc(o),u(dt,bc(t),bc(r)));if(a){var i=r/a,c=t/a,l=o/a,f=ql(l*l+c*c+i*i);return kr({bD:l/f,bE:c/f,az:i/f})}return Ir})),Ql=r((function(n,e){return{bD:e.bE*n.az-e.az*n.bE,bE:e.az*n.bD-e.bD*n.az,az:e.bD*n.bE-e.bE*n.bD}})),Jl=function(n){var e=n,r=u(dt,bc(e.bD),u(dt,bc(e.bE),bc(e.az)));if(r){var t=e.az/r,o=e.bE/r,a=e.bD/r,i=ql(a*a+o*o+t*t);return kr({bD:a/i,bE:o/i,az:t/i})}return Ir},Xl=r((function(n,e){return{bD:e.bD-n.bD,bE:e.bE-n.bE,az:e.az-n.az}})),Kl=r((function(n,e){return e.bD*n.bD+e.bE*n.bE+e.az*n.az})),nu=r((function(n,e){return y(e,n)>0})),eu=r((function(n,e){return 0>y(e,n)})),ru=r((function(n,e){return{bD:e.bD-n.bD,bE:e.bE-n.bE,az:e.az-n.az}})),tu=r((function(n,e){var r=e.bD*n.bD+e.bE*n.bE+e.az*n.az;return{bD:n.bD*r,bE:n.bE*r,az:n.az*r}})),ou={bD:0,bE:0,az:0},au=t((function(n,e,r){return u(Pi,(function(t){return u(Pi,(function(o){var a,i=u(Ql,e,n),c=u(Kl,r,i),l=u(nu,0,c)?i:u(eu,0,c)?{bD:-(a=i).bD,bE:-a.bE,az:-a.az}:ou;return u(zi,(function(n){return D(t,o,n)}),Jl(l))}),Jl(u(ru,u(tu,t,e),e)))}),Jl(n))})),iu=function(n){var e=function(n){var e=n,r=bc(e.az),t=bc(e.bE),o=bc(e.bD);if(1>y(o,t)){if(1>y(o,r)){var a=ql(e.az*e.az+e.bE*e.bE);return{bD:0,bE:-e.az/a,az:e.bE/a}}return a=ql(e.bE*e.bE+e.bD*e.bD),{bD:-e.bE/a,bE:e.bD/a,az:0}}return 1>y(t,r)?(a=ql(e.az*e.az+e.bD*e.bD),{bD:e.az/a,bE:0,az:-e.bD/a}):(a=ql(e.bD*e.bD+e.bE*e.bE),{bD:-e.bE/a,bE:e.bD/a,az:0})}(n);return L(e,{bD:n.bE*e.az-n.az*e.bE,bE:n.az*e.bD-n.bD*e.az,az:n.bD*e.bE-n.bE*e.bD})},cu=r((function(n,e){var r=iu(n);return{cG:e,db:r.a,dc:r.b,dd:n}})),lu={bD:0,bE:0,az:0},uu=function(n){return bc(n)},fu=function(n){return.5*n},su=I,du={bD:0,bE:1,az:0},mu=(Io={eR:{bD:5,bE:5,az:12},eU:{bD:0,bE:1,az:0},fy:{bD:0,bE:1,az:0}},jo=Io.eU,Wo=Io.eR,Ho=Io.fy,function(n){var e,r=fu(uu(n.es));return{cT:(e=su(r),{$:0,a:e}),c7:n.c7}}({es:Yl(40),c7:function(n){var e=u(Xl,n.eU,n.eR),r=n.fy,t=f(au,e,r,u(Ql,e,r));if(t.$){var o=Jl(e);if(o.$){var a=iu(n.fy);return{cG:n.eR,db:a.b,dc:n.fy,dd:a.a}}return u(cu,o.a,n.eR)}var i=t.a;return{cG:n.eR,db:i.c,dc:i.b,dd:i.a}}({eR:Wo,eU:jo,fy:u(gc,du,u(Zl,lu,Ho))})})),vu=t((function(n,e,r){return 0>y(r,n)?n:y(r,e)>0?e:r})),bu=function(n){return{$:0,a:n}},pu={$:3},gu=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),hu=gu,xu=r((function(n,e){return e.b?f(jt,Lr,e,n):n})),Cu=function(n){return f(jt,xu,S,n)},Pu=r((function(n,e){return Cu(u(Wt,n,e))})),Mu=function(n){return{$:1,a:n}},yu=function(n){return u(ue,"height",Wr(n))},Tu=function(n){return oe(function(n){return"script"==n?"p":n}(n))},Lu=function(n){return{$:2,a:n}},Du=r((function(n,e){switch(e.$){case 0:return u(mr,n,e);case 1:return u(vr,n,e);case 2:return u(br,n,e);case 3:return u(pr,n,e);case 4:return u(gr,n,e);default:return u(hr,n,e)}})),wu=r((function(n,e){switch(e.$){case 0:return u(Ze,n,e);case 1:return u(Qe,n,e);case 2:return u(Je,n,e);case 3:return u(Xe,n,e);case 4:return u(Ke,n,e);case 5:return u(nr,n,e);case 6:return u(er,n,e);case 7:return u(rr,n,e);default:return function(n){var e=n.sampleAlphaToCoverage;e.toggle=n.toggle,e.enabled||(n.gl.enable(n.gl.SAMPLE_ALPHA_TO_COVERAGE),e.enabled=!0)}(n)}})),zu=t((function(n,e,r){return f(dr,n,e,r)})),Su=Tr,Nu=s(Su,1,1,1,1),Eu=t((function(n,e,r){return u(Wt,(function(n){return u(n,e,r)}),n)})),$u=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),_u=r((function(n,e){var r=e.bD,t=e.bE;return f($u,n*r/t,n,n*(1-r-t)/t)})),Au=Mr,Ru=r((function(n,e){return function(n){var e=n.a,r=n.b,t=n.c;return f(Au,3.2406*e-1.5372*r-.4986*t,-.9689*e+1.8758*r+.0415*t,.0557*e-.204*r+1.057*t)}(u(_u,n,e))})),Vu=r((function(n,e){return{dz:P(n.dz,e.dz),q:n.q*e.q+n.r*e.t+n.s*e.w,r:n.q*e.r+n.r*e.u+n.s*e.x,s:n.q*e.s+n.r*e.v+n.s*e.y,t:n.t*e.q+n.u*e.t+n.v*e.w,u:n.t*e.r+n.u*e.u+n.v*e.x,v:n.t*e.s+n.u*e.v+n.v*e.y,w:n.w*e.q+n.x*e.t+n.y*e.w,x:n.w*e.r+n.x*e.u+n.y*e.x,y:n.w*e.s+n.x*e.v+n.y*e.y,H:e.H+(n.H*e.q+n.I*e.t+n.J*e.w)*e.b4,I:e.I+(n.H*e.r+n.I*e.u+n.J*e.x)*e.b4,J:e.J+(n.H*e.s+n.I*e.v+n.J*e.y)*e.b4,b4:n.b4*e.b4}})),Fu=function(n){var e=new Float64Array(16);return e[0]=n.dH,e[1]=n.dL,e[2]=n.dP,e[3]=n.dT,e[4]=n.dI,e[5]=n.dM,e[6]=n.dQ,e[7]=n.dU,e[8]=n.dJ,e[9]=n.dN,e[10]=n.dR,e[11]=n.dV,e[12]=n.dK,e[13]=n.dO,e[14]=n.dS,e[15]=n.dW,e},Bu=a((function(n,e,r,t,o){return m(o,n,s(Su,t.b4,t.b4,t.b4,t.dz?1:-1),function(n){return Fu({dH:n.q,dI:n.t,dJ:n.w,dK:n.H,dL:n.r,dM:n.u,dN:n.x,dO:n.I,dP:n.s,dQ:n.v,dR:n.y,dS:n.J,dT:0,dU:0,dV:0,dW:1})}(t),t.dz,e,r)})),ku=i((function(n,e,r,t,o,a){n:for(;;)switch(o.$){case 0:return a;case 5:var i=o.b;n=n,e=e,r=r,t=u(Vu,o.a,t),o=i,a=a;continue n;case 1:return{N:u(Lr,d(Bu,n,e,r,t,o.b),a.N),W:a.W,fn:a.fn};case 3:return{N:a.N,W:u(Lr,d(Bu,n,e,r,t,o.b),a.W),fn:a.fn};case 2:return{N:a.N,W:a.W,fn:u(Lr,d(Bu,n,e,r,t,o.a),a.fn)};default:var c=o.a;return f(Gr,s(ku,n,e,r,t),a,c)}})),Iu=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),ju=Iu,Wu=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),Hu=r((function(n,e){return{$:6,a:n,b:e}})),Uu=Hu,Gu=$([s(Wu,518,!1,0,1),s(ju,!1,!1,!1,!1),u(Uu,0,1)]),Ou=519,Yu=7681,qu={src:"\n        precision lowp float;\n\n        void main() {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        }\n    ",attributes:{},uniforms:{}},Zu=qe,Qu=r((function(n,e){return{$:0,a:n,b:e}})),Ju=Qu({$7:1,dy:0,d3:5}),Xu=Pr,Ku=Ju($([{eb:u(Xu,-1,-1)},{eb:u(Xu,1,-1)},{eb:u(Xu,-1,1)},{eb:u(Xu,1,1)}])),nf={src:"\n        precision lowp float;\n\n        attribute vec2 position;\n\n        void main() {\n            gl_Position = vec4(position, 0.0, 1.0);\n        }\n    ",attributes:{position:"eb"},uniforms:{}},ef=function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return function(f){return{$:2,a:n,b:e,c:r,d:t,e:o,f:a,g:i,h:c,i:l,j:u,k:f}}}}}}}}}}}},rf=t((function(n,e,t){var o=n.cV,a=n.cx,i=n.da,c=r((function(n,e){return e(n)})),l=r((function(n,e){return e(n)})),s=function(n){return u($t,c(n.bu),u($t,l(n.bf),u($t,l(n.bF),l(n.bG))))};return u(s,t,u(s,e,f(ef,o,a,i)))})),tf=function(n){return f(rf,{cx:n.cx,cV:n.cV,da:n.da},{bf:n.bf,bu:n.bu,bF:n.bF,bG:n.bG},{bf:n.bf,bu:n.bu,bF:n.bF,bG:n.bG})},of=function(n){return d(Zu,$([tf(n),s(ju,!1,!1,!1,!1)]),nf,qu,Ku,{})},af=of({bf:Yu,cx:0,cV:8,bu:Ou,da:15,bF:Yu,bG:Yu}),cf=7680,lf=function(n){return of({bf:cf,cx:15,cV:8,bu:516,da:(e=n,u(Ii,2,e+4)),bF:5386,bG:5386});var e},uf=t((function(n,e,r){return Cu($([f(Eu,n,r,Gu),$([lf(e),af])]))})),ff=r((function(n,e){return Cu(u(Qr,uf(n),e))})),sf=s(Wu,513,!0,0,1),df=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),mf=r((function(n,e){return f(df,32774,n,e)})),vf=function(n){var e=n.b2,t=n.bQ,o=n.bJ,a=n.bH,i=n.bM,c=n.aP;return u(r((function(n,r){var i=n.b,c=n.c,l=r.a,u=r.b,f=r.c;return function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return{$:0,a:n,b:e,c:r,d:t,e:o,f:a,g:i,h:c,i:l,j:u}}}}}}}}}}}(n.a)(i)(c)(l)(u)(f)(e)(t)(o)(a)})),i,c)}({bH:0,aP:u(mf,1,771),bJ:0,bM:u(mf,770,771),bQ:0,b2:0}),bf=$([sf,vf]),pf=function(n){return n.d_},gf=function(n){return n.d1},hf=r((function(n,e){return e-n})),xf=function(n){return D(u(hf,function(n){return n.d$}(n),function(n){return n.dY}(n)),u(hf,function(n){return n.d0}(n),function(n){return n.dZ}(n)),u(hf,gf(n),pf(n)))},Cf=function(n){return n.cG},Pf=function(n){return Cf(n)},Mf=function(n){return{cG:{bD:n.H,bE:n.I,az:n.J},db:{bD:n.q,bE:n.r,az:n.s},dc:{bD:n.t,bE:n.u,az:n.v},dd:{bD:n.w,bE:n.x,az:n.y}}},yf=r((function(n,e){var r=n.dd,t=n.dc,o=n.db;return{bD:e.bD*o.bD+e.bE*o.bE+e.az*o.az,bE:e.bD*t.bD+e.bE*t.bE+e.az*t.az,az:e.bD*r.bD+e.bE*r.bE+e.az*r.az}})),Tf=r((function(n,e){var r=n.cG,t=e.bD-r.bD,o=e.bE-r.bE,a=e.az-r.az,i=n.dd,c=n.dc,l=n.db;return{bD:t*l.bD+o*l.bE+a*l.az,bE:t*c.bD+o*c.bE+a*c.az,az:t*i.bD+o*i.bE+a*i.az}})),Lf=function(n){return n.db},Df=function(n){return n.dc},wf=function(n){return n.dd},zf=r((function(n,e){return{cG:u(Tf,n,Cf(e)),db:u(yf,n,Lf(e)),dc:u(yf,n,Df(e)),dd:u(yf,n,wf(e))}})),Sf=t((function(n,e,r){return{bD:n,bE:e,az:r}})),Nf=r((function(n,e){return u(dt,n,e)})),Ef=r((function(n,e){return 0>y(n,e)?n:e})),$f=r((function(n,e){return u(Ef,n,e)})),_f=r((function(n,e){var r=e,t=n;return{dY:u(Nf,t.dY,r.dY),dZ:u(Nf,t.dZ,r.dZ),d_:u(Nf,t.d_,r.d_),d$:u($f,t.d$,r.d$),d0:u($f,t.d0,r.d0),d1:u($f,t.d1,r.d1)}})),Af=r((function(n,e){return e+n})),Rf=r((function(n,e){var r=n.a,t=n.c,o=fu(uu(n.b)),a=fu(uu(r)),i=fu(uu(t)),c=function(n){return D(n.bD,n.bE,n.az)}(e),l=c.a,f=c.b,s=c.c;return{dY:u(Af,a,l),dZ:u(Af,o,f),d_:u(Af,i,s),d$:u(hf,a,l),d0:u(hf,o,f),d1:u(hf,i,s)}})),Vf=o((function(n,e,r,t){var o=r.eG,a=2*r.eY*e,i=2*r.eX*e,c=2*r.eW*e,l=o.az*e,s=o.bE*e,d=o.bD*e,m=wf(n),v=bc(c*m.bD)+bc(i*m.bE)+bc(a*m.az),b=Df(n),p=bc(c*b.bD)+bc(i*b.bE)+bc(a*b.az),g=Lf(n),h=bc(c*g.bD)+bc(i*g.bE)+bc(a*g.az),x=u(Rf,D(h,p,v),u(Tf,n,f(Sf,d,s,l)));return kr(t.$?x:u(_f,t.a,x))})),Ff=o((function(n,e,r,t){n:for(;;){if(!t.b)return r;var o=t.a,a=t.b;switch(o.$){case 0:n=c=n,e=l=e,r=f=r,t=a;continue n;case 1:var i=s(Vf,n,e,o.a,r);n=c=n,e=l=e,r=f=i,t=a;continue n;case 2:n=c=n,e=l=e,r=f=r,t=a;continue n;case 3:i=s(Vf,n,e,o.a,r),n=c=n,e=l=e,r=f=i,t=a;continue n;case 4:var c=n,l=e,f=s(Ff,n,e,r,o.a);n=c,e=l,r=f,t=a;continue n;default:var d=o.a,m=o.b,v=u(zf,Mf(d),n),b=e*d.b4;n=c=n,e=l=e,r=f=s(Ff,v,b,r,$([m])),t=a;continue n}}})),Bf=function(n){return n[0]},kf=function(n){return n[1]},If=function(n){return n[2]},jf=function(n){return{$:4,a:n}},Wf=r((function(n,e){for(;;){if(!n.b)return e;var r=n.a;n=n.b,e=u(Lr,r,e)}})),Hf=function(n){return jf(u(Wf,n,S))},Uf={dz:!0,q:1,r:0,s:0,t:0,u:1,v:0,w:0,x:0,y:1,H:0,I:0,J:0,b4:1},Gf=of({bf:Yu,cx:0,cV:8,bu:Ou,da:255,bF:Yu,bG:Yu}),Of={bJ:0,eF:!1,bQ:0,cR:0,b2:0,c4:0,bD:0,bE:0,az:0},Yf=r((function(n,e){return Fu({dH:n.bD,dI:n.b2,dJ:e.bD,dK:e.b2,dL:n.bE,dM:n.bQ,dN:e.bE,dO:e.bQ,dP:n.az,dQ:n.bJ,dR:e.az,dS:e.bJ,dT:n.c4,dU:n.cR,dV:e.c4,dW:e.cR})})),qf=L({bm:u(Yf,Of,Of),bU:u(Yf,Of,Of),bV:u(Yf,Of,Of),bW:u(Yf,Of,Of)},s(Su,0,0,0,0)),Zf=r((function(n,e){return n*e})),Qf=function(n){return-n},Jf=function(n){return s(Wu,515,n.ac,n.Y,n.X)},Xf=$([Jf({X:1,Y:0,ac:!0}),tf({bf:cf,cx:240,cV:0,bu:514,da:0,bF:cf,bG:cf}),vf]),Kf=r((function(n,e){var r=n,t=e.eT,o=e.ey,a=uu(e.fc),i=uu(t),c=r.cT;if(c.$){var l=c.a;return Tc(i)?Fu({dH:2/(o*l),dI:0,dJ:0,dK:0,dL:0,dM:2/l,dN:0,dO:0,dP:0,dQ:0,dR:0,dS:-1,dT:0,dU:0,dV:0,dW:1}):Fu({dH:2/(o*l),dI:0,dJ:0,dK:0,dL:0,dM:2/l,dN:0,dO:0,dP:0,dQ:0,dR:-2/(i-a),dS:-(i+a)/(i-a),dT:0,dU:0,dV:0,dW:1})}var u=c.a;return Tc(i)?Fu({dH:1/(o*u),dI:0,dJ:0,dK:0,dL:0,dM:1/u,dN:0,dO:0,dP:0,dQ:0,dR:-1,dS:-2*a,dT:0,dU:0,dV:-1,dW:0}):Fu({dH:1/(o*u),dI:0,dJ:0,dK:0,dL:0,dM:1/u,dN:0,dO:0,dP:0,dQ:0,dR:-(i+a)/(i-a),dS:-2*i*a/(i-a),dT:0,dU:0,dV:-1,dW:0})})),ns=r((function(n,e){return 1==(1&n>>e)?0:1})),es=t((function(n,e,r){return Cu(u(Wt,(function(r){var t=r<<4;return f(Eu,n,L(e,s(Su,u(ns,r,0),u(ns,r,1),u(ns,r,2),u(ns,r,3))),function(n){return $([Jf({X:1,Y:0,ac:!0}),tf({bf:cf,cx:240,cV:n,bu:514,da:0,bF:cf,bG:cf}),vf])}(t))}),u(Zr,1,u(Ii,2,r)-1)))})),rs=function(n){return{bD:-n.bD,bE:-n.bE,az:-n.az}},ts=function(n){return rs(wf(n))},os={bD:1,bE:0,az:0},as=os,is=du,cs={bD:0,bE:0,az:1},ls=cs,us={cG:lu,db:as,dc:is,dd:ls},fs=r((function(n,e){var r,t,o,a,i;return t=Cf(r=u(zf,e,n)),o=wf(r),a=Df(r),i=Lf(r),Fu({dH:i.bD,dI:a.bD,dJ:o.bD,dK:t.bD,dL:i.bE,dM:a.bE,dN:o.bE,dO:t.bE,dP:i.az,dQ:a.az,dR:o.az,dS:t.az,dT:0,dU:0,dV:0,dW:1})})),ss=function(n){return Lf(n)},ds=t((function(n,e,r){return{bD:n,bE:e,az:r}})),ms=function(n){return Df(n)},vs=r((function(n,e){var r,t=$([Mu(1),Lu(0),bu(!0),s(hu,0,0,0,0)]),o=function(){var e=n.ew;switch(e.$){case 0:return D(t,"0",1);case 1:return D(u(Lr,pu,t),"1",1);default:return D(t,"0",e.a)}}(),a=o.a,i=o.b,c=o.c,l=n.dn,d=l.a,v=l.b,b=u(al,"height",Wr(v)+"px"),p=d,g=p/v,h=u(Pu,(function(e){return function(n){var e=function(n){return n.c7}(n.eD),r={cG:Pf(e),db:ss(e),dc:ms(e),dd:rs(ts(e))},t=Hf(n.ds),o=s(Ff,r,1,Ir,$([t]));if(1===o.$)return S;var a=o.a,i=u(fs,us,e),c=u(Zf,.99,u(Nf,uu(n.eI),Qf(pf(a)))),l=xf(a),d=function(n){var e=n,r=u(dt,bc(e.bD),u(dt,bc(e.bE),bc(e.az)));if(r){var t=e.az/r,o=e.bE/r,a=e.bD/r;return ql(a*a+o*o+t*t)*r}return 0}(f(ds,l.a,l.b,l.c)),v=u(Zf,1.01,u(Af,d,Qf(gf(a)))),b=u(Kf,n.eD,{ey:n.ey,eT:v,fc:c}),p=function(n){return{dH:n[0],dL:n[1],dP:n[2],dT:n[3],dI:n[4],dM:n[5],dQ:n[6],dU:n[7],dJ:n[8],dN:n[9],dR:n[10],dV:n[11],dK:n[12],dO:n[13],dS:n[14],dW:n[15]}}(b).dW,g=p?rs(ts(e)):Pf(e),h=function(){var e=n.fx;switch(e.$){case 0:return L(0,0);case 1:return L(1,0);case 2:return L(2,0);case 3:return L(3,e.a);case 4:return L(4,e.a);default:return L(5,0)}}(),x=h.a,C=h.b,P=u(Ru,n.eQ,n.fD),M=Fu({dH:0,dI:g.bD,dJ:Bf(P),dK:n.en,dL:0,dM:g.bE,dN:kf(P),dO:d,dP:0,dQ:g.az,dR:If(P),dS:x,dT:0,dU:p,dV:0,dW:C}),y=m(ku,M,i,b,Uf,t,{N:S,W:S,fn:S}),T=n.e7;switch(T.$){case 0:return Cu($([f(Eu,y.N,L(D=T.a,Nu),bf),f(Eu,y.W,qf,bf)]));case 1:var D=T.a;return Cu($([f(Eu,y.N,qf,bf),$([Gf]),f(Eu,y.fn,D.bm,Gu),$([lf(0)]),f(Eu,y.N,L(D,Nu),Xf),f(Eu,y.W,qf,bf)]));default:var w=T.a,z=T.b;return Cu($([f(Eu,y.N,L(z,Nu),bf),$([Gf]),u(ff,y.fn,w),f(es,y.N,z,Or(w)),f(Eu,y.W,qf,bf)]))}}({ey:g,eD:n.eD,eI:n.eI,ds:e.ds,eQ:e.eQ,e7:e.e7,en:c,fx:e.fx,fD:e.fD})}),e),x=u(al,"width",Wr(p)+"px"),C=function(n){var e,r,t=n.b,o=n.c,a=n.d,i=function(n){return ji(1e4*n)/100};return e=$(["rgba(",Mc(i(n.a)),"%,",Mc(i(t)),"%,",Mc(i(o)),"%,",Mc((r=a,ji(1e3*r)/1e3)),")"]),u(Hr,"",e)}(n.dh);return f(Tu,"div",$([u(al,"padding","0px"),x,b]),$([L(i,f(zu,a,$([(r=ji(p*c),u(ue,"width",Wr(r))),yu(ji(v*c)),x,b,u(al,"display","block"),u(al,"background-color",C)]),h))]))})),bs=function(n){return n.ez},ps=o((function(n,e,r,t){return{$:2,a:n,b:e,c:r,d:t}})),gs=o((function(n,e,r,t){return{$:3,a:n,b:e,c:r,d:t}})),hs=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),xs=o((function(n,e,r,t){return{$:6,a:n,b:e,c:r,d:t}})),Cs=o((function(n,e,r,t){return{$:7,a:n,b:e,c:r,d:t}})),Ps=o((function(n,e,r,t){return{$:5,a:n,b:e,c:r,d:t}})),Ms=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),ys=function(n){switch(n.$){case 0:return n;case 1:return s(Ms,n.a,n.b,n.c,1);case 2:return s(ps,n.a,n.b,n.c,1);case 3:return s(gs,n.a,n.b,n.c,1);case 4:return s(hs,n.a,n.b,n.c,1);case 5:return s(Ps,n.a,n.b,n.c,1);case 6:return s(xs,n.a,n.b,n.c,1);case 7:return s(Cs,n.a,n.b,n.c,1);case 8:case 9:default:return n}},Ts={$:0},Ls=l((function(n,e,r,t,o,a,i,c){for(;;){if(!c.b)return{dY:e,dZ:t,d_:a,d$:n,d0:r,d1:o};var l=c.b,f=i(c.a);n=u($f,f.d$,n),e=u(Nf,f.dY,e),r=u($f,f.d0,r),t=u(Nf,f.dZ,t),o=u($f,f.d1,o),a=u(Nf,f.d_,a),i=i,c=l}})),Ds=t((function(n,e,r){var t=n(e);return b(Ls,t.d$,t.dY,t.d0,t.dZ,t.d1,t.d_,n,r)})),ws=r((function(n,e){return 1>y(e,n)})),zs=function(n){return u(ws,n.dY,n.d$)&&u(ws,n.dZ,n.d0)&&u(ws,n.d_,n.d1)?n:{dY:u(Nf,n.d$,n.dY),dZ:u(Nf,n.d0,n.dZ),d_:u(Nf,n.d1,n.d_),d$:u($f,n.d$,n.dY),d0:u($f,n.d0,n.dZ),d1:u($f,n.d1,n.d_)}},Ss=function(n){return n},Ns=function(n){return n.bD},Es=function(n){return n.bE},$s=function(n){return n.az},_s=function(n){var e=n.a,r=n.b,t=n.c,o=Ns(e),a=Es(e),i=$s(e),c=Ns(r),l=Es(r),f=$s(r),s=Ns(t),d=Es(t),m=$s(t);return zs({dY:u(Nf,o,u(Nf,c,s)),dZ:u(Nf,a,u(Nf,l,d)),d_:u(Nf,i,u(Nf,f,m)),d$:u($f,o,u($f,c,s)),d0:u($f,a,u($f,l,d)),d1:u($f,i,u($f,f,m))})},As=function(n){return new Float64Array([n.bD,n.bE,n.az])},Rs=function(n){return As(n)},Vs=function(n){return As(n)},Fs=r((function(n,e){var r=n,t=e,o=u(dt,bc(t.bD),u(dt,bc(t.bE),bc(t.az)));if(o){var a=t.az/o,i=t.bE/o,c=t.bD/o,l=ql(c*c+i*i+a*a);return{bD:r*c/l,bE:r*i/l,az:r*a/l}}return ou})),Bs=Fs(1),ks=t((function(n,e,r){return Bs(u(Ql,u(Xl,e,r),u(Xl,n,e)))})),Is=function(n){var e=n.a,r=n.b,t=n.c,o=Vs(f(ks,e,r,t));return D({o:o,eb:Rs(e)},{o:o,eb:Rs(r)},{o:o,eb:Rs(t)})},js=r((function(n,e){return{$:2,a:n,b:e}})),Ws=js({$7:3,dy:0,d3:4}),Hs=t((function(n,e,r){return D(n,e,r)})),Us=t((function(n,e,r){return{bD:n,bE:e,az:r}})),Gs=(Uo=u(Zf,-.5,1),Go=u(Zf,-.5,1),Oo=u(Zf,-.5,1),Yo=f(Us,Oo,Go,Uo),qo=u(Zf,.5,1),Zo=f(Us,Oo,Go,qo),Qo=u(Zf,.5,1),Jo=f(Us,Oo,Qo,Uo),Xo=f(Us,Oo,Qo,qo),Ko=u(Zf,.5,1),na=f(Us,Ko,Go,Uo),ea=f(Us,Ko,Qo,Uo),ra=f(Us,Ko,Go,qo),ta=f(Us,Ko,Qo,qo),ys(function(n){if(n.b){var e=n.a,r=n.b,t=Ws(u(Wt,Is,n));return s(ps,f(Ds,_s,e,r),n,t,0)}return Ts}($([f(Hs,Yo,ea,na),f(Hs,Yo,Jo,ea),f(Hs,Zo,ra,ta),f(Hs,Zo,ta,Xo),f(Hs,na,ea,ta),f(Hs,na,ta,ra),f(Hs,Yo,Xo,Jo),f(Hs,Yo,Zo,Xo),f(Hs,Yo,na,ra),f(Hs,Yo,ra,Zo),f(Hs,Jo,ta,ea),f(Hs,Jo,Xo,ta)])))),Os={$:0},Ys=t((function(n,e,r){return{$:1,a:n,b:e,c:r}})),qs=t((function(n,e,r){var t=e.a,o=e.b,a=n(e.c),i=n(o),c=n(t),l=Vs(f(ks,c,i,a)),s={o:l,eb:Rs(c)},d={o:l,eb:Rs(i)},m={o:l,eb:Rs(a)};return u(Lr,s,u(Lr,d,u(Lr,m,r)))})),Zs=function(n){return n.C},Qs=o((function(n,e,r,t){return 1===e.$||1===r.$||1===t.$?Ir:kr(f(n,e.a,r.a,t.a))})),Js=4294967295>>>32-it,Xs=h,Ks=t((function(n,e,r){for(;;){var t=u(Xs,Js&e>>>n,r);if(t.$)return u(Xs,Js&e,t.a);n-=it,e=e,r=t.a}})),nd=r((function(n,e){var r=e.a,t=e.b,o=e.c,a=e.d;return 0>n||y(n,r)>-1?Ir:y(n,function(n){return n>>>5<<5}(r))>-1?kr(u(Xs,Js&n,a)):kr(f(Ks,t,n,o))})),ed=function(n){return n.an},rd=r((function(n,e){return u(nd,n,ed(e))})),td=t((function(n,e,r){for(;;){var t=u(vt,nt,n),o=t.a,a=t.b;if(0>y(st(o),nt))return u(gt,!0,{z:e,l:r,p:o});n=a,e=u(Lr,ut(o),e),r+=1}})),od=function(n){return n.b?f(td,n,S,0):ct},ad=r((function(n,e){return!u(Cc,u(po,xc,n),e)})),id=r((function(n,e){return f(jt,r((function(e,r){return n(e)?u(Lr,e,r):r})),S,e)})),cd=r((function(n,e){var r=function(n){return n.a}(n),t=function(n){var e=n.a,t=n.b,o=n.c;return e>=0&&0>y(e,r)&&t>=0&&0>y(t,r)&&o>=0&&0>y(o,r)};return u(ad,t,e)?{C:e,an:n}:{C:u(id,t,e),an:n}})),ld=t((function(n,e,r){return{$:3,a:n,b:e,c:r}})),ud=ld({$7:1,dy:3,d3:4}),fd=r((function(n,e){var r=e;return L(D(n.bD,n.bE,n.az),D(r.bD,r.bE,r.az))})),sd=r((function(n,e){n:for(;;){if(-2===e.$)return Ir;var r=e.c,t=e.d,o=e.e;switch(u(Do,n,e.b)){case 0:n=n,e=t;continue n;case 1:return kr(r);default:n=n,e=o;continue n}}})),dd=f(Au,0,0,0),md=i((function(n,e,r,t,o,a){var i=a.a,c=a.b,l=a.c,f=u(sd,u(fd,n,e),o);if(f.$){var s={o:dd,eb:Rs(e)},d={o:dd,eb:Rs(n)},m=l+1;return D(u(Lr,D(r,l,m),u(Lr,D(r,m,t),i)),u(Lr,s,u(Lr,d,c)),l+2)}return D(u(Lr,D(r,f.a,t),i),c,l)})),vd=a((function(n,e,r,t,o){for(;;){if(!r.b)return L(o.a,Xr(o.b));var a=r.a,i=a.a,c=a.b,l=r.b,u=n(a.c),f=n(c),s=n(i),d=t+2,v=t+1,b=n,p=e,g=l,h=t+3,x=m(md,u,s,d,t,e,m(md,f,u,v,d,e,m(md,s,f,t,v,e,o)));n=b,e=p,r=g,t=h,o=x}})),bd=a((function(n,e,r,t,o){for(;;){if(!e.b)return D(t,o,r);var a=e.a,i=a.a,c=a.b,l=e.b,s=n(a.c),d=n(c),m=n(i),v=r+2,b=r+1,p=r,g=f(zo,u(fd,m,s),v,f(zo,u(fd,s,d),b,f(zo,u(fd,d,m),p,o)));n=n,e=l,r+=3,t=u(Lr,D(p,b,v),t),o=g}})),pd=t((function(n,e,r){var o,a=u(Fo,(function(n){var e=n.a,r=n.b,a=n.c;return s(Qs,t((function(n,e,r){return D(n,e,r)})),u(rd,e,o),u(rd,r,o),u(rd,a,o))}),Zs(o=r)),i=f(jt,qs(e),S,a),c=d(bd,e,a,0,S,Po),l=d(vd,e,c.b,a,0,D(c.a,S,c.c)),m=l.a,v=l.b,b=v.b?z(i,v):i;return f(Ys,n,u(cd,od(b),m),u(ud,b,m))})),gd=function(n){return{C:u(Wt,(function(n){return D(3*n,3*n+1,3*n+2)}),u(Zr,0,Or(n)-1)),an:od(Cu(u(Wt,(function(n){return $([n.a,n.b,n.c])}),n)))}},hd=function(n){switch(n.$){case 0:return Os;case 1:case 2:return f(pd,n.a,_t,gd(u(Wt,Ss,n.b)));case 3:return f(pd,n.a,_t,n.b);case 4:case 5:case 6:case 7:return f(pd,n.a,(function(n){return n.eb}),n.b);case 8:case 9:default:return Os}},xd=hd(Gs),Cd=function(n){return n.dn},Pd={$:0},Md=Pd,yd=r((function(n,e){return{$:1,a:n,b:e}})),Td={src:"\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        void main () {\n            gl_FragColor = texture2D(colorTexture, interpolatedUv);\n        }\n    ",attributes:{},uniforms:{colorTexture:"bN"}},Ld=function(n){return{$:5,a:n}},Dd=Ld(1029),wd=Ld(1028),zd=t((function(n,e,r){return 1===e?u(Lr,n?Dd:wd,r):r})),Sd={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute mediump vec2 uv;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedUv = uv;\n        }\n    ",attributes:{position:"eb",uv:"L"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Nd=o((function(n,e,r,t){return u(yd,e,l((function(e,o,a,i,c,l,u,s){return d(Zu,f(zd,i,t,s),Sd,Td,r,{bN:n,b:a,c:o,d:l,e:e,f:c})})))})),Ed={src:"\n        precision lowp float;\n        \n        uniform lowp vec3 constantColor;\n        \n        void main () {\n            gl_FragColor = vec4(constantColor, 1.0);\n        }\n    ",attributes:{},uniforms:{constantColor:"aD"}},$d={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{position:"eb"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},_d=o((function(n,e,r,t){return u(yd,e,l((function(e,o,a,i,c,l,u,s){return d(Zu,f(zd,i,t,s),$d,Ed,r,{aD:n,b:a,c:o,d:l,e:e,f:c})})))})),Ad=r((function(n,e){return{$:3,a:n,b:e}})),Rd={src:"\n        precision lowp float;\n        \n        uniform lowp vec3 constantColor;\n        uniform lowp float pointRadius;\n        uniform highp mat4 sceneProperties;\n        \n        float pointAlpha(float pointRadius, vec2 pointCoord) {\n            float pointSize = 2.0 * pointRadius;\n            float x = (pointSize + 2.0) * (pointCoord.s - 0.5);\n            float y = (pointSize + 2.0) * (pointCoord.t - 0.5);\n            float r = sqrt(x * x + y * y);\n            float innerRadius = pointRadius;\n            float outerRadius = pointRadius + 1.0;\n            if (r > outerRadius) {\n                return 0.0;\n            } else if (r > innerRadius) {\n                return outerRadius - r;\n            } else {\n                return 1.0;\n            }\n        }\n        \n        void main () {\n            float supersampling = sceneProperties[3][0];\n            float alpha = pointAlpha(pointRadius * supersampling, gl_PointCoord);\n            gl_FragColor = vec4(constantColor, alpha);\n        }\n    ",attributes:{},uniforms:{constantColor:"aD",pointRadius:"b0",sceneProperties:"e"}},Vd={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform lowp float pointRadius;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            float supersampling = sceneProperties[3][0];\n            gl_PointSize = 2.0 * pointRadius * supersampling + 2.0;\n        }\n    ",attributes:{position:"eb"},uniforms:{modelMatrix:"b",modelScale:"c",pointRadius:"b0",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Fd=o((function(n,e,r,t){return u(Ad,r,l((function(r,o,a,i,c,l,u,f){return d(Zu,f,Vd,Rd,t,{aD:n,b:a,c:o,b0:e,d:l,e:r,f:c})})))})),Bd={src:"\n        precision mediump float;\n        \n        uniform mediump vec3 emissiveColor;\n        uniform highp mat4 sceneProperties;\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{emissiveColor:"aS",sceneProperties:"e"}},kd=yr,Id=a((function(n,e,r,t,o){return u(yd,r,l((function(r,a,i,c,l,s,m,v){return d(Zu,f(zd,c,o,v),$d,Bd,t,{aS:u(kd,e,n),b:i,c:a,d:s,e:r,f:l})})))})),jd={src:"\n        precision mediump float;\n        \n        uniform mediump vec3 emissiveColor;\n        uniform lowp float pointRadius;\n        uniform highp mat4 sceneProperties;\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        float pointAlpha(float pointRadius, vec2 pointCoord) {\n            float pointSize = 2.0 * pointRadius;\n            float x = (pointSize + 2.0) * (pointCoord.s - 0.5);\n            float y = (pointSize + 2.0) * (pointCoord.t - 0.5);\n            float r = sqrt(x * x + y * y);\n            float innerRadius = pointRadius;\n            float outerRadius = pointRadius + 1.0;\n            if (r > outerRadius) {\n                return 0.0;\n            } else if (r > innerRadius) {\n                return outerRadius - r;\n            } else {\n                return 1.0;\n            }\n        }\n        \n        void main () {\n            vec4 color = toSrgb(emissiveColor, sceneProperties);\n            float supersampling = sceneProperties[3][0];\n            float alpha = pointAlpha(pointRadius * supersampling, gl_PointCoord);\n            gl_FragColor = vec4(color.rgb, alpha);\n        }\n    ",attributes:{},uniforms:{emissiveColor:"aS",pointRadius:"b0",sceneProperties:"e"}},Wd=a((function(n,e,r,t,o){return u(Ad,t,l((function(t,a,i,c,l,f,s,m){return d(Zu,m,Vd,jd,o,{aS:u(kd,e,n),b:i,c:a,b0:r,d:f,e:t,f:l})})))})),Hd={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 materialColor;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{enabledLights:"R",lights12:"bm",lights34:"bU",lights56:"bV",lights78:"bW",materialColor:"cy",sceneProperties:"e",viewMatrix:"f"}},Ud={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n        }\n    ",attributes:{normal:"o",position:"eb"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Gd=o((function(n,e,r,t){return u(yd,e,l((function(e,o,a,i,c,l,u,s){var m=u.a,v=u.b;return d(Zu,f(zd,i,t,s),Ud,Hd,r,{R:v,bm:m.bm,bU:m.bU,bV:m.bV,bW:m.bW,cy:n,b:a,c:o,d:l,e:e,f:c})})))})),Od={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D materialColorTexture;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n            vec3 materialColor = fromSrgb(texture2D(materialColorTexture, interpolatedUv).rgb);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{enabledLights:"R",lights12:"bm",lights34:"bU",lights56:"bV",lights78:"bW",materialColorTexture:"cz",normalMapTexture:"aZ",sceneProperties:"e",useNormalMap:"a4",viewMatrix:"f"}},Yd={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        attribute mediump vec2 uv;\n        attribute highp vec3 tangent;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getWorldTangent(vec3 modelTangent, vec4 modelScale, mat4 modelMatrix) {\n            return (modelMatrix * vec4(safeNormalize(modelScale.xyz * modelTangent), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = uv;\n            interpolatedTangent = getWorldTangent(tangent, modelScale, modelMatrix);\n        }\n    ",attributes:{normal:"o",position:"eb",tangent:"ep",uv:"L"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},qd=i((function(n,e,r,t,o,a){return u(yd,t,l((function(t,i,c,l,u,s,m,v){var b=m.a,p=m.b;return d(Zu,f(zd,l,a,v),Yd,Od,o,{R:p,bm:b.bm,bU:b.bU,bV:b.bV,bW:b.bW,cz:n,b:c,c:i,aZ:e,d:s,e:t,a4:r,f:u})})))})),Zd={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D baseColorTexture;\n        uniform lowp vec4 constantBaseColor;\n        uniform mediump sampler2D roughnessTexture;\n        uniform lowp vec2 constantRoughness;\n        uniform mediump sampler2D metallicTexture;\n        uniform lowp vec2 constantMetallic;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getFloatValue(sampler2D texture, vec2 uv, vec2 constantValue) {\n            if (constantValue.y == 1.0) {\n                return constantValue.x;\n            } else {\n                vec4 textureColor = texture2D(texture, uv);\n                return dot(textureColor, vec4(0.2126, 0.7152, 0.0722, 0.0));\n            }\n        }\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 baseColor = fromSrgb(texture2D(baseColorTexture, interpolatedUv).rgb) * (1.0 - constantBaseColor.w) + constantBaseColor.rgb * constantBaseColor.w;\n            float roughness = getFloatValue(roughnessTexture, interpolatedUv, constantRoughness);\n            float metallic = getFloatValue(metallicTexture, interpolatedUv, constantMetallic);\n        \n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{baseColorTexture:"cc",constantBaseColor:"cf",constantMetallic:"cg",constantRoughness:"ch",enabledLights:"R",lights12:"bm",lights34:"bU",lights56:"bV",lights78:"bW",metallicTexture:"cC",normalMapTexture:"aZ",roughnessTexture:"cZ",sceneProperties:"e",useNormalMap:"a4",viewMatrix:"f"}},Qd={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 baseColor;\n        uniform lowp float roughness;\n        uniform lowp float metallic;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{baseColor:"cb",enabledLights:"R",lights12:"bm",lights34:"bU",lights56:"bV",lights78:"bW",metallic:"cB",roughness:"cY",sceneProperties:"e",viewMatrix:"f"}},Jd=i((function(n,e,r,t,o,a){return u(yd,t,l((function(t,i,c,l,u,s,m,v){var b=m.a,p=m.b;return d(Zu,f(zd,l,a,v),Ud,Qd,o,{cb:n,R:p,bm:b.bm,bU:b.bU,bV:b.bV,bW:b.bW,cB:r,b:c,c:i,d:s,cY:e,e:t,f:u})})))})),Xd=r((function(n,e){return{$:1,a:n,b:e}})),Kd=r((function(n,e){return e.$?L(e.a.B,1):L(n,0)})),nm=s(Su,0,0,0,0),em=r((function(n,e){var r;return e.$?L(e.a.B,nm):L(n,s(Su,Bf(r=e.a),kf(r),If(r),1))})),rm=r((function(n,e){var r,t=L(n,e);return t.a.$?u(Xd,L(r=t.a.a.B,nm),u(Kd,r,e)):t.b.$?u(Xd,u(em,r=t.b.a.B,n),u(Kd,r,e)):{$:0,a:t.a.a}})),tm=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),om=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),am=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),im=u(Xu,0,0),cm=r((function(n,e){return e.$?L(e.a.B,im):L(n,u(Xu,e.a,1))})),lm=o((function(n,e,r,t){var o,a=s(am,n,e,r,t);return a.a.$?s(om,L(o=a.a.a.B,nm),u(cm,o,e),u(cm,o,r),u(Kd,o,t)):a.b.$?s(om,u(em,o=a.b.a.B,n),L(o,im),u(cm,o,r),u(Kd,o,t)):a.c.$?s(om,u(em,o=a.c.a.B,n),u(cm,o,e),L(o,im),u(Kd,o,t)):a.d.$?s(om,u(em,o=a.d.a.B,n),u(cm,o,e),u(cm,o,r),L(o,1)):f(tm,a.a.a,a.b.a,a.c.a)})),um={src:"\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        uniform mediump float backlight;\n        uniform highp mat4 sceneProperties;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            vec3 emissiveColor = fromSrgb(texture2D(colorTexture, interpolatedUv).rgb) * backlight;\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{backlight:"b8",colorTexture:"bN",sceneProperties:"e"}},fm=a((function(n,e,r,t,o){return u(yd,r,l((function(r,a,i,c,l,u,s,m){return d(Zu,f(zd,c,o,m),Sd,um,t,{b8:e,bN:n,b:i,c:a,d:u,e:r,f:l})})))})),sm={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        attribute mediump vec2 uv;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = uv;\n            interpolatedTangent = vec3(0.0, 0.0, 0.0);\n        }\n    ",attributes:{normal:"o",position:"eb",uv:"L"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},dm=o((function(n,e,r,t){return u(yd,e,l((function(e,o,a,i,c,l,u,s){var m=u.a,v=u.b;return d(Zu,f(zd,i,t,s),sm,Od,r,{R:v,bm:m.bm,bU:m.bU,bV:m.bV,bW:m.bW,cz:n,b:a,c:o,aZ:n,d:l,e:e,a4:0,f:c})})))})),mm=function(n){return e(9,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return n(e,r,t,o,a,i,c,l,u)}}}}}}}}}))}((function(n,e,r,t,o,a,i,c,s){return u(yd,i,l((function(i,l,u,m,v,b,p,g){var h=p.a,x=p.b;return d(Zu,f(zd,m,s,g),sm,Zd,c,{cc:n,cf:e,cg:a,ch:t,R:x,bm:h.bm,bU:h.bU,bV:h.bV,bW:h.bW,cC:o,b:u,c:l,aZ:n,d:b,cZ:r,e:i,a4:0,f:v})})))})),vm=t((function(n,e,r){return r>.5?e+(1-r)*(n-e):n+r*(e-n)})),bm=function(n){return f(Us,function(n){return f(vm,n.d$,n.dY,.5)}(n),function(n){return f(vm,n.d0,n.dZ,.5)}(n),function(n){return f(vm,n.d1,n.d_,.5)}(n))},pm=function(n){var e=xf(n),r=e.a,t=e.b,o=e.c;return{eG:bm(n),eW:r/2,eX:t/2,eY:o/2}},gm=r((function(n,e){switch(n.$){case 0:if(n.b.$){var r=n.b.a.B;switch(e.$){case 0:case 1:case 2:case 3:case 4:return Md;case 5:case 6:case 7:return o=e.c,a=e.d,s(Nd,r,pm(R=e.a),o,a);case 8:case 9:default:return Md}}else{var t=n.b.a;switch(e.$){case 0:return Md;case 1:var o=e.c,a=e.d;return s(_d,t,pm(R=e.a),o,a);case 2:case 3:case 4:return o=e.c,a=e.d,s(_d,t,pm(R=e.a),o,a);case 5:case 6:case 7:return o=e.c,a=e.d,s(_d,t,pm(R=e.a),o,a);case 8:case 9:return o=e.c,s(_d,t,pm(R=e.a),o,0);default:return o=e.d,s(Fd,t,e.b,pm(R=e.a),o)}}case 1:if(n.b.$)switch(r=n.b.a.B,c=n.c,e.$){case 0:case 1:case 2:case 3:case 4:return Md;case 5:case 6:case 7:return o=e.c,a=e.d,d(fm,r,c,pm(R=e.a),o,a);case 8:case 9:default:return Md}else{var i=n.b.a,c=n.c;switch(e.$){case 0:return Md;case 1:case 2:case 3:case 4:case 5:case 6:case 7:return o=e.c,a=e.d,d(Id,i,c,pm(R=e.a),o,a);case 8:case 9:return o=e.c,d(Id,i,c,pm(R=e.a),o,0);default:return o=e.d,d(Wd,i,c,e.b,pm(R=e.a),o)}}case 2:var v=u(rm,n.b,n.c);if(v.$){var b=v.a.a,p=v.b,g=p.a,h=p.b;switch(e.$){case 0:case 1:case 2:case 3:case 4:case 5:return Md;case 6:return o=e.c,C=e.d,s(dm,b,pm(R=e.a),o,C);case 7:return o=e.c,C=e.d,m(qd,b,g,h,pm(R=e.a),o,C);case 8:case 9:default:return Md}}else{var x=v.a;switch(e.$){case 0:case 1:return Md;case 2:o=e.c;var C=e.d;return s(Gd,x,pm(R=e.a),o,C);case 3:return Md;case 4:return o=e.c,C=e.d,s(Gd,x,pm(R=e.a),o,C);case 5:return Md;case 6:case 7:return o=e.c,C=e.d,s(Gd,x,pm(R=e.a),o,C);case 8:case 9:default:return Md}}default:var P=s(lm,n.b,n.c,n.d,n.e);if(P.$){var M=P.a,y=M.a,T=M.b,L=P.b,D=L.a,w=L.b,z=P.c,S=z.a,N=z.b,E=P.d;switch(g=E.a,h=E.b,e.$){case 0:case 1:case 2:case 3:case 4:case 5:return Md;case 6:return o=e.c,a=e.d,function(n,e,r,t,o,a,i,c,l,u){return 9===n.a?n.f(e,r,t,o,a,i,c,l,u):n(e)(r)(t)(o)(a)(i)(c)(l)(u)}(mm,y,T,D,w,S,N,pm(R=e.a),o,a);case 7:return R=e.a,o=e.c,a=e.d,function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(s){return function(m){return function(v){return u(yd,s,l((function(l,u,s,b,p,g,h,x){var C=h.a,P=h.b;return d(Zu,f(zd,b,v,x),Yd,Zd,m,{cc:n,cf:e,cg:a,ch:t,R:P,bm:C.bm,bU:C.bU,bV:C.bV,bW:C.bW,cC:o,b:s,c:u,aZ:i,d:g,cZ:r,e:l,a4:c,f:p})})))}}}}}}}}}}}(y)(T)(D)(w)(S)(N)(g)(h)(pm(R))(o)(a);case 8:case 9:default:return Md}}else{var $=P.a,_=P.b,A=P.c;switch(e.$){case 0:case 1:return Md;case 2:return o=e.c,a=e.d,m(Jd,$,_,A,pm(R=e.a),o,a);case 3:return Md;case 4:return o=e.c,a=e.d,m(Jd,$,_,A,pm(R=e.a),o,a);case 5:return Md;case 6:return o=e.c,a=e.d,m(Jd,$,_,A,pm(R=e.a),o,a);case 7:var R;return o=e.c,a=e.d,m(Jd,$,_,A,pm(R=e.a),o,a);case 8:case 9:default:return Md}}}})),hm=function(n){return n.bD},xm=function(n){return n.bE},Cm=function(n){return n.az},Pm=function(n){var e=n,r=Cm(e.dd),t=xm(e.dd),o=hm(e.dd),a=Cm(e.dc),i=xm(e.dc),c=hm(e.dc),l=Cm(e.db),u=xm(e.db),f=hm(e.db);return f*i*r+u*a*o+l*c*t-l*i*o-u*c*r-f*a*t>0},Mm=r((function(n,e){return{$:5,a:n,b:e}})),ym=r((function(n,e){var r=e;switch(r.$){case 0:return Md;case 5:var t=r.b;return u(Mm,u(Vu,r.a,n),t);case 1:case 3:case 2:default:return u(Mm,n,r)}})),Tm=r((function(n,e){return u(ym,function(n){var e=Cf(n),r=wf(n),t=Df(n),o=Lf(n);return{dz:Pm(n),q:o.bD,r:o.bE,s:o.az,t:t.bD,u:t.bE,v:t.az,w:r.bD,x:r.bE,y:r.az,H:e.bD,I:e.bE,J:e.az,b4:1}}(n),e)})),Lm=function(n){return{$:2,a:n}},Dm=r((function(n,e){var r=n.a,t=n.b,o=n.c,a=e.eG;return{eG:{bD:r*a.bD,bE:t*a.bE,az:o*a.az},eW:r*e.eW,eX:t*e.eX,eY:o*e.eY}})),wm=function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){var f,s=n.a,d=n.b,m=n.c,v=function(n){return{bD:n[0],bE:n[1],az:n[2],eu:n[3]}}(t),p=(f={eu:v.eu,bD:v.bD*s,bE:v.bE*d,az:v.az*m},new Float64Array([f.bD,f.bE,f.az,f.eu]));return b(e,r,p,o,a,i,c,l,u)}}}}}}}}}},zm=r((function(n,e){switch(e.$){case 0:return Pd;case 5:return u(Mm,e.a,u(zm,n,e.b));case 1:var r=e.b;return u(yd,u(Dm,n,e.a),u(wm,n,r));case 3:return e;case 2:return Lm(u(wm,n,r=e.a));default:var t=e.a;return jf(u(Wt,zm(n),t))}})),Sm=r((function(n,e){return u(zm,n,e)})),Nm={src:"\n        precision lowp float;\n        \n        void main () {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        }\n    ",attributes:{},uniforms:{}},Em=f(rf,{cx:0,cV:0,da:15},{bf:cf,bu:Ou,bF:cf,bG:7683},{bf:cf,bu:Ou,bF:cf,bG:7682}),$m=f(rf,{cx:0,cV:0,da:15},{bf:cf,bu:Ou,bF:cf,bG:7682},{bf:cf,bu:Ou,bF:cf,bG:7683}),_m=r((function(n,e){return u(Lr,n?$m:Em,e)})),Am={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 shadowVertexPosition(vec3 position, vec3 normal, mat4 shadowLight, vec4 modelScale, mat4 modelMatrix, mat4 viewMatrix, mat4 projectionMatrix, mat4 sceneProperties) {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            vec3 worldNormal = getWorldNormal(normal, vec4(modelScale.xyz, 1.0), modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 directionToLight = getDirectionToLight(worldPosition.xyz, xyz_type, rgb_parameter);\n            vec3 offset = vec3(0.0, 0.0, 0.0);\n            float sceneDiameter = sceneProperties[3][1];\n            if (dot(directionToLight, worldNormal) <= 0.0) {\n                offset = -sceneDiameter * directionToLight;\n            } else {\n                offset = -0.001 * sceneDiameter * directionToLight;\n            }\n            vec4 offsetPosition = worldPosition + vec4(offset, 0.0);\n            return projectionMatrix * (viewMatrix * offsetPosition);\n        }\n        \n        void main () {\n            gl_Position = shadowVertexPosition(\n                position,\n                normal,\n                shadowLight,\n                modelScale,\n                modelMatrix,\n                viewMatrix,\n                projectionMatrix,\n                sceneProperties\n            );\n        }\n    ",attributes:{normal:"o",position:"eb"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"b5",viewMatrix:"f"}},Rm=function(n){var e=function(n){if(n.$){var e=n.c;return kr(l((function(n,r,t,o,a,i,c,l){return d(Zu,u(_m,o,l),Am,Nm,e,{b:t,c:r,d:i,e:n,b5:c,f:a})})))}return Ir}(n);return e.$?Md:Lm(e.a)},Vm=o((function(n,e,r,t){var o,a=u(gm,r,Gs),i=(o=L(n,e)).a?o.b?Hf($([a,Rm(xd)])):a:o.b?Rm(xd):Md,c=Cd(t),l=c.a,f=c.b,s=c.c;return u(Tm,bs(t),u(Sm,D(l,f,s),i))})),Fm=r((function(n,e){return s(Vm,!0,!0,n,e)})),Bm=function(n){return{$:0,a:n}},km=r((function(n,e){return{$:0,a:n,b:e}})),Im=function(n){return n.k},jm=B,Wm=function(n){return jm(n)},Hm=r((function(n,e){return e/n})),Um=k,Gm=function(n){var e=n;return{bD:jm(e),bE:Um(e)}},Om=r((function(n,e){var r=n.eb;return u(Lr,{o:Vs(n.o),eb:Rs(r)},e)})),Ym=c((function(n,e,r,t,o,a,i){for(;;){if(!i.b)return zs({dY:e,dZ:t,d_:a,d$:n,d0:r,d1:o});var c=i.a,l=i.b,f=If(c.eb),s=kf(c.eb),d=Bf(c.eb);n=u(Ef,n,d),e=u(dt,e,d),r=u(Ef,r,s),t=u(dt,t,s),o=u(Ef,o,f),a=u(dt,a,f),i=l}})),qm=r((function(n,e){var r=If(n.eb),t=kf(n.eb),o=Bf(n.eb);return v(Ym,o,o,t,t,r,r,e)})),Zm={bD:0,bE:0,az:-1},Qm=r((function(n,e){var r=n.dc,t=n.db;return{bD:e.bD*t.bD+e.bE*r.bD,bE:e.bD*t.bE+e.bE*r.bE,az:e.bD*t.az+e.bE*r.az}})),Jm=function(n){return Um(n)},Xm=function(n){return 6.283185307179586*n},Km={cG:lu,db:as,dc:is},nv=(oa=u(Hm,72,Xm(1)),aa=cs,ia=Zm,la=f(Us,0,0,ca=u(Zf,.5,1)),fa=f(Us,0,0,ua=u(Zf,-.5,1)),ys(function(n){var e=f(wr,Om,S,ed(n));if(e.b){var r=e.a,t=e.b,o=u(ud,e,Zs(n));return s(hs,u(qm,r,t),n,o,0)}return Ts}(gd(Cu(u(Wt,(function(n){var e=u(Zf,n,oa),r=u(Qm,Km,Gm(e)),t=u(Zf,Wm(e),1),o=u(Zf,Jm(e),1),a=f(Us,t,o,ca),i=f(Us,t,o,ua),c=u(Zf,u(uc,72,n+1),oa),l=u(Qm,Km,Gm(c)),s=u(Zf,Wm(c),1),d=u(Zf,Jm(c),1),m=f(Us,s,d,ua),v=f(Us,s,d,ca);return $([D({o:ia,eb:fa},{o:ia,eb:m},{o:ia,eb:i}),D({o:r,eb:i},{o:l,eb:m},{o:l,eb:v}),D({o:r,eb:i},{o:l,eb:v},{o:r,eb:a}),D({o:aa,eb:la},{o:aa,eb:a},{o:aa,eb:v})])}),u(Zr,0,71))))))),ev=hd(nv),rv=function(n){return n.eL},tv=function(n){return n.cG},ov=function(n){return n.e5},av=function(n){return n.fj},iv=o((function(n,e,r,t){var o,a=function(n){var e=rv(n),r=iu(e),t=r.a,o=r.b;return{cG:tv(n),db:t,dc:o,dd:e}}(Im(t)),i=u(gm,r,nv),c=(o=L(n,e)).a?o.b?Hf($([i,Rm(ev)])):i:o.b?Rm(ev):Md,l=av(t),f=ov(t);return u(Tm,a,u(Sm,D(l,l,f),c))})),cv=r((function(n,e){return s(iv,!0,!0,n,e)})),lv={src:"\n        precision highp float;\n        \n        attribute lowp float triangleVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 triangleVertexPositions;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleVertex), triangleVertexPositions, position, normal);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{triangleVertex:"c3"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",triangleVertexPositions:"bA",viewMatrix:"f"}},uv={src:"\n        precision highp float;\n        \n        attribute lowp float triangleVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 triangleVertexPositions;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleVertex), triangleVertexPositions, position, normal);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n        }\n    ",attributes:{triangleVertex:"c3"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",triangleVertexPositions:"bA",viewMatrix:"f"}},fv=function(n){var e=n.a,r=n.b,t=n.c;return Fu({dH:e.bD,dI:r.bD,dJ:t.bD,dK:0,dL:e.bE,dM:r.bE,dN:t.bE,dO:0,dP:e.az,dQ:r.az,dR:t.az,dS:0,dT:0,dU:0,dV:0,dW:0})},sv=Ws($([D({c3:0},{c3:1},{c3:2})])),dv=r((function(n,e){var r=_s(e),t=pm(r);switch(n.$){case 0:if(n.b.$)return Md;var o=n.b.a;return u(yd,t,l((function(n,r,t,a,i,c,l,u){return d(Zu,f(zd,a,0,u),lv,Ed,sv,{aD:o,b:t,c:r,d:c,e:n,bA:fv(e),f:i})})));case 1:if(n.b.$)return Md;var a=n.b.a,i=n.c;return u(yd,t,l((function(n,r,t,o,c,l,s,m){return d(Zu,f(zd,o,0,m),lv,Bd,sv,{aS:u(kd,i,a),b:t,c:r,d:l,e:n,bA:fv(e),f:c})})));case 2:var c=u(rm,n.b,n.c);if(c.$)return Md;var m=c.a;return u(yd,t,l((function(n,r,t,o,a,i,c,l){var u=c.a,s=c.b;return d(Zu,f(zd,o,0,l),uv,Hd,sv,{R:s,bm:u.bm,bU:u.bU,bV:u.bV,bW:u.bW,cy:m,b:t,c:r,d:i,e:n,bA:fv(e),f:a})})));default:var v=s(lm,n.b,n.c,n.d,n.e);if(v.$)return Md;var b=v.a,p=v.b,g=v.c;return u(yd,t,l((function(n,r,t,o,a,i,c,l){var u=c.a,s=c.b;return d(Zu,f(zd,o,0,l),uv,Qd,sv,{cb:b,R:s,bm:u.bm,bU:u.bU,bV:u.bV,bW:u.bW,cB:g,b:t,c:r,d:i,cY:p,e:n,bA:fv(e),f:a})})))}})),mv=(sa=$([{a3:u(Xu,0,1)},{a3:u(Xu,1,1)},{a3:u(Xu,2,1)},{a3:u(Xu,0,-1)},{a3:u(Xu,1,-1)},{a3:u(Xu,2,-1)}]),da=$([D(0,1,2),D(3,5,4),D(3,4,1),D(3,1,0),D(4,5,2),D(4,2,1),D(5,3,0),D(5,0,2)]),u(ud,sa,da)),vv={src:"\n        precision highp float;\n        \n        attribute highp vec2 triangleShadowVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        uniform highp mat4 triangleVertexPositions;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 shadowVertexPosition(vec3 position, vec3 normal, mat4 shadowLight, vec4 modelScale, mat4 modelMatrix, mat4 viewMatrix, mat4 projectionMatrix, mat4 sceneProperties) {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            vec3 worldNormal = getWorldNormal(normal, vec4(modelScale.xyz, 1.0), modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 directionToLight = getDirectionToLight(worldPosition.xyz, xyz_type, rgb_parameter);\n            vec3 offset = vec3(0.0, 0.0, 0.0);\n            float sceneDiameter = sceneProperties[3][1];\n            if (dot(directionToLight, worldNormal) <= 0.0) {\n                offset = -sceneDiameter * directionToLight;\n            } else {\n                offset = -0.001 * sceneDiameter * directionToLight;\n            }\n            vec4 offsetPosition = worldPosition + vec4(offset, 0.0);\n            return projectionMatrix * (viewMatrix * offsetPosition);\n        }\n        \n        void main () {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleShadowVertex.x), triangleVertexPositions, position, normal);\n            normal *= triangleShadowVertex.y;\n            gl_Position = shadowVertexPosition(\n                position,\n                normal,\n                shadowLight,\n                modelScale,\n                modelMatrix,\n                viewMatrix,\n                projectionMatrix,\n                sceneProperties\n            );\n        }\n    ",attributes:{triangleShadowVertex:"a3"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"b5",triangleVertexPositions:"bA",viewMatrix:"f"}},bv=function(n){return Lm(l((function(e,r,t,o,a,i,c,l){return d(Zu,u(_m,o,l),vv,Nm,mv,{b:t,c:r,d:i,e:e,b5:c,bA:fv(n),f:a})})))},pv=o((function(n,e,r,t){var o=u(dv,r,t),a=L(n,e);return a.a?a.b?Hf($([o,bv(t)])):o:a.b?bv(t):Md})),gv=r((function(n,e){return s(pv,!0,!0,n,e)})),hv=r((function(n,e){var r=$s(e),t=$s(n),o=Es(e),a=Es(n),i=Ns(e),c=Ns(n);return{dY:u(Nf,c,i),dZ:u(Nf,a,o),d_:u(Nf,t,r),d$:u($f,c,i),d0:u($f,a,o),d1:u($f,t,r)}})),xv={src:"\n        precision highp float;\n        \n        attribute lowp float lineSegmentVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp vec3 lineSegmentStartPoint;\n        uniform highp vec3 lineSegmentEndPoint;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = (1.0 - lineSegmentVertex) * lineSegmentStartPoint + lineSegmentVertex * lineSegmentEndPoint;\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{lineSegmentVertex:"dG"},uniforms:{lineSegmentEndPoint:"dE",lineSegmentStartPoint:"dF",modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Cv=r((function(n,e){return{$:1,a:n,b:e}}))({$7:2,dy:0,d3:1})($([L({dG:0},{dG:1})])),Pv=r((function(n,e){var r,t=u(hv,(r=e).a,r.b),o=pm(t),a=e.a,i=e.b;switch(n.$){case 0:if(n.b.$)return Md;var c=n.b.a;return u(yd,o,l((function(n,e,r,t,o,l,u,f){return d(Zu,f,xv,Ed,Cv,{aD:c,dE:Rs(i),dF:Rs(a),b:r,c:e,d:l,e:n,f:o})})));case 1:if(n.b.$)return Md;c=n.b.a;var f=n.c;return u(yd,o,l((function(n,e,r,t,o,l,s,m){return d(Zu,m,xv,Bd,Cv,{aS:u(kd,f,c),dE:Rs(i),dF:Rs(a),b:r,c:e,d:l,e:n,f:o})})));case 2:default:return Md}})),Mv=r((function(n,e){return u(Pv,n,e)})),yv=t((function(n,e,r){return{$:2,a:n,b:e,c:r}})),Tv=function(n){return f(vu,0,1,n>.04045?u(Ii,(n+.055)/1.055,2.4):n/12.92)},Lv=function(n){return f(yv,0,Bm(function(n){var e=dc(n),r=e.cl,t=e.cd;return f(Au,Tv(e.cU),Tv(r),Tv(t))}(n)),Bm(0))},Dv=function(n){return n.eG},wv=function(n){return n.fj},zv=r((function(n,e){return n/e})),Sv=a((function(n,e,r,t,o){for(;;){var a=t(e/r),i=u(Lr,a,o);if(P(e,n))return i;n=n,e-=1,r=r,t=t,o=i}})),Nv=r((function(n,e){return 1>n?S:d(Sv,0,n,n,e,S)})),Ev=r((function(n,e){var r=n.eb,t=n.L,o=t.a,a=t.b;return u(Lr,{o:Vs(n.o),eb:Rs(r),L:u(Xu,o,a)},e)})),$v=r((function(n,e){var r=n,t=e,o=jm(t);return{bD:o*jm(r),bE:o*Um(r),az:Um(t)}})),_v=(ma=u(Zr,0,71),va=u(Nv,72,u(vm,0,Xm(1))),ba=tt(36),pa=u(Zr,0,ba-1),ga=u(Nv,ba,u(vm,Yl(90),Yl(-90))),ha=od(Cu(u(Wt,(function(n){return u(Wt,(function(e){return{o:u($v,n,e),eb:f(Us,u(Zf,Wm(e)*Wm(n),1),u(Zf,Wm(e)*Jm(n),1),u(Zf,Jm(e),1)),L:L(u(zv,n,Xm(1)),u(zv,u(Af,Yl(90),e),Yl(180)))}}),ga)}),va))),xa=r((function(n,e){return n*(ba+1)+e})),Ca=Cu(u(Wt,(function(n){return Cu(u(Wt,(function(e){var r=u(xa,n+1,e),t=u(xa,n,e),o=u(xa,n+1,e+1),a=u(xa,n,e+1);return $([D(a,o,r),D(a,r,t)])}),pa))}),ma)),ys(function(n){var e=f(wr,Ev,S,ed(n));if(e.b){var r=e.a,t=e.b,o=u(ud,e,Zs(n));return s(xs,u(qm,r,t),n,o,0)}return Ts}(u(cd,ha,Ca)))),Av=r((function(n,e){for(;;){var r=u(uc,144,2*n+3),t=u(uc,144,2*n+2),o=2*n+1,a=2*n,i=u(Lr,D(144,a,t),u(Lr,D(a,r,t),u(Lr,D(a,o,r),u(Lr,D(o,145,r),e))));if(!n)return i;n-=1,e=i}})),Rv=t((function(n,e,r){return r>.5?e+(1-r)*(n-e):n+r*(e-n)})),Vv=(Pa=u(r((function(n,e){for(;;){var r=f(Rv,0,6.283185307179586,n/72),t=u(Lr,{bI:r,bZ:0,b3:1},u(Lr,{bI:r,bZ:1,b3:1},e));if(!n)return t;n-=1,e=t}})),71,$([{bI:0,bZ:0,b3:0},{bI:0,bZ:1,b3:0}])),u(ud,Pa,u(Av,71,S))),Fv={src:"\n        precision highp float;\n        \n        attribute highp float angle;\n        attribute highp float offsetScale;\n        attribute highp float radiusScale;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const lowp float kPerspectiveProjection = 0.0;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec3 perpendicularTo(vec3 d) {\n            float absX = abs(d.x);\n            float absY = abs(d.y);\n            float absZ = abs(d.z);\n            if (absX <= absY) {\n                if (absX <= absZ) {\n                    float scale = 1.0 / length(d.zy);\n                    return vec3(0.0, -d.z * scale, d.y * scale);\n                } else {\n                    float scale = 1.0 / length(d.xy);\n                    return vec3(-d.y * scale, d.x * scale, 0.0);\n                }\n            } else {\n                if (absY <= absZ) {\n                    float scale = 1.0 / length(d.xz);\n                    return vec3(d.z * scale, 0.0, -d.x * scale);\n                } else {\n                    float scale = 1.0 / length(d.xy);\n                    return vec3(-d.y * scale, d.x * scale, 0.0);\n                }\n            }\n        }\n        \n        void main () {\n            vec4 worldCenter = getWorldPosition(vec3(0.0, 0.0, 0.0), modelScale, modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 zDirection = getDirectionToLight(worldCenter.xyz, xyz_type, rgb_parameter);\n            vec3 xDirection = perpendicularTo(zDirection);\n            vec3 yDirection = cross(zDirection, xDirection);\n            float r = modelScale.x;\n            float adjustedRadius = r;\n            float zOffset = 0.0;\n            if (xyz_type.w == kPointLight) {\n                float distanceToLight = length(xyz_type.xyz - worldCenter.xyz);\n                float rSquared = r * r;\n                zOffset = rSquared / distanceToLight;\n                float zSquared = zOffset * zOffset;\n                adjustedRadius = sqrt(rSquared - zSquared) * radiusScale;\n            }\n            vec3 worldPosition =\n                worldCenter.xyz\n                    + zDirection * zOffset\n                    + xDirection * adjustedRadius * cos(angle)\n                    + yDirection * adjustedRadius * sin(angle);\n            vec3 directionToLight = getDirectionToLight(worldPosition, xyz_type, rgb_parameter);\n            float sceneDiameter = sceneProperties[3][1];\n            vec3 offset = -sceneDiameter * offsetScale * directionToLight;\n            vec4 offsetPosition = vec4(worldPosition + offset, 1.0);\n            gl_Position = projectionMatrix * (viewMatrix * offsetPosition);\n        }\n    ",attributes:{angle:"bI",offsetScale:"bZ",radiusScale:"b3"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"b5",viewMatrix:"f"}},Bv=function(){return Lm(l((function(n,e,r,t,o,a,i,c){return d(Zu,u(_m,!0,c),Fv,Nm,Vv,{aD:f(Au,0,0,1),b:r,c:e,d:a,e:n,b5:i,f:o})})))},kv=r((function(n,e){return u(ym,function(n){return{dz:!0,q:1,r:0,s:0,t:0,u:1,v:0,w:0,x:0,y:1,H:n.bD,I:n.bE,J:n.az,b4:1}}(n),e)})),Iv=o((function(n,e,r,t){var o,a=u(gm,r,_v),i=(o=L(n,e)).a?o.b?Hf($([a,Bv()])):a:o.b?Bv():Md,c=wv(t);return u(kv,u(Xl,lu,Dv(t)),u(Sm,D(c,c,c),i))})),jv=r((function(n,e){return s(Iv,!0,!0,n,e)})),Wv=function(n){switch(n.$){case 0:var e=n.b;return $([u(Fm,Lv(n.a),e)]);case 1:var r=n.b;return $([u(gv,Lv(n.a),r)]);case 3:var t=n.b;return $([u(jv,Lv(n.a),t)]);case 2:var o=n.b;return $([u(cv,Lv(n.a),o)]);case 4:var a=n.b;return $([u(Mv,(i=n.a,u(km,0,Bm(function(n){var e=dc(n);return f(Au,e.cU,e.cl,e.cd)}(i)))),a)]);default:return u(Pu,Wv,n.a)}var i},Hv=r((function(n,e){return r={ew:n.ew,dh:n.eA,eD:n.eD,eI:n.eI,dn:L(ji(n.aa.c9),ji(n.aa.cm)),ds:(t=e,u(Pu,Wv,t)),eQ:n.eQ,e7:n.e7,fx:n.fx,fD:n.fD},u(vs,{ew:r.ew,dh:r.dh,eD:r.eD,eI:r.eI,dn:r.dn},$([{ds:r.ds,eQ:r.eQ,e7:r.e7,fx:r.fx,fD:r.fD}]));var r,t})),Uv=r((function(n,e){var r=n,t=e.eL,o=t.bD,a=t.bE,i=t.az,c=u(Ru,e.cn,e.bL);return{bJ:If(c),eF:r,bQ:kf(c),cR:0,b2:Bf(c),c4:1,bD:-o,bE:-a,az:-i}})),Gv={bD:.37208,bE:.37529},Ov=r((function(n,e){return{$:2,a:n,b:e}})),Yv=function(n){return{$:0,a:n}},qv=function(n){return n.eF},Zv=Yv(qf.a),Qv=r((function(n,e){return f(jt,r((function(e,r){var t=r.a,o=r.b;return n(e)?L(u(Lr,e,t),o):L(t,u(Lr,e,o))})),L(S,S),e)})),Jv=function(n){return Fu({dH:n.bD,dI:n.b2,dJ:0,dK:0,dL:n.bE,dM:n.bQ,dN:0,dO:0,dP:n.az,dQ:n.bJ,dR:0,dS:0,dT:n.c4,dU:n.cR,dV:0,dW:0})},Xv=l((function(n,e,r,t,o,a,i,c){var l=u(Qv,qv,$([n,e,r,t])),f=l.a;if(f.b){var s=z(f,l.b);if(s.b&&s.b.b&&s.b.b.b&&s.b.b.b.b&&!s.b.b.b.b.b){var d=s.a,m=s.b,v=m.a,b=m.b,p=b.a,g=b.b.a;return u(Ov,u(Wt,Jv,f),{bm:u(Yf,d,v),bU:u(Yf,p,g),bV:u(Yf,o,a),bW:u(Yf,i,c)})}return Zv}return Yv({bm:u(Yf,n,e),bU:u(Yf,r,t),bV:u(Yf,o,a),bW:u(Yf,i,c)})})),Kv=o((function(n,e,r,t){return b(Xv,n,e,r,t,Of,Of,Of,Of)})),nb=r((function(n,e){return u(gc,0,wi(u(Fo,(function(e){var r=e.b.b;return P(e.a,n)?kr(r):Ir}),e.U)))})),eb=r((function(n,e){return u(nb,n,e.bO)})),rb={$:5},tb={bD:.44757,bE:.40745},ob=s(Fi,114/255,159/255,207/255,1),ab={$:1},ib=r((function(n,e){var r=n,t=e.eb,o=t.bD,a=t.bE,i=t.az,c=u(Ru,e.cn,e.bL);return{bJ:If(c),eF:r,bQ:kf(c),cR:0,b2:Bf(c),c4:2,bD:o,bE:a,az:i}})),cb=function(n){return u(ib,!0,{bL:n.bL,cn:n.cn,eb:n.eb})},lb=s(Fi,52/255,101/255,164/255,1),ub=r((function(n,e){return{$:0,a:n,b:e}})),fb=r((function(n,e){return y(e,n)>-1})),sb=r((function(n,e){return n+.5*(e-n)})),db={bD:-1,bE:0,az:0},mb={bD:0,bE:-1,az:0},vb=i((function(n,e,r,t,o,a){var i=u(fb,r,a)?cs:Zm,c=u(fb,e,o)?du:mb,l=u(fb,n,t)?os:db,s=D(uu(u(hf,n,t)),uu(u(hf,e,o)),uu(u(hf,r,a)));return{ez:{cG:f(Us,u(sb,n,t),u(sb,e,o),u(sb,r,a)),db:l,dc:c,dd:i},dn:s}})),bb=r((function(n,e){return m(vb,Ns(n),Es(n),$s(n),Ns(e),Es(e),$s(e))})),pb=r((function(n,e){var r=e/2;return u(ub,n,u(bb,f(Sf,-r,-r,-r),f(Sf,r,r,r)))})),gb=function(n){return{$:5,a:n}},hb=function(n){return gb(n)},xb=s(Fi,138/255,226/255,52/255,1),Cb=s(Fi,173/255,127/255,168/255,1),Pb=r((function(n,e){return{$:2,a:n,b:e}})),Mb=r((function(n,e){return{$:4,a:n,b:e}})),yb=r((function(n,e){return{$:3,a:n,b:e}})),Tb=r((function(n,e){return{$:1,a:n,b:e}})),Lb=t((function(n,e,r){return{bD:n,bE:e,az:r}})),Db=r((function(n,e){return{bD:e.bD+n.bD,bE:e.bE+n.bE,az:e.az+n.az}})),wb=r((function(n,e){return{cG:u(Db,n,Cf(e)),db:Lf(e),dc:Df(e),dd:wf(e)}})),zb=r((function(n,e){return{ez:u(wb,n,bs(e)),dn:Cd(e)}})),Sb=r((function(n,e){return{eL:e,cG:n}})),Nb=r((function(n,e){var r=e;return u(Sb,u(Db,n,r.cG),r.eL)})),Eb=r((function(n,e){var r=e;return{k:u(Nb,n,r.k),e5:r.e5,fj:r.fj}})),$b=r((function(n,e){var r=e.b;return L(n(e.a),n(r))})),_b=r((function(n,e){return u($b,Db(n),e)})),Ab=r((function(n,e){return{eG:e,fj:uu(n)}})),Rb=r((function(n,e){return u(Ab,wv(e),u(Db,n,Dv(e)))})),Vb=r((function(n,e){var r=e.b,t=e.c;return D(n(e.a),n(r),n(t))})),Fb=r((function(n,e){return u(Vb,Db(n),e)})),Bb=r((function(n,e){var r=n.a,t=n.b,o=n.c,a=f(Lb,r,t,o);switch(e.$){case 0:return u(ub,e.a,u(zb,a,e.b));case 1:return u(Tb,e.a,u(Fb,a,e.b));case 3:return u(yb,e.a,u(Rb,a,e.b));case 2:return u(Pb,e.a,u(Eb,a,e.b));case 4:return u(Mb,e.a,u(_b,a,e.b));default:var i=e.a;return gb(u(Wt,Bb(D(r,t,o)),i))}})),kb=function(n){return Bb(D(n,0,0))},Ib=function(n){return Bb(D(0,n,0))},jb=t((function(n,e,r){var t=n,o=r,a=.5*e,i=jm(a),c=Um(a),l=t.eL,u=l.bD*c,f=i*u,s=u*u,d=l.bE*c,m=i*d,v=u*d,b=d*d,p=l.az*c,g=i*p,h=u*p,x=d*p,C=p*p;return{bD:(1-2*(b+C))*o.bD+2*(v-g)*o.bE+2*(h+m)*o.az,bE:2*(v+g)*o.bD+(1-2*(s+C))*o.bE+2*(x-f)*o.az,az:2*(h-m)*o.bD+2*(x+f)*o.bE+(1-2*(s+b))*o.az}})),Wb=t((function(n,e,r){var t=n,o=r,a=.5*e,i=jm(a),c=Um(a),l=t.cG,u=o.bD-l.bD,f=o.bE-l.bE,s=o.az-l.az,d=t.eL,m=d.bD*c,v=i*m,b=m*m,p=d.bE*c,g=i*p,h=m*p,x=p*p,C=d.az*c,P=i*C,M=m*C,y=p*C,T=C*C;return{bD:l.bD+(1-2*(x+T))*u+2*(h-P)*f+2*(M+g)*s,bE:l.bE+2*(h+P)*u+(1-2*(b+T))*f+2*(y-v)*s,az:l.az+2*(M-g)*u+2*(y+v)*f+(1-2*(b+x))*s}})),Hb=t((function(n,e,r){return{cG:f(Wb,n,e,Cf(r)),db:f(jb,n,e,Lf(r)),dc:f(jb,n,e,Df(r)),dd:f(jb,n,e,wf(r))}})),Ub=t((function(n,e,r){return{ez:f(Hb,n,e,bs(r)),dn:Cd(r)}})),Gb=r((function(n,e){var r=u(Wb,n,e),t=u(jb,n,e);return function(n){var e=n;return u(Sb,r(e.cG),t(e.eL))}})),Ob=t((function(n,e,r){var t=r;return{k:f(Gb,n,e,t.k),e5:t.e5,fj:t.fj}})),Yb=t((function(n,e,r){return u($b,u(Wb,n,e),r)})),qb=t((function(n,e,r){return u(Ab,wv(r),f(Wb,n,e,Dv(r)))})),Zb=t((function(n,e,r){return u(Vb,u(Wb,n,e),r)})),Qb=t((function(n,e,r){switch(r.$){case 0:return u(ub,r.a,f(Ub,n,e,r.b));case 1:return u(Tb,r.a,f(Zb,n,e,r.b));case 3:return u(yb,r.a,f(qb,n,e,r.b));case 2:return u(Pb,r.a,f(Ob,n,e,r.b));case 4:return u(Mb,r.a,f(Yb,n,e,r.b));default:var t=r.a;return gb(u(Wt,u(Qb,n,e),t))}})),Jb=u(Sb,lu,as),Xb=r((function(n,e){return f(Qb,Jb,n,e)})),Kb=u(Sb,lu,is),np=r((function(n,e){return f(Qb,Kb,n,e)})),ep=u(Sb,lu,ls),rp=r((function(n,e){return f(Qb,ep,n,e)})),tp=r((function(n,e){return(e-ft(e/n)*n)/n})),op=r((function(n,e){return 360*u(tp,n,e)})),ap=j,ip=function(n){return n*Ul/180},cp=r((function(n,e){var r=e.a,t=e.b,o=e.c;return u(Tb,n,f(Hs,f(Sf,r.bD,r.bE,r.az),f(Sf,t.bD,t.bE,t.az),f(Sf,o.bD,o.bE,o.az)))})),lp=(Ma=ql(3)/2,ya=u(cp,Yi,D({bD:Ma,bE:0,az:0},{bD:0,bE:.5,az:0},{bD:0,bE:-.5,az:0})),Ta=u(kb,-Ma/3,u(np,ap(1/3),ya)),u(Ib,-Ma/3,u(Xb,ip(90),hb($([u(kb,-Ma/3,ya),Ta,u(rp,ip(120),Ta),u(rp,ip(240),Ta)]))))),up=function(n){var e=function(e){return u(rp,u(op,300,n.a2),u(np,u(op,300,n.a2),u(Xb,u(op,300,n.a2),e)))};return hb($([u(Ib,2,u(kb,-2,e(u(pb,xb,1)))),u(Ib,2,u(kb,2,e(u(pb,lb,1)))),u(Ib,4,e(u(pb,Cb,1))),u(Ib,1.5,e(lp))]))},fp=r((function(n,e){var r=D(e.a/2,e.b/2,e.c/2),t=r.a,o=r.b,a=r.c;return u(ub,n,u(bb,f(Sf,-t,-o,-a),f(Sf,t,o,a)))})),sp=t((function(n,e,r){return{k:u(Sb,n,e),e5:uu(r.e5),fj:uu(r.fj)}})),dp=t((function(n,e,r){return u(Pb,n,f(sp,lu,du,{e5:r,fj:e}))})),mp=t((function(n,e,r){return{bD:n.bD+e*(r.bD-n.bD),bE:n.bE+e*(r.bE-n.bE),az:n.az+e*(r.az-n.az)}})),vp=t((function(n,e,r){var t=bs(r),o=Lf(t),a=Df(t),i=wf(t),c=f(mp,n,e,Cf(t)),l=0>e?{cG:c,db:rs(o),dc:rs(a),dd:rs(i)}:{cG:c,db:o,dc:a,dd:i},s=Cd(r),d=s.b,m=s.c;return{ez:l,dn:D(uu(u(Zf,e,s.a)),uu(u(Zf,e,d)),uu(u(Zf,e,m)))}})),bp=function(n){return rv(Im(n))},pp=t((function(n,e,r){var t=uu(u(Zf,e,av(r))),o=uu(u(Zf,e,ov(r))),a=0>e?rs(bp(r)):bp(r),i=f(mp,n,e,function(n){return tv(Im(n))}(r));return{k:u(Sb,i,a),e5:o,fj:t}})),gp=t((function(n,e,r){return u($b,u(mp,n,e),r)})),hp=t((function(n,e,r){return u(Ab,u(Zf,bc(e),wv(r)),f(mp,n,e,Dv(r)))})),xp=t((function(n,e,r){return u(Vb,u(mp,n,e),r)})),Cp=r((function(n,e){switch(e.$){case 0:return u(ub,e.a,f(vp,lu,n,e.b));case 1:return u(Tb,e.a,f(xp,lu,n,e.b));case 3:return u(yb,e.a,f(hp,lu,n,e.b));case 2:return u(Pb,e.a,f(pp,lu,n,e.b));case 4:return u(Mb,e.a,f(gp,lu,n,e.b));default:var r=e.a;return gb(u(Wt,Cp(n),r))}})),Pp=(La=hb($([u(pb,Yi,1),u(np,ip(45),u(pb,Yi,1))])),hb($([hb($([La,u(Ib,-.4,u(Cp,1.3,La))])),u(Ib,-.7,f(dp,Yi,1,.5))]))),Mp=s(Fi,211/255,215/255,207/255,1),yp=s(Fi,193/255,125/255,17/255,1),Tp=o((function(n,e,r,t){var o=D(n,e,r),a=o.a,i=o.b,c=o.c,l=c>.5?c+i-c*i:c*(i+1),u=2*c-l,f=function(n){var e=0>n?n+1:n>1?n-1:n;return 1>6*e?u+(l-u)*e*6:1>2*e?l:2>3*e?u+(l-u)*(2/3-e)*6:u},d=f(a-1/3),m=f(a),v=f(a+1/3);return s(Fi,v,m,d,t)})),Lp=t((function(n,e,r){return s(Tp,n,e,r,1)})),Dp=o((function(n,e,r,t){return n+(e-n)*(1+jm(6.283185307179586*u(tp,r,t)))/2})),wp=function(n){var e=u(eb,"number of tree blocks",n);return hb($([u(fp,yp,D(.2,8,.2)),hb(u(Wt,(function(r){var t=u(Ef,2,.2*(e-r)),o=f(Lp,s(Dp,r/e,1,10,n.a2),.6,.6);return u(np,u(eb,"turning speed of the tree",n)*r*s(Dp,3,5,10,n.a2),u(Ib,1.2*r*.25,u(fp,o,D(t,.25,t))))}),u(Zr,0,ft(e)-1)))]))},zp=function(n){var e=function(n){return u(Ib,-1,u(fp,n,D(10,1,10)))},r=function(n){return hb($([e(n),u(np,ip(45),e(n))]))};return u(np,u(op,1e3,n.a2),hb($([Pp,r(Mp),u(Ib,-.1,u(Cp,1.1,r(lb))),u(Ib,-.2,u(Cp,1.2,r(Mp))),u(Ib,1,u(kb,5,wp(n))),hb(u(Wt,(function(n){return u(np,ip(45*n),u(Ib,-1/3,u(kb,5.5,u(Cp,2,lp))))}),u(Zr,1,7)))])))},Sp=s(Fi,245/255,121/255,0,1),Np=function(n){return hb(u(Wt,(function(e){return u(Ib,4,u(rp,u(op,1e3,n.a2),u(Xb,u(op,1e3,n.a2),u(np,-u(op,200,n.a2),u(np,-e/14*ip(360),u(kb,1.3,u(Ib,s(Dp,-1,1,10,n.a2),u(Xb,u(op,600,n.a2),u(rp,u(op,300,n.a2),u(pb,Sp,.3))))))))))}),u(Zr,0,13)))},Ep=function(n){return Bb(D(0,0,n))},$p=r((function(n,e){return u(yb,n,u(Ab,e,lu))})),_p=function(n){return hb($([u(np,-u(op,640,n.a2),u(Ep,3.5,u(rp,u(op,100,n.a2),hb($([u(kb,-.02,u($p,ob,.5)),u(kb,.02,u($p,xb,.5))])))))]))},Ap=r((function(n){return $([zp(n),up(n),Np(n),_p(n)])}));Da={Main:{init:s(jl,r((function(n,e){var r,t,o,a=(r={dg:u(eb,"azimuth for third light",n),bL:(t=f(vu,1667,25e3,2e3),o=t>4e3?-3025846900/(t*t*t)+2107037.9/(t*t)+.2226347*1e3/t+.24039:-266123900.00000003/(t*t*t)-.2343589*1e6/(t*t)+877.6956/t+.17991,{bD:o,bE:t>2222?t>4e3?o*o*o*3.081758-o*o*5.8733867+3.75112997*o-.37001483:o*o*o*-.9549476-o*o*1.37418593+2.09137015*o-.16748867:o*o*o*-1.1063814-o*o*1.3481102+2.18555832*o-.20219683}),dp:u(eb,"elevation for third light",n),cn:120},u(Uv,!0,{bL:r.bL,eL:u($v,r.dg,r.dp),cn:r.cn})),i=cb({bL:Gv,cn:6e3,eb:{bD:2,bE:3,az:1}}),c=function(n){return function(n){for(;;){if(P(n.e2,0)&&P(n.e3,0))return Of;if(!u(nu,uu(n.e2),uu(n.e3))){var e=bc(n.e3/Ul),r=bc(n.e2/Ul),t=n.fy,o=t.bD,a=t.bE,i=t.az,c=u(Ru,1,n.bL);return{bJ:r*If(c),eF:!1,bQ:r*kf(c),cR:e/r,b2:r*Bf(c),c4:3,bD:o,bE:a,az:i}}n={bL:n.bL,e2:n.e3,e3:n.e2,fy:rs(n.fy)}}}({bL:n.bL,e2:n.e2,e3:n.e3,fy:u($v,n.dg,n.dp)})}({dg:u(eb,"azimuth for fourth light",n),bL:Gv,dp:u(eb,"elevation for fourth light",n),e2:20,e3:10}),l=cb({bL:tb,cn:6e3,eb:{bD:-2,bE:4,az:1}});return u(Hv,{ew:ab,eA:ob,eD:mu,eI:.1,eQ:1.2*u(Ii,2,6),e7:s(Kv,l,i,a,c),aa:n.aa,fx:rb,fD:Gv},u(Ap,n,e))})),Ol,Gl,(function(){return{}}))(u(Pt,(function(n){return Dt({ci:n})}),u(Mt,"devicePixelRatio",yt)))(0)}},n.Elm?function n(e,r){for(var t in r)t in e?"init"==t?C(6):n(e[t],r[t]):e[t]=r[t]}(n.Elm,Da):n.Elm=Da}(n);const e=n.Elm.Main.init({node:document.getElementById("elm-node"),flags:{devicePixelRatio:window.devicePixelRatio}});function r(n){const e=[];for(let r=0;r<n.length;r++)e.push({identifier:n[r].identifier,pageX:n[r].pageX,pageY:n[r].pageY});return e}window.addEventListener("touchstart",(n=>{e.ports.touchStart.send(r(n.changedTouches))})),window.addEventListener("touchmove",(n=>{e.ports.touchMove.send(r(n.changedTouches))})),window.addEventListener("touchend",(n=>{e.ports.touchEnd.send(r(n.changedTouches))})),window.addEventListener("touchcancel",(n=>{e.ports.touchCancel.send(r(n.changedTouches))}))}();
//# sourceMappingURL=index.249bd089.js.map
