!function(){var n={};!function(n){function e(n,e,r){return r.a=n,r.f=e,r}function r(n){return e(2,n,(function(e){return function(r){return n(e,r)}}))}function t(n){return e(3,n,(function(e){return function(r){return function(t){return n(e,r,t)}}}))}function o(n){return e(4,n,(function(e){return function(r){return function(t){return function(o){return n(e,r,t,o)}}}}))}function a(n){return e(5,n,(function(e){return function(r){return function(t){return function(o){return function(a){return n(e,r,t,o,a)}}}}}))}function i(n){return e(6,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return n(e,r,t,o,a,i)}}}}}}))}function c(n){return e(7,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return n(e,r,t,o,a,i,c)}}}}}}}))}function l(n){return e(8,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return n(e,r,t,o,a,i,c,l)}}}}}}}}))}function u(n,e,r){return 2===n.a?n.f(e,r):n(e)(r)}function f(n,e,r,t){return 3===n.a?n.f(e,r,t):n(e)(r)(t)}function s(n,e,r,t,o){return 4===n.a?n.f(e,r,t,o):n(e)(r)(t)(o)}function d(n,e,r,t,o,a){return 5===n.a?n.f(e,r,t,o,a):n(e)(r)(t)(o)(a)}function v(n,e,r,t,o,a,i){return 6===n.a?n.f(e,r,t,o,a,i):n(e)(r)(t)(o)(a)(i)}function m(n,e,r,t,o,a,i,c){return 7===n.a?n.f(e,r,t,o,a,i,c):n(e)(r)(t)(o)(a)(i)(c)}function b(n,e,r,t,o,a,i,c,l){return 8===n.a?n.f(e,r,t,o,a,i,c,l):n(e)(r)(t)(o)(a)(i)(c)(l)}var p=t((function(n,e,r){for(var t=Array(n),o=0;n>o;o++)t[o]=r(e+o);return t})),g=r((function(n,e){for(var r=Array(n),t=0;n>t&&e.b;t++)r[t]=e.a,e=e.b;return r.length=t,L(r,e)})),h=r((function(n,e){return e[n]})),x=t((function(n,e,r){for(var t=r.length-1;t>=0;t--)e=u(n,r[t],e);return e}));function C(n){throw Error("https://github.com/elm/core/blob/1.0.0/hints/"+n+".md")}function P(n,e){for(var r,t=[],o=M(n,e,0,t);o&&(r=t.pop());o=M(r.a,r.b,0,t));return o}function M(n,e,r,t){if(n===e)return!0;if("object"!=typeof n||null===n||null===e)return"function"==typeof n&&C(5),!1;if(r>100)return t.push(L(n,e)),!0;for(var o in 0>n.$&&(n=Sr(n),e=Sr(e)),n)if(!M(n[o],e[o],r+1,t))return!1;return!0}function T(n,e,r){if("object"!=typeof n)return n===e?0:e>n?-1:1;if(void 0===n.$)return(r=T(n.a,e.a))||(r=T(n.b,e.b))?r:T(n.c,e.c);for(;n.b&&e.b&&!(r=T(n.a,e.a));n=n.b,e=e.b);return r||(n.b?1:e.b?-1:0)}var y=r((function(n,e){var r=T(n,e);return 0>r?zr:r?Nr:$r}));function L(n,e){return{a:n,b:e}}function w(n,e,r){return{a:n,b:e,c:r}}function D(n,e){var r={};for(var t in n)r[t]=n[t];for(var t in e)r[t]=e[t];return r}function S(n,e){if("string"==typeof n)return n+e;if(!n.b)return e;var r=N(n.a,e);n=n.b;for(var t=r;n.b;n=n.b)t=t.b=N(n.a,e);return r}var $={$:0};function N(n,e){return{$:1,a:n,b:e}}var z=r(N);function _(n){for(var e=$,r=n.length;r--;)e=N(n[r],e);return e}function R(n){for(var e=[];n.b;n=n.b)e.push(n.a);return e}var A=t((function(n,e,r){for(var t=[];e.b&&r.b;e=e.b,r=r.b)t.push(u(n,e.a,r.a));return _(t)})),F=r((function(n,e){return n*e})),V=r(Math.pow),k=r((function(n,e){var r=e%n;return 0===n?C(11):r>0&&0>n||0>r&&n>0?r+n:r})),B=Math.cos,E=Math.sin,K=Math.tan,j=Math.ceil,I=Math.floor,H=Math.round,U=Math.sqrt,W=Math.log,O=isNaN,G=r((function(n,e){return n+e})),Y=t((function(n,e,r){for(var t=r.length;t--;){var o=r[t],a=r.charCodeAt(t);56320>a||a>57343||(o=r[--t]+o),e=u(n,o,e)}return e})),q=r((function(n,e){return e.split(n)})),X=r((function(n,e){return e.join(n)})),Z=t((function(n,e,r){return r.slice(n,e)})),J=r((function(n,e){return 0===e.indexOf(n)}));function Q(n){return n+""}function nn(n){return{$:2,b:n}}var en=nn((function(n){return"number"!=typeof n?hn("an INT",n):n>-2147483647&&2147483647>n&&(0|n)===n?Vr(n):!isFinite(n)||n%1?hn("an INT",n):Vr(n)})),rn=nn((function(n){return"boolean"==typeof n?Vr(n):hn("a BOOL",n)})),tn=nn((function(n){return"number"==typeof n?Vr(n):hn("a FLOAT",n)})),on=(nn((function(n){return Vr(n)})),nn((function(n){return"string"==typeof n?Vr(n):n instanceof String?Vr(n+""):hn("a STRING",n)}))),an=r((function(n,e){return{$:6,d:n,b:e}}));function cn(n,e){return{$:9,f:n,g:e}}var ln=r((function(n,e){return{$:10,b:e,h:n}})),un=r((function(n,e){return cn(n,[e])})),fn=t((function(n,e,r){return cn(n,[e,r])})),sn=o((function(n,e,r,t){return cn(n,[e,r,t])})),dn=r((function(n,e){try{return mn(n,JSON.parse(e))}catch(n){return _r(u(Rr,"This is not valid JSON! "+n.message,e))}})),vn=r((function(n,e){return mn(n,e)}));function mn(n,e){switch(n.$){case 2:return n.b(e);case 5:return null===e?Vr(n.c):hn("null",e);case 3:return pn(e)?bn(n.b,e,_):hn("a LIST",e);case 4:return pn(e)?bn(n.b,e,gn):hn("an ARRAY",e);case 6:var r=n.d;if("object"!=typeof e||null===e||!(r in e))return hn("an OBJECT with a field named `"+r+"`",e);var t=mn(n.b,e[r]);return xt(t)?t:_r(u(Ar,r,t.a));case 7:var o=n.e;return pn(e)?e.length>o?(t=mn(n.b,e[o]),xt(t)?t:_r(u(Fr,o,t.a))):hn("a LONGER array. Need index "+o+" but only see "+e.length+" entries",e):hn("an ARRAY",e);case 8:if("object"!=typeof e||null===e||pn(e))return hn("an OBJECT",e);var a=$;for(var i in e)if(e.hasOwnProperty(i)){if(t=mn(n.b,e[i]),!xt(t))return _r(u(Ar,i,t.a));a=N(L(i,t.a),a)}return Vr(Zr(a));case 9:for(var c=n.f,l=n.g,f=0;l.length>f;f++){if(t=mn(l[f],e),!xt(t))return t;c=c(t.a)}return Vr(c);case 10:return t=mn(n.b,e),xt(t)?mn(n.h(t.a),e):t;case 11:for(var s=$,d=n.g;d.b;d=d.b){if(t=mn(d.a,e),xt(t))return t;s=N(t.a,s)}return _r(kr(Zr(s)));case 1:return _r(u(Rr,n.a,e));case 0:return Vr(n.a)}}function bn(n,e,r){for(var t=e.length,o=Array(t),a=0;t>a;a++){var i=mn(n,e[a]);if(!xt(i))return _r(u(Fr,a,i.a));o[a]=i.a}return Vr(r(o))}function pn(n){return Array.isArray(n)||"undefined"!=typeof FileList&&n instanceof FileList}function gn(n){return u(ht,n.length,(function(e){return n[e]}))}function hn(n,e){return _r(u(Rr,"Expecting "+n,e))}function xn(n,e){if(n===e)return!0;if(n.$!==e.$)return!1;switch(n.$){case 0:case 1:return n.a===e.a;case 2:return n.b===e.b;case 5:return n.c===e.c;case 3:case 4:case 8:return xn(n.b,e.b);case 6:return n.d===e.d&&xn(n.b,e.b);case 7:return n.e===e.e&&xn(n.b,e.b);case 9:return n.f===e.f&&Cn(n.g,e.g);case 10:return n.h===e.h&&xn(n.b,e.b);case 11:return Cn(n.g,e.g)}}function Cn(n,e){var r=n.length;if(r!==e.length)return!1;for(var t=0;r>t;t++)if(!xn(n[t],e[t]))return!1;return!0}var Pn=r((function(n,e){return JSON.stringify(e,null,n)+""}));function Mn(n){return n}var Tn=t((function(n,e,r){return r[n]=e,r}));function yn(n){return{$:0,a:n}}function Ln(n){return{$:2,b:n,c:null}}var wn=r((function(n,e){return{$:3,b:n,d:e}})),Dn=0;function Sn(n){var e={$:0,e:Dn++,f:n,g:null,h:[]};return An(e),e}function $n(n){return Ln((function(e){e(yn(Sn(n)))}))}function Nn(n,e){n.h.push(e),An(n)}var zn=r((function(n,e){return Ln((function(r){Nn(n,e),r(yn(0))}))})),_n=!1,Rn=[];function An(n){if(Rn.push(n),!_n){for(_n=!0;n=Rn.shift();)Fn(n);_n=!1}}function Fn(n){for(;n.f;){var e=n.f.$;if(0===e||1===e){for(;n.g&&n.g.$!==e;)n.g=n.g.i;if(!n.g)return;n.f=n.g.b(n.f.a),n.g=n.g.i}else{if(2===e)return void(n.f.c=n.f.b((function(e){n.f=e,An(n)})));if(5===e){if(0===n.h.length)return;n.f=n.f.b(n.h.shift())}else n.g={$:3===e?0:1,b:n.f.b,i:n.g},n.f=n.f.d}}}var Vn={};function kn(n,e,r,t,o){return{b:n,c:e,d:r,e:t,f:o}}function Bn(n,e){var r={g:e,h:void 0},t=n.c,o=n.d,a=n.e,i=n.f;return r.h=Sn(u(wn,(function n(e){return u(wn,n,{$:5,b:function(n){var c=n.a;return 0===n.$?f(o,r,c,e):a&&i?s(t,r,c.i,c.j,e):f(t,r,a?c.i:c.j,e)}})}),n.b))}var En=r((function(n,e){return Ln((function(r){n.g(e),r(yn(0))}))})),Kn=r((function(n,e){return u(zn,n.h,{$:0,a:e})}));function jn(n){return function(e){return{$:1,k:n,l:e}}}function In(n){return{$:2,m:n}}var Hn=r((function(n,e){return{$:3,n:n,o:e}})),Un=[],Wn=!1;function On(n,e,r){if(Un.push({p:n,q:e,r:r}),!Wn){Wn=!0;for(var t;t=Un.shift();)Gn(t.p,t.q,t.r);Wn=!1}}function Gn(n,e,r){var t={};for(var o in Yn(!0,e,t,null),Yn(!1,r,t,null),n)Nn(n[o],{$:"fx",a:t[o]||{i:$,j:$}})}function Yn(n,e,r,t){switch(e.$){case 1:var o=e.k,a=function(n,e,r,t){return u(n?Vn[e].e:Vn[e].f,(function(n){for(var e=r;e;e=e.t)n=e.s(n);return n}),t)}(n,o,t,e.l);return void(r[o]=function(n,e,r){return r=r||{i:$,j:$},n?r.i=N(e,r.i):r.j=N(e,r.j),r}(n,a,r[o]));case 2:for(var i=e.m;i.b;i=i.b)Yn(n,i.a,r,t);return;case 3:return void Yn(n,e.o,r,{s:e.n,t:t})}}function qn(n,e){return function(n){Vn[n]&&C(3)}(n),Vn[n]={f:Xn,u:e,a:Zn},jn(n)}var Xn=r((function(n,e){return function(r){return n(e(r))}}));function Zn(n,e){var r=$,o=Vn[n].u,a=yn(null);return Vn[n].b=a,Vn[n].c=t((function(n,e){return r=e,a})),{send:function(n){var t=u(vn,o,n);xt(t)||C(4);for(var a=t.a,i=r;i.b;i=i.b)e(i.a(a))}}}var Jn="undefined"!=typeof document?document:{};function Qn(n,e){n.appendChild(e)}function ne(n){return{$:0,a:n}}var ee,re=r((function(n,e){return r((function(r,t){for(var o=[],a=0;t.b;t=t.b){var i=t.a;a+=i.b||0,o.push(i)}return a+=o.length,{$:1,c:e,d:ue(r),e:o,f:n,b:a}}))}))(void 0),te=r((function(n,e){return r((function(r,t){for(var o=[],a=0;t.b;t=t.b){var i=t.a;a+=i.b.b||0,o.push(i)}return a+=o.length,{$:2,c:e,d:ue(r),e:o,f:n,b:a}}))}))(void 0),oe=r((function(n,e){return{$:4,j:n,k:e,b:1+(e.b||0)}})),ae=r((function(n,e){return{$:"a0",n:n,o:e}})),ie=r((function(n,e){return{$:"a1",n:n,o:e}})),ce=r((function(n,e){return{$:"a2",n:n,o:e}})),le=r((function(n,e){return{$:"a3",n:n,o:e}}));function ue(n){for(var e={};n.b;n=n.b){var r=n.a,t=r.$,o=r.n,a=r.o;if("a2"!==t){var i=e[t]||(e[t]={});"a3"===t&&"class"===o?fe(i,o,a):i[o]=a}else"className"===o?fe(e,o,a):e[o]=a}return e}function fe(n,e,r){var t=n[e];n[e]=t?t+" "+r:r}function se(n,e){var r=n.$;if(5===r)return se(n.k||(n.k=n.m()),e);if(0===r)return Jn.createTextNode(n.a);if(4===r){for(var t=n.k,o=n.j;4===t.$;)"object"!=typeof o?o=[o,t.j]:o.push(t.j),t=t.k;var a={j:o,p:e};return(i=se(t,a)).elm_event_node_ref=a,i}if(3===r)return de(i=n.h(n.g),e,n.d),i;var i=n.f?Jn.createElementNS(n.f,n.c):Jn.createElement(n.c);de(i,e,n.d);for(var c=n.e,l=0;c.length>l;l++)Qn(i,se(1===r?c[l]:c[l].b,e));return i}function de(n,e,r){for(var t in r){var o=r[t];"a1"===t?ve(n,o):"a0"===t?pe(n,e,o):"a3"===t?me(n,o):"a4"===t?be(n,o):("value"!==t&&"checked"!==t||n[t]!==o)&&(n[t]=o)}}function ve(n,e){var r=n.style;for(var t in e)r[t]=e[t]}function me(n,e){for(var r in e){var t=e[r];void 0!==t?n.setAttribute(r,t):n.removeAttribute(r)}}function be(n,e){for(var r in e){var t=e[r],o=t.f,a=t.o;void 0!==a?n.setAttributeNS(o,r,a):n.removeAttributeNS(o,r)}}function pe(n,e,r){var t=n.elmFs||(n.elmFs={});for(var o in r){var a=r[o],i=t[o];if(a){if(i){if(i.q.$===a.$){i.q=a;continue}n.removeEventListener(o,i)}i=ge(e,a),n.addEventListener(o,i,ee&&{passive:2>wt(a)}),t[o]=i}else n.removeEventListener(o,i),t[o]=void 0}}try{window.addEventListener("t",null,Object.defineProperty({},"passive",{get:function(){ee=!0}}))}catch(n){}function ge(n,e){function r(e){var t=r.q,o=mn(t.a,e);if(xt(o)){for(var a,i=wt(t),c=o.a,l=i?3>i?c.a:c.as:c,u=1==i?c.b:3==i&&c.c2,f=(u&&e.stopPropagation(),(2==i?c.b:3==i&&c.cS)&&e.preventDefault(),n);a=f.j;){if("function"==typeof a)l=a(l);else for(var s=a.length;s--;)l=a[s](l);f=f.p}f(l,u)}}return r.q=e,r}function he(n,e){return n.$==e.$&&xn(n.a,e.a)}function xe(n,e,r,t){var o={$:e,r:r,s:t,t:void 0,u:void 0};return n.push(o),o}function Ce(n,e,r,t){if(n!==e){var o=n.$,a=e.$;if(o!==a){if(1!==o||2!==a)return void xe(r,0,t,e);e=function(n){for(var e=n.e,r=e.length,t=Array(r),o=0;r>o;o++)t[o]=e[o].b;return{$:1,c:n.c,d:n.d,e:t,f:n.f,b:n.b}}(e),a=1}switch(a){case 5:for(var i=n.l,c=e.l,l=i.length,u=l===c.length;u&&l--;)u=i[l]===c[l];if(u)return void(e.k=n.k);e.k=e.m();var f=[];return Ce(n.k,e.k,f,0),void(f.length>0&&xe(r,1,t,f));case 4:for(var s=n.j,d=e.j,v=!1,m=n.k;4===m.$;)v=!0,"object"!=typeof s?s=[s,m.j]:s.push(m.j),m=m.k;for(var b=e.k;4===b.$;)v=!0,"object"!=typeof d?d=[d,b.j]:d.push(b.j),b=b.k;return v&&s.length!==d.length?void xe(r,0,t,e):((v?function(n,e){for(var r=0;n.length>r;r++)if(n[r]!==e[r])return!1;return!0}(s,d):s===d)||xe(r,2,t,d),void Ce(m,b,r,t+1));case 0:return void(n.a!==e.a&&xe(r,3,t,e.a));case 1:return void Pe(n,e,r,t,Te);case 2:return void Pe(n,e,r,t,ye);case 3:if(n.h!==e.h)return void xe(r,0,t,e);var p=Me(n.d,e.d);p&&xe(r,4,t,p);var g=e.i(n.g,e.g);return void(g&&xe(r,5,t,g))}}}function Pe(n,e,r,t,o){if(n.c===e.c&&n.f===e.f){var a=Me(n.d,e.d);a&&xe(r,4,t,a),o(n,e,r,t)}else xe(r,0,t,e)}function Me(n,e,r){var t;for(var o in n)if("a1"!==o&&"a0"!==o&&"a3"!==o&&"a4"!==o)if(o in e){var a=n[o],i=e[o];a===i&&"value"!==o&&"checked"!==o||"a0"===r&&he(a,i)||((t=t||{})[o]=i)}else(t=t||{})[o]=r?"a1"===r?"":"a0"===r||"a3"===r?void 0:{f:n[o].f,o:void 0}:"string"==typeof n[o]?"":null;else{var c=Me(n[o],e[o]||{},o);c&&((t=t||{})[o]=c)}for(var l in e)l in n||((t=t||{})[l]=e[l]);return t}function Te(n,e,r,t){var o=n.e,a=e.e,i=o.length,c=a.length;i>c?xe(r,6,t,{v:c,i:i-c}):c>i&&xe(r,7,t,{v:i,e:a});for(var l=c>i?i:c,u=0;l>u;u++){var f=o[u];Ce(f,a[u],r,++t),t+=f.b||0}}function ye(n,e,r,t){for(var o=[],a={},i=[],c=n.e,l=e.e,u=c.length,f=l.length,s=0,d=0,v=t;u>s&&f>d;){var m=(w=c[s]).a,b=(D=l[d]).a,p=w.b,g=D.b,h=void 0,x=void 0;if(m!==b){var C=c[s+1],P=l[d+1];if(C){var M=C.a,T=C.b;x=b===M}if(P){var y=P.a,L=P.b;h=m===y}if(h&&x)Ce(p,L,o,++v),we(a,o,m,g,d,i),v+=p.b||0,De(a,o,m,T,++v),v+=T.b||0,s+=2,d+=2;else if(h)v++,we(a,o,b,g,d,i),Ce(p,L,o,v),v+=p.b||0,s+=1,d+=2;else if(x)De(a,o,m,p,++v),v+=p.b||0,Ce(T,g,o,++v),v+=T.b||0,s+=2,d+=1;else{if(!C||M!==y)break;De(a,o,m,p,++v),we(a,o,b,g,d,i),v+=p.b||0,Ce(T,L,o,++v),v+=T.b||0,s+=2,d+=2}}else Ce(p,g,o,++v),v+=p.b||0,s++,d++}for(;u>s;){var w;v++,De(a,o,(w=c[s]).a,p=w.b,v),v+=p.b||0,s++}for(;f>d;){var D,S=S||[];we(a,o,(D=l[d]).a,D.b,void 0,S),d++}(o.length>0||i.length>0||S)&&xe(r,8,t,{w:o,x:i,y:S})}var Le="_elmW6BL";function we(n,e,r,t,o,a){var i=n[r];if(!i)return a.push({r:o,A:i={c:0,z:t,r:o,s:void 0}}),void(n[r]=i);if(1===i.c){a.push({r:o,A:i}),i.c=2;var c=[];return Ce(i.z,t,c,i.r),i.r=o,void(i.s.s={w:c,A:i})}we(n,e,r+Le,t,o,a)}function De(n,e,r,t,o){var a=n[r];if(a){if(0===a.c){a.c=2;var i=[];return Ce(t,a.z,i,o),void xe(e,9,o,{w:i,A:a})}De(n,e,r+Le,t,o)}else{var c=xe(e,9,o,void 0);n[r]={c:1,z:t,r:o,s:c}}}function Se(n,e,r,t){$e(n,e,r,0,0,e.b,t)}function $e(n,e,r,t,o,a,i){for(var c=r[t],l=c.r;l===o;){var u=c.$;if(1===u)Se(n,e.k,c.s,i);else if(8===u)c.t=n,c.u=i,(f=c.s.w).length>0&&$e(n,e,f,0,o,a,i);else if(9===u){c.t=n,c.u=i;var f,s=c.s;s&&(s.A.s=n,(f=s.w).length>0&&$e(n,e,f,0,o,a,i))}else c.t=n,c.u=i;if(!(c=r[++t])||(l=c.r)>a)return t}var d=e.$;if(4===d){for(var v=e.k;4===v.$;)v=v.k;return $e(n,v,r,t,o+1,a,n.elm_event_node_ref)}for(var m=e.e,b=n.childNodes,p=0;m.length>p;p++){o++;var g=1===d?m[p]:m[p].b,h=o+(g.b||0);if(!(o>l||l>h||(c=r[t=$e(b[p],g,r,t,o,h,i)])&&(l=c.r)<=a))return t;o=h}return t}function Ne(n,e){for(var r=0;e.length>r;r++){var t=e[r],o=t.t,a=ze(o,t);o===n&&(n=a)}return n}function ze(n,e){switch(e.$){case 0:return function(n,e,r){var t=n.parentNode,o=se(e,r);return o.elm_event_node_ref||(o.elm_event_node_ref=n.elm_event_node_ref),t&&o!==n&&t.replaceChild(o,n),o}(n,e.s,e.u);case 4:return de(n,e.u,e.s),n;case 3:return n.replaceData(0,n.length,e.s),n;case 1:return Ne(n,e.s);case 2:return n.elm_event_node_ref?n.elm_event_node_ref.j=e.s:n.elm_event_node_ref={j:e.s,p:e.u},n;case 6:for(var r=e.s,t=0;r.i>t;t++)n.removeChild(n.childNodes[r.v]);return n;case 7:for(var o=(r=e.s).e,a=n.childNodes[t=r.v];o.length>t;t++)n.insertBefore(se(o[t],e.u),a);return n;case 9:if(!(r=e.s))return n.parentNode.removeChild(n),n;var i=r.A;return void 0!==i.r&&n.parentNode.removeChild(n),i.s=Ne(n,r.w),n;case 8:return function(n,e){var r=e.s,t=function(n,e){if(n){for(var r=Jn.createDocumentFragment(),t=0;n.length>t;t++){var o=n[t].A;Qn(r,2===o.c?o.s:se(o.z,e.u))}return r}}(r.y,e);n=Ne(n,r.w);for(var o=r.x,a=0;o.length>a;a++){var i=o[a],c=i.A,l=2===c.c?c.s:se(c.z,e.u);n.insertBefore(l,n.childNodes[i.r])}return t&&Qn(n,t),n}(n,e);case 5:return e.s(n);default:C(10)}}function _e(n){if(3===n.nodeType)return ne(n.textContent);if(1!==n.nodeType)return ne("");for(var e=$,r=n.attributes,t=r.length;t--;){var o=r[t];e=N(u(le,o.name,o.value),e)}var a=n.tagName.toLowerCase(),i=$,c=n.childNodes;for(t=c.length;t--;)i=N(_e(c[t]),i);return f(re,a,e,i)}var Re=o((function(n,e,r,t){return function(n,e,r,t,o,a){var i=u(vn,n,e?e.flags:void 0);xt(i)||C(2);var c={},l=r(i.a),f=l.a,s=a(v,f),d=function(n,e){var r;for(var t in Vn){var o=Vn[t];o.a&&((r=r||{})[t]=o.a(t,e)),n[t]=Bn(o,e)}return r}(c,v);function v(n,e){var r=u(t,n,f);s(f=r.a,e),On(c,r.b,o(f))}return On(c,l.b,o(f)),d?{ports:d}:{}}(e,t,n.e1,n.fy,n.fs,(function(e,r){var o=n.fA,a=t.node,i=_e(a);return function(n,e){e(n);var r=0;function t(){r=1===r?0:(Fe(t),e(n),1)}return function(o,a){n=o,a?(e(n),2===r&&(r=1)):(0===r&&Fe(t),r=2)}}(r,(function(n){var r=o(n),t=function(n,e){var r=[];return Ce(n,e,r,0),r}(i,r);a=function(n,e,r,t){return 0===r.length?n:(Se(n,e,r,t),Ne(n,r))}(a,i,t,e),i=r}))}))})),Ae="undefined"!=typeof cancelAnimationFrame?cancelAnimationFrame:function(n){clearTimeout(n)},Fe="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:function(n){return setTimeout(n,1e3/60)},Ve={addEventListener:function(){},removeEventListener:function(){}},ke="undefined"!=typeof document?document:Ve,Be="undefined"!=typeof window?window:Ve,Ee=t((function(n,e,r){return $n(Ln((function(){function t(n){Sn(r(n))}return n.addEventListener(e,t,ee&&{passive:!0}),function(){n.removeEventListener(e,t)}})))})),Ke=r((function(n,e){var r=mn(n,e);return xt(r)?Br(r.a):Er})),je=r((function(n,e){var r="g";n.fa&&(r+="m"),n.eE&&(r+="i");try{return Br(RegExp(e,r))}catch(n){return Er}})),Ie=t((function(n,e,r){for(var t,o=[],a=0,i=r,c=e.lastIndex,l=-1;a++<n&&(t=e.exec(i))&&l!=e.lastIndex;){for(var u=t.length-1,f=Array(u);u>0;){var d=t[u];f[--u]=d?Br(d):Er}o.push(s(mi,t[0],t.index,a,_(f))),l=e.lastIndex}return e.lastIndex=c,_(o)})),He=0;function Ue(n,e){for(;e.b;e=e.b)n(e.a)}function We(n){for(var e=0;n.b;n=n.b)e++;return e}var Oe="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:function(n){setTimeout(n,1e3/60)},Ge=a((function(n,e,r,t,o){return{$:0,a:n,b:e,c:r,d:t,e:o}})),Ye=r((function(n,e){var r=n.blend;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.BLEND),r.enabled=!0),r.a===e.a&&r.d===e.d||(n.gl.blendEquationSeparate(e.a,e.d),r.a=e.a,r.d=e.d),r.b===e.b&&r.c===e.c&&r.e===e.e&&r.f===e.f||(n.gl.blendFuncSeparate(e.b,e.c,e.e,e.f),r.b=e.b,r.c=e.c,r.e=e.e,r.f=e.f),r.g===e.g&&r.h===e.h&&r.i===e.i&&r.j===e.j||(n.gl.blendColor(e.g,e.h,e.i,e.j),r.g=e.g,r.h=e.h,r.i=e.i,r.j=e.j)})),qe=r((function(n,e){var r=n.depthTest;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.DEPTH_TEST),r.enabled=!0),r.a!==e.a&&(n.gl.depthFunc(e.a),r.a=e.a),r.b!==e.b&&(n.gl.depthMask(e.b),r.b=e.b),r.c===e.c&&r.d===e.d||(n.gl.depthRange(e.c,e.d),r.c=e.c,r.d=e.d)})),Xe=r((function(n,e){var r=n.stencilTest;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.STENCIL_TEST),r.enabled=!0),r.d===e.d&&r.a===e.a&&r.b===e.b||(n.gl.stencilFuncSeparate(n.gl.FRONT,e.d,e.a,e.b),r.d=e.d),r.e===e.e&&r.f===e.f&&r.g===e.g||(n.gl.stencilOpSeparate(n.gl.FRONT,e.e,e.f,e.g),r.e=e.e,r.f=e.f,r.g=e.g),r.c!==e.c&&(n.gl.stencilMask(e.c),r.c=e.c),r.h===e.h&&r.a===e.a&&r.b===e.b||(n.gl.stencilFuncSeparate(n.gl.BACK,e.h,e.a,e.b),r.h=e.h,r.a=e.a,r.b=e.b),r.i===e.i&&r.j===e.j&&r.k===e.k||(n.gl.stencilOpSeparate(n.gl.BACK,e.i,e.j,e.k),r.i=e.i,r.j=e.j,r.k=e.k)})),Ze=r((function(n,e){var r=n.scissor;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.SCISSOR_TEST),r.enabled=!0),r.a===e.a&&r.b===e.b&&r.c===e.c&&r.d===e.d||(n.gl.scissor(e.a,e.b,e.c,e.d),r.a=e.a,r.b=e.b,r.c=e.c,r.d=e.d)})),Je=r((function(n,e){var r=n.colorMask;r.toggle=n.toggle,r.enabled=!0,r.a===e.a&&r.b===e.b&&r.c===e.c&&r.d===e.d||(n.gl.colorMask(e.a,e.b,e.c,e.d),r.a=e.a,r.b=e.b,r.c=e.c,r.d=e.d)})),Qe=r((function(n,e){var r=n.cullFace;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.CULL_FACE),r.enabled=!0),r.a!==e.a&&(n.gl.cullFace(e.a),r.a=e.a)})),nr=r((function(n,e){var r=n.polygonOffset;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.POLYGON_OFFSET_FILL),r.enabled=!0),r.a===e.a&&r.b===e.b||(n.gl.polygonOffset(e.a,e.b),r.a=e.a,r.b=e.b)})),er=r((function(n,e){var r=n.sampleCoverage;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.SAMPLE_COVERAGE),r.enabled=!0),r.a===e.a&&r.b===e.b||(n.gl.sampleCoverage(e.a,e.b),r.a=e.a,r.b=e.b)})),rr=function(n){n.scissor.enabled&&(n.gl.disable(n.gl.SCISSOR_TEST),n.scissor.enabled=!1)},tr=function(n){var e=n.colorMask;e.a&&e.b&&e.c&&e.d||(n.gl.colorMask(!0,!0,!0,!0),e.a=!0,e.b=!0,e.c=!0,e.d=!0)},or=["blend","depthTest","stencilTest","scissor","colorMask","cullFace","polygonOffset","sampleCoverage","sampleAlphaToCoverage"],ar=[function(n){n.blend.enabled&&(n.gl.disable(n.gl.BLEND),n.blend.enabled=!1)},function(n){n.depthTest.enabled&&(n.gl.disable(n.gl.DEPTH_TEST),n.depthTest.enabled=!1)},function(n){n.stencilTest.enabled&&(n.gl.disable(n.gl.STENCIL_TEST),n.stencilTest.enabled=!1)},rr,tr,function(n){n.gl.disable(n.gl.CULL_FACE)},function(n){n.gl.disable(n.gl.POLYGON_OFFSET_FILL)},function(n){n.gl.disable(n.gl.SAMPLE_COVERAGE)},function(n){n.gl.disable(n.gl.SAMPLE_ALPHA_TO_COVERAGE)}];function ir(n,e,r){var t=n.createShader(r);return n.shaderSource(t,"#extension GL_OES_standard_derivatives : enable\n"+e),n.compileShader(t),t}function cr(n,e){switch(e){case n.FLOAT:return{size:1,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC2:return{size:2,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC3:return{size:3,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC4:return{size:4,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_MAT4:return{size:4,arraySize:4,type:Float32Array,baseType:n.FLOAT};case n.INT:return{size:1,arraySize:1,type:Int32Array,baseType:n.INT}}}function lr(n,e,r,t){for(var o=r.a.$7,a=[],i=0;o>i;i++)a.push(String.fromCharCode(97+i));var c=cr(n,e.type);if(void 0===c)throw Error("No info available for: "+e.type);var l=0,u=c.size*c.arraySize*o,f=new c.type(We(r.b)*u);Ue((function(n){!function(n,e,r,t,i){var c;if(1===o)for(c=0;e>c;c++)n[r++]=1===e?t[i]:t[i][c];else a.forEach((function(o){for(c=0;e>c;c++)n[r++]=1===e?t[o][i]:t[o][i][c]}))}(f,c.size*c.arraySize,l,n,t[e.name]||e.name),l+=u}),r.b);var s=n.createBuffer();return n.bindBuffer(n.ARRAY_BUFFER,s),n.bufferData(n.ARRAY_BUFFER,f,n.STATIC_DRAW),s}function ur(n,e){return n+"#"+e}var fr=r((function(n,e){var r=n.f,t=r.gl;return t?(t.viewport(0,0,t.drawingBufferWidth,t.drawingBufferHeight),r.depthTest.b||(t.depthMask(!0),r.depthTest.b=!0),r.stencilTest.c!==r.STENCIL_WRITEMASK&&(t.stencilMask(r.STENCIL_WRITEMASK),r.stencilTest.c=r.STENCIL_WRITEMASK),rr(r),tr(r),t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT|t.STENCIL_BUFFER_BIT),Ue((function(e){if(e.d.b.b){var o,a,i,c,l;if(e.b.id&&e.c.id&&(o=ur(e.b.id,e.c.id),a=r.programs[o]),!a){var u,f;e.b.id?u=r.shaders[e.b.id]:e.b.id=He++,u||(u=ir(t,e.b.src,t.VERTEX_SHADER),r.shaders[e.b.id]=u),e.c.id?f=r.shaders[e.c.id]:e.c.id=He++,f||(f=ir(t,e.c.src,t.FRAGMENT_SHADER),r.shaders[e.c.id]=f);var s=function(n,e,r){var t=n.createProgram();if(n.attachShader(t,e),n.attachShader(t,r),n.linkProgram(t),!n.getProgramParameter(t,n.LINK_STATUS))throw"Link failed: "+n.getProgramInfoLog(t)+"\nvs info-log: "+n.getShaderInfoLog(e)+"\nfs info-log: "+n.getShaderInfoLog(r);return t}(t,u,f);(a={glProgram:s,attributes:Object.assign({},e.b.attributes,e.c.attributes),currentUniforms:{},activeAttributes:[],activeAttributeLocations:[]}).uniformSetters=function(n,e,r,t){var o=r.glProgram,a=r.currentUniforms,i=0,c=e.f;function l(e,r){var t=r.name,o=n.getUniformLocation(e,t);switch(r.type){case n.INT:return function(e){a[t]!==e&&(n.uniform1i(o,e),a[t]=e)};case n.FLOAT:return function(e){a[t]!==e&&(n.uniform1f(o,e),a[t]=e)};case n.FLOAT_VEC2:return function(e){a[t]!==e&&(n.uniform2f(o,e[0],e[1]),a[t]=e)};case n.FLOAT_VEC3:return function(e){a[t]!==e&&(n.uniform3f(o,e[0],e[1],e[2]),a[t]=e)};case n.FLOAT_VEC4:return function(e){a[t]!==e&&(n.uniform4f(o,e[0],e[1],e[2],e[3]),a[t]=e)};case n.FLOAT_MAT4:return function(e){a[t]!==e&&(n.uniformMatrix4fv(o,!1,new Float32Array(e)),a[t]=e)};case n.SAMPLER_2D:var l=i++;return function(e){n.activeTexture(n.TEXTURE0+l);var r=c.textures.get(e);r||(r=e.eI(n),c.textures.set(e,r)),n.bindTexture(n.TEXTURE_2D,r),a[t]!==e&&(n.uniform1i(o,l),a[t]=e)};case n.BOOL:return function(e){a[t]!==e&&(n.uniform1i(o,e),a[t]=e)};default:return function(){}}}for(var u={},f=n.getProgramParameter(o,n.ACTIVE_UNIFORMS),s=0;f>s;s++){var d=n.getActiveUniform(o,s);u[t[d.name]||d.name]=l(o,d)}return u}(t,n,a,Object.assign({},e.b.uniforms,e.c.uniforms));var d=t.getProgramParameter(s,t.ACTIVE_ATTRIBUTES);for(i=0;d>i;i++){var v=t.getActiveAttrib(s,i),m=t.getAttribLocation(s,v.name);a.activeAttributes.push(v),a.activeAttributeLocations.push(m)}o=ur(e.b.id,e.c.id),r.programs[o]=a}r.lastProgId!==o&&(t.useProgram(a.glProgram),r.lastProgId=o),c=a.uniformSetters,Object.keys(l=e.e).forEach((function(n){var e=c[n];e&&e(l[n])}));var b=r.buffers.get(e.d);for(b||(b=function(n,e){if(e.a.dy>0){var r=n.createBuffer(),t=function(n,e){var r,t=new Uint32Array(We(n)*e),o=0;return Ue((function(n){if(1===e)t[o++]=n;else for(r=0;e>r;r++)t[o++]=n[String.fromCharCode(97+r)]}),n),t}(e.c,e.a.dy);return n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,r),n.bufferData(n.ELEMENT_ARRAY_BUFFER,t,n.STATIC_DRAW),{numIndices:t.length,indexBuffer:r,buffers:{}}}return{numIndices:e.a.$7*We(e.b),indexBuffer:null,buffers:{}}}(t,e.d),r.buffers.set(e.d,b)),i=0;a.activeAttributes.length>i;i++){m=a.activeAttributeLocations[i],void 0===b.buffers[(v=a.activeAttributes[i]).name]&&(b.buffers[v.name]=lr(t,v,e.d,a.attributes)),t.bindBuffer(t.ARRAY_BUFFER,b.buffers[v.name]);var p=cr(t,v.type);if(1===p.arraySize)t.enableVertexAttribArray(m),t.vertexAttribPointer(m,p.size,p.baseType,!1,0,0);else for(var g=4*p.size,h=g*p.arraySize,x=0;p.arraySize>x;x++)t.enableVertexAttribArray(m+x),t.vertexAttribPointer(m+x,p.size,p.baseType,!1,h,g*x)}for(r.toggle=!r.toggle,Ue(Bf(r),e.a),i=0;9>i;i++){var C=r[or[i]];C.toggle!==r.toggle&&C.enabled&&(ar[i](r),C.enabled=!1,C.toggle=r.toggle)}b.indexBuffer?(t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,b.indexBuffer),t.drawElements(e.d.a.d3,b.numIndices,t.UNSIGNED_INT,0)):t.drawArrays(e.d.a.d3,0,b.numIndices)}}),n.g),e):e})),sr=t((function(n,e,r){return function(n,e,r,t){return{$:3,d:ue(n),g:e,h:r,i:t}}(e,{g:r,f:{},h:n},hr,xr)})),dr=r((function(n,e){n.contextAttributes.alpha=!0,n.contextAttributes.premultipliedAlpha=e.a})),vr=r((function(n,e){n.contextAttributes.depth=!0,n.sceneSettings.push((function(n){n.clearDepth(e.a)}))})),mr=r((function(n,e){n.contextAttributes.stencil=!0,n.sceneSettings.push((function(n){n.clearStencil(e.a)}))})),br=r((function(n){n.contextAttributes.antialias=!0})),pr=r((function(n,e){n.sceneSettings.push((function(n){n.clearColor(e.a,e.b,e.c,e.d)}))})),gr=r((function(n){n.contextAttributes.preserveDrawingBuffer=!0}));function hr(n){var e={contextAttributes:{alpha:!1,depth:!1,stencil:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1},sceneSettings:[]};Ue((function(n){return u(kf,e,n)}),n.h);var r=Jn.createElement("canvas"),t=r.getContext&&(r.getContext("webgl",e.contextAttributes)||r.getContext("experimental-webgl",e.contextAttributes));return t&&"undefined"!=typeof WeakMap?(e.sceneSettings.forEach((function(n){n(t)})),t.getExtension("OES_standard_derivatives"),t.getExtension("OES_element_index_uint"),n.f.gl=t,n.f.toggle=!1,n.f.blend={enabled:!1,toggle:!1},n.f.depthTest={enabled:!1,toggle:!1},n.f.stencilTest={enabled:!1,toggle:!1},n.f.scissor={enabled:!1,toggle:!1},n.f.colorMask={enabled:!1,toggle:!1},n.f.cullFace={enabled:!1,toggle:!1},n.f.polygonOffset={enabled:!1,toggle:!1},n.f.sampleCoverage={enabled:!1,toggle:!1},n.f.sampleAlphaToCoverage={enabled:!1,toggle:!1},n.f.shaders=[],n.f.programs={},n.f.lastProgId=null,n.f.buffers=new WeakMap,n.f.textures=new WeakMap,n.f.STENCIL_WRITEMASK=t.getParameter(t.STENCIL_WRITEMASK),Oe((function(){return u(fr,n,r)}))):(r=Jn.createElement("div")).innerHTML='<a href="https://get.webgl.org/">Enable WebGL</a> to see this content!',r}function xr(n,e){return e.f=n.f,fr(e)}var Cr=r((function(n,e){return new Float64Array([n,e])}));new Float64Array(3),new Float64Array(3),new Float64Array(3);var Pr=t((function(n,e,r){return new Float64Array([n,e,r])})),Mr=r((function(n,e){return new Float64Array([e[0]*n,e[1]*n,e[2]*n])})),Tr=o((function(n,e,r,t){return new Float64Array([n,e,r,t])}));new Float64Array(16),new Float64Array(16),new Float64Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);var yr=z,Lr=x,wr=t((function(n,e,t){var o=t.c,a=t.d,i=r((function(e,r){return f(Lr,e.$?n:i,r,e.a)}));return f(Lr,i,f(Lr,n,e,a),o)})),Dr=t((function(n,e,r){for(;;){if(-2===r.$)return e;var t=r.d,o=n,a=f(n,r.b,r.c,f(Dr,n,e,r.e));n=o,e=a,r=t}})),Sr=function(n){return f(Dr,t((function(n,e,r){return u(yr,L(n,e),r)})),$,n)},$r=1,Nr=2,zr=0,_r=function(n){return{$:1,a:n}},Rr=r((function(n,e){return{$:3,a:n,b:e}})),Ar=r((function(n,e){return{$:0,a:n,b:e}})),Fr=r((function(n,e){return{$:1,a:n,b:e}})),Vr=function(n){return{$:0,a:n}},kr=function(n){return{$:2,a:n}},Br=function(n){return{$:0,a:n}},Er={$:1},Kr=Pn,jr=Q,Ir=r((function(n,e){return u(X,n,R(e))})),Hr=r((function(n,e){return _(u(q,n,e))})),Ur=t((function(n,e,r){for(;;){if(!r.b)return e;var t=r.b,o=n,a=u(n,r.a,e);n=o,e=a,r=t}})),Wr=function(n){return f(Ur,r((function(n,e){return e+1})),0,n)},Or=A,Gr=t((function(n,e,r){for(;;){if(T(n,e)>=1)return r;var t=n,o=e-1,a=u(yr,e,r);n=t,e=o,r=a}})),Yr=r((function(n,e){return f(Gr,n,e,$)})),qr=r((function(n,e){return f(Or,n,u(Yr,0,Wr(e)-1),e)})),Xr=function(n){var e=n.charCodeAt(0);return 55296>e||e>56319?e:1024*(e-55296)+n.charCodeAt(1)-56320+65536},Zr=function(n){return f(Ur,yr,$,n)},Jr=function(n){var e=n.charCodeAt(0);return isNaN(e)?Er:Br(55296>e||e>56319?L(n[0],n.slice(1)):L(n[0]+n[1],n.slice(2)))},Qr=32,nt=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),et=[],rt=j,tt=r((function(n,e){return W(e)/W(n)})),ot=function(n){return n},at=rt(u(tt,2,Qr)),it=s(nt,0,at,et,et),ct=p,lt=function(n){return{$:1,a:n}},ut=I,ft=function(n){return n.length},st=r((function(n,e){return T(n,e)>0?n:e})),dt=F,vt=g,mt=r((function(n,e){for(;;){var r=u(vt,Qr,n),t=r.b,o=u(yr,{$:0,a:r.a},e);if(!t.b)return Zr(o);n=t,e=o}})),bt=r((function(n,e){for(;;){var r=rt(e/Qr);if(1===r)return u(vt,Qr,n).a;n=u(mt,n,$),e=r}})),pt=r((function(n,e){if(e.l){var r=e.l*Qr,t=ut(u(tt,Qr,r-1)),o=n?Zr(e.z):e.z,a=u(bt,o,e.l);return s(nt,ft(e.p)+r,u(st,5,t*at),a,e.p)}return s(nt,ft(e.p),at,et,e.p)})),gt=a((function(n,e,r,t,o){for(;;){if(0>e)return u(pt,!1,{z:t,l:r/Qr|0,p:o});var a=lt(f(ct,Qr,e,n));n=n,e-=Qr,r=r,t=u(yr,a,t),o=o}})),ht=r((function(n,e){if(n>0){var r=n%Qr;return d(gt,e,n-r-Qr,n,$,f(ct,r,n-r,e))}return it})),xt=function(n){return!n.$},Ct=ln,Pt=an,Mt=tn,Tt=un,yt=fn,Lt=function(n){return{$:0,a:n}},wt=function(n){switch(n.$){case 0:return 0;case 1:return 1;case 2:return 2;default:return 3}},Dt=re("div"),St=function(n){return{$:2,a:n}},$t=function(n){return{$:6,a:n}},Nt=function(n){return{$:4,a:n}},zt=t((function(n,e,r){return e(n(r))})),_t=function(n){return n},Rt=function(n){return n.length},At=Z,Ft=r((function(n,e){return 1>n?e:f(At,n,Rt(e),e)})),Vt=J,kt=yn,Bt=kt(0),Et=o((function(n,e,r,t){if(t.b){var o=t.a,a=t.b;if(a.b){var i=a.a,c=a.b;if(c.b){var l=c.a,d=c.b;if(d.b){var v=d.b;return u(n,o,u(n,i,u(n,l,u(n,d.a,r>500?f(Ur,n,e,Zr(v)):s(Et,n,e,r+1,v)))))}return u(n,o,u(n,i,u(n,l,e)))}return u(n,o,u(n,i,e))}return u(n,o,e)}return e})),Kt=t((function(n,e,r){return s(Et,n,e,0,r)})),jt=r((function(n,e){return f(Kt,r((function(e,r){return u(yr,n(e),r)})),$,e)})),It=wn,Ht=r((function(n,e){return u(It,(function(e){return kt(n(e))}),e)})),Ut=t((function(n,e,r){return u(It,(function(e){return u(It,(function(r){return kt(u(n,e,r))}),r)}),e)})),Wt=function(n){return f(Kt,Ut(yr),kt($),n)},Ot=En,Gt=r((function(n,e){var r=e;return $n(u(It,Ot(n),r))}));Vn.Task=kn(Bt,t((function(n,e){return u(Ht,(function(){return 0}),Wt(u(jt,Gt(n),e)))})),t((function(){return kt(0)})),r((function(n,e){return u(Ht,n,e)})));var Yt=jn("Task"),qt=r((function(n,e){return Yt(u(Ht,n,e))})),Xt=Re,Zt=r((function(n,e){return{$:0,a:n,b:e}})),Jt=function(n){return{$:7,a:n}},Qt=r((function(n,e){return{$:5,a:n,b:e}})),no=r((function(n,e){return{$:3,a:n,b:e}})),eo=In,ro=Hn,to=function(n){return{$:1,a:n}},oo=t((function(n,e,r){return{cF:r,eg:e,el:n}})),ao=kt(f(oo,$,Er,0)),io=function(n){return Ln((function(e){var r=n.f;2===r.$&&r.c&&r.c(),n.f=null,e(yn(0))}))},co=Ln((function(n){n(yn(Date.now()))})),lo=Ln((function(n){var e=Fe((function(){n(yn(Date.now()))}));return function(){Ae(e)}})),uo=Kn,fo=$n,so=t((function(n,e,r){var t=r.eg,o=r.cF,a=L(t,e);return 1===a.a.$?a.b.b?u(It,(function(n){return u(It,(function(r){return kt(f(oo,e,Br(n),r))}),co)}),fo(u(It,uo(n),lo))):ao:a.b.b?kt(f(oo,e,t,o)):u(It,(function(){return ao}),io(a.a.a))})),vo=_t,mo=t((function(n,e,r){var t=r.el,o=r.cF,a=function(r){return u(Ot,n,(0,r.a)(r.$?e-o:vo(e)))};return u(It,(function(n){return u(It,(function(){return kt(f(oo,t,Br(n),e))}),Wt(u(jt,a,t)))}),fo(u(It,uo(n),lo)))})),bo=t((function(n,e,r){return n(e(r))}));Vn["Browser.AnimationManager"]=kn(ao,so,mo,0,r((function(n,e){return e.$?to(u(bo,n,e.a)):{$:0,a:u(bo,n,e.a)}})));var po=jn("Browser.AnimationManager"),go=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),ho=r((function(n,e){return{d8:e,el:n}})),xo={$:-2},Co=xo,Po=kt(u(ho,$,Co)),Mo=function(n){return L(S(n.a?"w_":"d_",n.b),n)},To=a((function(n,e,r,t,o){return{$:-1,a:n,b:e,c:r,d:t,e:o}})),yo=a((function(n,e,r,t,o){if(-1!==o.$||o.a){if(-1!==t.$||t.a||-1!==t.d.$||t.d.a)return d(To,n,e,r,t,o);var a=t.d;return i=t.e,d(To,0,t.b,t.c,d(To,1,a.b,a.c,a.d,a.e),d(To,1,e,r,i,o))}var i,c=o.b,l=o.c,u=o.d,f=o.e;return-1!==t.$||t.a?d(To,n,c,l,d(To,0,e,r,t,u),f):d(To,0,e,r,d(To,1,t.b,t.c,t.d,i=t.e),d(To,1,c,l,u,f))})),Lo=y,wo=t((function(n,e,r){if(-2===r.$)return d(To,0,n,e,xo,xo);var t=r.a,o=r.b,a=r.c,i=r.d,c=r.e;switch(u(Lo,n,o)){case 0:return d(yo,t,o,a,f(wo,n,e,i),c);case 1:return d(To,t,o,e,i,c);default:return d(yo,t,o,a,i,f(wo,n,e,c))}})),Do=t((function(n,e,r){var t=f(wo,n,e,r);return-1!==t.$||t.a?t:d(To,1,t.b,t.c,t.d,t.e)})),So=function(n){return f(Ur,r((function(n,e){return f(Do,n.a,n.b,e)})),Co,n)},$o=t((function(n,e,r){for(;;){if(-2===r.$)return e;var t=r.e,o=n,a=f(n,r.b,r.c,f($o,n,e,r.d));n=o,e=a,r=t}})),No=i((function(n,e,o,a,i,c){var l=f($o,t((function(r,t,a){n:for(;;){var i=a.a,c=a.b;if(i.b){var l=i.a,u=l.a,d=l.b,v=i.b;if(0>T(u,r)){r=r,t=t,a=L(v,f(n,u,d,c));continue n}return T(u,r)>0?L(i,f(o,r,t,c)):L(v,s(e,u,d,t,c))}return L(i,f(o,r,t,c))}})),L(Sr(a),c),i),u=l.a,d=l.b;return f(Ur,r((function(e,r){return f(n,e.a,e.b,r)})),d,u)})),zo=r((function(n,e){return{ds:e,dA:n}})),_o=t((function(n,e,r){return u(Ht,(function(n){return L(e,n)}),f(Ee,r.a?Be:ke,r.b,(function(r){return u(uo,n,u(zo,e,r))})))})),Ro=r((function(n,e){return f($o,Do,e,n)})),Ao=t((function(n,e,r){var a=t((function(e,r,t){var o=t.c;return w(t.a,t.b,u(yr,f(_o,n,e,r),o))})),i=t((function(n,e,r){var t=r.b,o=r.c;return w(u(yr,e,r.a),t,o)})),c=o((function(n,e,r,t){var o=t.c;return w(t.a,f(Do,n,e,t.b),o)})),l=u(jt,Mo,e),s=v(No,i,c,a,r.d8,So(l),w($,Co,$)),d=s.b,m=s.c;return u(It,(function(n){return kt(u(ho,l,u(Ro,d,So(n))))}),u(It,(function(){return Wt(m)}),Wt(u(jt,io,s.a))))})),Fo=t((function(n,e,r){var t=n(e);return t.$?r:u(yr,t.a,r)})),Vo=r((function(n,e){return f(Kt,Fo(n),$,e)}));Vn["Browser.Events"]=kn(Po,Ao,t((function(n,e,r){var t=e.dA,o=e.ds,a=u(Vo,(function(n){var e=n.b.c;return P(n.a,t)?u(Ke,e,o):Er}),r.el);return u(It,(function(){return kt(r)}),Wt(u(jt,Ot(n),a)))})),0,r((function(n,e){return f(go,e.a,e.b,u(Tt,n,e.c))})));var ko,Bo,Eo,Ko,jo,Io,Ho,Uo,Wo,Oo,Go,Yo,qo,Xo,Zo,Jo,Qo,na,ea,ra,ta,oa,aa,ia,ca,la,ua,fa,sa,da,va,ma,ba,pa,ga,ha,xa,Ca=jn("Browser.Events"),Pa=t((function(n,e,r){return Ca(f(go,n,e,r))})),Ma=u(Pa,0,"click"),Ta=u(Pa,0,"keydown"),ya=u(Pa,0,"keyup"),La=u(Pa,0,"mousedown"),wa=u(Pa,0,"mousemove"),Da=u(Pa,0,"mouseup"),Sa=en,$a=rn,Na=r((function(n,e){return n(e?1:0)})),za=function(n){var e=void 0!==Jn.hidden?{e_:"hidden",eH:"visibilitychange"}:void 0!==Jn.mozHidden?{e_:"mozHidden",eH:"mozvisibilitychange"}:void 0!==Jn.msHidden?{e_:"msHidden",eH:"msvisibilitychange"}:void 0!==Jn.webkitHidden?{e_:"webkitHidden",eH:"webkitvisibilitychange"}:{e_:"hidden",eH:"visibilitychange"};return f(Pa,0,e.eH,u(Tt,Na(n),u(Pt,"target",u(Pt,e.e_,$a))))},_a=on,Ra=function(n){return{$:3,b:n}},Aa=qn("touchCancel",Ra(u(Ct,(function(n){return u(Ct,(function(e){return u(Ct,(function(r){return Lt({bi:r,cH:e,cI:n})}),u(Pt,"identifier",Sa))}),u(Pt,"pageX",Mt))}),u(Pt,"pageY",Mt)))),Fa=qn("touchEnd",Ra(u(Ct,(function(n){return u(Ct,(function(e){return u(Ct,(function(r){return Lt({bi:r,cH:e,cI:n})}),u(Pt,"identifier",Sa))}),u(Pt,"pageX",Mt))}),u(Pt,"pageY",Mt)))),Va=qn("touchMove",Ra(u(Ct,(function(n){return u(Ct,(function(e){return u(Ct,(function(r){return Lt({bi:r,cH:e,cI:n})}),u(Pt,"identifier",Sa))}),u(Pt,"pageX",Mt))}),u(Pt,"pageY",Mt)))),ka=qn("touchStart",Ra(u(Ct,(function(n){return u(Ct,(function(e){return u(Ct,(function(r){return Lt({bi:r,cH:e,cI:n})}),u(Pt,"identifier",Sa))}),u(Pt,"pageX",Mt))}),u(Pt,"pageY",Mt)))),Ba=eo(u(jt,ro($t),_([(ko=no,f(Pa,1,"resize",u(Pt,"target",f(yt,ko,u(Pt,"innerWidth",Sa),u(Pt,"innerHeight",Sa))))),ya(u(Tt,Zt(!1),u(Pt,"key",_a))),Ta(u(Tt,Zt(!0),u(Pt,"key",_a))),(xa=u(zt,dt(.001),(function(n){return{$:1,a:n}})),po(to(xa))),za(Nt),Ma(Lt({$:6})),La(Lt(Jt(!0))),Da(Lt(Jt(!1))),wa(f(yt,Qt,u(Pt,"pageX",Mt),u(Pt,"pageY",Mt))),ka((function(n){return{$:8,a:n}})),Va((function(n){return{$:9,a:n}})),Fa((function(n){return{$:10,a:n}})),Aa((function(n){return{$:11,a:n}}))]))),Ea=o((function(n,e,r,t){return{cf:t,aP:r,bC:n,bD:e}})),Ka=Co,ja={b9:!1,aP:!1,ck:!1,M:Ka,ag:!1,a_:!1,c$:!1,c0:!1,b5:!1},Ia=r((function(n,e){return D(e,{cf:n})})),Ha=r((function(n,e){return D(e,{aP:n})})),Ua=t((function(n,e,r){return D(r,{bC:n,bD:e})})),Wa=function(n){if(-1===n.$&&-1===n.d.$&&-1===n.e.$){if(-1!==n.e.d.$||n.e.d.a){var e=n.d,r=n.e;return i=r.b,c=r.c,t=r.d,f=r.e,d(To,1,n.b,n.c,d(To,0,e.b,e.c,e.d,e.e),d(To,0,i,c,t,f))}var t,o=n.d,a=n.e,i=a.b,c=a.c,l=(t=a.d).d,u=t.e,f=a.e;return d(To,0,t.b,t.c,d(To,1,n.b,n.c,d(To,0,o.b,o.c,o.d,o.e),l),d(To,1,i,c,u,f))}return n},Oa=function(n){if(-1===n.$&&-1===n.d.$&&-1===n.e.$){if(-1!==n.d.d.$||n.d.d.a){var e=n.d,r=n.e;return u=r.b,f=r.c,s=r.d,v=r.e,d(To,1,t=n.b,o=n.c,d(To,0,e.b,e.c,e.d,c=e.e),d(To,0,u,f,s,v))}var t=n.b,o=n.c,a=n.d,i=a.d,c=a.e,l=n.e,u=l.b,f=l.c,s=l.d,v=l.e;return d(To,0,a.b,a.c,d(To,1,i.b,i.c,i.d,i.e),d(To,1,t,o,c,d(To,0,u,f,s,v)))}return n},Ga=c((function(n,e,r,t,o,a,i){if(-1!==a.$||a.a){n:for(;;){if(-1===i.$&&1===i.a){if(-1===i.d.$){if(1===i.d.a)return Oa(e);break n}return Oa(e)}break n}return e}return d(To,r,a.b,a.c,a.d,d(To,0,t,o,a.e,i))})),Ya=function(n){if(-1===n.$&&-1===n.d.$){var e=n.a,r=n.b,t=n.c,o=n.d,a=o.d,i=n.e;if(1===o.a){if(-1!==a.$||a.a){var c=Wa(n);if(-1===c.$){var l=c.e;return d(yo,c.a,c.b,c.c,Ya(c.d),l)}return xo}return d(To,e,r,t,Ya(o),i)}return d(To,e,r,t,Ya(o),i)}return xo},qa=r((function(n,e){if(-2===e.$)return xo;var r=e.a,t=e.b,o=e.c,a=e.d,i=e.e;if(0>T(n,t)){if(-1===a.$&&1===a.a){var c=a.d;if(-1!==c.$||c.a){var l=Wa(e);if(-1===l.$){var f=l.e;return d(yo,l.a,l.b,l.c,u(qa,n,l.d),f)}return xo}return d(To,r,t,o,u(qa,n,a),i)}return d(To,r,t,o,u(qa,n,a),i)}return u(Xa,n,m(Ga,n,e,r,t,o,a,i))})),Xa=r((function(n,e){if(-1===e.$){var r=e.a,t=e.b,o=e.c,a=e.d,i=e.e;if(P(n,t)){var c=function(n){for(;;){if(-1!==n.$||-1!==n.d.$)return n;n=n.d}}(i);return-1===c.$?d(yo,r,c.b,c.c,a,Ya(i)):xo}return d(yo,r,t,o,a,u(qa,n,i))}return xo})),Za=r((function(n,e){var r=u(qa,n,e);return-1!==r.$||r.a?r:d(To,1,r.b,r.c,r.d,r.e)})),Ja=r((function(n,e){return{dh:-e/2,cm:e,ag:-n/2,a_:n/2,bx:e/2,c9:n}})),Qa=r((function(n,e){return f(Do,n,0,e)})),ni=r((function(n,e){return u(Za,n,e)})),ei=t((function(n,e,r){var t=u(n?Qa:ni,e,r.M);switch(e){case" ":return D(r,{M:t,c0:n});case"Enter":return D(r,{ck:n,M:t});case"Shift":return D(r,{M:t,c$:n});case"Backspace":return D(r,{b9:n,M:t});case"ArrowUp":return D(r,{M:t,b5:n});case"ArrowDown":return D(r,{aP:n,M:t});case"ArrowLeft":return D(r,{M:t,ag:n});case"ArrowRight":return D(r,{M:t,a_:n});default:return D(r,{M:t})}})),ri=r((function(n,e){switch(n.$){case 1:var r=n.a;return D(e,e.G.cf?{G:u(Ia,!1,e.G),a1:e.a1+r}:{a1:e.a1+r});case 2:var t=n.a.fB;return D(e,{aa:u(Ja,t.c9,t.cm)});case 3:return D(e,{aa:u(Ja,n.a,n.b)});case 0:return D(e,{bj:f(ei,n.a,n.b,e.bj)});case 5:return D(e,{G:f(Ua,e.aa.ag+n.a,e.aa.bx-n.b,e.G)});case 6:return D(e,{G:u(Ia,!0,e.G)});case 7:return D(e,{G:u(Ha,n.a,e.G)});case 8:case 9:return D(e,{ab:f(Ur,(function(n){return u(Do,n.bi,{bC:e.aa.ag+n.cH,bD:e.aa.bx-n.cI})}),e.ab,n.a)});case 10:case 11:return D(e,{ab:f(Ur,(function(n){return Za(n.bi)}),e.ab,n.a)});default:return D(e,{bj:ja,G:s(Ea,e.G.bC,e.G.bD,!1,!1)})}})),ti=r((function(n,e){return{P:e,U:n}})),oi=f(yt,r((function(n,e){return L(n,e)})),u(Pt,"A1",_a),u(Pt,"A2",_a)),ai=sn,ii=s(ai,t((function(n,e,r){return w(n,e,r)})),u(Pt,"A1",Mt),u(Pt,"A2",Mt),u(Pt,"A3",Mt)),ci=f(yt,r((function(n,e){return L(n,e)})),u(Pt,"A1",_a),u(Pt,"A2",ii)),li=f(yt,ti,u(Pt,"floats",Ra(ci)),u(Pt,"colors",Ra(oi))),ui=dn,fi=r((function(n,e){return{P:e,aD:"",U:n,aq:""}})),si=u(fi,$,$),di=r((function(n,e){return e.$?Er:n(e.a)})),vi=r((function(n,e){return e.$?_r(e.a):n(e.a)})),mi=o((function(n,e,r,t){return{e0:e,e8:n,fe:r,fr:t}})),bi=Ie,pi=r((function(n,e){return e.$?_r(n):Vr(e.a)})),gi=je,hi=function(n){return n.b?Br(n.a):Er},xi=r((function(n,e){return e.$?Er:Br(n(e.a))})),Ci=r((function(n,e){return e.$?_r(e.a):Vr(n(e.a))})),Pi=r((function(n,e){return Xr(e)-Xr(n)})),Mi=t((function(n,e,r){var t=Xr(r);return 1>T(Xr(n),t)&&1>T(t,Xr(e))})),Ti=r((function(n,e){var r=f(Mi,"0","9",e)?Vr(u(Pi,"0",e)):f(Mi,"a","z",e)?Vr(10+u(Pi,"a",e)):f(Mi,"A","Z",e)?Vr(10+u(Pi,"A",e)):_r({$:0,a:e});return u(vi,(function(r){return 0>T(r,n)?Vr(r):_r({$:1,a:e})}),r)})),yi=r((function(n,e){var r=Jr(e);if(1===r.$)return Vr(0);var t=r.a,o=t.b;return u(vi,(function(e){return u(vi,(function(r){return Vr(e+r*n)}),u(yi,n,o))}),u(Ti,n,t.a))})),Li=function(n){for(var e=n.length,r=Array(e),t=0;e>t;){var o=n.charCodeAt(t);55296>o||o>56319?(r[e-t]=n[t],t++):(r[e-t]=n[t+1],r[e-++t]=n[t-1],t++)}return r.join("")},wi=r((function(n,e){return 2>n||n>36?_r({$:2,a:n}):u(yi,n,Li(e))})),Di=wi(16),Si=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),$i=t((function(n,e,r){return s(Si,n,e,r,1)})),Ni=o((function(n,e,r,t){return s(Si,n,e,r,t)})),zi=V,_i=H,Ri=r((function(n,e){var r=u(zi,10,n);return _i(e*r)/r})),Ai=Y,Fi=function(n){return f(Ai,yr,$,n)},Vi=(Bo=function(n){var e=Fi(n);if(e.b&&!e.b.b){var r=e.a;return R(_([r,r])).join("")}return n},u(zt,(function(n){return n.toLowerCase()}),u(zt,(function(n){return u(xi,(function(e){return f(bi,1,e,n)}),u(gi,{eE:!1,fa:!1},"^#?(?:(?:([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2}))|(?:([a-f\\d])([a-f\\d])([a-f\\d]))|(?:([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2}))|(?:([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d])))$"))}),u(zt,di(hi),u(zt,xi((function(n){return n.fr})),u(zt,xi(Vo(_t)),u(zt,pi("Parsing hex regex failed"),vi((function(n){var e=u(jt,u(zt,Bo,u(zt,Di,Ci(ot))),n);n:for(;;){if(e.b&&!e.a.$&&e.b.b&&!e.b.a.$&&e.b.b.b&&!e.b.b.a.$){if(e.b.b.b.b){if(e.b.b.b.a.$||e.b.b.b.b.b)break n;var r=e.b,t=r.b;return Vr(s(Ni,e.a.a/255,r.a.a/255,t.a.a/255,u(Ri,2,t.b.a.a/255)))}var o=e.b;return Vr(f($i,e.a.a/255,o.a.a/255,o.b.a.a/255))}break n}return _r("Parsing ints from hex failed")}))))))))),ki=r((function(n,e){return L(e.a,n(e.b))})),Bi=s(Si,1,1,1,1),Ei=r((function(n,e){return e.$?n:e.a})),Ki=u(zt,ui(li),u(zt,Ci((function(n){return{P:u(jt,ki(u(zt,Vi,Ei(Bi))),n.P),aD:"",U:n.U,aq:""}})),Ei(si))),ji=function(n){return f(Ur,r((function(n,e){return f(Tn,n.a,n.b,e)})),{},n)},Ii=Mn,Hi=function(n){var e=n.b;return ji(_([L("A1",Ii(n.a)),L("A2",Ii(e))]))},Ui=Mn,Wi=function(n){var e=n.b,r=n.c;return ji(_([L("A1",Ui(n.a)),L("A2",Ui(e)),L("A3",Ui(r))]))},Oi=function(n){var e=n.b;return ji(_([L("A1",Ii(n.a)),L("A2",Wi(e))]))},Gi=r((function(n,e){return f(Ur,function(n){return r((function(e,r){return r.push(n(e)),r}))}(n),[],e)})),Yi=G,qi=function(n){return u(Yi,n,"")},Xi=t((function(n,e,r){return n>0?f(Xi,n>>1,S(e,e),1&n?S(r,e):r):r})),Zi=r((function(n,e){return f(Xi,n,e,"")})),Ji=t((function(n,e,r){return S(u(Zi,n-Rt(r),qi(e)),r)})),Qi=function(n){return 0>n||n>1114111?"�":n>65535?String.fromCharCode(Math.floor((n-=65536)/1024)+55296,n%1024+56320):String.fromCharCode(n)},nc=k,ec=function(n){var e=function(n){return 10>n?jr(n):qi(Qi(87+n))};return 16>n?e(n):S(ec(n/16|0),e(u(nc,16,n)))},rc=u(zt,ec,u(Ji,2,"0")),tc=function(n){return{aO:n.d,cd:n.c,cl:n.b,cU:n.a}},oc=function(n){var e=tc(n),r=e.cU,t=e.cl,o=e.cd;return u(Ir,"",u(yr,"#",u(jt,u(zt,_i,rc),_([255*r,255*t,255*o]))))},ac=u(zt,(function(n){return{P:u(jt,ki(oc),n.P),U:n.U}}),u(zt,(function(n){return ji(_([L("floats",u(Gi,Oi,n.U)),L("colors",u(Gi,Hi,n.P))]))}),Kr(0))),ic=function(n){return 0>n?-n:n},cc=function(n){if(0===n.length||/[\sxbo]/.test(n))return Er;var e=+n;return e==e?Br(e):Er},lc=r((function(n,e){return e.$?n:e.a})),uc=t((function(n,e,r){return u(lc,NaN,cc(u(n,e,r)))})),fc=function(n){return!n},sc=r((function(n,e){for(;;){if(!e.b)return!1;var r=e.b;if(n(e.a))return!0;n=n,e=r}})),dc=r((function(n,e){var r=u(sc,(function(n){return"0"!==n&&"."!==n}),Fi(e));return S(n&&r?"-":"",e)})),vc=Q,mc=function(n){var e=n.a,r=n.b;if("9"===e){var t=Jr(r);return 1===t.$?"01":u(Yi,"0",mc(t.a))}var o=Xr(e);return o>=48&&57>o?u(Yi,Qi(o+1),r):"0"},bc=function(n){return n===1/0||n===-1/0},pc=O,gc=t((function(n,e,r){return S(r,u(Zi,n-Rt(r),qi(e)))})),hc=function(n){var e=u(Hr,".",n);return e.b?L(e.a,e.b.b?e.b.a:"0"):L("0","0")},xc=r((function(n,e){var r=e.b;return L(n(e.a),r)})),Cc=t((function(n,e,r){if(bc(r)||pc(r))return vc(r);var t=0>r,o=hc(function(n){var e=u(Hr,"e",vc(ic(n)));if(e.b){if(e.b.b){var r=e.a,t=e.b.a,o=u(lc,0,function(n){for(var e=0,r=n.charCodeAt(0),t=43==r||45==r?1:0,o=t;n.length>o;++o){var a=n.charCodeAt(o);if(48>a||a>57)return Er;e=10*e+a-48}return o==t?Er:Br(45==r?-e:e)}(u(Vt,"+",t)?u(Ft,1,t):t)),a=hc(r),i=S(a.a,a.b),c=0>o?u(lc,"0",u(xi,(function(n){return n.a+"."+n.b}),u(xi,xc(qi),Jr(S(u(Zi,ic(o),"0"),i))))):f(gc,o+1,"0",i);return S(0>n?"-":"",c)}return S(0>n?"-":"",r=e.a)}return""}(ic(r))),a=o.a,i=o.b,c=Rt(a)+e,l=S(u(Zi,1-c,"0"),f(gc,c,"0",S(a,i))),s=Rt(l),d=u(st,1,c),v=u(n,t,f(At,d,s,l)),m=f(At,0,d,l),b=v?Li(u(lc,"1",u(xi,mc,Jr(Li(m))))):m,p=Rt(b),g="0"===b?b:e>0?0>T(e,Rt(i))?f(At,0,p-e,b)+"."+f(At,p-e,p,b):S(a+".",f(gc,e,"0",i)):S(b,u(Zi,ic(e),"0"));return u(dc,t,g)})),Pc=Cc(r((function(n,e){var r,t=Jr(e);return 1!==t.$&&("5"===t.a.a?""!==t.a.b||!n:(r=Xr(t.a.a))>53&&n||r>=53&&!n)}))),Mc=uc(Pc),Tc=t((function(n,e,r){var t=u(tt,10,ic(e-n));return u(Mc,0>t?3:1>t?2:2>t?1:0,r)})),yc=r((function(n,e){switch(n.$){case 2:var r=Ki(e.aq);return D(r,{aD:r.aD,aq:r.aq});case 3:return D(e,{aq:n.a});case 4:return D(e,{aD:ac(e)});case 0:var t=n.a,o=n.b;return D(e,{U:u(jt,(function(n){var e=n.a,r=n.b,a=r.a,i=r.c;return P(e,t)?L(e,w(a,f(Tc,a,i,o),i)):n}),e.U)});default:return t=n.a,o=n.b,D(e,{P:u(jt,(function(n){var e=n.a;return P(e,t)?L(e,o):n}),e.P)})}})),Lc=o((function(n,e,r,t){var o=t.F;switch(r.$){case 0:return t;case 1:return D(t,{a5:r.a});case 2:return D(t,{bc:!1});case 3:return D(t,{bc:!0});case 4:return D(t,{af:f(e,t.F,r.a,t.af)});case 5:return D(t,{F:D(o,{bM:u(yc,r.a,o.bM)})});default:var a=r.a,i=1===a.$?u(n,o,t.af):t.af;return D(t,{F:u(ri,a,t.F),af:i})}})),wc=(ha=function(){return{ei:(n=ke.body,e=ke.documentElement,{c9:Math.max(n.scrollWidth,n.offsetWidth,e.scrollWidth,e.offsetWidth,e.clientWidth),cm:Math.max(n.scrollHeight,n.offsetHeight,e.scrollHeight,e.offsetHeight,e.clientHeight)}),fB:{bC:Be.pageXOffset,bD:Be.pageYOffset,c9:ke.documentElement.clientWidth,cm:ke.documentElement.clientHeight}};var n,e},Ln((function(n){Fe((function(){n(yn(ha()))}))}))),Dc=r((function(n,e){return{bM:e,cj:n.cj,bj:ja,G:s(Ea,0,0,!1,!1),aa:u(Ja,600,600),a1:0,ab:Co}})),Sc=In,$c=Sc($),Nc=function(n){return{$:5,a:n}},zc=function(n){return{$:4,a:n}},_c={$:2},Rc={$:0},Ac=function(n){return{$:1,a:n}},Fc={$:3},Vc=r((function(n){return n})),kc=re("button"),Bc=function(n){return n?"Level Editor":"Configurations"},Ec=function(n){return u(lc,0,hi(u(Vo,(function(e){return P(Bc(e),n)?Br(e):Er}),_([0,1]))))},Kc=oe,jc=Kc,Ic=ae,Hc=r((function(n,e){return u(Ic,n,{$:0,a:e})})),Uc=r((function(n,e){return f(Kt,Pt,e,n)})),Wc=u(Uc,_(["target","value"]),_a),Oc=function(n){return u(Hc,"click",Lt(n))},Gc=re("option"),Yc=re("select"),qc=ie,Xc=qc,Zc=ne,Jc=Zc,Qc=r((function(n,e){return u(ce,n,Ii(e))})),nl=Qc("value"),el=r((function(n,e){return{$:1,a:n,b:e}})),rl=r((function(n,e){return{$:0,a:n,b:e}})),tl=s(Si,0,0,0,1),ol=u(kc,_([u(Xc,"cursor","pointer"),Oc({$:4})]),_([Jc("Export Configurations as json")])),al=re("h3"),il=re("p"),cl=Mn,ll=r((function(n,e){return u(ce,n,cl(e))})),ul=ll("readOnly"),fl=re("textarea"),sl=function(n){return u(Dt,$,_([u(fl,_([ul(!0)]),_([Jc(n.aD)]))]))},dl=function(n){return u(Dt,$,_([u(al,$,_([Jc("Export Configurations")])),u(il,$,_([ol])),u(il,$,_([sl(n)]))]))},vl=Qc("htmlFor"),ml=re("hr"),bl=Qc("id"),pl=u(kc,_([u(Xc,"cursor","pointer"),Oc({$:2})]),_([Jc("Import Configurations")])),gl=function(n){return{$:3,a:n}},hl=function(n){return L(n,!0)},xl=r((function(n,e){return u(Ic,n,{$:1,a:e})})),Cl=function(n){return u(xl,"input",u(Tt,hl,u(Tt,n,Wc)))},Pl=function(n){return u(Dt,$,_([u(fl,_([Cl(gl)]),_([Jc(n.aq)]))]))},Ml=function(n){return u(Dt,$,_([u(al,$,_([Jc("Import Configurations")])),u(il,$,_([Pl(n)])),u(il,$,_([pl]))]))},Tl=re("input"),yl=re("label"),Ll=Qc("max"),wl=Qc("min"),Dl=Qc("name"),Sl=re("span"),$l=Qc("type"),Nl=t((function(n,e,t){var o,a,i,c,l=u(Dt,_([u(Xc,"position","fixed"),u(Xc,"top","0px"),u(Xc,"left","0px"),u(Xc,"width",vc(t.F.aa.c9)+"px"),u(Xc,"height",vc(t.F.aa.cm)+"px"),u(Xc,"font-size","16px")]),_([u(jc,Vc(Rc),u(n,t.F,t.af))])),f=t.a5?u(jc,zc,u(e,t.F,t.af)):u(jc,Nc,(o=t.F.bM,a=function(n){var e=n.a,r=n.b,t=r.a,o=r.b,a=r.c;return u(Dt,_([u(Xc,"margin-top","15px")]),_([u(Dt,$,_([u(yl,_([vl(e)]),_([Jc(e),Jc(": "),u(Sl,_([u(Xc,"font-family","monospace"),u(Xc,"font-weight","bold")]),_([Jc(vc(o))]))]))])),u(Tl,_([$l("range"),bl(e),Dl(e),wl(vc(t)),Ll(vc(a)),Cl((function(n){return u(rl,e,u(lc,0,cc(n)))})),u(Qc,"step","any"),u(Xc,"width","200px"),nl(vc(o))]),$)]))},i=function(n){var e=n.a,r=n.b;return u(Dt,_([u(Xc,"margin-top","15px")]),_([u(Dt,$,_([u(yl,_([vl(e)]),_([Jc(e)]))])),u(Tl,_([$l("color"),u(Xc,"width","200px"),u(Xc,"height","30px"),bl(e),Dl(e),Cl((function(n){return u(el,e,u(Ei,tl,Vi(n)))})),nl(oc(r))]),$)]))},u(Dt,_([u(Xc,"margin-left","20px"),u(Xc,"height","100%"),u(Xc,"overflow","scroll")]),_([u(Dt,$,u(jt,a,o.U)),u(Dt,$,u(jt,i,o.P)),u(ml,$,$),dl(o),Ml(o)])))),s=u(Dt,_([u(Xc,"margin-left","0px")]),_([u(Yc,_([(c=u(zt,Ec,Ac),u(Hc,"change",u(Tt,c,Wc))),nl(Bc(t.a5)),u(Xc,"width","200px"),u(Xc,"height","40px"),u(Xc,"font-size","20px")]),u(jt,(function(n){return u(Gc,_([nl(Bc(n))]),_([Jc(Bc(n))]))}),_([0,1])))])),d=r((function(n,e){return u(kc,_([u(Xc,"font-size","30px"),u(Xc,"width","40px"),u(Xc,"height","40px"),Oc(n)]),_([Jc(e)]))})),v=u(Dt,_([u(Xc,"position","fixed"),u(Xc,"top","0px"),u(Xc,"left","0px"),u(Xc,"width",vc(250)+"px"),u(Xc,"height",vc(t.F.aa.cm)+"px"),u(Xc,"font-family",'-apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif'),u(Xc,"font-size","16px")]),_(t.bc?[u(Dt,_([u(Xc,"height","100px")]),_([u(d,_c,"✕"),s])),u(Dt,_([u(Xc,"height",vc(t.F.aa.cm-100)+"px")]),_([f]))]:[u(d,Fc,"≡")]));return u(Dt,_([u(Xc,"touch-action","none"),u(Xc,"user-select","none")]),_([l,v]))})),zl=i((function(n,e,t,o,a,i){return Xt({e1:function(n){var e=u(Dc,n,t);return L({a5:0,F:e,bc:!1,af:o(e),c8:0},u(qt,u(zt,St,$t),wc))},fs:function(n){return 1===n.c8?u(ro,$t,za(Nt)):Ba},fy:r((function(n,r){return L(s(Lc,e,i,n,r),$c)})),fA:u(Nl,n,a)})})),_l=o((function(n,e,o,a){return v(zl,n,e,o,a,r((function(){return u(Dt,$,$)})),t((function(n,e,r){return r})))})),Rl=fi,Al=Rl,Fl=o((function(n,e,r,t){var o=w(n,e,r),a=o.a,i=o.b,c=o.c,l=c>.5?c+i-c*i:c*(i+1),u=2*c-l,f=function(n){var e=0>n?n+1:n>1?n-1:n;return 1>6*e?u+(l-u)*e*6:1>2*e?l:2>3*e?u+(l-u)*(2/3-e)*6:u},d=f(a-1/3),v=f(a),m=f(a+1/3);return s(Si,m,v,d,t)})),Vl=t((function(n,e,r){return s(Fl,n,e,r,1)})),kl=3.141592653589793,Bl=u(Al,_([L("camera distance",w(3,50,60)),L("camera azimuth",w(0,0,6.283185307179586)),L("camera elevation",w(-1.5707963267948966,.5,1.5707963267948966)),L("delay per index",w(0,.15,1)),L("number of spheres",w(10,50,100)),L("saturation",w(0,.5,1)),L("lighting",w(0,.7,1))]),_([L("background color",f(Vl,.85,.32,.45))])),El=r((function(n,e){return e})),Kl=r((function(n,e){return u(lc,0,hi(u(Vo,(function(e){var r=e.b.b;return P(e.a,n)?Br(r):Er}),e.U)))})),jl=r((function(n,e){return u(Kl,n,e.bM)})),Il=jl,Hl=function(n){return kl*(n/180)},Ul=function(n){return-n},Wl=r((function(n,e){return{bC:n.bD*e.fK-n.fK*e.bD,bD:n.fK*e.bC-n.bC*e.fK,fK:n.bC*e.bD-n.bD*e.bC}})),Ol=function(n){return n.db},Gl=function(n){return n.dc},Yl=function(n){return n.cG},ql=B,Xl=E,Zl=t((function(n,e,r){var t=n,o=r,a=.5*e,i=ql(a),c=Xl(a),l=t.eK,u=l.bC*c,f=i*u,s=u*u,d=l.bD*c,v=i*d,m=u*d,b=d*d,p=l.fK*c,g=i*p,h=u*p,x=d*p,C=p*p;return{bC:(1-2*(b+C))*o.bC+2*(m-g)*o.bD+2*(h+v)*o.fK,bD:2*(m+g)*o.bC+(1-2*(s+C))*o.bD+2*(x-f)*o.fK,fK:2*(h-v)*o.bC+2*(x+f)*o.bD+(1-2*(s+b))*o.fK}})),Jl=t((function(n,e,r){var t=n,o=r,a=.5*e,i=ql(a),c=Xl(a),l=t.cG,u=o.bC-l.bC,f=o.bD-l.bD,s=o.fK-l.fK,d=t.eK,v=d.bC*c,m=i*v,b=v*v,p=d.bD*c,g=i*p,h=v*p,x=p*p,C=d.fK*c,P=i*C,M=v*C,T=p*C,y=C*C;return{bC:l.bC+(1-2*(x+y))*u+2*(h-P)*f+2*(M+g)*s,bD:l.bD+2*(h+P)*u+(1-2*(b+y))*f+2*(T-m)*s,fK:l.fK+2*(M-g)*u+2*(T+m)*f+(1-2*(b+x))*s}})),Ql=function(n){return n.db},nu=function(n){return n.dc},eu=function(n){return n.dd},ru=t((function(n,e,r){return{cG:f(Jl,n,e,Yl(r)),db:f(Zl,n,e,Ql(r)),dc:f(Zl,n,e,nu(r)),dd:f(Zl,n,e,eu(r))}})),tu=t((function(n,e,r){return f(ru,n(r),e,r)})),ou=function(n){return n.eK},au=r((function(n,e){return{bC:e.bC+n.bC,bD:e.bD+n.bD,fK:e.fK+n.fK}})),iu=r((function(n,e){return{cG:u(au,n,Yl(e)),db:Ql(e),dc:nu(e),dd:eu(e)}})),cu=r((function(n,e){return{bC:n*e.bC,bD:n*e.bD,fK:n*e.fK}})),lu=t((function(n,e,r){return u(iu,u(cu,e,n),r)})),uu=t((function(n,e,r){return f(lu,ou(n(r)),e,r)})),fu=r((function(n,e){return{eK:e,cG:n}})),su=function(n){return u(fu,n.cG,n.db)},du=function(n){return u(fu,n.cG,n.dc)},vu=function(n){return u(fu,n.cG,n.dd)},mu=function(n){return ic(n)},bu=function(n){return.5*n},pu=K,gu={bC:0,bD:0,fK:0},hu=_t,xu={bC:1,bD:0,fK:0},Cu={bC:0,bD:0,fK:1},Pu=Cu,Mu=hu({cG:gu,db:Pu,dc:xu}),Tu=function(n){return a=(e={ez:u(Il,"camera azimuth",n),eL:u(Il,"camera distance",n),eO:u(Il,"camera elevation",n),eU:{bC:0,bD:0,fK:0}}).eU,i=e.ez,c=e.eO,l=e.eL,function(n){var e,r=bu(mu(n.er));return{cT:(e=pu(r),{$:0,a:e}),c7:n.c7}}({er:Hl(40),c7:(r={ez:i,eL:l,eO:c,eU:a,dv:Mu},o={cG:r.eU,db:Gl(r.dv),dc:(t=r.dv,u(Wl,Ol(t),Gl(t))),dd:Ol(r.dv)},f(uu,vu,r.eL,f(tu,su,Ul(r.eO),f(tu,du,r.ez,o))))});var e,r,t,o,a,i,c,l},yu=function(n){return n*kl/180},Lu=r((function(n,e){return u(lc,tl,hi(u(Vo,(function(e){var r=e.b;return P(e.a,n)?Br(r):Er}),e.P)))})),wu=r((function(n,e){return u(Lu,n,e.bM)})),Du=wu,Su=r((function(n,e){return{$:0,a:n,b:e}})),$u=r((function(n,e){return{$:2,a:n,b:e}})),Nu=function(n){return{$:5,a:n}},zu=r((function(n,e){return{$:4,a:n,b:e}})),_u=r((function(n,e){return{$:3,a:n,b:e}})),Ru=r((function(n,e){return{$:1,a:n,b:e}})),Au=function(n){return n.ey},Fu=function(n){return n.dn},Vu=t((function(n,e,r){return{ey:f(ru,n,e,Au(r)),dn:Fu(r)}})),ku=r((function(n,e){var r=u(Jl,n,e),t=u(Zl,n,e);return function(n){var e=n;return u(fu,r(e.cG),t(e.eK))}})),Bu=t((function(n,e,r){var t=r;return{k:f(ku,n,e,t.k),e5:t.e5,fj:t.fj}})),Eu=r((function(n,e){var r=e.b;return L(n(e.a),n(r))})),Ku=t((function(n,e,r){return u(Eu,u(Jl,n,e),r)})),ju=function(n){return n.eG},Iu=function(n){return n.fj},Hu=r((function(n,e){return{eG:e,fj:mu(n)}})),Uu=t((function(n,e,r){return u(Hu,Iu(r),f(Jl,n,e,ju(r)))})),Wu=r((function(n,e){var r=e.b,t=e.c;return w(n(e.a),n(r),n(t))})),Ou=t((function(n,e,r){return u(Wu,u(Jl,n,e),r)})),Gu=t((function(n,e,r){switch(r.$){case 0:return u(Su,r.a,f(Vu,n,e,r.b));case 1:return u(Ru,r.a,f(Ou,n,e,r.b));case 3:return u(_u,r.a,f(Uu,n,e,r.b));case 2:return u($u,r.a,f(Bu,n,e,r.b));case 4:return u(zu,r.a,f(Ku,n,e,r.b));default:var t=r.a;return Nu(u(jt,u(Gu,n,e),t))}})),Yu={bC:0,bD:1,fK:0},qu=u(fu,gu,Yu),Xu=r((function(n,e){return f(Gu,qu,n,e)})),Zu=t((function(n,e,r){return{bC:n,bD:e,fK:r}})),Ju=r((function(n,e){return{ey:u(iu,n,Au(e)),dn:Fu(e)}})),Qu=r((function(n,e){var r=e;return u(fu,u(au,n,r.cG),r.eK)})),nf=r((function(n,e){var r=e;return{k:u(Qu,n,r.k),e5:r.e5,fj:r.fj}})),ef=r((function(n,e){return u(Eu,au(n),e)})),rf=r((function(n,e){return u(Hu,Iu(e),u(au,n,ju(e)))})),tf=r((function(n,e){return u(Wu,au(n),e)})),of=r((function(n,e){var r=n.a,t=n.b,o=n.c,a=f(Zu,r,t,o);switch(e.$){case 0:return u(Su,e.a,u(Ju,a,e.b));case 1:return u(Ru,e.a,u(tf,a,e.b));case 3:return u(_u,e.a,u(rf,a,e.b));case 2:return u($u,e.a,u(nf,a,e.b));case 4:return u(zu,e.a,u(ef,a,e.b));default:var i=e.a;return Nu(u(jt,of(w(r,t,o)),i))}})),af=function(n){return of(w(n,0,0))},cf=function(n){return of(w(0,n,0))},lf=r((function(n,e){return n*e})),uf=function(n){return{bC:-n.bC,bD:-n.bD,fK:-n.fK}},ff=t((function(n,e,r){return{bC:n.bC+e*(r.bC-n.bC),bD:n.bD+e*(r.bD-n.bD),fK:n.fK+e*(r.fK-n.fK)}})),sf=t((function(n,e,r){var t=Au(r),o=Ql(t),a=nu(t),i=eu(t),c=f(ff,n,e,Yl(t)),l=0>e?{cG:c,db:uf(o),dc:uf(a),dd:uf(i)}:{cG:c,db:o,dc:a,dd:i},s=Fu(r),d=s.b,v=s.c;return{ey:l,dn:w(mu(u(lf,e,s.a)),mu(u(lf,e,d)),mu(u(lf,e,v)))}})),df=function(n){return n.k},vf=function(n){return ou(df(n))},mf=function(n){return n.cG},bf=function(n){return n.e5},pf=function(n){return n.fj},gf=t((function(n,e,r){var t=mu(u(lf,e,pf(r))),o=mu(u(lf,e,bf(r))),a=0>e?uf(vf(r)):vf(r),i=f(ff,n,e,function(n){return mf(df(n))}(r));return{k:u(fu,i,a),e5:o,fj:t}})),hf=t((function(n,e,r){return u(Eu,u(ff,n,e),r)})),xf=t((function(n,e,r){return u(Hu,u(lf,ic(e),Iu(r)),f(ff,n,e,ju(r)))})),Cf=t((function(n,e,r){return u(Wu,u(ff,n,e),r)})),Pf=r((function(n,e){switch(e.$){case 0:return u(Su,e.a,f(sf,gu,n,e.b));case 1:return u(Ru,e.a,f(Cf,gu,n,e.b));case 3:return u(_u,e.a,f(xf,gu,n,e.b));case 2:return u($u,e.a,f(gf,gu,n,e.b));case 4:return u(zu,e.a,f(hf,gu,n,e.b));default:var r=e.a;return Nu(u(jt,Pf(n),r))}})),Mf=r((function(n,e){return u(_u,n,u(Hu,e,gu))})),Tf=r((function(n,e){return(e-ut(e/n)*n)/n})),yf=o((function(n,e,r,t){return n+(e-n)*(1+ql(6.283185307179586*u(Tf,r,t)))/2})),Lf=r((function(n,e){var r=n.a1+e*u(Il,"delay per index",n),t=u(Il,"saturation",n),o=30/ut(u(Il,"number of spheres",n)),a=u(Il,"lighting",n),i=s(yf,0,1,7,r);return u(cf,1.1*o*e,u(Xu,s(yf,0,10,20,r),u(af,s(yf,3,4,1,r),u(Pf,s(yf,1,4,4,r),u(Mf,f(Vl,i,t,a),o)))))})),wf=function(n){var e,r=ut(u(Il,"number of spheres",n));return e=u(jt,Lf(n),u(Yr,-(r/2|0),r/2|0)),Nu(e)},Df=function(n){return{$:0,a:n}},Sf={$:3},$f=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),Nf=$f,zf=r((function(n,e){return e.b?f(Kt,yr,e,n):n})),_f=function(n){return f(Kt,zf,$,n)},Rf=r((function(n,e){return _f(u(jt,n,e))})),Af=function(n){return u(le,"height",jr(n))},Ff=function(n){return te(function(n){return"script"==n?"p":n}(n))},Vf=function(n){return{$:2,a:n}},kf=r((function(n,e){switch(e.$){case 0:return u(dr,n,e);case 1:return u(vr,n,e);case 2:return u(mr,n,e);case 3:return u(br,n,e);case 4:return u(pr,n,e);default:return u(gr,n,e)}})),Bf=r((function(n,e){switch(e.$){case 0:return u(Ye,n,e);case 1:return u(qe,n,e);case 2:return u(Xe,n,e);case 3:return u(Ze,n,e);case 4:return u(Je,n,e);case 5:return u(Qe,n,e);case 6:return u(nr,n,e);case 7:return u(er,n,e);default:return function(n){var e=n.sampleAlphaToCoverage;e.toggle=n.toggle,e.enabled||(n.gl.enable(n.gl.SAMPLE_ALPHA_TO_COVERAGE),e.enabled=!0)}(n)}})),Ef=t((function(n,e,r){return f(sr,n,e,r)})),Kf=Tr,jf=s(Kf,1,1,1,1),If=t((function(n,e,r){return u(jt,(function(n){return u(n,e,r)}),n)})),Hf=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),Uf=r((function(n,e){var r=e.bC,t=e.bD;return f(Hf,n*r/t,n,n*(1-r-t)/t)})),Wf=Pr,Of=r((function(n,e){return f(Wf,3.2406*(t=(r=u(Uf,n,e)).a)-1.5372*(o=r.b)-.4986*(a=r.c),-.9689*t+1.8758*o+.0415*a,.0557*t-.204*o+1.057*a);var r,t,o,a})),Gf=r((function(n,e){return{dz:P(n.dz,e.dz),q:n.q*e.q+n.r*e.t+n.s*e.w,r:n.q*e.r+n.r*e.u+n.s*e.x,s:n.q*e.s+n.r*e.v+n.s*e.y,t:n.t*e.q+n.u*e.t+n.v*e.w,u:n.t*e.r+n.u*e.u+n.v*e.x,v:n.t*e.s+n.u*e.v+n.v*e.y,w:n.w*e.q+n.x*e.t+n.y*e.w,x:n.w*e.r+n.x*e.u+n.y*e.x,y:n.w*e.s+n.x*e.v+n.y*e.y,H:e.H+(n.H*e.q+n.I*e.t+n.J*e.w)*e.b3,I:e.I+(n.H*e.r+n.I*e.u+n.J*e.x)*e.b3,J:e.J+(n.H*e.s+n.I*e.v+n.J*e.y)*e.b3,b3:n.b3*e.b3}})),Yf=function(n){var e=new Float64Array(16);return e[0]=n.dH,e[1]=n.dL,e[2]=n.dP,e[3]=n.dT,e[4]=n.dI,e[5]=n.dM,e[6]=n.dQ,e[7]=n.dU,e[8]=n.dJ,e[9]=n.dN,e[10]=n.dR,e[11]=n.dV,e[12]=n.dK,e[13]=n.dO,e[14]=n.dS,e[15]=n.dW,e},qf=a((function(n,e,r,t,o){return v(o,n,s(Kf,t.b3,t.b3,t.b3,t.dz?1:-1),function(n){return Yf({dH:n.q,dI:n.t,dJ:n.w,dK:n.H,dL:n.r,dM:n.u,dN:n.x,dO:n.I,dP:n.s,dQ:n.v,dR:n.y,dS:n.J,dT:0,dU:0,dV:0,dW:1})}(t),t.dz,e,r)})),Xf=i((function(n,e,r,t,o,a){n:for(;;)switch(o.$){case 0:return a;case 5:var i=o.b;n=n,e=e,r=r,t=u(Gf,o.a,t),o=i,a=a;continue n;case 1:return{N:u(yr,d(qf,n,e,r,t,o.b),a.N),W:a.W,fn:a.fn};case 3:return{N:a.N,W:u(yr,d(qf,n,e,r,t,o.b),a.W),fn:a.fn};case 2:return{N:a.N,W:a.W,fn:u(yr,d(qf,n,e,r,t,o.a),a.fn)};default:var c=o.a;return f(Ur,s(Xf,n,e,r,t),a,c)}})),Zf=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),Jf=Zf,Qf=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),ns=r((function(n,e){return{$:6,a:n,b:e}})),es=ns,rs=_([s(Qf,518,!1,0,1),s(Jf,!1,!1,!1,!1),u(es,0,1)]),ts=519,os=7681,as={src:"\n        precision lowp float;\n\n        void main() {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        }\n    ",attributes:{},uniforms:{}},is=Ge,cs=r((function(n,e){return{$:0,a:n,b:e}})),ls=cs({$7:1,dy:0,d3:5}),us=Cr,fs=ls(_([{b$:u(us,-1,-1)},{b$:u(us,1,-1)},{b$:u(us,-1,1)},{b$:u(us,1,1)}])),ss={src:"\n        precision lowp float;\n\n        attribute vec2 position;\n\n        void main() {\n            gl_Position = vec4(position, 0.0, 1.0);\n        }\n    ",attributes:{position:"b$"},uniforms:{}},ds=function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return function(f){return{$:2,a:n,b:e,c:r,d:t,e:o,f:a,g:i,h:c,i:l,j:u,k:f}}}}}}}}}}}},vs=t((function(n,e,t){var o=n.cV,a=n.cx,i=n.da,c=r((function(n,e){return e(n)})),l=r((function(n,e){return e(n)})),s=function(n){return u(zt,c(n.bt),u(zt,l(n.be),u(zt,l(n.bE),l(n.bF))))};return u(s,t,u(s,e,f(ds,o,a,i)))})),ms=function(n){return f(vs,{cx:n.cx,cV:n.cV,da:n.da},{be:n.be,bt:n.bt,bE:n.bE,bF:n.bF},{be:n.be,bt:n.bt,bE:n.bE,bF:n.bF})},bs=function(n){return d(is,_([ms(n),s(Jf,!1,!1,!1,!1)]),ss,as,fs,{})},ps=bs({be:os,cx:0,cV:8,bt:ts,da:15,bE:os,bF:os}),gs=7680,hs=function(n){return bs({be:gs,cx:15,cV:8,bt:516,da:(e=n,u(zi,2,e+4)),bE:5386,bF:5386});var e},xs=t((function(n,e,r){return _f(_([f(If,n,r,rs),_([hs(e),ps])]))})),Cs=r((function(n,e){return _f(u(qr,xs(n),e))})),Ps=s(Qf,513,!0,0,1),Ms=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),Ts=r((function(n,e){return f(Ms,32774,n,e)})),ys=function(n){var e=n.b1,t=n.bO,o=n.bI,a=n.bG,i=n.bK,c=n.aO;return u(r((function(n,r){var i=n.b,c=n.c,l=r.a,u=r.b,f=r.c;return function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return{$:0,a:n,b:e,c:r,d:t,e:o,f:a,g:i,h:c,i:l,j:u}}}}}}}}}}}(n.a)(i)(c)(l)(u)(f)(e)(t)(o)(a)})),i,c)}({bG:0,aO:u(Ts,1,771),bI:0,bK:u(Ts,770,771),bO:0,b1:0}),Ls=_([Ps,ys]),ws=function(n){return n.d_},Ds=function(n){return n.d1},Ss=r((function(n,e){return e-n})),$s=function(n){return w(u(Ss,function(n){return n.d$}(n),function(n){return n.dY}(n)),u(Ss,function(n){return n.d0}(n),function(n){return n.dZ}(n)),u(Ss,Ds(n),ws(n)))},Ns=function(n){return Yl(n)},zs=function(n){return{cG:{bC:n.H,bD:n.I,fK:n.J},db:{bC:n.q,bD:n.r,fK:n.s},dc:{bC:n.t,bD:n.u,fK:n.v},dd:{bC:n.w,bD:n.x,fK:n.y}}},_s=r((function(n,e){var r=n.dd,t=n.dc,o=n.db;return{bC:e.bC*o.bC+e.bD*o.bD+e.fK*o.fK,bD:e.bC*t.bC+e.bD*t.bD+e.fK*t.fK,fK:e.bC*r.bC+e.bD*r.bD+e.fK*r.fK}})),Rs=r((function(n,e){var r=n.cG,t=e.bC-r.bC,o=e.bD-r.bD,a=e.fK-r.fK,i=n.dd,c=n.dc,l=n.db;return{bC:t*l.bC+o*l.bD+a*l.fK,bD:t*c.bC+o*c.bD+a*c.fK,fK:t*i.bC+o*i.bD+a*i.fK}})),As=r((function(n,e){return{cG:u(Rs,n,Yl(e)),db:u(_s,n,Ql(e)),dc:u(_s,n,nu(e)),dd:u(_s,n,eu(e))}})),Fs=t((function(n,e,r){return{bC:n,bD:e,fK:r}})),Vs=r((function(n,e){return u(st,n,e)})),ks=r((function(n,e){return 0>T(n,e)?n:e})),Bs=r((function(n,e){return u(ks,n,e)})),Es=r((function(n,e){var r=e,t=n;return{dY:u(Vs,t.dY,r.dY),dZ:u(Vs,t.dZ,r.dZ),d_:u(Vs,t.d_,r.d_),d$:u(Bs,t.d$,r.d$),d0:u(Bs,t.d0,r.d0),d1:u(Bs,t.d1,r.d1)}})),Ks=r((function(n,e){return e+n})),js=r((function(n,e){var r=n.a,t=n.c,o=bu(mu(n.b)),a=bu(mu(r)),i=bu(mu(t)),c=function(n){return w(n.bC,n.bD,n.fK)}(e),l=c.a,f=c.b,s=c.c;return{dY:u(Ks,a,l),dZ:u(Ks,o,f),d_:u(Ks,i,s),d$:u(Ss,a,l),d0:u(Ss,o,f),d1:u(Ss,i,s)}})),Is=o((function(n,e,r,t){var o=r.eG,a=2*r.eY*e,i=2*r.eX*e,c=2*r.eW*e,l=o.fK*e,s=o.bD*e,d=o.bC*e,v=eu(n),m=ic(c*v.bC)+ic(i*v.bD)+ic(a*v.fK),b=nu(n),p=ic(c*b.bC)+ic(i*b.bD)+ic(a*b.fK),g=Ql(n),h=ic(c*g.bC)+ic(i*g.bD)+ic(a*g.fK),x=u(js,w(h,p,m),u(Rs,n,f(Fs,d,s,l)));return Br(t.$?x:u(Es,t.a,x))})),Hs=o((function(n,e,r,t){n:for(;;){if(!t.b)return r;var o=t.a,a=t.b;switch(o.$){case 0:n=c=n,e=l=e,r=f=r,t=a;continue n;case 1:var i=s(Is,n,e,o.a,r);n=c=n,e=l=e,r=f=i,t=a;continue n;case 2:n=c=n,e=l=e,r=f=r,t=a;continue n;case 3:i=s(Is,n,e,o.a,r),n=c=n,e=l=e,r=f=i,t=a;continue n;case 4:var c=n,l=e,f=s(Hs,n,e,r,o.a);n=c,e=l,r=f,t=a;continue n;default:var d=o.a,v=o.b,m=u(As,zs(d),n),b=e*d.b3;n=c=n,e=l=e,r=f=s(Hs,m,b,r,_([v])),t=a;continue n}}})),Us=function(n){return n[0]},Ws=function(n){return n[1]},Os=function(n){return n[2]},Gs=function(n){return{$:4,a:n}},Ys=r((function(n,e){for(;;){if(!n.b)return e;var r=n.a;n=n.b,e=u(yr,r,e)}})),qs=function(n){return Gs(u(Ys,n,$))},Xs={dz:!0,q:1,r:0,s:0,t:0,u:1,v:0,w:0,x:0,y:1,H:0,I:0,J:0,b3:1},Zs=bs({be:os,cx:0,cV:8,bt:ts,da:255,bE:os,bF:os}),Js=U,Qs={bI:0,eF:!1,bO:0,cR:0,b1:0,c4:0,bC:0,bD:0,fK:0},nd=r((function(n,e){return Yf({dH:n.bC,dI:n.b1,dJ:e.bC,dK:e.b1,dL:n.bD,dM:n.bO,dN:e.bD,dO:e.bO,dP:n.fK,dQ:n.bI,dR:e.fK,dS:e.bI,dT:n.c4,dU:n.cR,dV:e.c4,dW:e.cR})})),ed=L({bl:u(nd,Qs,Qs),bS:u(nd,Qs,Qs),bT:u(nd,Qs,Qs),bU:u(nd,Qs,Qs)},s(Kf,0,0,0,0)),rd=function(n){return s(Qf,515,n.ac,n.Y,n.X)},td=_([rd({X:1,Y:0,ac:!0}),ms({be:gs,cx:240,cV:0,bt:514,da:0,bE:gs,bF:gs}),ys]),od=r((function(n,e){var r=n,t=e.eT,o=e.ex,a=mu(e.fc),i=mu(t),c=r.cT;if(c.$){var l=c.a;return bc(i)?Yf({dH:2/(o*l),dI:0,dJ:0,dK:0,dL:0,dM:2/l,dN:0,dO:0,dP:0,dQ:0,dR:0,dS:-1,dT:0,dU:0,dV:0,dW:1}):Yf({dH:2/(o*l),dI:0,dJ:0,dK:0,dL:0,dM:2/l,dN:0,dO:0,dP:0,dQ:0,dR:-2/(i-a),dS:-(i+a)/(i-a),dT:0,dU:0,dV:0,dW:1})}var u=c.a;return bc(i)?Yf({dH:1/(o*u),dI:0,dJ:0,dK:0,dL:0,dM:1/u,dN:0,dO:0,dP:0,dQ:0,dR:-1,dS:-2*a,dT:0,dU:0,dV:-1,dW:0}):Yf({dH:1/(o*u),dI:0,dJ:0,dK:0,dL:0,dM:1/u,dN:0,dO:0,dP:0,dQ:0,dR:-(i+a)/(i-a),dS:-2*i*a/(i-a),dT:0,dU:0,dV:-1,dW:0})})),ad=r((function(n,e){return 1==(1&n>>e)?0:1})),id=t((function(n,e,r){return _f(u(jt,(function(r){var t=r<<4;return f(If,n,L(e,s(Kf,u(ad,r,0),u(ad,r,1),u(ad,r,2),u(ad,r,3))),function(n){return _([rd({X:1,Y:0,ac:!0}),ms({be:gs,cx:240,cV:n,bt:514,da:0,bE:gs,bF:gs}),ys])}(t))}),u(Yr,1,u(zi,2,r)-1)))})),cd=function(n){return uf(eu(n))},ld={cG:gu,db:xu,dc:Yu,dd:Pu},ud=r((function(n,e){var r,t,o,a,i;return t=Yl(r=u(As,e,n)),o=eu(r),a=nu(r),i=Ql(r),Yf({dH:i.bC,dI:a.bC,dJ:o.bC,dK:t.bC,dL:i.bD,dM:a.bD,dN:o.bD,dO:t.bD,dP:i.fK,dQ:a.fK,dR:o.fK,dS:t.fK,dT:0,dU:0,dV:0,dW:1})})),fd=function(n){return Ql(n)},sd=t((function(n,e,r){return{bC:n,bD:e,fK:r}})),dd=function(n){return nu(n)},vd=r((function(n,e){var r,t=_([(1,{$:1,a:1}),Vf(0),Df(!0),s(Nf,0,0,0,0)]),o=function(){var e=n.ev;switch(e.$){case 0:return w(t,"0",1);case 1:return w(u(yr,Sf,t),"1",1);default:return w(t,"0",e.a)}}(),a=o.a,i=o.b,c=o.c,l=n.dn,d=l.a,m=l.b,b=u(Xc,"height",jr(m)+"px"),p=d,g=p/m,h=u(Rf,(function(e){return function(n){var e=function(n){return n.c7}(n.eD),r={cG:Ns(e),db:fd(e),dc:dd(e),dd:uf(cd(e))},t=qs(n.dr),o=s(Hs,r,1,Er,_([t]));if(1===o.$)return $;var a=o.a,i=u(ud,ld,e),c=u(lf,.99,u(Vs,mu(n.dk),Ul(ws(a)))),l=$s(a),d=function(n){var e=n,r=u(st,ic(e.bC),u(st,ic(e.bD),ic(e.fK)));if(r){var t=e.fK/r,o=e.bD/r,a=e.bC/r;return Js(a*a+o*o+t*t)*r}return 0}(f(sd,l.a,l.b,l.c)),m=u(lf,1.01,u(Ks,d,Ul(Ds(a)))),b=u(od,n.eD,{ex:n.ex,eT:m,fc:c}),p=function(n){return{dH:n[0],dL:n[1],dP:n[2],dT:n[3],dI:n[4],dM:n[5],dQ:n[6],dU:n[7],dJ:n[8],dN:n[9],dR:n[10],dV:n[11],dK:n[12],dO:n[13],dS:n[14],dW:n[15]}}(b).dW,g=p?uf(cd(e)):Ns(e),h=function(){var e=n.fx;switch(e.$){case 0:return L(0,0);case 1:return L(1,0);case 2:return L(2,0);case 3:return L(3,e.a);case 4:return L(4,e.a);default:return L(5,0)}}(),x=h.a,C=h.b,P=u(Of,n.eR,n.fC),M=Yf({dH:0,dI:g.bC,dJ:Us(P),dK:n.em,dL:0,dM:g.bD,dN:Ws(P),dO:d,dP:0,dQ:g.fK,dR:Os(P),dS:x,dT:0,dU:p,dV:0,dW:C}),T=v(Xf,M,i,b,Xs,t,{N:$,W:$,fn:$}),y=n.e7;switch(y.$){case 0:return _f(_([f(If,T.N,L(w=y.a,jf),Ls),f(If,T.W,ed,Ls)]));case 1:var w=y.a;return _f(_([f(If,T.N,ed,Ls),_([Zs]),f(If,T.fn,w.bl,rs),_([hs(0)]),f(If,T.N,L(w,jf),td),f(If,T.W,ed,Ls)]));default:var D=y.a,S=y.b;return _f(_([f(If,T.N,L(S,jf),Ls),_([Zs]),u(Cs,T.fn,D),f(id,T.N,S,Wr(D)),f(If,T.W,ed,Ls)]))}}({ex:g,eD:n.eD,dk:n.dk,dr:e.dr,eR:e.eR,e7:e.e7,em:c,fx:e.fx,fC:e.fC})}),e),x=u(Xc,"width",jr(p)+"px"),C=function(n){var e,r,t=n.b,o=n.c,a=n.d,i=function(n){return _i(1e4*n)/100};return e=_(["rgba(",vc(i(n.a)),"%,",vc(i(t)),"%,",vc(i(o)),"%,",vc((r=a,_i(1e3*r)/1e3)),")"]),u(Ir,"",e)}(n.dg);return f(Ff,"div",_([u(Xc,"padding","0px"),x,b]),_([L(i,f(Ef,a,_([(r=_i(p*c),u(le,"width",jr(r))),Af(_i(m*c)),x,b,u(Xc,"display","block"),u(Xc,"background-color",C)]),h))]))})),md={bC:.31271,bD:.32902},bd=r((function(n,e){var r=n,t=e.eK,o=t.bC,a=t.bD,i=t.fK,c=u(Of,e.cn,e.ce);return{bI:Os(c),eF:r,bO:Ws(c),cR:0,b1:Us(c),c4:1,bC:-o,bD:-a,fK:-i}})),pd={$:0},gd=r((function(n,e){return T(e,n)>0})),hd=function(n){return function(n){for(;;){if(P(n.e2,0)&&P(n.e3,0))return Qs;if(!u(gd,mu(n.e2),mu(n.e3))){var e=ic(n.e3/kl),r=ic(n.e2/kl),t=n.b6,o=t.bC,a=t.bD,i=t.fK,c=u(Of,1,n.ce);return{bI:r*Os(c),eF:!1,bO:r*Ws(c),cR:e/r,b1:r*Us(c),c4:3,bC:o,bD:a,fK:i}}n={ce:n.ce,e2:n.e3,e3:n.e2,b6:uf(n.b6)}}}({ce:n.ce,e2:n.cn,e3:0,b6:n.b6})},xd=t((function(n,e,r){return 0>T(r,n)?n:T(r,e)>0?e:r})),Cd=function(n){var e=f(xd,1667,25e3,n),r=e>4e3?-3025846900/(e*e*e)+2107037.9/(e*e)+.2226347*1e3/e+.24039:-266123900.00000003/(e*e*e)-.2343589*1e6/(e*e)+877.6956/e+.17991;return{bC:r,bD:e>2222?e>4e3?r*r*r*3.081758-r*r*5.8733867+3.75112997*r-.37001483:r*r*r*-.9549476-r*r*1.37418593+2.09137015*r-.16748867:r*r*r*-1.1063814-r*r*1.3481102+2.18555832*r-.20219683}},Pd=Cd(12e3),Md=Cd(5600),Td=r((function(n,e){return{$:2,a:n,b:e}})),yd=function(n){return{$:0,a:n}},Ld=function(n){return n.eF},wd=yd(ed.a),Dd=r((function(n,e){return f(Kt,r((function(e,r){var t=r.a,o=r.b;return n(e)?L(u(yr,e,t),o):L(t,u(yr,e,o))})),L($,$),e)})),Sd=function(n){return Yf({dH:n.bC,dI:n.b1,dJ:0,dK:0,dL:n.bD,dM:n.bO,dN:0,dO:0,dP:n.fK,dQ:n.bI,dR:0,dS:0,dT:n.c4,dU:n.cR,dV:0,dW:0})},$d=l((function(n,e,r,t,o,a,i,c){var l=u(Dd,Ld,_([n,e,r,t])),f=l.a;if(f.b){var s=S(f,l.b);if(s.b&&s.b.b&&s.b.b.b&&s.b.b.b.b&&!s.b.b.b.b.b){var d=s.a,v=s.b,m=v.a,b=v.b,p=b.a,g=b.b.a;return u(Td,u(jt,Sd,f),{bl:u(nd,d,m),bS:u(nd,p,g),bT:u(nd,o,a),bU:u(nd,i,c)})}return wd}return yd({bl:u(nd,n,e),bS:u(nd,r,t),bT:u(nd,o,a),bU:u(nd,i,c)})})),Nd=t((function(n,e,r){return b($d,n,e,r,Qs,Qs,Qs,Qs,Qs)})),zd=o((function(n,e,r,t){return{$:2,a:n,b:e,c:r,d:t}})),_d=o((function(n,e,r,t){return{$:3,a:n,b:e,c:r,d:t}})),Rd=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),Ad=o((function(n,e,r,t){return{$:6,a:n,b:e,c:r,d:t}})),Fd=o((function(n,e,r,t){return{$:7,a:n,b:e,c:r,d:t}})),Vd=o((function(n,e,r,t){return{$:5,a:n,b:e,c:r,d:t}})),kd=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),Bd=function(n){switch(n.$){case 0:return n;case 1:return s(kd,n.a,n.b,n.c,1);case 2:return s(zd,n.a,n.b,n.c,1);case 3:return s(_d,n.a,n.b,n.c,1);case 4:return s(Rd,n.a,n.b,n.c,1);case 5:return s(Vd,n.a,n.b,n.c,1);case 6:return s(Ad,n.a,n.b,n.c,1);case 7:return s(Fd,n.a,n.b,n.c,1);case 8:case 9:default:return n}},Ed={$:0},Kd=l((function(n,e,r,t,o,a,i,c){for(;;){if(!c.b)return{dY:e,dZ:t,d_:a,d$:n,d0:r,d1:o};var l=c.b,f=i(c.a);n=u(Bs,f.d$,n),e=u(Vs,f.dY,e),r=u(Bs,f.d0,r),t=u(Vs,f.dZ,t),o=u(Bs,f.d1,o),a=u(Vs,f.d_,a),i=i,c=l}})),jd=t((function(n,e,r){var t=n(e);return b(Kd,t.d$,t.dY,t.d0,t.dZ,t.d1,t.d_,n,r)})),Id=r((function(n,e){return 1>T(e,n)})),Hd=function(n){return u(Id,n.dY,n.d$)&&u(Id,n.dZ,n.d0)&&u(Id,n.d_,n.d1)?n:{dY:u(Vs,n.d$,n.dY),dZ:u(Vs,n.d0,n.dZ),d_:u(Vs,n.d1,n.d_),d$:u(Bs,n.d$,n.dY),d0:u(Bs,n.d0,n.dZ),d1:u(Bs,n.d1,n.d_)}},Ud=function(n){return n},Wd=function(n){return n.bC},Od=function(n){return n.bD},Gd=function(n){return n.fK},Yd=function(n){var e=n.a,r=n.b,t=n.c,o=Wd(e),a=Od(e),i=Gd(e),c=Wd(r),l=Od(r),f=Gd(r),s=Wd(t),d=Od(t),v=Gd(t);return Hd({dY:u(Vs,o,u(Vs,c,s)),dZ:u(Vs,a,u(Vs,l,d)),d_:u(Vs,i,u(Vs,f,v)),d$:u(Bs,o,u(Bs,c,s)),d0:u(Bs,a,u(Bs,l,d)),d1:u(Bs,i,u(Bs,f,v))})},qd=function(n){return new Float64Array([n.bC,n.bD,n.fK])},Xd=function(n){return qd(n)},Zd=function(n){return qd(n)},Jd=r((function(n,e){return{bC:e.bD*n.fK-e.fK*n.bD,bD:e.fK*n.bC-e.bC*n.fK,fK:e.bC*n.bD-e.bD*n.bC}})),Qd=r((function(n,e){return{bC:e.bC-n.bC,bD:e.bD-n.bD,fK:e.fK-n.fK}})),nv={bC:0,bD:0,fK:0},ev=r((function(n,e){var r=n,t=e,o=u(st,ic(t.bC),u(st,ic(t.bD),ic(t.fK)));if(o){var a=t.fK/o,i=t.bD/o,c=t.bC/o,l=Js(c*c+i*i+a*a);return{bC:r*c/l,bD:r*i/l,fK:r*a/l}}return nv}))(1),rv=t((function(n,e,r){return ev(u(Jd,u(Qd,e,r),u(Qd,n,e)))})),tv=function(n){var e=n.a,r=n.b,t=n.c,o=Zd(f(rv,e,r,t));return w({o:o,b$:Xd(e)},{o:o,b$:Xd(r)},{o:o,b$:Xd(t)})},ov=r((function(n,e){return{$:2,a:n,b:e}}))({$7:3,dy:0,d3:4}),av=t((function(n,e,r){return w(n,e,r)})),iv=t((function(n,e,r){return{bC:n,bD:e,fK:r}})),cv=(Eo=u(lf,-.5,1),Ko=u(lf,-.5,1),Io=f(iv,jo=u(lf,-.5,1),Ko,Eo),Uo=f(iv,jo,Ko,Ho=u(lf,.5,1)),Oo=f(iv,jo,Wo=u(lf,.5,1),Eo),Go=f(iv,jo,Wo,Ho),qo=f(iv,Yo=u(lf,.5,1),Ko,Eo),Xo=f(iv,Yo,Wo,Eo),Zo=f(iv,Yo,Ko,Ho),Jo=f(iv,Yo,Wo,Ho),Bd(function(n){if(n.b){var e=n.a,r=n.b,t=ov(u(jt,tv,n));return s(zd,f(jd,Yd,e,r),n,t,0)}return Ed}(_([f(av,Io,Xo,qo),f(av,Io,Oo,Xo),f(av,Uo,Zo,Jo),f(av,Uo,Jo,Go),f(av,qo,Xo,Jo),f(av,qo,Jo,Zo),f(av,Io,Go,Oo),f(av,Io,Uo,Go),f(av,Io,qo,Zo),f(av,Io,Zo,Uo),f(av,Oo,Jo,Xo),f(av,Oo,Go,Jo)])))),lv={$:0},uv=t((function(n,e,r){return{$:1,a:n,b:e,c:r}})),fv=t((function(n,e,r){var t=e.a,o=e.b,a=n(e.c),i=n(o),c=n(t),l=Zd(f(rv,c,i,a)),s={o:l,b$:Xd(c)},d={o:l,b$:Xd(i)},v={o:l,b$:Xd(a)};return u(yr,s,u(yr,d,u(yr,v,r)))})),sv=function(n){return n.C},dv=o((function(n,e,r,t){return 1===e.$||1===r.$||1===t.$?Er:Br(f(n,e.a,r.a,t.a))})),vv=4294967295>>>32-at,mv=h,bv=t((function(n,e,r){for(;;){var t=u(mv,vv&e>>>n,r);if(t.$)return u(mv,vv&e,t.a);n-=at,e=e,r=t.a}})),pv=r((function(n,e){var r=e.a,t=e.b,o=e.c,a=e.d;return 0>n||T(n,r)>-1?Er:T(n,function(n){return n>>>5<<5}(r))>-1?Br(u(mv,vv&n,a)):Br(f(bv,t,n,o))})),gv=function(n){return n.an},hv=r((function(n,e){return u(pv,n,gv(e))})),xv=t((function(n,e,r){for(;;){var t=u(vt,Qr,n),o=t.a,a=t.b;if(0>T(ft(o),Qr))return u(pt,!0,{z:e,l:r,p:o});n=a,e=u(yr,lt(o),e),r+=1}})),Cv=function(n){return n.b?f(xv,n,$,0):it},Pv=r((function(n,e){return!u(sc,u(bo,fc,n),e)})),Mv=r((function(n,e){return f(Kt,r((function(e,r){return n(e)?u(yr,e,r):r})),$,e)})),Tv=r((function(n,e){var r=function(n){return n.a}(n),t=function(n){var e=n.a,t=n.b,o=n.c;return e>=0&&0>T(e,r)&&t>=0&&0>T(t,r)&&o>=0&&0>T(o,r)};return u(Pv,t,e)?{C:e,an:n}:{C:u(Mv,t,e),an:n}})),yv=t((function(n,e,r){return{$:3,a:n,b:e,c:r}}))({$7:1,dy:3,d3:4}),Lv=r((function(n,e){var r=e;return L(w(n.bC,n.bD,n.fK),w(r.bC,r.bD,r.fK))})),wv=r((function(n,e){n:for(;;){if(-2===e.$)return Er;var r=e.c,t=e.d,o=e.e;switch(u(Lo,n,e.b)){case 0:n=n,e=t;continue n;case 1:return Br(r);default:n=n,e=o;continue n}}})),Dv=f(Wf,0,0,0),Sv=i((function(n,e,r,t,o,a){var i=a.a,c=a.b,l=a.c,f=u(wv,u(Lv,n,e),o);if(f.$){var s={o:Dv,b$:Xd(e)},d={o:Dv,b$:Xd(n)},v=l+1;return w(u(yr,w(r,l,v),u(yr,w(r,v,t),i)),u(yr,s,u(yr,d,c)),l+2)}return w(u(yr,w(r,f.a,t),i),c,l)})),$v=a((function(n,e,r,t,o){for(;;){if(!r.b)return L(o.a,Zr(o.b));var a=r.a,i=a.a,c=a.b,l=r.b,u=n(a.c),f=n(c),s=n(i),d=t+2,m=t+1,b=n,p=e,g=l,h=t+3,x=v(Sv,u,s,d,t,e,v(Sv,f,u,m,d,e,v(Sv,s,f,t,m,e,o)));n=b,e=p,r=g,t=h,o=x}})),Nv=a((function(n,e,r,t,o){for(;;){if(!e.b)return w(t,o,r);var a=e.a,i=a.a,c=a.b,l=e.b,s=n(a.c),d=n(c),v=n(i),m=r+2,b=r+1,p=r,g=f(Do,u(Lv,v,s),m,f(Do,u(Lv,s,d),b,f(Do,u(Lv,d,v),p,o)));n=n,e=l,r+=3,t=u(yr,w(p,b,m),t),o=g}})),zv=t((function(n,e,r){var o,a=u(Vo,(function(n){var e=n.a,r=n.b,a=n.c;return s(dv,t((function(n,e,r){return w(n,e,r)})),u(hv,e,o),u(hv,r,o),u(hv,a,o))}),sv(o=r)),i=f(Kt,fv(e),$,a),c=d(Nv,e,a,0,$,Co),l=d($v,e,c.b,a,0,w(c.a,$,c.c)),v=l.a,m=l.b,b=m.b?S(i,m):i;return f(uv,n,u(Tv,Cv(b),v),u(yv,b,v))})),_v=function(n){return{C:u(jt,(function(n){return w(3*n,3*n+1,3*n+2)}),u(Yr,0,Wr(n)-1)),an:Cv(_f(u(jt,(function(n){return _([n.a,n.b,n.c])}),n)))}},Rv=function(n){switch(n.$){case 0:return lv;case 1:case 2:return f(zv,n.a,_t,_v(u(jt,Ud,n.b)));case 3:return f(zv,n.a,_t,n.b);case 4:case 5:case 6:case 7:return f(zv,n.a,(function(n){return n.b$}),n.b);case 8:case 9:default:return lv}},Av=Rv(cv),Fv={$:0},Vv=Fv,kv=r((function(n,e){return{$:1,a:n,b:e}})),Bv={src:"\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        void main () {\n            gl_FragColor = texture2D(colorTexture, interpolatedUv);\n        }\n    ",attributes:{},uniforms:{colorTexture:"bL"}},Ev=function(n){return{$:5,a:n}},Kv=Ev(1029),jv=Ev(1028),Iv=t((function(n,e,r){return 1===e?u(yr,n?Kv:jv,r):r})),Hv={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute mediump vec2 uv;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedUv = uv;\n        }\n    ",attributes:{position:"b$",uv:"L"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Uv=o((function(n,e,r,t){return u(kv,e,l((function(e,o,a,i,c,l,u,s){return d(is,f(Iv,i,t,s),Hv,Bv,r,{bL:n,b:a,c:o,d:l,e:e,f:c})})))})),Wv={src:"\n        precision lowp float;\n        \n        uniform lowp vec3 constantColor;\n        \n        void main () {\n            gl_FragColor = vec4(constantColor, 1.0);\n        }\n    ",attributes:{},uniforms:{constantColor:"aC"}},Ov={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{position:"b$"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Gv=o((function(n,e,r,t){return u(kv,e,l((function(e,o,a,i,c,l,u,s){return d(is,f(Iv,i,t,s),Ov,Wv,r,{aC:n,b:a,c:o,d:l,e:e,f:c})})))})),Yv=r((function(n,e){return{$:3,a:n,b:e}})),qv={src:"\n        precision lowp float;\n        \n        uniform lowp vec3 constantColor;\n        uniform lowp float pointRadius;\n        uniform highp mat4 sceneProperties;\n        \n        float pointAlpha(float pointRadius, vec2 pointCoord) {\n            float pointSize = 2.0 * pointRadius;\n            float x = (pointSize + 2.0) * (pointCoord.s - 0.5);\n            float y = (pointSize + 2.0) * (pointCoord.t - 0.5);\n            float r = sqrt(x * x + y * y);\n            float innerRadius = pointRadius;\n            float outerRadius = pointRadius + 1.0;\n            if (r > outerRadius) {\n                return 0.0;\n            } else if (r > innerRadius) {\n                return outerRadius - r;\n            } else {\n                return 1.0;\n            }\n        }\n        \n        void main () {\n            float supersampling = sceneProperties[3][0];\n            float alpha = pointAlpha(pointRadius * supersampling, gl_PointCoord);\n            gl_FragColor = vec4(constantColor, alpha);\n        }\n    ",attributes:{},uniforms:{constantColor:"aC",pointRadius:"b_",sceneProperties:"e"}},Xv={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform lowp float pointRadius;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            float supersampling = sceneProperties[3][0];\n            gl_PointSize = 2.0 * pointRadius * supersampling + 2.0;\n        }\n    ",attributes:{position:"b$"},uniforms:{modelMatrix:"b",modelScale:"c",pointRadius:"b_",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Zv=o((function(n,e,r,t){return u(Yv,r,l((function(r,o,a,i,c,l,u,f){return d(is,f,Xv,qv,t,{aC:n,b:a,c:o,b_:e,d:l,e:r,f:c})})))})),Jv={src:"\n        precision mediump float;\n        \n        uniform mediump vec3 emissiveColor;\n        uniform highp mat4 sceneProperties;\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{emissiveColor:"aR",sceneProperties:"e"}},Qv=Mr,nm=a((function(n,e,r,t,o){return u(kv,r,l((function(r,a,i,c,l,s,v,m){return d(is,f(Iv,c,o,m),Ov,Jv,t,{aR:u(Qv,e,n),b:i,c:a,d:s,e:r,f:l})})))})),em={src:"\n        precision mediump float;\n        \n        uniform mediump vec3 emissiveColor;\n        uniform lowp float pointRadius;\n        uniform highp mat4 sceneProperties;\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        float pointAlpha(float pointRadius, vec2 pointCoord) {\n            float pointSize = 2.0 * pointRadius;\n            float x = (pointSize + 2.0) * (pointCoord.s - 0.5);\n            float y = (pointSize + 2.0) * (pointCoord.t - 0.5);\n            float r = sqrt(x * x + y * y);\n            float innerRadius = pointRadius;\n            float outerRadius = pointRadius + 1.0;\n            if (r > outerRadius) {\n                return 0.0;\n            } else if (r > innerRadius) {\n                return outerRadius - r;\n            } else {\n                return 1.0;\n            }\n        }\n        \n        void main () {\n            vec4 color = toSrgb(emissiveColor, sceneProperties);\n            float supersampling = sceneProperties[3][0];\n            float alpha = pointAlpha(pointRadius * supersampling, gl_PointCoord);\n            gl_FragColor = vec4(color.rgb, alpha);\n        }\n    ",attributes:{},uniforms:{emissiveColor:"aR",pointRadius:"b_",sceneProperties:"e"}},rm=a((function(n,e,r,t,o){return u(Yv,t,l((function(t,a,i,c,l,f,s,v){return d(is,v,Xv,em,o,{aR:u(Qv,e,n),b:i,c:a,b_:r,d:f,e:t,f:l})})))})),tm={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 materialColor;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{enabledLights:"R",lights12:"bl",lights34:"bS",lights56:"bT",lights78:"bU",materialColor:"cy",sceneProperties:"e",viewMatrix:"f"}},om={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n        }\n    ",attributes:{normal:"o",position:"b$"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},am=o((function(n,e,r,t){return u(kv,e,l((function(e,o,a,i,c,l,u,s){var v=u.a,m=u.b;return d(is,f(Iv,i,t,s),om,tm,r,{R:m,bl:v.bl,bS:v.bS,bT:v.bT,bU:v.bU,cy:n,b:a,c:o,d:l,e:e,f:c})})))})),im={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D materialColorTexture;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n            vec3 materialColor = fromSrgb(texture2D(materialColorTexture, interpolatedUv).rgb);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{enabledLights:"R",lights12:"bl",lights34:"bS",lights56:"bT",lights78:"bU",materialColorTexture:"cz",normalMapTexture:"aY",sceneProperties:"e",useNormalMap:"a3",viewMatrix:"f"}},cm={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        attribute mediump vec2 uv;\n        attribute highp vec3 tangent;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getWorldTangent(vec3 modelTangent, vec4 modelScale, mat4 modelMatrix) {\n            return (modelMatrix * vec4(safeNormalize(modelScale.xyz * modelTangent), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = uv;\n            interpolatedTangent = getWorldTangent(tangent, modelScale, modelMatrix);\n        }\n    ",attributes:{normal:"o",position:"b$",tangent:"eo",uv:"L"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},lm=i((function(n,e,r,t,o,a){return u(kv,t,l((function(t,i,c,l,u,s,v,m){var b=v.a,p=v.b;return d(is,f(Iv,l,a,m),cm,im,o,{R:p,bl:b.bl,bS:b.bS,bT:b.bT,bU:b.bU,cz:n,b:c,c:i,aY:e,d:s,e:t,a3:r,f:u})})))})),um={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D baseColorTexture;\n        uniform lowp vec4 constantBaseColor;\n        uniform mediump sampler2D roughnessTexture;\n        uniform lowp vec2 constantRoughness;\n        uniform mediump sampler2D metallicTexture;\n        uniform lowp vec2 constantMetallic;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getFloatValue(sampler2D texture, vec2 uv, vec2 constantValue) {\n            if (constantValue.y == 1.0) {\n                return constantValue.x;\n            } else {\n                vec4 textureColor = texture2D(texture, uv);\n                return dot(textureColor, vec4(0.2126, 0.7152, 0.0722, 0.0));\n            }\n        }\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 baseColor = fromSrgb(texture2D(baseColorTexture, interpolatedUv).rgb) * (1.0 - constantBaseColor.w) + constantBaseColor.rgb * constantBaseColor.w;\n            float roughness = getFloatValue(roughnessTexture, interpolatedUv, constantRoughness);\n            float metallic = getFloatValue(metallicTexture, interpolatedUv, constantMetallic);\n        \n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{baseColorTexture:"cc",constantBaseColor:"cg",constantMetallic:"ch",constantRoughness:"ci",enabledLights:"R",lights12:"bl",lights34:"bS",lights56:"bT",lights78:"bU",metallicTexture:"cC",normalMapTexture:"aY",roughnessTexture:"cZ",sceneProperties:"e",useNormalMap:"a3",viewMatrix:"f"}},fm={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 baseColor;\n        uniform lowp float roughness;\n        uniform lowp float metallic;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{baseColor:"cb",enabledLights:"R",lights12:"bl",lights34:"bS",lights56:"bT",lights78:"bU",metallic:"cB",roughness:"cY",sceneProperties:"e",viewMatrix:"f"}},sm=i((function(n,e,r,t,o,a){return u(kv,t,l((function(t,i,c,l,u,s,v,m){var b=v.a,p=v.b;return d(is,f(Iv,l,a,m),om,fm,o,{cb:n,R:p,bl:b.bl,bS:b.bS,bT:b.bT,bU:b.bU,cB:r,b:c,c:i,d:s,cY:e,e:t,f:u})})))})),dm=r((function(n,e){return{$:1,a:n,b:e}})),vm=r((function(n,e){return e.$?L(e.a.B,1):L(n,0)})),mm=s(Kf,0,0,0,0),bm=r((function(n,e){var r;return e.$?L(e.a.B,mm):L(n,s(Kf,Us(r=e.a),Ws(r),Os(r),1))})),pm=r((function(n,e){var r,t=L(n,e);return t.a.$?u(dm,L(r=t.a.a.B,mm),u(vm,r,e)):t.b.$?u(dm,u(bm,r=t.b.a.B,n),u(vm,r,e)):{$:0,a:t.a.a}})),gm=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),hm=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),xm=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),Cm=u(us,0,0),Pm=r((function(n,e){return e.$?L(e.a.B,Cm):L(n,u(us,e.a,1))})),Mm=o((function(n,e,r,t){var o,a=s(xm,n,e,r,t);return a.a.$?s(hm,L(o=a.a.a.B,mm),u(Pm,o,e),u(Pm,o,r),u(vm,o,t)):a.b.$?s(hm,u(bm,o=a.b.a.B,n),L(o,Cm),u(Pm,o,r),u(vm,o,t)):a.c.$?s(hm,u(bm,o=a.c.a.B,n),u(Pm,o,e),L(o,Cm),u(vm,o,t)):a.d.$?s(hm,u(bm,o=a.d.a.B,n),u(Pm,o,e),u(Pm,o,r),L(o,1)):f(gm,a.a.a,a.b.a,a.c.a)})),Tm={src:"\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        uniform mediump float backlight;\n        uniform highp mat4 sceneProperties;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            vec3 emissiveColor = fromSrgb(texture2D(colorTexture, interpolatedUv).rgb) * backlight;\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{backlight:"b8",colorTexture:"bL",sceneProperties:"e"}},ym=a((function(n,e,r,t,o){return u(kv,r,l((function(r,a,i,c,l,u,s,v){return d(is,f(Iv,c,o,v),Hv,Tm,t,{b8:e,bL:n,b:i,c:a,d:u,e:r,f:l})})))})),Lm={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        attribute mediump vec2 uv;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = uv;\n            interpolatedTangent = vec3(0.0, 0.0, 0.0);\n        }\n    ",attributes:{normal:"o",position:"b$",uv:"L"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},wm=o((function(n,e,r,t){return u(kv,e,l((function(e,o,a,i,c,l,u,s){var v=u.a,m=u.b;return d(is,f(Iv,i,t,s),Lm,im,r,{R:m,bl:v.bl,bS:v.bS,bT:v.bT,bU:v.bU,cz:n,b:a,c:o,aY:n,d:l,e:e,a3:0,f:c})})))})),Dm=function(n){return e(9,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return n(e,r,t,o,a,i,c,l,u)}}}}}}}}}))}((function(n,e,r,t,o,a,i,c,s){return u(kv,i,l((function(i,l,u,v,m,b,p,g){var h=p.a,x=p.b;return d(is,f(Iv,v,s,g),Lm,um,c,{cc:n,cg:e,ch:a,ci:t,R:x,bl:h.bl,bS:h.bS,bT:h.bT,bU:h.bU,cC:o,b:u,c:l,aY:n,d:b,cZ:r,e:i,a3:0,f:m})})))})),Sm=t((function(n,e,r){return r>.5?e+(1-r)*(n-e):n+r*(e-n)})),$m=function(n){return f(iv,function(n){return f(Sm,n.d$,n.dY,.5)}(n),function(n){return f(Sm,n.d0,n.dZ,.5)}(n),function(n){return f(Sm,n.d1,n.d_,.5)}(n))},Nm=function(n){var e=$s(n),r=e.a,t=e.b,o=e.c;return{eG:$m(n),eW:r/2,eX:t/2,eY:o/2}},zm=r((function(n,e){switch(n.$){case 0:if(n.b.$){var r=n.b.a.B;switch(e.$){case 0:case 1:case 2:case 3:case 4:return Vv;case 5:case 6:case 7:return o=e.c,a=e.d,s(Uv,r,Nm(F=e.a),o,a);case 8:case 9:default:return Vv}}else{var t=n.b.a;switch(e.$){case 0:return Vv;case 1:var o=e.c,a=e.d;return s(Gv,t,Nm(F=e.a),o,a);case 2:case 3:case 4:return o=e.c,a=e.d,s(Gv,t,Nm(F=e.a),o,a);case 5:case 6:case 7:return o=e.c,a=e.d,s(Gv,t,Nm(F=e.a),o,a);case 8:case 9:return o=e.c,s(Gv,t,Nm(F=e.a),o,0);default:return o=e.d,s(Zv,t,e.b,Nm(F=e.a),o)}}case 1:if(n.b.$)switch(r=n.b.a.B,c=n.c,e.$){case 0:case 1:case 2:case 3:case 4:return Vv;case 5:case 6:case 7:return o=e.c,a=e.d,d(ym,r,c,Nm(F=e.a),o,a);case 8:case 9:default:return Vv}else{var i=n.b.a,c=n.c;switch(e.$){case 0:return Vv;case 1:case 2:case 3:case 4:case 5:case 6:case 7:return o=e.c,a=e.d,d(nm,i,c,Nm(F=e.a),o,a);case 8:case 9:return o=e.c,d(nm,i,c,Nm(F=e.a),o,0);default:return o=e.d,d(rm,i,c,e.b,Nm(F=e.a),o)}}case 2:var m=u(pm,n.b,n.c);if(m.$){var b=m.a.a,p=m.b,g=p.a,h=p.b;switch(e.$){case 0:case 1:case 2:case 3:case 4:case 5:return Vv;case 6:return o=e.c,C=e.d,s(wm,b,Nm(F=e.a),o,C);case 7:return o=e.c,C=e.d,v(lm,b,g,h,Nm(F=e.a),o,C);case 8:case 9:default:return Vv}}else{var x=m.a;switch(e.$){case 0:case 1:return Vv;case 2:o=e.c;var C=e.d;return s(am,x,Nm(F=e.a),o,C);case 3:return Vv;case 4:return o=e.c,C=e.d,s(am,x,Nm(F=e.a),o,C);case 5:return Vv;case 6:case 7:return o=e.c,C=e.d,s(am,x,Nm(F=e.a),o,C);case 8:case 9:default:return Vv}}default:var P=s(Mm,n.b,n.c,n.d,n.e);if(P.$){var M=P.a,T=M.a,y=M.b,L=P.b,w=L.a,D=L.b,S=P.c,$=S.a,N=S.b,z=P.d;switch(g=z.a,h=z.b,e.$){case 0:case 1:case 2:case 3:case 4:case 5:return Vv;case 6:return o=e.c,a=e.d,function(n,e,r,t,o,a,i,c,l,u){return 9===n.a?n.f(e,r,t,o,a,i,c,l,u):n(e)(r)(t)(o)(a)(i)(c)(l)(u)}(Dm,T,y,w,D,$,N,Nm(F=e.a),o,a);case 7:return F=e.a,o=e.c,a=e.d,function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(s){return function(v){return function(m){return u(kv,s,l((function(l,u,s,b,p,g,h,x){var C=h.a,P=h.b;return d(is,f(Iv,b,m,x),cm,um,v,{cc:n,cg:e,ch:a,ci:t,R:P,bl:C.bl,bS:C.bS,bT:C.bT,bU:C.bU,cC:o,b:s,c:u,aY:i,d:g,cZ:r,e:l,a3:c,f:p})})))}}}}}}}}}}}(T)(y)(w)(D)($)(N)(g)(h)(Nm(F))(o)(a);case 8:case 9:default:return Vv}}else{var _=P.a,R=P.b,A=P.c;switch(e.$){case 0:case 1:return Vv;case 2:return o=e.c,a=e.d,v(sm,_,R,A,Nm(F=e.a),o,a);case 3:return Vv;case 4:return o=e.c,a=e.d,v(sm,_,R,A,Nm(F=e.a),o,a);case 5:return Vv;case 6:return o=e.c,a=e.d,v(sm,_,R,A,Nm(F=e.a),o,a);case 7:var F;return o=e.c,a=e.d,v(sm,_,R,A,Nm(F=e.a),o,a);case 8:case 9:default:return Vv}}}})),_m=function(n){return n.bC},Rm=function(n){return n.bD},Am=function(n){return n.fK},Fm=function(n){var e=n,r=Am(e.dd),t=Rm(e.dd),o=_m(e.dd),a=Am(e.dc),i=Rm(e.dc),c=_m(e.dc),l=Am(e.db),u=Rm(e.db),f=_m(e.db);return f*i*r+u*a*o+l*c*t-l*i*o-u*c*r-f*a*t>0},Vm=r((function(n,e){return{$:5,a:n,b:e}})),km=r((function(n,e){var r=e;switch(r.$){case 0:return Vv;case 5:var t=r.b;return u(Vm,u(Gf,r.a,n),t);case 1:case 3:case 2:default:return u(Vm,n,r)}})),Bm=r((function(n,e){return u(km,function(n){var e=Yl(n),r=eu(n),t=nu(n),o=Ql(n);return{dz:Fm(n),q:o.bC,r:o.bD,s:o.fK,t:t.bC,u:t.bD,v:t.fK,w:r.bC,x:r.bD,y:r.fK,H:e.bC,I:e.bD,J:e.fK,b3:1}}(n),e)})),Em=function(n){return{$:2,a:n}},Km=r((function(n,e){var r=n.a,t=n.b,o=n.c,a=e.eG;return{eG:{bC:r*a.bC,bD:t*a.bD,fK:o*a.fK},eW:r*e.eW,eX:t*e.eX,eY:o*e.eY}})),jm=function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){var f,s,d={bC:(s=t)[0],bD:s[1],fK:s[2],et:s[3]},v=(f={et:d.et,bC:d.bC*n.a,bD:d.bD*n.b,fK:d.fK*n.c},new Float64Array([f.bC,f.bD,f.fK,f.et]));return b(e,r,v,o,a,i,c,l,u)}}}}}}}}}},Im=r((function(n,e){switch(e.$){case 0:return Fv;case 5:return u(Vm,e.a,u(Im,n,e.b));case 1:var r=e.b;return u(kv,u(Km,n,e.a),u(jm,n,r));case 3:return e;case 2:return Em(u(jm,n,r=e.a));default:var t=e.a;return Gs(u(jt,Im(n),t))}})),Hm=r((function(n,e){return u(Im,n,e)})),Um={src:"\n        precision lowp float;\n        \n        void main () {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        }\n    ",attributes:{},uniforms:{}},Wm=f(vs,{cx:0,cV:0,da:15},{be:gs,bt:ts,bE:gs,bF:7683},{be:gs,bt:ts,bE:gs,bF:7682}),Om=f(vs,{cx:0,cV:0,da:15},{be:gs,bt:ts,bE:gs,bF:7682},{be:gs,bt:ts,bE:gs,bF:7683}),Gm=r((function(n,e){return u(yr,n?Om:Wm,e)})),Ym={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 shadowVertexPosition(vec3 position, vec3 normal, mat4 shadowLight, vec4 modelScale, mat4 modelMatrix, mat4 viewMatrix, mat4 projectionMatrix, mat4 sceneProperties) {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            vec3 worldNormal = getWorldNormal(normal, vec4(modelScale.xyz, 1.0), modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 directionToLight = getDirectionToLight(worldPosition.xyz, xyz_type, rgb_parameter);\n            vec3 offset = vec3(0.0, 0.0, 0.0);\n            float sceneDiameter = sceneProperties[3][1];\n            if (dot(directionToLight, worldNormal) <= 0.0) {\n                offset = -sceneDiameter * directionToLight;\n            } else {\n                offset = -0.001 * sceneDiameter * directionToLight;\n            }\n            vec4 offsetPosition = worldPosition + vec4(offset, 0.0);\n            return projectionMatrix * (viewMatrix * offsetPosition);\n        }\n        \n        void main () {\n            gl_Position = shadowVertexPosition(\n                position,\n                normal,\n                shadowLight,\n                modelScale,\n                modelMatrix,\n                viewMatrix,\n                projectionMatrix,\n                sceneProperties\n            );\n        }\n    ",attributes:{normal:"o",position:"b$"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"b4",viewMatrix:"f"}},qm=function(n){var e=function(n){if(n.$){var e=n.c;return Br(l((function(n,r,t,o,a,i,c,l){return d(is,u(Gm,o,l),Ym,Um,e,{b:t,c:r,d:i,e:n,b4:c,f:a})})))}return Er}(n);return e.$?Vv:Em(e.a)},Xm=o((function(n,e,r,t){var o,a=u(zm,r,cv),i=(o=L(n,e)).a?o.b?qs(_([a,qm(Av)])):a:o.b?qm(Av):Vv,c=Fu(t),l=c.a,f=c.b,s=c.c;return u(Bm,Au(t),u(Hm,w(l,f,s),i))})),Zm=r((function(n,e){return s(Xm,!0,!0,n,e)})),Jm=function(n){return{$:0,a:n}},Qm=r((function(n,e){return{$:0,a:n,b:e}})),nb=function(n){return ql(n)},eb=r((function(n,e){return e/n})),rb=function(n){var e=n;return{bC:ql(e),bD:Xl(e)}},tb=r((function(n,e){var r=n.b$;return u(yr,{o:Zd(n.o),b$:Xd(r)},e)})),ob=c((function(n,e,r,t,o,a,i){for(;;){if(!i.b)return Hd({dY:e,dZ:t,d_:a,d$:n,d0:r,d1:o});var c=i.a,l=i.b,f=Os(c.b$),s=Ws(c.b$),d=Us(c.b$);n=u(ks,n,d),e=u(st,e,d),r=u(ks,r,s),t=u(st,t,s),o=u(ks,o,f),a=u(st,a,f),i=l}})),ab=r((function(n,e){var r=Os(n.b$),t=Ws(n.b$),o=Us(n.b$);return m(ob,o,o,t,t,r,r,e)})),ib=r((function(n,e){var r=n.dc,t=n.db;return{bC:e.bC*t.bC+e.bD*r.bC,bD:e.bC*t.bD+e.bD*r.bD,fK:e.bC*t.fK+e.bD*r.fK}})),cb=function(n){return Xl(n)},lb=function(n){return 6.283185307179586*n},ub=hu({cG:gu,db:xu,dc:Yu}),fb=(Qo=u(eb,72,lb(1)),na=Cu,ea={bC:0,bD:0,fK:-1},ta=f(iv,0,0,ra=u(lf,.5,1)),aa=f(iv,0,0,oa=u(lf,-.5,1)),Bd(function(n){var e=f(wr,tb,$,gv(n));if(e.b){var r=e.a,t=e.b,o=u(yv,e,sv(n));return s(Rd,u(ab,r,t),n,o,0)}return Ed}(_v(_f(u(jt,(function(n){var e=u(lf,n,Qo),r=u(ib,ub,rb(e)),t=u(lf,nb(e),1),o=u(lf,cb(e),1),a=f(iv,t,o,ra),i=f(iv,t,o,oa),c=u(lf,u(nc,72,n+1),Qo),l=u(ib,ub,rb(c)),s=u(lf,nb(c),1),d=u(lf,cb(c),1),v=f(iv,s,d,oa),m=f(iv,s,d,ra);return _([w({o:ea,b$:aa},{o:ea,b$:v},{o:ea,b$:i}),w({o:r,b$:i},{o:l,b$:v},{o:l,b$:m}),w({o:r,b$:i},{o:l,b$:m},{o:r,b$:a}),w({o:na,b$:ta},{o:na,b$:a},{o:na,b$:m})])}),u(Yr,0,71))))))),sb=Rv(fb),db=o((function(n,e,r,t){var o,a=function(n){var e,r,t=ou(n),o=L(r=function(n){var e=n,r=ic(e.fK),t=ic(e.bD),o=ic(e.bC);if(1>T(o,t)){if(1>T(o,r)){var a=Js(e.fK*e.fK+e.bD*e.bD);return{bC:0,bD:-e.fK/a,fK:e.bD/a}}return a=Js(e.bD*e.bD+e.bC*e.bC),{bC:-e.bD/a,bD:e.bC/a,fK:0}}return 1>T(t,r)?(a=Js(e.fK*e.fK+e.bC*e.bC),{bC:e.fK/a,bD:0,fK:-e.bC/a}):(a=Js(e.bC*e.bC+e.bD*e.bD),{bC:-e.bD/a,bD:e.bC/a,fK:0})}(e=t),{bC:e.bD*r.fK-e.fK*r.bD,bD:e.fK*r.bC-e.bC*r.fK,fK:e.bC*r.bD-e.bD*r.bC}),a=o.a,i=o.b;return{cG:mf(n),db:a,dc:i,dd:t}}(df(t)),i=u(zm,r,fb),c=(o=L(n,e)).a?o.b?qs(_([i,qm(sb)])):i:o.b?qm(sb):Vv,l=pf(t),f=bf(t);return u(Bm,a,u(Hm,w(l,l,f),c))})),vb=r((function(n,e){return s(db,!0,!0,n,e)})),mb={src:"\n        precision highp float;\n        \n        attribute lowp float triangleVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 triangleVertexPositions;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleVertex), triangleVertexPositions, position, normal);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{triangleVertex:"c3"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",triangleVertexPositions:"bz",viewMatrix:"f"}},bb={src:"\n        precision highp float;\n        \n        attribute lowp float triangleVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 triangleVertexPositions;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleVertex), triangleVertexPositions, position, normal);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n        }\n    ",attributes:{triangleVertex:"c3"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",triangleVertexPositions:"bz",viewMatrix:"f"}},pb=function(n){var e=n.a,r=n.b,t=n.c;return Yf({dH:e.bC,dI:r.bC,dJ:t.bC,dK:0,dL:e.bD,dM:r.bD,dN:t.bD,dO:0,dP:e.fK,dQ:r.fK,dR:t.fK,dS:0,dT:0,dU:0,dV:0,dW:0})},gb=ov(_([w({c3:0},{c3:1},{c3:2})])),hb=r((function(n,e){var r=Yd(e),t=Nm(r);switch(n.$){case 0:if(n.b.$)return Vv;var o=n.b.a;return u(kv,t,l((function(n,r,t,a,i,c,l,u){return d(is,f(Iv,a,0,u),mb,Wv,gb,{aC:o,b:t,c:r,d:c,e:n,bz:pb(e),f:i})})));case 1:if(n.b.$)return Vv;var a=n.b.a,i=n.c;return u(kv,t,l((function(n,r,t,o,c,l,s,v){return d(is,f(Iv,o,0,v),mb,Jv,gb,{aR:u(Qv,i,a),b:t,c:r,d:l,e:n,bz:pb(e),f:c})})));case 2:var c=u(pm,n.b,n.c);if(c.$)return Vv;var v=c.a;return u(kv,t,l((function(n,r,t,o,a,i,c,l){var u=c.a,s=c.b;return d(is,f(Iv,o,0,l),bb,tm,gb,{R:s,bl:u.bl,bS:u.bS,bT:u.bT,bU:u.bU,cy:v,b:t,c:r,d:i,e:n,bz:pb(e),f:a})})));default:var m=s(Mm,n.b,n.c,n.d,n.e);if(m.$)return Vv;var b=m.a,p=m.b,g=m.c;return u(kv,t,l((function(n,r,t,o,a,i,c,l){var u=c.a,s=c.b;return d(is,f(Iv,o,0,l),bb,fm,gb,{cb:b,R:s,bl:u.bl,bS:u.bS,bT:u.bT,bU:u.bU,cB:g,b:t,c:r,d:i,cY:p,e:n,bz:pb(e),f:a})})))}})),xb=(ia=_([{a2:u(us,0,1)},{a2:u(us,1,1)},{a2:u(us,2,1)},{a2:u(us,0,-1)},{a2:u(us,1,-1)},{a2:u(us,2,-1)}]),ca=_([w(0,1,2),w(3,5,4),w(3,4,1),w(3,1,0),w(4,5,2),w(4,2,1),w(5,3,0),w(5,0,2)]),u(yv,ia,ca)),Cb={src:"\n        precision highp float;\n        \n        attribute highp vec2 triangleShadowVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        uniform highp mat4 triangleVertexPositions;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 shadowVertexPosition(vec3 position, vec3 normal, mat4 shadowLight, vec4 modelScale, mat4 modelMatrix, mat4 viewMatrix, mat4 projectionMatrix, mat4 sceneProperties) {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            vec3 worldNormal = getWorldNormal(normal, vec4(modelScale.xyz, 1.0), modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 directionToLight = getDirectionToLight(worldPosition.xyz, xyz_type, rgb_parameter);\n            vec3 offset = vec3(0.0, 0.0, 0.0);\n            float sceneDiameter = sceneProperties[3][1];\n            if (dot(directionToLight, worldNormal) <= 0.0) {\n                offset = -sceneDiameter * directionToLight;\n            } else {\n                offset = -0.001 * sceneDiameter * directionToLight;\n            }\n            vec4 offsetPosition = worldPosition + vec4(offset, 0.0);\n            return projectionMatrix * (viewMatrix * offsetPosition);\n        }\n        \n        void main () {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleShadowVertex.x), triangleVertexPositions, position, normal);\n            normal *= triangleShadowVertex.y;\n            gl_Position = shadowVertexPosition(\n                position,\n                normal,\n                shadowLight,\n                modelScale,\n                modelMatrix,\n                viewMatrix,\n                projectionMatrix,\n                sceneProperties\n            );\n        }\n    ",attributes:{triangleShadowVertex:"a2"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"b4",triangleVertexPositions:"bz",viewMatrix:"f"}},Pb=function(n){return Em(l((function(e,r,t,o,a,i,c,l){return d(is,u(Gm,o,l),Cb,Um,xb,{b:t,c:r,d:i,e:e,b4:c,bz:pb(n),f:a})})))},Mb=o((function(n,e,r,t){var o=u(hb,r,t),a=L(n,e);return a.a?a.b?qs(_([o,Pb(t)])):o:a.b?Pb(t):Vv})),Tb=r((function(n,e){return s(Mb,!0,!0,n,e)})),yb=r((function(n,e){var r=Gd(e),t=Gd(n),o=Od(e),a=Od(n),i=Wd(e),c=Wd(n);return{dY:u(Vs,c,i),dZ:u(Vs,a,o),d_:u(Vs,t,r),d$:u(Bs,c,i),d0:u(Bs,a,o),d1:u(Bs,t,r)}})),Lb={src:"\n        precision highp float;\n        \n        attribute lowp float lineSegmentVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp vec3 lineSegmentStartPoint;\n        uniform highp vec3 lineSegmentEndPoint;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = (1.0 - lineSegmentVertex) * lineSegmentStartPoint + lineSegmentVertex * lineSegmentEndPoint;\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{lineSegmentVertex:"dG"},uniforms:{lineSegmentEndPoint:"dE",lineSegmentStartPoint:"dF",modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},wb=r((function(n,e){return{$:1,a:n,b:e}}))({$7:2,dy:0,d3:1})(_([L({dG:0},{dG:1})])),Db=r((function(n,e){var r,t=u(yb,(r=e).a,r.b),o=Nm(t),a=e.a,i=e.b;switch(n.$){case 0:if(n.b.$)return Vv;var c=n.b.a;return u(kv,o,l((function(n,e,r,t,o,l,u,f){return d(is,f,Lb,Wv,wb,{aC:c,dE:Xd(i),dF:Xd(a),b:r,c:e,d:l,e:n,f:o})})));case 1:if(n.b.$)return Vv;c=n.b.a;var f=n.c;return u(kv,o,l((function(n,e,r,t,o,l,s,v){return d(is,v,Lb,Jv,wb,{aR:u(Qv,f,c),dE:Xd(i),dF:Xd(a),b:r,c:e,d:l,e:n,f:o})})));case 2:default:return Vv}})),Sb=r((function(n,e){return u(Db,n,e)})),$b=t((function(n,e,r){return{$:2,a:n,b:e,c:r}})),Nb=function(n){return f(xd,0,1,n>.04045?u(zi,(n+.055)/1.055,2.4):n/12.92)},zb=function(n){return f($b,0,Jm(function(n){var e=tc(n),r=e.cl,t=e.cd;return f(Wf,Nb(e.cU),Nb(r),Nb(t))}(n)),Jm(0))},_b=r((function(n,e){return n/e})),Rb=a((function(n,e,r,t,o){for(;;){var a=t(e/r),i=u(yr,a,o);if(P(e,n))return i;n=n,e-=1,r=r,t=t,o=i}})),Ab=r((function(n,e){return 1>n?$:d(Rb,0,n,n,e,$)})),Fb=r((function(n,e){var r=n.b$,t=n.L,o=t.a,a=t.b;return u(yr,{o:Zd(n.o),b$:Xd(r),L:u(us,o,a)},e)})),Vb=r((function(n,e){var r=n,t=e,o=ql(t);return{bC:o*ql(r),bD:o*Xl(r),fK:Xl(t)}})),kb=(la=u(Yr,0,71),ua=u(Ab,72,u(Sm,0,lb(1))),fa=rt(36),sa=u(Yr,0,fa-1),da=u(Ab,fa,u(Sm,Hl(90),Hl(-90))),va=Cv(_f(u(jt,(function(n){return u(jt,(function(e){return{o:u(Vb,n,e),b$:f(iv,u(lf,nb(e)*nb(n),1),u(lf,nb(e)*cb(n),1),u(lf,cb(e),1)),L:L(u(_b,n,lb(1)),u(_b,u(Ks,Hl(90),e),Hl(180)))}}),da)}),ua))),ma=r((function(n,e){return n*(fa+1)+e})),ba=_f(u(jt,(function(n){return _f(u(jt,(function(e){var r=u(ma,n+1,e),t=u(ma,n,e),o=u(ma,n+1,e+1),a=u(ma,n,e+1);return _([w(a,o,r),w(a,r,t)])}),sa))}),la)),Bd(function(n){var e=f(wr,Fb,$,gv(n));if(e.b){var r=e.a,t=e.b,o=u(yv,e,sv(n));return s(Ad,u(ab,r,t),n,o,0)}return Ed}(u(Tv,va,ba)))),Bb=r((function(n,e){for(;;){var r=u(nc,144,2*n+3),t=u(nc,144,2*n+2),o=2*n+1,a=2*n,i=u(yr,w(144,a,t),u(yr,w(a,r,t),u(yr,w(a,o,r),u(yr,w(o,145,r),e))));if(!n)return i;n-=1,e=i}})),Eb=t((function(n,e,r){return r>.5?e+(1-r)*(n-e):n+r*(e-n)})),Kb=(pa=u(r((function(n,e){for(;;){var r=f(Eb,0,6.283185307179586,n/72),t=u(yr,{bH:r,bX:0,b2:1},u(yr,{bH:r,bX:1,b2:1},e));if(!n)return t;n-=1,e=t}})),71,_([{bH:0,bX:0,b2:0},{bH:0,bX:1,b2:0}])),u(yv,pa,u(Bb,71,$))),jb={src:"\n        precision highp float;\n        \n        attribute highp float angle;\n        attribute highp float offsetScale;\n        attribute highp float radiusScale;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const lowp float kPerspectiveProjection = 0.0;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec3 perpendicularTo(vec3 d) {\n            float absX = abs(d.x);\n            float absY = abs(d.y);\n            float absZ = abs(d.z);\n            if (absX <= absY) {\n                if (absX <= absZ) {\n                    float scale = 1.0 / length(d.zy);\n                    return vec3(0.0, -d.z * scale, d.y * scale);\n                } else {\n                    float scale = 1.0 / length(d.xy);\n                    return vec3(-d.y * scale, d.x * scale, 0.0);\n                }\n            } else {\n                if (absY <= absZ) {\n                    float scale = 1.0 / length(d.xz);\n                    return vec3(d.z * scale, 0.0, -d.x * scale);\n                } else {\n                    float scale = 1.0 / length(d.xy);\n                    return vec3(-d.y * scale, d.x * scale, 0.0);\n                }\n            }\n        }\n        \n        void main () {\n            vec4 worldCenter = getWorldPosition(vec3(0.0, 0.0, 0.0), modelScale, modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 zDirection = getDirectionToLight(worldCenter.xyz, xyz_type, rgb_parameter);\n            vec3 xDirection = perpendicularTo(zDirection);\n            vec3 yDirection = cross(zDirection, xDirection);\n            float r = modelScale.x;\n            float adjustedRadius = r;\n            float zOffset = 0.0;\n            if (xyz_type.w == kPointLight) {\n                float distanceToLight = length(xyz_type.xyz - worldCenter.xyz);\n                float rSquared = r * r;\n                zOffset = rSquared / distanceToLight;\n                float zSquared = zOffset * zOffset;\n                adjustedRadius = sqrt(rSquared - zSquared) * radiusScale;\n            }\n            vec3 worldPosition =\n                worldCenter.xyz\n                    + zDirection * zOffset\n                    + xDirection * adjustedRadius * cos(angle)\n                    + yDirection * adjustedRadius * sin(angle);\n            vec3 directionToLight = getDirectionToLight(worldPosition, xyz_type, rgb_parameter);\n            float sceneDiameter = sceneProperties[3][1];\n            vec3 offset = -sceneDiameter * offsetScale * directionToLight;\n            vec4 offsetPosition = vec4(worldPosition + offset, 1.0);\n            gl_Position = projectionMatrix * (viewMatrix * offsetPosition);\n        }\n    ",attributes:{angle:"bH",offsetScale:"bX",radiusScale:"b2"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"b4",viewMatrix:"f"}},Ib=function(){return Em(l((function(n,e,r,t,o,a,i,c){return d(is,u(Gm,!0,c),jb,Um,Kb,{aC:f(Wf,0,0,1),b:r,c:e,d:a,e:n,b4:i,f:o})})))},Hb=r((function(n,e){return u(km,function(n){return{dz:!0,q:1,r:0,s:0,t:0,u:1,v:0,w:0,x:0,y:1,H:n.bC,I:n.bD,J:n.fK,b3:1}}(n),e)})),Ub=o((function(n,e,r,t){var o,a=u(zm,r,kb),i=(o=L(n,e)).a?o.b?qs(_([a,Ib()])):a:o.b?Ib():Vv,c=Iu(t);return u(Hb,u(Qd,gu,ju(t)),u(Hm,w(c,c,c),i))})),Wb=r((function(n,e){return s(Ub,!0,!0,n,e)})),Ob=function(n){switch(n.$){case 0:var e=n.b;return _([u(Zm,zb(n.a),e)]);case 1:var r=n.b;return _([u(Tb,zb(n.a),r)]);case 3:var t=n.b;return _([u(Wb,zb(n.a),t)]);case 2:var o=n.b;return _([u(vb,zb(n.a),o)]);case 4:var a=n.b;return _([u(Sb,(i=n.a,u(Qm,0,Jm(function(n){var e=tc(n);return f(Wf,e.cU,e.cl,e.cd)}(i)))),a)]);default:return u(Rf,Ob,n.a)}var i},Gb=r((function(n,e){return function(n){var e,r=u(bd,n.fn,{ce:Md,eK:n.fu,cn:8e4}),t=hd({ce:Pd,cn:2e4,b6:n.b6}),o=hd({ce:md,cn:15e3,b6:uf(n.b6)}),a=f(Nd,r,t,o);return function(n){return u(vd,{ev:n.ev,dg:n.dg,eD:n.eD,dk:n.dk,dn:n.dn},_([{dr:n.dr,eR:n.eR,e7:n.e7,fx:n.fx,fC:n.fC}]))}({ev:(e=n.cj,{$:2,a:e}),dg:n.dg,eD:n.eD,dk:n.dk,dn:n.dn,dr:n.dr,eR:1.2*u(zi,2,15),e7:a,fx:pd,fC:md})}({dg:n.eA,eD:n.eD,dk:.005,cj:n.cj,dn:L(_i(n.aa.c9),_i(n.aa.cm)),dr:(r=e,u(Rf,Ob,r)),fn:!0,fu:u(Vb,n.ft,n.fv),b6:Pu});var r}));ga={Main:{init:s(_l,r((function(n){return u(Gb,{eA:u(Du,"background color",n),eD:Tu(n),cj:n.cj,aa:n.aa,ft:-yu(135),fv:-yu(45)},_([wf(n),u(Xu,yu(120),wf(n)),u(Xu,yu(240),wf(n))]))})),El,Bl,(function(){return{}}))(u(Ct,(function(n){return Lt({cj:n})}),u(Pt,"devicePixelRatio",Mt)))(0)}},n.Elm?function n(e,r){for(var t in r)t in e?"init"==t?C(6):n(e[t],r[t]):e[t]=r[t]}(n.Elm,ga):n.Elm=ga}(n);const e=n.Elm.Main.init({node:document.getElementById("elm-node"),flags:{devicePixelRatio:window.devicePixelRatio}});function r(n){const e=[];for(let r=0;r<n.length;r++)e.push({identifier:n[r].identifier,pageX:n[r].pageX,pageY:n[r].pageY});return e}window.addEventListener("touchstart",(n=>{e.ports.touchStart.send(r(n.changedTouches))})),window.addEventListener("touchmove",(n=>{e.ports.touchMove.send(r(n.changedTouches))})),window.addEventListener("touchend",(n=>{e.ports.touchEnd.send(r(n.changedTouches))})),window.addEventListener("touchcancel",(n=>{e.ports.touchCancel.send(r(n.changedTouches))}))}();
//# sourceMappingURL=index.d3d20249.js.map
