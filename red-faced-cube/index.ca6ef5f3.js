!function(){var n={};!function(n){function e(n,e,r){return r.a=n,r.f=e,r}function r(n){return e(2,n,(function(e){return function(r){return n(e,r)}}))}function t(n){return e(3,n,(function(e){return function(r){return function(t){return n(e,r,t)}}}))}function o(n){return e(4,n,(function(e){return function(r){return function(t){return function(o){return n(e,r,t,o)}}}}))}function a(n){return e(5,n,(function(e){return function(r){return function(t){return function(o){return function(a){return n(e,r,t,o,a)}}}}}))}function i(n){return e(6,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return n(e,r,t,o,a,i)}}}}}}))}function c(n){return e(7,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return n(e,r,t,o,a,i,c)}}}}}}}))}function l(n){return e(8,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return n(e,r,t,o,a,i,c,l)}}}}}}}}))}function u(n,e,r){return 2===n.a?n.f(e,r):n(e)(r)}function f(n,e,r,t){return 3===n.a?n.f(e,r,t):n(e)(r)(t)}function s(n,e,r,t,o){return 4===n.a?n.f(e,r,t,o):n(e)(r)(t)(o)}function d(n,e,r,t,o,a){return 5===n.a?n.f(e,r,t,o,a):n(e)(r)(t)(o)(a)}function v(n,e,r,t,o,a,i){return 6===n.a?n.f(e,r,t,o,a,i):n(e)(r)(t)(o)(a)(i)}function m(n,e,r,t,o,a,i,c){return 7===n.a?n.f(e,r,t,o,a,i,c):n(e)(r)(t)(o)(a)(i)(c)}function b(n,e,r,t,o,a,i,c,l){return 8===n.a?n.f(e,r,t,o,a,i,c,l):n(e)(r)(t)(o)(a)(i)(c)(l)}var p=t((function(n,e,r){for(var t=Array(n),o=0;n>o;o++)t[o]=r(e+o);return t})),g=r((function(n,e){for(var r=Array(n),t=0;n>t&&e.b;t++)r[t]=e.a,e=e.b;return r.length=t,w(r,e)})),h=r((function(n,e){return e[n]})),x=t((function(n,e,r){for(var t=r.length-1;t>=0;t--)e=u(n,r[t],e);return e}));function P(n){throw Error("https://github.com/elm/core/blob/1.0.0/hints/"+n+".md")}function C(n,e){for(var r,t=[],o=M(n,e,0,t);o&&(r=t.pop());o=M(r.a,r.b,0,t));return o}function M(n,e,r,t){if(n===e)return!0;if("object"!=typeof n||null===n||null===e)return"function"==typeof n&&P(5),!1;if(r>100)return t.push(w(n,e)),!0;for(var o in 0>n.$&&(n=$r(n),e=$r(e)),n)if(!M(n[o],e[o],r+1,t))return!1;return!0}var T=r(C);function y(n,e,r){if("object"!=typeof n)return n===e?0:e>n?-1:1;if(void 0===n.$)return(r=y(n.a,e.a))||(r=y(n.b,e.b))?r:y(n.c,e.c);for(;n.b&&e.b&&!(r=y(n.a,e.a));n=n.b,e=e.b);return r||(n.b?1:e.b?-1:0)}var L=r((function(n,e){var r=y(n,e);return 0>r?Dr:r?Ir:Hr}));function w(n,e){return{a:n,b:e}}function S(n,e,r){return{a:n,b:e,c:r}}function N(n,e){var r={};for(var t in n)r[t]=n[t];for(var t in e)r[t]=e[t];return r}function $(n,e){if("string"==typeof n)return n+e;if(!n.b)return e;var r=I(n.a,e);n=n.b;for(var t=r;n.b;n=n.b)t=t.b=I(n.a,e);return r}var H={$:0};function I(n,e){return{$:1,a:n,b:e}}var D=r(I);function _(n){for(var e=H,r=n.length;r--;)e=I(n[r],e);return e}function z(n){for(var e=[];n.b;n=n.b)e.push(n.a);return e}var A=t((function(n,e,r){for(var t=[];e.b&&r.b;e=e.b,r=r.b)t.push(u(n,e.a,r.a));return _(t)})),R=r((function(n,e){return n*e})),Y=r(Math.pow),k=r((function(n,e){var r=e%n;return 0===n?P(11):r>0&&0>n||0>r&&n>0?r+n:r})),V=Math.cos,j=Math.sin,F=Math.tan,E=Math.ceil,B=Math.floor,U=Math.round,W=Math.sqrt,O=Math.log,G=isNaN,q=r((function(n,e){return n+e})),Z=t((function(n,e,r){for(var t=r.length;t--;){var o=r[t],a=r.charCodeAt(t);56320>a||a>57343||(o=r[--t]+o),e=u(n,o,e)}return e})),X=r((function(n,e){return e.split(n)})),J=r((function(n,e){return e.join(n)})),Q=t((function(n,e,r){return r.slice(n,e)})),K=r((function(n,e){return 0===e.indexOf(n)}));function nn(n){return n+""}function en(n){return{$:2,b:n}}var rn=en((function(n){return"number"!=typeof n?xn("an INT",n):n>-2147483647&&2147483647>n&&(0|n)===n?Yr(n):!isFinite(n)||n%1?xn("an INT",n):Yr(n)})),tn=en((function(n){return"boolean"==typeof n?Yr(n):xn("a BOOL",n)})),on=en((function(n){return"number"==typeof n?Yr(n):xn("a FLOAT",n)})),an=(en((function(n){return Yr(n)})),en((function(n){return"string"==typeof n?Yr(n):n instanceof String?Yr(n+""):xn("a STRING",n)}))),cn=r((function(n,e){return{$:6,d:n,b:e}}));function ln(n,e){return{$:9,f:n,g:e}}var un=r((function(n,e){return{$:10,b:e,h:n}})),fn=r((function(n,e){return ln(n,[e])})),sn=t((function(n,e,r){return ln(n,[e,r])})),dn=o((function(n,e,r,t){return ln(n,[e,r,t])})),vn=r((function(n,e){try{return bn(n,JSON.parse(e))}catch(n){return _r(u(zr,"This is not valid JSON! "+n.message,e))}})),mn=r((function(n,e){return bn(n,e)}));function bn(n,e){switch(n.$){case 2:return n.b(e);case 5:return null===e?Yr(n.c):xn("null",e);case 3:return gn(e)?pn(n.b,e,_):xn("a LIST",e);case 4:return gn(e)?pn(n.b,e,hn):xn("an ARRAY",e);case 6:var r=n.d;if("object"!=typeof e||null===e||!(r in e))return xn("an OBJECT with a field named `"+r+"`",e);var t=bn(n.b,e[r]);return Ct(t)?t:_r(u(Ar,r,t.a));case 7:var o=n.e;return gn(e)?e.length>o?(t=bn(n.b,e[o]),Ct(t)?t:_r(u(Rr,o,t.a))):xn("a LONGER array. Need index "+o+" but only see "+e.length+" entries",e):xn("an ARRAY",e);case 8:if("object"!=typeof e||null===e||gn(e))return xn("an OBJECT",e);var a=H;for(var i in e)if(e.hasOwnProperty(i)){if(t=bn(n.b,e[i]),!Ct(t))return _r(u(Ar,i,t.a));a=I(w(i,t.a),a)}return Yr(Qr(a));case 9:for(var c=n.f,l=n.g,f=0;l.length>f;f++){if(t=bn(l[f],e),!Ct(t))return t;c=c(t.a)}return Yr(c);case 10:return t=bn(n.b,e),Ct(t)?bn(n.h(t.a),e):t;case 11:for(var s=H,d=n.g;d.b;d=d.b){if(t=bn(d.a,e),Ct(t))return t;s=I(t.a,s)}return _r(kr(Qr(s)));case 1:return _r(u(zr,n.a,e));case 0:return Yr(n.a)}}function pn(n,e,r){for(var t=e.length,o=Array(t),a=0;t>a;a++){var i=bn(n,e[a]);if(!Ct(i))return _r(u(Rr,a,i.a));o[a]=i.a}return Yr(r(o))}function gn(n){return Array.isArray(n)||"undefined"!=typeof FileList&&n instanceof FileList}function hn(n){return u(Pt,n.length,(function(e){return n[e]}))}function xn(n,e){return _r(u(zr,"Expecting "+n,e))}function Pn(n,e){if(n===e)return!0;if(n.$!==e.$)return!1;switch(n.$){case 0:case 1:return n.a===e.a;case 2:return n.b===e.b;case 5:return n.c===e.c;case 3:case 4:case 8:return Pn(n.b,e.b);case 6:return n.d===e.d&&Pn(n.b,e.b);case 7:return n.e===e.e&&Pn(n.b,e.b);case 9:return n.f===e.f&&Cn(n.g,e.g);case 10:return n.h===e.h&&Pn(n.b,e.b);case 11:return Cn(n.g,e.g)}}function Cn(n,e){var r=n.length;if(r!==e.length)return!1;for(var t=0;r>t;t++)if(!Pn(n[t],e[t]))return!1;return!0}var Mn=r((function(n,e){return JSON.stringify(e,null,n)+""}));function Tn(n){return n}var yn=t((function(n,e,r){return r[n]=e,r}));function Ln(n){return{$:0,a:n}}function wn(n){return{$:2,b:n,c:null}}var Sn=r((function(n,e){return{$:3,b:n,d:e}})),Nn=0;function $n(n){var e={$:0,e:Nn++,f:n,g:null,h:[]};return An(e),e}function Hn(n){return wn((function(e){e(Ln($n(n)))}))}function In(n,e){n.h.push(e),An(n)}var Dn=r((function(n,e){return wn((function(r){In(n,e),r(Ln(0))}))})),_n=!1,zn=[];function An(n){if(zn.push(n),!_n){for(_n=!0;n=zn.shift();)Rn(n);_n=!1}}function Rn(n){for(;n.f;){var e=n.f.$;if(0===e||1===e){for(;n.g&&n.g.$!==e;)n.g=n.g.i;if(!n.g)return;n.f=n.g.b(n.f.a),n.g=n.g.i}else{if(2===e)return void(n.f.c=n.f.b((function(e){n.f=e,An(n)})));if(5===e){if(0===n.h.length)return;n.f=n.f.b(n.h.shift())}else n.g={$:3===e?0:1,b:n.f.b,i:n.g},n.f=n.f.d}}}var Yn={};function kn(n,e,r,t,o){return{b:n,c:e,d:r,e:t,f:o}}function Vn(n,e){var r={g:e,h:void 0},t=n.c,o=n.d,a=n.e,i=n.f;return r.h=$n(u(Sn,(function n(e){return u(Sn,n,{$:5,b:function(n){var c=n.a;return 0===n.$?f(o,r,c,e):a&&i?s(t,r,c.i,c.j,e):f(t,r,a?c.i:c.j,e)}})}),n.b))}var jn=r((function(n,e){return wn((function(r){n.g(e),r(Ln(0))}))})),Fn=r((function(n,e){return u(Dn,n.h,{$:0,a:e})}));function En(n){return function(e){return{$:1,k:n,l:e}}}function Bn(n){return{$:2,m:n}}var Un=r((function(n,e){return{$:3,n:n,o:e}})),Wn=[],On=!1;function Gn(n,e,r){if(Wn.push({p:n,q:e,r:r}),!On){On=!0;for(var t;t=Wn.shift();)qn(t.p,t.q,t.r);On=!1}}function qn(n,e,r){var t={};for(var o in Zn(!0,e,t,null),Zn(!1,r,t,null),n)In(n[o],{$:"fx",a:t[o]||{i:H,j:H}})}function Zn(n,e,r,t){switch(e.$){case 1:var o=e.k,a=function(n,e,r,t){return u(n?Yn[e].e:Yn[e].f,(function(n){for(var e=r;e;e=e.t)n=e.s(n);return n}),t)}(n,o,t,e.l);return void(r[o]=function(n,e,r){return r=r||{i:H,j:H},n?r.i=I(e,r.i):r.j=I(e,r.j),r}(n,a,r[o]));case 2:for(var i=e.m;i.b;i=i.b)Zn(n,i.a,r,t);return;case 3:return void Zn(n,e.o,r,{s:e.n,t:t})}}function Xn(n,e){return function(n){Yn[n]&&P(3)}(n),Yn[n]={f:Jn,u:e,a:Qn},En(n)}var Jn=r((function(n,e){return function(r){return n(e(r))}}));function Qn(n,e){var r=H,o=Yn[n].u,a=Ln(null);return Yn[n].b=a,Yn[n].c=t((function(n,e){return r=e,a})),{send:function(n){var t=u(mn,o,n);Ct(t)||P(4);for(var a=t.a,i=r;i.b;i=i.b)e(i.a(a))}}}var Kn="undefined"!=typeof document?document:{};function ne(n,e){n.appendChild(e)}function ee(n){return{$:0,a:n}}var re,te=r((function(n,e){return r((function(r,t){for(var o=[],a=0;t.b;t=t.b){var i=t.a;a+=i.b||0,o.push(i)}return a+=o.length,{$:1,c:e,d:fe(r),e:o,f:n,b:a}}))}))(void 0),oe=r((function(n,e){return r((function(r,t){for(var o=[],a=0;t.b;t=t.b){var i=t.a;a+=i.b.b||0,o.push(i)}return a+=o.length,{$:2,c:e,d:fe(r),e:o,f:n,b:a}}))}))(void 0),ae=r((function(n,e){return{$:4,j:n,k:e,b:1+(e.b||0)}})),ie=r((function(n,e){return{$:"a0",n:n,o:e}})),ce=r((function(n,e){return{$:"a1",n:n,o:e}})),le=r((function(n,e){return{$:"a2",n:n,o:e}})),ue=r((function(n,e){return{$:"a3",n:n,o:e}}));function fe(n){for(var e={};n.b;n=n.b){var r=n.a,t=r.$,o=r.n,a=r.o;if("a2"!==t){var i=e[t]||(e[t]={});"a3"===t&&"class"===o?se(i,o,a):i[o]=a}else"className"===o?se(e,o,a):e[o]=a}return e}function se(n,e,r){var t=n[e];n[e]=t?t+" "+r:r}function de(n,e){var r=n.$;if(5===r)return de(n.k||(n.k=n.m()),e);if(0===r)return Kn.createTextNode(n.a);if(4===r){for(var t=n.k,o=n.j;4===t.$;)"object"!=typeof o?o=[o,t.j]:o.push(t.j),t=t.k;var a={j:o,p:e};return(i=de(t,a)).elm_event_node_ref=a,i}if(3===r)return ve(i=n.h(n.g),e,n.d),i;var i=n.f?Kn.createElementNS(n.f,n.c):Kn.createElement(n.c);ve(i,e,n.d);for(var c=n.e,l=0;c.length>l;l++)ne(i,de(1===r?c[l]:c[l].b,e));return i}function ve(n,e,r){for(var t in r){var o=r[t];"a1"===t?me(n,o):"a0"===t?ge(n,e,o):"a3"===t?be(n,o):"a4"===t?pe(n,o):("value"!==t&&"checked"!==t||n[t]!==o)&&(n[t]=o)}}function me(n,e){var r=n.style;for(var t in e)r[t]=e[t]}function be(n,e){for(var r in e){var t=e[r];void 0!==t?n.setAttribute(r,t):n.removeAttribute(r)}}function pe(n,e){for(var r in e){var t=e[r],o=t.f,a=t.o;void 0!==a?n.setAttributeNS(o,r,a):n.removeAttributeNS(o,r)}}function ge(n,e,r){var t=n.elmFs||(n.elmFs={});for(var o in r){var a=r[o],i=t[o];if(a){if(i){if(i.q.$===a.$){i.q=a;continue}n.removeEventListener(o,i)}i=he(e,a),n.addEventListener(o,i,re&&{passive:2>Nt(a)}),t[o]=i}else n.removeEventListener(o,i),t[o]=void 0}}try{window.addEventListener("t",null,Object.defineProperty({},"passive",{get:function(){re=!0}}))}catch(n){}function he(n,e){function r(e){var t=r.q,o=bn(t.a,e);if(Ct(o)){for(var a,i=Nt(t),c=o.a,l=i?3>i?c.a:c.av:c,u=1==i?c.b:3==i&&c.da,f=(u&&e.stopPropagation(),(2==i?c.b:3==i&&c.c$)&&e.preventDefault(),n);a=f.j;){if("function"==typeof a)l=a(l);else for(var s=a.length;s--;)l=a[s](l);f=f.p}f(l,u)}}return r.q=e,r}function xe(n,e){return n.$==e.$&&Pn(n.a,e.a)}function Pe(n,e,r,t){var o={$:e,r:r,s:t,t:void 0,u:void 0};return n.push(o),o}function Ce(n,e,r,t){if(n!==e){var o=n.$,a=e.$;if(o!==a){if(1!==o||2!==a)return void Pe(r,0,t,e);e=function(n){for(var e=n.e,r=e.length,t=Array(r),o=0;r>o;o++)t[o]=e[o].b;return{$:1,c:n.c,d:n.d,e:t,f:n.f,b:n.b}}(e),a=1}switch(a){case 5:for(var i=n.l,c=e.l,l=i.length,u=l===c.length;u&&l--;)u=i[l]===c[l];if(u)return void(e.k=n.k);e.k=e.m();var f=[];return Ce(n.k,e.k,f,0),void(f.length>0&&Pe(r,1,t,f));case 4:for(var s=n.j,d=e.j,v=!1,m=n.k;4===m.$;)v=!0,"object"!=typeof s?s=[s,m.j]:s.push(m.j),m=m.k;for(var b=e.k;4===b.$;)v=!0,"object"!=typeof d?d=[d,b.j]:d.push(b.j),b=b.k;return v&&s.length!==d.length?void Pe(r,0,t,e):((v?function(n,e){for(var r=0;n.length>r;r++)if(n[r]!==e[r])return!1;return!0}(s,d):s===d)||Pe(r,2,t,d),void Ce(m,b,r,t+1));case 0:return void(n.a!==e.a&&Pe(r,3,t,e.a));case 1:return void Me(n,e,r,t,ye);case 2:return void Me(n,e,r,t,Le);case 3:if(n.h!==e.h)return void Pe(r,0,t,e);var p=Te(n.d,e.d);p&&Pe(r,4,t,p);var g=e.i(n.g,e.g);return void(g&&Pe(r,5,t,g))}}}function Me(n,e,r,t,o){if(n.c===e.c&&n.f===e.f){var a=Te(n.d,e.d);a&&Pe(r,4,t,a),o(n,e,r,t)}else Pe(r,0,t,e)}function Te(n,e,r){var t;for(var o in n)if("a1"!==o&&"a0"!==o&&"a3"!==o&&"a4"!==o)if(o in e){var a=n[o],i=e[o];a===i&&"value"!==o&&"checked"!==o||"a0"===r&&xe(a,i)||((t=t||{})[o]=i)}else(t=t||{})[o]=r?"a1"===r?"":"a0"===r||"a3"===r?void 0:{f:n[o].f,o:void 0}:"string"==typeof n[o]?"":null;else{var c=Te(n[o],e[o]||{},o);c&&((t=t||{})[o]=c)}for(var l in e)l in n||((t=t||{})[l]=e[l]);return t}function ye(n,e,r,t){var o=n.e,a=e.e,i=o.length,c=a.length;i>c?Pe(r,6,t,{v:c,i:i-c}):c>i&&Pe(r,7,t,{v:i,e:a});for(var l=c>i?i:c,u=0;l>u;u++){var f=o[u];Ce(f,a[u],r,++t),t+=f.b||0}}function Le(n,e,r,t){for(var o=[],a={},i=[],c=n.e,l=e.e,u=c.length,f=l.length,s=0,d=0,v=t;u>s&&f>d;){var m=(w=c[s]).a,b=(S=l[d]).a,p=w.b,g=S.b,h=void 0,x=void 0;if(m!==b){var P=c[s+1],C=l[d+1];if(P){var M=P.a,T=P.b;x=b===M}if(C){var y=C.a,L=C.b;h=m===y}if(h&&x)Ce(p,L,o,++v),Se(a,o,m,g,d,i),v+=p.b||0,Ne(a,o,m,T,++v),v+=T.b||0,s+=2,d+=2;else if(h)v++,Se(a,o,b,g,d,i),Ce(p,L,o,v),v+=p.b||0,s+=1,d+=2;else if(x)Ne(a,o,m,p,++v),v+=p.b||0,Ce(T,g,o,++v),v+=T.b||0,s+=2,d+=1;else{if(!P||M!==y)break;Ne(a,o,m,p,++v),Se(a,o,b,g,d,i),v+=p.b||0,Ce(T,L,o,++v),v+=T.b||0,s+=2,d+=2}}else Ce(p,g,o,++v),v+=p.b||0,s++,d++}for(;u>s;){var w;v++,Ne(a,o,(w=c[s]).a,p=w.b,v),v+=p.b||0,s++}for(;f>d;){var S,N=N||[];Se(a,o,(S=l[d]).a,S.b,void 0,N),d++}(o.length>0||i.length>0||N)&&Pe(r,8,t,{w:o,x:i,y:N})}var we="_elmW6BL";function Se(n,e,r,t,o,a){var i=n[r];if(!i)return a.push({r:o,A:i={c:0,z:t,r:o,s:void 0}}),void(n[r]=i);if(1===i.c){a.push({r:o,A:i}),i.c=2;var c=[];return Ce(i.z,t,c,i.r),i.r=o,void(i.s.s={w:c,A:i})}Se(n,e,r+we,t,o,a)}function Ne(n,e,r,t,o){var a=n[r];if(a){if(0===a.c){a.c=2;var i=[];return Ce(t,a.z,i,o),void Pe(e,9,o,{w:i,A:a})}Ne(n,e,r+we,t,o)}else{var c=Pe(e,9,o,void 0);n[r]={c:1,z:t,r:o,s:c}}}function $e(n,e,r,t){He(n,e,r,0,0,e.b,t)}function He(n,e,r,t,o,a,i){for(var c=r[t],l=c.r;l===o;){var u=c.$;if(1===u)$e(n,e.k,c.s,i);else if(8===u)c.t=n,c.u=i,(f=c.s.w).length>0&&He(n,e,f,0,o,a,i);else if(9===u){c.t=n,c.u=i;var f,s=c.s;s&&(s.A.s=n,(f=s.w).length>0&&He(n,e,f,0,o,a,i))}else c.t=n,c.u=i;if(!(c=r[++t])||(l=c.r)>a)return t}var d=e.$;if(4===d){for(var v=e.k;4===v.$;)v=v.k;return He(n,v,r,t,o+1,a,n.elm_event_node_ref)}for(var m=e.e,b=n.childNodes,p=0;m.length>p;p++){o++;var g=1===d?m[p]:m[p].b,h=o+(g.b||0);if(!(o>l||l>h||(c=r[t=He(b[p],g,r,t,o,h,i)])&&(l=c.r)<=a))return t;o=h}return t}function Ie(n,e){for(var r=0;e.length>r;r++){var t=e[r],o=t.t,a=De(o,t);o===n&&(n=a)}return n}function De(n,e){switch(e.$){case 0:return function(n,e,r){var t=n.parentNode,o=de(e,r);return o.elm_event_node_ref||(o.elm_event_node_ref=n.elm_event_node_ref),t&&o!==n&&t.replaceChild(o,n),o}(n,e.s,e.u);case 4:return ve(n,e.u,e.s),n;case 3:return n.replaceData(0,n.length,e.s),n;case 1:return Ie(n,e.s);case 2:return n.elm_event_node_ref?n.elm_event_node_ref.j=e.s:n.elm_event_node_ref={j:e.s,p:e.u},n;case 6:for(var r=e.s,t=0;r.i>t;t++)n.removeChild(n.childNodes[r.v]);return n;case 7:for(var o=(r=e.s).e,a=n.childNodes[t=r.v];o.length>t;t++)n.insertBefore(de(o[t],e.u),a);return n;case 9:if(!(r=e.s))return n.parentNode.removeChild(n),n;var i=r.A;return void 0!==i.r&&n.parentNode.removeChild(n),i.s=Ie(n,r.w),n;case 8:return function(n,e){var r=e.s,t=function(n,e){if(n){for(var r=Kn.createDocumentFragment(),t=0;n.length>t;t++){var o=n[t].A;ne(r,2===o.c?o.s:de(o.z,e.u))}return r}}(r.y,e);n=Ie(n,r.w);for(var o=r.x,a=0;o.length>a;a++){var i=o[a],c=i.A,l=2===c.c?c.s:de(c.z,e.u);n.insertBefore(l,n.childNodes[i.r])}return t&&ne(n,t),n}(n,e);case 5:return e.s(n);default:P(10)}}function _e(n){if(3===n.nodeType)return ee(n.textContent);if(1!==n.nodeType)return ee("");for(var e=H,r=n.attributes,t=r.length;t--;){var o=r[t];e=I(u(ue,o.name,o.value),e)}var a=n.tagName.toLowerCase(),i=H,c=n.childNodes;for(t=c.length;t--;)i=I(_e(c[t]),i);return f(te,a,e,i)}var ze=o((function(n,e,r,t){return function(n,e,r,t,o,a){var i=u(mn,n,e?e.flags:void 0);Ct(i)||P(2);var c={},l=r(i.a),f=l.a,s=a(v,f),d=function(n,e){var r;for(var t in Yn){var o=Yn[t];o.a&&((r=r||{})[t]=o.a(t,e)),n[t]=Vn(o,e)}return r}(c,v);function v(n,e){var r=u(t,n,f);s(f=r.a,e),Gn(c,r.b,o(f))}return Gn(c,l.b,o(f)),d?{ports:d}:{}}(e,t,n.fa,n.fJ,n.fC,(function(e,r){var o=n.fL,a=t.node,i=_e(a);return function(n,e){e(n);var r=0;function t(){r=1===r?0:(Re(t),e(n),1)}return function(o,a){n=o,a?(e(n),2===r&&(r=1)):(0===r&&Re(t),r=2)}}(r,(function(n){var r=o(n),t=function(n,e){var r=[];return Ce(n,e,r,0),r}(i,r);a=function(n,e,r,t){return 0===r.length?n:($e(n,e,r,t),Ie(n,r))}(a,i,t,e),i=r}))}))})),Ae="undefined"!=typeof cancelAnimationFrame?cancelAnimationFrame:function(n){clearTimeout(n)},Re="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:function(n){return setTimeout(n,1e3/60)},Ye={addEventListener:function(){},removeEventListener:function(){}},ke="undefined"!=typeof document?document:Ye,Ve="undefined"!=typeof window?window:Ye,je=t((function(n,e,r){return Hn(wn((function(){function t(n){$n(r(n))}return n.addEventListener(e,t,re&&{passive:!0}),function(){n.removeEventListener(e,t)}})))})),Fe=r((function(n,e){var r=bn(n,e);return Ct(r)?Vr(r.a):jr})),Ee=r((function(n,e){var r="g";n.fj&&(r+="m"),n.eN&&(r+="i");try{return Vr(RegExp(e,r))}catch(n){return jr}})),Be=t((function(n,e,r){for(var t,o=[],a=0,i=r,c=e.lastIndex,l=-1;a++<n&&(t=e.exec(i))&&l!=e.lastIndex;){for(var u=t.length-1,f=Array(u);u>0;){var d=t[u];f[--u]=d?Vr(d):jr}o.push(s(pi,t[0],t.index,a,_(f))),l=e.lastIndex}return e.lastIndex=c,_(o)})),Ue=0;function We(n,e){for(;e.b;e=e.b)n(e.a)}function Oe(n){for(var e=0;n.b;n=n.b)e++;return e}var Ge="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:function(n){setTimeout(n,1e3/60)},qe=a((function(n,e,r,t,o){return{$:0,a:n,b:e,c:r,d:t,e:o}})),Ze=r((function(n,e){var r=n.blend;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.BLEND),r.enabled=!0),r.a===e.a&&r.d===e.d||(n.gl.blendEquationSeparate(e.a,e.d),r.a=e.a,r.d=e.d),r.b===e.b&&r.c===e.c&&r.e===e.e&&r.f===e.f||(n.gl.blendFuncSeparate(e.b,e.c,e.e,e.f),r.b=e.b,r.c=e.c,r.e=e.e,r.f=e.f),r.g===e.g&&r.h===e.h&&r.i===e.i&&r.j===e.j||(n.gl.blendColor(e.g,e.h,e.i,e.j),r.g=e.g,r.h=e.h,r.i=e.i,r.j=e.j)})),Xe=r((function(n,e){var r=n.depthTest;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.DEPTH_TEST),r.enabled=!0),r.a!==e.a&&(n.gl.depthFunc(e.a),r.a=e.a),r.b!==e.b&&(n.gl.depthMask(e.b),r.b=e.b),r.c===e.c&&r.d===e.d||(n.gl.depthRange(e.c,e.d),r.c=e.c,r.d=e.d)})),Je=r((function(n,e){var r=n.stencilTest;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.STENCIL_TEST),r.enabled=!0),r.d===e.d&&r.a===e.a&&r.b===e.b||(n.gl.stencilFuncSeparate(n.gl.FRONT,e.d,e.a,e.b),r.d=e.d),r.e===e.e&&r.f===e.f&&r.g===e.g||(n.gl.stencilOpSeparate(n.gl.FRONT,e.e,e.f,e.g),r.e=e.e,r.f=e.f,r.g=e.g),r.c!==e.c&&(n.gl.stencilMask(e.c),r.c=e.c),r.h===e.h&&r.a===e.a&&r.b===e.b||(n.gl.stencilFuncSeparate(n.gl.BACK,e.h,e.a,e.b),r.h=e.h,r.a=e.a,r.b=e.b),r.i===e.i&&r.j===e.j&&r.k===e.k||(n.gl.stencilOpSeparate(n.gl.BACK,e.i,e.j,e.k),r.i=e.i,r.j=e.j,r.k=e.k)})),Qe=r((function(n,e){var r=n.scissor;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.SCISSOR_TEST),r.enabled=!0),r.a===e.a&&r.b===e.b&&r.c===e.c&&r.d===e.d||(n.gl.scissor(e.a,e.b,e.c,e.d),r.a=e.a,r.b=e.b,r.c=e.c,r.d=e.d)})),Ke=r((function(n,e){var r=n.colorMask;r.toggle=n.toggle,r.enabled=!0,r.a===e.a&&r.b===e.b&&r.c===e.c&&r.d===e.d||(n.gl.colorMask(e.a,e.b,e.c,e.d),r.a=e.a,r.b=e.b,r.c=e.c,r.d=e.d)})),nr=r((function(n,e){var r=n.cullFace;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.CULL_FACE),r.enabled=!0),r.a!==e.a&&(n.gl.cullFace(e.a),r.a=e.a)})),er=r((function(n,e){var r=n.polygonOffset;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.POLYGON_OFFSET_FILL),r.enabled=!0),r.a===e.a&&r.b===e.b||(n.gl.polygonOffset(e.a,e.b),r.a=e.a,r.b=e.b)})),rr=r((function(n,e){var r=n.sampleCoverage;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.SAMPLE_COVERAGE),r.enabled=!0),r.a===e.a&&r.b===e.b||(n.gl.sampleCoverage(e.a,e.b),r.a=e.a,r.b=e.b)})),tr=function(n){n.scissor.enabled&&(n.gl.disable(n.gl.SCISSOR_TEST),n.scissor.enabled=!1)},or=function(n){var e=n.colorMask;e.a&&e.b&&e.c&&e.d||(n.gl.colorMask(!0,!0,!0,!0),e.a=!0,e.b=!0,e.c=!0,e.d=!0)},ar=["blend","depthTest","stencilTest","scissor","colorMask","cullFace","polygonOffset","sampleCoverage","sampleAlphaToCoverage"],ir=[function(n){n.blend.enabled&&(n.gl.disable(n.gl.BLEND),n.blend.enabled=!1)},function(n){n.depthTest.enabled&&(n.gl.disable(n.gl.DEPTH_TEST),n.depthTest.enabled=!1)},function(n){n.stencilTest.enabled&&(n.gl.disable(n.gl.STENCIL_TEST),n.stencilTest.enabled=!1)},tr,or,function(n){n.gl.disable(n.gl.CULL_FACE)},function(n){n.gl.disable(n.gl.POLYGON_OFFSET_FILL)},function(n){n.gl.disable(n.gl.SAMPLE_COVERAGE)},function(n){n.gl.disable(n.gl.SAMPLE_ALPHA_TO_COVERAGE)}];function cr(n,e,r){var t=n.createShader(r);return n.shaderSource(t,"#extension GL_OES_standard_derivatives : enable\n"+e),n.compileShader(t),t}function lr(n,e){switch(e){case n.FLOAT:return{size:1,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC2:return{size:2,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC3:return{size:3,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC4:return{size:4,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_MAT4:return{size:4,arraySize:4,type:Float32Array,baseType:n.FLOAT};case n.INT:return{size:1,arraySize:1,type:Int32Array,baseType:n.INT}}}function ur(n,e,r,t){for(var o=r.a.dw,a=[],i=0;o>i;i++)a.push(String.fromCharCode(97+i));var c=lr(n,e.type);if(void 0===c)throw Error("No info available for: "+e.type);var l=0,u=c.size*c.arraySize*o,f=new c.type(Oe(r.b)*u);We((function(n){!function(n,e,r,t,i){var c;if(1===o)for(c=0;e>c;c++)n[r++]=1===e?t[i]:t[i][c];else a.forEach((function(o){for(c=0;e>c;c++)n[r++]=1===e?t[o][i]:t[o][i][c]}))}(f,c.size*c.arraySize,l,n,t[e.name]||e.name),l+=u}),r.b);var s=n.createBuffer();return n.bindBuffer(n.ARRAY_BUFFER,s),n.bufferData(n.ARRAY_BUFFER,f,n.STATIC_DRAW),s}function fr(n,e){return n+"#"+e}var sr=r((function(n,e){var r=n.f,t=r.gl;return t?(t.viewport(0,0,t.drawingBufferWidth,t.drawingBufferHeight),r.depthTest.b||(t.depthMask(!0),r.depthTest.b=!0),r.stencilTest.c!==r.STENCIL_WRITEMASK&&(t.stencilMask(r.STENCIL_WRITEMASK),r.stencilTest.c=r.STENCIL_WRITEMASK),tr(r),or(r),t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT|t.STENCIL_BUFFER_BIT),We((function(e){if(e.d.b.b){var o,a,i,c,l;if(e.b.id&&e.c.id&&(o=fr(e.b.id,e.c.id),a=r.programs[o]),!a){var u,f;e.b.id?u=r.shaders[e.b.id]:e.b.id=Ue++,u||(u=cr(t,e.b.src,t.VERTEX_SHADER),r.shaders[e.b.id]=u),e.c.id?f=r.shaders[e.c.id]:e.c.id=Ue++,f||(f=cr(t,e.c.src,t.FRAGMENT_SHADER),r.shaders[e.c.id]=f);var s=function(n,e,r){var t=n.createProgram();if(n.attachShader(t,e),n.attachShader(t,r),n.linkProgram(t),!n.getProgramParameter(t,n.LINK_STATUS))throw"Link failed: "+n.getProgramInfoLog(t)+"\nvs info-log: "+n.getShaderInfoLog(e)+"\nfs info-log: "+n.getShaderInfoLog(r);return t}(t,u,f);(a={glProgram:s,attributes:Object.assign({},e.b.attributes,e.c.attributes),currentUniforms:{},activeAttributes:[],activeAttributeLocations:[]}).uniformSetters=function(n,e,r,t){var o=r.glProgram,a=r.currentUniforms,i=0,c=e.f;function l(e,r){var t=r.name,o=n.getUniformLocation(e,t);switch(r.type){case n.INT:return function(e){a[t]!==e&&(n.uniform1i(o,e),a[t]=e)};case n.FLOAT:return function(e){a[t]!==e&&(n.uniform1f(o,e),a[t]=e)};case n.FLOAT_VEC2:return function(e){a[t]!==e&&(n.uniform2f(o,e[0],e[1]),a[t]=e)};case n.FLOAT_VEC3:return function(e){a[t]!==e&&(n.uniform3f(o,e[0],e[1],e[2]),a[t]=e)};case n.FLOAT_VEC4:return function(e){a[t]!==e&&(n.uniform4f(o,e[0],e[1],e[2],e[3]),a[t]=e)};case n.FLOAT_MAT4:return function(e){a[t]!==e&&(n.uniformMatrix4fv(o,!1,new Float32Array(e)),a[t]=e)};case n.SAMPLER_2D:var l=i++;return function(e){n.activeTexture(n.TEXTURE0+l);var r=c.textures.get(e);r||(r=e.eS(n),c.textures.set(e,r)),n.bindTexture(n.TEXTURE_2D,r),a[t]!==e&&(n.uniform1i(o,l),a[t]=e)};case n.BOOL:return function(e){a[t]!==e&&(n.uniform1i(o,e),a[t]=e)};default:return function(){}}}for(var u={},f=n.getProgramParameter(o,n.ACTIVE_UNIFORMS),s=0;f>s;s++){var d=n.getActiveUniform(o,s);u[t[d.name]||d.name]=l(o,d)}return u}(t,n,a,Object.assign({},e.b.uniforms,e.c.uniforms));var d=t.getProgramParameter(s,t.ACTIVE_ATTRIBUTES);for(i=0;d>i;i++){var v=t.getActiveAttrib(s,i),m=t.getAttribLocation(s,v.name);a.activeAttributes.push(v),a.activeAttributeLocations.push(m)}o=fr(e.b.id,e.c.id),r.programs[o]=a}r.lastProgId!==o&&(t.useProgram(a.glProgram),r.lastProgId=o),c=a.uniformSetters,Object.keys(l=e.e).forEach((function(n){var e=c[n];e&&e(l[n])}));var b=r.buffers.get(e.d);for(b||(b=function(n,e){if(e.a.dG>0){var r=n.createBuffer(),t=function(n,e){var r,t=new Uint32Array(Oe(n)*e),o=0;return We((function(n){if(1===e)t[o++]=n;else for(r=0;e>r;r++)t[o++]=n[String.fromCharCode(97+r)]}),n),t}(e.c,e.a.dG);return n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,r),n.bufferData(n.ELEMENT_ARRAY_BUFFER,t,n.STATIC_DRAW),{numIndices:t.length,indexBuffer:r,buffers:{}}}return{numIndices:e.a.dw*Oe(e.b),indexBuffer:null,buffers:{}}}(t,e.d),r.buffers.set(e.d,b)),i=0;a.activeAttributes.length>i;i++){m=a.activeAttributeLocations[i],void 0===b.buffers[(v=a.activeAttributes[i]).name]&&(b.buffers[v.name]=ur(t,v,e.d,a.attributes)),t.bindBuffer(t.ARRAY_BUFFER,b.buffers[v.name]);var p=lr(t,v.type);if(1===p.arraySize)t.enableVertexAttribArray(m),t.vertexAttribPointer(m,p.size,p.baseType,!1,0,0);else for(var g=4*p.size,h=g*p.arraySize,x=0;p.arraySize>x;x++)t.enableVertexAttribArray(m+x),t.vertexAttribPointer(m+x,p.size,p.baseType,!1,h,g*x)}for(r.toggle=!r.toggle,We(Is(r),e.a),i=0;9>i;i++){var P=r[ar[i]];P.toggle!==r.toggle&&P.enabled&&(ir[i](r),P.enabled=!1,P.toggle=r.toggle)}b.indexBuffer?(t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,b.indexBuffer),t.drawElements(e.d.a.eb,b.numIndices,t.UNSIGNED_INT,0)):t.drawArrays(e.d.a.eb,0,b.numIndices)}}),n.g),e):e})),dr=t((function(n,e,r){return function(n,e,r,t){return{$:3,d:fe(n),g:e,h:r,i:t}}(e,{g:r,f:{},h:n},xr,Pr)})),vr=r((function(n,e){n.contextAttributes.alpha=!0,n.contextAttributes.premultipliedAlpha=e.a})),mr=r((function(n,e){n.contextAttributes.depth=!0,n.sceneSettings.push((function(n){n.clearDepth(e.a)}))})),br=r((function(n,e){n.contextAttributes.stencil=!0,n.sceneSettings.push((function(n){n.clearStencil(e.a)}))})),pr=r((function(n){n.contextAttributes.antialias=!0})),gr=r((function(n,e){n.sceneSettings.push((function(n){n.clearColor(e.a,e.b,e.c,e.d)}))})),hr=r((function(n){n.contextAttributes.preserveDrawingBuffer=!0}));function xr(n){var e={contextAttributes:{alpha:!1,depth:!1,stencil:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1},sceneSettings:[]};We((function(n){return u(Hs,e,n)}),n.h);var r=Kn.createElement("canvas"),t=r.getContext&&(r.getContext("webgl",e.contextAttributes)||r.getContext("experimental-webgl",e.contextAttributes));return t&&"undefined"!=typeof WeakMap?(e.sceneSettings.forEach((function(n){n(t)})),t.getExtension("OES_standard_derivatives"),t.getExtension("OES_element_index_uint"),n.f.gl=t,n.f.toggle=!1,n.f.blend={enabled:!1,toggle:!1},n.f.depthTest={enabled:!1,toggle:!1},n.f.stencilTest={enabled:!1,toggle:!1},n.f.scissor={enabled:!1,toggle:!1},n.f.colorMask={enabled:!1,toggle:!1},n.f.cullFace={enabled:!1,toggle:!1},n.f.polygonOffset={enabled:!1,toggle:!1},n.f.sampleCoverage={enabled:!1,toggle:!1},n.f.sampleAlphaToCoverage={enabled:!1,toggle:!1},n.f.shaders=[],n.f.programs={},n.f.lastProgId=null,n.f.buffers=new WeakMap,n.f.textures=new WeakMap,n.f.STENCIL_WRITEMASK=t.getParameter(t.STENCIL_WRITEMASK),Ge((function(){return u(sr,n,r)}))):(r=Kn.createElement("div")).innerHTML='<a href="https://get.webgl.org/">Enable WebGL</a> to see this content!',r}function Pr(n,e){return e.f=n.f,sr(e)}var Cr=r((function(n,e){return new Float64Array([n,e])}));new Float64Array(3),new Float64Array(3),new Float64Array(3);var Mr=t((function(n,e,r){return new Float64Array([n,e,r])})),Tr=r((function(n,e){return new Float64Array([e[0]*n,e[1]*n,e[2]*n])})),yr=o((function(n,e,r,t){return new Float64Array([n,e,r,t])}));new Float64Array(16),new Float64Array(16),new Float64Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);var Lr=D,wr=x,Sr=t((function(n,e,t){var o=t.c,a=t.d,i=r((function(e,r){return f(wr,e.$?n:i,r,e.a)}));return f(wr,i,f(wr,n,e,a),o)})),Nr=t((function(n,e,r){for(;;){if(-2===r.$)return e;var t=r.d,o=n,a=f(n,r.b,r.c,f(Nr,n,e,r.e));n=o,e=a,r=t}})),$r=function(n){return f(Nr,t((function(n,e,r){return u(Lr,w(n,e),r)})),H,n)},Hr=1,Ir=2,Dr=0,_r=function(n){return{$:1,a:n}},zr=r((function(n,e){return{$:3,a:n,b:e}})),Ar=r((function(n,e){return{$:0,a:n,b:e}})),Rr=r((function(n,e){return{$:1,a:n,b:e}})),Yr=function(n){return{$:0,a:n}},kr=function(n){return{$:2,a:n}},Vr=function(n){return{$:0,a:n}},jr={$:1},Fr=Mn,Er=nn,Br=r((function(n,e){return u(J,n,z(e))})),Ur=r((function(n,e){return _(u(X,n,e))})),Wr=t((function(n,e,r){for(;;){if(!r.b)return e;var t=r.b,o=n,a=u(n,r.a,e);n=o,e=a,r=t}})),Or=function(n){return f(Wr,r((function(n,e){return e+1})),0,n)},Gr=A,qr=t((function(n,e,r){for(;;){if(y(n,e)>=1)return r;var t=n,o=e-1,a=u(Lr,e,r);n=t,e=o,r=a}})),Zr=r((function(n,e){return f(qr,n,e,H)})),Xr=r((function(n,e){return f(Gr,n,u(Zr,0,Or(e)-1),e)})),Jr=function(n){var e=n.charCodeAt(0);return 55296>e||e>56319?e:1024*(e-55296)+n.charCodeAt(1)-56320+65536},Qr=function(n){return f(Wr,Lr,H,n)},Kr=function(n){var e=n.charCodeAt(0);return isNaN(e)?jr:Vr(55296>e||e>56319?w(n[0],n.slice(1)):w(n[0]+n[1],n.slice(2)))},nt=32,et=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),rt=[],tt=E,ot=r((function(n,e){return O(e)/O(n)})),at=function(n){return n},it=tt(u(ot,2,nt)),ct=s(et,0,it,rt,rt),lt=p,ut=function(n){return{$:1,a:n}},ft=T,st=B,dt=function(n){return n.length},vt=r((function(n,e){return y(n,e)>0?n:e})),mt=R,bt=g,pt=r((function(n,e){for(;;){var r=u(bt,nt,n),t=r.b,o=u(Lr,{$:0,a:r.a},e);if(!t.b)return Qr(o);n=t,e=o}})),gt=r((function(n,e){for(;;){var r=tt(e/nt);if(1===r)return u(bt,nt,n).a;n=u(pt,n,H),e=r}})),ht=r((function(n,e){if(e.l){var r=e.l*nt,t=st(u(ot,nt,r-1)),o=n?Qr(e.y):e.y,a=u(gt,o,e.l);return s(et,dt(e.o)+r,u(vt,5,t*it),a,e.o)}return s(et,dt(e.o),it,rt,e.o)})),xt=a((function(n,e,r,t,o){for(;;){if(0>e)return u(ht,!1,{y:t,l:r/nt|0,o:o});var a=ut(f(lt,nt,e,n));n=n,e-=nt,r=r,t=u(Lr,a,t),o=o}})),Pt=r((function(n,e){if(n>0){var r=n%nt;return d(xt,e,n-r-nt,n,H,f(lt,r,n-r,e))}return ct})),Ct=function(n){return!n.$},Mt=un,Tt=cn,yt=on,Lt=fn,wt=sn,St=function(n){return{$:0,a:n}},Nt=function(n){switch(n.$){case 0:return 0;case 1:return 1;case 2:return 2;default:return 3}},$t=te("div"),Ht=function(n){return{$:2,a:n}},It=function(n){return{$:6,a:n}},Dt=function(n){return{$:4,a:n}},_t=t((function(n,e,r){return e(n(r))})),zt=function(n){return n},At=function(n){return n.length},Rt=Q,Yt=r((function(n,e){return 1>n?e:f(Rt,n,At(e),e)})),kt=K,Vt=Ln,jt=Vt(0),Ft=o((function(n,e,r,t){if(t.b){var o=t.a,a=t.b;if(a.b){var i=a.a,c=a.b;if(c.b){var l=c.a,d=c.b;if(d.b){var v=d.b;return u(n,o,u(n,i,u(n,l,u(n,d.a,r>500?f(Wr,n,e,Qr(v)):s(Ft,n,e,r+1,v)))))}return u(n,o,u(n,i,u(n,l,e)))}return u(n,o,u(n,i,e))}return u(n,o,e)}return e})),Et=t((function(n,e,r){return s(Ft,n,e,0,r)})),Bt=r((function(n,e){return f(Et,r((function(e,r){return u(Lr,n(e),r)})),H,e)})),Ut=Sn,Wt=r((function(n,e){return u(Ut,(function(e){return Vt(n(e))}),e)})),Ot=t((function(n,e,r){return u(Ut,(function(e){return u(Ut,(function(r){return Vt(u(n,e,r))}),r)}),e)})),Gt=function(n){return f(Et,Ot(Lr),Vt(H),n)},qt=jn,Zt=r((function(n,e){var r=e;return Hn(u(Ut,qt(n),r))}));Yn.Task=kn(jt,t((function(n,e){return u(Wt,(function(){return 0}),Gt(u(Bt,Zt(n),e)))})),t((function(){return Vt(0)})),r((function(n,e){return u(Wt,n,e)})));var Xt=En("Task"),Jt=r((function(n,e){return Xt(u(Wt,n,e))})),Qt=ze,Kt=r((function(n,e){return{$:0,a:n,b:e}})),no=function(n){return{$:7,a:n}},eo=r((function(n,e){return{$:5,a:n,b:e}})),ro=r((function(n,e){return{$:3,a:n,b:e}})),to=Bn,oo=Un,ao=function(n){return{$:1,a:n}},io=t((function(n,e,r){return{cO:r,ep:e,eu:n}})),co=Vt(f(io,H,jr,0)),lo=function(n){return wn((function(e){var r=n.f;2===r.$&&r.c&&r.c(),n.f=null,e(Ln(0))}))},uo=wn((function(n){n(Ln(Date.now()))})),fo=wn((function(n){var e=Re((function(){n(Ln(Date.now()))}));return function(){Ae(e)}})),so=Fn,vo=Hn,mo=t((function(n,e,r){var t=r.ep,o=r.cO,a=w(t,e);return 1===a.a.$?a.b.b?u(Ut,(function(n){return u(Ut,(function(r){return Vt(f(io,e,Vr(n),r))}),uo)}),vo(u(Ut,so(n),fo))):co:a.b.b?Vt(f(io,e,t,o)):u(Ut,(function(){return co}),lo(a.a.a))})),bo=zt,po=t((function(n,e,r){var t=r.eu,o=r.cO,a=function(r){return u(qt,n,(0,r.a)(r.$?e-o:bo(e)))};return u(Ut,(function(n){return u(Ut,(function(){return Vt(f(io,t,Vr(n),e))}),Gt(u(Bt,a,t)))}),vo(u(Ut,so(n),fo)))})),go=t((function(n,e,r){return n(e(r))}));Yn["Browser.AnimationManager"]=kn(co,mo,po,0,r((function(n,e){return e.$?ao(u(go,n,e.a)):{$:0,a:u(go,n,e.a)}})));var ho=En("Browser.AnimationManager"),xo=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),Po=r((function(n,e){return{eg:e,eu:n}})),Co={$:-2},Mo=Co,To=Vt(u(Po,H,Mo)),yo=function(n){return w($(n.a?"w_":"d_",n.b),n)},Lo=a((function(n,e,r,t,o){return{$:-1,a:n,b:e,c:r,d:t,e:o}})),wo=a((function(n,e,r,t,o){if(-1!==o.$||o.a){if(-1!==t.$||t.a||-1!==t.d.$||t.d.a)return d(Lo,n,e,r,t,o);var a=t.d;return i=t.e,d(Lo,0,t.b,t.c,d(Lo,1,a.b,a.c,a.d,a.e),d(Lo,1,e,r,i,o))}var i,c=o.b,l=o.c,u=o.d,f=o.e;return-1!==t.$||t.a?d(Lo,n,c,l,d(Lo,0,e,r,t,u),f):d(Lo,0,e,r,d(Lo,1,t.b,t.c,t.d,i=t.e),d(Lo,1,c,l,u,f))})),So=L,No=t((function(n,e,r){if(-2===r.$)return d(Lo,0,n,e,Co,Co);var t=r.a,o=r.b,a=r.c,i=r.d,c=r.e;switch(u(So,n,o)){case 0:return d(wo,t,o,a,f(No,n,e,i),c);case 1:return d(Lo,t,o,e,i,c);default:return d(wo,t,o,a,i,f(No,n,e,c))}})),$o=t((function(n,e,r){var t=f(No,n,e,r);return-1!==t.$||t.a?t:d(Lo,1,t.b,t.c,t.d,t.e)})),Ho=function(n){return f(Wr,r((function(n,e){return f($o,n.a,n.b,e)})),Mo,n)},Io=t((function(n,e,r){for(;;){if(-2===r.$)return e;var t=r.e,o=n,a=f(n,r.b,r.c,f(Io,n,e,r.d));n=o,e=a,r=t}})),Do=i((function(n,e,o,a,i,c){var l=f(Io,t((function(r,t,a){n:for(;;){var i=a.a,c=a.b;if(i.b){var l=i.a,u=l.a,d=l.b,v=i.b;if(0>y(u,r)){r=r,t=t,a=w(v,f(n,u,d,c));continue n}return y(u,r)>0?w(i,f(o,r,t,c)):w(v,s(e,u,d,t,c))}return w(i,f(o,r,t,c))}})),w($r(a),c),i),u=l.a,d=l.b;return f(Wr,r((function(e,r){return f(n,e.a,e.b,r)})),d,u)})),_o=r((function(n,e){return{dA:e,dI:n}})),zo=t((function(n,e,r){return u(Wt,(function(n){return w(e,n)}),f(je,r.a?Ve:ke,r.b,(function(r){return u(so,n,u(_o,e,r))})))})),Ao=r((function(n,e){return f(Io,$o,e,n)})),Ro=t((function(n,e,r){var a=t((function(e,r,t){var o=t.c;return S(t.a,t.b,u(Lr,f(zo,n,e,r),o))})),i=t((function(n,e,r){var t=r.b,o=r.c;return S(u(Lr,e,r.a),t,o)})),c=o((function(n,e,r,t){var o=t.c;return S(t.a,f($o,n,e,t.b),o)})),l=u(Bt,yo,e),s=v(Do,i,c,a,r.eg,Ho(l),S(H,Mo,H)),d=s.b,m=s.c;return u(Ut,(function(n){return Vt(u(Po,l,u(Ao,d,Ho(n))))}),u(Ut,(function(){return Gt(m)}),Gt(u(Bt,lo,s.a))))})),Yo=t((function(n,e,r){var t=n(e);return t.$?r:u(Lr,t.a,r)})),ko=r((function(n,e){return f(Et,Yo(n),H,e)}));Yn["Browser.Events"]=kn(To,Ro,t((function(n,e,r){var t=e.dI,o=e.dA,a=u(ko,(function(n){var e=n.b.c;return C(n.a,t)?u(Fe,e,o):jr}),r.eu);return u(Ut,(function(){return Vt(r)}),Gt(u(Bt,qt(n),a)))})),0,r((function(n,e){return f(xo,e.a,e.b,u(Lt,n,e.c))})));var Vo,jo,Fo,Eo,Bo,Uo,Wo,Oo,Go,qo,Zo,Xo,Jo,Qo,Ko,na,ea,ra,ta,oa,aa,ia,ca,la,ua,fa,sa,da,va,ma,ba,pa,ga,ha,xa,Pa,Ca,Ma=En("Browser.Events"),Ta=t((function(n,e,r){return Ma(f(xo,n,e,r))})),ya=u(Ta,0,"click"),La=u(Ta,0,"keydown"),wa=u(Ta,0,"keyup"),Sa=u(Ta,0,"mousedown"),Na=u(Ta,0,"mousemove"),$a=u(Ta,0,"mouseup"),Ha=rn,Ia=tn,Da=r((function(n,e){return n(e?1:0)})),_a=function(n){var e=void 0!==Kn.hidden?{e7:"hidden",eQ:"visibilitychange"}:void 0!==Kn.mozHidden?{e7:"mozHidden",eQ:"mozvisibilitychange"}:void 0!==Kn.msHidden?{e7:"msHidden",eQ:"msvisibilitychange"}:void 0!==Kn.webkitHidden?{e7:"webkitHidden",eQ:"webkitvisibilitychange"}:{e7:"hidden",eQ:"visibilitychange"};return f(Ta,0,e.eQ,u(Lt,Da(n),u(Tt,"target",u(Tt,e.e7,Ia))))},za=an,Aa=function(n){return{$:3,b:n}},Ra=Xn("touchCancel",Aa(u(Mt,(function(n){return u(Mt,(function(e){return u(Mt,(function(r){return St({bm:r,cQ:e,cR:n})}),u(Tt,"identifier",Ha))}),u(Tt,"pageX",yt))}),u(Tt,"pageY",yt)))),Ya=Xn("touchEnd",Aa(u(Mt,(function(n){return u(Mt,(function(e){return u(Mt,(function(r){return St({bm:r,cQ:e,cR:n})}),u(Tt,"identifier",Ha))}),u(Tt,"pageX",yt))}),u(Tt,"pageY",yt)))),ka=Xn("touchMove",Aa(u(Mt,(function(n){return u(Mt,(function(e){return u(Mt,(function(r){return St({bm:r,cQ:e,cR:n})}),u(Tt,"identifier",Ha))}),u(Tt,"pageX",yt))}),u(Tt,"pageY",yt)))),Va=Xn("touchStart",Aa(u(Mt,(function(n){return u(Mt,(function(e){return u(Mt,(function(r){return St({bm:r,cQ:e,cR:n})}),u(Tt,"identifier",Ha))}),u(Tt,"pageX",yt))}),u(Tt,"pageY",yt)))),ja=to(u(Bt,oo(It),_([(Vo=ro,f(Ta,1,"resize",u(Tt,"target",f(wt,Vo,u(Tt,"innerWidth",Ha),u(Tt,"innerHeight",Ha))))),wa(u(Lt,Kt(!1),u(Tt,"key",za))),La(u(Lt,Kt(!0),u(Tt,"key",za))),(Ca=u(_t,mt(.001),(function(n){return{$:1,a:n}})),ho(ao(Ca))),_a(Dt),ya(St({$:6})),Sa(St(no(!0))),$a(St(no(!1))),Na(f(wt,eo,u(Tt,"pageX",yt),u(Tt,"pageY",yt))),Va((function(n){return{$:8,a:n}})),ka((function(n){return{$:9,a:n}})),Ya((function(n){return{$:10,a:n}})),Ra((function(n){return{$:11,a:n}}))]))),Fa=o((function(n,e,r,t){return{cm:t,aT:r,bH:n,bI:e}})),Ea=Mo,Ba={ch:!1,aT:!1,cs:!1,M:Ea,aj:!1,a2:!1,c8:!1,c9:!1,cc:!1},Ua=r((function(n,e){return N(e,{cm:n})})),Wa=r((function(n,e){return N(e,{aT:n})})),Oa=t((function(n,e,r){return N(r,{bH:n,bI:e})})),Ga=function(n){if(-1===n.$&&-1===n.d.$&&-1===n.e.$){if(-1!==n.e.d.$||n.e.d.a){var e=n.d,r=n.e;return i=r.b,c=r.c,t=r.d,f=r.e,d(Lo,1,n.b,n.c,d(Lo,0,e.b,e.c,e.d,e.e),d(Lo,0,i,c,t,f))}var t,o=n.d,a=n.e,i=a.b,c=a.c,l=(t=a.d).d,u=t.e,f=a.e;return d(Lo,0,t.b,t.c,d(Lo,1,n.b,n.c,d(Lo,0,o.b,o.c,o.d,o.e),l),d(Lo,1,i,c,u,f))}return n},qa=function(n){if(-1===n.$&&-1===n.d.$&&-1===n.e.$){if(-1!==n.d.d.$||n.d.d.a){var e=n.d,r=n.e;return u=r.b,f=r.c,s=r.d,v=r.e,d(Lo,1,t=n.b,o=n.c,d(Lo,0,e.b,e.c,e.d,c=e.e),d(Lo,0,u,f,s,v))}var t=n.b,o=n.c,a=n.d,i=a.d,c=a.e,l=n.e,u=l.b,f=l.c,s=l.d,v=l.e;return d(Lo,0,a.b,a.c,d(Lo,1,i.b,i.c,i.d,i.e),d(Lo,1,t,o,c,d(Lo,0,u,f,s,v)))}return n},Za=c((function(n,e,r,t,o,a,i){if(-1!==a.$||a.a){n:for(;;){if(-1===i.$&&1===i.a){if(-1===i.d.$){if(1===i.d.a)return qa(e);break n}return qa(e)}break n}return e}return d(Lo,r,a.b,a.c,a.d,d(Lo,0,t,o,a.e,i))})),Xa=function(n){if(-1===n.$&&-1===n.d.$){var e=n.a,r=n.b,t=n.c,o=n.d,a=o.d,i=n.e;if(1===o.a){if(-1!==a.$||a.a){var c=Ga(n);if(-1===c.$){var l=c.e;return d(wo,c.a,c.b,c.c,Xa(c.d),l)}return Co}return d(Lo,e,r,t,Xa(o),i)}return d(Lo,e,r,t,Xa(o),i)}return Co},Ja=r((function(n,e){if(-2===e.$)return Co;var r=e.a,t=e.b,o=e.c,a=e.d,i=e.e;if(0>y(n,t)){if(-1===a.$&&1===a.a){var c=a.d;if(-1!==c.$||c.a){var l=Ga(e);if(-1===l.$){var f=l.e;return d(wo,l.a,l.b,l.c,u(Ja,n,l.d),f)}return Co}return d(Lo,r,t,o,u(Ja,n,a),i)}return d(Lo,r,t,o,u(Ja,n,a),i)}return u(Qa,n,m(Za,n,e,r,t,o,a,i))})),Qa=r((function(n,e){if(-1===e.$){var r=e.a,t=e.b,o=e.c,a=e.d,i=e.e;if(C(n,t)){var c=function(n){for(;;){if(-1!==n.$||-1!==n.d.$)return n;n=n.d}}(i);return-1===c.$?d(wo,r,c.b,c.c,a,Xa(i)):Co}return d(wo,r,t,o,a,u(Ja,n,i))}return Co})),Ka=r((function(n,e){var r=u(Ja,n,e);return-1!==r.$||r.a?r:d(Lo,1,r.b,r.c,r.d,r.e)})),ni=r((function(n,e){return{dq:-e/2,cu:e,aj:-n/2,a2:n/2,bC:e/2,di:n}})),ei=r((function(n,e){return f($o,n,0,e)})),ri=r((function(n,e){return u(Ka,n,e)})),ti=t((function(n,e,r){var t=u(n?ei:ri,e,r.M);switch(e){case" ":return N(r,{M:t,c9:n});case"Enter":return N(r,{cs:n,M:t});case"Shift":return N(r,{M:t,c8:n});case"Backspace":return N(r,{ch:n,M:t});case"ArrowUp":return N(r,{M:t,cc:n});case"ArrowDown":return N(r,{aT:n,M:t});case"ArrowLeft":return N(r,{M:t,aj:n});case"ArrowRight":return N(r,{M:t,a2:n});default:return N(r,{M:t})}})),oi=r((function(n,e){switch(n.$){case 1:var r=n.a;return N(e,e.G.cm?{G:u(Ua,!1,e.G),a5:e.a5+r}:{a5:e.a5+r});case 2:var t=n.a.fM;return N(e,{ac:u(ni,t.di,t.cu)});case 3:return N(e,{ac:u(ni,n.a,n.b)});case 0:return N(e,{bn:f(ti,n.a,n.b,e.bn)});case 5:return N(e,{G:f(Oa,e.ac.aj+n.a,e.ac.bC-n.b,e.G)});case 6:return N(e,{G:u(Ua,!0,e.G)});case 7:return N(e,{G:u(Wa,n.a,e.G)});case 8:case 9:return N(e,{ad:f(Wr,(function(n){return u($o,n.bm,{bH:e.ac.aj+n.cQ,bI:e.ac.bC-n.cR})}),e.ad,n.a)});case 10:case 11:return N(e,{ad:f(Wr,(function(n){return Ka(n.bm)}),e.ad,n.a)});default:return N(e,{bn:Ba,G:s(Fa,e.G.bH,e.G.bI,!1,!1)})}})),ai=r((function(n,e){return{P:e,U:n}})),ii=f(wt,r((function(n,e){return w(n,e)})),u(Tt,"A1",za),u(Tt,"A2",za)),ci=dn,li=s(ci,t((function(n,e,r){return S(n,e,r)})),u(Tt,"A1",yt),u(Tt,"A2",yt),u(Tt,"A3",yt)),ui=f(wt,r((function(n,e){return w(n,e)})),u(Tt,"A1",za),u(Tt,"A2",li)),fi=f(wt,ai,u(Tt,"floats",Aa(ui)),u(Tt,"colors",Aa(ii))),si=vn,di=r((function(n,e){return{P:e,aH:"",U:n,at:""}})),vi=u(di,H,H),mi=r((function(n,e){return e.$?jr:n(e.a)})),bi=r((function(n,e){return e.$?_r(e.a):n(e.a)})),pi=o((function(n,e,r,t){return{e9:e,fh:n,fn:r,fB:t}})),gi=Be,hi=r((function(n,e){return e.$?_r(n):Yr(e.a)})),xi=Ee,Pi=function(n){return n.b?Vr(n.a):jr},Ci=r((function(n,e){return e.$?jr:Vr(n(e.a))})),Mi=r((function(n,e){return e.$?_r(e.a):Yr(n(e.a))})),Ti=r((function(n,e){return Jr(e)-Jr(n)})),yi=t((function(n,e,r){var t=Jr(r);return 1>y(Jr(n),t)&&1>y(t,Jr(e))})),Li=r((function(n,e){var r=f(yi,"0","9",e)?Yr(u(Ti,"0",e)):f(yi,"a","z",e)?Yr(10+u(Ti,"a",e)):f(yi,"A","Z",e)?Yr(10+u(Ti,"A",e)):_r({$:0,a:e});return u(bi,(function(r){return 0>y(r,n)?Yr(r):_r({$:1,a:e})}),r)})),wi=r((function(n,e){var r=Kr(e);if(1===r.$)return Yr(0);var t=r.a,o=t.b;return u(bi,(function(e){return u(bi,(function(r){return Yr(e+r*n)}),u(wi,n,o))}),u(Li,n,t.a))})),Si=function(n){for(var e=n.length,r=Array(e),t=0;e>t;){var o=n.charCodeAt(t);55296>o||o>56319?(r[e-t]=n[t],t++):(r[e-t]=n[t+1],r[e-++t]=n[t-1],t++)}return r.join("")},Ni=r((function(n,e){return 2>n||n>36?_r({$:2,a:n}):u(wi,n,Si(e))})),$i=Ni(16),Hi=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),Ii=t((function(n,e,r){return s(Hi,n,e,r,1)})),Di=o((function(n,e,r,t){return s(Hi,n,e,r,t)})),_i=Y,zi=U,Ai=r((function(n,e){var r=u(_i,10,n);return zi(e*r)/r})),Ri=Z,Yi=function(n){return f(Ri,Lr,H,n)},ki=(jo=function(n){var e=Yi(n);if(e.b&&!e.b.b){var r=e.a;return z(_([r,r])).join("")}return n},u(_t,(function(n){return n.toLowerCase()}),u(_t,(function(n){return u(Ci,(function(e){return f(gi,1,e,n)}),u(xi,{eN:!1,fj:!1},"^#?(?:(?:([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2}))|(?:([a-f\\d])([a-f\\d])([a-f\\d]))|(?:([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2}))|(?:([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d])))$"))}),u(_t,mi(Pi),u(_t,Ci((function(n){return n.fB})),u(_t,Ci(ko(zt)),u(_t,hi("Parsing hex regex failed"),bi((function(n){var e=u(Bt,u(_t,jo,u(_t,$i,Mi(at))),n);n:for(;;){if(e.b&&!e.a.$&&e.b.b&&!e.b.a.$&&e.b.b.b&&!e.b.b.a.$){if(e.b.b.b.b){if(e.b.b.b.a.$||e.b.b.b.b.b)break n;var r=e.b,t=r.b;return Yr(s(Di,e.a.a/255,r.a.a/255,t.a.a/255,u(Ai,2,t.b.a.a/255)))}var o=e.b;return Yr(f(Ii,e.a.a/255,o.a.a/255,o.b.a.a/255))}break n}return _r("Parsing ints from hex failed")}))))))))),Vi=r((function(n,e){return w(e.a,n(e.b))})),ji=s(Hi,1,1,1,1),Fi=r((function(n,e){return e.$?n:e.a})),Ei=u(_t,si(fi),u(_t,Mi((function(n){return{P:u(Bt,Vi(u(_t,ki,Fi(ji))),n.P),aH:"",U:n.U,at:""}})),Fi(vi))),Bi=function(n){return f(Wr,r((function(n,e){return f(yn,n.a,n.b,e)})),{},n)},Ui=Tn,Wi=function(n){var e=n.b;return Bi(_([w("A1",Ui(n.a)),w("A2",Ui(e))]))},Oi=Tn,Gi=function(n){var e=n.b,r=n.c;return Bi(_([w("A1",Oi(n.a)),w("A2",Oi(e)),w("A3",Oi(r))]))},qi=function(n){var e=n.b;return Bi(_([w("A1",Ui(n.a)),w("A2",Gi(e))]))},Zi=r((function(n,e){return f(Wr,function(n){return r((function(e,r){return r.push(n(e)),r}))}(n),[],e)})),Xi=q,Ji=function(n){return u(Xi,n,"")},Qi=t((function(n,e,r){return n>0?f(Qi,n>>1,$(e,e),1&n?$(r,e):r):r})),Ki=r((function(n,e){return f(Qi,n,e,"")})),nc=t((function(n,e,r){return $(u(Ki,n-At(r),Ji(e)),r)})),ec=function(n){return 0>n||n>1114111?"�":n>65535?String.fromCharCode(Math.floor((n-=65536)/1024)+55296,n%1024+56320):String.fromCharCode(n)},rc=k,tc=function(n){var e=function(n){return 10>n?Er(n):Ji(ec(87+n))};return 16>n?e(n):$(tc(n/16|0),e(u(rc,16,n)))},oc=u(_t,tc,u(nc,2,"0")),ac=function(n){return{aS:n.d,cl:n.c,ct:n.b,c1:n.a}},ic=function(n){var e=ac(n),r=e.c1,t=e.ct,o=e.cl;return u(Br,"",u(Lr,"#",u(Bt,u(_t,zi,oc),_([255*r,255*t,255*o]))))},cc=u(_t,(function(n){return{P:u(Bt,Vi(ic),n.P),U:n.U}}),u(_t,(function(n){return Bi(_([w("floats",u(Zi,qi,n.U)),w("colors",u(Zi,Wi,n.P))]))}),Fr(0))),lc=function(n){return 0>n?-n:n},uc=function(n){if(0===n.length||/[\sxbo]/.test(n))return jr;var e=+n;return e==e?Vr(e):jr},fc=r((function(n,e){return e.$?n:e.a})),sc=t((function(n,e,r){return u(fc,NaN,uc(u(n,e,r)))})),dc=function(n){return!n},vc=r((function(n,e){for(;;){if(!e.b)return!1;var r=e.b;if(n(e.a))return!0;n=n,e=r}})),mc=r((function(n,e){var r=u(vc,(function(n){return"0"!==n&&"."!==n}),Yi(e));return $(n&&r?"-":"",e)})),bc=nn,pc=function(n){var e=n.a,r=n.b;if("9"===e){var t=Kr(r);return 1===t.$?"01":u(Xi,"0",pc(t.a))}var o=Jr(e);return o>=48&&57>o?u(Xi,ec(o+1),r):"0"},gc=function(n){return n===1/0||n===-1/0},hc=G,xc=t((function(n,e,r){return $(r,u(Ki,n-At(r),Ji(e)))})),Pc=function(n){var e=u(Ur,".",n);return e.b?w(e.a,e.b.b?e.b.a:"0"):w("0","0")},Cc=r((function(n,e){var r=e.b;return w(n(e.a),r)})),Mc=t((function(n,e,r){if(gc(r)||hc(r))return bc(r);var t=0>r,o=Pc(function(n){var e=u(Ur,"e",bc(lc(n)));if(e.b){if(e.b.b){var r=e.a,t=e.b.a,o=u(fc,0,function(n){for(var e=0,r=n.charCodeAt(0),t=43==r||45==r?1:0,o=t;n.length>o;++o){var a=n.charCodeAt(o);if(48>a||a>57)return jr;e=10*e+a-48}return o==t?jr:Vr(45==r?-e:e)}(u(kt,"+",t)?u(Yt,1,t):t)),a=Pc(r),i=$(a.a,a.b),c=0>o?u(fc,"0",u(Ci,(function(n){return n.a+"."+n.b}),u(Ci,Cc(Ji),Kr($(u(Ki,lc(o),"0"),i))))):f(xc,o+1,"0",i);return $(0>n?"-":"",c)}return $(0>n?"-":"",r=e.a)}return""}(lc(r))),a=o.a,i=o.b,c=At(a)+e,l=$(u(Ki,1-c,"0"),f(xc,c,"0",$(a,i))),s=At(l),d=u(vt,1,c),v=u(n,t,f(Rt,d,s,l)),m=f(Rt,0,d,l),b=v?Si(u(fc,"1",u(Ci,pc,Kr(Si(m))))):m,p=At(b),g="0"===b?b:e>0?0>y(e,At(i))?f(Rt,0,p-e,b)+"."+f(Rt,p-e,p,b):$(a+".",f(xc,e,"0",i)):$(b,u(Ki,lc(e),"0"));return u(mc,t,g)})),Tc=Mc(r((function(n,e){var r,t=Kr(e);return 1!==t.$&&("5"===t.a.a?""!==t.a.b||!n:(r=Jr(t.a.a))>53&&n||r>=53&&!n)}))),yc=sc(Tc),Lc=t((function(n,e,r){var t=u(ot,10,lc(e-n));return u(yc,0>t?3:1>t?2:2>t?1:0,r)})),wc=r((function(n,e){switch(n.$){case 2:var r=Ei(e.at);return N(r,{aH:r.aH,at:r.at});case 3:return N(e,{at:n.a});case 4:return N(e,{aH:cc(e)});case 0:var t=n.a,o=n.b;return N(e,{U:u(Bt,(function(n){var e=n.a,r=n.b,a=r.a,i=r.c;return C(e,t)?w(e,S(a,f(Lc,a,i,o),i)):n}),e.U)});default:return t=n.a,o=n.b,N(e,{P:u(Bt,(function(n){var e=n.a;return C(e,t)?w(e,o):n}),e.P)})}})),Sc=o((function(n,e,r,t){var o=t.F;switch(r.$){case 0:return t;case 1:return N(t,{a9:r.a});case 2:return N(t,{bg:!1});case 3:return N(t,{bg:!0});case 4:return N(t,{ai:f(e,t.F,r.a,t.ai)});case 5:return N(t,{F:N(o,{bS:u(wc,r.a,o.bS)})});default:var a=r.a,i=1===a.$?u(n,o,t.ai):t.ai;return N(t,{F:u(oi,a,t.F),ai:i})}})),Nc=(Pa=function(){return{er:(n=ke.body,e=ke.documentElement,{di:Math.max(n.scrollWidth,n.offsetWidth,e.scrollWidth,e.offsetWidth,e.clientWidth),cu:Math.max(n.scrollHeight,n.offsetHeight,e.scrollHeight,e.offsetHeight,e.clientHeight)}),fM:{bH:Ve.pageXOffset,bI:Ve.pageYOffset,di:ke.documentElement.clientWidth,cu:ke.documentElement.clientHeight}};var n,e},wn((function(n){Re((function(){n(Ln(Pa()))}))}))),$c=r((function(n,e){return{bS:e,cq:n.cq,bn:Ba,G:s(Fa,0,0,!1,!1),ac:u(ni,600,600),a5:0,ad:Mo}})),Hc=Bn,Ic=Hc(H),Dc=function(n){return{$:5,a:n}},_c=function(n){return{$:4,a:n}},zc={$:2},Ac={$:0},Rc=function(n){return{$:1,a:n}},Yc={$:3},kc=r((function(n){return n})),Vc=te("button"),jc=function(n){return n?"Level Editor":"Configurations"},Fc=function(n){return u(fc,0,Pi(u(ko,(function(e){return C(jc(e),n)?Vr(e):jr}),_([0,1]))))},Ec=ae,Bc=Ec,Uc=ie,Wc=r((function(n,e){return u(Uc,n,{$:0,a:e})})),Oc=r((function(n,e){return f(Et,Tt,e,n)})),Gc=u(Oc,_(["target","value"]),za),qc=function(n){return u(Wc,"click",St(n))},Zc=te("option"),Xc=te("select"),Jc=ce,Qc=Jc,Kc=ee,nl=Kc,el=r((function(n,e){return u(le,n,Ui(e))})),rl=el("value"),tl=r((function(n,e){return{$:1,a:n,b:e}})),ol=r((function(n,e){return{$:0,a:n,b:e}})),al=s(Hi,0,0,0,1),il=u(Vc,_([u(Qc,"cursor","pointer"),qc({$:4})]),_([nl("Export Configurations as json")])),cl=te("h3"),ll=te("p"),ul=Tn,fl=r((function(n,e){return u(le,n,ul(e))})),sl=fl("readOnly"),dl=te("textarea"),vl=function(n){return u($t,H,_([u(dl,_([sl(!0)]),_([nl(n.aH)]))]))},ml=function(n){return u($t,H,_([u(cl,H,_([nl("Export Configurations")])),u(ll,H,_([il])),u(ll,H,_([vl(n)]))]))},bl=el("htmlFor"),pl=te("hr"),gl=el("id"),hl=u(Vc,_([u(Qc,"cursor","pointer"),qc({$:2})]),_([nl("Import Configurations")])),xl=function(n){return{$:3,a:n}},Pl=function(n){return w(n,!0)},Cl=r((function(n,e){return u(Uc,n,{$:1,a:e})})),Ml=function(n){return u(Cl,"input",u(Lt,Pl,u(Lt,n,Gc)))},Tl=function(n){return u($t,H,_([u(dl,_([Ml(xl)]),_([nl(n.at)]))]))},yl=function(n){return u($t,H,_([u(cl,H,_([nl("Import Configurations")])),u(ll,H,_([Tl(n)])),u(ll,H,_([hl]))]))},Ll=te("input"),wl=te("label"),Sl=el("max"),Nl=el("min"),$l=el("name"),Hl=te("span"),Il=el("type"),Dl=t((function(n,e,t){var o,a,i,c,l=u($t,_([u(Qc,"position","fixed"),u(Qc,"top","0px"),u(Qc,"left","0px"),u(Qc,"width",bc(t.F.ac.di)+"px"),u(Qc,"height",bc(t.F.ac.cu)+"px"),u(Qc,"font-size","16px")]),_([u(Bc,kc(Ac),u(n,t.F,t.ai))])),f=t.a9?u(Bc,_c,u(e,t.F,t.ai)):u(Bc,Dc,(o=t.F.bS,a=function(n){var e=n.a,r=n.b,t=r.a,o=r.b,a=r.c;return u($t,_([u(Qc,"margin-top","15px")]),_([u($t,H,_([u(wl,_([bl(e)]),_([nl(e),nl(": "),u(Hl,_([u(Qc,"font-family","monospace"),u(Qc,"font-weight","bold")]),_([nl(bc(o))]))]))])),u(Ll,_([Il("range"),gl(e),$l(e),Nl(bc(t)),Sl(bc(a)),Ml((function(n){return u(ol,e,u(fc,0,uc(n)))})),u(el,"step","any"),u(Qc,"width","200px"),rl(bc(o))]),H)]))},i=function(n){var e=n.a,r=n.b;return u($t,_([u(Qc,"margin-top","15px")]),_([u($t,H,_([u(wl,_([bl(e)]),_([nl(e)]))])),u(Ll,_([Il("color"),u(Qc,"width","200px"),u(Qc,"height","30px"),gl(e),$l(e),Ml((function(n){return u(tl,e,u(Fi,al,ki(n)))})),rl(ic(r))]),H)]))},u($t,_([u(Qc,"margin-left","20px"),u(Qc,"height","100%"),u(Qc,"overflow","scroll")]),_([u($t,H,u(Bt,a,o.U)),u($t,H,u(Bt,i,o.P)),u(pl,H,H),ml(o),yl(o)])))),s=u($t,_([u(Qc,"margin-left","0px")]),_([u(Xc,_([(c=u(_t,Fc,Rc),u(Wc,"change",u(Lt,c,Gc))),rl(jc(t.a9)),u(Qc,"width","200px"),u(Qc,"height","40px"),u(Qc,"font-size","20px")]),u(Bt,(function(n){return u(Zc,_([rl(jc(n))]),_([nl(jc(n))]))}),_([0,1])))])),d=r((function(n,e){return u(Vc,_([u(Qc,"font-size","30px"),u(Qc,"width","40px"),u(Qc,"height","40px"),qc(n)]),_([nl(e)]))})),v=u($t,_([u(Qc,"position","fixed"),u(Qc,"top","0px"),u(Qc,"left","0px"),u(Qc,"width",bc(250)+"px"),u(Qc,"height",bc(t.F.ac.cu)+"px"),u(Qc,"font-family",'-apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif'),u(Qc,"font-size","16px")]),_(t.bg?[u($t,_([u(Qc,"height","100px")]),_([u(d,zc,"✕"),s])),u($t,_([u(Qc,"height",bc(t.F.ac.cu-100)+"px")]),_([f]))]:[u(d,Yc,"≡")]));return u($t,_([u(Qc,"touch-action","none"),u(Qc,"user-select","none")]),_([l,v]))})),_l=i((function(n,e,t,o,a,i){return Qt({fa:function(n){var e=u($c,n,t);return w({a9:0,F:e,bg:!1,ai:o(e),dh:0},u(Jt,u(_t,Ht,It),Nc))},fC:function(n){return 1===n.dh?u(oo,It,_a(Dt)):ja},fJ:r((function(n,r){return w(s(Sc,e,i,n,r),Ic)})),fL:u(Dl,n,a)})})),zl=o((function(n,e,o,a){return v(_l,n,e,o,a,r((function(){return u($t,H,H)})),t((function(n,e,r){return r})))})),Al={$:0},Rl={$:0},Yl=Rl,kl=r((function(n,e){return{$:0,a:n,b:e}})),Vl=r((function(n,e){return{$:0,a:n,b:e}})),jl=r((function(n,e){return{bT:n,ef:e}})),Fl=di,El=Fl,Bl=3.141592653589793,Ul=function(n){return n/255},Wl=t((function(n,e,r){return s(Hi,Ul(n),Ul(e),Ul(r),1)})),Ol=u(El,_([w("camera distance",S(3,20,60)),w("camera azimuth",S(-3.141592653589793,0,Bl)),w("camera elevation",S(-1.5707963267948966,-.15,1.5707963267948966)),w("cubes side length",S(.5,.95,1)),w("duration of step animation",S(.1,.23,1)),w("duration of mistake animation",S(.1,.5,1)),w("height of following lights",S(.1,5,8)),w("lumens of following lights",S(4e4,1e5,12e4))]),_([w("background color",f(Wl,223,224,226)),w("color 1",f(Wl,244,88,67)),w("color 2",f(Wl,255,200,40)),w("path color",f(Wl,244,88,67)),w("board color",f(Wl,165,166,169)),w("wall color",f(Wl,38,48,64))])),Gl=function(n){return{$:0,a:n}},ql=function(n){return{$:1,a:n}},Zl=w(3,3),Xl=function(n){var e=n.a,r=n.b;return y(e,-4)>-1&&3>=e&&y(r,-4)>-1&&3>=r},Jl=r((function(n,e){return u(vc,(function(e){return C(e,n)}),e)})),Ql=r((function(n,e){return u(Jl,n,u(Lr,e.a,e.b))})),Kl=function(n){return C(n,u(Vl,2,0))},nu=r((function(n,e){var r=e.a,t=e.b;switch(n){case 0:return w(r,t+1);case 1:return w(r,t-1);case 2:return w(r-1,t);default:return w(r+1,t)}})),eu=function(n){return n?0:1},ru=function(n){var e=n.a,r=n.b;switch(e){case 0:return u(Vl,e,r);case 1:return u(Vl,2,r);default:return u(Vl,1,eu(r))}},tu=function(n){var e=n.a,r=n.b;switch(e){case 0:return u(Vl,2,eu(r));case 1:return u(Vl,e,r);default:return u(Vl,0,r)}},ou=function(n){switch(n){case 0:return u(_t,ru,u(_t,ru,ru));case 1:return ru;case 2:return u(_t,tu,u(_t,tu,tu));default:return tu}},au=r((function(n,e){var r=e.b;return u(kl,u(nu,n,e.a),u(ou,n,r))})),iu=r((function(n,e){var r=u(au,n,e.bT),t=r.a,o=r.b,a=e.ef;if(a.b.b){var i=a.a,c=a.b,l=c.a,f=c.b;if(C(l,t))return ql(u(jl,r,w(l,f)));if(Xl(t)){if(u(Ql,t,e.ef))return Gl(3);var s=u(jl,r,w(t,u(Lr,i,u(Lr,l,f))));return C(t,Zl)?64===function(n){return 1+Or(n.b)}(s.ef)&&Kl(o)?{$:2,a:s}:Gl(0):Kl(o)?Gl(1):ql(s)}return Gl(2)}return i=a.a,Xl(t)?ql(u(jl,r,w(t,_([i])))):Gl(2)})),cu=a((function(n,e,r,t,o){var a;return o.E.$?o:N(o,{E:(a={bu:t,cb:r,V:n.a5,dg:e},{$:2,a:a})})})),lu=i((function(n,e,r,t,o,a){var i;return a.E.$?a:N(a,{E:(i={cL:o,bu:r,cb:e,V:n.a5,eD:t},{$:1,a:i})})})),uu=o((function(n,e,r,t){var o=u(iu,n,t.ae);switch(o.$){case 0:switch(o.a){case 3:case 2:return t;case 1:return d(cu,r,1,e,n,t);default:return d(cu,r,0,e,n,t)}case 1:return v(lu,r,e,n,!1,o.a,t);default:return v(lu,r,e,n,!0,o.a,t)}})),fu=r((function(n,e){var r=n.bn,t=function(){var n=_([r.cc,r.aT,r.aj,r.a2]);n:for(;;){if(n.b){if(n.a){if(!n.b.b||n.b.a||!n.b.b.b||n.b.b.a||!n.b.b.b.b||n.b.b.b.a||n.b.b.b.b.b)break n;return Vr(0)}if(n.b.b){if(n.b.a){if(!n.b.b.b||n.b.b.a||!n.b.b.b.b||n.b.b.b.a||n.b.b.b.b.b)break n;return Vr(1)}if(n.b.b.b){if(n.b.b.a){if(!n.b.b.b.b||n.b.b.b.a||n.b.b.b.b.b)break n;return Vr(2)}if(n.b.b.b.b&&n.b.b.b.a&&!n.b.b.b.b.b)return Vr(3);break n}break n}break n}break n}return jr}();return 1===t.$?e:s(uu,t.a,e.ae.bT.a,n,e)})),su=function(n){return{$:2,a:n}},du=ft(su(3)),vu=ft(su(0)),mu=ft(su(1)),bu=ft(su(2)),pu=r((function(n,e){var r=bu(e.aA)?Vr(0):du(e.aA)?Vr(1):vu(e.aA)?Vr(2):mu(e.aA)?Vr(3):jr;return 1===r.$?e:s(uu,r.a,e.ae.bT.a,n,e)})),gu=r((function(n,e){return u(fc,0,Pi(u(ko,(function(e){var r=e.b.b;return C(e.a,n)?Vr(r):jr}),e.U)))})),hu=r((function(n,e){return u(gu,n,e.bS)})),xu=hu,Pu=r((function(n,e){var r,t=e.E;switch(t.$){case 1:var o=t.a.cL,a=t.a.eD;return y(n.a5-t.a.V,u(xu,"duration of step animation",n))>0?N(e,{E:a?(r={V:n.a5},{$:3,a:r}):Al,ae:o}):e;case 2:return y(n.a5-t.a.V,u(xu,"duration of mistake animation",n))>0?N(e,{E:Al}):e;default:return e}})),Cu=function(n){return!n.b},Mu=function(n){return f(Nr,t((function(n,e,r){return u(Lr,e,r)})),H,n)},Tu=r((function(n,e){return Cu(Mu(n.ad))?Rl:e})),yu=W,Lu=r((function(n,e){return yu(u(_i,n.bH-e.bH,2)+u(_i,n.bI-e.bI,2))})),wu=t((function(n,e,r){var t=w(e,r),o=t.a,a=t.b;return 0>y(u(Lu,o,a),n)?jr:y(a.bH-o.bH,lc(a.bI-o.bI))>0?Vr(1):y(o.bH-a.bH,lc(a.bI-o.bI))>0?Vr(0):y(a.bI-o.bI,lc(a.bH-o.bH))>0?Vr(2):Vr(3)})),Su=t((function(n,e,r){var t=e.fG,o=w(r,Mu(n.ad));if(1===o.a.$&&o.b.b){var a=f(wu,t,o.a.a,o.b.a);return a.$?r:su(a.a)}return r})),Nu=r((function(n,e){if(1===e.$)return e;var r=Mu(n.ad);return r.b?{$:1,a:r.a}:Rl})),$u=t((function(n,e,r){return f(Su,n,e,u(Tu,n,u(Nu,n,function(n){return 2===n.$?Rl:n}(r))))})),Hu=r((function(n,e){return N(e,{aA:f($u,n,{fG:20},e.aA)})})),Iu=r((function(n,e){return u(Pu,n,u(pu,n,u(fu,n,u(Hu,n,e))))})),Du=te("br"),_u=te("h2"),zu=r((function(n,e){return u($t,_([u(Qc,"min-width","320px"),u(Qc,"max-width","500px"),u(Qc,"margin","0 auto")]),_([u(_u,_([u(Qc,"margin","10px"),u(Qc,"text-align","center")]),_([nl("The Red-Faced Cube")])),u(ll,_([u(Qc,"margin","10px"),u(Qc,"text-align","center"),u(Qc,"font-weight","bold")]),_([nl("A puzzle from Martin Gardner's book Mathematical Carnival (1975)")])),u(ll,_([u(Qc,"margin","10px 20px 10px 20px")]),_([u(Hl,H,_([nl("Tour the board, resting once only")])),u(Hl,function(){var n=e.E;return 2===n.$?n.a.dg?H:_([u(Qc,"background-color","red")]):H}(),_([nl(" on every cell ")])),u(Hl,H,_([nl("and ending with the cube red side up in the northeast corner.")])),u(Du,H,H),u(Hl,(r=e.E,2===r.$&&1===r.a.dg?_([u(Qc,"background-color","red")]):H),_([nl("\n                        At no time during the tour, however,\n                            is the cube allowed to rest with the red side up.\n                    ")])),u(Du,H,H),u(Hl,H,_([nl("\n                        You can roll the cube via swiping or pressing arrow keys.\n                    ")]))]))]));var r})),Au=r((function(n,e){return{$:0,a:n,b:e}})),Ru=function(n){return lc(n)},Yu=r((function(n,e){return y(e,n)>-1})),ku=r((function(n,e){return n+.5*(e-n)})),Vu=r((function(n,e){return e-n})),ju={bH:-1,bI:0,Y:0},Fu={bH:0,bI:-1,Y:0},Eu={bH:0,bI:0,Y:-1},Bu={bH:1,bI:0,Y:0},Uu={bH:0,bI:1,Y:0},Wu={bH:0,bI:0,Y:1},Ou=t((function(n,e,r){return{bH:n,bI:e,Y:r}})),Gu=i((function(n,e,r,t,o,a){var i=u(Yu,r,a)?Wu:Eu,c=u(Yu,e,o)?Uu:Fu,l=u(Yu,n,t)?Bu:ju,s=S(Ru(u(Vu,n,t)),Ru(u(Vu,e,o)),Ru(u(Vu,r,a)));return{eI:{cP:f(Ou,u(ku,n,t),u(ku,e,o),u(ku,r,a)),dk:l,dl:c,dm:i},dv:s}})),qu=function(n){return n.bH},Zu=function(n){return n.bI},Xu=function(n){return n.Y},Ju=r((function(n,e){return v(Gu,qu(n),Zu(n),Xu(n),qu(e),Zu(e),Xu(e))})),Qu=t((function(n,e,r){return{bH:n,bI:e,Y:r}})),Ku=r((function(n,e){var r=S(e.a/2,e.b/2,e.c/2),t=r.a,o=r.b,a=r.c;return u(Au,n,u(Ju,f(Qu,-t,-o,-a),f(Qu,t,o,a)))})),nf=function(n){return n*Bl/180},ef=r((function(n,e){return u(fc,al,Pi(u(ko,(function(e){var r=e.b;return C(e.a,n)?Vr(r):jr}),e.P)))})),rf=r((function(n,e){return u(ef,n,e.bS)})),tf=rf,of=function(n){return{$:5,a:n}},af=function(n){return of(n)},cf=r((function(n,e){return{$:2,a:n,b:e}})),lf=r((function(n,e){return{$:4,a:n,b:e}})),uf=r((function(n,e){return{$:3,a:n,b:e}})),ff=r((function(n,e){return{$:1,a:n,b:e}})),sf=t((function(n,e,r){return{bH:n,bI:e,Y:r}})),df=function(n){return n.eI},vf=function(n){return n.dv},mf=function(n){return n.cP},bf=r((function(n,e){return{bH:e.bH+n.bH,bI:e.bI+n.bI,Y:e.Y+n.Y}})),pf=function(n){return n.dk},gf=function(n){return n.dl},hf=function(n){return n.dm},xf=r((function(n,e){return{cP:u(bf,n,mf(e)),dk:pf(e),dl:gf(e),dm:hf(e)}})),Pf=r((function(n,e){return{eI:u(xf,n,df(e)),dv:vf(e)}})),Cf=r((function(n,e){return{eU:e,cP:n}})),Mf=r((function(n,e){var r=e;return u(Cf,u(bf,n,r.cP),r.eU)})),Tf=r((function(n,e){var r=e;return{k:u(Mf,n,r.k),fe:r.fe,fs:r.fs}})),yf=r((function(n,e){var r=e.b;return w(n(e.a),n(r))})),Lf=r((function(n,e){return u(yf,bf(n),e)})),wf=function(n){return n.eP},Sf=function(n){return n.fs},Nf=r((function(n,e){return{eP:e,fs:Ru(n)}})),$f=r((function(n,e){return u(Nf,Sf(e),u(bf,n,wf(e)))})),Hf=r((function(n,e){var r=e.b,t=e.c;return S(n(e.a),n(r),n(t))})),If=r((function(n,e){return u(Hf,bf(n),e)})),Df=r((function(n,e){var r=n.a,t=n.b,o=n.c,a=f(sf,r,t,o);switch(e.$){case 0:return u(Au,e.a,u(Pf,a,e.b));case 1:return u(ff,e.a,u(If,a,e.b));case 3:return u(uf,e.a,u($f,a,e.b));case 2:return u(cf,e.a,u(Tf,a,e.b));case 4:return u(lf,e.a,u(Lf,a,e.b));default:var i=e.a;return of(u(Bt,Df(S(r,t,o)),i))}})),_f=function(n){return Df(S(n,0,0))},zf=function(n){return Df(S(0,n,0))},Af=function(n){return Df(S(0,0,n))},Rf=V,Yf=j,kf=t((function(n,e,r){var t=n,o=r,a=.5*e,i=Rf(a),c=Yf(a),l=t.eU,u=l.bH*c,f=i*u,s=u*u,d=l.bI*c,v=i*d,m=u*d,b=d*d,p=l.Y*c,g=i*p,h=u*p,x=d*p,P=p*p;return{bH:(1-2*(b+P))*o.bH+2*(m-g)*o.bI+2*(h+v)*o.Y,bI:2*(m+g)*o.bH+(1-2*(s+P))*o.bI+2*(x-f)*o.Y,Y:2*(h-v)*o.bH+2*(x+f)*o.bI+(1-2*(s+b))*o.Y}})),Vf=t((function(n,e,r){var t=n,o=r,a=.5*e,i=Rf(a),c=Yf(a),l=t.cP,u=o.bH-l.bH,f=o.bI-l.bI,s=o.Y-l.Y,d=t.eU,v=d.bH*c,m=i*v,b=v*v,p=d.bI*c,g=i*p,h=v*p,x=p*p,P=d.Y*c,C=i*P,M=v*P,T=p*P,y=P*P;return{bH:l.bH+(1-2*(x+y))*u+2*(h-C)*f+2*(M+g)*s,bI:l.bI+2*(h+C)*u+(1-2*(b+y))*f+2*(T-m)*s,Y:l.Y+2*(M-g)*u+2*(T+m)*f+(1-2*(b+x))*s}})),jf=t((function(n,e,r){return{cP:f(Vf,n,e,mf(r)),dk:f(kf,n,e,pf(r)),dl:f(kf,n,e,gf(r)),dm:f(kf,n,e,hf(r))}})),Ff=t((function(n,e,r){return{eI:f(jf,n,e,df(r)),dv:vf(r)}})),Ef=r((function(n,e){var r=u(Vf,n,e),t=u(kf,n,e);return function(n){var e=n;return u(Cf,r(e.cP),t(e.eU))}})),Bf=t((function(n,e,r){var t=r;return{k:f(Ef,n,e,t.k),fe:t.fe,fs:t.fs}})),Uf=t((function(n,e,r){return u(yf,u(Vf,n,e),r)})),Wf=t((function(n,e,r){return u(Nf,Sf(r),f(Vf,n,e,wf(r)))})),Of=t((function(n,e,r){return u(Hf,u(Vf,n,e),r)})),Gf=t((function(n,e,r){switch(r.$){case 0:return u(Au,r.a,f(Ff,n,e,r.b));case 1:return u(ff,r.a,f(Of,n,e,r.b));case 3:return u(uf,r.a,f(Wf,n,e,r.b));case 2:return u(cf,r.a,f(Bf,n,e,r.b));case 4:return u(lf,r.a,f(Uf,n,e,r.b));default:var t=r.a;return of(u(Bt,u(Gf,n,e),t))}})),qf={bH:0,bI:0,Y:0},Zf=Wu,Xf=u(Cf,qf,Zf),Jf=r((function(n,e){return f(Gf,Xf,n,e)})),Qf=function(n){var e=1-u(xu,"cubes side length",n),r=u(_f,4,u(Ku,u(tf,"wall color",n),S(e,8+e,e)));return u(zf,-.5,u(_f,-.5,af(_([u(Af,-.5,u(Ku,u(tf,"board color",n),S(8.01,8.01,1))),r,u(Jf,nf(90),r),u(Jf,nf(180),r),u(Jf,nf(270),r)]))))},Kf=function(n){return Bl*(n/180)},ns=function(n){return-n},es=r((function(n,e){return{bH:n.bI*e.Y-n.Y*e.bI,bI:n.Y*e.bH-n.bH*e.Y,Y:n.bH*e.bI-n.bI*e.bH}})),rs=function(n){return n.dk},ts=function(n){return n.dl},os=t((function(n,e,r){return f(jf,n(r),e,r)})),as=function(n){return n.eU},is=r((function(n,e){return{bH:n*e.bH,bI:n*e.bI,Y:n*e.Y}})),cs=t((function(n,e,r){return u(xf,u(is,e,n),r)})),ls=t((function(n,e,r){return f(cs,as(n(r)),e,r)})),us=function(n){return u(Cf,n.cP,n.dk)},fs=function(n){return u(Cf,n.cP,n.dl)},ss=function(n){return u(Cf,n.cP,n.dm)},ds=function(n){return.5*n},vs=F,ms=zt,bs=Bu,ps=ms({cP:qf,dk:Zf,dl:bs}),gs=function(n){return a=(e={cf:u(xu,"camera azimuth",n),eV:u(xu,"camera distance",n),cr:u(xu,"camera elevation",n),e1:{bH:-.5,bI:.7,Y:0}}).e1,i=e.cf,c=e.cr,l=e.eV,function(n){var e,r=ds(Ru(n.eA));return{c0:(e=vs(r),{$:0,a:e}),df:n.df}}({eA:Kf(40),df:(r={cf:i,eV:l,cr:c,e1:a,dD:ps},o={cP:r.e1,dk:ts(r.dD),dl:(t=r.dD,u(es,rs(t),ts(t))),dm:rs(r.dD)},f(ls,ss,r.eV,f(os,us,ns(r.cr),f(os,fs,r.cf,o))))});var e,r,t,o,a,i,c,l},hs=t((function(n,e,r){return 0>y(r,n)?n:y(r,e)>0?e:r})),xs=function(n){var e=f(hs,1667,25e3,n),r=e>4e3?-3025846900/(e*e*e)+2107037.9/(e*e)+.2226347*1e3/e+.24039:-266123900.00000003/(e*e*e)-.2343589*1e6/(e*e)+877.6956/e+.17991;return{bH:r,bI:e>2222?e>4e3?r*r*r*3.081758-r*r*5.8733867+3.75112997*r-.37001483:r*r*r*-.9549476-r*r*1.37418593+2.09137015*r-.16748867:r*r*r*-1.1063814-r*r*1.3481102+2.18555832*r-.20219683}},Ps=function(n){return{$:0,a:n}},Cs={$:3},Ms=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),Ts=Ms,ys=r((function(n,e){return e.b?f(Et,Lr,e,n):n})),Ls=function(n){return f(Et,ys,H,n)},ws=r((function(n,e){return Ls(u(Bt,n,e))})),Ss=function(n){return u(ue,"height",Er(n))},Ns=function(n){return oe(function(n){return"script"==n?"p":n}(n))},$s=function(n){return{$:2,a:n}},Hs=r((function(n,e){switch(e.$){case 0:return u(vr,n,e);case 1:return u(mr,n,e);case 2:return u(br,n,e);case 3:return u(pr,n,e);case 4:return u(gr,n,e);default:return u(hr,n,e)}})),Is=r((function(n,e){switch(e.$){case 0:return u(Ze,n,e);case 1:return u(Xe,n,e);case 2:return u(Je,n,e);case 3:return u(Qe,n,e);case 4:return u(Ke,n,e);case 5:return u(nr,n,e);case 6:return u(er,n,e);case 7:return u(rr,n,e);default:return function(n){var e=n.sampleAlphaToCoverage;e.toggle=n.toggle,e.enabled||(n.gl.enable(n.gl.SAMPLE_ALPHA_TO_COVERAGE),e.enabled=!0)}(n)}})),Ds=t((function(n,e,r){return f(dr,n,e,r)})),_s=yr,zs=s(_s,1,1,1,1),As=t((function(n,e,r){return u(Bt,(function(n){return u(n,e,r)}),n)})),Rs=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),Ys=r((function(n,e){var r=e.bH,t=e.bI;return f(Rs,n*r/t,n,n*(1-r-t)/t)})),ks=Mr,Vs=r((function(n,e){return f(ks,3.2406*(t=(r=u(Ys,n,e)).a)-1.5372*(o=r.b)-.4986*(a=r.c),-.9689*t+1.8758*o+.0415*a,.0557*t-.204*o+1.057*a);var r,t,o,a})),js=r((function(n,e){return{dH:C(n.dH,e.dH),p:n.p*e.p+n.q*e.s+n.r*e.v,q:n.p*e.q+n.q*e.t+n.r*e.w,r:n.p*e.r+n.q*e.u+n.r*e.x,s:n.s*e.p+n.t*e.s+n.u*e.v,t:n.s*e.q+n.t*e.t+n.u*e.w,u:n.s*e.r+n.t*e.u+n.u*e.x,v:n.v*e.p+n.w*e.s+n.x*e.v,w:n.v*e.q+n.w*e.t+n.x*e.w,x:n.v*e.r+n.w*e.u+n.x*e.x,H:e.H+(n.H*e.p+n.I*e.s+n.J*e.v)*e.b9,I:e.I+(n.H*e.q+n.I*e.t+n.J*e.w)*e.b9,J:e.J+(n.H*e.r+n.I*e.u+n.J*e.x)*e.b9,b9:n.b9*e.b9}})),Fs=function(n){var e=new Float64Array(16);return e[0]=n.dP,e[1]=n.dT,e[2]=n.dX,e[3]=n.d$,e[4]=n.dQ,e[5]=n.dU,e[6]=n.dY,e[7]=n.d0,e[8]=n.dR,e[9]=n.dV,e[10]=n.dZ,e[11]=n.d1,e[12]=n.dS,e[13]=n.dW,e[14]=n.d_,e[15]=n.d2,e},Es=a((function(n,e,r,t,o){return v(o,n,s(_s,t.b9,t.b9,t.b9,t.dH?1:-1),function(n){return Fs({dP:n.p,dQ:n.s,dR:n.v,dS:n.H,dT:n.q,dU:n.t,dV:n.w,dW:n.I,dX:n.r,dY:n.u,dZ:n.x,d_:n.J,d$:0,d0:0,d1:0,d2:1})}(t),t.dH,e,r)})),Bs=i((function(n,e,r,t,o,a){n:for(;;)switch(o.$){case 0:return a;case 5:var i=o.b;n=n,e=e,r=r,t=u(js,o.a,t),o=i,a=a;continue n;case 1:return{N:u(Lr,d(Es,n,e,r,t,o.b),a.N),X:a.X,fw:a.fw};case 3:return{N:a.N,X:u(Lr,d(Es,n,e,r,t,o.b),a.X),fw:a.fw};case 2:return{N:a.N,X:a.X,fw:u(Lr,d(Es,n,e,r,t,o.a),a.fw)};default:var c=o.a;return f(Wr,s(Bs,n,e,r,t),a,c)}})),Us=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),Ws=Us,Os=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),Gs=r((function(n,e){return{$:6,a:n,b:e}})),qs=Gs,Zs=_([s(Os,518,!1,0,1),s(Ws,!1,!1,!1,!1),u(qs,0,1)]),Xs=519,Js=7681,Qs={src:"\n        precision lowp float;\n\n        void main() {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        }\n    ",attributes:{},uniforms:{}},Ks=qe,nd=r((function(n,e){return{$:0,a:n,b:e}})),ed=nd({dw:1,dG:0,eb:5}),rd=Cr,td=ed(_([{ej:u(rd,-1,-1)},{ej:u(rd,1,-1)},{ej:u(rd,-1,1)},{ej:u(rd,1,1)}])),od={src:"\n        precision lowp float;\n\n        attribute vec2 position;\n\n        void main() {\n            gl_Position = vec4(position, 0.0, 1.0);\n        }\n    ",attributes:{position:"ej"},uniforms:{}},ad=function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return function(f){return{$:2,a:n,b:e,c:r,d:t,e:o,f:a,g:i,h:c,i:l,j:u,k:f}}}}}}}}}}}},id=t((function(n,e,t){var o=n.c2,a=n.cF,i=n.dj,c=r((function(n,e){return e(n)})),l=r((function(n,e){return e(n)})),s=function(n){return u(_t,c(n.by),u(_t,l(n.bi),u(_t,l(n.bJ),l(n.bK))))};return u(s,t,u(s,e,f(ad,o,a,i)))})),cd=function(n){return f(id,{cF:n.cF,c2:n.c2,dj:n.dj},{bi:n.bi,by:n.by,bJ:n.bJ,bK:n.bK},{bi:n.bi,by:n.by,bJ:n.bJ,bK:n.bK})},ld=function(n){return d(Ks,_([cd(n),s(Ws,!1,!1,!1,!1)]),od,Qs,td,{})},ud=ld({bi:Js,cF:0,c2:8,by:Xs,dj:15,bJ:Js,bK:Js}),fd=7680,sd=function(n){return ld({bi:fd,cF:15,c2:8,by:516,dj:(e=n,u(_i,2,e+4)),bJ:5386,bK:5386});var e},dd=t((function(n,e,r){return Ls(_([f(As,n,r,Zs),_([sd(e),ud])]))})),vd=r((function(n,e){return Ls(u(Xr,dd(n),e))})),md=s(Os,513,!0,0,1),bd=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),pd=r((function(n,e){return f(bd,32774,n,e)})),gd=function(n){var e=n.b7,t=n.bV,o=n.bN,a=n.bL,i=n.bQ,c=n.aS;return u(r((function(n,r){var i=n.b,c=n.c,l=r.a,u=r.b,f=r.c;return function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return{$:0,a:n,b:e,c:r,d:t,e:o,f:a,g:i,h:c,i:l,j:u}}}}}}}}}}}(n.a)(i)(c)(l)(u)(f)(e)(t)(o)(a)})),i,c)}({bL:0,aS:u(pd,1,771),bN:0,bQ:u(pd,770,771),bV:0,b7:0}),hd=_([md,gd]),xd=function(n){return n.d6},Pd=function(n){return n.d9},Cd=function(n){return S(u(Vu,function(n){return n.d7}(n),function(n){return n.d4}(n)),u(Vu,function(n){return n.d8}(n),function(n){return n.d5}(n)),u(Vu,Pd(n),xd(n)))},Md=function(n){return mf(n)},Td=function(n){return{cP:{bH:n.H,bI:n.I,Y:n.J},dk:{bH:n.p,bI:n.q,Y:n.r},dl:{bH:n.s,bI:n.t,Y:n.u},dm:{bH:n.v,bI:n.w,Y:n.x}}},yd=r((function(n,e){var r=n.dm,t=n.dl,o=n.dk;return{bH:e.bH*o.bH+e.bI*o.bI+e.Y*o.Y,bI:e.bH*t.bH+e.bI*t.bI+e.Y*t.Y,Y:e.bH*r.bH+e.bI*r.bI+e.Y*r.Y}})),Ld=r((function(n,e){var r=n.cP,t=e.bH-r.bH,o=e.bI-r.bI,a=e.Y-r.Y,i=n.dm,c=n.dl,l=n.dk;return{bH:t*l.bH+o*l.bI+a*l.Y,bI:t*c.bH+o*c.bI+a*c.Y,Y:t*i.bH+o*i.bI+a*i.Y}})),wd=r((function(n,e){return{cP:u(Ld,n,mf(e)),dk:u(yd,n,pf(e)),dl:u(yd,n,gf(e)),dm:u(yd,n,hf(e))}})),Sd=r((function(n,e){return u(vt,n,e)})),Nd=r((function(n,e){return 0>y(n,e)?n:e})),$d=r((function(n,e){return u(Nd,n,e)})),Hd=r((function(n,e){var r=e,t=n;return{d4:u(Sd,t.d4,r.d4),d5:u(Sd,t.d5,r.d5),d6:u(Sd,t.d6,r.d6),d7:u($d,t.d7,r.d7),d8:u($d,t.d8,r.d8),d9:u($d,t.d9,r.d9)}})),Id=r((function(n,e){return e+n})),Dd=r((function(n,e){var r=n.a,t=n.c,o=ds(Ru(n.b)),a=ds(Ru(r)),i=ds(Ru(t)),c=function(n){return S(n.bH,n.bI,n.Y)}(e),l=c.a,f=c.b,s=c.c;return{d4:u(Id,a,l),d5:u(Id,o,f),d6:u(Id,i,s),d7:u(Vu,a,l),d8:u(Vu,o,f),d9:u(Vu,i,s)}})),_d=o((function(n,e,r,t){var o=r.eP,a=2*r.e5*e,i=2*r.e4*e,c=2*r.e3*e,l=o.Y*e,s=o.bI*e,d=o.bH*e,v=hf(n),m=lc(c*v.bH)+lc(i*v.bI)+lc(a*v.Y),b=gf(n),p=lc(c*b.bH)+lc(i*b.bI)+lc(a*b.Y),g=pf(n),h=lc(c*g.bH)+lc(i*g.bI)+lc(a*g.Y),x=u(Dd,S(h,p,m),u(Ld,n,f(Qu,d,s,l)));return Vr(t.$?x:u(Hd,t.a,x))})),zd=o((function(n,e,r,t){n:for(;;){if(!t.b)return r;var o=t.a,a=t.b;switch(o.$){case 0:n=c=n,e=l=e,r=f=r,t=a;continue n;case 1:var i=s(_d,n,e,o.a,r);n=c=n,e=l=e,r=f=i,t=a;continue n;case 2:n=c=n,e=l=e,r=f=r,t=a;continue n;case 3:i=s(_d,n,e,o.a,r),n=c=n,e=l=e,r=f=i,t=a;continue n;case 4:var c=n,l=e,f=s(zd,n,e,r,o.a);n=c,e=l,r=f,t=a;continue n;default:var d=o.a,v=o.b,m=u(wd,Td(d),n),b=e*d.b9;n=c=n,e=l=e,r=f=s(zd,m,b,r,_([v])),t=a;continue n}}})),Ad=function(n){return n[0]},Rd=function(n){return n[1]},Yd=function(n){return n[2]},kd=function(n){return{$:4,a:n}},Vd=r((function(n,e){for(;;){if(!n.b)return e;var r=n.a;n=n.b,e=u(Lr,r,e)}})),jd=function(n){return kd(u(Vd,n,H))},Fd={dH:!0,p:1,q:0,r:0,s:0,t:1,u:0,v:0,w:0,x:1,H:0,I:0,J:0,b9:1},Ed=ld({bi:Js,cF:0,c2:8,by:Xs,dj:255,bJ:Js,bK:Js}),Bd={bN:0,eO:!1,bV:0,c_:0,b7:0,dc:0,bH:0,bI:0,Y:0},Ud=r((function(n,e){return Fs({dP:n.bH,dQ:n.b7,dR:e.bH,dS:e.b7,dT:n.bI,dU:n.bV,dV:e.bI,dW:e.bV,dX:n.Y,dY:n.bN,dZ:e.Y,d_:e.bN,d$:n.dc,d0:n.c_,d1:e.dc,d2:e.c_})})),Wd=w({bp:u(Ud,Bd,Bd),bZ:u(Ud,Bd,Bd),b_:u(Ud,Bd,Bd),b$:u(Ud,Bd,Bd)},s(_s,0,0,0,0)),Od=r((function(n,e){return n*e})),Gd=function(n){return s(Os,515,n.af,n._,n.Z)},qd=_([Gd({Z:1,_:0,af:!0}),cd({bi:fd,cF:240,c2:0,by:514,dj:0,bJ:fd,bK:fd}),gd]),Zd=r((function(n,e){var r=n,t=e.e0,o=e.eH,a=Ru(e.fl),i=Ru(t),c=r.c0;if(c.$){var l=c.a;return gc(i)?Fs({dP:2/(o*l),dQ:0,dR:0,dS:0,dT:0,dU:2/l,dV:0,dW:0,dX:0,dY:0,dZ:0,d_:-1,d$:0,d0:0,d1:0,d2:1}):Fs({dP:2/(o*l),dQ:0,dR:0,dS:0,dT:0,dU:2/l,dV:0,dW:0,dX:0,dY:0,dZ:-2/(i-a),d_:-(i+a)/(i-a),d$:0,d0:0,d1:0,d2:1})}var u=c.a;return gc(i)?Fs({dP:1/(o*u),dQ:0,dR:0,dS:0,dT:0,dU:1/u,dV:0,dW:0,dX:0,dY:0,dZ:-1,d_:-2*a,d$:0,d0:0,d1:-1,d2:0}):Fs({dP:1/(o*u),dQ:0,dR:0,dS:0,dT:0,dU:1/u,dV:0,dW:0,dX:0,dY:0,dZ:-(i+a)/(i-a),d_:-2*i*a/(i-a),d$:0,d0:0,d1:-1,d2:0})})),Xd=r((function(n,e){return 1==(1&n>>e)?0:1})),Jd=t((function(n,e,r){return Ls(u(Bt,(function(r){var t=r<<4;return f(As,n,w(e,s(_s,u(Xd,r,0),u(Xd,r,1),u(Xd,r,2),u(Xd,r,3))),function(n){return _([Gd({Z:1,_:0,af:!0}),cd({bi:fd,cF:240,c2:n,by:514,dj:0,bJ:fd,bK:fd}),gd])}(t))}),u(Zr,1,u(_i,2,r)-1)))})),Qd=function(n){return{bH:-n.bH,bI:-n.bI,Y:-n.Y}},Kd=function(n){return Qd(hf(n))},nv=Uu,ev={cP:qf,dk:bs,dl:nv,dm:Zf},rv=r((function(n,e){var r,t,o,a,i;return t=mf(r=u(wd,e,n)),o=hf(r),a=gf(r),i=pf(r),Fs({dP:i.bH,dQ:a.bH,dR:o.bH,dS:t.bH,dT:i.bI,dU:a.bI,dV:o.bI,dW:t.bI,dX:i.Y,dY:a.Y,dZ:o.Y,d_:t.Y,d$:0,d0:0,d1:0,d2:1})})),tv=function(n){return pf(n)},ov=t((function(n,e,r){return{bH:n,bI:e,Y:r}})),av=function(n){return gf(n)},iv=r((function(n,e){var r,t=_([(1,{$:1,a:1}),$s(0),Ps(!0),s(Ts,0,0,0,0)]),o=function(){var e=n.eF;switch(e.$){case 0:return S(t,"0",1);case 1:return S(u(Lr,Cs,t),"1",1);default:return S(t,"0",e.a)}}(),a=o.a,i=o.b,c=o.c,l=n.dv,d=l.a,m=l.b,b=u(Qc,"height",Er(m)+"px"),p=d,g=p/m,h=u(ws,(function(e){return function(n){var e=function(n){return n.df}(n.eM),r={cP:Md(e),dk:tv(e),dl:av(e),dm:Qd(Kd(e))},t=jd(n.dz),o=s(zd,r,1,jr,_([t]));if(1===o.$)return H;var a=o.a,i=u(rv,ev,e),c=u(Od,.99,u(Sd,Ru(n.eR),ns(xd(a)))),l=Cd(a),d=function(n){var e=n,r=u(vt,lc(e.bH),u(vt,lc(e.bI),lc(e.Y)));if(r){var t=e.Y/r,o=e.bI/r,a=e.bH/r;return yu(a*a+o*o+t*t)*r}return 0}(f(ov,l.a,l.b,l.c)),m=u(Od,1.01,u(Id,d,ns(Pd(a)))),b=u(Zd,n.eM,{eH:n.eH,e0:m,fl:c}),p=function(n){return{dP:n[0],dT:n[1],dX:n[2],d$:n[3],dQ:n[4],dU:n[5],dY:n[6],d0:n[7],dR:n[8],dV:n[9],dZ:n[10],d1:n[11],dS:n[12],dW:n[13],d_:n[14],d2:n[15]}}(b).d2,g=p?Qd(Kd(e)):Md(e),h=function(){var e=n.fI;switch(e.$){case 0:return w(0,0);case 1:return w(1,0);case 2:return w(2,0);case 3:return w(3,e.a);case 4:return w(4,e.a);default:return w(5,0)}}(),x=h.a,P=h.b,C=u(Vs,n.e_,n.fN),M=Fs({dP:0,dQ:g.bH,dR:Ad(C),dS:n.ev,dT:0,dU:g.bI,dV:Rd(C),dW:d,dX:0,dY:g.Y,dZ:Yd(C),d_:x,d$:0,d0:p,d1:0,d2:P}),T=v(Bs,M,i,b,Fd,t,{N:H,X:H,fw:H}),y=n.fg;switch(y.$){case 0:return Ls(_([f(As,T.N,w(L=y.a,zs),hd),f(As,T.X,Wd,hd)]));case 1:var L=y.a;return Ls(_([f(As,T.N,Wd,hd),_([Ed]),f(As,T.fw,L.bp,Zs),_([sd(0)]),f(As,T.N,w(L,zs),qd),f(As,T.X,Wd,hd)]));default:var S=y.a,N=y.b;return Ls(_([f(As,T.N,w(N,zs),hd),_([Ed]),u(vd,T.fw,S),f(Jd,T.N,N,Or(S)),f(As,T.X,Wd,hd)]))}}({eH:g,eM:n.eM,eR:n.eR,dz:e.dz,e_:e.e_,fg:e.fg,ev:c,fI:e.fI,fN:e.fN})}),e),x=u(Qc,"width",Er(p)+"px"),P=function(n){var e,r,t=n.b,o=n.c,a=n.d,i=function(n){return zi(1e4*n)/100};return e=_(["rgba(",bc(i(n.a)),"%,",bc(i(t)),"%,",bc(i(o)),"%,",bc((r=a,zi(1e3*r)/1e3)),")"]),u(Br,"",e)}(n.dp);return f(Ns,"div",_([u(Qc,"padding","0px"),x,b]),_([w(i,f(Ds,a,_([(r=zi(p*c),u(ue,"width",Er(r))),Ss(zi(m*c)),x,b,u(Qc,"display","block"),u(Qc,"background-color",P)]),h))]))})),cv=o((function(n,e,r,t){return{$:2,a:n,b:e,c:r,d:t}})),lv=o((function(n,e,r,t){return{$:3,a:n,b:e,c:r,d:t}})),uv=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),fv=o((function(n,e,r,t){return{$:6,a:n,b:e,c:r,d:t}})),sv=o((function(n,e,r,t){return{$:7,a:n,b:e,c:r,d:t}})),dv=o((function(n,e,r,t){return{$:5,a:n,b:e,c:r,d:t}})),vv=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),mv=function(n){switch(n.$){case 0:return n;case 1:return s(vv,n.a,n.b,n.c,1);case 2:return s(cv,n.a,n.b,n.c,1);case 3:return s(lv,n.a,n.b,n.c,1);case 4:return s(uv,n.a,n.b,n.c,1);case 5:return s(dv,n.a,n.b,n.c,1);case 6:return s(fv,n.a,n.b,n.c,1);case 7:return s(sv,n.a,n.b,n.c,1);case 8:case 9:default:return n}},bv={$:0},pv=l((function(n,e,r,t,o,a,i,c){for(;;){if(!c.b)return{d4:e,d5:t,d6:a,d7:n,d8:r,d9:o};var l=c.b,f=i(c.a);n=u($d,f.d7,n),e=u(Sd,f.d4,e),r=u($d,f.d8,r),t=u(Sd,f.d5,t),o=u($d,f.d9,o),a=u(Sd,f.d6,a),i=i,c=l}})),gv=t((function(n,e,r){var t=n(e);return b(pv,t.d7,t.d4,t.d8,t.d5,t.d9,t.d6,n,r)})),hv=r((function(n,e){return 1>y(e,n)})),xv=function(n){return u(hv,n.d4,n.d7)&&u(hv,n.d5,n.d8)&&u(hv,n.d6,n.d9)?n:{d4:u(Sd,n.d7,n.d4),d5:u(Sd,n.d8,n.d5),d6:u(Sd,n.d9,n.d6),d7:u($d,n.d7,n.d4),d8:u($d,n.d8,n.d5),d9:u($d,n.d9,n.d6)}},Pv=function(n){return n},Cv=function(n){var e=n.a,r=n.b,t=n.c,o=qu(e),a=Zu(e),i=Xu(e),c=qu(r),l=Zu(r),f=Xu(r),s=qu(t),d=Zu(t),v=Xu(t);return xv({d4:u(Sd,o,u(Sd,c,s)),d5:u(Sd,a,u(Sd,l,d)),d6:u(Sd,i,u(Sd,f,v)),d7:u($d,o,u($d,c,s)),d8:u($d,a,u($d,l,d)),d9:u($d,i,u($d,f,v))})},Mv=function(n){return new Float64Array([n.bH,n.bI,n.Y])},Tv=function(n){return Mv(n)},yv=function(n){return Mv(n)},Lv=r((function(n,e){return{bH:e.bI*n.Y-e.Y*n.bI,bI:e.Y*n.bH-e.bH*n.Y,Y:e.bH*n.bI-e.bI*n.bH}})),wv=r((function(n,e){return{bH:e.bH-n.bH,bI:e.bI-n.bI,Y:e.Y-n.Y}})),Sv={bH:0,bI:0,Y:0},Nv=r((function(n,e){var r=n,t=e,o=u(vt,lc(t.bH),u(vt,lc(t.bI),lc(t.Y)));if(o){var a=t.Y/o,i=t.bI/o,c=t.bH/o,l=yu(c*c+i*i+a*a);return{bH:r*c/l,bI:r*i/l,Y:r*a/l}}return Sv})),$v=Nv(1),Hv=t((function(n,e,r){return $v(u(Lv,u(wv,e,r),u(wv,n,e)))})),Iv=function(n){var e=n.a,r=n.b,t=n.c,o=yv(f(Hv,e,r,t));return S({n:o,ej:Tv(e)},{n:o,ej:Tv(r)},{n:o,ej:Tv(t)})},Dv=r((function(n,e){return{$:2,a:n,b:e}})),_v=Dv({dw:3,dG:0,eb:4}),zv=t((function(n,e,r){return S(n,e,r)})),Av=(Fo=u(Od,-.5,1),Eo=u(Od,-.5,1),Bo=u(Od,-.5,1),Uo=f(Ou,Bo,Eo,Fo),Wo=u(Od,.5,1),Oo=f(Ou,Bo,Eo,Wo),Go=u(Od,.5,1),qo=f(Ou,Bo,Go,Fo),Zo=f(Ou,Bo,Go,Wo),Xo=u(Od,.5,1),Jo=f(Ou,Xo,Eo,Fo),Qo=f(Ou,Xo,Go,Fo),Ko=f(Ou,Xo,Eo,Wo),na=f(Ou,Xo,Go,Wo),mv(function(n){if(n.b){var e=n.a,r=n.b,t=_v(u(Bt,Iv,n));return s(cv,f(gv,Cv,e,r),n,t,0)}return bv}(_([f(zv,Uo,Qo,Jo),f(zv,Uo,qo,Qo),f(zv,Oo,Ko,na),f(zv,Oo,na,Zo),f(zv,Jo,Qo,na),f(zv,Jo,na,Ko),f(zv,Uo,Zo,qo),f(zv,Uo,Oo,Zo),f(zv,Uo,Jo,Ko),f(zv,Uo,Ko,Oo),f(zv,qo,na,Qo),f(zv,qo,Zo,na)])))),Rv={$:0},Yv=t((function(n,e,r){return{$:1,a:n,b:e,c:r}})),kv=t((function(n,e,r){var t=e.a,o=e.b,a=n(e.c),i=n(o),c=n(t),l=yv(f(Hv,c,i,a)),s={n:l,ej:Tv(c)},d={n:l,ej:Tv(i)},v={n:l,ej:Tv(a)};return u(Lr,s,u(Lr,d,u(Lr,v,r)))})),Vv=function(n){return n.B},jv=o((function(n,e,r,t){return 1===e.$||1===r.$||1===t.$?jr:Vr(f(n,e.a,r.a,t.a))})),Fv=4294967295>>>32-it,Ev=h,Bv=t((function(n,e,r){for(;;){var t=u(Ev,Fv&e>>>n,r);if(t.$)return u(Ev,Fv&e,t.a);n-=it,e=e,r=t.a}})),Uv=r((function(n,e){var r=e.a,t=e.b,o=e.c,a=e.d;return 0>n||y(n,r)>-1?jr:y(n,function(n){return n>>>5<<5}(r))>-1?Vr(u(Ev,Fv&n,a)):Vr(f(Bv,t,n,o))})),Wv=function(n){return n.aq},Ov=r((function(n,e){return u(Uv,n,Wv(e))})),Gv=t((function(n,e,r){for(;;){var t=u(bt,nt,n),o=t.a,a=t.b;if(0>y(dt(o),nt))return u(ht,!0,{y:e,l:r,o:o});n=a,e=u(Lr,ut(o),e),r+=1}})),qv=function(n){return n.b?f(Gv,n,H,0):ct},Zv=r((function(n,e){return!u(vc,u(go,dc,n),e)})),Xv=r((function(n,e){return f(Et,r((function(e,r){return n(e)?u(Lr,e,r):r})),H,e)})),Jv=r((function(n,e){var r=function(n){return n.a}(n),t=function(n){var e=n.a,t=n.b,o=n.c;return e>=0&&0>y(e,r)&&t>=0&&0>y(t,r)&&o>=0&&0>y(o,r)};return u(Zv,t,e)?{B:e,aq:n}:{B:u(Xv,t,e),aq:n}})),Qv=t((function(n,e,r){return{$:3,a:n,b:e,c:r}}))({dw:1,dG:3,eb:4}),Kv=r((function(n,e){var r=e;return w(S(n.bH,n.bI,n.Y),S(r.bH,r.bI,r.Y))})),nm=r((function(n,e){n:for(;;){if(-2===e.$)return jr;var r=e.c,t=e.d,o=e.e;switch(u(So,n,e.b)){case 0:n=n,e=t;continue n;case 1:return Vr(r);default:n=n,e=o;continue n}}})),em=f(ks,0,0,0),rm=i((function(n,e,r,t,o,a){var i=a.a,c=a.b,l=a.c,f=u(nm,u(Kv,n,e),o);if(f.$){var s={n:em,ej:Tv(e)},d={n:em,ej:Tv(n)},v=l+1;return S(u(Lr,S(r,l,v),u(Lr,S(r,v,t),i)),u(Lr,s,u(Lr,d,c)),l+2)}return S(u(Lr,S(r,f.a,t),i),c,l)})),tm=a((function(n,e,r,t,o){for(;;){if(!r.b)return w(o.a,Qr(o.b));var a=r.a,i=a.a,c=a.b,l=r.b,u=n(a.c),f=n(c),s=n(i),d=t+2,m=t+1,b=n,p=e,g=l,h=t+3,x=v(rm,u,s,d,t,e,v(rm,f,u,m,d,e,v(rm,s,f,t,m,e,o)));n=b,e=p,r=g,t=h,o=x}})),om=a((function(n,e,r,t,o){for(;;){if(!e.b)return S(t,o,r);var a=e.a,i=a.a,c=a.b,l=e.b,s=n(a.c),d=n(c),v=n(i),m=r+2,b=r+1,p=r,g=f($o,u(Kv,v,s),m,f($o,u(Kv,s,d),b,f($o,u(Kv,d,v),p,o)));n=n,e=l,r+=3,t=u(Lr,S(p,b,m),t),o=g}})),am=t((function(n,e,r){var o,a=u(ko,(function(n){var e=n.a,r=n.b,a=n.c;return s(jv,t((function(n,e,r){return S(n,e,r)})),u(Ov,e,o),u(Ov,r,o),u(Ov,a,o))}),Vv(o=r)),i=f(Et,kv(e),H,a),c=d(om,e,a,0,H,Mo),l=d(tm,e,c.b,a,0,S(c.a,H,c.c)),v=l.a,m=l.b,b=Cu(m)?i:$(i,m);return f(Yv,n,u(Jv,qv(b),v),u(Qv,b,v))})),im=function(n){return{B:u(Bt,(function(n){return S(3*n,3*n+1,3*n+2)}),u(Zr,0,Or(n)-1)),aq:qv(Ls(u(Bt,(function(n){return _([n.a,n.b,n.c])}),n)))}},cm=function(n){switch(n.$){case 0:return Rv;case 1:case 2:return f(am,n.a,zt,im(u(Bt,Pv,n.b)));case 3:return f(am,n.a,zt,n.b);case 4:case 5:case 6:case 7:return f(am,n.a,(function(n){return n.ej}),n.b);case 8:case 9:default:return Rv}},lm=cm(Av),um={$:0},fm=um,sm=r((function(n,e){return{$:1,a:n,b:e}})),dm={src:"\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        void main () {\n            gl_FragColor = texture2D(colorTexture, interpolatedUv);\n        }\n    ",attributes:{},uniforms:{colorTexture:"bR"}},vm=function(n){return{$:5,a:n}},mm=vm(1029),bm=vm(1028),pm=t((function(n,e,r){return 1===e?u(Lr,n?mm:bm,r):r})),gm={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute mediump vec2 uv;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedUv = uv;\n        }\n    ",attributes:{position:"ej",uv:"L"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},hm=o((function(n,e,r,t){return u(sm,e,l((function(e,o,a,i,c,l,u,s){return d(Ks,f(pm,i,t,s),gm,dm,r,{bR:n,b:a,c:o,d:l,e:e,f:c})})))})),xm={src:"\n        precision lowp float;\n        \n        uniform lowp vec3 constantColor;\n        \n        void main () {\n            gl_FragColor = vec4(constantColor, 1.0);\n        }\n    ",attributes:{},uniforms:{constantColor:"aG"}},Pm={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{position:"ej"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Cm=o((function(n,e,r,t){return u(sm,e,l((function(e,o,a,i,c,l,u,s){return d(Ks,f(pm,i,t,s),Pm,xm,r,{aG:n,b:a,c:o,d:l,e:e,f:c})})))})),Mm=r((function(n,e){return{$:3,a:n,b:e}})),Tm={src:"\n        precision lowp float;\n        \n        uniform lowp vec3 constantColor;\n        uniform lowp float pointRadius;\n        uniform highp mat4 sceneProperties;\n        \n        float pointAlpha(float pointRadius, vec2 pointCoord) {\n            float pointSize = 2.0 * pointRadius;\n            float x = (pointSize + 2.0) * (pointCoord.s - 0.5);\n            float y = (pointSize + 2.0) * (pointCoord.t - 0.5);\n            float r = sqrt(x * x + y * y);\n            float innerRadius = pointRadius;\n            float outerRadius = pointRadius + 1.0;\n            if (r > outerRadius) {\n                return 0.0;\n            } else if (r > innerRadius) {\n                return outerRadius - r;\n            } else {\n                return 1.0;\n            }\n        }\n        \n        void main () {\n            float supersampling = sceneProperties[3][0];\n            float alpha = pointAlpha(pointRadius * supersampling, gl_PointCoord);\n            gl_FragColor = vec4(constantColor, alpha);\n        }\n    ",attributes:{},uniforms:{constantColor:"aG",pointRadius:"b5",sceneProperties:"e"}},ym={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform lowp float pointRadius;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            float supersampling = sceneProperties[3][0];\n            gl_PointSize = 2.0 * pointRadius * supersampling + 2.0;\n        }\n    ",attributes:{position:"ej"},uniforms:{modelMatrix:"b",modelScale:"c",pointRadius:"b5",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Lm=o((function(n,e,r,t){return u(Mm,r,l((function(r,o,a,i,c,l,u,f){return d(Ks,f,ym,Tm,t,{aG:n,b:a,c:o,b5:e,d:l,e:r,f:c})})))})),wm={src:"\n        precision mediump float;\n        \n        uniform mediump vec3 emissiveColor;\n        uniform highp mat4 sceneProperties;\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{emissiveColor:"aV",sceneProperties:"e"}},Sm=Tr,Nm=a((function(n,e,r,t,o){return u(sm,r,l((function(r,a,i,c,l,s,v,m){return d(Ks,f(pm,c,o,m),Pm,wm,t,{aV:u(Sm,e,n),b:i,c:a,d:s,e:r,f:l})})))})),$m={src:"\n        precision mediump float;\n        \n        uniform mediump vec3 emissiveColor;\n        uniform lowp float pointRadius;\n        uniform highp mat4 sceneProperties;\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        float pointAlpha(float pointRadius, vec2 pointCoord) {\n            float pointSize = 2.0 * pointRadius;\n            float x = (pointSize + 2.0) * (pointCoord.s - 0.5);\n            float y = (pointSize + 2.0) * (pointCoord.t - 0.5);\n            float r = sqrt(x * x + y * y);\n            float innerRadius = pointRadius;\n            float outerRadius = pointRadius + 1.0;\n            if (r > outerRadius) {\n                return 0.0;\n            } else if (r > innerRadius) {\n                return outerRadius - r;\n            } else {\n                return 1.0;\n            }\n        }\n        \n        void main () {\n            vec4 color = toSrgb(emissiveColor, sceneProperties);\n            float supersampling = sceneProperties[3][0];\n            float alpha = pointAlpha(pointRadius * supersampling, gl_PointCoord);\n            gl_FragColor = vec4(color.rgb, alpha);\n        }\n    ",attributes:{},uniforms:{emissiveColor:"aV",pointRadius:"b5",sceneProperties:"e"}},Hm=a((function(n,e,r,t,o){return u(Mm,t,l((function(t,a,i,c,l,f,s,v){return d(Ks,v,ym,$m,o,{aV:u(Sm,e,n),b:i,c:a,b5:r,d:f,e:t,f:l})})))})),Im={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 materialColor;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{enabledLights:"R",lights12:"bp",lights34:"bZ",lights56:"b_",lights78:"b$",materialColor:"cG",sceneProperties:"e",viewMatrix:"f"}},Dm={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n        }\n    ",attributes:{normal:"n",position:"ej"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},_m=o((function(n,e,r,t){return u(sm,e,l((function(e,o,a,i,c,l,u,s){var v=u.a,m=u.b;return d(Ks,f(pm,i,t,s),Dm,Im,r,{R:m,bp:v.bp,bZ:v.bZ,b_:v.b_,b$:v.b$,cG:n,b:a,c:o,d:l,e:e,f:c})})))})),zm={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D materialColorTexture;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n            vec3 materialColor = fromSrgb(texture2D(materialColorTexture, interpolatedUv).rgb);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{enabledLights:"R",lights12:"bp",lights34:"bZ",lights56:"b_",lights78:"b$",materialColorTexture:"cH",normalMapTexture:"a0",sceneProperties:"e",useNormalMap:"a7",viewMatrix:"f"}},Am={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        attribute mediump vec2 uv;\n        attribute highp vec3 tangent;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getWorldTangent(vec3 modelTangent, vec4 modelScale, mat4 modelMatrix) {\n            return (modelMatrix * vec4(safeNormalize(modelScale.xyz * modelTangent), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = uv;\n            interpolatedTangent = getWorldTangent(tangent, modelScale, modelMatrix);\n        }\n    ",attributes:{normal:"n",position:"ej",tangent:"ex",uv:"L"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Rm=i((function(n,e,r,t,o,a){return u(sm,t,l((function(t,i,c,l,u,s,v,m){var b=v.a,p=v.b;return d(Ks,f(pm,l,a,m),Am,zm,o,{R:p,bp:b.bp,bZ:b.bZ,b_:b.b_,b$:b.b$,cH:n,b:c,c:i,a0:e,d:s,e:t,a7:r,f:u})})))})),Ym={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D baseColorTexture;\n        uniform lowp vec4 constantBaseColor;\n        uniform mediump sampler2D roughnessTexture;\n        uniform lowp vec2 constantRoughness;\n        uniform mediump sampler2D metallicTexture;\n        uniform lowp vec2 constantMetallic;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getFloatValue(sampler2D texture, vec2 uv, vec2 constantValue) {\n            if (constantValue.y == 1.0) {\n                return constantValue.x;\n            } else {\n                vec4 textureColor = texture2D(texture, uv);\n                return dot(textureColor, vec4(0.2126, 0.7152, 0.0722, 0.0));\n            }\n        }\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 baseColor = fromSrgb(texture2D(baseColorTexture, interpolatedUv).rgb) * (1.0 - constantBaseColor.w) + constantBaseColor.rgb * constantBaseColor.w;\n            float roughness = getFloatValue(roughnessTexture, interpolatedUv, constantRoughness);\n            float metallic = getFloatValue(metallicTexture, interpolatedUv, constantMetallic);\n        \n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{baseColorTexture:"ck",constantBaseColor:"cn",constantMetallic:"co",constantRoughness:"cp",enabledLights:"R",lights12:"bp",lights34:"bZ",lights56:"b_",lights78:"b$",metallicTexture:"cK",normalMapTexture:"a0",roughnessTexture:"c6",sceneProperties:"e",useNormalMap:"a7",viewMatrix:"f"}},km={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 baseColor;\n        uniform lowp float roughness;\n        uniform lowp float metallic;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{baseColor:"cj",enabledLights:"R",lights12:"bp",lights34:"bZ",lights56:"b_",lights78:"b$",metallic:"cJ",roughness:"c5",sceneProperties:"e",viewMatrix:"f"}},Vm=i((function(n,e,r,t,o,a){return u(sm,t,l((function(t,i,c,l,u,s,v,m){var b=v.a,p=v.b;return d(Ks,f(pm,l,a,m),Dm,km,o,{cj:n,R:p,bp:b.bp,bZ:b.bZ,b_:b.b_,b$:b.b$,cJ:r,b:c,c:i,d:s,c5:e,e:t,f:u})})))})),jm=r((function(n,e){return{$:1,a:n,b:e}})),Fm=r((function(n,e){return e.$?w(e.a.A,1):w(n,0)})),Em=s(_s,0,0,0,0),Bm=r((function(n,e){var r;return e.$?w(e.a.A,Em):w(n,s(_s,Ad(r=e.a),Rd(r),Yd(r),1))})),Um=r((function(n,e){var r,t=w(n,e);return t.a.$?u(jm,w(r=t.a.a.A,Em),u(Fm,r,e)):t.b.$?u(jm,u(Bm,r=t.b.a.A,n),u(Fm,r,e)):{$:0,a:t.a.a}})),Wm=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),Om=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),Gm=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),qm=u(rd,0,0),Zm=r((function(n,e){return e.$?w(e.a.A,qm):w(n,u(rd,e.a,1))})),Xm=o((function(n,e,r,t){var o,a=s(Gm,n,e,r,t);return a.a.$?s(Om,w(o=a.a.a.A,Em),u(Zm,o,e),u(Zm,o,r),u(Fm,o,t)):a.b.$?s(Om,u(Bm,o=a.b.a.A,n),w(o,qm),u(Zm,o,r),u(Fm,o,t)):a.c.$?s(Om,u(Bm,o=a.c.a.A,n),u(Zm,o,e),w(o,qm),u(Fm,o,t)):a.d.$?s(Om,u(Bm,o=a.d.a.A,n),u(Zm,o,e),u(Zm,o,r),w(o,1)):f(Wm,a.a.a,a.b.a,a.c.a)})),Jm={src:"\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        uniform mediump float backlight;\n        uniform highp mat4 sceneProperties;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            vec3 emissiveColor = fromSrgb(texture2D(colorTexture, interpolatedUv).rgb) * backlight;\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{backlight:"cg",colorTexture:"bR",sceneProperties:"e"}},Qm=a((function(n,e,r,t,o){return u(sm,r,l((function(r,a,i,c,l,u,s,v){return d(Ks,f(pm,c,o,v),gm,Jm,t,{cg:e,bR:n,b:i,c:a,d:u,e:r,f:l})})))})),Km={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        attribute mediump vec2 uv;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = uv;\n            interpolatedTangent = vec3(0.0, 0.0, 0.0);\n        }\n    ",attributes:{normal:"n",position:"ej",uv:"L"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},nb=o((function(n,e,r,t){return u(sm,e,l((function(e,o,a,i,c,l,u,s){var v=u.a,m=u.b;return d(Ks,f(pm,i,t,s),Km,zm,r,{R:m,bp:v.bp,bZ:v.bZ,b_:v.b_,b$:v.b$,cH:n,b:a,c:o,a0:n,d:l,e:e,a7:0,f:c})})))})),eb=function(n){return e(9,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return n(e,r,t,o,a,i,c,l,u)}}}}}}}}}))}((function(n,e,r,t,o,a,i,c,s){return u(sm,i,l((function(i,l,u,v,m,b,p,g){var h=p.a,x=p.b;return d(Ks,f(pm,v,s,g),Km,Ym,c,{ck:n,cn:e,co:a,cp:t,R:x,bp:h.bp,bZ:h.bZ,b_:h.b_,b$:h.b$,cK:o,b:u,c:l,a0:n,d:b,c6:r,e:i,a7:0,f:m})})))})),rb=t((function(n,e,r){return r>.5?e+(1-r)*(n-e):n+r*(e-n)})),tb=function(n){return f(Ou,function(n){return f(rb,n.d7,n.d4,.5)}(n),function(n){return f(rb,n.d8,n.d5,.5)}(n),function(n){return f(rb,n.d9,n.d6,.5)}(n))},ob=function(n){var e=Cd(n),r=e.a,t=e.b,o=e.c;return{eP:tb(n),e3:r/2,e4:t/2,e5:o/2}},ab=r((function(n,e){switch(n.$){case 0:if(n.b.$){var r=n.b.a.A;switch(e.$){case 0:case 1:case 2:case 3:case 4:return fm;case 5:case 6:case 7:return o=e.c,a=e.d,s(hm,r,ob(A=e.a),o,a);case 8:case 9:default:return fm}}else{var t=n.b.a;switch(e.$){case 0:return fm;case 1:var o=e.c,a=e.d;return s(Cm,t,ob(A=e.a),o,a);case 2:case 3:case 4:return o=e.c,a=e.d,s(Cm,t,ob(A=e.a),o,a);case 5:case 6:case 7:return o=e.c,a=e.d,s(Cm,t,ob(A=e.a),o,a);case 8:case 9:return o=e.c,s(Cm,t,ob(A=e.a),o,0);default:return o=e.d,s(Lm,t,e.b,ob(A=e.a),o)}}case 1:if(n.b.$)switch(r=n.b.a.A,c=n.c,e.$){case 0:case 1:case 2:case 3:case 4:return fm;case 5:case 6:case 7:return o=e.c,a=e.d,d(Qm,r,c,ob(A=e.a),o,a);case 8:case 9:default:return fm}else{var i=n.b.a,c=n.c;switch(e.$){case 0:return fm;case 1:case 2:case 3:case 4:case 5:case 6:case 7:return o=e.c,a=e.d,d(Nm,i,c,ob(A=e.a),o,a);case 8:case 9:return o=e.c,d(Nm,i,c,ob(A=e.a),o,0);default:return o=e.d,d(Hm,i,c,e.b,ob(A=e.a),o)}}case 2:var m=u(Um,n.b,n.c);if(m.$){var b=m.a.a,p=m.b,g=p.a,h=p.b;switch(e.$){case 0:case 1:case 2:case 3:case 4:case 5:return fm;case 6:return o=e.c,P=e.d,s(nb,b,ob(A=e.a),o,P);case 7:return o=e.c,P=e.d,v(Rm,b,g,h,ob(A=e.a),o,P);case 8:case 9:default:return fm}}else{var x=m.a;switch(e.$){case 0:case 1:return fm;case 2:o=e.c;var P=e.d;return s(_m,x,ob(A=e.a),o,P);case 3:return fm;case 4:return o=e.c,P=e.d,s(_m,x,ob(A=e.a),o,P);case 5:return fm;case 6:case 7:return o=e.c,P=e.d,s(_m,x,ob(A=e.a),o,P);case 8:case 9:default:return fm}}default:var C=s(Xm,n.b,n.c,n.d,n.e);if(C.$){var M=C.a,T=M.a,y=M.b,L=C.b,w=L.a,S=L.b,N=C.c,$=N.a,H=N.b,I=C.d;switch(g=I.a,h=I.b,e.$){case 0:case 1:case 2:case 3:case 4:case 5:return fm;case 6:return o=e.c,a=e.d,function(n,e,r,t,o,a,i,c,l,u){return 9===n.a?n.f(e,r,t,o,a,i,c,l,u):n(e)(r)(t)(o)(a)(i)(c)(l)(u)}(eb,T,y,w,S,$,H,ob(A=e.a),o,a);case 7:return A=e.a,o=e.c,a=e.d,function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(s){return function(v){return function(m){return u(sm,s,l((function(l,u,s,b,p,g,h,x){var P=h.a,C=h.b;return d(Ks,f(pm,b,m,x),Am,Ym,v,{ck:n,cn:e,co:a,cp:t,R:C,bp:P.bp,bZ:P.bZ,b_:P.b_,b$:P.b$,cK:o,b:s,c:u,a0:i,d:g,c6:r,e:l,a7:c,f:p})})))}}}}}}}}}}}(T)(y)(w)(S)($)(H)(g)(h)(ob(A))(o)(a);case 8:case 9:default:return fm}}else{var D=C.a,_=C.b,z=C.c;switch(e.$){case 0:case 1:return fm;case 2:return o=e.c,a=e.d,v(Vm,D,_,z,ob(A=e.a),o,a);case 3:return fm;case 4:return o=e.c,a=e.d,v(Vm,D,_,z,ob(A=e.a),o,a);case 5:return fm;case 6:return o=e.c,a=e.d,v(Vm,D,_,z,ob(A=e.a),o,a);case 7:var A;return o=e.c,a=e.d,v(Vm,D,_,z,ob(A=e.a),o,a);case 8:case 9:default:return fm}}}})),ib=function(n){return n.bH},cb=function(n){return n.bI},lb=function(n){return n.Y},ub=function(n){var e=n,r=lb(e.dm),t=cb(e.dm),o=ib(e.dm),a=lb(e.dl),i=cb(e.dl),c=ib(e.dl),l=lb(e.dk),u=cb(e.dk),f=ib(e.dk);return f*i*r+u*a*o+l*c*t-l*i*o-u*c*r-f*a*t>0},fb=r((function(n,e){return{$:5,a:n,b:e}})),sb=r((function(n,e){var r=e;switch(r.$){case 0:return fm;case 5:var t=r.b;return u(fb,u(js,r.a,n),t);case 1:case 3:case 2:default:return u(fb,n,r)}})),db=r((function(n,e){return u(sb,function(n){var e=mf(n),r=hf(n),t=gf(n),o=pf(n);return{dH:ub(n),p:o.bH,q:o.bI,r:o.Y,s:t.bH,t:t.bI,u:t.Y,v:r.bH,w:r.bI,x:r.Y,H:e.bH,I:e.bI,J:e.Y,b9:1}}(n),e)})),vb=function(n){return{$:2,a:n}},mb=r((function(n,e){var r=n.a,t=n.b,o=n.c,a=e.eP;return{eP:{bH:r*a.bH,bI:t*a.bI,Y:o*a.Y},e3:r*e.e3,e4:t*e.e4,e5:o*e.e5}})),bb=function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){var f,s,d={bH:(s=t)[0],bI:s[1],Y:s[2],eC:s[3]},v=(f={eC:d.eC,bH:d.bH*n.a,bI:d.bI*n.b,Y:d.Y*n.c},new Float64Array([f.bH,f.bI,f.Y,f.eC]));return b(e,r,v,o,a,i,c,l,u)}}}}}}}}}},pb=r((function(n,e){switch(e.$){case 0:return um;case 5:return u(fb,e.a,u(pb,n,e.b));case 1:var r=e.b;return u(sm,u(mb,n,e.a),u(bb,n,r));case 3:return e;case 2:return vb(u(bb,n,r=e.a));default:var t=e.a;return kd(u(Bt,pb(n),t))}})),gb=r((function(n,e){return u(pb,n,e)})),hb={src:"\n        precision lowp float;\n        \n        void main () {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        }\n    ",attributes:{},uniforms:{}},xb=f(id,{cF:0,c2:0,dj:15},{bi:fd,by:Xs,bJ:fd,bK:7683},{bi:fd,by:Xs,bJ:fd,bK:7682}),Pb=f(id,{cF:0,c2:0,dj:15},{bi:fd,by:Xs,bJ:fd,bK:7682},{bi:fd,by:Xs,bJ:fd,bK:7683}),Cb=r((function(n,e){return u(Lr,n?Pb:xb,e)})),Mb={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 shadowVertexPosition(vec3 position, vec3 normal, mat4 shadowLight, vec4 modelScale, mat4 modelMatrix, mat4 viewMatrix, mat4 projectionMatrix, mat4 sceneProperties) {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            vec3 worldNormal = getWorldNormal(normal, vec4(modelScale.xyz, 1.0), modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 directionToLight = getDirectionToLight(worldPosition.xyz, xyz_type, rgb_parameter);\n            vec3 offset = vec3(0.0, 0.0, 0.0);\n            float sceneDiameter = sceneProperties[3][1];\n            if (dot(directionToLight, worldNormal) <= 0.0) {\n                offset = -sceneDiameter * directionToLight;\n            } else {\n                offset = -0.001 * sceneDiameter * directionToLight;\n            }\n            vec4 offsetPosition = worldPosition + vec4(offset, 0.0);\n            return projectionMatrix * (viewMatrix * offsetPosition);\n        }\n        \n        void main () {\n            gl_Position = shadowVertexPosition(\n                position,\n                normal,\n                shadowLight,\n                modelScale,\n                modelMatrix,\n                viewMatrix,\n                projectionMatrix,\n                sceneProperties\n            );\n        }\n    ",attributes:{normal:"n",position:"ej"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"ca",viewMatrix:"f"}},Tb=function(n){var e=function(n){if(n.$){var e=n.c;return Vr(l((function(n,r,t,o,a,i,c,l){return d(Ks,u(Cb,o,l),Mb,hb,e,{b:t,c:r,d:i,e:n,ca:c,f:a})})))}return jr}(n);return e.$?fm:vb(e.a)},yb=o((function(n,e,r,t){var o,a=u(ab,r,Av),i=(o=w(n,e)).a?o.b?jd(_([a,Tb(lm)])):a:o.b?Tb(lm):fm,c=vf(t),l=c.a,f=c.b,s=c.c;return u(db,df(t),u(gb,S(l,f,s),i))})),Lb=r((function(n,e){return s(yb,!0,!0,n,e)})),wb=function(n){return{$:0,a:n}},Sb=r((function(n,e){return{$:0,a:n,b:e}})),Nb=function(n){return n.k},$b=function(n){return Rf(n)},Hb=r((function(n,e){return e/n})),Ib=function(n){var e=n;return{bH:Rf(e),bI:Yf(e)}},Db=r((function(n,e){var r=n.ej;return u(Lr,{n:yv(n.n),ej:Tv(r)},e)})),_b=c((function(n,e,r,t,o,a,i){for(;;){if(!i.b)return xv({d4:e,d5:t,d6:a,d7:n,d8:r,d9:o});var c=i.a,l=i.b,f=Yd(c.ej),s=Rd(c.ej),d=Ad(c.ej);n=u(Nd,n,d),e=u(vt,e,d),r=u(Nd,r,s),t=u(vt,t,s),o=u(Nd,o,f),a=u(vt,a,f),i=l}})),zb=r((function(n,e){var r=Yd(n.ej),t=Rd(n.ej),o=Ad(n.ej);return m(_b,o,o,t,t,r,r,e)})),Ab=r((function(n,e){var r=n.dl,t=n.dk;return{bH:e.bH*t.bH+e.bI*r.bH,bI:e.bH*t.bI+e.bI*r.bI,Y:e.bH*t.Y+e.bI*r.Y}})),Rb=function(n){return Yf(n)},Yb=function(n){return 6.283185307179586*n},kb=ms({cP:qf,dk:bs,dl:nv}),Vb=(ea=u(Hb,72,Yb(1)),ra=Wu,ta=Eu,aa=f(Ou,0,0,oa=u(Od,.5,1)),ca=f(Ou,0,0,ia=u(Od,-.5,1)),mv(function(n){var e=f(Sr,Db,H,Wv(n));if(e.b){var r=e.a,t=e.b,o=u(Qv,e,Vv(n));return s(uv,u(zb,r,t),n,o,0)}return bv}(im(Ls(u(Bt,(function(n){var e=u(Od,n,ea),r=u(Ab,kb,Ib(e)),t=u(Od,$b(e),1),o=u(Od,Rb(e),1),a=f(Ou,t,o,oa),i=f(Ou,t,o,ia),c=u(Od,u(rc,72,n+1),ea),l=u(Ab,kb,Ib(c)),s=u(Od,$b(c),1),d=u(Od,Rb(c),1),v=f(Ou,s,d,ia),m=f(Ou,s,d,oa);return _([S({n:ta,ej:ca},{n:ta,ej:v},{n:ta,ej:i}),S({n:r,ej:i},{n:l,ej:v},{n:l,ej:m}),S({n:r,ej:i},{n:l,ej:m},{n:r,ej:a}),S({n:ra,ej:aa},{n:ra,ej:a},{n:ra,ej:m})])}),u(Zr,0,71))))))),jb=cm(Vb),Fb=function(n){return n.cP},Eb=function(n){return n.fe},Bb=function(n){return n.fs},Ub=o((function(n,e,r,t){var o,a=function(n){var e,r,t=as(n),o=w(r=function(n){var e=n,r=lc(e.Y),t=lc(e.bI),o=lc(e.bH);if(1>y(o,t)){if(1>y(o,r)){var a=yu(e.Y*e.Y+e.bI*e.bI);return{bH:0,bI:-e.Y/a,Y:e.bI/a}}return a=yu(e.bI*e.bI+e.bH*e.bH),{bH:-e.bI/a,bI:e.bH/a,Y:0}}return 1>y(t,r)?(a=yu(e.Y*e.Y+e.bH*e.bH),{bH:e.Y/a,bI:0,Y:-e.bH/a}):(a=yu(e.bH*e.bH+e.bI*e.bI),{bH:-e.bI/a,bI:e.bH/a,Y:0})}(e=t),{bH:e.bI*r.Y-e.Y*r.bI,bI:e.Y*r.bH-e.bH*r.Y,Y:e.bH*r.bI-e.bI*r.bH}),a=o.a,i=o.b;return{cP:Fb(n),dk:a,dl:i,dm:t}}(Nb(t)),i=u(ab,r,Vb),c=(o=w(n,e)).a?o.b?jd(_([i,Tb(jb)])):i:o.b?Tb(jb):fm,l=Bb(t),f=Eb(t);return u(db,a,u(gb,S(l,l,f),c))})),Wb=r((function(n,e){return s(Ub,!0,!0,n,e)})),Ob={src:"\n        precision highp float;\n        \n        attribute lowp float triangleVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 triangleVertexPositions;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleVertex), triangleVertexPositions, position, normal);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{triangleVertex:"db"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",triangleVertexPositions:"bE",viewMatrix:"f"}},Gb={src:"\n        precision highp float;\n        \n        attribute lowp float triangleVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 triangleVertexPositions;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleVertex), triangleVertexPositions, position, normal);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n        }\n    ",attributes:{triangleVertex:"db"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",triangleVertexPositions:"bE",viewMatrix:"f"}},qb=function(n){var e=n.a,r=n.b,t=n.c;return Fs({dP:e.bH,dQ:r.bH,dR:t.bH,dS:0,dT:e.bI,dU:r.bI,dV:t.bI,dW:0,dX:e.Y,dY:r.Y,dZ:t.Y,d_:0,d$:0,d0:0,d1:0,d2:0})},Zb=_v(_([S({db:0},{db:1},{db:2})])),Xb=r((function(n,e){var r=Cv(e),t=ob(r);switch(n.$){case 0:if(n.b.$)return fm;var o=n.b.a;return u(sm,t,l((function(n,r,t,a,i,c,l,u){return d(Ks,f(pm,a,0,u),Ob,xm,Zb,{aG:o,b:t,c:r,d:c,e:n,bE:qb(e),f:i})})));case 1:if(n.b.$)return fm;var a=n.b.a,i=n.c;return u(sm,t,l((function(n,r,t,o,c,l,s,v){return d(Ks,f(pm,o,0,v),Ob,wm,Zb,{aV:u(Sm,i,a),b:t,c:r,d:l,e:n,bE:qb(e),f:c})})));case 2:var c=u(Um,n.b,n.c);if(c.$)return fm;var v=c.a;return u(sm,t,l((function(n,r,t,o,a,i,c,l){var u=c.a,s=c.b;return d(Ks,f(pm,o,0,l),Gb,Im,Zb,{R:s,bp:u.bp,bZ:u.bZ,b_:u.b_,b$:u.b$,cG:v,b:t,c:r,d:i,e:n,bE:qb(e),f:a})})));default:var m=s(Xm,n.b,n.c,n.d,n.e);if(m.$)return fm;var b=m.a,p=m.b,g=m.c;return u(sm,t,l((function(n,r,t,o,a,i,c,l){var u=c.a,s=c.b;return d(Ks,f(pm,o,0,l),Gb,km,Zb,{cj:b,R:s,bp:u.bp,bZ:u.bZ,b_:u.b_,b$:u.b$,cJ:g,b:t,c:r,d:i,c5:p,e:n,bE:qb(e),f:a})})))}})),Jb=(la=_([{a6:u(rd,0,1)},{a6:u(rd,1,1)},{a6:u(rd,2,1)},{a6:u(rd,0,-1)},{a6:u(rd,1,-1)},{a6:u(rd,2,-1)}]),ua=_([S(0,1,2),S(3,5,4),S(3,4,1),S(3,1,0),S(4,5,2),S(4,2,1),S(5,3,0),S(5,0,2)]),u(Qv,la,ua)),Qb={src:"\n        precision highp float;\n        \n        attribute highp vec2 triangleShadowVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        uniform highp mat4 triangleVertexPositions;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 shadowVertexPosition(vec3 position, vec3 normal, mat4 shadowLight, vec4 modelScale, mat4 modelMatrix, mat4 viewMatrix, mat4 projectionMatrix, mat4 sceneProperties) {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            vec3 worldNormal = getWorldNormal(normal, vec4(modelScale.xyz, 1.0), modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 directionToLight = getDirectionToLight(worldPosition.xyz, xyz_type, rgb_parameter);\n            vec3 offset = vec3(0.0, 0.0, 0.0);\n            float sceneDiameter = sceneProperties[3][1];\n            if (dot(directionToLight, worldNormal) <= 0.0) {\n                offset = -sceneDiameter * directionToLight;\n            } else {\n                offset = -0.001 * sceneDiameter * directionToLight;\n            }\n            vec4 offsetPosition = worldPosition + vec4(offset, 0.0);\n            return projectionMatrix * (viewMatrix * offsetPosition);\n        }\n        \n        void main () {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleShadowVertex.x), triangleVertexPositions, position, normal);\n            normal *= triangleShadowVertex.y;\n            gl_Position = shadowVertexPosition(\n                position,\n                normal,\n                shadowLight,\n                modelScale,\n                modelMatrix,\n                viewMatrix,\n                projectionMatrix,\n                sceneProperties\n            );\n        }\n    ",attributes:{triangleShadowVertex:"a6"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"ca",triangleVertexPositions:"bE",viewMatrix:"f"}},Kb=function(n){return vb(l((function(e,r,t,o,a,i,c,l){return d(Ks,u(Cb,o,l),Qb,hb,Jb,{b:t,c:r,d:i,e:e,ca:c,bE:qb(n),f:a})})))},np=o((function(n,e,r,t){var o=u(Xb,r,t),a=w(n,e);return a.a?a.b?jd(_([o,Kb(t)])):o:a.b?Kb(t):fm})),ep=r((function(n,e){return s(np,!0,!0,n,e)})),rp=r((function(n,e){var r=Xu(e),t=Xu(n),o=Zu(e),a=Zu(n),i=qu(e),c=qu(n);return{d4:u(Sd,c,i),d5:u(Sd,a,o),d6:u(Sd,t,r),d7:u($d,c,i),d8:u($d,a,o),d9:u($d,t,r)}})),tp={src:"\n        precision highp float;\n        \n        attribute lowp float lineSegmentVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp vec3 lineSegmentStartPoint;\n        uniform highp vec3 lineSegmentEndPoint;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = (1.0 - lineSegmentVertex) * lineSegmentStartPoint + lineSegmentVertex * lineSegmentEndPoint;\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{lineSegmentVertex:"dO"},uniforms:{lineSegmentEndPoint:"dM",lineSegmentStartPoint:"dN",modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},op=r((function(n,e){return{$:1,a:n,b:e}}))({dw:2,dG:0,eb:1})(_([w({dO:0},{dO:1})])),ap=r((function(n,e){var r,t=u(rp,(r=e).a,r.b),o=ob(t),a=e.a,i=e.b;switch(n.$){case 0:if(n.b.$)return fm;var c=n.b.a;return u(sm,o,l((function(n,e,r,t,o,l,u,f){return d(Ks,f,tp,xm,op,{aG:c,dM:Tv(i),dN:Tv(a),b:r,c:e,d:l,e:n,f:o})})));case 1:if(n.b.$)return fm;c=n.b.a;var f=n.c;return u(sm,o,l((function(n,e,r,t,o,l,s,v){return d(Ks,v,tp,wm,op,{aV:u(Sm,f,c),dM:Tv(i),dN:Tv(a),b:r,c:e,d:l,e:n,f:o})})));case 2:default:return fm}})),ip=r((function(n,e){return u(ap,n,e)})),cp=t((function(n,e,r){return{$:2,a:n,b:e,c:r}})),lp=function(n){return f(hs,0,1,n>.04045?u(_i,(n+.055)/1.055,2.4):n/12.92)},up=function(n){return f(cp,0,wb(function(n){var e=ac(n),r=e.ct,t=e.cl;return f(ks,lp(e.c1),lp(r),lp(t))}(n)),wb(0))},fp=r((function(n,e){return n/e})),sp=a((function(n,e,r,t,o){for(;;){var a=t(e/r),i=u(Lr,a,o);if(C(e,n))return i;n=n,e-=1,r=r,t=t,o=i}})),dp=r((function(n,e){return 1>n?H:d(sp,0,n,n,e,H)})),vp=r((function(n,e){var r=n.ej,t=n.L,o=t.a,a=t.b;return u(Lr,{n:yv(n.n),ej:Tv(r),L:u(rd,o,a)},e)})),mp=r((function(n,e){var r=n,t=e,o=Rf(t);return{bH:o*Rf(r),bI:o*Yf(r),Y:Yf(t)}})),bp=(fa=u(Zr,0,71),sa=u(dp,72,u(rb,0,Yb(1))),da=tt(36),va=u(Zr,0,da-1),ma=u(dp,da,u(rb,Kf(90),Kf(-90))),ba=qv(Ls(u(Bt,(function(n){return u(Bt,(function(e){return{n:u(mp,n,e),ej:f(Ou,u(Od,$b(e)*$b(n),1),u(Od,$b(e)*Rb(n),1),u(Od,Rb(e),1)),L:w(u(fp,n,Yb(1)),u(fp,u(Id,Kf(90),e),Kf(180)))}}),ma)}),sa))),pa=r((function(n,e){return n*(da+1)+e})),ga=Ls(u(Bt,(function(n){return Ls(u(Bt,(function(e){var r=u(pa,n+1,e),t=u(pa,n,e),o=u(pa,n+1,e+1),a=u(pa,n,e+1);return _([S(a,o,r),S(a,r,t)])}),va))}),fa)),mv(function(n){var e=f(Sr,vp,H,Wv(n));if(e.b){var r=e.a,t=e.b,o=u(Qv,e,Vv(n));return s(fv,u(zb,r,t),n,o,0)}return bv}(u(Jv,ba,ga)))),pp=r((function(n,e){for(;;){var r=u(rc,144,2*n+3),t=u(rc,144,2*n+2),o=2*n+1,a=2*n,i=u(Lr,S(144,a,t),u(Lr,S(a,r,t),u(Lr,S(a,o,r),u(Lr,S(o,145,r),e))));if(!n)return i;n-=1,e=i}})),gp=t((function(n,e,r){return r>.5?e+(1-r)*(n-e):n+r*(e-n)})),hp=(ha=u(r((function(n,e){for(;;){var r=f(gp,0,6.283185307179586,n/72),t=u(Lr,{bM:r,b2:0,b8:1},u(Lr,{bM:r,b2:1,b8:1},e));if(!n)return t;n-=1,e=t}})),71,_([{bM:0,b2:0,b8:0},{bM:0,b2:1,b8:0}])),u(Qv,ha,u(pp,71,H))),xp={src:"\n        precision highp float;\n        \n        attribute highp float angle;\n        attribute highp float offsetScale;\n        attribute highp float radiusScale;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const lowp float kPerspectiveProjection = 0.0;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec3 perpendicularTo(vec3 d) {\n            float absX = abs(d.x);\n            float absY = abs(d.y);\n            float absZ = abs(d.z);\n            if (absX <= absY) {\n                if (absX <= absZ) {\n                    float scale = 1.0 / length(d.zy);\n                    return vec3(0.0, -d.z * scale, d.y * scale);\n                } else {\n                    float scale = 1.0 / length(d.xy);\n                    return vec3(-d.y * scale, d.x * scale, 0.0);\n                }\n            } else {\n                if (absY <= absZ) {\n                    float scale = 1.0 / length(d.xz);\n                    return vec3(d.z * scale, 0.0, -d.x * scale);\n                } else {\n                    float scale = 1.0 / length(d.xy);\n                    return vec3(-d.y * scale, d.x * scale, 0.0);\n                }\n            }\n        }\n        \n        void main () {\n            vec4 worldCenter = getWorldPosition(vec3(0.0, 0.0, 0.0), modelScale, modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 zDirection = getDirectionToLight(worldCenter.xyz, xyz_type, rgb_parameter);\n            vec3 xDirection = perpendicularTo(zDirection);\n            vec3 yDirection = cross(zDirection, xDirection);\n            float r = modelScale.x;\n            float adjustedRadius = r;\n            float zOffset = 0.0;\n            if (xyz_type.w == kPointLight) {\n                float distanceToLight = length(xyz_type.xyz - worldCenter.xyz);\n                float rSquared = r * r;\n                zOffset = rSquared / distanceToLight;\n                float zSquared = zOffset * zOffset;\n                adjustedRadius = sqrt(rSquared - zSquared) * radiusScale;\n            }\n            vec3 worldPosition =\n                worldCenter.xyz\n                    + zDirection * zOffset\n                    + xDirection * adjustedRadius * cos(angle)\n                    + yDirection * adjustedRadius * sin(angle);\n            vec3 directionToLight = getDirectionToLight(worldPosition, xyz_type, rgb_parameter);\n            float sceneDiameter = sceneProperties[3][1];\n            vec3 offset = -sceneDiameter * offsetScale * directionToLight;\n            vec4 offsetPosition = vec4(worldPosition + offset, 1.0);\n            gl_Position = projectionMatrix * (viewMatrix * offsetPosition);\n        }\n    ",attributes:{angle:"bM",offsetScale:"b2",radiusScale:"b8"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"ca",viewMatrix:"f"}},Pp=function(){return vb(l((function(n,e,r,t,o,a,i,c){return d(Ks,u(Cb,!0,c),xp,hb,hp,{aG:f(ks,0,0,1),b:r,c:e,d:a,e:n,ca:i,f:o})})))},Cp=r((function(n,e){return u(sb,function(n){return{dH:!0,p:1,q:0,r:0,s:0,t:1,u:0,v:0,w:0,x:1,H:n.bH,I:n.bI,J:n.Y,b9:1}}(n),e)})),Mp=o((function(n,e,r,t){var o,a=u(ab,r,bp),i=(o=w(n,e)).a?o.b?jd(_([a,Pp()])):a:o.b?Pp():fm,c=Sf(t);return u(Cp,u(wv,qf,wf(t)),u(gb,S(c,c,c),i))})),Tp=r((function(n,e){return s(Mp,!0,!0,n,e)})),yp=function(n){switch(n.$){case 0:var e=n.b;return _([u(Lb,up(n.a),e)]);case 1:var r=n.b;return _([u(ep,up(n.a),r)]);case 3:var t=n.b;return _([u(Tp,up(n.a),t)]);case 2:var o=n.b;return _([u(Wb,up(n.a),o)]);case 4:var a=n.b;return _([u(ip,(i=n.a,u(Sb,0,wb(function(n){var e=ac(n);return f(ks,e.c1,e.ct,e.cl)}(i)))),a)]);default:return u(ws,yp,n.a)}var i},Lp=r((function(n,e){return r={eF:n.eF,dp:n.eJ,eM:n.eM,eR:n.eR,dv:w(zi(n.ac.di),zi(n.ac.cu)),dz:(t=e,u(ws,yp,t)),e_:n.e_,fg:n.fg,fI:n.fI,fN:n.fN},u(iv,{eF:r.eF,dp:r.dp,eM:r.eM,eR:r.eR,dv:r.dv},_([{dz:r.dz,e_:r.e_,fg:r.fg,fI:r.fI,fN:r.fN}]));var r,t})),wp=r((function(n,e){var r=n,t=e.eU,o=t.bH,a=t.bI,i=t.Y,c=u(Vs,e.cv,e.bP);return{bN:Yd(c),eO:r,bV:Rd(c),c_:0,b7:Ad(c),dc:1,bH:-o,bI:-a,Y:-i}})),Sp=r((function(n,e){var r=n.b;return u(Gf,u(Cf,n.a,{bH:r.a,bI:r.b,Y:r.c}),e)})),Np=t((function(n,e,r){var t=e.E;switch(t.$){case 1:var o=t.a.V,a=t.a.bu;if(C(t.a.cb,r)){var i=function(){switch(a){case 0:return w({bH:.5,bI:.5,Y:-.5},S(-1,0,0));case 1:return w({bH:-.5,bI:-.5,Y:-.5},S(1,0,0));case 2:return w({bH:-.5,bI:.5,Y:-.5},S(0,-1,0));default:return w({bH:.5,bI:-.5,Y:-.5},S(0,1,0))}}(),c=u(_i,(n.a5-o)/u(xu,"duration of step animation",n),2),l=u(Nd,nf(90),c*nf(90));return u(Sp,i,l)}return zt;case 2:return o=t.a.V,a=t.a.bu,C(t.a.cb,r)?(i=function(){switch(a){case 0:return w({bH:.5,bI:.5,Y:-.5},S(-1,0,0));case 1:return w({bH:-.5,bI:-.5,Y:-.5},S(1,0,0));case 2:return w({bH:-.5,bI:.5,Y:-.5},S(0,-1,0));default:return w({bH:.5,bI:-.5,Y:-.5},S(0,1,0))}}(),c=Yf(Bl*((n.a5-o)/u(xu,"duration of mistake animation",n))),l=f(hs,nf(0),nf(45),c*nf(45)),u(Sp,i,l)):zt;default:return zt}})),$p=u(Cf,qf,bs),Hp=r((function(n,e){return f(Gf,$p,n,e)})),Ip=u(Cf,qf,nv),Dp=r((function(n,e){return f(Gf,Ip,n,e)})),_p=r((function(n,e){var r=u(xu,"cubes side length",n),t=u(Af,-r/4,u(Ku,u(tf,"color 2",n),S(r,r,r/2))),o=u(Af,r/4,u(Ku,u(tf,"color 1",n),S(r,r,r/2))),a=e.ae.bT,i=a.a,c=i.a,l=i.b,f=a.b,d=function(){if(f.b)switch(f.a){case 2:return Hp(nf(180));case 1:return Hp(nf(90));default:return Dp(-nf(90))}else switch(f.a){case 2:return zt;case 1:return Hp(-nf(90));default:return Dp(nf(90))}}();return u(zf,l,u(_f,c,u(Af,r/2,s(Np,n,e,w(c,l),d(af(_([o,t])))))))})),zp=r((function(n,e){var r=e/2;return u(Au,n,u(Ju,f(Qu,-r,-r,-r),f(Qu,r,r,r)))})),Ap=o((function(n,e,r,t){var o=S(n,e,r),a=o.a,i=o.b,c=o.c,l=c>.5?c+i-c*i:c*(i+1),u=2*c-l,f=function(n){var e=0>n?n+1:n>1?n-1:n;return 1>6*e?u+(l-u)*e*6:1>2*e?l:2>3*e?u+(l-u)*(2/3-e)*6:u},d=f(a-1/3),v=f(a),m=f(a+1/3);return s(Hi,m,v,d,t)})),Rp=t((function(n,e,r){return s(Ap,n,e,r,1)})),Yp=t((function(n,e,r){return{bH:n.bH+e*(r.bH-n.bH),bI:n.bI+e*(r.bI-n.bI),Y:n.Y+e*(r.Y-n.Y)}})),kp=t((function(n,e,r){var t=df(r),o=pf(t),a=gf(t),i=hf(t),c=f(Yp,n,e,mf(t)),l=0>e?{cP:c,dk:Qd(o),dl:Qd(a),dm:Qd(i)}:{cP:c,dk:o,dl:a,dm:i},s=vf(r),d=s.b,v=s.c;return{eI:l,dv:S(Ru(u(Od,e,s.a)),Ru(u(Od,e,d)),Ru(u(Od,e,v)))}})),Vp=function(n){return as(Nb(n))},jp=t((function(n,e,r){var t=Ru(u(Od,e,Bb(r))),o=Ru(u(Od,e,Eb(r))),a=0>e?Qd(Vp(r)):Vp(r),i=f(Yp,n,e,function(n){return Fb(Nb(n))}(r));return{k:u(Cf,i,a),fe:o,fs:t}})),Fp=t((function(n,e,r){return u(yf,u(Yp,n,e),r)})),Ep=t((function(n,e,r){return u(Nf,u(Od,lc(e),Sf(r)),f(Yp,n,e,wf(r)))})),Bp=t((function(n,e,r){return u(Hf,u(Yp,n,e),r)})),Up=r((function(n,e){switch(e.$){case 0:return u(Au,e.a,f(kp,qf,n,e.b));case 1:return u(ff,e.a,f(Bp,qf,n,e.b));case 3:return u(uf,e.a,f(Ep,qf,n,e.b));case 2:return u(cf,e.a,f(jp,qf,n,e.b));case 4:return u(lf,e.a,f(Fp,qf,n,e.b));default:var r=e.a;return of(u(Bt,Up(n),r))}})),Wp=r((function(n,e){return(e-st(e/n)*n)/n})),Op=o((function(n,e,r,t){return n+(e-n)*(1+Rf(6.283185307179586*u(Wp,r,t)))/2})),Gp=r((function(n,e){var t=function(r){return 3===e.E.$?u(_t,Up(.9),Af(s(Op,.1,.7,6,n.a5+.3*r))):zt};return af(u(Xr,r((function(r,o){return u(zf,o.b,u(_f,o.a,u(Af,-.49,u(t,r,u(zp,function(r){return 3===e.E.$?f(Rp,s(Op,0,1,6,n.a5+.03*r),1,.8):ji}(r),1)))))})),function(n){return u(Lr,n.a,n.b)}(e.ae.ef)))})),qp=r((function(n,e){var r=e.a,t=r.a,o=r.b,a=e.b,i=1-u(xu,"cubes side length",n),c=u(zf,-.5,u(Ku,u(tf,"wall color",n),S(1+i,i,i))),l=u(Jf,nf(90),c);return u(zf,o,u(_f,t,a?l:c))})),Zp=r((function(n,e){return{$:0,a:n,b:e}})),Xp=u(ws,(function(n){var e=n.a,r=n.b;return 3===e&&C(r,-4)?H:3===e?_([u(Zp,n,0)]):C(r,-4)?_([u(Zp,n,1)]):_([u(Zp,n,0),u(Zp,n,1)])}),u((function(n){return ws((function(e){return u(Bt,(function(n){return w(e,n)}),n)}))}),u(Zr,-4,3),u(Zr,-4,3))),Jp=r((function(n,e){return w(n,e)})),Qp=r((function(n,e){var r=n.a,t=n.b;return u(vc,(function(n){var e=n.a,o=e.a,a=e.b,i=n.b,c=i.a,l=i.b;return t?C(r,e)&&C(c,o+1)||C(r,i)&&C(c,o-1):C(r,e)&&C(l,a-1)||C(r,i)&&C(l,a+1)}),function(n){var e=n.b;return f(Gr,Jp,u(Lr,n.a,e),e)}(e))})),Kp=r((function(n,e){return af(u(Bt,qp(n),(r=e.ae.ef,u(Xv,(function(n){return!u(Qp,n,r)}),Xp))));var r})),ng={bH:.37208,bI:.37529},eg=r((function(n,e){return{$:2,a:n,b:e}})),rg=function(n){return{$:0,a:n}},tg=function(n){return n.eO},og=rg(Wd.a),ag=r((function(n,e){return f(Et,r((function(e,r){var t=r.a,o=r.b;return n(e)?w(u(Lr,e,t),o):w(t,u(Lr,e,o))})),w(H,H),e)})),ig=function(n){return Fs({dP:n.bH,dQ:n.b7,dR:0,dS:0,dT:n.bI,dU:n.bV,dV:0,dW:0,dX:n.Y,dY:n.bN,dZ:0,d_:0,d$:n.dc,d0:n.c_,d1:0,d2:0})},cg=l((function(n,e,r,t,o,a,i,c){var l=u(ag,tg,_([n,e,r,t])),f=l.a;if(f.b){var s=$(f,l.b);if(s.b&&s.b.b&&s.b.b.b&&s.b.b.b.b&&!s.b.b.b.b.b){var d=s.a,v=s.b,m=v.a,b=v.b,p=b.a,g=b.b.a;return u(eg,u(Bt,ig,f),{bp:u(Ud,d,m),bZ:u(Ud,p,g),b_:u(Ud,o,a),b$:u(Ud,i,c)})}return og}return rg({bp:u(Ud,n,e),bZ:u(Ud,r,t),b_:u(Ud,o,a),b$:u(Ud,i,c)})})),lg=o((function(n,e,r,t){return b(cg,n,e,r,t,Bd,Bd,Bd,Bd)})),ug={$:5},fg={bH:.44757,bI:.40745},sg={$:1},dg=r((function(n,e){var r=n,t=e.ej,o=t.bH,a=t.bI,i=t.Y,c=u(Vs,e.cv,e.bP);return{bN:Yd(c),eO:r,bV:Rd(c),c_:0,b7:Ad(c),dc:2,bH:o,bI:a,Y:i}})),vg=function(n){return u(dg,!0,{bP:n.bP,cv:n.cv,ej:n.ej})},mg=r((function(n,e){return y(e,n)>0})),bg=r((function(n,e){var r,t=(r={cf:u(xu,"azimuth for third light",n),bP:xs(2e3),cr:u(xu,"elevation for third light",n),cv:100},u(wp,!0,{bP:r.bP,eU:u(mp,r.cf,r.cr),cv:r.cv})),o=function(n){return function(n){for(;;){if(C(n.fb,0)&&C(n.fc,0))return Bd;if(!u(mg,Ru(n.fb),Ru(n.fc))){var e=lc(n.fc/Bl),r=lc(n.fb/Bl),t=n.cd,o=t.bH,a=t.bI,i=t.Y,c=u(Vs,1,n.bP);return{bN:r*Yd(c),eO:!1,bV:r*Rd(c),c_:e/r,b7:r*Ad(c),dc:3,bH:o,bI:a,Y:i}}n={bP:n.bP,fb:n.fc,fc:n.fb,cd:Qd(n.cd)}}}({bP:n.bP,fb:n.fb,fc:n.fc,cd:u(mp,n.cf,n.cr)})}({cf:u(xu,"azimuth for fourth light",n),bP:ng,cr:u(xu,"elevation for fourth light",n),fb:120,fc:40}),a=e.ae.bT.a,i=a.a,c=a.b,l=function(){var r=e.E;if(1===r.$){var t=r.a.bu,o=(n.a5-r.a.V)/u(xu,"duration of step animation",n),a=function(){switch(t){case 0:return w(0,o);case 1:return w(0,-o);case 2:return w(-o,0);default:return w(o,0)}}();return w(i+a.a,c+a.b)}return w(i,c)}(),f=l.a,d=l.b,v=vg({bP:fg,cv:u(xu,"lumens of following lights",n),ej:{bH:f+.5,bI:d+.5,Y:u(xu,"height of following lights",n)}}),m=vg({bP:ng,cv:u(xu,"lumens of following lights",n),ej:{bH:f-.5,bI:d-.5,Y:u(xu,"height of following lights",n)}});return u(Lp,{eF:sg,eJ:u(tf,"background color",n),eM:gs(n),eR:.1,e_:1.2*u(_i,2,6),fg:s(lg,v,m,t,o),ac:n.ac,fI:ug,fN:ng},_([Qf(n),u(_p,n,e),u(Kp,n,e),u(Gp,n,e)]))}));xa={Main:{init:s(zl,r((function(n,e){return u($t,H,_([u($t,_([u(Qc,"position","absolute"),u(Qc,"width","100%")]),_([u(zu,n,e)])),u(bg,n,e)]))})),Iu,Ol,(function(){return{E:Al,aA:Yl,ae:(n={fy:w(-4,3)},e=n.fy,u(jl,u(kl,e,u(Vl,2,0)),w(e,H)))};var n,e}))(u(Mt,(function(n){return St({cq:n})}),u(Tt,"devicePixelRatio",yt)))(0)}},n.Elm?function n(e,r){for(var t in r)t in e?"init"==t?P(6):n(e[t],r[t]):e[t]=r[t]}(n.Elm,xa):n.Elm=xa}(n);const e=n.Elm.Main.init({node:document.getElementById("elm-node"),flags:{devicePixelRatio:window.devicePixelRatio}});function r(n){const e=[];for(let r=0;r<n.length;r++)e.push({identifier:n[r].identifier,pageX:n[r].pageX,pageY:n[r].pageY});return e}window.addEventListener("touchstart",(n=>{e.ports.touchStart.send(r(n.changedTouches))})),window.addEventListener("touchmove",(n=>{e.ports.touchMove.send(r(n.changedTouches))})),window.addEventListener("touchend",(n=>{e.ports.touchEnd.send(r(n.changedTouches))})),window.addEventListener("touchcancel",(n=>{e.ports.touchCancel.send(r(n.changedTouches))}))}();
//# sourceMappingURL=index.ca6ef5f3.js.map
