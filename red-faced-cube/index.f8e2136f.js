!function(){var n={};!function(n){function e(n,e,r){return r.a=n,r.f=e,r}function r(n){return e(2,n,(function(e){return function(r){return n(e,r)}}))}function t(n){return e(3,n,(function(e){return function(r){return function(t){return n(e,r,t)}}}))}function o(n){return e(4,n,(function(e){return function(r){return function(t){return function(o){return n(e,r,t,o)}}}}))}function a(n){return e(5,n,(function(e){return function(r){return function(t){return function(o){return function(a){return n(e,r,t,o,a)}}}}}))}function i(n){return e(6,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return n(e,r,t,o,a,i)}}}}}}))}function c(n){return e(7,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return n(e,r,t,o,a,i,c)}}}}}}}))}function l(n){return e(8,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return n(e,r,t,o,a,i,c,l)}}}}}}}}))}function u(n,e,r){return 2===n.a?n.f(e,r):n(e)(r)}function f(n,e,r,t){return 3===n.a?n.f(e,r,t):n(e)(r)(t)}function s(n,e,r,t,o){return 4===n.a?n.f(e,r,t,o):n(e)(r)(t)(o)}function d(n,e,r,t,o,a){return 5===n.a?n.f(e,r,t,o,a):n(e)(r)(t)(o)(a)}function b(n,e,r,t,o,a,i){return 6===n.a?n.f(e,r,t,o,a,i):n(e)(r)(t)(o)(a)(i)}function m(n,e,r,t,o,a,i,c){return 7===n.a?n.f(e,r,t,o,a,i,c):n(e)(r)(t)(o)(a)(i)(c)}function v(n,e,r,t,o,a,i,c,l){return 8===n.a?n.f(e,r,t,o,a,i,c,l):n(e)(r)(t)(o)(a)(i)(c)(l)}var p=t((function(n,e,r){for(var t=Array(n),o=0;n>o;o++)t[o]=r(e+o);return t})),g=r((function(n,e){for(var r=Array(n),t=0;n>t&&e.b;t++)r[t]=e.a,e=e.b;return r.length=t,w(r,e)})),h=r((function(n,e){return e[n]})),x=t((function(n,e,r){for(var t=r.length-1;t>=0;t--)e=u(n,r[t],e);return e}));function L(n){throw Error("https://github.com/elm/core/blob/1.0.0/hints/"+n+".md")}function C(n,e){for(var r,t=[],o=P(n,e,0,t);o&&(r=t.pop());o=P(r.a,r.b,0,t));return o}function P(n,e,r,t){if(n===e)return!0;if("object"!=typeof n||null===n||null===e)return"function"==typeof n&&L(5),!1;if(r>100)return t.push(w(n,e)),!0;for(var o in 0>n.$&&(n=Nr(n),e=Nr(e)),n)if(!P(n[o],e[o],r+1,t))return!1;return!0}var M=r(C);function T(n,e,r){if("object"!=typeof n)return n===e?0:e>n?-1:1;if(void 0===n.$)return(r=T(n.a,e.a))||(r=T(n.b,e.b))?r:T(n.c,e.c);for(;n.b&&e.b&&!(r=T(n.a,e.a));n=n.b,e=e.b);return r||(n.b?1:e.b?-1:0)}var y=r((function(n,e){var r=T(n,e);return 0>r?_r:r?zr:Dr}));function w(n,e){return{a:n,b:e}}function S(n,e,r){return{a:n,b:e,c:r}}function $(n,e){var r={};for(var t in n)r[t]=n[t];for(var t in e)r[t]=e[t];return r}function N(n,e){if("string"==typeof n)return n+e;if(!n.b)return e;var r=z(n.a,e);n=n.b;for(var t=r;n.b;n=n.b)t=t.b=z(n.a,e);return r}var D={$:0};function z(n,e){return{$:1,a:n,b:e}}var _=r(z);function R(n){for(var e=D,r=n.length;r--;)e=z(n[r],e);return e}function A(n){for(var e=[];n.b;n=n.b)e.push(n.a);return e}var k=t((function(n,e,r){for(var t=[];e.b&&r.b;e=e.b,r=r.b)t.push(u(n,e.a,r.a));return R(t)})),K=r((function(n,e){return n*e})),V=r(Math.pow),B=r((function(n,e){var r=e%n;return 0===n?L(11):r>0&&0>n||0>r&&n>0?r+n:r})),F=Math.cos,E=Math.sin,j=Math.tan,H=Math.ceil,I=Math.floor,U=Math.round,W=Math.sqrt,O=Math.log,Y=isNaN,X=r((function(n,e){return n+e})),q=t((function(n,e,r){for(var t=r.length;t--;){var o=r[t],a=r.charCodeAt(t);56320>a||a>57343||(o=r[--t]+o),e=u(n,o,e)}return e})),G=r((function(n,e){return e.split(n)})),J=r((function(n,e){return e.join(n)})),Q=t((function(n,e,r){return r.slice(n,e)})),Z=r((function(n,e){return 0===e.indexOf(n)}));function nn(n){return n+""}function en(n){return{$:2,b:n}}var rn=en((function(n){return"number"!=typeof n?xn("an INT",n):n>-2147483647&&2147483647>n&&(0|n)===n?Vr(n):!isFinite(n)||n%1?xn("an INT",n):Vr(n)})),tn=en((function(n){return"boolean"==typeof n?Vr(n):xn("a BOOL",n)})),on=en((function(n){return"number"==typeof n?Vr(n):xn("a FLOAT",n)})),an=(en((function(n){return Vr(n)})),en((function(n){return"string"==typeof n?Vr(n):n instanceof String?Vr(n+""):xn("a STRING",n)}))),cn=r((function(n,e){return{$:6,d:n,b:e}}));function ln(n,e){return{$:9,f:n,g:e}}var un=r((function(n,e){return{$:10,b:e,h:n}})),fn=r((function(n,e){return ln(n,[e])})),sn=t((function(n,e,r){return ln(n,[e,r])})),dn=o((function(n,e,r,t){return ln(n,[e,r,t])})),bn=r((function(n,e){try{return vn(n,JSON.parse(e))}catch(n){return Rr(u(Ar,"This is not valid JSON! "+n.message,e))}})),mn=r((function(n,e){return vn(n,e)}));function vn(n,e){switch(n.$){case 2:return n.b(e);case 5:return null===e?Vr(n.c):xn("null",e);case 3:return gn(e)?pn(n.b,e,R):xn("a LIST",e);case 4:return gn(e)?pn(n.b,e,hn):xn("an ARRAY",e);case 6:var r=n.d;if("object"!=typeof e||null===e||!(r in e))return xn("an OBJECT with a field named `"+r+"`",e);var t=vn(n.b,e[r]);return Ct(t)?t:Rr(u(kr,r,t.a));case 7:var o=n.e;return gn(e)?e.length>o?(t=vn(n.b,e[o]),Ct(t)?t:Rr(u(Kr,o,t.a))):xn("a LONGER array. Need index "+o+" but only see "+e.length+" entries",e):xn("an ARRAY",e);case 8:if("object"!=typeof e||null===e||gn(e))return xn("an OBJECT",e);var a=D;for(var i in e)if(e.hasOwnProperty(i)){if(t=vn(n.b,e[i]),!Ct(t))return Rr(u(kr,i,t.a));a=z(w(i,t.a),a)}return Vr(Qr(a));case 9:for(var c=n.f,l=n.g,f=0;l.length>f;f++){if(t=vn(l[f],e),!Ct(t))return t;c=c(t.a)}return Vr(c);case 10:return t=vn(n.b,e),Ct(t)?vn(n.h(t.a),e):t;case 11:for(var s=D,d=n.g;d.b;d=d.b){if(t=vn(d.a,e),Ct(t))return t;s=z(t.a,s)}return Rr(Br(Qr(s)));case 1:return Rr(u(Ar,n.a,e));case 0:return Vr(n.a)}}function pn(n,e,r){for(var t=e.length,o=Array(t),a=0;t>a;a++){var i=vn(n,e[a]);if(!Ct(i))return Rr(u(Kr,a,i.a));o[a]=i.a}return Vr(r(o))}function gn(n){return Array.isArray(n)||"undefined"!=typeof FileList&&n instanceof FileList}function hn(n){return u(Lt,n.length,(function(e){return n[e]}))}function xn(n,e){return Rr(u(Ar,"Expecting "+n,e))}function Ln(n,e){if(n===e)return!0;if(n.$!==e.$)return!1;switch(n.$){case 0:case 1:return n.a===e.a;case 2:return n.b===e.b;case 5:return n.c===e.c;case 3:case 4:case 8:return Ln(n.b,e.b);case 6:return n.d===e.d&&Ln(n.b,e.b);case 7:return n.e===e.e&&Ln(n.b,e.b);case 9:return n.f===e.f&&Cn(n.g,e.g);case 10:return n.h===e.h&&Ln(n.b,e.b);case 11:return Cn(n.g,e.g)}}function Cn(n,e){var r=n.length;if(r!==e.length)return!1;for(var t=0;r>t;t++)if(!Ln(n[t],e[t]))return!1;return!0}var Pn=r((function(n,e){return JSON.stringify(e,null,n)+""}));function Mn(n){return n}var Tn=t((function(n,e,r){return r[n]=e,r}));function yn(n){return{$:0,a:n}}function wn(n){return{$:2,b:n,c:null}}var Sn=r((function(n,e){return{$:3,b:n,d:e}})),$n=0;function Nn(n){var e={$:0,e:$n++,f:n,g:null,h:[]};return kn(e),e}function Dn(n){return wn((function(e){e(yn(Nn(n)))}))}function zn(n,e){n.h.push(e),kn(n)}var _n=r((function(n,e){return wn((function(r){zn(n,e),r(yn(0))}))})),Rn=!1,An=[];function kn(n){if(An.push(n),!Rn){for(Rn=!0;n=An.shift();)Kn(n);Rn=!1}}function Kn(n){for(;n.f;){var e=n.f.$;if(0===e||1===e){for(;n.g&&n.g.$!==e;)n.g=n.g.i;if(!n.g)return;n.f=n.g.b(n.f.a),n.g=n.g.i}else{if(2===e)return void(n.f.c=n.f.b((function(e){n.f=e,kn(n)})));if(5===e){if(0===n.h.length)return;n.f=n.f.b(n.h.shift())}else n.g={$:3===e?0:1,b:n.f.b,i:n.g},n.f=n.f.d}}}var Vn={};function Bn(n,e,r,t,o){return{b:n,c:e,d:r,e:t,f:o}}function Fn(n,e){var r={g:e,h:void 0},t=n.c,o=n.d,a=n.e,i=n.f;return r.h=Nn(u(Sn,(function n(e){return u(Sn,n,{$:5,b:function(n){var c=n.a;return 0===n.$?f(o,r,c,e):a&&i?s(t,r,c.i,c.j,e):f(t,r,a?c.i:c.j,e)}})}),n.b))}var En=r((function(n,e){return wn((function(r){n.g(e),r(yn(0))}))})),jn=r((function(n,e){return u(_n,n.h,{$:0,a:e})}));function Hn(n){return function(e){return{$:1,k:n,l:e}}}function In(n){return{$:2,m:n}}var Un=r((function(n,e){return{$:3,n:n,o:e}})),Wn=[],On=!1;function Yn(n,e,r){if(Wn.push({p:n,q:e,r:r}),!On){On=!0;for(var t;t=Wn.shift();)Xn(t.p,t.q,t.r);On=!1}}function Xn(n,e,r){var t={};for(var o in qn(!0,e,t,null),qn(!1,r,t,null),n)zn(n[o],{$:"fx",a:t[o]||{i:D,j:D}})}function qn(n,e,r,t){switch(e.$){case 1:var o=e.k,a=function(n,e,r,t){return u(n?Vn[e].e:Vn[e].f,(function(n){for(var e=r;e;e=e.t)n=e.s(n);return n}),t)}(n,o,t,e.l);return void(r[o]=function(n,e,r){return r=r||{i:D,j:D},n?r.i=z(e,r.i):r.j=z(e,r.j),r}(n,a,r[o]));case 2:for(var i=e.m;i.b;i=i.b)qn(n,i.a,r,t);return;case 3:return void qn(n,e.o,r,{s:e.n,t:t})}}function Gn(n,e){return function(n){Vn[n]&&L(3)}(n),Vn[n]={f:Jn,u:e,a:Qn},Hn(n)}var Jn=r((function(n,e){return function(r){return n(e(r))}}));function Qn(n,e){var r=D,o=Vn[n].u,a=yn(null);return Vn[n].b=a,Vn[n].c=t((function(n,e){return r=e,a})),{send:function(n){var t=u(mn,o,n);Ct(t)||L(4);for(var a=t.a,i=r;i.b;i=i.b)e(i.a(a))}}}var Zn="undefined"!=typeof document?document:{};function ne(n,e){n.appendChild(e)}function ee(n){return{$:0,a:n}}var re,te=r((function(n,e){return r((function(r,t){for(var o=[],a=0;t.b;t=t.b){var i=t.a;a+=i.b||0,o.push(i)}return a+=o.length,{$:1,c:e,d:fe(r),e:o,f:n,b:a}}))}))(void 0),oe=r((function(n,e){return r((function(r,t){for(var o=[],a=0;t.b;t=t.b){var i=t.a;a+=i.b.b||0,o.push(i)}return a+=o.length,{$:2,c:e,d:fe(r),e:o,f:n,b:a}}))}))(void 0),ae=r((function(n,e){return{$:4,j:n,k:e,b:1+(e.b||0)}})),ie=r((function(n,e){return{$:"a0",n:n,o:e}})),ce=r((function(n,e){return{$:"a1",n:n,o:e}})),le=r((function(n,e){return{$:"a2",n:n,o:e}})),ue=r((function(n,e){return{$:"a3",n:n,o:e}}));function fe(n){for(var e={};n.b;n=n.b){var r=n.a,t=r.$,o=r.n,a=r.o;if("a2"!==t){var i=e[t]||(e[t]={});"a3"===t&&"class"===o?se(i,o,a):i[o]=a}else"className"===o?se(e,o,a):e[o]=a}return e}function se(n,e,r){var t=n[e];n[e]=t?t+" "+r:r}function de(n,e){var r=n.$;if(5===r)return de(n.k||(n.k=n.m()),e);if(0===r)return Zn.createTextNode(n.a);if(4===r){for(var t=n.k,o=n.j;4===t.$;)"object"!=typeof o?o=[o,t.j]:o.push(t.j),t=t.k;var a={j:o,p:e};return(i=de(t,a)).elm_event_node_ref=a,i}if(3===r)return be(i=n.h(n.g),e,n.d),i;var i=n.f?Zn.createElementNS(n.f,n.c):Zn.createElement(n.c);be(i,e,n.d);for(var c=n.e,l=0;c.length>l;l++)ne(i,de(1===r?c[l]:c[l].b,e));return i}function be(n,e,r){for(var t in r){var o=r[t];"a1"===t?me(n,o):"a0"===t?ge(n,e,o):"a3"===t?ve(n,o):"a4"===t?pe(n,o):("value"!==t&&"checked"!==t||n[t]!==o)&&(n[t]=o)}}function me(n,e){var r=n.style;for(var t in e)r[t]=e[t]}function ve(n,e){for(var r in e){var t=e[r];void 0!==t?n.setAttribute(r,t):n.removeAttribute(r)}}function pe(n,e){for(var r in e){var t=e[r],o=t.f,a=t.o;void 0!==a?n.setAttributeNS(o,r,a):n.removeAttributeNS(o,r)}}function ge(n,e,r){var t=n.elmFs||(n.elmFs={});for(var o in r){var a=r[o],i=t[o];if(a){if(i){if(i.q.$===a.$){i.q=a;continue}n.removeEventListener(o,i)}i=he(e,a),n.addEventListener(o,i,re&&{passive:2>$t(a)}),t[o]=i}else n.removeEventListener(o,i),t[o]=void 0}}try{window.addEventListener("t",null,Object.defineProperty({},"passive",{get:function(){re=!0}}))}catch(n){}function he(n,e){function r(e){var t=r.q,o=vn(t.a,e);if(Ct(o)){for(var a,i=$t(t),c=o.a,l=i?3>i?c.a:c.ax:c,u=1==i?c.b:3==i&&c.dc,f=(u&&e.stopPropagation(),(2==i?c.b:3==i&&c.c1)&&e.preventDefault(),n);a=f.j;){if("function"==typeof a)l=a(l);else for(var s=a.length;s--;)l=a[s](l);f=f.p}f(l,u)}}return r.q=e,r}function xe(n,e){return n.$==e.$&&Ln(n.a,e.a)}function Le(n,e,r,t){var o={$:e,r:r,s:t,t:void 0,u:void 0};return n.push(o),o}function Ce(n,e,r,t){if(n!==e){var o=n.$,a=e.$;if(o!==a){if(1!==o||2!==a)return void Le(r,0,t,e);e=function(n){for(var e=n.e,r=e.length,t=Array(r),o=0;r>o;o++)t[o]=e[o].b;return{$:1,c:n.c,d:n.d,e:t,f:n.f,b:n.b}}(e),a=1}switch(a){case 5:for(var i=n.l,c=e.l,l=i.length,u=l===c.length;u&&l--;)u=i[l]===c[l];if(u)return void(e.k=n.k);e.k=e.m();var f=[];return Ce(n.k,e.k,f,0),void(f.length>0&&Le(r,1,t,f));case 4:for(var s=n.j,d=e.j,b=!1,m=n.k;4===m.$;)b=!0,"object"!=typeof s?s=[s,m.j]:s.push(m.j),m=m.k;for(var v=e.k;4===v.$;)b=!0,"object"!=typeof d?d=[d,v.j]:d.push(v.j),v=v.k;return b&&s.length!==d.length?void Le(r,0,t,e):((b?function(n,e){for(var r=0;n.length>r;r++)if(n[r]!==e[r])return!1;return!0}(s,d):s===d)||Le(r,2,t,d),void Ce(m,v,r,t+1));case 0:return void(n.a!==e.a&&Le(r,3,t,e.a));case 1:return void Pe(n,e,r,t,Te);case 2:return void Pe(n,e,r,t,ye);case 3:if(n.h!==e.h)return void Le(r,0,t,e);var p=Me(n.d,e.d);p&&Le(r,4,t,p);var g=e.i(n.g,e.g);return void(g&&Le(r,5,t,g))}}}function Pe(n,e,r,t,o){if(n.c===e.c&&n.f===e.f){var a=Me(n.d,e.d);a&&Le(r,4,t,a),o(n,e,r,t)}else Le(r,0,t,e)}function Me(n,e,r){var t;for(var o in n)if("a1"!==o&&"a0"!==o&&"a3"!==o&&"a4"!==o)if(o in e){var a=n[o],i=e[o];a===i&&"value"!==o&&"checked"!==o||"a0"===r&&xe(a,i)||((t=t||{})[o]=i)}else(t=t||{})[o]=r?"a1"===r?"":"a0"===r||"a3"===r?void 0:{f:n[o].f,o:void 0}:"string"==typeof n[o]?"":null;else{var c=Me(n[o],e[o]||{},o);c&&((t=t||{})[o]=c)}for(var l in e)l in n||((t=t||{})[l]=e[l]);return t}function Te(n,e,r,t){var o=n.e,a=e.e,i=o.length,c=a.length;i>c?Le(r,6,t,{v:c,i:i-c}):c>i&&Le(r,7,t,{v:i,e:a});for(var l=c>i?i:c,u=0;l>u;u++){var f=o[u];Ce(f,a[u],r,++t),t+=f.b||0}}function ye(n,e,r,t){for(var o=[],a={},i=[],c=n.e,l=e.e,u=c.length,f=l.length,s=0,d=0,b=t;u>s&&f>d;){var m=(w=c[s]).a,v=(S=l[d]).a,p=w.b,g=S.b,h=void 0,x=void 0;if(m!==v){var L=c[s+1],C=l[d+1];if(L){var P=L.a,M=L.b;x=v===P}if(C){var T=C.a,y=C.b;h=m===T}if(h&&x)Ce(p,y,o,++b),Se(a,o,m,g,d,i),b+=p.b||0,$e(a,o,m,M,++b),b+=M.b||0,s+=2,d+=2;else if(h)b++,Se(a,o,v,g,d,i),Ce(p,y,o,b),b+=p.b||0,s+=1,d+=2;else if(x)$e(a,o,m,p,++b),b+=p.b||0,Ce(M,g,o,++b),b+=M.b||0,s+=2,d+=1;else{if(!L||P!==T)break;$e(a,o,m,p,++b),Se(a,o,v,g,d,i),b+=p.b||0,Ce(M,y,o,++b),b+=M.b||0,s+=2,d+=2}}else Ce(p,g,o,++b),b+=p.b||0,s++,d++}for(;u>s;){var w;b++,$e(a,o,(w=c[s]).a,p=w.b,b),b+=p.b||0,s++}for(;f>d;){var S,$=$||[];Se(a,o,(S=l[d]).a,S.b,void 0,$),d++}(o.length>0||i.length>0||$)&&Le(r,8,t,{w:o,x:i,y:$})}var we="_elmW6BL";function Se(n,e,r,t,o,a){var i=n[r];if(!i)return a.push({r:o,A:i={c:0,z:t,r:o,s:void 0}}),void(n[r]=i);if(1===i.c){a.push({r:o,A:i}),i.c=2;var c=[];return Ce(i.z,t,c,i.r),i.r=o,void(i.s.s={w:c,A:i})}Se(n,e,r+we,t,o,a)}function $e(n,e,r,t,o){var a=n[r];if(a){if(0===a.c){a.c=2;var i=[];return Ce(t,a.z,i,o),void Le(e,9,o,{w:i,A:a})}$e(n,e,r+we,t,o)}else{var c=Le(e,9,o,void 0);n[r]={c:1,z:t,r:o,s:c}}}function Ne(n,e,r,t){De(n,e,r,0,0,e.b,t)}function De(n,e,r,t,o,a,i){for(var c=r[t],l=c.r;l===o;){var u=c.$;if(1===u)Ne(n,e.k,c.s,i);else if(8===u)c.t=n,c.u=i,(f=c.s.w).length>0&&De(n,e,f,0,o,a,i);else if(9===u){c.t=n,c.u=i;var f,s=c.s;s&&(s.A.s=n,(f=s.w).length>0&&De(n,e,f,0,o,a,i))}else c.t=n,c.u=i;if(!(c=r[++t])||(l=c.r)>a)return t}var d=e.$;if(4===d){for(var b=e.k;4===b.$;)b=b.k;return De(n,b,r,t,o+1,a,n.elm_event_node_ref)}for(var m=e.e,v=n.childNodes,p=0;m.length>p;p++){o++;var g=1===d?m[p]:m[p].b,h=o+(g.b||0);if(!(o>l||l>h||(c=r[t=De(v[p],g,r,t,o,h,i)])&&(l=c.r)<=a))return t;o=h}return t}function ze(n,e){for(var r=0;e.length>r;r++){var t=e[r],o=t.t,a=_e(o,t);o===n&&(n=a)}return n}function _e(n,e){switch(e.$){case 0:return function(n,e,r){var t=n.parentNode,o=de(e,r);return o.elm_event_node_ref||(o.elm_event_node_ref=n.elm_event_node_ref),t&&o!==n&&t.replaceChild(o,n),o}(n,e.s,e.u);case 4:return be(n,e.u,e.s),n;case 3:return n.replaceData(0,n.length,e.s),n;case 1:return ze(n,e.s);case 2:return n.elm_event_node_ref?n.elm_event_node_ref.j=e.s:n.elm_event_node_ref={j:e.s,p:e.u},n;case 6:for(var r=e.s,t=0;r.i>t;t++)n.removeChild(n.childNodes[r.v]);return n;case 7:for(var o=(r=e.s).e,a=n.childNodes[t=r.v];o.length>t;t++)n.insertBefore(de(o[t],e.u),a);return n;case 9:if(!(r=e.s))return n.parentNode.removeChild(n),n;var i=r.A;return void 0!==i.r&&n.parentNode.removeChild(n),i.s=ze(n,r.w),n;case 8:return function(n,e){var r=e.s,t=function(n,e){if(n){for(var r=Zn.createDocumentFragment(),t=0;n.length>t;t++){var o=n[t].A;ne(r,2===o.c?o.s:de(o.z,e.u))}return r}}(r.y,e);n=ze(n,r.w);for(var o=r.x,a=0;o.length>a;a++){var i=o[a],c=i.A,l=2===c.c?c.s:de(c.z,e.u);n.insertBefore(l,n.childNodes[i.r])}return t&&ne(n,t),n}(n,e);case 5:return e.s(n);default:L(10)}}function Re(n){if(3===n.nodeType)return ee(n.textContent);if(1!==n.nodeType)return ee("");for(var e=D,r=n.attributes,t=r.length;t--;){var o=r[t];e=z(u(ue,o.name,o.value),e)}var a=n.tagName.toLowerCase(),i=D,c=n.childNodes;for(t=c.length;t--;)i=z(Re(c[t]),i);return f(te,a,e,i)}var Ae=o((function(n,e,r,t){return function(n,e,r,t,o,a){var i=u(mn,n,e?e.flags:void 0);Ct(i)||L(2);var c={},l=r(i.a),f=l.a,s=a(b,f),d=function(n,e){var r;for(var t in Vn){var o=Vn[t];o.a&&((r=r||{})[t]=o.a(t,e)),n[t]=Fn(o,e)}return r}(c,b);function b(n,e){var r=u(t,n,f);s(f=r.a,e),Yn(c,r.b,o(f))}return Yn(c,l.b,o(f)),d?{ports:d}:{}}(e,t,n.fd,n.fM,n.fF,(function(e,r){var o=n.fO,a=t.node,i=Re(a);return function(n,e){e(n);var r=0;function t(){r=1===r?0:(Ke(t),e(n),1)}return function(o,a){n=o,a?(e(n),2===r&&(r=1)):(0===r&&Ke(t),r=2)}}(r,(function(n){var r=o(n),t=function(n,e){var r=[];return Ce(n,e,r,0),r}(i,r);a=function(n,e,r,t){return 0===r.length?n:(Ne(n,e,r,t),ze(n,r))}(a,i,t,e),i=r}))}))})),ke="undefined"!=typeof cancelAnimationFrame?cancelAnimationFrame:function(n){clearTimeout(n)},Ke="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:function(n){return setTimeout(n,1e3/60)},Ve={addEventListener:function(){},removeEventListener:function(){}},Be="undefined"!=typeof document?document:Ve,Fe="undefined"!=typeof window?window:Ve,Ee=t((function(n,e,r){return Dn(wn((function(){function t(n){Nn(r(n))}return n.addEventListener(e,t,re&&{passive:!0}),function(){n.removeEventListener(e,t)}})))})),je=r((function(n,e){var r=vn(n,e);return Ct(r)?Fr(r.a):Er})),He=r((function(n,e){var r="g";n.fm&&(r+="m"),n.eQ&&(r+="i");try{return Fr(RegExp(e,r))}catch(n){return Er}})),Ie=t((function(n,e,r){for(var t,o=[],a=0,i=r,c=e.lastIndex,l=-1;a++<n&&(t=e.exec(i))&&l!=e.lastIndex;){for(var u=t.length-1,f=Array(u);u>0;){var d=t[u];f[--u]=d?Fr(d):Er}o.push(s(Di,t[0],t.index,a,R(f))),l=e.lastIndex}return e.lastIndex=c,R(o)})),Ue=0;function We(n,e){for(;e.b;e=e.b)n(e.a)}function Oe(n){for(var e=0;n.b;n=n.b)e++;return e}var Ye="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:function(n){setTimeout(n,1e3/60)},Xe=a((function(n,e,r,t,o){return{$:0,a:n,b:e,c:r,d:t,e:o}})),qe=r((function(n,e){var r=n.blend;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.BLEND),r.enabled=!0),r.a===e.a&&r.d===e.d||(n.gl.blendEquationSeparate(e.a,e.d),r.a=e.a,r.d=e.d),r.b===e.b&&r.c===e.c&&r.e===e.e&&r.f===e.f||(n.gl.blendFuncSeparate(e.b,e.c,e.e,e.f),r.b=e.b,r.c=e.c,r.e=e.e,r.f=e.f),r.g===e.g&&r.h===e.h&&r.i===e.i&&r.j===e.j||(n.gl.blendColor(e.g,e.h,e.i,e.j),r.g=e.g,r.h=e.h,r.i=e.i,r.j=e.j)})),Ge=r((function(n,e){var r=n.depthTest;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.DEPTH_TEST),r.enabled=!0),r.a!==e.a&&(n.gl.depthFunc(e.a),r.a=e.a),r.b!==e.b&&(n.gl.depthMask(e.b),r.b=e.b),r.c===e.c&&r.d===e.d||(n.gl.depthRange(e.c,e.d),r.c=e.c,r.d=e.d)})),Je=r((function(n,e){var r=n.stencilTest;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.STENCIL_TEST),r.enabled=!0),r.d===e.d&&r.a===e.a&&r.b===e.b||(n.gl.stencilFuncSeparate(n.gl.FRONT,e.d,e.a,e.b),r.d=e.d),r.e===e.e&&r.f===e.f&&r.g===e.g||(n.gl.stencilOpSeparate(n.gl.FRONT,e.e,e.f,e.g),r.e=e.e,r.f=e.f,r.g=e.g),r.c!==e.c&&(n.gl.stencilMask(e.c),r.c=e.c),r.h===e.h&&r.a===e.a&&r.b===e.b||(n.gl.stencilFuncSeparate(n.gl.BACK,e.h,e.a,e.b),r.h=e.h,r.a=e.a,r.b=e.b),r.i===e.i&&r.j===e.j&&r.k===e.k||(n.gl.stencilOpSeparate(n.gl.BACK,e.i,e.j,e.k),r.i=e.i,r.j=e.j,r.k=e.k)})),Qe=r((function(n,e){var r=n.scissor;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.SCISSOR_TEST),r.enabled=!0),r.a===e.a&&r.b===e.b&&r.c===e.c&&r.d===e.d||(n.gl.scissor(e.a,e.b,e.c,e.d),r.a=e.a,r.b=e.b,r.c=e.c,r.d=e.d)})),Ze=r((function(n,e){var r=n.colorMask;r.toggle=n.toggle,r.enabled=!0,r.a===e.a&&r.b===e.b&&r.c===e.c&&r.d===e.d||(n.gl.colorMask(e.a,e.b,e.c,e.d),r.a=e.a,r.b=e.b,r.c=e.c,r.d=e.d)})),nr=r((function(n,e){var r=n.cullFace;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.CULL_FACE),r.enabled=!0),r.a!==e.a&&(n.gl.cullFace(e.a),r.a=e.a)})),er=r((function(n,e){var r=n.polygonOffset;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.POLYGON_OFFSET_FILL),r.enabled=!0),r.a===e.a&&r.b===e.b||(n.gl.polygonOffset(e.a,e.b),r.a=e.a,r.b=e.b)})),rr=r((function(n,e){var r=n.sampleCoverage;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.SAMPLE_COVERAGE),r.enabled=!0),r.a===e.a&&r.b===e.b||(n.gl.sampleCoverage(e.a,e.b),r.a=e.a,r.b=e.b)})),tr=function(n){n.scissor.enabled&&(n.gl.disable(n.gl.SCISSOR_TEST),n.scissor.enabled=!1)},or=function(n){var e=n.colorMask;e.a&&e.b&&e.c&&e.d||(n.gl.colorMask(!0,!0,!0,!0),e.a=!0,e.b=!0,e.c=!0,e.d=!0)},ar=["blend","depthTest","stencilTest","scissor","colorMask","cullFace","polygonOffset","sampleCoverage","sampleAlphaToCoverage"],ir=[function(n){n.blend.enabled&&(n.gl.disable(n.gl.BLEND),n.blend.enabled=!1)},function(n){n.depthTest.enabled&&(n.gl.disable(n.gl.DEPTH_TEST),n.depthTest.enabled=!1)},function(n){n.stencilTest.enabled&&(n.gl.disable(n.gl.STENCIL_TEST),n.stencilTest.enabled=!1)},tr,or,function(n){n.gl.disable(n.gl.CULL_FACE)},function(n){n.gl.disable(n.gl.POLYGON_OFFSET_FILL)},function(n){n.gl.disable(n.gl.SAMPLE_COVERAGE)},function(n){n.gl.disable(n.gl.SAMPLE_ALPHA_TO_COVERAGE)}];function cr(n,e,r){var t=n.createShader(r);return n.shaderSource(t,"#extension GL_OES_standard_derivatives : enable\n"+e),n.compileShader(t),t}function lr(n,e){switch(e){case n.FLOAT:return{size:1,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC2:return{size:2,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC3:return{size:3,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC4:return{size:4,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_MAT4:return{size:4,arraySize:4,type:Float32Array,baseType:n.FLOAT};case n.INT:return{size:1,arraySize:1,type:Int32Array,baseType:n.INT}}}function ur(n,e,r,t){for(var o=r.a.dz,a=[],i=0;o>i;i++)a.push(String.fromCharCode(97+i));var c=lr(n,e.type);if(void 0===c)throw Error("No info available for: "+e.type);var l=0,u=c.size*c.arraySize*o,f=new c.type(Oe(r.b)*u);We((function(n){!function(n,e,r,t,i){var c;if(1===o)for(c=0;e>c;c++)n[r++]=1===e?t[i]:t[i][c];else a.forEach((function(o){for(c=0;e>c;c++)n[r++]=1===e?t[o][i]:t[o][i][c]}))}(f,c.size*c.arraySize,l,n,t[e.name]||e.name),l+=u}),r.b);var s=n.createBuffer();return n.bindBuffer(n.ARRAY_BUFFER,s),n.bufferData(n.ARRAY_BUFFER,f,n.STATIC_DRAW),s}function fr(n,e){return n+"#"+e}var sr=r((function(n,e){var r=n.f,t=r.gl;return t?(t.viewport(0,0,t.drawingBufferWidth,t.drawingBufferHeight),r.depthTest.b||(t.depthMask(!0),r.depthTest.b=!0),r.stencilTest.c!==r.STENCIL_WRITEMASK&&(t.stencilMask(r.STENCIL_WRITEMASK),r.stencilTest.c=r.STENCIL_WRITEMASK),tr(r),or(r),t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT|t.STENCIL_BUFFER_BIT),We((function(e){if(e.d.b.b){var o,a,i,c,l;if(e.b.id&&e.c.id&&(o=fr(e.b.id,e.c.id),a=r.programs[o]),!a){var u,f;e.b.id?u=r.shaders[e.b.id]:e.b.id=Ue++,u||(u=cr(t,e.b.src,t.VERTEX_SHADER),r.shaders[e.b.id]=u),e.c.id?f=r.shaders[e.c.id]:e.c.id=Ue++,f||(f=cr(t,e.c.src,t.FRAGMENT_SHADER),r.shaders[e.c.id]=f);var s=function(n,e,r){var t=n.createProgram();if(n.attachShader(t,e),n.attachShader(t,r),n.linkProgram(t),!n.getProgramParameter(t,n.LINK_STATUS))throw"Link failed: "+n.getProgramInfoLog(t)+"\nvs info-log: "+n.getShaderInfoLog(e)+"\nfs info-log: "+n.getShaderInfoLog(r);return t}(t,u,f);(a={glProgram:s,attributes:Object.assign({},e.b.attributes,e.c.attributes),currentUniforms:{},activeAttributes:[],activeAttributeLocations:[]}).uniformSetters=function(n,e,r,t){var o=r.glProgram,a=r.currentUniforms,i=0,c=e.f;function l(e,r){var t=r.name,o=n.getUniformLocation(e,t);switch(r.type){case n.INT:return function(e){a[t]!==e&&(n.uniform1i(o,e),a[t]=e)};case n.FLOAT:return function(e){a[t]!==e&&(n.uniform1f(o,e),a[t]=e)};case n.FLOAT_VEC2:return function(e){a[t]!==e&&(n.uniform2f(o,e[0],e[1]),a[t]=e)};case n.FLOAT_VEC3:return function(e){a[t]!==e&&(n.uniform3f(o,e[0],e[1],e[2]),a[t]=e)};case n.FLOAT_VEC4:return function(e){a[t]!==e&&(n.uniform4f(o,e[0],e[1],e[2],e[3]),a[t]=e)};case n.FLOAT_MAT4:return function(e){a[t]!==e&&(n.uniformMatrix4fv(o,!1,new Float32Array(e)),a[t]=e)};case n.SAMPLER_2D:var l=i++;return function(e){n.activeTexture(n.TEXTURE0+l);var r=c.textures.get(e);r||(r=e.eV(n),c.textures.set(e,r)),n.bindTexture(n.TEXTURE_2D,r),a[t]!==e&&(n.uniform1i(o,l),a[t]=e)};case n.BOOL:return function(e){a[t]!==e&&(n.uniform1i(o,e),a[t]=e)};default:return function(){}}}for(var u={},f=n.getProgramParameter(o,n.ACTIVE_UNIFORMS),s=0;f>s;s++){var d=n.getActiveUniform(o,s);u[t[d.name]||d.name]=l(o,d)}return u}(t,n,a,Object.assign({},e.b.uniforms,e.c.uniforms));var d=t.getProgramParameter(s,t.ACTIVE_ATTRIBUTES);for(i=0;d>i;i++){var b=t.getActiveAttrib(s,i),m=t.getAttribLocation(s,b.name);a.activeAttributes.push(b),a.activeAttributeLocations.push(m)}o=fr(e.b.id,e.c.id),r.programs[o]=a}r.lastProgId!==o&&(t.useProgram(a.glProgram),r.lastProgId=o),c=a.uniformSetters,Object.keys(l=e.e).forEach((function(n){var e=c[n];e&&e(l[n])}));var v=r.buffers.get(e.d);for(v||(v=function(n,e){if(e.a.dJ>0){var r=n.createBuffer(),t=function(n,e){var r,t=new Uint32Array(Oe(n)*e),o=0;return We((function(n){if(1===e)t[o++]=n;else for(r=0;e>r;r++)t[o++]=n[String.fromCharCode(97+r)]}),n),t}(e.c,e.a.dJ);return n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,r),n.bufferData(n.ELEMENT_ARRAY_BUFFER,t,n.STATIC_DRAW),{numIndices:t.length,indexBuffer:r,buffers:{}}}return{numIndices:e.a.dz*Oe(e.b),indexBuffer:null,buffers:{}}}(t,e.d),r.buffers.set(e.d,v)),i=0;a.activeAttributes.length>i;i++){m=a.activeAttributeLocations[i],void 0===v.buffers[(b=a.activeAttributes[i]).name]&&(v.buffers[b.name]=ur(t,b,e.d,a.attributes)),t.bindBuffer(t.ARRAY_BUFFER,v.buffers[b.name]);var p=lr(t,b.type);if(1===p.arraySize)t.enableVertexAttribArray(m),t.vertexAttribPointer(m,p.size,p.baseType,!1,0,0);else for(var g=4*p.size,h=g*p.arraySize,x=0;p.arraySize>x;x++)t.enableVertexAttribArray(m+x),t.vertexAttribPointer(m+x,p.size,p.baseType,!1,h,g*x)}for(r.toggle=!r.toggle,We(fd(r),e.a),i=0;9>i;i++){var L=r[ar[i]];L.toggle!==r.toggle&&L.enabled&&(ir[i](r),L.enabled=!1,L.toggle=r.toggle)}v.indexBuffer?(t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,v.indexBuffer),t.drawElements(e.d.a.ee,v.numIndices,t.UNSIGNED_INT,0)):t.drawArrays(e.d.a.ee,0,v.numIndices)}}),n.g),e):e})),dr=t((function(n,e,r){return function(n,e,r,t){return{$:3,d:fe(n),g:e,h:r,i:t}}(e,{g:r,f:{},h:n},xr,Lr)})),br=r((function(n,e){n.contextAttributes.alpha=!0,n.contextAttributes.premultipliedAlpha=e.a})),mr=r((function(n,e){n.contextAttributes.depth=!0,n.sceneSettings.push((function(n){n.clearDepth(e.a)}))})),vr=r((function(n,e){n.contextAttributes.stencil=!0,n.sceneSettings.push((function(n){n.clearStencil(e.a)}))})),pr=r((function(n){n.contextAttributes.antialias=!0})),gr=r((function(n,e){n.sceneSettings.push((function(n){n.clearColor(e.a,e.b,e.c,e.d)}))})),hr=r((function(n){n.contextAttributes.preserveDrawingBuffer=!0}));function xr(n){var e={contextAttributes:{alpha:!1,depth:!1,stencil:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1},sceneSettings:[]};We((function(n){return u(ud,e,n)}),n.h);var r=Zn.createElement("canvas"),t=r.getContext&&(r.getContext("webgl",e.contextAttributes)||r.getContext("experimental-webgl",e.contextAttributes));return t&&"undefined"!=typeof WeakMap?(e.sceneSettings.forEach((function(n){n(t)})),t.getExtension("OES_standard_derivatives"),t.getExtension("OES_element_index_uint"),n.f.gl=t,n.f.toggle=!1,n.f.blend={enabled:!1,toggle:!1},n.f.depthTest={enabled:!1,toggle:!1},n.f.stencilTest={enabled:!1,toggle:!1},n.f.scissor={enabled:!1,toggle:!1},n.f.colorMask={enabled:!1,toggle:!1},n.f.cullFace={enabled:!1,toggle:!1},n.f.polygonOffset={enabled:!1,toggle:!1},n.f.sampleCoverage={enabled:!1,toggle:!1},n.f.sampleAlphaToCoverage={enabled:!1,toggle:!1},n.f.shaders=[],n.f.programs={},n.f.lastProgId=null,n.f.buffers=new WeakMap,n.f.textures=new WeakMap,n.f.STENCIL_WRITEMASK=t.getParameter(t.STENCIL_WRITEMASK),Ye((function(){return u(sr,n,r)}))):(r=Zn.createElement("div")).innerHTML='<a href="https://get.webgl.org/">Enable WebGL</a> to see this content!',r}function Lr(n,e){return e.f=n.f,sr(e)}var Cr=r((function(n,e){return new Float64Array([n,e])}));new Float64Array(3),new Float64Array(3),new Float64Array(3);var Pr=t((function(n,e,r){return new Float64Array([n,e,r])})),Mr=r((function(n,e){return new Float64Array([e[0]*n,e[1]*n,e[2]*n])})),Tr=o((function(n,e,r,t){return new Float64Array([n,e,r,t])}));new Float64Array(16),new Float64Array(16),new Float64Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);var yr=_,wr=x,Sr=t((function(n,e,t){var o=t.c,a=t.d,i=r((function(e,r){return f(wr,e.$?n:i,r,e.a)}));return f(wr,i,f(wr,n,e,a),o)})),$r=t((function(n,e,r){for(;;){if(-2===r.$)return e;var t=r.d,o=n,a=f(n,r.b,r.c,f($r,n,e,r.e));n=o,e=a,r=t}})),Nr=function(n){return f($r,t((function(n,e,r){return u(yr,w(n,e),r)})),D,n)},Dr=1,zr=2,_r=0,Rr=function(n){return{$:1,a:n}},Ar=r((function(n,e){return{$:3,a:n,b:e}})),kr=r((function(n,e){return{$:0,a:n,b:e}})),Kr=r((function(n,e){return{$:1,a:n,b:e}})),Vr=function(n){return{$:0,a:n}},Br=function(n){return{$:2,a:n}},Fr=function(n){return{$:0,a:n}},Er={$:1},jr=Pn,Hr=nn,Ir=r((function(n,e){return u(J,n,A(e))})),Ur=r((function(n,e){return R(u(G,n,e))})),Wr=t((function(n,e,r){for(;;){if(!r.b)return e;var t=r.b,o=n,a=u(n,r.a,e);n=o,e=a,r=t}})),Or=function(n){return f(Wr,r((function(n,e){return e+1})),0,n)},Yr=k,Xr=t((function(n,e,r){for(;;){if(T(n,e)>=1)return r;var t=n,o=e-1,a=u(yr,e,r);n=t,e=o,r=a}})),qr=r((function(n,e){return f(Xr,n,e,D)})),Gr=r((function(n,e){return f(Yr,n,u(qr,0,Or(e)-1),e)})),Jr=function(n){var e=n.charCodeAt(0);return 55296>e||e>56319?e:1024*(e-55296)+n.charCodeAt(1)-56320+65536},Qr=function(n){return f(Wr,yr,D,n)},Zr=function(n){var e=n.charCodeAt(0);return isNaN(e)?Er:Fr(55296>e||e>56319?w(n[0],n.slice(1)):w(n[0]+n[1],n.slice(2)))},nt=32,et=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),rt=[],tt=H,ot=r((function(n,e){return O(e)/O(n)})),at=function(n){return n},it=tt(u(ot,2,nt)),ct=s(et,0,it,rt,rt),lt=p,ut=function(n){return{$:1,a:n}},ft=M,st=I,dt=function(n){return n.length},bt=r((function(n,e){return T(n,e)>0?n:e})),mt=K,vt=g,pt=r((function(n,e){for(;;){var r=u(vt,nt,n),t=r.b,o=u(yr,{$:0,a:r.a},e);if(!t.b)return Qr(o);n=t,e=o}})),gt=r((function(n,e){for(;;){var r=tt(e/nt);if(1===r)return u(vt,nt,n).a;n=u(pt,n,D),e=r}})),ht=r((function(n,e){if(e.m){var r=e.m*nt,t=st(u(ot,nt,r-1)),o=n?Qr(e.A):e.A,a=u(gt,o,e.m);return s(et,dt(e.q)+r,u(bt,5,t*it),a,e.q)}return s(et,dt(e.q),it,rt,e.q)})),xt=a((function(n,e,r,t,o){for(;;){if(0>e)return u(ht,!1,{A:t,m:r/nt|0,q:o});var a=ut(f(lt,nt,e,n));n=n,e-=nt,r=r,t=u(yr,a,t),o=o}})),Lt=r((function(n,e){if(n>0){var r=n%nt;return d(xt,e,n-r-nt,n,D,f(lt,r,n-r,e))}return ct})),Ct=function(n){return!n.$},Pt=un,Mt=cn,Tt=on,yt=fn,wt=sn,St=function(n){return{$:0,a:n}},$t=function(n){switch(n.$){case 0:return 0;case 1:return 1;case 2:return 2;default:return 3}},Nt=te("div"),Dt=function(n){return{$:1,a:n}},zt=function(n){return{$:7,a:n}},_t=function(n){return{$:3,a:n}},Rt=t((function(n,e,r){return e(n(r))})),At=function(n){return n},kt=function(n){return n.length},Kt=Q,Vt=r((function(n,e){return 1>n?e:f(Kt,n,kt(e),e)})),Bt=function(n){for(var e=0,r=n.charCodeAt(0),t=43==r||45==r?1:0,o=t;n.length>o;++o){var a=n.charCodeAt(o);if(48>a||a>57)return Er;e=10*e+a-48}return o==t?Er:Fr(45==r?-e:e)},Ft=Z,Et=yn,jt=Et(0),Ht=o((function(n,e,r,t){if(t.b){var o=t.a,a=t.b;if(a.b){var i=a.a,c=a.b;if(c.b){var l=c.a,d=c.b;if(d.b){var b=d.b;return u(n,o,u(n,i,u(n,l,u(n,d.a,r>500?f(Wr,n,e,Qr(b)):s(Ht,n,e,r+1,b)))))}return u(n,o,u(n,i,u(n,l,e)))}return u(n,o,u(n,i,e))}return u(n,o,e)}return e})),It=t((function(n,e,r){return s(Ht,n,e,0,r)})),Ut=r((function(n,e){return f(It,r((function(e,r){return u(yr,n(e),r)})),D,e)})),Wt=Sn,Ot=r((function(n,e){return u(Wt,(function(e){return Et(n(e))}),e)})),Yt=t((function(n,e,r){return u(Wt,(function(e){return u(Wt,(function(r){return Et(u(n,e,r))}),r)}),e)})),Xt=function(n){return f(It,Yt(yr),Et(D),n)},qt=En,Gt=r((function(n,e){var r=e;return Dn(u(Wt,qt(n),r))}));Vn.Task=Bn(jt,t((function(n,e){return u(Ot,(function(){return 0}),Xt(u(Ut,Gt(n),e)))})),t((function(){return Et(0)})),r((function(n,e){return u(Ot,n,e)})));var Jt=Hn("Task"),Qt=r((function(n,e){return Jt(u(Ot,n,e))})),Zt=Ae,no=r((function(n,e){return{$:0,a:n,b:e}})),eo=function(n){return{$:6,a:n}},ro=r((function(n,e){return{$:4,a:n,b:e}})),to=r((function(n,e){return{$:2,a:n,b:e}})),oo=In,ao=Un,io=function(n){return{$:1,a:n}},co=t((function(n,e,r){return{cQ:r,es:e,ex:n}})),lo=Et(f(co,D,Er,0)),uo=function(n){return wn((function(e){var r=n.f;2===r.$&&r.c&&r.c(),n.f=null,e(yn(0))}))},fo=wn((function(n){n(yn(Date.now()))})),so=wn((function(n){var e=Ke((function(){n(yn(Date.now()))}));return function(){ke(e)}})),bo=jn,mo=Dn,vo=t((function(n,e,r){var t=r.es,o=r.cQ,a=w(t,e);return 1===a.a.$?a.b.b?u(Wt,(function(n){return u(Wt,(function(r){return Et(f(co,e,Fr(n),r))}),fo)}),mo(u(Wt,bo(n),so))):lo:a.b.b?Et(f(co,e,t,o)):u(Wt,(function(){return lo}),uo(a.a.a))})),po=At,go=t((function(n,e,r){var t=r.ex,o=r.cQ,a=function(r){return u(qt,n,(0,r.a)(r.$?e-o:po(e)))};return u(Wt,(function(n){return u(Wt,(function(){return Et(f(co,t,Fr(n),e))}),Xt(u(Ut,a,t)))}),mo(u(Wt,bo(n),so)))})),ho=t((function(n,e,r){return n(e(r))}));Vn["Browser.AnimationManager"]=Bn(lo,vo,go,0,r((function(n,e){return e.$?io(u(ho,n,e.a)):{$:0,a:u(ho,n,e.a)}})));var xo=Hn("Browser.AnimationManager"),Lo=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),Co=r((function(n,e){return{ej:e,ex:n}})),Po={$:-2},Mo=Po,To=Et(u(Co,D,Mo)),yo=function(n){return w(N(n.a?"w_":"d_",n.b),n)},wo=a((function(n,e,r,t,o){return{$:-1,a:n,b:e,c:r,d:t,e:o}})),So=a((function(n,e,r,t,o){if(-1!==o.$||o.a){if(-1!==t.$||t.a||-1!==t.d.$||t.d.a)return d(wo,n,e,r,t,o);var a=t.d;return i=t.e,d(wo,0,t.b,t.c,d(wo,1,a.b,a.c,a.d,a.e),d(wo,1,e,r,i,o))}var i,c=o.b,l=o.c,u=o.d,f=o.e;return-1!==t.$||t.a?d(wo,n,c,l,d(wo,0,e,r,t,u),f):d(wo,0,e,r,d(wo,1,t.b,t.c,t.d,i=t.e),d(wo,1,c,l,u,f))})),$o=y,No=t((function(n,e,r){if(-2===r.$)return d(wo,0,n,e,Po,Po);var t=r.a,o=r.b,a=r.c,i=r.d,c=r.e;switch(u($o,n,o)){case 0:return d(So,t,o,a,f(No,n,e,i),c);case 1:return d(wo,t,o,e,i,c);default:return d(So,t,o,a,i,f(No,n,e,c))}})),Do=t((function(n,e,r){var t=f(No,n,e,r);return-1!==t.$||t.a?t:d(wo,1,t.b,t.c,t.d,t.e)})),zo=function(n){return f(Wr,r((function(n,e){return f(Do,n.a,n.b,e)})),Mo,n)},_o=t((function(n,e,r){for(;;){if(-2===r.$)return e;var t=r.e,o=n,a=f(n,r.b,r.c,f(_o,n,e,r.d));n=o,e=a,r=t}})),Ro=i((function(n,e,o,a,i,c){var l=f(_o,t((function(r,t,a){n:for(;;){var i=a.a,c=a.b;if(i.b){var l=i.a,u=l.a,d=l.b,b=i.b;if(0>T(u,r)){r=r,t=t,a=w(b,f(n,u,d,c));continue n}return T(u,r)>0?w(i,f(o,r,t,c)):w(b,s(e,u,d,t,c))}return w(i,f(o,r,t,c))}})),w(Nr(a),c),i),u=l.a,d=l.b;return f(Wr,r((function(e,r){return f(n,e.a,e.b,r)})),d,u)})),Ao=r((function(n,e){return{dD:e,dL:n}})),ko=t((function(n,e,r){return u(Ot,(function(n){return w(e,n)}),f(Ee,r.a?Fe:Be,r.b,(function(r){return u(bo,n,u(Ao,e,r))})))})),Ko=r((function(n,e){return f(_o,Do,e,n)})),Vo=t((function(n,e,r){var a=t((function(e,r,t){var o=t.c;return S(t.a,t.b,u(yr,f(ko,n,e,r),o))})),i=t((function(n,e,r){var t=r.b,o=r.c;return S(u(yr,e,r.a),t,o)})),c=o((function(n,e,r,t){var o=t.c;return S(t.a,f(Do,n,e,t.b),o)})),l=u(Ut,yo,e),s=b(Ro,i,c,a,r.ej,zo(l),S(D,Mo,D)),d=s.b,m=s.c;return u(Wt,(function(n){return Et(u(Co,l,u(Ko,d,zo(n))))}),u(Wt,(function(){return Xt(m)}),Xt(u(Ut,uo,s.a))))})),Bo=t((function(n,e,r){var t=n(e);return t.$?r:u(yr,t.a,r)})),Fo=r((function(n,e){return f(It,Bo(n),D,e)}));Vn["Browser.Events"]=Bn(To,Vo,t((function(n,e,r){var t=e.dL,o=e.dD,a=u(Fo,(function(n){var e=n.b.c;return C(n.a,t)?u(je,e,o):Er}),r.ex);return u(Wt,(function(){return Et(r)}),Xt(u(Ut,qt(n),a)))})),0,r((function(n,e){return f(Lo,e.a,e.b,u(yt,n,e.c))})));var Eo,jo,Ho,Io,Uo,Wo,Oo,Yo,Xo,qo,Go,Jo,Qo,Zo,na,ea,ra,ta,oa,aa,ia,ca,la,ua,fa,sa,da,ba,ma,va,pa,ga,ha,xa,La,Ca,Pa,Ma=Hn("Browser.Events"),Ta=t((function(n,e,r){return Ma(f(Lo,n,e,r))})),ya=u(Ta,0,"click"),wa=u(Ta,0,"keydown"),Sa=u(Ta,0,"keyup"),$a=u(Ta,0,"mousedown"),Na=u(Ta,0,"mousemove"),Da=u(Ta,0,"mouseup"),za=rn,_a=tn,Ra=r((function(n,e){return n(e?1:0)})),Aa=function(n){var e=void 0!==Zn.hidden?{fa:"hidden",eT:"visibilitychange"}:void 0!==Zn.mozHidden?{fa:"mozHidden",eT:"mozvisibilitychange"}:void 0!==Zn.msHidden?{fa:"msHidden",eT:"msvisibilitychange"}:void 0!==Zn.webkitHidden?{fa:"webkitHidden",eT:"webkitvisibilitychange"}:{fa:"hidden",eT:"visibilitychange"};return f(Ta,0,e.eT,u(yt,Ra(n),u(Mt,"target",u(Mt,e.fa,_a))))},ka=an,Ka=function(n){return{$:3,b:n}},Va=Gn("touchCancel",Ka(u(Pt,(function(n){return u(Pt,(function(e){return u(Pt,(function(r){return St({bp:r,cS:e,cT:n})}),u(Mt,"identifier",za))}),u(Mt,"pageX",Tt))}),u(Mt,"pageY",Tt)))),Ba=Gn("touchEnd",Ka(u(Pt,(function(n){return u(Pt,(function(e){return u(Pt,(function(r){return St({bp:r,cS:e,cT:n})}),u(Mt,"identifier",za))}),u(Mt,"pageX",Tt))}),u(Mt,"pageY",Tt)))),Fa=Gn("touchMove",Ka(u(Pt,(function(n){return u(Pt,(function(e){return u(Pt,(function(r){return St({bp:r,cS:e,cT:n})}),u(Mt,"identifier",za))}),u(Mt,"pageX",Tt))}),u(Mt,"pageY",Tt)))),Ea=Gn("touchStart",Ka(u(Pt,(function(n){return u(Pt,(function(e){return u(Pt,(function(r){return St({bp:r,cS:e,cT:n})}),u(Mt,"identifier",za))}),u(Mt,"pageX",Tt))}),u(Mt,"pageY",Tt)))),ja=oo(u(yr,(Pa=u(Rt,mt(.001),(function(n){return{$:6,a:n}})),xo(io(Pa))),u(Ut,ao(zt),R([(Eo=to,f(Ta,1,"resize",u(Mt,"target",f(wt,Eo,u(Mt,"innerWidth",za),u(Mt,"innerHeight",za))))),Sa(u(yt,no(!1),u(Mt,"key",ka))),wa(u(yt,no(!0),u(Mt,"key",ka))),Aa(_t),ya(St({$:5})),$a(St(eo(!0))),Da(St(eo(!1))),Na(f(wt,ro,u(Mt,"pageX",Tt),u(Mt,"pageY",Tt))),Ea((function(n){return{$:7,a:n}})),Fa((function(n){return{$:8,a:n}})),Ba((function(n){return{$:9,a:n}})),Va((function(n){return{$:10,a:n}}))])))),Ha={$:1},Ia=function(n){return{$:2,a:n}},Ua=r((function(n,e){return{$:0,a:n,b:e}})),Wa=function(n){return n.b.k.a},Oa=function(n){var e=n.b.D;return e.b?Fr(u(Ua,n.a,{k:e.a,D:e.b,p:N(n.b.p,R([n.b.k]))})):Er},Ya=r((function(n,e){return $(e,{co:n})})),Xa=r((function(n,e){return $(e,e.I.co?{I:u(Ya,!1,e.I),a8:e.a8+n}:{a8:e.a8+n})})),qa=r((function(n,e){return e.$?n:e.a})),Ga=t((function(n,e,r){var t=r.a,o=r.b;switch(t.$){case 1:return r;case 2:var a=t.a.dd;return(T(a+e,Wa(r).a8)>0?u(Rt,Oa,qa(u(Ua,Ha,o))):At)(u(Ua,Ia({dd:a+e}),o));default:var i=o.k,c=i.b,l=u(Xa,e,i.a);return u(Ua,t,{k:w(l,u(n,l,c)),D:D,p:N(o.p,R([o.k]))})}})),Ja=r((function(n,e){n:for(;;){if(n>0){if(e.b){n-=1,e=e.b;continue n}return e}return e}})),Qa=t((function(n,e,r){n:for(;;){if(n>0){if(e.b){var t=e.a;n-=1,e=e.b,r=u(yr,t,r);continue n}return r}return r}})),Za=r((function(n,e){return Qr(f(Qa,n,e,D))})),ni=t((function(n,e,r){if(e>0){var t=w(e,r);n:for(;;){e:for(;;){if(!t.b.b)return r;if(!t.b.b.b){if(1===t.a)break n;break e}switch(t.a){case 1:break n;case 2:var o=t.b;return R([o.a,o.b.a]);case 3:if(t.b.b.b.b){var a=t.b,i=a.b;return R([a.a,i.a,i.b.a])}break e;default:if(t.b.b.b.b&&t.b.b.b.b.b){var c=t.b,l=c.b,s=l.b,d=s.b,b=d.b;return u(yr,c.a,u(yr,l.a,u(yr,s.a,u(yr,d.a,n>1e3?u(Za,e-4,b):f(ni,n+1,e-4,b)))))}break e}}return r}return R([t.b.a])}return D})),ei=r((function(n,e){return f(ni,0,n,e)})),ri=r((function(n,e){var r=e.b.D,t=N(e.b.p,N(R([e.b.k]),r)),o=u(ei,n,t),a=u(Ja,n,t);if(a.b)return u(Ua,Ha,{k:a.a,D:a.b,p:o});var i=Qr(o);return i.b?u(Ua,Ha,{k:i.a,D:D,p:Qr(i.b)}):e})),ti={$:0},oi=r((function(n,e){switch(n.$){case 1:return function(n){var e=n.b.p,r=n.b.D;return e.b?u(Ua,Ha,{k:e.a,D:N(e.b,N(R([n.b.k]),r)),p:D}):n}(e);case 2:return u(qa,e,function(n){var e=n.b.k,r=n.b.D,t=Qr(n.b.p);if(t.b){var o=t.b;return Fr(u(Ua,Ha,{k:t.a,D:u(yr,e,r),p:Qr(o)}))}return Er}(e));case 3:return u(Ua,Ha,e.b);case 4:return function(n){return u(Ua,ti,n.b)}(e);case 5:return function(n){var e=n.b;return u(Ua,Ia({dd:Wa(n).a8}),e)}(e);case 6:return u(qa,e,Oa(e));case 7:return function(n){var e=n.b.p,r=n.b.k,t=Qr(n.b.D);if(t.b){var o=t.b;return u(Ua,Ha,{k:t.a,D:D,p:N(e,N(R([r]),Qr(o)))})}return n}(e);default:return u(ri,n.a,e)}})),ai=r((function(n,e){var r=e.b;return w(n(e.a),r)})),ii=o((function(n,e,r,t){return{co:t,aW:r,bK:n,bL:e}})),ci=Mo,li={cj:!1,aW:!1,cu:!1,O:ci,al:!1,a5:!1,da:!1,db:!1,ce:!1},ui=r((function(n,e){return $(e,{aW:n})})),fi=t((function(n,e,r){return $(r,{bK:n,bL:e})})),si=function(n){if(-1===n.$&&-1===n.d.$&&-1===n.e.$){if(-1!==n.e.d.$||n.e.d.a){var e=n.d,r=n.e;return i=r.b,c=r.c,t=r.d,f=r.e,d(wo,1,n.b,n.c,d(wo,0,e.b,e.c,e.d,e.e),d(wo,0,i,c,t,f))}var t,o=n.d,a=n.e,i=a.b,c=a.c,l=(t=a.d).d,u=t.e,f=a.e;return d(wo,0,t.b,t.c,d(wo,1,n.b,n.c,d(wo,0,o.b,o.c,o.d,o.e),l),d(wo,1,i,c,u,f))}return n},di=function(n){if(-1===n.$&&-1===n.d.$&&-1===n.e.$){if(-1!==n.d.d.$||n.d.d.a){var e=n.d,r=n.e;return u=r.b,f=r.c,s=r.d,b=r.e,d(wo,1,t=n.b,o=n.c,d(wo,0,e.b,e.c,e.d,c=e.e),d(wo,0,u,f,s,b))}var t=n.b,o=n.c,a=n.d,i=a.d,c=a.e,l=n.e,u=l.b,f=l.c,s=l.d,b=l.e;return d(wo,0,a.b,a.c,d(wo,1,i.b,i.c,i.d,i.e),d(wo,1,t,o,c,d(wo,0,u,f,s,b)))}return n},bi=c((function(n,e,r,t,o,a,i){if(-1!==a.$||a.a){n:for(;;){if(-1===i.$&&1===i.a){if(-1===i.d.$){if(1===i.d.a)return di(e);break n}return di(e)}break n}return e}return d(wo,r,a.b,a.c,a.d,d(wo,0,t,o,a.e,i))})),mi=function(n){if(-1===n.$&&-1===n.d.$){var e=n.a,r=n.b,t=n.c,o=n.d,a=o.d,i=n.e;if(1===o.a){if(-1!==a.$||a.a){var c=si(n);if(-1===c.$){var l=c.e;return d(So,c.a,c.b,c.c,mi(c.d),l)}return Po}return d(wo,e,r,t,mi(o),i)}return d(wo,e,r,t,mi(o),i)}return Po},vi=r((function(n,e){if(-2===e.$)return Po;var r=e.a,t=e.b,o=e.c,a=e.d,i=e.e;if(0>T(n,t)){if(-1===a.$&&1===a.a){var c=a.d;if(-1!==c.$||c.a){var l=si(e);if(-1===l.$){var f=l.e;return d(So,l.a,l.b,l.c,u(vi,n,l.d),f)}return Po}return d(wo,r,t,o,u(vi,n,a),i)}return d(wo,r,t,o,u(vi,n,a),i)}return u(pi,n,m(bi,n,e,r,t,o,a,i))})),pi=r((function(n,e){if(-1===e.$){var r=e.a,t=e.b,o=e.c,a=e.d,i=e.e;if(C(n,t)){var c=function(n){for(;;){if(-1!==n.$||-1!==n.d.$)return n;n=n.d}}(i);return-1===c.$?d(So,r,c.b,c.c,a,mi(i)):Po}return d(So,r,t,o,a,u(vi,n,i))}return Po})),gi=r((function(n,e){var r=u(vi,n,e);return-1!==r.$||r.a?r:d(wo,1,r.b,r.c,r.d,r.e)})),hi=r((function(n,e){return{dt:-e/2,cw:e,al:-n/2,a5:n/2,bF:e/2,dl:n}})),xi=r((function(n,e){return{S:e,X:n}})),Li=f(wt,r((function(n,e){return w(n,e)})),u(Mt,"A1",ka),u(Mt,"A2",ka)),Ci=dn,Pi=s(Ci,t((function(n,e,r){return S(n,e,r)})),u(Mt,"A1",Tt),u(Mt,"A2",Tt),u(Mt,"A3",Tt)),Mi=f(wt,r((function(n,e){return w(n,e)})),u(Mt,"A1",ka),u(Mt,"A2",Pi)),Ti=f(wt,xi,u(Mt,"floats",Ka(Mi)),u(Mt,"colors",Ka(Li))),yi=bn,wi=r((function(n,e){return{S:e,aJ:"",X:n,av:""}})),Si=u(wi,D,D),$i=r((function(n,e){return e.$?Er:n(e.a)})),Ni=r((function(n,e){return e.$?Rr(e.a):n(e.a)})),Di=o((function(n,e,r,t){return{fc:e,fk:n,fq:r,fE:t}})),zi=Ie,_i=r((function(n,e){return e.$?Rr(n):Vr(e.a)})),Ri=He,Ai=function(n){return n.b?Fr(n.a):Er},ki=r((function(n,e){return e.$?Er:Fr(n(e.a))})),Ki=r((function(n,e){return e.$?Rr(e.a):Vr(n(e.a))})),Vi=r((function(n,e){return Jr(e)-Jr(n)})),Bi=t((function(n,e,r){var t=Jr(r);return 1>T(Jr(n),t)&&1>T(t,Jr(e))})),Fi=r((function(n,e){var r=f(Bi,"0","9",e)?Vr(u(Vi,"0",e)):f(Bi,"a","z",e)?Vr(10+u(Vi,"a",e)):f(Bi,"A","Z",e)?Vr(10+u(Vi,"A",e)):Rr({$:0,a:e});return u(Ni,(function(r){return 0>T(r,n)?Vr(r):Rr({$:1,a:e})}),r)})),Ei=r((function(n,e){var r=Zr(e);if(1===r.$)return Vr(0);var t=r.a,o=t.b;return u(Ni,(function(e){return u(Ni,(function(r){return Vr(e+r*n)}),u(Ei,n,o))}),u(Fi,n,t.a))})),ji=function(n){for(var e=n.length,r=Array(e),t=0;e>t;){var o=n.charCodeAt(t);55296>o||o>56319?(r[e-t]=n[t],t++):(r[e-t]=n[t+1],r[e-++t]=n[t-1],t++)}return r.join("")},Hi=r((function(n,e){return 2>n||n>36?Rr({$:2,a:n}):u(Ei,n,ji(e))})),Ii=Hi(16),Ui=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),Wi=t((function(n,e,r){return s(Ui,n,e,r,1)})),Oi=o((function(n,e,r,t){return s(Ui,n,e,r,t)})),Yi=V,Xi=U,qi=r((function(n,e){var r=u(Yi,10,n);return Xi(e*r)/r})),Gi=q,Ji=function(n){return f(Gi,yr,D,n)},Qi=(jo=function(n){var e=Ji(n);if(e.b&&!e.b.b){var r=e.a;return A(R([r,r])).join("")}return n},u(Rt,(function(n){return n.toLowerCase()}),u(Rt,(function(n){return u(ki,(function(e){return f(zi,1,e,n)}),u(Ri,{eQ:!1,fm:!1},"^#?(?:(?:([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2}))|(?:([a-f\\d])([a-f\\d])([a-f\\d]))|(?:([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2}))|(?:([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d])))$"))}),u(Rt,$i(Ai),u(Rt,ki((function(n){return n.fE})),u(Rt,ki(Fo(At)),u(Rt,_i("Parsing hex regex failed"),Ni((function(n){var e=u(Ut,u(Rt,jo,u(Rt,Ii,Ki(at))),n);n:for(;;){if(e.b&&!e.a.$&&e.b.b&&!e.b.a.$&&e.b.b.b&&!e.b.b.a.$){if(e.b.b.b.b){if(e.b.b.b.a.$||e.b.b.b.b.b)break n;var r=e.b,t=r.b;return Vr(s(Oi,e.a.a/255,r.a.a/255,t.a.a/255,u(qi,2,t.b.a.a/255)))}var o=e.b;return Vr(f(Wi,e.a.a/255,o.a.a/255,o.b.a.a/255))}break n}return Rr("Parsing ints from hex failed")}))))))))),Zi=r((function(n,e){return w(e.a,n(e.b))})),nc=s(Ui,1,1,1,1),ec=r((function(n,e){return e.$?n:e.a})),rc=u(Rt,yi(Ti),u(Rt,Ki((function(n){return{S:u(Ut,Zi(u(Rt,Qi,ec(nc))),n.S),aJ:"",X:n.X,av:""}})),ec(Si))),tc=function(n){return f(Wr,r((function(n,e){return f(Tn,n.a,n.b,e)})),{},n)},oc=Mn,ac=function(n){var e=n.b;return tc(R([w("A1",oc(n.a)),w("A2",oc(e))]))},ic=Mn,cc=function(n){var e=n.b,r=n.c;return tc(R([w("A1",ic(n.a)),w("A2",ic(e)),w("A3",ic(r))]))},lc=function(n){var e=n.b;return tc(R([w("A1",oc(n.a)),w("A2",cc(e))]))},uc=r((function(n,e){return f(Wr,function(n){return r((function(e,r){return r.push(n(e)),r}))}(n),[],e)})),fc=X,sc=function(n){return u(fc,n,"")},dc=t((function(n,e,r){return n>0?f(dc,n>>1,N(e,e),1&n?N(r,e):r):r})),bc=r((function(n,e){return f(dc,n,e,"")})),mc=t((function(n,e,r){return N(u(bc,n-kt(r),sc(e)),r)})),vc=function(n){return 0>n||n>1114111?"�":n>65535?String.fromCharCode(Math.floor((n-=65536)/1024)+55296,n%1024+56320):String.fromCharCode(n)},pc=B,gc=function(n){var e=function(n){return 10>n?Hr(n):sc(vc(87+n))};return 16>n?e(n):N(gc(n/16|0),e(u(pc,16,n)))},hc=u(Rt,gc,u(mc,2,"0")),xc=function(n){return{aU:n.d,cn:n.c,cv:n.b,c3:n.a}},Lc=function(n){var e=xc(n),r=e.c3,t=e.cv,o=e.cn;return u(Ir,"",u(yr,"#",u(Ut,u(Rt,Xi,hc),R([255*r,255*t,255*o]))))},Cc=u(Rt,(function(n){return{S:u(Ut,Zi(Lc),n.S),X:n.X}}),u(Rt,(function(n){return tc(R([w("floats",u(uc,lc,n.X)),w("colors",u(uc,ac,n.S))]))}),jr(0))),Pc=function(n){return 0>n?-n:n},Mc=function(n){if(0===n.length||/[\sxbo]/.test(n))return Er;var e=+n;return e==e?Fr(e):Er},Tc=t((function(n,e,r){return u(qa,NaN,Mc(u(n,e,r)))})),yc=function(n){return!n},wc=r((function(n,e){for(;;){if(!e.b)return!1;var r=e.b;if(n(e.a))return!0;n=n,e=r}})),Sc=r((function(n,e){var r=u(wc,(function(n){return"0"!==n&&"."!==n}),Ji(e));return N(n&&r?"-":"",e)})),$c=nn,Nc=function(n){var e=n.a,r=n.b;if("9"===e){var t=Zr(r);return 1===t.$?"01":u(fc,"0",Nc(t.a))}var o=Jr(e);return o>=48&&57>o?u(fc,vc(o+1),r):"0"},Dc=function(n){return n===1/0||n===-1/0},zc=Y,_c=t((function(n,e,r){return N(r,u(bc,n-kt(r),sc(e)))})),Rc=function(n){var e=u(Ur,".",n);return e.b?w(e.a,e.b.b?e.b.a:"0"):w("0","0")},Ac=t((function(n,e,r){if(Dc(r)||zc(r))return $c(r);var t=0>r,o=Rc(function(n){var e=u(Ur,"e",$c(Pc(n)));if(e.b){if(e.b.b){var r=e.a,t=e.b.a,o=u(qa,0,Bt(u(Ft,"+",t)?u(Vt,1,t):t)),a=Rc(r),i=N(a.a,a.b),c=0>o?u(qa,"0",u(ki,(function(n){return n.a+"."+n.b}),u(ki,ai(sc),Zr(N(u(bc,Pc(o),"0"),i))))):f(_c,o+1,"0",i);return N(0>n?"-":"",c)}return N(0>n?"-":"",r=e.a)}return""}(Pc(r))),a=o.a,i=o.b,c=kt(a)+e,l=N(u(bc,1-c,"0"),f(_c,c,"0",N(a,i))),s=kt(l),d=u(bt,1,c),b=u(n,t,f(Kt,d,s,l)),m=f(Kt,0,d,l),v=b?ji(u(qa,"1",u(ki,Nc,Zr(ji(m))))):m,p=kt(v),g="0"===v?v:e>0?0>T(e,kt(i))?f(Kt,0,p-e,v)+"."+f(Kt,p-e,p,v):N(a+".",f(_c,e,"0",i)):N(v,u(bc,Pc(e),"0"));return u(Sc,t,g)})),kc=Ac(r((function(n,e){var r,t=Zr(e);return 1!==t.$&&("5"===t.a.a?""!==t.a.b||!n:(r=Jr(t.a.a))>53&&n||r>=53&&!n)}))),Kc=Tc(kc),Vc=t((function(n,e,r){var t=u(ot,10,Pc(e-n));return u(Kc,0>t?3:1>t?2:2>t?1:0,r)})),Bc=r((function(n,e){switch(n.$){case 2:var r=rc(e.av);return $(r,{aJ:r.aJ,av:r.av});case 3:return $(e,{av:n.a});case 4:return $(e,{aJ:Cc(e)});case 0:var t=n.a,o=n.b;return $(e,{X:u(Ut,(function(n){var e=n.a,r=n.b,a=r.a,i=r.c;return C(e,t)?w(e,S(a,f(Vc,a,i,o),i)):n}),e.X)});default:return t=n.a,o=n.b,$(e,{S:u(Ut,(function(n){var e=n.a;return C(e,t)?w(e,o):n}),e.S)})}})),Fc=r((function(n,e){return f(Do,n,0,e)})),Ec=r((function(n,e){return u(gi,n,e)})),jc=t((function(n,e,r){var t=u(n?Fc:Ec,e,r.O);switch(e){case" ":return $(r,{O:t,db:n});case"Enter":return $(r,{cu:n,O:t});case"Shift":return $(r,{O:t,da:n});case"Backspace":return $(r,{cj:n,O:t});case"ArrowUp":return $(r,{O:t,ce:n});case"ArrowDown":return $(r,{aW:n,O:t});case"ArrowLeft":return $(r,{O:t,al:n});case"ArrowRight":return $(r,{O:t,a5:n});default:return $(r,{O:t})}})),Hc=r((function(n,e){switch(n.$){case 1:var r=n.a.fP;return $(e,{af:u(hi,r.dl,r.cw)});case 2:return $(e,{af:u(hi,n.a,n.b)});case 3:return $(e,{bq:li,I:s(ii,e.I.bK,e.I.bL,!1,!1)});case 0:return $(e,{bq:f(jc,n.a,n.b,e.bq)});case 4:return $(e,{I:f(fi,e.af.al+n.a,e.af.bF-n.b,e.I)});case 5:return $(e,{I:u(Ya,!0,e.I)});case 6:return $(e,{I:u(ui,n.a,e.I)});case 7:case 8:return $(e,{ag:f(Wr,(function(n){return u(Do,n.bp,{bK:e.af.al+n.cS,bL:e.af.bF-n.cT})}),e.ag,n.a)});case 9:case 10:return $(e,{ag:f(Wr,(function(n){return gi(n.bp)}),e.ag,n.a)});default:return $(e,{aV:u(Bc,n.a,e.aV)})}})),Ic=r((function(n,e){var r=e.b;return u(Ua,e.a,$(r,{k:u(ai,Hc(n),r.k)}))})),Uc=t((function(n,e,r){var t=r.b,o=t.k;return u(Ua,r.a,$(t,{k:u(Zi,u(n,o.a,e),o)}))})),Wc=o((function(n,e,r,t){switch(r.$){case 0:return t;case 1:return $(t,{bc:r.a});case 2:return $(t,{bj:!1});case 3:return $(t,{bj:!0});case 4:return $(t,{R:f(Uc,e,r.a,t.R)});case 5:return $(t,{R:u(oi,r.a,t.R)});case 7:return $(t,{R:u(Ic,r.a,t.R)});default:return $(t,{R:f(Ga,n,r.a,t.R)})}})),Oc=(Ca=function(){return{eu:(n=Be.body,e=Be.documentElement,{dl:Math.max(n.scrollWidth,n.offsetWidth,e.scrollWidth,e.offsetWidth,e.clientWidth),cw:Math.max(n.scrollHeight,n.offsetHeight,e.scrollHeight,e.offsetHeight,e.clientHeight)}),fP:{bK:Fe.pageXOffset,bL:Fe.pageYOffset,dl:Be.documentElement.clientWidth,cw:Be.documentElement.clientHeight}};var n,e},wn((function(n){Ke((function(){n(yn(Ca()))}))}))),Yc=r((function(n,e){return{aV:e,cs:n.cs,bq:li,I:s(ii,0,0,!1,!1),af:u(hi,600,600),a8:0,ag:Mo}})),Xc=r((function(n,e){return u(Ua,ti,{k:w(n,e(n)),D:D,p:D})})),qc=In,Gc=qc(D),Jc=function(n){return{$:11,a:n}},Qc=function(n){return{$:4,a:n}},Zc=function(n){return{$:5,a:n}},nl={$:2},el={$:0},rl=function(n){return{$:1,a:n}},tl={$:3},ol=r((function(n){return n})),al=te("button"),il=function(n){return n?"Level Editor":"Configurations"},cl=function(n){return u(qa,0,Ai(u(Fo,(function(e){return C(il(e),n)?Fr(e):Er}),R([0,1]))))},ll=ae,ul=ll,fl=ie,sl=r((function(n,e){return u(fl,n,{$:0,a:e})})),dl=r((function(n,e){return f(It,Mt,e,n)})),bl=u(dl,R(["target","value"]),ka),ml=function(n){return u(sl,"click",St(n))},vl=te("option"),pl=te("select"),gl=ce,hl=gl,xl=ee,Ll=xl,Cl=r((function(n,e){return u(le,n,oc(e))})),Pl=Cl("value"),Ml=r((function(n,e){return{$:1,a:n,b:e}})),Tl=r((function(n,e){return{$:0,a:n,b:e}})),yl=s(Ui,0,0,0,1),wl=u(al,R([u(hl,"cursor","pointer"),ml({$:4})]),R([Ll("Export Configurations as json")])),Sl=te("h3"),$l=te("p"),Nl=Mn,Dl=r((function(n,e){return u(le,n,Nl(e))})),zl=Dl("readOnly"),_l=te("textarea"),Rl=function(n){return u(Nt,D,R([u(_l,R([zl(!0)]),R([Ll(n.aJ)]))]))},Al=function(n){return u(Nt,D,R([u(Sl,D,R([Ll("Export Configurations")])),u($l,D,R([wl])),u($l,D,R([Rl(n)]))]))},kl=Cl("htmlFor"),Kl=te("hr"),Vl=Cl("id"),Bl=u(al,R([u(hl,"cursor","pointer"),ml({$:2})]),R([Ll("Import Configurations")])),Fl=function(n){return{$:3,a:n}},El=function(n){return w(n,!0)},jl=r((function(n,e){return u(fl,n,{$:1,a:e})})),Hl=function(n){return u(jl,"input",u(yt,El,u(yt,n,bl)))},Il=function(n){return u(Nt,D,R([u(_l,R([Hl(Fl)]),R([Ll(n.av)]))]))},Ul=function(n){return u(Nt,D,R([u(Sl,D,R([Ll("Import Configurations")])),u($l,D,R([Il(n)])),u($l,D,R([Bl]))]))},Wl=te("input"),Ol=te("label"),Yl=Cl("max"),Xl=Cl("min"),ql=Cl("name"),Gl=te("span"),Jl=Cl("type"),Ql=function(n){return{$:0,a:n}},Zl=function(n){return Or(n.b.p)},nu=function(n){return u(Wl,R([u(hl,"position","absolute"),Jl("range"),u(hl,"width","100%"),Xl("0"),Yl(Hr((e=n,r=e.b.D,Or(e.b.p)+1+Or(r)-1))),Pl(Hr(Zl(n))),Hl(u(Rt,Bt,u(Rt,qa(0),Ql)))]),D);var e,r},eu=function(n){var e=n.b.k,r=n.b.D,t=u(qa,e,Ai(n.b.p)).a.a8,o=u(qa,e,Ai(Qr(r))).a.a8-t,a=st(o/1);return u(Nt,R([u(hl,"position","absolute"),u(hl,"width","100%"),u(hl,"height","20px")]),u(Ut,(function(n){return u(Nt,R([u(hl,"position","absolute"),u(hl,"background-color","yellow"),u(hl,"width","1px"),u(hl,"height","20px"),u(hl,"left",$c(100*n*1/o)+"%")]),D)}),u(qr,0,a)))},ru={$:1},tu={$:7},ou={$:6},au={$:2},iu={$:3},cu={$:5},lu={$:4},uu=r((function(n,e){return u(al,R([u(hl,"display","inline-block"),u(hl,"width","30px"),u(hl,"height","30px"),u(hl,"margin","2px"),u(hl,"padding","0px"),u(hl,"top","0px"),u(hl,"font-size","20px"),ml(n)]),R([Ll(e)]))})),fu=function(n){return u(Nt,R([u(hl,"width","100%")]),R([(e=n,r=e.a,u(Nt,D,R([u(uu,ru,"⏮️"),u(uu,au,"◀️"),1===r.$?u(uu,cu,"▶️"):u(uu,iu,"⏸️"),r.$?u(uu,lu,"⏺️"):u(uu,iu,"⏹"),u(uu,ou,"⏯️"),u(uu,tu,"⏭️")]))),u(Nt,D,R([eu(n),nu(n)]))]));var e,r},su=t((function(n,e,t){var o,a,i,c,l=t.R.b.k.b,f=u(Nt,R([u(hl,"margin-left","0px")]),R([u(pl,R([(o=u(Rt,cl,rl),u(sl,"change",u(yt,o,bl))),Pl(il(t.bc)),u(hl,"width","200px"),u(hl,"height","40px"),u(hl,"font-size","20px")]),u(Ut,(function(n){return u(vl,R([Pl(il(n))]),R([Ll(il(n))]))}),R([0,1])))])),s=r((function(n,e){return u(al,R([u(hl,"font-size","30px"),u(hl,"width","40px"),u(hl,"height","40px"),ml(n)]),R([Ll(e)]))})),d=Wa(t.R),b=t.bc?u(ul,Qc,u(e,d,l)):u(Nt,D,R([u(ul,Zc,fu(t.R)),u(ul,u(Rt,Jc,zt),(a=d.aV,i=function(n){var e=n.a,r=n.b,t=r.a,o=r.b,a=r.c;return u(Nt,R([u(hl,"margin-top","15px")]),R([u(Nt,D,R([u(Ol,R([kl(e)]),R([Ll(e),Ll(": "),u(Gl,R([u(hl,"font-family","monospace"),u(hl,"font-weight","bold")]),R([Ll($c(o))]))]))])),u(Wl,R([Jl("range"),Vl(e),ql(e),Xl($c(t)),Yl($c(a)),Hl((function(n){return u(Tl,e,u(qa,0,Mc(n)))})),u(Cl,"step","any"),u(hl,"width","200px"),Pl($c(o))]),D)]))},c=function(n){var e=n.a,r=n.b;return u(Nt,R([u(hl,"margin-top","15px")]),R([u(Nt,D,R([u(Ol,R([kl(e)]),R([Ll(e)]))])),u(Wl,R([Jl("color"),u(hl,"width","200px"),u(hl,"height","30px"),Vl(e),ql(e),Hl((function(n){return u(Ml,e,u(ec,yl,Qi(n)))})),Pl(Lc(r))]),D)]))},u(Nt,R([u(hl,"margin-left","20px"),u(hl,"height","100%"),u(hl,"overflow","scroll")]),R([u(Nt,D,u(Ut,i,a.X)),u(Nt,D,u(Ut,c,a.S)),u(Kl,D,D),Al(a),Ul(a)]))))])),m=u(Nt,R([u(hl,"position","fixed"),u(hl,"top","0px"),u(hl,"left","0px"),u(hl,"width",$c(250)+"px"),u(hl,"height",$c(d.af.cw)+"px"),u(hl,"font-family",'-apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif'),u(hl,"font-size","16px")]),R(t.bj?[u(Nt,R([u(hl,"height","100px")]),R([u(s,nl,"✕"),f])),u(Nt,R([u(hl,"height",$c(d.af.cw-100)+"px")]),R([b]))]:[u(s,tl,"≡")])),v=u(Nt,R([u(hl,"position","fixed"),u(hl,"top","0px"),u(hl,"left","0px"),u(hl,"width",$c(d.af.dl)+"px"),u(hl,"height",$c(d.af.cw)+"px"),u(hl,"font-size","16px")]),R([u(ul,ol(el),u(n,d,l))]));return u(Nt,R([u(hl,"touch-action","none"),u(hl,"user-select","none")]),R([v,m]))})),du=i((function(n,e,t,o,a,i){return Zt({fd:function(n){return w({bc:0,bj:!1,R:u(Xc,u(Yc,n,t),o),dk:0},u(Qt,u(Rt,Dt,zt),Oc))},fF:function(n){return 1===n.dk?u(ao,zt,Aa(_t)):ja},fM:r((function(n,r){return w(s(Wc,e,i,n,r),Gc)})),fO:u(su,n,a)})})),bu=o((function(n,e,o,a){return b(du,n,e,o,a,r((function(){return u(Nt,D,D)})),t((function(n,e,r){return r})))})),mu={$:0},vu={$:0},pu=vu,gu=r((function(n,e){return{$:0,a:n,b:e}})),hu=r((function(n,e){return{$:0,a:n,b:e}})),xu=r((function(n,e){return{bV:n,ei:e}})),Lu=wi,Cu=Lu,Pu=3.141592653589793,Mu=function(n){return n/255},Tu=t((function(n,e,r){return s(Ui,Mu(n),Mu(e),Mu(r),1)})),yu=u(Cu,R([w("camera distance",S(3,20,60)),w("camera azimuth",S(-3.141592653589793,0,Pu)),w("camera elevation",S(-1.5707963267948966,-.15,1.5707963267948966)),w("cubes side length",S(.5,.95,1)),w("duration of step animation",S(.1,.23,1)),w("duration of mistake animation",S(.1,.5,1)),w("height of following lights",S(.1,5,8)),w("lumens of following lights",S(4e4,1e5,12e4))]),R([w("background color",f(Tu,223,224,226)),w("color 1",f(Tu,244,88,67)),w("color 2",f(Tu,255,200,40)),w("path color",f(Tu,244,88,67)),w("board color",f(Tu,165,166,169)),w("wall color",f(Tu,38,48,64))])),wu=function(n){return{$:0,a:n}},Su=function(n){return{$:1,a:n}},$u=w(3,3),Nu=function(n){var e=n.a,r=n.b;return T(e,-4)>-1&&3>=e&&T(r,-4)>-1&&3>=r},Du=r((function(n,e){return u(wc,(function(e){return C(e,n)}),e)})),zu=r((function(n,e){return u(Du,n,u(yr,e.a,e.b))})),_u=function(n){return C(n,u(hu,2,0))},Ru=r((function(n,e){var r=e.a,t=e.b;switch(n){case 0:return w(r,t+1);case 1:return w(r,t-1);case 2:return w(r-1,t);default:return w(r+1,t)}})),Au=function(n){return n?0:1},ku=function(n){var e=n.a,r=n.b;switch(e){case 0:return u(hu,e,r);case 1:return u(hu,2,r);default:return u(hu,1,Au(r))}},Ku=function(n){var e=n.a,r=n.b;switch(e){case 0:return u(hu,2,Au(r));case 1:return u(hu,e,r);default:return u(hu,0,r)}},Vu=function(n){switch(n){case 0:return u(Rt,ku,u(Rt,ku,ku));case 1:return ku;case 2:return u(Rt,Ku,u(Rt,Ku,Ku));default:return Ku}},Bu=r((function(n,e){var r=e.b;return u(gu,u(Ru,n,e.a),u(Vu,n,r))})),Fu=r((function(n,e){var r=u(Bu,n,e.bV),t=r.a,o=r.b,a=e.ei;if(a.b.b){var i=a.a,c=a.b,l=c.a,f=c.b;if(C(l,t))return Su(u(xu,r,w(l,f)));if(Nu(t)){if(u(zu,t,e.ei))return wu(3);var s=u(xu,r,w(t,u(yr,i,u(yr,l,f))));return C(t,$u)?64===function(n){return 1+Or(n.b)}(s.ei)&&_u(o)?{$:2,a:s}:wu(0):_u(o)?wu(1):Su(s)}return wu(2)}return i=a.a,Nu(t)?Su(u(xu,r,w(t,R([i])))):wu(2)})),Eu=a((function(n,e,r,t,o){var a;return o.H.$?o:$(o,{H:(a={bx:t,cd:r,Y:n.a8,dj:e},{$:2,a:a})})})),ju=i((function(n,e,r,t,o,a){var i;return a.H.$?a:$(a,{H:(i={cN:o,bx:r,cd:e,Y:n.a8,eG:t},{$:1,a:i})})})),Hu=o((function(n,e,r,t){var o=u(Fu,n,t.ah);switch(o.$){case 0:switch(o.a){case 3:case 2:return t;case 1:return d(Eu,r,1,e,n,t);default:return d(Eu,r,0,e,n,t)}case 1:return b(ju,r,e,n,!1,o.a,t);default:return b(ju,r,e,n,!0,o.a,t)}})),Iu=r((function(n,e){var r=n.bq,t=function(){var n=R([r.ce,r.aW,r.al,r.a5]);n:for(;;){if(n.b){if(n.a){if(!n.b.b||n.b.a||!n.b.b.b||n.b.b.a||!n.b.b.b.b||n.b.b.b.a||n.b.b.b.b.b)break n;return Fr(0)}if(n.b.b){if(n.b.a){if(!n.b.b.b||n.b.b.a||!n.b.b.b.b||n.b.b.b.a||n.b.b.b.b.b)break n;return Fr(1)}if(n.b.b.b){if(n.b.b.a){if(!n.b.b.b.b||n.b.b.b.a||n.b.b.b.b.b)break n;return Fr(2)}if(n.b.b.b.b&&n.b.b.b.a&&!n.b.b.b.b.b)return Fr(3);break n}break n}break n}break n}return Er}();return 1===t.$?e:s(Hu,t.a,e.ah.bV.a,n,e)})),Uu=function(n){return{$:2,a:n}},Wu=ft(Uu(3)),Ou=ft(Uu(0)),Yu=ft(Uu(1)),Xu=ft(Uu(2)),qu=r((function(n,e){var r=Xu(e.aC)?Fr(0):Wu(e.aC)?Fr(1):Ou(e.aC)?Fr(2):Yu(e.aC)?Fr(3):Er;return 1===r.$?e:s(Hu,r.a,e.ah.bV.a,n,e)})),Gu=r((function(n,e){return u(qa,0,Ai(u(Fo,(function(e){var r=e.b.b;return C(e.a,n)?Fr(r):Er}),e.X)))})),Ju=r((function(n,e){return u(Gu,n,e.aV)})),Qu=Ju,Zu=r((function(n,e){var r,t=e.H;switch(t.$){case 1:var o=t.a.cN,a=t.a.eG;return T(n.a8-t.a.Y,u(Qu,"duration of step animation",n))>0?$(e,{H:a?(r={Y:n.a8},{$:3,a:r}):mu,ah:o}):e;case 2:return T(n.a8-t.a.Y,u(Qu,"duration of mistake animation",n))>0?$(e,{H:mu}):e;default:return e}})),nf=function(n){return!n.b},ef=function(n){return f($r,t((function(n,e,r){return u(yr,e,r)})),D,n)},rf=r((function(n,e){return nf(ef(n.ag))?vu:e})),tf=W,of=r((function(n,e){return tf(u(Yi,n.bK-e.bK,2)+u(Yi,n.bL-e.bL,2))})),af=t((function(n,e,r){var t=w(e,r),o=t.a,a=t.b;return 0>T(u(of,o,a),n)?Er:T(a.bK-o.bK,Pc(a.bL-o.bL))>0?Fr(1):T(o.bK-a.bK,Pc(a.bL-o.bL))>0?Fr(0):T(a.bL-o.bL,Pc(a.bK-o.bK))>0?Fr(2):Fr(3)})),cf=t((function(n,e,r){var t=e.fJ,o=w(r,ef(n.ag));if(1===o.a.$&&o.b.b){var a=f(af,t,o.a.a,o.b.a);return a.$?r:Uu(a.a)}return r})),lf=r((function(n,e){if(1===e.$)return e;var r=ef(n.ag);return r.b?{$:1,a:r.a}:vu})),uf=t((function(n,e,r){return f(cf,n,e,u(rf,n,u(lf,n,function(n){return 2===n.$?vu:n}(r))))})),ff=r((function(n,e){return $(e,{aC:f(uf,n,{fJ:20},e.aC)})})),sf=r((function(n,e){return u(Zu,n,u(qu,n,u(Iu,n,u(ff,n,e))))})),df=te("br"),bf=te("h2"),mf=r((function(n,e){return u(Nt,R([u(hl,"min-width","320px"),u(hl,"max-width","500px"),u(hl,"margin","0 auto")]),R([u(bf,R([u(hl,"margin","10px"),u(hl,"text-align","center")]),R([Ll("The Red-Faced Cube")])),u($l,R([u(hl,"margin","10px"),u(hl,"text-align","center"),u(hl,"font-weight","bold")]),R([Ll("A puzzle from Martin Gardner's book Mathematical Carnival (1975)")])),u($l,R([u(hl,"margin","10px 20px 10px 20px")]),R([u(Gl,D,R([Ll("Tour the board, resting once only")])),u(Gl,function(){var n=e.H;return 2===n.$?n.a.dj?D:R([u(hl,"background-color","red")]):D}(),R([Ll(" on every cell ")])),u(Gl,D,R([Ll("and ending with the cube red side up in the northeast corner.")])),u(df,D,D),u(Gl,(r=e.H,2===r.$&&1===r.a.dj?R([u(hl,"background-color","red")]):D),R([Ll("\n                        At no time during the tour, however,\n                            is the cube allowed to rest with the red side up.\n                    ")])),u(df,D,D),u(Gl,D,R([Ll("\n                        You can roll the cube via swiping or pressing arrow keys.\n                    ")]))]))]));var r})),vf=r((function(n,e){return{$:0,a:n,b:e}})),pf=function(n){return Pc(n)},gf=r((function(n,e){return T(e,n)>-1})),hf=r((function(n,e){return n+.5*(e-n)})),xf=r((function(n,e){return e-n})),Lf={bK:-1,bL:0,aa:0},Cf={bK:0,bL:-1,aa:0},Pf={bK:0,bL:0,aa:-1},Mf={bK:1,bL:0,aa:0},Tf={bK:0,bL:1,aa:0},yf={bK:0,bL:0,aa:1},wf=t((function(n,e,r){return{bK:n,bL:e,aa:r}})),Sf=i((function(n,e,r,t,o,a){var i=u(gf,r,a)?yf:Pf,c=u(gf,e,o)?Tf:Cf,l=u(gf,n,t)?Mf:Lf,s=S(pf(u(xf,n,t)),pf(u(xf,e,o)),pf(u(xf,r,a)));return{eL:{cR:f(wf,u(hf,n,t),u(hf,e,o),u(hf,r,a)),dn:l,$7:c,dp:i},dy:s}})),$f=function(n){return n.bK},Nf=function(n){return n.bL},Df=function(n){return n.aa},zf=r((function(n,e){return b(Sf,$f(n),Nf(n),Df(n),$f(e),Nf(e),Df(e))})),_f=t((function(n,e,r){return{bK:n,bL:e,aa:r}})),Rf=r((function(n,e){var r=S(e.a/2,e.b/2,e.c/2),t=r.a,o=r.b,a=r.c;return u(vf,n,u(zf,f(_f,-t,-o,-a),f(_f,t,o,a)))})),Af=function(n){return n*Pu/180},kf=r((function(n,e){return u(qa,yl,Ai(u(Fo,(function(e){var r=e.b;return C(e.a,n)?Fr(r):Er}),e.S)))})),Kf=r((function(n,e){return u(kf,n,e.aV)})),Vf=Kf,Bf=function(n){return{$:5,a:n}},Ff=function(n){return Bf(n)},Ef=r((function(n,e){return{$:2,a:n,b:e}})),jf=r((function(n,e){return{$:4,a:n,b:e}})),Hf=r((function(n,e){return{$:3,a:n,b:e}})),If=r((function(n,e){return{$:1,a:n,b:e}})),Uf=t((function(n,e,r){return{bK:n,bL:e,aa:r}})),Wf=function(n){return n.eL},Of=function(n){return n.dy},Yf=function(n){return n.cR},Xf=r((function(n,e){return{bK:e.bK+n.bK,bL:e.bL+n.bL,aa:e.aa+n.aa}})),qf=function(n){return n.dn},Gf=function(n){return n.$7},Jf=function(n){return n.dp},Qf=r((function(n,e){return{cR:u(Xf,n,Yf(e)),dn:qf(e),$7:Gf(e),dp:Jf(e)}})),Zf=r((function(n,e){return{eL:u(Qf,n,Wf(e)),dy:Of(e)}})),ns=r((function(n,e){return{eX:e,cR:n}})),es=r((function(n,e){var r=e;return u(ns,u(Xf,n,r.cR),r.eX)})),rs=r((function(n,e){var r=e;return{l:u(es,n,r.l),fh:r.fh,fv:r.fv}})),ts=r((function(n,e){var r=e.b;return w(n(e.a),n(r))})),os=r((function(n,e){return u(ts,Xf(n),e)})),as=function(n){return n.eS},is=function(n){return n.fv},cs=r((function(n,e){return{eS:e,fv:pf(n)}})),ls=r((function(n,e){return u(cs,is(e),u(Xf,n,as(e)))})),us=r((function(n,e){var r=e.b,t=e.c;return S(n(e.a),n(r),n(t))})),fs=r((function(n,e){return u(us,Xf(n),e)})),ss=r((function(n,e){var r=n.a,t=n.b,o=n.c,a=f(Uf,r,t,o);switch(e.$){case 0:return u(vf,e.a,u(Zf,a,e.b));case 1:return u(If,e.a,u(fs,a,e.b));case 3:return u(Hf,e.a,u(ls,a,e.b));case 2:return u(Ef,e.a,u(rs,a,e.b));case 4:return u(jf,e.a,u(os,a,e.b));default:var i=e.a;return Bf(u(Ut,ss(S(r,t,o)),i))}})),ds=function(n){return ss(S(n,0,0))},bs=function(n){return ss(S(0,n,0))},ms=function(n){return ss(S(0,0,n))},vs=F,ps=E,gs=t((function(n,e,r){var t=n,o=r,a=.5*e,i=vs(a),c=ps(a),l=t.eX,u=l.bK*c,f=i*u,s=u*u,d=l.bL*c,b=i*d,m=u*d,v=d*d,p=l.aa*c,g=i*p,h=u*p,x=d*p,L=p*p;return{bK:(1-2*(v+L))*o.bK+2*(m-g)*o.bL+2*(h+b)*o.aa,bL:2*(m+g)*o.bK+(1-2*(s+L))*o.bL+2*(x-f)*o.aa,aa:2*(h-b)*o.bK+2*(x+f)*o.bL+(1-2*(s+v))*o.aa}})),hs=t((function(n,e,r){var t=n,o=r,a=.5*e,i=vs(a),c=ps(a),l=t.cR,u=o.bK-l.bK,f=o.bL-l.bL,s=o.aa-l.aa,d=t.eX,b=d.bK*c,m=i*b,v=b*b,p=d.bL*c,g=i*p,h=b*p,x=p*p,L=d.aa*c,C=i*L,P=b*L,M=p*L,T=L*L;return{bK:l.bK+(1-2*(x+T))*u+2*(h-C)*f+2*(P+g)*s,bL:l.bL+2*(h+C)*u+(1-2*(v+T))*f+2*(M-m)*s,aa:l.aa+2*(P-g)*u+2*(M+m)*f+(1-2*(v+x))*s}})),xs=t((function(n,e,r){return{cR:f(hs,n,e,Yf(r)),dn:f(gs,n,e,qf(r)),$7:f(gs,n,e,Gf(r)),dp:f(gs,n,e,Jf(r))}})),Ls=t((function(n,e,r){return{eL:f(xs,n,e,Wf(r)),dy:Of(r)}})),Cs=r((function(n,e){var r=u(hs,n,e),t=u(gs,n,e);return function(n){var e=n;return u(ns,r(e.cR),t(e.eX))}})),Ps=t((function(n,e,r){var t=r;return{l:f(Cs,n,e,t.l),fh:t.fh,fv:t.fv}})),Ms=t((function(n,e,r){return u(ts,u(hs,n,e),r)})),Ts=t((function(n,e,r){return u(cs,is(r),f(hs,n,e,as(r)))})),ys=t((function(n,e,r){return u(us,u(hs,n,e),r)})),ws=t((function(n,e,r){switch(r.$){case 0:return u(vf,r.a,f(Ls,n,e,r.b));case 1:return u(If,r.a,f(ys,n,e,r.b));case 3:return u(Hf,r.a,f(Ts,n,e,r.b));case 2:return u(Ef,r.a,f(Ps,n,e,r.b));case 4:return u(jf,r.a,f(Ms,n,e,r.b));default:var t=r.a;return Bf(u(Ut,u(ws,n,e),t))}})),Ss={bK:0,bL:0,aa:0},$s=yf,Ns=u(ns,Ss,$s),Ds=r((function(n,e){return f(ws,Ns,n,e)})),zs=function(n){var e=1-u(Qu,"cubes side length",n),r=u(ds,4,u(Rf,u(Vf,"wall color",n),S(e,8+e,e)));return u(bs,-.5,u(ds,-.5,Ff(R([u(ms,-.5,u(Rf,u(Vf,"board color",n),S(8.01,8.01,1))),r,u(Ds,Af(90),r),u(Ds,Af(180),r),u(Ds,Af(270),r)]))))},_s=function(n){return Pu*(n/180)},Rs=function(n){return-n},As=r((function(n,e){return{bK:n.bL*e.aa-n.aa*e.bL,bL:n.aa*e.bK-n.bK*e.aa,aa:n.bK*e.bL-n.bL*e.bK}})),ks=function(n){return n.dn},Ks=function(n){return n.$7},Vs=t((function(n,e,r){return f(xs,n(r),e,r)})),Bs=function(n){return n.eX},Fs=r((function(n,e){return{bK:n*e.bK,bL:n*e.bL,aa:n*e.aa}})),Es=t((function(n,e,r){return u(Qf,u(Fs,e,n),r)})),js=t((function(n,e,r){return f(Es,Bs(n(r)),e,r)})),Hs=function(n){return u(ns,n.cR,n.dn)},Is=function(n){return u(ns,n.cR,n.$7)},Us=function(n){return u(ns,n.cR,n.dp)},Ws=function(n){return.5*n},Os=j,Ys=At,Xs=Mf,qs=Ys({cR:Ss,dn:$s,$7:Xs}),Gs=function(n){return a=(e={ch:u(Qu,"camera azimuth",n),eY:u(Qu,"camera distance",n),ct:u(Qu,"camera elevation",n),e4:{bK:-.5,bL:.7,aa:0}}).e4,i=e.ch,c=e.ct,l=e.eY,function(n){var e,r=Ws(pf(n.eD));return{c2:(e=Os(r),{$:0,a:e}),di:n.di}}({eD:_s(40),di:(r={ch:i,eY:l,ct:c,e4:a,dG:qs},o={cR:r.e4,dn:Ks(r.dG),$7:(t=r.dG,u(As,ks(t),Ks(t))),dp:ks(r.dG)},f(js,Us,r.eY,f(Vs,Hs,Rs(r.ct),f(Vs,Is,r.ch,o))))});var e,r,t,o,a,i,c,l},Js=t((function(n,e,r){return 0>T(r,n)?n:T(r,e)>0?e:r})),Qs=function(n){var e=f(Js,1667,25e3,n),r=e>4e3?-3025846900/(e*e*e)+2107037.9/(e*e)+.2226347*1e3/e+.24039:-266123900.00000003/(e*e*e)-.2343589*1e6/(e*e)+877.6956/e+.17991;return{bK:r,bL:e>2222?e>4e3?r*r*r*3.081758-r*r*5.8733867+3.75112997*r-.37001483:r*r*r*-.9549476-r*r*1.37418593+2.09137015*r-.16748867:r*r*r*-1.1063814-r*r*1.3481102+2.18555832*r-.20219683}},Zs=function(n){return{$:0,a:n}},nd={$:3},ed=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),rd=ed,td=r((function(n,e){return e.b?f(It,yr,e,n):n})),od=function(n){return f(It,td,D,n)},ad=r((function(n,e){return od(u(Ut,n,e))})),id=function(n){return u(ue,"height",Hr(n))},cd=function(n){return oe(function(n){return"script"==n?"p":n}(n))},ld=function(n){return{$:2,a:n}},ud=r((function(n,e){switch(e.$){case 0:return u(br,n,e);case 1:return u(mr,n,e);case 2:return u(vr,n,e);case 3:return u(pr,n,e);case 4:return u(gr,n,e);default:return u(hr,n,e)}})),fd=r((function(n,e){switch(e.$){case 0:return u(qe,n,e);case 1:return u(Ge,n,e);case 2:return u(Je,n,e);case 3:return u(Qe,n,e);case 4:return u(Ze,n,e);case 5:return u(nr,n,e);case 6:return u(er,n,e);case 7:return u(rr,n,e);default:return function(n){var e=n.sampleAlphaToCoverage;e.toggle=n.toggle,e.enabled||(n.gl.enable(n.gl.SAMPLE_ALPHA_TO_COVERAGE),e.enabled=!0)}(n)}})),sd=t((function(n,e,r){return f(dr,n,e,r)})),dd=Tr,bd=s(dd,1,1,1,1),md=t((function(n,e,r){return u(Ut,(function(n){return u(n,e,r)}),n)})),vd=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),pd=r((function(n,e){var r=e.bK,t=e.bL;return f(vd,n*r/t,n,n*(1-r-t)/t)})),gd=Pr,hd=r((function(n,e){return f(gd,3.2406*(t=(r=u(pd,n,e)).a)-1.5372*(o=r.b)-.4986*(a=r.c),-.9689*t+1.8758*o+.0415*a,.0557*t-.204*o+1.057*a);var r,t,o,a})),xd=r((function(n,e){return{dK:C(n.dK,e.dK),r:n.r*e.r+n.s*e.u+n.t*e.x,s:n.r*e.s+n.s*e.v+n.t*e.y,t:n.r*e.t+n.s*e.w+n.t*e.z,u:n.u*e.r+n.v*e.u+n.w*e.x,v:n.u*e.s+n.v*e.v+n.w*e.y,w:n.u*e.t+n.v*e.w+n.w*e.z,x:n.x*e.r+n.y*e.u+n.z*e.x,y:n.x*e.s+n.y*e.v+n.z*e.y,z:n.x*e.t+n.y*e.w+n.z*e.z,J:e.J+(n.J*e.r+n.K*e.u+n.L*e.x)*e.cb,K:e.K+(n.J*e.s+n.K*e.v+n.L*e.y)*e.cb,L:e.L+(n.J*e.t+n.K*e.w+n.L*e.z)*e.cb,cb:n.cb*e.cb}})),Ld=function(n){var e=new Float64Array(16);return e[0]=n.dS,e[1]=n.dW,e[2]=n.d_,e[3]=n.d2,e[4]=n.dT,e[5]=n.dX,e[6]=n.d$,e[7]=n.d3,e[8]=n.dU,e[9]=n.dY,e[10]=n.d0,e[11]=n.d4,e[12]=n.dV,e[13]=n.dZ,e[14]=n.d1,e[15]=n.d5,e},Cd=a((function(n,e,r,t,o){return b(o,n,s(dd,t.cb,t.cb,t.cb,t.dK?1:-1),function(n){return Ld({dS:n.r,dT:n.u,dU:n.x,dV:n.J,dW:n.s,dX:n.v,dY:n.y,dZ:n.K,d_:n.t,d$:n.w,d0:n.z,d1:n.L,d2:0,d3:0,d4:0,d5:1})}(t),t.dK,e,r)})),Pd=i((function(n,e,r,t,o,a){n:for(;;)switch(o.$){case 0:return a;case 5:var i=o.b;n=n,e=e,r=r,t=u(xd,o.a,t),o=i,a=a;continue n;case 1:return{P:u(yr,d(Cd,n,e,r,t,o.b),a.P),_:a._,fz:a.fz};case 3:return{P:a.P,_:u(yr,d(Cd,n,e,r,t,o.b),a._),fz:a.fz};case 2:return{P:a.P,_:a._,fz:u(yr,d(Cd,n,e,r,t,o.a),a.fz)};default:var c=o.a;return f(Wr,s(Pd,n,e,r,t),a,c)}})),Md=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),Td=Md,yd=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),wd=r((function(n,e){return{$:6,a:n,b:e}})),Sd=wd,$d=R([s(yd,518,!1,0,1),s(Td,!1,!1,!1,!1),u(Sd,0,1)]),Nd=519,Dd=7681,zd={src:"\n        precision lowp float;\n\n        void main() {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        }\n    ",attributes:{},uniforms:{}},_d=Xe,Rd=r((function(n,e){return{$:0,a:n,b:e}})),Ad=Rd({dz:1,dJ:0,ee:5}),kd=Cr,Kd=Ad(R([{em:u(kd,-1,-1)},{em:u(kd,1,-1)},{em:u(kd,-1,1)},{em:u(kd,1,1)}])),Vd={src:"\n        precision lowp float;\n\n        attribute vec2 position;\n\n        void main() {\n            gl_Position = vec4(position, 0.0, 1.0);\n        }\n    ",attributes:{position:"em"},uniforms:{}},Bd=function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return function(f){return{$:2,a:n,b:e,c:r,d:t,e:o,f:a,g:i,h:c,i:l,j:u,k:f}}}}}}}}}}}},Fd=t((function(n,e,t){var o=n.c4,a=n.cH,i=n.dm,c=r((function(n,e){return e(n)})),l=r((function(n,e){return e(n)})),s=function(n){return u(Rt,c(n.bB),u(Rt,l(n.bl),u(Rt,l(n.bM),l(n.bN))))};return u(s,t,u(s,e,f(Bd,o,a,i)))})),Ed=function(n){return f(Fd,{cH:n.cH,c4:n.c4,dm:n.dm},{bl:n.bl,bB:n.bB,bM:n.bM,bN:n.bN},{bl:n.bl,bB:n.bB,bM:n.bM,bN:n.bN})},jd=function(n){return d(_d,R([Ed(n),s(Td,!1,!1,!1,!1)]),Vd,zd,Kd,{})},Hd=jd({bl:Dd,cH:0,c4:8,bB:Nd,dm:15,bM:Dd,bN:Dd}),Id=7680,Ud=function(n){return jd({bl:Id,cH:15,c4:8,bB:516,dm:(e=n,u(Yi,2,e+4)),bM:5386,bN:5386});var e},Wd=t((function(n,e,r){return od(R([f(md,n,r,$d),R([Ud(e),Hd])]))})),Od=r((function(n,e){return od(u(Gr,Wd(n),e))})),Yd=s(yd,513,!0,0,1),Xd=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),qd=r((function(n,e){return f(Xd,32774,n,e)})),Gd=function(n){var e=n.b9,t=n.bX,o=n.bQ,a=n.bO,i=n.bT,c=n.aU;return u(r((function(n,r){var i=n.b,c=n.c,l=r.a,u=r.b,f=r.c;return function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return{$:0,a:n,b:e,c:r,d:t,e:o,f:a,g:i,h:c,i:l,j:u}}}}}}}}}}}(n.a)(i)(c)(l)(u)(f)(e)(t)(o)(a)})),i,c)}({bO:0,aU:u(qd,1,771),bQ:0,bT:u(qd,770,771),bX:0,b9:0}),Jd=R([Yd,Gd]),Qd=function(n){return n.d9},Zd=function(n){return n.ec},nb=function(n){return S(u(xf,function(n){return n.ea}(n),function(n){return n.d7}(n)),u(xf,function(n){return n.eb}(n),function(n){return n.d8}(n)),u(xf,Zd(n),Qd(n)))},eb=function(n){return Yf(n)},rb=function(n){return{cR:{bK:n.J,bL:n.K,aa:n.L},dn:{bK:n.r,bL:n.s,aa:n.t},$7:{bK:n.u,bL:n.v,aa:n.w},dp:{bK:n.x,bL:n.y,aa:n.z}}},tb=r((function(n,e){var r=n.dp,t=n.$7,o=n.dn;return{bK:e.bK*o.bK+e.bL*o.bL+e.aa*o.aa,bL:e.bK*t.bK+e.bL*t.bL+e.aa*t.aa,aa:e.bK*r.bK+e.bL*r.bL+e.aa*r.aa}})),ob=r((function(n,e){var r=n.cR,t=e.bK-r.bK,o=e.bL-r.bL,a=e.aa-r.aa,i=n.dp,c=n.$7,l=n.dn;return{bK:t*l.bK+o*l.bL+a*l.aa,bL:t*c.bK+o*c.bL+a*c.aa,aa:t*i.bK+o*i.bL+a*i.aa}})),ab=r((function(n,e){return{cR:u(ob,n,Yf(e)),dn:u(tb,n,qf(e)),$7:u(tb,n,Gf(e)),dp:u(tb,n,Jf(e))}})),ib=r((function(n,e){return u(bt,n,e)})),cb=r((function(n,e){return 0>T(n,e)?n:e})),lb=r((function(n,e){return u(cb,n,e)})),ub=r((function(n,e){var r=e,t=n;return{d7:u(ib,t.d7,r.d7),d8:u(ib,t.d8,r.d8),d9:u(ib,t.d9,r.d9),ea:u(lb,t.ea,r.ea),eb:u(lb,t.eb,r.eb),ec:u(lb,t.ec,r.ec)}})),fb=r((function(n,e){return e+n})),sb=r((function(n,e){var r=n.a,t=n.c,o=Ws(pf(n.b)),a=Ws(pf(r)),i=Ws(pf(t)),c=function(n){return S(n.bK,n.bL,n.aa)}(e),l=c.a,f=c.b,s=c.c;return{d7:u(fb,a,l),d8:u(fb,o,f),d9:u(fb,i,s),ea:u(xf,a,l),eb:u(xf,o,f),ec:u(xf,i,s)}})),db=o((function(n,e,r,t){var o=r.eS,a=2*r.e8*e,i=2*r.e7*e,c=2*r.e6*e,l=o.aa*e,s=o.bL*e,d=o.bK*e,b=Jf(n),m=Pc(c*b.bK)+Pc(i*b.bL)+Pc(a*b.aa),v=Gf(n),p=Pc(c*v.bK)+Pc(i*v.bL)+Pc(a*v.aa),g=qf(n),h=Pc(c*g.bK)+Pc(i*g.bL)+Pc(a*g.aa),x=u(sb,S(h,p,m),u(ob,n,f(_f,d,s,l)));return Fr(t.$?x:u(ub,t.a,x))})),bb=o((function(n,e,r,t){n:for(;;){if(!t.b)return r;var o=t.a,a=t.b;switch(o.$){case 0:n=c=n,e=l=e,r=f=r,t=a;continue n;case 1:var i=s(db,n,e,o.a,r);n=c=n,e=l=e,r=f=i,t=a;continue n;case 2:n=c=n,e=l=e,r=f=r,t=a;continue n;case 3:i=s(db,n,e,o.a,r),n=c=n,e=l=e,r=f=i,t=a;continue n;case 4:var c=n,l=e,f=s(bb,n,e,r,o.a);n=c,e=l,r=f,t=a;continue n;default:var d=o.a,b=o.b,m=u(ab,rb(d),n),v=e*d.cb;n=c=n,e=l=e,r=f=s(bb,m,v,r,R([b])),t=a;continue n}}})),mb=function(n){return n[0]},vb=function(n){return n[1]},pb=function(n){return n[2]},gb=function(n){return{$:4,a:n}},hb=r((function(n,e){for(;;){if(!n.b)return e;var r=n.a;n=n.b,e=u(yr,r,e)}})),xb=function(n){return gb(u(hb,n,D))},Lb={dK:!0,r:1,s:0,t:0,u:0,v:1,w:0,x:0,y:0,z:1,J:0,K:0,L:0,cb:1},Cb=jd({bl:Dd,cH:0,c4:8,bB:Nd,dm:255,bM:Dd,bN:Dd}),Pb={bQ:0,eR:!1,bX:0,c0:0,b9:0,df:0,bK:0,bL:0,aa:0},Mb=r((function(n,e){return Ld({dS:n.bK,dT:n.b9,dU:e.bK,dV:e.b9,dW:n.bL,dX:n.bX,dY:e.bL,dZ:e.bX,d_:n.aa,d$:n.bQ,d0:e.aa,d1:e.bQ,d2:n.df,d3:n.c0,d4:e.df,d5:e.c0})})),Tb=w({bs:u(Mb,Pb,Pb),b$:u(Mb,Pb,Pb),b0:u(Mb,Pb,Pb),b1:u(Mb,Pb,Pb)},s(dd,0,0,0,0)),yb=r((function(n,e){return n*e})),wb=function(n){return s(yd,515,n.ai,n.ac,n.ab)},Sb=R([wb({ab:1,ac:0,ai:!0}),Ed({bl:Id,cH:240,c4:0,bB:514,dm:0,bM:Id,bN:Id}),Gd]),$b=r((function(n,e){var r=n,t=e.e3,o=e.eK,a=pf(e.fo),i=pf(t),c=r.c2;if(c.$){var l=c.a;return Dc(i)?Ld({dS:2/(o*l),dT:0,dU:0,dV:0,dW:0,dX:2/l,dY:0,dZ:0,d_:0,d$:0,d0:0,d1:-1,d2:0,d3:0,d4:0,d5:1}):Ld({dS:2/(o*l),dT:0,dU:0,dV:0,dW:0,dX:2/l,dY:0,dZ:0,d_:0,d$:0,d0:-2/(i-a),d1:-(i+a)/(i-a),d2:0,d3:0,d4:0,d5:1})}var u=c.a;return Dc(i)?Ld({dS:1/(o*u),dT:0,dU:0,dV:0,dW:0,dX:1/u,dY:0,dZ:0,d_:0,d$:0,d0:-1,d1:-2*a,d2:0,d3:0,d4:-1,d5:0}):Ld({dS:1/(o*u),dT:0,dU:0,dV:0,dW:0,dX:1/u,dY:0,dZ:0,d_:0,d$:0,d0:-(i+a)/(i-a),d1:-2*i*a/(i-a),d2:0,d3:0,d4:-1,d5:0})})),Nb=r((function(n,e){return 1==(1&n>>e)?0:1})),Db=t((function(n,e,r){return od(u(Ut,(function(r){var t=r<<4;return f(md,n,w(e,s(dd,u(Nb,r,0),u(Nb,r,1),u(Nb,r,2),u(Nb,r,3))),function(n){return R([wb({ab:1,ac:0,ai:!0}),Ed({bl:Id,cH:240,c4:n,bB:514,dm:0,bM:Id,bN:Id}),Gd])}(t))}),u(qr,1,u(Yi,2,r)-1)))})),zb=function(n){return{bK:-n.bK,bL:-n.bL,aa:-n.aa}},_b=function(n){return zb(Jf(n))},Rb=Tf,Ab={cR:Ss,dn:Xs,$7:Rb,dp:$s},kb=r((function(n,e){var r,t,o,a,i;return t=Yf(r=u(ab,e,n)),o=Jf(r),a=Gf(r),i=qf(r),Ld({dS:i.bK,dT:a.bK,dU:o.bK,dV:t.bK,dW:i.bL,dX:a.bL,dY:o.bL,dZ:t.bL,d_:i.aa,d$:a.aa,d0:o.aa,d1:t.aa,d2:0,d3:0,d4:0,d5:1})})),Kb=function(n){return qf(n)},Vb=t((function(n,e,r){return{bK:n,bL:e,aa:r}})),Bb=function(n){return Gf(n)},Fb=r((function(n,e){var r,t=R([(1,{$:1,a:1}),ld(0),Zs(!0),s(rd,0,0,0,0)]),o=function(){var e=n.eI;switch(e.$){case 0:return S(t,"0",1);case 1:return S(u(yr,nd,t),"1",1);default:return S(t,"0",e.a)}}(),a=o.a,i=o.b,c=o.c,l=n.dy,d=l.a,m=l.b,v=u(hl,"height",Hr(m)+"px"),p=d,g=p/m,h=u(ad,(function(e){return function(n){var e=function(n){return n.di}(n.eP),r={cR:eb(e),dn:Kb(e),$7:Bb(e),dp:zb(_b(e))},t=xb(n.dC),o=s(bb,r,1,Er,R([t]));if(1===o.$)return D;var a=o.a,i=u(kb,Ab,e),c=u(yb,.99,u(ib,pf(n.eU),Rs(Qd(a)))),l=nb(a),d=function(n){var e=n,r=u(bt,Pc(e.bK),u(bt,Pc(e.bL),Pc(e.aa)));if(r){var t=e.aa/r,o=e.bL/r,a=e.bK/r;return tf(a*a+o*o+t*t)*r}return 0}(f(Vb,l.a,l.b,l.c)),m=u(yb,1.01,u(fb,d,Rs(Zd(a)))),v=u($b,n.eP,{eK:n.eK,e3:m,fo:c}),p=function(n){return{dS:n[0],dW:n[1],d_:n[2],d2:n[3],dT:n[4],dX:n[5],d$:n[6],d3:n[7],dU:n[8],dY:n[9],d0:n[10],d4:n[11],dV:n[12],dZ:n[13],d1:n[14],d5:n[15]}}(v).d5,g=p?zb(_b(e)):eb(e),h=function(){var e=n.fL;switch(e.$){case 0:return w(0,0);case 1:return w(1,0);case 2:return w(2,0);case 3:return w(3,e.a);case 4:return w(4,e.a);default:return w(5,0)}}(),x=h.a,L=h.b,C=u(hd,n.e1,n.fQ),P=Ld({dS:0,dT:g.bK,dU:mb(C),dV:n.ey,dW:0,dX:g.bL,dY:vb(C),dZ:d,d_:0,d$:g.aa,d0:pb(C),d1:x,d2:0,d3:p,d4:0,d5:L}),M=b(Pd,P,i,v,Lb,t,{P:D,_:D,fz:D}),T=n.fj;switch(T.$){case 0:return od(R([f(md,M.P,w(y=T.a,bd),Jd),f(md,M._,Tb,Jd)]));case 1:var y=T.a;return od(R([f(md,M.P,Tb,Jd),R([Cb]),f(md,M.fz,y.bs,$d),R([Ud(0)]),f(md,M.P,w(y,bd),Sb),f(md,M._,Tb,Jd)]));default:var S=T.a,$=T.b;return od(R([f(md,M.P,w($,bd),Jd),R([Cb]),u(Od,M.fz,S),f(Db,M.P,$,Or(S)),f(md,M._,Tb,Jd)]))}}({eK:g,eP:n.eP,eU:n.eU,dC:e.dC,e1:e.e1,fj:e.fj,ey:c,fL:e.fL,fQ:e.fQ})}),e),x=u(hl,"width",Hr(p)+"px"),L=function(n){var e,r,t=n.b,o=n.c,a=n.d,i=function(n){return Xi(1e4*n)/100};return e=R(["rgba(",$c(i(n.a)),"%,",$c(i(t)),"%,",$c(i(o)),"%,",$c((r=a,Xi(1e3*r)/1e3)),")"]),u(Ir,"",e)}(n.ds);return f(cd,"div",R([u(hl,"padding","0px"),x,v]),R([w(i,f(sd,a,R([(r=Xi(p*c),u(ue,"width",Hr(r))),id(Xi(m*c)),x,v,u(hl,"display","block"),u(hl,"background-color",L)]),h))]))})),Eb=o((function(n,e,r,t){return{$:2,a:n,b:e,c:r,d:t}})),jb=o((function(n,e,r,t){return{$:3,a:n,b:e,c:r,d:t}})),Hb=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),Ib=o((function(n,e,r,t){return{$:6,a:n,b:e,c:r,d:t}})),Ub=o((function(n,e,r,t){return{$:7,a:n,b:e,c:r,d:t}})),Wb=o((function(n,e,r,t){return{$:5,a:n,b:e,c:r,d:t}})),Ob=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),Yb=function(n){switch(n.$){case 0:return n;case 1:return s(Ob,n.a,n.b,n.c,1);case 2:return s(Eb,n.a,n.b,n.c,1);case 3:return s(jb,n.a,n.b,n.c,1);case 4:return s(Hb,n.a,n.b,n.c,1);case 5:return s(Wb,n.a,n.b,n.c,1);case 6:return s(Ib,n.a,n.b,n.c,1);case 7:return s(Ub,n.a,n.b,n.c,1);case 8:case 9:default:return n}},Xb={$:0},qb=l((function(n,e,r,t,o,a,i,c){for(;;){if(!c.b)return{d7:e,d8:t,d9:a,ea:n,eb:r,ec:o};var l=c.b,f=i(c.a);n=u(lb,f.ea,n),e=u(ib,f.d7,e),r=u(lb,f.eb,r),t=u(ib,f.d8,t),o=u(lb,f.ec,o),a=u(ib,f.d9,a),i=i,c=l}})),Gb=t((function(n,e,r){var t=n(e);return v(qb,t.ea,t.d7,t.eb,t.d8,t.ec,t.d9,n,r)})),Jb=r((function(n,e){return 1>T(e,n)})),Qb=function(n){return u(Jb,n.d7,n.ea)&&u(Jb,n.d8,n.eb)&&u(Jb,n.d9,n.ec)?n:{d7:u(ib,n.ea,n.d7),d8:u(ib,n.eb,n.d8),d9:u(ib,n.ec,n.d9),ea:u(lb,n.ea,n.d7),eb:u(lb,n.eb,n.d8),ec:u(lb,n.ec,n.d9)}},Zb=function(n){return n},nm=function(n){var e=n.a,r=n.b,t=n.c,o=$f(e),a=Nf(e),i=Df(e),c=$f(r),l=Nf(r),f=Df(r),s=$f(t),d=Nf(t),b=Df(t);return Qb({d7:u(ib,o,u(ib,c,s)),d8:u(ib,a,u(ib,l,d)),d9:u(ib,i,u(ib,f,b)),ea:u(lb,o,u(lb,c,s)),eb:u(lb,a,u(lb,l,d)),ec:u(lb,i,u(lb,f,b))})},em=function(n){return new Float64Array([n.bK,n.bL,n.aa])},rm=function(n){return em(n)},tm=function(n){return em(n)},om=r((function(n,e){return{bK:e.bL*n.aa-e.aa*n.bL,bL:e.aa*n.bK-e.bK*n.aa,aa:e.bK*n.bL-e.bL*n.bK}})),am=r((function(n,e){return{bK:e.bK-n.bK,bL:e.bL-n.bL,aa:e.aa-n.aa}})),im={bK:0,bL:0,aa:0},cm=r((function(n,e){var r=n,t=e,o=u(bt,Pc(t.bK),u(bt,Pc(t.bL),Pc(t.aa)));if(o){var a=t.aa/o,i=t.bL/o,c=t.bK/o,l=tf(c*c+i*i+a*a);return{bK:r*c/l,bL:r*i/l,aa:r*a/l}}return im})),lm=cm(1),um=t((function(n,e,r){return lm(u(om,u(am,e,r),u(am,n,e)))})),fm=function(n){var e=n.a,r=n.b,t=n.c,o=tm(f(um,e,r,t));return S({o:o,em:rm(e)},{o:o,em:rm(r)},{o:o,em:rm(t)})},sm=r((function(n,e){return{$:2,a:n,b:e}})),dm=sm({dz:3,dJ:0,ee:4}),bm=t((function(n,e,r){return S(n,e,r)})),mm=(Ho=u(yb,-.5,1),Io=u(yb,-.5,1),Uo=u(yb,-.5,1),Wo=f(wf,Uo,Io,Ho),Oo=u(yb,.5,1),Yo=f(wf,Uo,Io,Oo),Xo=u(yb,.5,1),qo=f(wf,Uo,Xo,Ho),Go=f(wf,Uo,Xo,Oo),Jo=u(yb,.5,1),Qo=f(wf,Jo,Io,Ho),Zo=f(wf,Jo,Xo,Ho),na=f(wf,Jo,Io,Oo),ea=f(wf,Jo,Xo,Oo),Yb(function(n){if(n.b){var e=n.a,r=n.b,t=dm(u(Ut,fm,n));return s(Eb,f(Gb,nm,e,r),n,t,0)}return Xb}(R([f(bm,Wo,Zo,Qo),f(bm,Wo,qo,Zo),f(bm,Yo,na,ea),f(bm,Yo,ea,Go),f(bm,Qo,Zo,ea),f(bm,Qo,ea,na),f(bm,Wo,Go,qo),f(bm,Wo,Yo,Go),f(bm,Wo,Qo,na),f(bm,Wo,na,Yo),f(bm,qo,ea,Zo),f(bm,qo,Go,ea)])))),vm={$:0},pm=t((function(n,e,r){return{$:1,a:n,b:e,c:r}})),gm=t((function(n,e,r){var t=e.a,o=e.b,a=n(e.c),i=n(o),c=n(t),l=tm(f(um,c,i,a)),s={o:l,em:rm(c)},d={o:l,em:rm(i)},b={o:l,em:rm(a)};return u(yr,s,u(yr,d,u(yr,b,r)))})),hm=function(n){return n.E},xm=o((function(n,e,r,t){return 1===e.$||1===r.$||1===t.$?Er:Fr(f(n,e.a,r.a,t.a))})),Lm=4294967295>>>32-it,Cm=h,Pm=t((function(n,e,r){for(;;){var t=u(Cm,Lm&e>>>n,r);if(t.$)return u(Cm,Lm&e,t.a);n-=it,e=e,r=t.a}})),Mm=r((function(n,e){var r=e.a,t=e.b,o=e.c,a=e.d;return 0>n||T(n,r)>-1?Er:T(n,function(n){return n>>>5<<5}(r))>-1?Fr(u(Cm,Lm&n,a)):Fr(f(Pm,t,n,o))})),Tm=function(n){return n.as},ym=r((function(n,e){return u(Mm,n,Tm(e))})),wm=t((function(n,e,r){for(;;){var t=u(vt,nt,n),o=t.a,a=t.b;if(0>T(dt(o),nt))return u(ht,!0,{A:e,m:r,q:o});n=a,e=u(yr,ut(o),e),r+=1}})),Sm=function(n){return n.b?f(wm,n,D,0):ct},$m=r((function(n,e){return!u(wc,u(ho,yc,n),e)})),Nm=r((function(n,e){return f(It,r((function(e,r){return n(e)?u(yr,e,r):r})),D,e)})),Dm=r((function(n,e){var r=function(n){return n.a}(n),t=function(n){var e=n.a,t=n.b,o=n.c;return e>=0&&0>T(e,r)&&t>=0&&0>T(t,r)&&o>=0&&0>T(o,r)};return u($m,t,e)?{E:e,as:n}:{E:u(Nm,t,e),as:n}})),zm=t((function(n,e,r){return{$:3,a:n,b:e,c:r}}))({dz:1,dJ:3,ee:4}),_m=r((function(n,e){var r=e;return w(S(n.bK,n.bL,n.aa),S(r.bK,r.bL,r.aa))})),Rm=r((function(n,e){n:for(;;){if(-2===e.$)return Er;var r=e.c,t=e.d,o=e.e;switch(u($o,n,e.b)){case 0:n=n,e=t;continue n;case 1:return Fr(r);default:n=n,e=o;continue n}}})),Am=f(gd,0,0,0),km=i((function(n,e,r,t,o,a){var i=a.a,c=a.b,l=a.c,f=u(Rm,u(_m,n,e),o);if(f.$){var s={o:Am,em:rm(e)},d={o:Am,em:rm(n)},b=l+1;return S(u(yr,S(r,l,b),u(yr,S(r,b,t),i)),u(yr,s,u(yr,d,c)),l+2)}return S(u(yr,S(r,f.a,t),i),c,l)})),Km=a((function(n,e,r,t,o){for(;;){if(!r.b)return w(o.a,Qr(o.b));var a=r.a,i=a.a,c=a.b,l=r.b,u=n(a.c),f=n(c),s=n(i),d=t+2,m=t+1,v=n,p=e,g=l,h=t+3,x=b(km,u,s,d,t,e,b(km,f,u,m,d,e,b(km,s,f,t,m,e,o)));n=v,e=p,r=g,t=h,o=x}})),Vm=a((function(n,e,r,t,o){for(;;){if(!e.b)return S(t,o,r);var a=e.a,i=a.a,c=a.b,l=e.b,s=n(a.c),d=n(c),b=n(i),m=r+2,v=r+1,p=r,g=f(Do,u(_m,b,s),m,f(Do,u(_m,s,d),v,f(Do,u(_m,d,b),p,o)));n=n,e=l,r+=3,t=u(yr,S(p,v,m),t),o=g}})),Bm=t((function(n,e,r){var o,a=u(Fo,(function(n){var e=n.a,r=n.b,a=n.c;return s(xm,t((function(n,e,r){return S(n,e,r)})),u(ym,e,o),u(ym,r,o),u(ym,a,o))}),hm(o=r)),i=f(It,gm(e),D,a),c=d(Vm,e,a,0,D,Mo),l=d(Km,e,c.b,a,0,S(c.a,D,c.c)),b=l.a,m=l.b,v=nf(m)?i:N(i,m);return f(pm,n,u(Dm,Sm(v),b),u(zm,v,b))})),Fm=function(n){return{E:u(Ut,(function(n){return S(3*n,3*n+1,3*n+2)}),u(qr,0,Or(n)-1)),as:Sm(od(u(Ut,(function(n){return R([n.a,n.b,n.c])}),n)))}},Em=function(n){switch(n.$){case 0:return vm;case 1:case 2:return f(Bm,n.a,At,Fm(u(Ut,Zb,n.b)));case 3:return f(Bm,n.a,At,n.b);case 4:case 5:case 6:case 7:return f(Bm,n.a,(function(n){return n.em}),n.b);case 8:case 9:default:return vm}},jm=Em(mm),Hm={$:0},Im=Hm,Um=r((function(n,e){return{$:1,a:n,b:e}})),Wm={src:"\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        void main () {\n            gl_FragColor = texture2D(colorTexture, interpolatedUv);\n        }\n    ",attributes:{},uniforms:{colorTexture:"bU"}},Om=function(n){return{$:5,a:n}},Ym=Om(1029),Xm=Om(1028),qm=t((function(n,e,r){return 1===e?u(yr,n?Ym:Xm,r):r})),Gm={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute mediump vec2 uv;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedUv = uv;\n        }\n    ",attributes:{position:"em",uv:"N"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Jm=o((function(n,e,r,t){return u(Um,e,l((function(e,o,a,i,c,l,u,s){return d(_d,f(qm,i,t,s),Gm,Wm,r,{bU:n,b:a,c:o,d:l,e:e,f:c})})))})),Qm={src:"\n        precision lowp float;\n        \n        uniform lowp vec3 constantColor;\n        \n        void main () {\n            gl_FragColor = vec4(constantColor, 1.0);\n        }\n    ",attributes:{},uniforms:{constantColor:"aI"}},Zm={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{position:"em"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},nv=o((function(n,e,r,t){return u(Um,e,l((function(e,o,a,i,c,l,u,s){return d(_d,f(qm,i,t,s),Zm,Qm,r,{aI:n,b:a,c:o,d:l,e:e,f:c})})))})),ev=r((function(n,e){return{$:3,a:n,b:e}})),rv={src:"\n        precision lowp float;\n        \n        uniform lowp vec3 constantColor;\n        uniform lowp float pointRadius;\n        uniform highp mat4 sceneProperties;\n        \n        float pointAlpha(float pointRadius, vec2 pointCoord) {\n            float pointSize = 2.0 * pointRadius;\n            float x = (pointSize + 2.0) * (pointCoord.s - 0.5);\n            float y = (pointSize + 2.0) * (pointCoord.t - 0.5);\n            float r = sqrt(x * x + y * y);\n            float innerRadius = pointRadius;\n            float outerRadius = pointRadius + 1.0;\n            if (r > outerRadius) {\n                return 0.0;\n            } else if (r > innerRadius) {\n                return outerRadius - r;\n            } else {\n                return 1.0;\n            }\n        }\n        \n        void main () {\n            float supersampling = sceneProperties[3][0];\n            float alpha = pointAlpha(pointRadius * supersampling, gl_PointCoord);\n            gl_FragColor = vec4(constantColor, alpha);\n        }\n    ",attributes:{},uniforms:{constantColor:"aI",pointRadius:"b7",sceneProperties:"e"}},tv={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform lowp float pointRadius;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            float supersampling = sceneProperties[3][0];\n            gl_PointSize = 2.0 * pointRadius * supersampling + 2.0;\n        }\n    ",attributes:{position:"em"},uniforms:{modelMatrix:"b",modelScale:"c",pointRadius:"b7",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},ov=o((function(n,e,r,t){return u(ev,r,l((function(r,o,a,i,c,l,u,f){return d(_d,f,tv,rv,t,{aI:n,b:a,c:o,b7:e,d:l,e:r,f:c})})))})),av={src:"\n        precision mediump float;\n        \n        uniform mediump vec3 emissiveColor;\n        uniform highp mat4 sceneProperties;\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{emissiveColor:"aY",sceneProperties:"e"}},iv=Mr,cv=a((function(n,e,r,t,o){return u(Um,r,l((function(r,a,i,c,l,s,b,m){return d(_d,f(qm,c,o,m),Zm,av,t,{aY:u(iv,e,n),b:i,c:a,d:s,e:r,f:l})})))})),lv={src:"\n        precision mediump float;\n        \n        uniform mediump vec3 emissiveColor;\n        uniform lowp float pointRadius;\n        uniform highp mat4 sceneProperties;\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        float pointAlpha(float pointRadius, vec2 pointCoord) {\n            float pointSize = 2.0 * pointRadius;\n            float x = (pointSize + 2.0) * (pointCoord.s - 0.5);\n            float y = (pointSize + 2.0) * (pointCoord.t - 0.5);\n            float r = sqrt(x * x + y * y);\n            float innerRadius = pointRadius;\n            float outerRadius = pointRadius + 1.0;\n            if (r > outerRadius) {\n                return 0.0;\n            } else if (r > innerRadius) {\n                return outerRadius - r;\n            } else {\n                return 1.0;\n            }\n        }\n        \n        void main () {\n            vec4 color = toSrgb(emissiveColor, sceneProperties);\n            float supersampling = sceneProperties[3][0];\n            float alpha = pointAlpha(pointRadius * supersampling, gl_PointCoord);\n            gl_FragColor = vec4(color.rgb, alpha);\n        }\n    ",attributes:{},uniforms:{emissiveColor:"aY",pointRadius:"b7",sceneProperties:"e"}},uv=a((function(n,e,r,t,o){return u(ev,t,l((function(t,a,i,c,l,f,s,b){return d(_d,b,tv,lv,o,{aY:u(iv,e,n),b:i,c:a,b7:r,d:f,e:t,f:l})})))})),fv={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 materialColor;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{enabledLights:"U",lights12:"bs",lights34:"b$",lights56:"b0",lights78:"b1",materialColor:"cI",sceneProperties:"e",viewMatrix:"f"}},sv={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n        }\n    ",attributes:{normal:"o",position:"em"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},dv=o((function(n,e,r,t){return u(Um,e,l((function(e,o,a,i,c,l,u,s){var b=u.a,m=u.b;return d(_d,f(qm,i,t,s),sv,fv,r,{U:m,bs:b.bs,b$:b.b$,b0:b.b0,b1:b.b1,cI:n,b:a,c:o,d:l,e:e,f:c})})))})),bv={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D materialColorTexture;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n            vec3 materialColor = fromSrgb(texture2D(materialColorTexture, interpolatedUv).rgb);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{enabledLights:"U",lights12:"bs",lights34:"b$",lights56:"b0",lights78:"b1",materialColorTexture:"cJ",normalMapTexture:"a3",sceneProperties:"e",useNormalMap:"ba",viewMatrix:"f"}},mv={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        attribute mediump vec2 uv;\n        attribute highp vec3 tangent;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getWorldTangent(vec3 modelTangent, vec4 modelScale, mat4 modelMatrix) {\n            return (modelMatrix * vec4(safeNormalize(modelScale.xyz * modelTangent), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = uv;\n            interpolatedTangent = getWorldTangent(tangent, modelScale, modelMatrix);\n        }\n    ",attributes:{normal:"o",position:"em",tangent:"eA",uv:"N"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},vv=i((function(n,e,r,t,o,a){return u(Um,t,l((function(t,i,c,l,u,s,b,m){var v=b.a,p=b.b;return d(_d,f(qm,l,a,m),mv,bv,o,{U:p,bs:v.bs,b$:v.b$,b0:v.b0,b1:v.b1,cJ:n,b:c,c:i,a3:e,d:s,e:t,ba:r,f:u})})))})),pv={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D baseColorTexture;\n        uniform lowp vec4 constantBaseColor;\n        uniform mediump sampler2D roughnessTexture;\n        uniform lowp vec2 constantRoughness;\n        uniform mediump sampler2D metallicTexture;\n        uniform lowp vec2 constantMetallic;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getFloatValue(sampler2D texture, vec2 uv, vec2 constantValue) {\n            if (constantValue.y == 1.0) {\n                return constantValue.x;\n            } else {\n                vec4 textureColor = texture2D(texture, uv);\n                return dot(textureColor, vec4(0.2126, 0.7152, 0.0722, 0.0));\n            }\n        }\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 baseColor = fromSrgb(texture2D(baseColorTexture, interpolatedUv).rgb) * (1.0 - constantBaseColor.w) + constantBaseColor.rgb * constantBaseColor.w;\n            float roughness = getFloatValue(roughnessTexture, interpolatedUv, constantRoughness);\n            float metallic = getFloatValue(metallicTexture, interpolatedUv, constantMetallic);\n        \n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{baseColorTexture:"cm",constantBaseColor:"cp",constantMetallic:"cq",constantRoughness:"cr",enabledLights:"U",lights12:"bs",lights34:"b$",lights56:"b0",lights78:"b1",metallicTexture:"cM",normalMapTexture:"a3",roughnessTexture:"c8",sceneProperties:"e",useNormalMap:"ba",viewMatrix:"f"}},gv={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 baseColor;\n        uniform lowp float roughness;\n        uniform lowp float metallic;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{baseColor:"cl",enabledLights:"U",lights12:"bs",lights34:"b$",lights56:"b0",lights78:"b1",metallic:"cL",roughness:"c7",sceneProperties:"e",viewMatrix:"f"}},hv=i((function(n,e,r,t,o,a){return u(Um,t,l((function(t,i,c,l,u,s,b,m){var v=b.a,p=b.b;return d(_d,f(qm,l,a,m),sv,gv,o,{cl:n,U:p,bs:v.bs,b$:v.b$,b0:v.b0,b1:v.b1,cL:r,b:c,c:i,d:s,c7:e,e:t,f:u})})))})),xv=r((function(n,e){return{$:1,a:n,b:e}})),Lv=r((function(n,e){return e.$?w(e.a.C,1):w(n,0)})),Cv=s(dd,0,0,0,0),Pv=r((function(n,e){var r;return e.$?w(e.a.C,Cv):w(n,s(dd,mb(r=e.a),vb(r),pb(r),1))})),Mv=r((function(n,e){var r,t=w(n,e);return t.a.$?u(xv,w(r=t.a.a.C,Cv),u(Lv,r,e)):t.b.$?u(xv,u(Pv,r=t.b.a.C,n),u(Lv,r,e)):{$:0,a:t.a.a}})),Tv=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),yv=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),wv=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),Sv=u(kd,0,0),$v=r((function(n,e){return e.$?w(e.a.C,Sv):w(n,u(kd,e.a,1))})),Nv=o((function(n,e,r,t){var o,a=s(wv,n,e,r,t);return a.a.$?s(yv,w(o=a.a.a.C,Cv),u($v,o,e),u($v,o,r),u(Lv,o,t)):a.b.$?s(yv,u(Pv,o=a.b.a.C,n),w(o,Sv),u($v,o,r),u(Lv,o,t)):a.c.$?s(yv,u(Pv,o=a.c.a.C,n),u($v,o,e),w(o,Sv),u(Lv,o,t)):a.d.$?s(yv,u(Pv,o=a.d.a.C,n),u($v,o,e),u($v,o,r),w(o,1)):f(Tv,a.a.a,a.b.a,a.c.a)})),Dv={src:"\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        uniform mediump float backlight;\n        uniform highp mat4 sceneProperties;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            vec3 emissiveColor = fromSrgb(texture2D(colorTexture, interpolatedUv).rgb) * backlight;\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{backlight:"ci",colorTexture:"bU",sceneProperties:"e"}},zv=a((function(n,e,r,t,o){return u(Um,r,l((function(r,a,i,c,l,u,s,b){return d(_d,f(qm,c,o,b),Gm,Dv,t,{ci:e,bU:n,b:i,c:a,d:u,e:r,f:l})})))})),_v={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        attribute mediump vec2 uv;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = uv;\n            interpolatedTangent = vec3(0.0, 0.0, 0.0);\n        }\n    ",attributes:{normal:"o",position:"em",uv:"N"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Rv=o((function(n,e,r,t){return u(Um,e,l((function(e,o,a,i,c,l,u,s){var b=u.a,m=u.b;return d(_d,f(qm,i,t,s),_v,bv,r,{U:m,bs:b.bs,b$:b.b$,b0:b.b0,b1:b.b1,cJ:n,b:a,c:o,a3:n,d:l,e:e,ba:0,f:c})})))})),Av=function(n){return e(9,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return n(e,r,t,o,a,i,c,l,u)}}}}}}}}}))}((function(n,e,r,t,o,a,i,c,s){return u(Um,i,l((function(i,l,u,b,m,v,p,g){var h=p.a,x=p.b;return d(_d,f(qm,b,s,g),_v,pv,c,{cm:n,cp:e,cq:a,cr:t,U:x,bs:h.bs,b$:h.b$,b0:h.b0,b1:h.b1,cM:o,b:u,c:l,a3:n,d:v,c8:r,e:i,ba:0,f:m})})))})),kv=t((function(n,e,r){return r>.5?e+(1-r)*(n-e):n+r*(e-n)})),Kv=function(n){return f(wf,function(n){return f(kv,n.ea,n.d7,.5)}(n),function(n){return f(kv,n.eb,n.d8,.5)}(n),function(n){return f(kv,n.ec,n.d9,.5)}(n))},Vv=function(n){var e=nb(n),r=e.a,t=e.b,o=e.c;return{eS:Kv(n),e6:r/2,e7:t/2,e8:o/2}},Bv=r((function(n,e){switch(n.$){case 0:if(n.b.$){var r=n.b.a.C;switch(e.$){case 0:case 1:case 2:case 3:case 4:return Im;case 5:case 6:case 7:return o=e.c,a=e.d,s(Jm,r,Vv(k=e.a),o,a);case 8:case 9:default:return Im}}else{var t=n.b.a;switch(e.$){case 0:return Im;case 1:var o=e.c,a=e.d;return s(nv,t,Vv(k=e.a),o,a);case 2:case 3:case 4:return o=e.c,a=e.d,s(nv,t,Vv(k=e.a),o,a);case 5:case 6:case 7:return o=e.c,a=e.d,s(nv,t,Vv(k=e.a),o,a);case 8:case 9:return o=e.c,s(nv,t,Vv(k=e.a),o,0);default:return o=e.d,s(ov,t,e.b,Vv(k=e.a),o)}}case 1:if(n.b.$)switch(r=n.b.a.C,c=n.c,e.$){case 0:case 1:case 2:case 3:case 4:return Im;case 5:case 6:case 7:return o=e.c,a=e.d,d(zv,r,c,Vv(k=e.a),o,a);case 8:case 9:default:return Im}else{var i=n.b.a,c=n.c;switch(e.$){case 0:return Im;case 1:case 2:case 3:case 4:case 5:case 6:case 7:return o=e.c,a=e.d,d(cv,i,c,Vv(k=e.a),o,a);case 8:case 9:return o=e.c,d(cv,i,c,Vv(k=e.a),o,0);default:return o=e.d,d(uv,i,c,e.b,Vv(k=e.a),o)}}case 2:var m=u(Mv,n.b,n.c);if(m.$){var v=m.a.a,p=m.b,g=p.a,h=p.b;switch(e.$){case 0:case 1:case 2:case 3:case 4:case 5:return Im;case 6:return o=e.c,L=e.d,s(Rv,v,Vv(k=e.a),o,L);case 7:return o=e.c,L=e.d,b(vv,v,g,h,Vv(k=e.a),o,L);case 8:case 9:default:return Im}}else{var x=m.a;switch(e.$){case 0:case 1:return Im;case 2:o=e.c;var L=e.d;return s(dv,x,Vv(k=e.a),o,L);case 3:return Im;case 4:return o=e.c,L=e.d,s(dv,x,Vv(k=e.a),o,L);case 5:return Im;case 6:case 7:return o=e.c,L=e.d,s(dv,x,Vv(k=e.a),o,L);case 8:case 9:default:return Im}}default:var C=s(Nv,n.b,n.c,n.d,n.e);if(C.$){var P=C.a,M=P.a,T=P.b,y=C.b,w=y.a,S=y.b,$=C.c,N=$.a,D=$.b,z=C.d;switch(g=z.a,h=z.b,e.$){case 0:case 1:case 2:case 3:case 4:case 5:return Im;case 6:return o=e.c,a=e.d,function(n,e,r,t,o,a,i,c,l,u){return 9===n.a?n.f(e,r,t,o,a,i,c,l,u):n(e)(r)(t)(o)(a)(i)(c)(l)(u)}(Av,M,T,w,S,N,D,Vv(k=e.a),o,a);case 7:return k=e.a,o=e.c,a=e.d,function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(s){return function(b){return function(m){return u(Um,s,l((function(l,u,s,v,p,g,h,x){var L=h.a,C=h.b;return d(_d,f(qm,v,m,x),mv,pv,b,{cm:n,cp:e,cq:a,cr:t,U:C,bs:L.bs,b$:L.b$,b0:L.b0,b1:L.b1,cM:o,b:s,c:u,a3:i,d:g,c8:r,e:l,ba:c,f:p})})))}}}}}}}}}}}(M)(T)(w)(S)(N)(D)(g)(h)(Vv(k))(o)(a);case 8:case 9:default:return Im}}else{var _=C.a,R=C.b,A=C.c;switch(e.$){case 0:case 1:return Im;case 2:return o=e.c,a=e.d,b(hv,_,R,A,Vv(k=e.a),o,a);case 3:return Im;case 4:return o=e.c,a=e.d,b(hv,_,R,A,Vv(k=e.a),o,a);case 5:return Im;case 6:return o=e.c,a=e.d,b(hv,_,R,A,Vv(k=e.a),o,a);case 7:var k;return o=e.c,a=e.d,b(hv,_,R,A,Vv(k=e.a),o,a);case 8:case 9:default:return Im}}}})),Fv=function(n){return n.bK},Ev=function(n){return n.bL},jv=function(n){return n.aa},Hv=function(n){var e=n,r=jv(e.dp),t=Ev(e.dp),o=Fv(e.dp),a=jv(e.$7),i=Ev(e.$7),c=Fv(e.$7),l=jv(e.dn),u=Ev(e.dn),f=Fv(e.dn);return f*i*r+u*a*o+l*c*t-l*i*o-u*c*r-f*a*t>0},Iv=r((function(n,e){return{$:5,a:n,b:e}})),Uv=r((function(n,e){var r=e;switch(r.$){case 0:return Im;case 5:var t=r.b;return u(Iv,u(xd,r.a,n),t);case 1:case 3:case 2:default:return u(Iv,n,r)}})),Wv=r((function(n,e){return u(Uv,function(n){var e=Yf(n),r=Jf(n),t=Gf(n),o=qf(n);return{dK:Hv(n),r:o.bK,s:o.bL,t:o.aa,u:t.bK,v:t.bL,w:t.aa,x:r.bK,y:r.bL,z:r.aa,J:e.bK,K:e.bL,L:e.aa,cb:1}}(n),e)})),Ov=function(n){return{$:2,a:n}},Yv=r((function(n,e){var r=n.a,t=n.b,o=n.c,a=e.eS;return{eS:{bK:r*a.bK,bL:t*a.bL,aa:o*a.aa},e6:r*e.e6,e7:t*e.e7,e8:o*e.e8}})),Xv=function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){var f,s,d={bK:(s=t)[0],bL:s[1],aa:s[2],eF:s[3]},b=(f={eF:d.eF,bK:d.bK*n.a,bL:d.bL*n.b,aa:d.aa*n.c},new Float64Array([f.bK,f.bL,f.aa,f.eF]));return v(e,r,b,o,a,i,c,l,u)}}}}}}}}}},qv=r((function(n,e){switch(e.$){case 0:return Hm;case 5:return u(Iv,e.a,u(qv,n,e.b));case 1:var r=e.b;return u(Um,u(Yv,n,e.a),u(Xv,n,r));case 3:return e;case 2:return Ov(u(Xv,n,r=e.a));default:var t=e.a;return gb(u(Ut,qv(n),t))}})),Gv=r((function(n,e){return u(qv,n,e)})),Jv={src:"\n        precision lowp float;\n        \n        void main () {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        }\n    ",attributes:{},uniforms:{}},Qv=f(Fd,{cH:0,c4:0,dm:15},{bl:Id,bB:Nd,bM:Id,bN:7683},{bl:Id,bB:Nd,bM:Id,bN:7682}),Zv=f(Fd,{cH:0,c4:0,dm:15},{bl:Id,bB:Nd,bM:Id,bN:7682},{bl:Id,bB:Nd,bM:Id,bN:7683}),np=r((function(n,e){return u(yr,n?Zv:Qv,e)})),ep={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 shadowVertexPosition(vec3 position, vec3 normal, mat4 shadowLight, vec4 modelScale, mat4 modelMatrix, mat4 viewMatrix, mat4 projectionMatrix, mat4 sceneProperties) {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            vec3 worldNormal = getWorldNormal(normal, vec4(modelScale.xyz, 1.0), modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 directionToLight = getDirectionToLight(worldPosition.xyz, xyz_type, rgb_parameter);\n            vec3 offset = vec3(0.0, 0.0, 0.0);\n            float sceneDiameter = sceneProperties[3][1];\n            if (dot(directionToLight, worldNormal) <= 0.0) {\n                offset = -sceneDiameter * directionToLight;\n            } else {\n                offset = -0.001 * sceneDiameter * directionToLight;\n            }\n            vec4 offsetPosition = worldPosition + vec4(offset, 0.0);\n            return projectionMatrix * (viewMatrix * offsetPosition);\n        }\n        \n        void main () {\n            gl_Position = shadowVertexPosition(\n                position,\n                normal,\n                shadowLight,\n                modelScale,\n                modelMatrix,\n                viewMatrix,\n                projectionMatrix,\n                sceneProperties\n            );\n        }\n    ",attributes:{normal:"o",position:"em"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"cc",viewMatrix:"f"}},rp=function(n){var e=function(n){if(n.$){var e=n.c;return Fr(l((function(n,r,t,o,a,i,c,l){return d(_d,u(np,o,l),ep,Jv,e,{b:t,c:r,d:i,e:n,cc:c,f:a})})))}return Er}(n);return e.$?Im:Ov(e.a)},tp=o((function(n,e,r,t){var o,a=u(Bv,r,mm),i=(o=w(n,e)).a?o.b?xb(R([a,rp(jm)])):a:o.b?rp(jm):Im,c=Of(t),l=c.a,f=c.b,s=c.c;return u(Wv,Wf(t),u(Gv,S(l,f,s),i))})),op=r((function(n,e){return s(tp,!0,!0,n,e)})),ap=function(n){return{$:0,a:n}},ip=r((function(n,e){return{$:0,a:n,b:e}})),cp=function(n){return n.l},lp=function(n){return vs(n)},up=r((function(n,e){return e/n})),fp=function(n){var e=n;return{bK:vs(e),bL:ps(e)}},sp=r((function(n,e){var r=n.em;return u(yr,{o:tm(n.o),em:rm(r)},e)})),dp=c((function(n,e,r,t,o,a,i){for(;;){if(!i.b)return Qb({d7:e,d8:t,d9:a,ea:n,eb:r,ec:o});var c=i.a,l=i.b,f=pb(c.em),s=vb(c.em),d=mb(c.em);n=u(cb,n,d),e=u(bt,e,d),r=u(cb,r,s),t=u(bt,t,s),o=u(cb,o,f),a=u(bt,a,f),i=l}})),bp=r((function(n,e){var r=pb(n.em),t=vb(n.em),o=mb(n.em);return m(dp,o,o,t,t,r,r,e)})),mp=r((function(n,e){var r=n.$7,t=n.dn;return{bK:e.bK*t.bK+e.bL*r.bK,bL:e.bK*t.bL+e.bL*r.bL,aa:e.bK*t.aa+e.bL*r.aa}})),vp=function(n){return ps(n)},pp=function(n){return 6.283185307179586*n},gp=Ys({cR:Ss,dn:Xs,$7:Rb}),hp=(ra=u(up,72,pp(1)),ta=yf,oa=Pf,ia=f(wf,0,0,aa=u(yb,.5,1)),la=f(wf,0,0,ca=u(yb,-.5,1)),Yb(function(n){var e=f(Sr,sp,D,Tm(n));if(e.b){var r=e.a,t=e.b,o=u(zm,e,hm(n));return s(Hb,u(bp,r,t),n,o,0)}return Xb}(Fm(od(u(Ut,(function(n){var e=u(yb,n,ra),r=u(mp,gp,fp(e)),t=u(yb,lp(e),1),o=u(yb,vp(e),1),a=f(wf,t,o,aa),i=f(wf,t,o,ca),c=u(yb,u(pc,72,n+1),ra),l=u(mp,gp,fp(c)),s=u(yb,lp(c),1),d=u(yb,vp(c),1),b=f(wf,s,d,ca),m=f(wf,s,d,aa);return R([S({o:oa,em:la},{o:oa,em:b},{o:oa,em:i}),S({o:r,em:i},{o:l,em:b},{o:l,em:m}),S({o:r,em:i},{o:l,em:m},{o:r,em:a}),S({o:ta,em:ia},{o:ta,em:a},{o:ta,em:m})])}),u(qr,0,71))))))),xp=Em(hp),Lp=function(n){return n.cR},Cp=function(n){return n.fh},Pp=function(n){return n.fv},Mp=o((function(n,e,r,t){var o,a=function(n){var e,r,t=Bs(n),o=w(r=function(n){var e=n,r=Pc(e.aa),t=Pc(e.bL),o=Pc(e.bK);if(1>T(o,t)){if(1>T(o,r)){var a=tf(e.aa*e.aa+e.bL*e.bL);return{bK:0,bL:-e.aa/a,aa:e.bL/a}}return a=tf(e.bL*e.bL+e.bK*e.bK),{bK:-e.bL/a,bL:e.bK/a,aa:0}}return 1>T(t,r)?(a=tf(e.aa*e.aa+e.bK*e.bK),{bK:e.aa/a,bL:0,aa:-e.bK/a}):(a=tf(e.bK*e.bK+e.bL*e.bL),{bK:-e.bL/a,bL:e.bK/a,aa:0})}(e=t),{bK:e.bL*r.aa-e.aa*r.bL,bL:e.aa*r.bK-e.bK*r.aa,aa:e.bK*r.bL-e.bL*r.bK}),a=o.a,i=o.b;return{cR:Lp(n),dn:a,$7:i,dp:t}}(cp(t)),i=u(Bv,r,hp),c=(o=w(n,e)).a?o.b?xb(R([i,rp(xp)])):i:o.b?rp(xp):Im,l=Pp(t),f=Cp(t);return u(Wv,a,u(Gv,S(l,l,f),c))})),Tp=r((function(n,e){return s(Mp,!0,!0,n,e)})),yp={src:"\n        precision highp float;\n        \n        attribute lowp float triangleVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 triangleVertexPositions;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleVertex), triangleVertexPositions, position, normal);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{triangleVertex:"de"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",triangleVertexPositions:"bH",viewMatrix:"f"}},wp={src:"\n        precision highp float;\n        \n        attribute lowp float triangleVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 triangleVertexPositions;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleVertex), triangleVertexPositions, position, normal);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n        }\n    ",attributes:{triangleVertex:"de"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",triangleVertexPositions:"bH",viewMatrix:"f"}},Sp=function(n){var e=n.a,r=n.b,t=n.c;return Ld({dS:e.bK,dT:r.bK,dU:t.bK,dV:0,dW:e.bL,dX:r.bL,dY:t.bL,dZ:0,d_:e.aa,d$:r.aa,d0:t.aa,d1:0,d2:0,d3:0,d4:0,d5:0})},$p=dm(R([S({de:0},{de:1},{de:2})])),Np=r((function(n,e){var r=nm(e),t=Vv(r);switch(n.$){case 0:if(n.b.$)return Im;var o=n.b.a;return u(Um,t,l((function(n,r,t,a,i,c,l,u){return d(_d,f(qm,a,0,u),yp,Qm,$p,{aI:o,b:t,c:r,d:c,e:n,bH:Sp(e),f:i})})));case 1:if(n.b.$)return Im;var a=n.b.a,i=n.c;return u(Um,t,l((function(n,r,t,o,c,l,s,b){return d(_d,f(qm,o,0,b),yp,av,$p,{aY:u(iv,i,a),b:t,c:r,d:l,e:n,bH:Sp(e),f:c})})));case 2:var c=u(Mv,n.b,n.c);if(c.$)return Im;var b=c.a;return u(Um,t,l((function(n,r,t,o,a,i,c,l){var u=c.a,s=c.b;return d(_d,f(qm,o,0,l),wp,fv,$p,{U:s,bs:u.bs,b$:u.b$,b0:u.b0,b1:u.b1,cI:b,b:t,c:r,d:i,e:n,bH:Sp(e),f:a})})));default:var m=s(Nv,n.b,n.c,n.d,n.e);if(m.$)return Im;var v=m.a,p=m.b,g=m.c;return u(Um,t,l((function(n,r,t,o,a,i,c,l){var u=c.a,s=c.b;return d(_d,f(qm,o,0,l),wp,gv,$p,{cl:v,U:s,bs:u.bs,b$:u.b$,b0:u.b0,b1:u.b1,cL:g,b:t,c:r,d:i,c7:p,e:n,bH:Sp(e),f:a})})))}})),Dp=(ua=R([{a9:u(kd,0,1)},{a9:u(kd,1,1)},{a9:u(kd,2,1)},{a9:u(kd,0,-1)},{a9:u(kd,1,-1)},{a9:u(kd,2,-1)}]),fa=R([S(0,1,2),S(3,5,4),S(3,4,1),S(3,1,0),S(4,5,2),S(4,2,1),S(5,3,0),S(5,0,2)]),u(zm,ua,fa)),zp={src:"\n        precision highp float;\n        \n        attribute highp vec2 triangleShadowVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        uniform highp mat4 triangleVertexPositions;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 shadowVertexPosition(vec3 position, vec3 normal, mat4 shadowLight, vec4 modelScale, mat4 modelMatrix, mat4 viewMatrix, mat4 projectionMatrix, mat4 sceneProperties) {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            vec3 worldNormal = getWorldNormal(normal, vec4(modelScale.xyz, 1.0), modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 directionToLight = getDirectionToLight(worldPosition.xyz, xyz_type, rgb_parameter);\n            vec3 offset = vec3(0.0, 0.0, 0.0);\n            float sceneDiameter = sceneProperties[3][1];\n            if (dot(directionToLight, worldNormal) <= 0.0) {\n                offset = -sceneDiameter * directionToLight;\n            } else {\n                offset = -0.001 * sceneDiameter * directionToLight;\n            }\n            vec4 offsetPosition = worldPosition + vec4(offset, 0.0);\n            return projectionMatrix * (viewMatrix * offsetPosition);\n        }\n        \n        void main () {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleShadowVertex.x), triangleVertexPositions, position, normal);\n            normal *= triangleShadowVertex.y;\n            gl_Position = shadowVertexPosition(\n                position,\n                normal,\n                shadowLight,\n                modelScale,\n                modelMatrix,\n                viewMatrix,\n                projectionMatrix,\n                sceneProperties\n            );\n        }\n    ",attributes:{triangleShadowVertex:"a9"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"cc",triangleVertexPositions:"bH",viewMatrix:"f"}},_p=function(n){return Ov(l((function(e,r,t,o,a,i,c,l){return d(_d,u(np,o,l),zp,Jv,Dp,{b:t,c:r,d:i,e:e,cc:c,bH:Sp(n),f:a})})))},Rp=o((function(n,e,r,t){var o=u(Np,r,t),a=w(n,e);return a.a?a.b?xb(R([o,_p(t)])):o:a.b?_p(t):Im})),Ap=r((function(n,e){return s(Rp,!0,!0,n,e)})),kp=r((function(n,e){var r=Df(e),t=Df(n),o=Nf(e),a=Nf(n),i=$f(e),c=$f(n);return{d7:u(ib,c,i),d8:u(ib,a,o),d9:u(ib,t,r),ea:u(lb,c,i),eb:u(lb,a,o),ec:u(lb,t,r)}})),Kp={src:"\n        precision highp float;\n        \n        attribute lowp float lineSegmentVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp vec3 lineSegmentStartPoint;\n        uniform highp vec3 lineSegmentEndPoint;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = (1.0 - lineSegmentVertex) * lineSegmentStartPoint + lineSegmentVertex * lineSegmentEndPoint;\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{lineSegmentVertex:"dR"},uniforms:{lineSegmentEndPoint:"dP",lineSegmentStartPoint:"dQ",modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Vp=r((function(n,e){return{$:1,a:n,b:e}}))({dz:2,dJ:0,ee:1})(R([w({dR:0},{dR:1})])),Bp=r((function(n,e){var r,t=u(kp,(r=e).a,r.b),o=Vv(t),a=e.a,i=e.b;switch(n.$){case 0:if(n.b.$)return Im;var c=n.b.a;return u(Um,o,l((function(n,e,r,t,o,l,u,f){return d(_d,f,Kp,Qm,Vp,{aI:c,dP:rm(i),dQ:rm(a),b:r,c:e,d:l,e:n,f:o})})));case 1:if(n.b.$)return Im;c=n.b.a;var f=n.c;return u(Um,o,l((function(n,e,r,t,o,l,s,b){return d(_d,b,Kp,av,Vp,{aY:u(iv,f,c),dP:rm(i),dQ:rm(a),b:r,c:e,d:l,e:n,f:o})})));case 2:default:return Im}})),Fp=r((function(n,e){return u(Bp,n,e)})),Ep=t((function(n,e,r){return{$:2,a:n,b:e,c:r}})),jp=function(n){return f(Js,0,1,n>.04045?u(Yi,(n+.055)/1.055,2.4):n/12.92)},Hp=function(n){return f(Ep,0,ap(function(n){var e=xc(n),r=e.cv,t=e.cn;return f(gd,jp(e.c3),jp(r),jp(t))}(n)),ap(0))},Ip=r((function(n,e){return n/e})),Up=a((function(n,e,r,t,o){for(;;){var a=t(e/r),i=u(yr,a,o);if(C(e,n))return i;n=n,e-=1,r=r,t=t,o=i}})),Wp=r((function(n,e){return 1>n?D:d(Up,0,n,n,e,D)})),Op=r((function(n,e){var r=n.em,t=n.N,o=t.a,a=t.b;return u(yr,{o:tm(n.o),em:rm(r),N:u(kd,o,a)},e)})),Yp=r((function(n,e){var r=n,t=e,o=vs(t);return{bK:o*vs(r),bL:o*ps(r),aa:ps(t)}})),Xp=(sa=u(qr,0,71),da=u(Wp,72,u(kv,0,pp(1))),ba=tt(36),ma=u(qr,0,ba-1),va=u(Wp,ba,u(kv,_s(90),_s(-90))),pa=Sm(od(u(Ut,(function(n){return u(Ut,(function(e){return{o:u(Yp,n,e),em:f(wf,u(yb,lp(e)*lp(n),1),u(yb,lp(e)*vp(n),1),u(yb,vp(e),1)),N:w(u(Ip,n,pp(1)),u(Ip,u(fb,_s(90),e),_s(180)))}}),va)}),da))),ga=r((function(n,e){return n*(ba+1)+e})),ha=od(u(Ut,(function(n){return od(u(Ut,(function(e){var r=u(ga,n+1,e),t=u(ga,n,e),o=u(ga,n+1,e+1),a=u(ga,n,e+1);return R([S(a,o,r),S(a,r,t)])}),ma))}),sa)),Yb(function(n){var e=f(Sr,Op,D,Tm(n));if(e.b){var r=e.a,t=e.b,o=u(zm,e,hm(n));return s(Ib,u(bp,r,t),n,o,0)}return Xb}(u(Dm,pa,ha)))),qp=r((function(n,e){for(;;){var r=u(pc,144,2*n+3),t=u(pc,144,2*n+2),o=2*n+1,a=2*n,i=u(yr,S(144,a,t),u(yr,S(a,r,t),u(yr,S(a,o,r),u(yr,S(o,145,r),e))));if(!n)return i;n-=1,e=i}})),Gp=t((function(n,e,r){return r>.5?e+(1-r)*(n-e):n+r*(e-n)})),Jp=(xa=u(r((function(n,e){for(;;){var r=f(Gp,0,6.283185307179586,n/72),t=u(yr,{bP:r,b4:0,ca:1},u(yr,{bP:r,b4:1,ca:1},e));if(!n)return t;n-=1,e=t}})),71,R([{bP:0,b4:0,ca:0},{bP:0,b4:1,ca:0}])),u(zm,xa,u(qp,71,D))),Qp={src:"\n        precision highp float;\n        \n        attribute highp float angle;\n        attribute highp float offsetScale;\n        attribute highp float radiusScale;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const lowp float kPerspectiveProjection = 0.0;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec3 perpendicularTo(vec3 d) {\n            float absX = abs(d.x);\n            float absY = abs(d.y);\n            float absZ = abs(d.z);\n            if (absX <= absY) {\n                if (absX <= absZ) {\n                    float scale = 1.0 / length(d.zy);\n                    return vec3(0.0, -d.z * scale, d.y * scale);\n                } else {\n                    float scale = 1.0 / length(d.xy);\n                    return vec3(-d.y * scale, d.x * scale, 0.0);\n                }\n            } else {\n                if (absY <= absZ) {\n                    float scale = 1.0 / length(d.xz);\n                    return vec3(d.z * scale, 0.0, -d.x * scale);\n                } else {\n                    float scale = 1.0 / length(d.xy);\n                    return vec3(-d.y * scale, d.x * scale, 0.0);\n                }\n            }\n        }\n        \n        void main () {\n            vec4 worldCenter = getWorldPosition(vec3(0.0, 0.0, 0.0), modelScale, modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 zDirection = getDirectionToLight(worldCenter.xyz, xyz_type, rgb_parameter);\n            vec3 xDirection = perpendicularTo(zDirection);\n            vec3 yDirection = cross(zDirection, xDirection);\n            float r = modelScale.x;\n            float adjustedRadius = r;\n            float zOffset = 0.0;\n            if (xyz_type.w == kPointLight) {\n                float distanceToLight = length(xyz_type.xyz - worldCenter.xyz);\n                float rSquared = r * r;\n                zOffset = rSquared / distanceToLight;\n                float zSquared = zOffset * zOffset;\n                adjustedRadius = sqrt(rSquared - zSquared) * radiusScale;\n            }\n            vec3 worldPosition =\n                worldCenter.xyz\n                    + zDirection * zOffset\n                    + xDirection * adjustedRadius * cos(angle)\n                    + yDirection * adjustedRadius * sin(angle);\n            vec3 directionToLight = getDirectionToLight(worldPosition, xyz_type, rgb_parameter);\n            float sceneDiameter = sceneProperties[3][1];\n            vec3 offset = -sceneDiameter * offsetScale * directionToLight;\n            vec4 offsetPosition = vec4(worldPosition + offset, 1.0);\n            gl_Position = projectionMatrix * (viewMatrix * offsetPosition);\n        }\n    ",attributes:{angle:"bP",offsetScale:"b4",radiusScale:"ca"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"cc",viewMatrix:"f"}},Zp=function(){return Ov(l((function(n,e,r,t,o,a,i,c){return d(_d,u(np,!0,c),Qp,Jv,Jp,{aI:f(gd,0,0,1),b:r,c:e,d:a,e:n,cc:i,f:o})})))},ng=r((function(n,e){return u(Uv,function(n){return{dK:!0,r:1,s:0,t:0,u:0,v:1,w:0,x:0,y:0,z:1,J:n.bK,K:n.bL,L:n.aa,cb:1}}(n),e)})),eg=o((function(n,e,r,t){var o,a=u(Bv,r,Xp),i=(o=w(n,e)).a?o.b?xb(R([a,Zp()])):a:o.b?Zp():Im,c=is(t);return u(ng,u(am,Ss,as(t)),u(Gv,S(c,c,c),i))})),rg=r((function(n,e){return s(eg,!0,!0,n,e)})),tg=function(n){switch(n.$){case 0:var e=n.b;return R([u(op,Hp(n.a),e)]);case 1:var r=n.b;return R([u(Ap,Hp(n.a),r)]);case 3:var t=n.b;return R([u(rg,Hp(n.a),t)]);case 2:var o=n.b;return R([u(Tp,Hp(n.a),o)]);case 4:var a=n.b;return R([u(Fp,(i=n.a,u(ip,0,ap(function(n){var e=xc(n);return f(gd,e.c3,e.cv,e.cn)}(i)))),a)]);default:return u(ad,tg,n.a)}var i},og=r((function(n,e){return r={eI:n.eI,ds:n.eM,eP:n.eP,eU:n.eU,dy:w(Xi(n.af.dl),Xi(n.af.cw)),dC:(t=e,u(ad,tg,t)),e1:n.e1,fj:n.fj,fL:n.fL,fQ:n.fQ},u(Fb,{eI:r.eI,ds:r.ds,eP:r.eP,eU:r.eU,dy:r.dy},R([{dC:r.dC,e1:r.e1,fj:r.fj,fL:r.fL,fQ:r.fQ}]));var r,t})),ag=r((function(n,e){var r=n,t=e.eX,o=t.bK,a=t.bL,i=t.aa,c=u(hd,e.cx,e.bS);return{bQ:pb(c),eR:r,bX:vb(c),c0:0,b9:mb(c),df:1,bK:-o,bL:-a,aa:-i}})),ig=r((function(n,e){var r=n.b;return u(ws,u(ns,n.a,{bK:r.a,bL:r.b,aa:r.c}),e)})),cg=t((function(n,e,r){var t=e.H;switch(t.$){case 1:var o=t.a.Y,a=t.a.bx;if(C(t.a.cd,r)){var i=function(){switch(a){case 0:return w({bK:.5,bL:.5,aa:-.5},S(-1,0,0));case 1:return w({bK:-.5,bL:-.5,aa:-.5},S(1,0,0));case 2:return w({bK:-.5,bL:.5,aa:-.5},S(0,-1,0));default:return w({bK:.5,bL:-.5,aa:-.5},S(0,1,0))}}(),c=u(Yi,(n.a8-o)/u(Qu,"duration of step animation",n),2),l=u(cb,Af(90),c*Af(90));return u(ig,i,l)}return At;case 2:return o=t.a.Y,a=t.a.bx,C(t.a.cd,r)?(i=function(){switch(a){case 0:return w({bK:.5,bL:.5,aa:-.5},S(-1,0,0));case 1:return w({bK:-.5,bL:-.5,aa:-.5},S(1,0,0));case 2:return w({bK:-.5,bL:.5,aa:-.5},S(0,-1,0));default:return w({bK:.5,bL:-.5,aa:-.5},S(0,1,0))}}(),c=ps(Pu*((n.a8-o)/u(Qu,"duration of mistake animation",n))),l=f(Js,Af(0),Af(45),c*Af(45)),u(ig,i,l)):At;default:return At}})),lg=u(ns,Ss,Xs),ug=r((function(n,e){return f(ws,lg,n,e)})),fg=u(ns,Ss,Rb),sg=r((function(n,e){return f(ws,fg,n,e)})),dg=r((function(n,e){var r=u(Qu,"cubes side length",n),t=u(ms,-r/4,u(Rf,u(Vf,"color 2",n),S(r,r,r/2))),o=u(ms,r/4,u(Rf,u(Vf,"color 1",n),S(r,r,r/2))),a=e.ah.bV,i=a.a,c=i.a,l=i.b,f=a.b,d=function(){if(f.b)switch(f.a){case 2:return ug(Af(180));case 1:return ug(Af(90));default:return sg(-Af(90))}else switch(f.a){case 2:return At;case 1:return ug(-Af(90));default:return sg(Af(90))}}();return u(bs,l,u(ds,c,u(ms,r/2,s(cg,n,e,w(c,l),d(Ff(R([o,t])))))))})),bg=r((function(n,e){var r=e/2;return u(vf,n,u(zf,f(_f,-r,-r,-r),f(_f,r,r,r)))})),mg=o((function(n,e,r,t){var o=S(n,e,r),a=o.a,i=o.b,c=o.c,l=c>.5?c+i-c*i:c*(i+1),u=2*c-l,f=function(n){var e=0>n?n+1:n>1?n-1:n;return 1>6*e?u+(l-u)*e*6:1>2*e?l:2>3*e?u+(l-u)*(2/3-e)*6:u},d=f(a-1/3),b=f(a),m=f(a+1/3);return s(Ui,m,b,d,t)})),vg=t((function(n,e,r){return s(mg,n,e,r,1)})),pg=t((function(n,e,r){return{bK:n.bK+e*(r.bK-n.bK),bL:n.bL+e*(r.bL-n.bL),aa:n.aa+e*(r.aa-n.aa)}})),gg=t((function(n,e,r){var t=Wf(r),o=qf(t),a=Gf(t),i=Jf(t),c=f(pg,n,e,Yf(t)),l=0>e?{cR:c,dn:zb(o),$7:zb(a),dp:zb(i)}:{cR:c,dn:o,$7:a,dp:i},s=Of(r),d=s.b,b=s.c;return{eL:l,dy:S(pf(u(yb,e,s.a)),pf(u(yb,e,d)),pf(u(yb,e,b)))}})),hg=function(n){return Bs(cp(n))},xg=t((function(n,e,r){var t=pf(u(yb,e,Pp(r))),o=pf(u(yb,e,Cp(r))),a=0>e?zb(hg(r)):hg(r),i=f(pg,n,e,function(n){return Lp(cp(n))}(r));return{l:u(ns,i,a),fh:o,fv:t}})),Lg=t((function(n,e,r){return u(ts,u(pg,n,e),r)})),Cg=t((function(n,e,r){return u(cs,u(yb,Pc(e),is(r)),f(pg,n,e,as(r)))})),Pg=t((function(n,e,r){return u(us,u(pg,n,e),r)})),Mg=r((function(n,e){switch(e.$){case 0:return u(vf,e.a,f(gg,Ss,n,e.b));case 1:return u(If,e.a,f(Pg,Ss,n,e.b));case 3:return u(Hf,e.a,f(Cg,Ss,n,e.b));case 2:return u(Ef,e.a,f(xg,Ss,n,e.b));case 4:return u(jf,e.a,f(Lg,Ss,n,e.b));default:var r=e.a;return Bf(u(Ut,Mg(n),r))}})),Tg=r((function(n,e){return(e-st(e/n)*n)/n})),yg=o((function(n,e,r,t){return n+(e-n)*(1+vs(6.283185307179586*u(Tg,r,t)))/2})),wg=r((function(n,e){var t=function(r){return 3===e.H.$?u(Rt,Mg(.9),ms(s(yg,.1,.7,6,n.a8+.3*r))):At};return Ff(u(Gr,r((function(r,o){return u(bs,o.b,u(ds,o.a,u(ms,-.49,u(t,r,u(bg,function(r){return 3===e.H.$?f(vg,s(yg,0,1,6,n.a8+.03*r),1,.8):nc}(r),1)))))})),function(n){return u(yr,n.a,n.b)}(e.ah.ei)))})),Sg=r((function(n,e){var r=e.a,t=r.a,o=r.b,a=e.b,i=1-u(Qu,"cubes side length",n),c=u(bs,-.5,u(Rf,u(Vf,"wall color",n),S(1+i,i,i))),l=u(Ds,Af(90),c);return u(bs,o,u(ds,t,a?l:c))})),$g=r((function(n,e){return{$:0,a:n,b:e}})),Ng=u(ad,(function(n){var e=n.a,r=n.b;return 3===e&&C(r,-4)?D:3===e?R([u($g,n,0)]):C(r,-4)?R([u($g,n,1)]):R([u($g,n,0),u($g,n,1)])}),u((function(n){return ad((function(e){return u(Ut,(function(n){return w(e,n)}),n)}))}),u(qr,-4,3),u(qr,-4,3))),Dg=r((function(n,e){return w(n,e)})),zg=r((function(n,e){var r=n.a,t=n.b;return u(wc,(function(n){var e=n.a,o=e.a,a=e.b,i=n.b,c=i.a,l=i.b;return t?C(r,e)&&C(c,o+1)||C(r,i)&&C(c,o-1):C(r,e)&&C(l,a-1)||C(r,i)&&C(l,a+1)}),function(n){var e=n.b;return f(Yr,Dg,u(yr,n.a,e),e)}(e))})),_g=r((function(n,e){return Ff(u(Ut,Sg(n),(r=e.ah.ei,u(Nm,(function(n){return!u(zg,n,r)}),Ng))));var r})),Rg={bK:.37208,bL:.37529},Ag=r((function(n,e){return{$:2,a:n,b:e}})),kg=function(n){return{$:0,a:n}},Kg=function(n){return n.eR},Vg=kg(Tb.a),Bg=r((function(n,e){return f(It,r((function(e,r){var t=r.a,o=r.b;return n(e)?w(u(yr,e,t),o):w(t,u(yr,e,o))})),w(D,D),e)})),Fg=function(n){return Ld({dS:n.bK,dT:n.b9,dU:0,dV:0,dW:n.bL,dX:n.bX,dY:0,dZ:0,d_:n.aa,d$:n.bQ,d0:0,d1:0,d2:n.df,d3:n.c0,d4:0,d5:0})},Eg=l((function(n,e,r,t,o,a,i,c){var l=u(Bg,Kg,R([n,e,r,t])),f=l.a;if(f.b){var s=N(f,l.b);if(s.b&&s.b.b&&s.b.b.b&&s.b.b.b.b&&!s.b.b.b.b.b){var d=s.a,b=s.b,m=b.a,v=b.b,p=v.a,g=v.b.a;return u(Ag,u(Ut,Fg,f),{bs:u(Mb,d,m),b$:u(Mb,p,g),b0:u(Mb,o,a),b1:u(Mb,i,c)})}return Vg}return kg({bs:u(Mb,n,e),b$:u(Mb,r,t),b0:u(Mb,o,a),b1:u(Mb,i,c)})})),jg=o((function(n,e,r,t){return v(Eg,n,e,r,t,Pb,Pb,Pb,Pb)})),Hg={$:5},Ig={bK:.44757,bL:.40745},Ug={$:1},Wg=r((function(n,e){var r=n,t=e.em,o=t.bK,a=t.bL,i=t.aa,c=u(hd,e.cx,e.bS);return{bQ:pb(c),eR:r,bX:vb(c),c0:0,b9:mb(c),df:2,bK:o,bL:a,aa:i}})),Og=function(n){return u(Wg,!0,{bS:n.bS,cx:n.cx,em:n.em})},Yg=r((function(n,e){return T(e,n)>0})),Xg=r((function(n,e){var r,t=(r={ch:u(Qu,"azimuth for third light",n),bS:Qs(2e3),ct:u(Qu,"elevation for third light",n),cx:100},u(ag,!0,{bS:r.bS,eX:u(Yp,r.ch,r.ct),cx:r.cx})),o=function(n){return function(n){for(;;){if(C(n.fe,0)&&C(n.ff,0))return Pb;if(!u(Yg,pf(n.fe),pf(n.ff))){var e=Pc(n.ff/Pu),r=Pc(n.fe/Pu),t=n.cf,o=t.bK,a=t.bL,i=t.aa,c=u(hd,1,n.bS);return{bQ:r*pb(c),eR:!1,bX:r*vb(c),c0:e/r,b9:r*mb(c),df:3,bK:o,bL:a,aa:i}}n={bS:n.bS,fe:n.ff,ff:n.fe,cf:zb(n.cf)}}}({bS:n.bS,fe:n.fe,ff:n.ff,cf:u(Yp,n.ch,n.ct)})}({ch:u(Qu,"azimuth for fourth light",n),bS:Rg,ct:u(Qu,"elevation for fourth light",n),fe:120,ff:40}),a=e.ah.bV.a,i=a.a,c=a.b,l=function(){var r=e.H;if(1===r.$){var t=r.a.bx,o=(n.a8-r.a.Y)/u(Qu,"duration of step animation",n),a=function(){switch(t){case 0:return w(0,o);case 1:return w(0,-o);case 2:return w(-o,0);default:return w(o,0)}}();return w(i+a.a,c+a.b)}return w(i,c)}(),f=l.a,d=l.b,b=Og({bS:Ig,cx:u(Qu,"lumens of following lights",n),em:{bK:f+.5,bL:d+.5,aa:u(Qu,"height of following lights",n)}}),m=Og({bS:Rg,cx:u(Qu,"lumens of following lights",n),em:{bK:f-.5,bL:d-.5,aa:u(Qu,"height of following lights",n)}});return u(og,{eI:Ug,eM:u(Vf,"background color",n),eP:Gs(n),eU:.1,e1:1.2*u(Yi,2,6),fj:s(jg,b,m,t,o),af:n.af,fL:Hg,fQ:Rg},R([zs(n),u(dg,n,e),u(_g,n,e),u(wg,n,e)]))}));La={Main:{init:s(bu,r((function(n,e){return u(Nt,D,R([u(Nt,R([u(hl,"position","absolute"),u(hl,"width","100%")]),R([u(mf,n,e)])),u(Xg,n,e)]))})),sf,yu,(function(){return{H:mu,aC:pu,ah:(n={fB:w(-4,3)},e=n.fB,u(xu,u(gu,e,u(hu,2,0)),w(e,D)))};var n,e}))(u(Pt,(function(n){return St({cs:n})}),u(Mt,"devicePixelRatio",Tt)))(0)}},n.Elm?function n(e,r){for(var t in r)t in e?"init"==t?L(6):n(e[t],r[t]):e[t]=r[t]}(n.Elm,La):n.Elm=La}(n);const e=n.Elm.Main.init({node:document.getElementById("elm-node"),flags:{devicePixelRatio:window.devicePixelRatio}});function r(n){const e=[];for(let r=0;r<n.length;r++)e.push({identifier:n[r].identifier,pageX:n[r].pageX,pageY:n[r].pageY});return e}window.addEventListener("touchstart",(n=>{e.ports.touchStart.send(r(n.changedTouches))})),window.addEventListener("touchmove",(n=>{e.ports.touchMove.send(r(n.changedTouches))})),window.addEventListener("touchend",(n=>{e.ports.touchEnd.send(r(n.changedTouches))})),window.addEventListener("touchcancel",(n=>{e.ports.touchCancel.send(r(n.changedTouches))}))}();
//# sourceMappingURL=index.f8e2136f.js.map
