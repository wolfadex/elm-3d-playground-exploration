!function(){var n={};!function(n){function e(n,e,r){return r.a=n,r.f=e,r}function r(n){return e(2,n,(function(e){return function(r){return n(e,r)}}))}function t(n){return e(3,n,(function(e){return function(r){return function(t){return n(e,r,t)}}}))}function o(n){return e(4,n,(function(e){return function(r){return function(t){return function(o){return n(e,r,t,o)}}}}))}function a(n){return e(5,n,(function(e){return function(r){return function(t){return function(o){return function(a){return n(e,r,t,o,a)}}}}}))}function i(n){return e(6,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return n(e,r,t,o,a,i)}}}}}}))}function c(n){return e(7,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return n(e,r,t,o,a,i,c)}}}}}}}))}function l(n){return e(8,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return n(e,r,t,o,a,i,c,l)}}}}}}}}))}function u(n,e,r){return 2===n.a?n.f(e,r):n(e)(r)}function f(n,e,r,t){return 3===n.a?n.f(e,r,t):n(e)(r)(t)}function s(n,e,r,t,o){return 4===n.a?n.f(e,r,t,o):n(e)(r)(t)(o)}function d(n,e,r,t,o,a){return 5===n.a?n.f(e,r,t,o,a):n(e)(r)(t)(o)(a)}function m(n,e,r,t,o,a,i){return 6===n.a?n.f(e,r,t,o,a,i):n(e)(r)(t)(o)(a)(i)}function v(n,e,r,t,o,a,i,c){return 7===n.a?n.f(e,r,t,o,a,i,c):n(e)(r)(t)(o)(a)(i)(c)}function b(n,e,r,t,o,a,i,c,l){return 8===n.a?n.f(e,r,t,o,a,i,c,l):n(e)(r)(t)(o)(a)(i)(c)(l)}var p=t((function(n,e,r){for(var t=Array(n),o=0;n>o;o++)t[o]=r(e+o);return t})),g=r((function(n,e){for(var r=Array(n),t=0;n>t&&e.b;t++)r[t]=e.a,e=e.b;return r.length=t,L(r,e)})),h=r((function(n,e){return e[n]})),x=t((function(n,e,r){for(var t=r.length-1;t>=0;t--)e=u(n,r[t],e);return e}));function C(n){throw Error("https://github.com/elm/core/blob/1.0.0/hints/"+n+".md")}function P(n,e){for(var r,t=[],o=M(n,e,0,t);o&&(r=t.pop());o=M(r.a,r.b,0,t));return o}function M(n,e,r,t){if(n===e)return!0;if("object"!=typeof n||null===n||null===e)return"function"==typeof n&&C(5),!1;if(r>100)return t.push(L(n,e)),!0;for(var o in 0>n.$&&(n=Nr(n),e=Nr(e)),n)if(!M(n[o],e[o],r+1,t))return!1;return!0}function T(n,e,r){if("object"!=typeof n)return n===e?0:e>n?-1:1;if(void 0===n.$)return(r=T(n.a,e.a))||(r=T(n.b,e.b))?r:T(n.c,e.c);for(;n.b&&e.b&&!(r=T(n.a,e.a));n=n.b,e=e.b);return r||(n.b?1:e.b?-1:0)}var y=r((function(n,e){var r=T(n,e);return 0>r?Dr:r?Fr:$r}));function L(n,e){return{a:n,b:e}}function w(n,e,r){return{a:n,b:e,c:r}}function S(n,e){var r={};for(var t in n)r[t]=n[t];for(var t in e)r[t]=e[t];return r}function N(n,e){if("string"==typeof n)return n+e;if(!n.b)return e;var r=F(n.a,e);n=n.b;for(var t=r;n.b;n=n.b)t=t.b=F(n.a,e);return r}var $={$:0};function F(n,e){return{$:1,a:n,b:e}}var D=r(F);function z(n){for(var e=$,r=n.length;r--;)e=F(n[r],e);return e}function _(n){for(var e=[];n.b;n=n.b)e.push(n.a);return e}var A=t((function(n,e,r){for(var t=[];e.b&&r.b;e=e.b,r=r.b)t.push(u(n,e.a,r.a));return z(t)})),R=r((function(n,e){return n*e})),G=r(Math.pow),k=r((function(n,e){var r=e%n;return 0===n?C(11):r>0&&0>n||0>r&&n>0?r+n:r})),B=Math.cos,V=Math.sin,E=Math.tan,j=Math.ceil,I=Math.floor,H=Math.round,W=Math.sqrt,U=Math.log,O=isNaN,q=r((function(n,e){return n+e})),Y=t((function(n,e,r){for(var t=r.length;t--;){var o=r[t],a=r.charCodeAt(t);56320>a||a>57343||(o=r[--t]+o),e=u(n,o,e)}return e})),X=r((function(n,e){return e.split(n)})),Z=r((function(n,e){return e.join(n)})),K=t((function(n,e,r){return r.slice(n,e)})),J=r((function(n,e){return 0===e.indexOf(n)}));function Q(n){return n+""}function nn(n){return{$:2,b:n}}var en=nn((function(n){return"number"!=typeof n?hn("an INT",n):n>-2147483647&&2147483647>n&&(0|n)===n?Gr(n):!isFinite(n)||n%1?hn("an INT",n):Gr(n)})),rn=nn((function(n){return"boolean"==typeof n?Gr(n):hn("a BOOL",n)})),tn=nn((function(n){return"number"==typeof n?Gr(n):hn("a FLOAT",n)})),on=(nn((function(n){return Gr(n)})),nn((function(n){return"string"==typeof n?Gr(n):n instanceof String?Gr(n+""):hn("a STRING",n)}))),an=r((function(n,e){return{$:6,d:n,b:e}}));function cn(n,e){return{$:9,f:n,g:e}}var ln=r((function(n,e){return{$:10,b:e,h:n}})),un=r((function(n,e){return cn(n,[e])})),fn=t((function(n,e,r){return cn(n,[e,r])})),sn=o((function(n,e,r,t){return cn(n,[e,r,t])})),dn=r((function(n,e){try{return vn(n,JSON.parse(e))}catch(n){return zr(u(_r,"This is not valid JSON! "+n.message,e))}})),mn=r((function(n,e){return vn(n,e)}));function vn(n,e){switch(n.$){case 2:return n.b(e);case 5:return null===e?Gr(n.c):hn("null",e);case 3:return pn(e)?bn(n.b,e,z):hn("a LIST",e);case 4:return pn(e)?bn(n.b,e,gn):hn("an ARRAY",e);case 6:var r=n.d;if("object"!=typeof e||null===e||!(r in e))return hn("an OBJECT with a field named `"+r+"`",e);var t=vn(n.b,e[r]);return xt(t)?t:zr(u(Ar,r,t.a));case 7:var o=n.e;return pn(e)?e.length>o?(t=vn(n.b,e[o]),xt(t)?t:zr(u(Rr,o,t.a))):hn("a LONGER array. Need index "+o+" but only see "+e.length+" entries",e):hn("an ARRAY",e);case 8:if("object"!=typeof e||null===e||pn(e))return hn("an OBJECT",e);var a=$;for(var i in e)if(e.hasOwnProperty(i)){if(t=vn(n.b,e[i]),!xt(t))return zr(u(Ar,i,t.a));a=F(L(i,t.a),a)}return Gr(Kr(a));case 9:for(var c=n.f,l=n.g,f=0;l.length>f;f++){if(t=vn(l[f],e),!xt(t))return t;c=c(t.a)}return Gr(c);case 10:return t=vn(n.b,e),xt(t)?vn(n.h(t.a),e):t;case 11:for(var s=$,d=n.g;d.b;d=d.b){if(t=vn(d.a,e),xt(t))return t;s=F(t.a,s)}return zr(kr(Kr(s)));case 1:return zr(u(_r,n.a,e));case 0:return Gr(n.a)}}function bn(n,e,r){for(var t=e.length,o=Array(t),a=0;t>a;a++){var i=vn(n,e[a]);if(!xt(i))return zr(u(Rr,a,i.a));o[a]=i.a}return Gr(r(o))}function pn(n){return Array.isArray(n)||"undefined"!=typeof FileList&&n instanceof FileList}function gn(n){return u(ht,n.length,(function(e){return n[e]}))}function hn(n,e){return zr(u(_r,"Expecting "+n,e))}function xn(n,e){if(n===e)return!0;if(n.$!==e.$)return!1;switch(n.$){case 0:case 1:return n.a===e.a;case 2:return n.b===e.b;case 5:return n.c===e.c;case 3:case 4:case 8:return xn(n.b,e.b);case 6:return n.d===e.d&&xn(n.b,e.b);case 7:return n.e===e.e&&xn(n.b,e.b);case 9:return n.f===e.f&&Cn(n.g,e.g);case 10:return n.h===e.h&&xn(n.b,e.b);case 11:return Cn(n.g,e.g)}}function Cn(n,e){var r=n.length;if(r!==e.length)return!1;for(var t=0;r>t;t++)if(!xn(n[t],e[t]))return!1;return!0}var Pn=r((function(n,e){return JSON.stringify(e,null,n)+""}));function Mn(n){return n}var Tn=t((function(n,e,r){return r[n]=e,r}));function yn(n){return{$:0,a:n}}function Ln(n){return{$:2,b:n,c:null}}var wn=r((function(n,e){return{$:3,b:n,d:e}})),Sn=0;function Nn(n){var e={$:0,e:Sn++,f:n,g:null,h:[]};return An(e),e}function $n(n){return Ln((function(e){e(yn(Nn(n)))}))}function Fn(n,e){n.h.push(e),An(n)}var Dn=r((function(n,e){return Ln((function(r){Fn(n,e),r(yn(0))}))})),zn=!1,_n=[];function An(n){if(_n.push(n),!zn){for(zn=!0;n=_n.shift();)Rn(n);zn=!1}}function Rn(n){for(;n.f;){var e=n.f.$;if(0===e||1===e){for(;n.g&&n.g.$!==e;)n.g=n.g.i;if(!n.g)return;n.f=n.g.b(n.f.a),n.g=n.g.i}else{if(2===e)return void(n.f.c=n.f.b((function(e){n.f=e,An(n)})));if(5===e){if(0===n.h.length)return;n.f=n.f.b(n.h.shift())}else n.g={$:3===e?0:1,b:n.f.b,i:n.g},n.f=n.f.d}}}var Gn={};function kn(n,e,r,t,o){return{b:n,c:e,d:r,e:t,f:o}}function Bn(n,e){var r={g:e,h:void 0},t=n.c,o=n.d,a=n.e,i=n.f;return r.h=Nn(u(wn,(function n(e){return u(wn,n,{$:5,b:function(n){var c=n.a;return 0===n.$?f(o,r,c,e):a&&i?s(t,r,c.i,c.j,e):f(t,r,a?c.i:c.j,e)}})}),n.b))}var Vn=r((function(n,e){return Ln((function(r){n.g(e),r(yn(0))}))})),En=r((function(n,e){return u(Dn,n.h,{$:0,a:e})}));function jn(n){return function(e){return{$:1,k:n,l:e}}}function In(n){return{$:2,m:n}}var Hn=r((function(n,e){return{$:3,n:n,o:e}})),Wn=[],Un=!1;function On(n,e,r){if(Wn.push({p:n,q:e,r:r}),!Un){Un=!0;for(var t;t=Wn.shift();)qn(t.p,t.q,t.r);Un=!1}}function qn(n,e,r){var t={};for(var o in Yn(!0,e,t,null),Yn(!1,r,t,null),n)Fn(n[o],{$:"fx",a:t[o]||{i:$,j:$}})}function Yn(n,e,r,t){switch(e.$){case 1:var o=e.k,a=function(n,e,r,t){return u(n?Gn[e].e:Gn[e].f,(function(n){for(var e=r;e;e=e.t)n=e.s(n);return n}),t)}(n,o,t,e.l);return void(r[o]=function(n,e,r){return r=r||{i:$,j:$},n?r.i=F(e,r.i):r.j=F(e,r.j),r}(n,a,r[o]));case 2:for(var i=e.m;i.b;i=i.b)Yn(n,i.a,r,t);return;case 3:return void Yn(n,e.o,r,{s:e.n,t:t})}}function Xn(n,e){return function(n){Gn[n]&&C(3)}(n),Gn[n]={f:Zn,u:e,a:Kn},jn(n)}var Zn=r((function(n,e){return function(r){return n(e(r))}}));function Kn(n,e){var r=$,o=Gn[n].u,a=yn(null);return Gn[n].b=a,Gn[n].c=t((function(n,e){return r=e,a})),{send:function(n){var t=u(mn,o,n);xt(t)||C(4);for(var a=t.a,i=r;i.b;i=i.b)e(i.a(a))}}}var Jn="undefined"!=typeof document?document:{};function Qn(n,e){n.appendChild(e)}function ne(n){return{$:0,a:n}}var ee,re=r((function(n,e){return r((function(r,t){for(var o=[],a=0;t.b;t=t.b){var i=t.a;a+=i.b||0,o.push(i)}return a+=o.length,{$:1,c:e,d:ue(r),e:o,f:n,b:a}}))}))(void 0),te=r((function(n,e){return r((function(r,t){for(var o=[],a=0;t.b;t=t.b){var i=t.a;a+=i.b.b||0,o.push(i)}return a+=o.length,{$:2,c:e,d:ue(r),e:o,f:n,b:a}}))}))(void 0),oe=r((function(n,e){return{$:4,j:n,k:e,b:1+(e.b||0)}})),ae=r((function(n,e){return{$:"a0",n:n,o:e}})),ie=r((function(n,e){return{$:"a1",n:n,o:e}})),ce=r((function(n,e){return{$:"a2",n:n,o:e}})),le=r((function(n,e){return{$:"a3",n:n,o:e}}));function ue(n){for(var e={};n.b;n=n.b){var r=n.a,t=r.$,o=r.n,a=r.o;if("a2"!==t){var i=e[t]||(e[t]={});"a3"===t&&"class"===o?fe(i,o,a):i[o]=a}else"className"===o?fe(e,o,a):e[o]=a}return e}function fe(n,e,r){var t=n[e];n[e]=t?t+" "+r:r}function se(n,e){var r=n.$;if(5===r)return se(n.k||(n.k=n.m()),e);if(0===r)return Jn.createTextNode(n.a);if(4===r){for(var t=n.k,o=n.j;4===t.$;)"object"!=typeof o?o=[o,t.j]:o.push(t.j),t=t.k;var a={j:o,p:e};return(i=se(t,a)).elm_event_node_ref=a,i}if(3===r)return de(i=n.h(n.g),e,n.d),i;var i=n.f?Jn.createElementNS(n.f,n.c):Jn.createElement(n.c);de(i,e,n.d);for(var c=n.e,l=0;c.length>l;l++)Qn(i,se(1===r?c[l]:c[l].b,e));return i}function de(n,e,r){for(var t in r){var o=r[t];"a1"===t?me(n,o):"a0"===t?pe(n,e,o):"a3"===t?ve(n,o):"a4"===t?be(n,o):("value"!==t&&"checked"!==t||n[t]!==o)&&(n[t]=o)}}function me(n,e){var r=n.style;for(var t in e)r[t]=e[t]}function ve(n,e){for(var r in e){var t=e[r];void 0!==t?n.setAttribute(r,t):n.removeAttribute(r)}}function be(n,e){for(var r in e){var t=e[r],o=t.f,a=t.o;void 0!==a?n.setAttributeNS(o,r,a):n.removeAttributeNS(o,r)}}function pe(n,e,r){var t=n.elmFs||(n.elmFs={});for(var o in r){var a=r[o],i=t[o];if(a){if(i){if(i.q.$===a.$){i.q=a;continue}n.removeEventListener(o,i)}i=ge(e,a),n.addEventListener(o,i,ee&&{passive:2>St(a)}),t[o]=i}else n.removeEventListener(o,i),t[o]=void 0}}try{window.addEventListener("t",null,Object.defineProperty({},"passive",{get:function(){ee=!0}}))}catch(n){}function ge(n,e){function r(e){var t=r.q,o=vn(t.a,e);if(xt(o)){for(var a,i=St(t),c=o.a,l=i?3>i?c.a:c.au:c,u=1==i?c.b:3==i&&c.c6,f=(u&&e.stopPropagation(),(2==i?c.b:3==i&&c.cW)&&e.preventDefault(),n);a=f.j;){if("function"==typeof a)l=a(l);else for(var s=a.length;s--;)l=a[s](l);f=f.p}f(l,u)}}return r.q=e,r}function he(n,e){return n.$==e.$&&xn(n.a,e.a)}function xe(n,e,r,t){var o={$:e,r:r,s:t,t:void 0,u:void 0};return n.push(o),o}function Ce(n,e,r,t){if(n!==e){var o=n.$,a=e.$;if(o!==a){if(1!==o||2!==a)return void xe(r,0,t,e);e=function(n){for(var e=n.e,r=e.length,t=Array(r),o=0;r>o;o++)t[o]=e[o].b;return{$:1,c:n.c,d:n.d,e:t,f:n.f,b:n.b}}(e),a=1}switch(a){case 5:for(var i=n.l,c=e.l,l=i.length,u=l===c.length;u&&l--;)u=i[l]===c[l];if(u)return void(e.k=n.k);e.k=e.m();var f=[];return Ce(n.k,e.k,f,0),void(f.length>0&&xe(r,1,t,f));case 4:for(var s=n.j,d=e.j,m=!1,v=n.k;4===v.$;)m=!0,"object"!=typeof s?s=[s,v.j]:s.push(v.j),v=v.k;for(var b=e.k;4===b.$;)m=!0,"object"!=typeof d?d=[d,b.j]:d.push(b.j),b=b.k;return m&&s.length!==d.length?void xe(r,0,t,e):((m?function(n,e){for(var r=0;n.length>r;r++)if(n[r]!==e[r])return!1;return!0}(s,d):s===d)||xe(r,2,t,d),void Ce(v,b,r,t+1));case 0:return void(n.a!==e.a&&xe(r,3,t,e.a));case 1:return void Pe(n,e,r,t,Te);case 2:return void Pe(n,e,r,t,ye);case 3:if(n.h!==e.h)return void xe(r,0,t,e);var p=Me(n.d,e.d);p&&xe(r,4,t,p);var g=e.i(n.g,e.g);return void(g&&xe(r,5,t,g))}}}function Pe(n,e,r,t,o){if(n.c===e.c&&n.f===e.f){var a=Me(n.d,e.d);a&&xe(r,4,t,a),o(n,e,r,t)}else xe(r,0,t,e)}function Me(n,e,r){var t;for(var o in n)if("a1"!==o&&"a0"!==o&&"a3"!==o&&"a4"!==o)if(o in e){var a=n[o],i=e[o];a===i&&"value"!==o&&"checked"!==o||"a0"===r&&he(a,i)||((t=t||{})[o]=i)}else(t=t||{})[o]=r?"a1"===r?"":"a0"===r||"a3"===r?void 0:{f:n[o].f,o:void 0}:"string"==typeof n[o]?"":null;else{var c=Me(n[o],e[o]||{},o);c&&((t=t||{})[o]=c)}for(var l in e)l in n||((t=t||{})[l]=e[l]);return t}function Te(n,e,r,t){var o=n.e,a=e.e,i=o.length,c=a.length;i>c?xe(r,6,t,{v:c,i:i-c}):c>i&&xe(r,7,t,{v:i,e:a});for(var l=c>i?i:c,u=0;l>u;u++){var f=o[u];Ce(f,a[u],r,++t),t+=f.b||0}}function ye(n,e,r,t){for(var o=[],a={},i=[],c=n.e,l=e.e,u=c.length,f=l.length,s=0,d=0,m=t;u>s&&f>d;){var v=(w=c[s]).a,b=(S=l[d]).a,p=w.b,g=S.b,h=void 0,x=void 0;if(v!==b){var C=c[s+1],P=l[d+1];if(C){var M=C.a,T=C.b;x=b===M}if(P){var y=P.a,L=P.b;h=v===y}if(h&&x)Ce(p,L,o,++m),we(a,o,v,g,d,i),m+=p.b||0,Se(a,o,v,T,++m),m+=T.b||0,s+=2,d+=2;else if(h)m++,we(a,o,b,g,d,i),Ce(p,L,o,m),m+=p.b||0,s+=1,d+=2;else if(x)Se(a,o,v,p,++m),m+=p.b||0,Ce(T,g,o,++m),m+=T.b||0,s+=2,d+=1;else{if(!C||M!==y)break;Se(a,o,v,p,++m),we(a,o,b,g,d,i),m+=p.b||0,Ce(T,L,o,++m),m+=T.b||0,s+=2,d+=2}}else Ce(p,g,o,++m),m+=p.b||0,s++,d++}for(;u>s;){var w;m++,Se(a,o,(w=c[s]).a,p=w.b,m),m+=p.b||0,s++}for(;f>d;){var S,N=N||[];we(a,o,(S=l[d]).a,S.b,void 0,N),d++}(o.length>0||i.length>0||N)&&xe(r,8,t,{w:o,x:i,y:N})}var Le="_elmW6BL";function we(n,e,r,t,o,a){var i=n[r];if(!i)return a.push({r:o,A:i={c:0,z:t,r:o,s:void 0}}),void(n[r]=i);if(1===i.c){a.push({r:o,A:i}),i.c=2;var c=[];return Ce(i.z,t,c,i.r),i.r=o,void(i.s.s={w:c,A:i})}we(n,e,r+Le,t,o,a)}function Se(n,e,r,t,o){var a=n[r];if(a){if(0===a.c){a.c=2;var i=[];return Ce(t,a.z,i,o),void xe(e,9,o,{w:i,A:a})}Se(n,e,r+Le,t,o)}else{var c=xe(e,9,o,void 0);n[r]={c:1,z:t,r:o,s:c}}}function Ne(n,e,r,t){$e(n,e,r,0,0,e.b,t)}function $e(n,e,r,t,o,a,i){for(var c=r[t],l=c.r;l===o;){var u=c.$;if(1===u)Ne(n,e.k,c.s,i);else if(8===u)c.t=n,c.u=i,(f=c.s.w).length>0&&$e(n,e,f,0,o,a,i);else if(9===u){c.t=n,c.u=i;var f,s=c.s;s&&(s.A.s=n,(f=s.w).length>0&&$e(n,e,f,0,o,a,i))}else c.t=n,c.u=i;if(!(c=r[++t])||(l=c.r)>a)return t}var d=e.$;if(4===d){for(var m=e.k;4===m.$;)m=m.k;return $e(n,m,r,t,o+1,a,n.elm_event_node_ref)}for(var v=e.e,b=n.childNodes,p=0;v.length>p;p++){o++;var g=1===d?v[p]:v[p].b,h=o+(g.b||0);if(!(o>l||l>h||(c=r[t=$e(b[p],g,r,t,o,h,i)])&&(l=c.r)<=a))return t;o=h}return t}function Fe(n,e){for(var r=0;e.length>r;r++){var t=e[r],o=t.t,a=De(o,t);o===n&&(n=a)}return n}function De(n,e){switch(e.$){case 0:return function(n,e,r){var t=n.parentNode,o=se(e,r);return o.elm_event_node_ref||(o.elm_event_node_ref=n.elm_event_node_ref),t&&o!==n&&t.replaceChild(o,n),o}(n,e.s,e.u);case 4:return de(n,e.u,e.s),n;case 3:return n.replaceData(0,n.length,e.s),n;case 1:return Fe(n,e.s);case 2:return n.elm_event_node_ref?n.elm_event_node_ref.j=e.s:n.elm_event_node_ref={j:e.s,p:e.u},n;case 6:for(var r=e.s,t=0;r.i>t;t++)n.removeChild(n.childNodes[r.v]);return n;case 7:for(var o=(r=e.s).e,a=n.childNodes[t=r.v];o.length>t;t++)n.insertBefore(se(o[t],e.u),a);return n;case 9:if(!(r=e.s))return n.parentNode.removeChild(n),n;var i=r.A;return void 0!==i.r&&n.parentNode.removeChild(n),i.s=Fe(n,r.w),n;case 8:return function(n,e){var r=e.s,t=function(n,e){if(n){for(var r=Jn.createDocumentFragment(),t=0;n.length>t;t++){var o=n[t].A;Qn(r,2===o.c?o.s:se(o.z,e.u))}return r}}(r.y,e);n=Fe(n,r.w);for(var o=r.x,a=0;o.length>a;a++){var i=o[a],c=i.A,l=2===c.c?c.s:se(c.z,e.u);n.insertBefore(l,n.childNodes[i.r])}return t&&Qn(n,t),n}(n,e);case 5:return e.s(n);default:C(10)}}function ze(n){if(3===n.nodeType)return ne(n.textContent);if(1!==n.nodeType)return ne("");for(var e=$,r=n.attributes,t=r.length;t--;){var o=r[t];e=F(u(le,o.name,o.value),e)}var a=n.tagName.toLowerCase(),i=$,c=n.childNodes;for(t=c.length;t--;)i=F(ze(c[t]),i);return f(re,a,e,i)}var _e=o((function(n,e,r,t){return function(n,e,r,t,o,a){var i=u(mn,n,e?e.flags:void 0);xt(i)||C(2);var c={},l=r(i.a),f=l.a,s=a(m,f),d=function(n,e){var r;for(var t in Gn){var o=Gn[t];o.a&&((r=r||{})[t]=o.a(t,e)),n[t]=Bn(o,e)}return r}(c,m);function m(n,e){var r=u(t,n,f);s(f=r.a,e),On(c,r.b,o(f))}return On(c,l.b,o(f)),d?{ports:d}:{}}(e,t,n.e4,n.fC,n.fv,(function(e,r){var o=n.fE,a=t.node,i=ze(a);return function(n,e){e(n);var r=0;function t(){r=1===r?0:(Re(t),e(n),1)}return function(o,a){n=o,a?(e(n),2===r&&(r=1)):(0===r&&Re(t),r=2)}}(r,(function(n){var r=o(n),t=function(n,e){var r=[];return Ce(n,e,r,0),r}(i,r);a=function(n,e,r,t){return 0===r.length?n:(Ne(n,e,r,t),Fe(n,r))}(a,i,t,e),i=r}))}))})),Ae="undefined"!=typeof cancelAnimationFrame?cancelAnimationFrame:function(n){clearTimeout(n)},Re="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:function(n){return setTimeout(n,1e3/60)},Ge={addEventListener:function(){},removeEventListener:function(){}},ke="undefined"!=typeof document?document:Ge,Be="undefined"!=typeof window?window:Ge,Ve=t((function(n,e,r){return $n(Ln((function(){function t(n){Nn(r(n))}return n.addEventListener(e,t,ee&&{passive:!0}),function(){n.removeEventListener(e,t)}})))})),Ee=r((function(n,e){var r=vn(n,e);return xt(r)?Br(r.a):Vr})),je=r((function(n,e){var r="g";n.fd&&(r+="m"),n.eI&&(r+="i");try{return Br(RegExp(e,r))}catch(n){return Vr}})),Ie=t((function(n,e,r){for(var t,o=[],a=0,i=r,c=e.lastIndex,l=-1;a++<n&&(t=e.exec(i))&&l!=e.lastIndex;){for(var u=t.length-1,f=Array(u);u>0;){var d=t[u];f[--u]=d?Br(d):Vr}o.push(s(Ni,t[0],t.index,a,z(f))),l=e.lastIndex}return e.lastIndex=c,z(o)})),He=0;function We(n,e){for(;e.b;e=e.b)n(e.a)}function Ue(n){for(var e=0;n.b;n=n.b)e++;return e}var Oe="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:function(n){setTimeout(n,1e3/60)},qe=a((function(n,e,r,t,o){return{$:0,a:n,b:e,c:r,d:t,e:o}})),Ye=r((function(n,e){var r=n.blend;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.BLEND),r.enabled=!0),r.a===e.a&&r.d===e.d||(n.gl.blendEquationSeparate(e.a,e.d),r.a=e.a,r.d=e.d),r.b===e.b&&r.c===e.c&&r.e===e.e&&r.f===e.f||(n.gl.blendFuncSeparate(e.b,e.c,e.e,e.f),r.b=e.b,r.c=e.c,r.e=e.e,r.f=e.f),r.g===e.g&&r.h===e.h&&r.i===e.i&&r.j===e.j||(n.gl.blendColor(e.g,e.h,e.i,e.j),r.g=e.g,r.h=e.h,r.i=e.i,r.j=e.j)})),Xe=r((function(n,e){var r=n.depthTest;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.DEPTH_TEST),r.enabled=!0),r.a!==e.a&&(n.gl.depthFunc(e.a),r.a=e.a),r.b!==e.b&&(n.gl.depthMask(e.b),r.b=e.b),r.c===e.c&&r.d===e.d||(n.gl.depthRange(e.c,e.d),r.c=e.c,r.d=e.d)})),Ze=r((function(n,e){var r=n.stencilTest;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.STENCIL_TEST),r.enabled=!0),r.d===e.d&&r.a===e.a&&r.b===e.b||(n.gl.stencilFuncSeparate(n.gl.FRONT,e.d,e.a,e.b),r.d=e.d),r.e===e.e&&r.f===e.f&&r.g===e.g||(n.gl.stencilOpSeparate(n.gl.FRONT,e.e,e.f,e.g),r.e=e.e,r.f=e.f,r.g=e.g),r.c!==e.c&&(n.gl.stencilMask(e.c),r.c=e.c),r.h===e.h&&r.a===e.a&&r.b===e.b||(n.gl.stencilFuncSeparate(n.gl.BACK,e.h,e.a,e.b),r.h=e.h,r.a=e.a,r.b=e.b),r.i===e.i&&r.j===e.j&&r.k===e.k||(n.gl.stencilOpSeparate(n.gl.BACK,e.i,e.j,e.k),r.i=e.i,r.j=e.j,r.k=e.k)})),Ke=r((function(n,e){var r=n.scissor;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.SCISSOR_TEST),r.enabled=!0),r.a===e.a&&r.b===e.b&&r.c===e.c&&r.d===e.d||(n.gl.scissor(e.a,e.b,e.c,e.d),r.a=e.a,r.b=e.b,r.c=e.c,r.d=e.d)})),Je=r((function(n,e){var r=n.colorMask;r.toggle=n.toggle,r.enabled=!0,r.a===e.a&&r.b===e.b&&r.c===e.c&&r.d===e.d||(n.gl.colorMask(e.a,e.b,e.c,e.d),r.a=e.a,r.b=e.b,r.c=e.c,r.d=e.d)})),Qe=r((function(n,e){var r=n.cullFace;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.CULL_FACE),r.enabled=!0),r.a!==e.a&&(n.gl.cullFace(e.a),r.a=e.a)})),nr=r((function(n,e){var r=n.polygonOffset;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.POLYGON_OFFSET_FILL),r.enabled=!0),r.a===e.a&&r.b===e.b||(n.gl.polygonOffset(e.a,e.b),r.a=e.a,r.b=e.b)})),er=r((function(n,e){var r=n.sampleCoverage;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.SAMPLE_COVERAGE),r.enabled=!0),r.a===e.a&&r.b===e.b||(n.gl.sampleCoverage(e.a,e.b),r.a=e.a,r.b=e.b)})),rr=function(n){n.scissor.enabled&&(n.gl.disable(n.gl.SCISSOR_TEST),n.scissor.enabled=!1)},tr=function(n){var e=n.colorMask;e.a&&e.b&&e.c&&e.d||(n.gl.colorMask(!0,!0,!0,!0),e.a=!0,e.b=!0,e.c=!0,e.d=!0)},or=["blend","depthTest","stencilTest","scissor","colorMask","cullFace","polygonOffset","sampleCoverage","sampleAlphaToCoverage"],ar=[function(n){n.blend.enabled&&(n.gl.disable(n.gl.BLEND),n.blend.enabled=!1)},function(n){n.depthTest.enabled&&(n.gl.disable(n.gl.DEPTH_TEST),n.depthTest.enabled=!1)},function(n){n.stencilTest.enabled&&(n.gl.disable(n.gl.STENCIL_TEST),n.stencilTest.enabled=!1)},rr,tr,function(n){n.gl.disable(n.gl.CULL_FACE)},function(n){n.gl.disable(n.gl.POLYGON_OFFSET_FILL)},function(n){n.gl.disable(n.gl.SAMPLE_COVERAGE)},function(n){n.gl.disable(n.gl.SAMPLE_ALPHA_TO_COVERAGE)}];function ir(n,e,r){var t=n.createShader(r);return n.shaderSource(t,"#extension GL_OES_standard_derivatives : enable\n"+e),n.compileShader(t),t}function cr(n,e){switch(e){case n.FLOAT:return{size:1,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC2:return{size:2,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC3:return{size:3,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC4:return{size:4,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_MAT4:return{size:4,arraySize:4,type:Float32Array,baseType:n.FLOAT};case n.INT:return{size:1,arraySize:1,type:Int32Array,baseType:n.INT}}}function lr(n,e,r,t){for(var o=r.a.du,a=[],i=0;o>i;i++)a.push(String.fromCharCode(97+i));var c=cr(n,e.type);if(void 0===c)throw Error("No info available for: "+e.type);var l=0,u=c.size*c.arraySize*o,f=new c.type(Ue(r.b)*u);We((function(n){!function(n,e,r,t,i){var c;if(1===o)for(c=0;e>c;c++)n[r++]=1===e?t[i]:t[i][c];else a.forEach((function(o){for(c=0;e>c;c++)n[r++]=1===e?t[o][i]:t[o][i][c]}))}(f,c.size*c.arraySize,l,n,t[e.name]||e.name),l+=u}),r.b);var s=n.createBuffer();return n.bindBuffer(n.ARRAY_BUFFER,s),n.bufferData(n.ARRAY_BUFFER,f,n.STATIC_DRAW),s}function ur(n,e){return n+"#"+e}var fr=r((function(n,e){var r=n.f,t=r.gl;return t?(t.viewport(0,0,t.drawingBufferWidth,t.drawingBufferHeight),r.depthTest.b||(t.depthMask(!0),r.depthTest.b=!0),r.stencilTest.c!==r.STENCIL_WRITEMASK&&(t.stencilMask(r.STENCIL_WRITEMASK),r.stencilTest.c=r.STENCIL_WRITEMASK),rr(r),tr(r),t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT|t.STENCIL_BUFFER_BIT),We((function(e){if(e.d.b.b){var o,a,i,c,l;if(e.b.id&&e.c.id&&(o=ur(e.b.id,e.c.id),a=r.programs[o]),!a){var u,f;e.b.id?u=r.shaders[e.b.id]:e.b.id=He++,u||(u=ir(t,e.b.src,t.VERTEX_SHADER),r.shaders[e.b.id]=u),e.c.id?f=r.shaders[e.c.id]:e.c.id=He++,f||(f=ir(t,e.c.src,t.FRAGMENT_SHADER),r.shaders[e.c.id]=f);var s=function(n,e,r){var t=n.createProgram();if(n.attachShader(t,e),n.attachShader(t,r),n.linkProgram(t),!n.getProgramParameter(t,n.LINK_STATUS))throw"Link failed: "+n.getProgramInfoLog(t)+"\nvs info-log: "+n.getShaderInfoLog(e)+"\nfs info-log: "+n.getShaderInfoLog(r);return t}(t,u,f);(a={glProgram:s,attributes:Object.assign({},e.b.attributes,e.c.attributes),currentUniforms:{},activeAttributes:[],activeAttributeLocations:[]}).uniformSetters=function(n,e,r,t){var o=r.glProgram,a=r.currentUniforms,i=0,c=e.f;function l(e,r){var t=r.name,o=n.getUniformLocation(e,t);switch(r.type){case n.INT:return function(e){a[t]!==e&&(n.uniform1i(o,e),a[t]=e)};case n.FLOAT:return function(e){a[t]!==e&&(n.uniform1f(o,e),a[t]=e)};case n.FLOAT_VEC2:return function(e){a[t]!==e&&(n.uniform2f(o,e[0],e[1]),a[t]=e)};case n.FLOAT_VEC3:return function(e){a[t]!==e&&(n.uniform3f(o,e[0],e[1],e[2]),a[t]=e)};case n.FLOAT_VEC4:return function(e){a[t]!==e&&(n.uniform4f(o,e[0],e[1],e[2],e[3]),a[t]=e)};case n.FLOAT_MAT4:return function(e){a[t]!==e&&(n.uniformMatrix4fv(o,!1,new Float32Array(e)),a[t]=e)};case n.SAMPLER_2D:var l=i++;return function(e){n.activeTexture(n.TEXTURE0+l);var r=c.textures.get(e);r||(r=e.eM(n),c.textures.set(e,r)),n.bindTexture(n.TEXTURE_2D,r),a[t]!==e&&(n.uniform1i(o,l),a[t]=e)};case n.BOOL:return function(e){a[t]!==e&&(n.uniform1i(o,e),a[t]=e)};default:return function(){}}}for(var u={},f=n.getProgramParameter(o,n.ACTIVE_UNIFORMS),s=0;f>s;s++){var d=n.getActiveUniform(o,s);u[t[d.name]||d.name]=l(o,d)}return u}(t,n,a,Object.assign({},e.b.uniforms,e.c.uniforms));var d=t.getProgramParameter(s,t.ACTIVE_ATTRIBUTES);for(i=0;d>i;i++){var m=t.getActiveAttrib(s,i),v=t.getAttribLocation(s,m.name);a.activeAttributes.push(m),a.activeAttributeLocations.push(v)}o=ur(e.b.id,e.c.id),r.programs[o]=a}r.lastProgId!==o&&(t.useProgram(a.glProgram),r.lastProgId=o),c=a.uniformSetters,Object.keys(l=e.e).forEach((function(n){var e=c[n];e&&e(l[n])}));var b=r.buffers.get(e.d);for(b||(b=function(n,e){if(e.a.dD>0){var r=n.createBuffer(),t=function(n,e){var r,t=new Uint32Array(Ue(n)*e),o=0;return We((function(n){if(1===e)t[o++]=n;else for(r=0;e>r;r++)t[o++]=n[String.fromCharCode(97+r)]}),n),t}(e.c,e.a.dD);return n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,r),n.bufferData(n.ELEMENT_ARRAY_BUFFER,t,n.STATIC_DRAW),{numIndices:t.length,indexBuffer:r,buffers:{}}}return{numIndices:e.a.du*Ue(e.b),indexBuffer:null,buffers:{}}}(t,e.d),r.buffers.set(e.d,b)),i=0;a.activeAttributes.length>i;i++){v=a.activeAttributeLocations[i],void 0===b.buffers[(m=a.activeAttributes[i]).name]&&(b.buffers[m.name]=lr(t,m,e.d,a.attributes)),t.bindBuffer(t.ARRAY_BUFFER,b.buffers[m.name]);var p=cr(t,m.type);if(1===p.arraySize)t.enableVertexAttribArray(v),t.vertexAttribPointer(v,p.size,p.baseType,!1,0,0);else for(var g=4*p.size,h=g*p.arraySize,x=0;p.arraySize>x;x++)t.enableVertexAttribArray(v+x),t.vertexAttribPointer(v+x,p.size,p.baseType,!1,h,g*x)}for(r.toggle=!r.toggle,We(rs(r),e.a),i=0;9>i;i++){var C=r[or[i]];C.toggle!==r.toggle&&C.enabled&&(ar[i](r),C.enabled=!1,C.toggle=r.toggle)}b.indexBuffer?(t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,b.indexBuffer),t.drawElements(e.d.a.d8,b.numIndices,t.UNSIGNED_INT,0)):t.drawArrays(e.d.a.d8,0,b.numIndices)}}),n.g),e):e})),sr=t((function(n,e,r){return function(n,e,r,t){return{$:3,d:ue(n),g:e,h:r,i:t}}(e,{g:r,f:{},h:n},hr,xr)})),dr=r((function(n,e){n.contextAttributes.alpha=!0,n.contextAttributes.premultipliedAlpha=e.a})),mr=r((function(n,e){n.contextAttributes.depth=!0,n.sceneSettings.push((function(n){n.clearDepth(e.a)}))})),vr=r((function(n,e){n.contextAttributes.stencil=!0,n.sceneSettings.push((function(n){n.clearStencil(e.a)}))})),br=r((function(n){n.contextAttributes.antialias=!0})),pr=r((function(n,e){n.sceneSettings.push((function(n){n.clearColor(e.a,e.b,e.c,e.d)}))})),gr=r((function(n){n.contextAttributes.preserveDrawingBuffer=!0}));function hr(n){var e={contextAttributes:{alpha:!1,depth:!1,stencil:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1},sceneSettings:[]};We((function(n){return u(es,e,n)}),n.h);var r=Jn.createElement("canvas"),t=r.getContext&&(r.getContext("webgl",e.contextAttributes)||r.getContext("experimental-webgl",e.contextAttributes));return t&&"undefined"!=typeof WeakMap?(e.sceneSettings.forEach((function(n){n(t)})),t.getExtension("OES_standard_derivatives"),t.getExtension("OES_element_index_uint"),n.f.gl=t,n.f.toggle=!1,n.f.blend={enabled:!1,toggle:!1},n.f.depthTest={enabled:!1,toggle:!1},n.f.stencilTest={enabled:!1,toggle:!1},n.f.scissor={enabled:!1,toggle:!1},n.f.colorMask={enabled:!1,toggle:!1},n.f.cullFace={enabled:!1,toggle:!1},n.f.polygonOffset={enabled:!1,toggle:!1},n.f.sampleCoverage={enabled:!1,toggle:!1},n.f.sampleAlphaToCoverage={enabled:!1,toggle:!1},n.f.shaders=[],n.f.programs={},n.f.lastProgId=null,n.f.buffers=new WeakMap,n.f.textures=new WeakMap,n.f.STENCIL_WRITEMASK=t.getParameter(t.STENCIL_WRITEMASK),Oe((function(){return u(fr,n,r)}))):(r=Jn.createElement("div")).innerHTML='<a href="https://get.webgl.org/">Enable WebGL</a> to see this content!',r}function xr(n,e){return e.f=n.f,fr(e)}var Cr=r((function(n,e){return new Float64Array([n,e])}));new Float64Array(3),new Float64Array(3),new Float64Array(3);var Pr=t((function(n,e,r){return new Float64Array([n,e,r])})),Mr=r((function(n,e){return new Float64Array([e[0]*n,e[1]*n,e[2]*n])})),Tr=o((function(n,e,r,t){return new Float64Array([n,e,r,t])}));new Float64Array(16),new Float64Array(16),new Float64Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);var yr=D,Lr=x,wr=t((function(n,e,t){var o=t.c,a=t.d,i=r((function(e,r){return f(Lr,e.$?n:i,r,e.a)}));return f(Lr,i,f(Lr,n,e,a),o)})),Sr=t((function(n,e,r){for(;;){if(-2===r.$)return e;var t=r.d,o=n,a=f(n,r.b,r.c,f(Sr,n,e,r.e));n=o,e=a,r=t}})),Nr=function(n){return f(Sr,t((function(n,e,r){return u(yr,L(n,e),r)})),$,n)},$r=1,Fr=2,Dr=0,zr=function(n){return{$:1,a:n}},_r=r((function(n,e){return{$:3,a:n,b:e}})),Ar=r((function(n,e){return{$:0,a:n,b:e}})),Rr=r((function(n,e){return{$:1,a:n,b:e}})),Gr=function(n){return{$:0,a:n}},kr=function(n){return{$:2,a:n}},Br=function(n){return{$:0,a:n}},Vr={$:1},Er=Pn,jr=Q,Ir=r((function(n,e){return u(Z,n,_(e))})),Hr=r((function(n,e){return z(u(X,n,e))})),Wr=t((function(n,e,r){for(;;){if(!r.b)return e;var t=r.b,o=n,a=u(n,r.a,e);n=o,e=a,r=t}})),Ur=function(n){return f(Wr,r((function(n,e){return e+1})),0,n)},Or=A,qr=t((function(n,e,r){for(;;){if(T(n,e)>=1)return r;var t=n,o=e-1,a=u(yr,e,r);n=t,e=o,r=a}})),Yr=r((function(n,e){return f(qr,n,e,$)})),Xr=r((function(n,e){return f(Or,n,u(Yr,0,Ur(e)-1),e)})),Zr=function(n){var e=n.charCodeAt(0);return 55296>e||e>56319?e:1024*(e-55296)+n.charCodeAt(1)-56320+65536},Kr=function(n){return f(Wr,yr,$,n)},Jr=function(n){var e=n.charCodeAt(0);return isNaN(e)?Vr:Br(55296>e||e>56319?L(n[0],n.slice(1)):L(n[0]+n[1],n.slice(2)))},Qr=32,nt=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),et=[],rt=j,tt=r((function(n,e){return U(e)/U(n)})),ot=function(n){return n},at=rt(u(tt,2,Qr)),it=s(nt,0,at,et,et),ct=p,lt=function(n){return{$:1,a:n}},ut=I,ft=function(n){return n.length},st=r((function(n,e){return T(n,e)>0?n:e})),dt=R,mt=g,vt=r((function(n,e){for(;;){var r=u(mt,Qr,n),t=r.b,o=u(yr,{$:0,a:r.a},e);if(!t.b)return Kr(o);n=t,e=o}})),bt=r((function(n,e){for(;;){var r=rt(e/Qr);if(1===r)return u(mt,Qr,n).a;n=u(vt,n,$),e=r}})),pt=r((function(n,e){if(e.m){var r=e.m*Qr,t=ut(u(tt,Qr,r-1)),o=n?Kr(e.B):e.B,a=u(bt,o,e.m);return s(nt,ft(e.r)+r,u(st,5,t*at),a,e.r)}return s(nt,ft(e.r),at,et,e.r)})),gt=a((function(n,e,r,t,o){for(;;){if(0>e)return u(pt,!1,{B:t,m:r/Qr|0,r:o});var a=lt(f(ct,Qr,e,n));n=n,e-=Qr,r=r,t=u(yr,a,t),o=o}})),ht=r((function(n,e){if(n>0){var r=n%Qr;return d(gt,e,n-r-Qr,n,$,f(ct,r,n-r,e))}return it})),xt=function(n){return!n.$},Ct=ln,Pt=an,Mt=tn,Tt=u(r((function(n,e){return{S:e,aF:"",X:n,as:""}})),$,$),yt=un,Lt=fn,wt=function(n){return{$:0,a:n}},St=function(n){switch(n.$){case 0:return 0;case 1:return 1;case 2:return 2;default:return 3}},Nt=re("div"),$t=function(n){return{$:1,a:n}},Ft=function(n){return{$:7,a:n}},Dt=function(n){return{$:3,a:n}},zt=t((function(n,e,r){return e(n(r))})),_t=function(n){return n},At=function(n){return n.length},Rt=K,Gt=r((function(n,e){return 1>n?e:f(Rt,n,At(e),e)})),kt=function(n){for(var e=0,r=n.charCodeAt(0),t=43==r||45==r?1:0,o=t;n.length>o;++o){var a=n.charCodeAt(o);if(48>a||a>57)return Vr;e=10*e+a-48}return o==t?Vr:Br(45==r?-e:e)},Bt=J,Vt=yn,Et=Vt(0),jt=o((function(n,e,r,t){if(t.b){var o=t.a,a=t.b;if(a.b){var i=a.a,c=a.b;if(c.b){var l=c.a,d=c.b;if(d.b){var m=d.b;return u(n,o,u(n,i,u(n,l,u(n,d.a,r>500?f(Wr,n,e,Kr(m)):s(jt,n,e,r+1,m)))))}return u(n,o,u(n,i,u(n,l,e)))}return u(n,o,u(n,i,e))}return u(n,o,e)}return e})),It=t((function(n,e,r){return s(jt,n,e,0,r)})),Ht=r((function(n,e){return f(It,r((function(e,r){return u(yr,n(e),r)})),$,e)})),Wt=wn,Ut=r((function(n,e){return u(Wt,(function(e){return Vt(n(e))}),e)})),Ot=t((function(n,e,r){return u(Wt,(function(e){return u(Wt,(function(r){return Vt(u(n,e,r))}),r)}),e)})),qt=function(n){return f(It,Ot(yr),Vt($),n)},Yt=Vn,Xt=r((function(n,e){var r=e;return $n(u(Wt,Yt(n),r))}));Gn.Task=kn(Et,t((function(n,e){return u(Ut,(function(){return 0}),qt(u(Ht,Xt(n),e)))})),t((function(){return Vt(0)})),r((function(n,e){return u(Ut,n,e)})));var Zt=jn("Task"),Kt=r((function(n,e){return Zt(u(Ut,n,e))})),Jt=_e,Qt=r((function(n,e){return{$:0,a:n,b:e}})),no=function(n){return{$:6,a:n}},eo=r((function(n,e){return{$:4,a:n,b:e}})),ro=r((function(n,e){return{$:2,a:n,b:e}})),to=In,oo=Hn,ao=function(n){return{$:1,a:n}},io=t((function(n,e,r){return{cJ:r,el:e,eq:n}})),co=Vt(f(io,$,Vr,0)),lo=function(n){return Ln((function(e){var r=n.f;2===r.$&&r.c&&r.c(),n.f=null,e(yn(0))}))},uo=Ln((function(n){n(yn(Date.now()))})),fo=Ln((function(n){var e=Re((function(){n(yn(Date.now()))}));return function(){Ae(e)}})),so=En,mo=$n,vo=t((function(n,e,r){var t=r.el,o=r.cJ,a=L(t,e);return 1===a.a.$?a.b.b?u(Wt,(function(n){return u(Wt,(function(r){return Vt(f(io,e,Br(n),r))}),uo)}),mo(u(Wt,so(n),fo))):co:a.b.b?Vt(f(io,e,t,o)):u(Wt,(function(){return co}),lo(a.a.a))})),bo=_t,po=t((function(n,e,r){var t=r.eq,o=r.cJ,a=function(r){return u(Yt,n,(0,r.a)(r.$?e-o:bo(e)))};return u(Wt,(function(n){return u(Wt,(function(){return Vt(f(io,t,Br(n),e))}),qt(u(Ht,a,t)))}),mo(u(Wt,so(n),fo)))})),go=t((function(n,e,r){return n(e(r))}));Gn["Browser.AnimationManager"]=kn(co,vo,po,0,r((function(n,e){return e.$?ao(u(go,n,e.a)):{$:0,a:u(go,n,e.a)}})));var ho=jn("Browser.AnimationManager"),xo=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),Co=r((function(n,e){return{ed:e,eq:n}})),Po={$:-2},Mo=Po,To=Vt(u(Co,$,Mo)),yo=function(n){return L(N(n.a?"w_":"d_",n.b),n)},Lo=a((function(n,e,r,t,o){return{$:-1,a:n,b:e,c:r,d:t,e:o}})),wo=a((function(n,e,r,t,o){if(-1!==o.$||o.a){if(-1!==t.$||t.a||-1!==t.d.$||t.d.a)return d(Lo,n,e,r,t,o);var a=t.d;return i=t.e,d(Lo,0,t.b,t.c,d(Lo,1,a.b,a.c,a.d,a.e),d(Lo,1,e,r,i,o))}var i,c=o.b,l=o.c,u=o.d,f=o.e;return-1!==t.$||t.a?d(Lo,n,c,l,d(Lo,0,e,r,t,u),f):d(Lo,0,e,r,d(Lo,1,t.b,t.c,t.d,i=t.e),d(Lo,1,c,l,u,f))})),So=y,No=t((function(n,e,r){if(-2===r.$)return d(Lo,0,n,e,Po,Po);var t=r.a,o=r.b,a=r.c,i=r.d,c=r.e;switch(u(So,n,o)){case 0:return d(wo,t,o,a,f(No,n,e,i),c);case 1:return d(Lo,t,o,e,i,c);default:return d(wo,t,o,a,i,f(No,n,e,c))}})),$o=t((function(n,e,r){var t=f(No,n,e,r);return-1!==t.$||t.a?t:d(Lo,1,t.b,t.c,t.d,t.e)})),Fo=function(n){return f(Wr,r((function(n,e){return f($o,n.a,n.b,e)})),Mo,n)},Do=t((function(n,e,r){for(;;){if(-2===r.$)return e;var t=r.e,o=n,a=f(n,r.b,r.c,f(Do,n,e,r.d));n=o,e=a,r=t}})),zo=i((function(n,e,o,a,i,c){var l=f(Do,t((function(r,t,a){n:for(;;){var i=a.a,c=a.b;if(i.b){var l=i.a,u=l.a,d=l.b,m=i.b;if(0>T(u,r)){r=r,t=t,a=L(m,f(n,u,d,c));continue n}return T(u,r)>0?L(i,f(o,r,t,c)):L(m,s(e,u,d,t,c))}return L(i,f(o,r,t,c))}})),L(Nr(a),c),i),u=l.a,d=l.b;return f(Wr,r((function(e,r){return f(n,e.a,e.b,r)})),d,u)})),_o=r((function(n,e){return{dy:e,dF:n}})),Ao=t((function(n,e,r){return u(Ut,(function(n){return L(e,n)}),f(Ve,r.a?Be:ke,r.b,(function(r){return u(so,n,u(_o,e,r))})))})),Ro=r((function(n,e){return f(Do,$o,e,n)})),Go=t((function(n,e,r){var a=t((function(e,r,t){var o=t.c;return w(t.a,t.b,u(yr,f(Ao,n,e,r),o))})),i=t((function(n,e,r){var t=r.b,o=r.c;return w(u(yr,e,r.a),t,o)})),c=o((function(n,e,r,t){var o=t.c;return w(t.a,f($o,n,e,t.b),o)})),l=u(Ht,yo,e),s=m(zo,i,c,a,r.ed,Fo(l),w($,Mo,$)),d=s.b,v=s.c;return u(Wt,(function(n){return Vt(u(Co,l,u(Ro,d,Fo(n))))}),u(Wt,(function(){return qt(v)}),qt(u(Ht,lo,s.a))))})),ko=t((function(n,e,r){var t=n(e);return t.$?r:u(yr,t.a,r)})),Bo=r((function(n,e){return f(It,ko(n),$,e)}));Gn["Browser.Events"]=kn(To,Go,t((function(n,e,r){var t=e.dF,o=e.dy,a=u(Bo,(function(n){var e=n.b.c;return P(n.a,t)?u(Ee,e,o):Vr}),r.eq);return u(Wt,(function(){return Vt(r)}),qt(u(Ht,Yt(n),a)))})),0,r((function(n,e){return f(xo,e.a,e.b,u(yt,n,e.c))})));var Vo,Eo,jo,Io,Ho,Wo,Uo,Oo,qo,Yo,Xo,Zo,Ko,Jo,Qo,na,ea,ra,ta,oa,aa,ia,ca,la,ua,fa,sa,da,ma,va,ba,pa,ga,ha,xa,Ca,Pa,Ma,Ta=jn("Browser.Events"),ya=t((function(n,e,r){return Ta(f(xo,n,e,r))})),La=u(ya,0,"click"),wa=u(ya,0,"keydown"),Sa=u(ya,0,"keyup"),Na=u(ya,0,"mousedown"),$a=u(ya,0,"mousemove"),Fa=u(ya,0,"mouseup"),Da=en,za=rn,_a=r((function(n,e){return n(e?1:0)})),Aa=function(n){var e=void 0!==Jn.hidden?{e1:"hidden",eL:"visibilitychange"}:void 0!==Jn.mozHidden?{e1:"mozHidden",eL:"mozvisibilitychange"}:void 0!==Jn.msHidden?{e1:"msHidden",eL:"msvisibilitychange"}:void 0!==Jn.webkitHidden?{e1:"webkitHidden",eL:"webkitvisibilitychange"}:{e1:"hidden",eL:"visibilitychange"};return f(ya,0,e.eL,u(yt,_a(n),u(Pt,"target",u(Pt,e.e1,za))))},Ra=on,Ga=function(n){return{$:3,b:n}},ka=Xn("touchCancel",Ga(u(Ct,(function(n){return u(Ct,(function(e){return u(Ct,(function(r){return wt({bl:r,cL:e,cM:n})}),u(Pt,"identifier",Da))}),u(Pt,"pageX",Mt))}),u(Pt,"pageY",Mt)))),Ba=Xn("touchEnd",Ga(u(Ct,(function(n){return u(Ct,(function(e){return u(Ct,(function(r){return wt({bl:r,cL:e,cM:n})}),u(Pt,"identifier",Da))}),u(Pt,"pageX",Mt))}),u(Pt,"pageY",Mt)))),Va=Xn("touchMove",Ga(u(Ct,(function(n){return u(Ct,(function(e){return u(Ct,(function(r){return wt({bl:r,cL:e,cM:n})}),u(Pt,"identifier",Da))}),u(Pt,"pageX",Mt))}),u(Pt,"pageY",Mt)))),Ea=Xn("touchStart",Ga(u(Ct,(function(n){return u(Ct,(function(e){return u(Ct,(function(r){return wt({bl:r,cL:e,cM:n})}),u(Pt,"identifier",Da))}),u(Pt,"pageX",Mt))}),u(Pt,"pageY",Mt)))),ja=to(u(yr,(Ma=u(zt,dt(.001),(function(n){return{$:6,a:n}})),ho(ao(Ma))),u(Ht,oo(Ft),z([(Vo=ro,f(ya,1,"resize",u(Pt,"target",f(Lt,Vo,u(Pt,"innerWidth",Da),u(Pt,"innerHeight",Da))))),Sa(u(yt,Qt(!1),u(Pt,"key",Ra))),wa(u(yt,Qt(!0),u(Pt,"key",Ra))),Aa(Dt),La(wt({$:5})),Na(wt(no(!0))),Fa(wt(no(!1))),$a(f(Lt,eo,u(Pt,"pageX",Mt),u(Pt,"pageY",Mt))),Ea((function(n){return{$:7,a:n}})),Va((function(n){return{$:8,a:n}})),Ba((function(n){return{$:9,a:n}})),ka((function(n){return{$:10,a:n}}))])))),Ia={$:1},Ha=function(n){return{$:2,a:n}},Wa=r((function(n,e){return{$:0,a:n,b:e}})),Ua=function(n){return n.b.k.a},Oa=function(n){var e=n.b.E;return e.b?Br(u(Wa,n.a,{k:e.a,E:e.b,q:N(n.b.q,z([n.b.k]))})):Vr},qa=r((function(n,e){return S(e,{ci:n})})),Ya=r((function(n,e){return S(e,e.I.ci?{I:u(qa,!1,e.I),a4:e.a4+n}:{a4:e.a4+n})})),Xa=r((function(n,e){return e.$?n:e.a})),Za=t((function(n,e,r){var t=r.a,o=r.b;switch(t.$){case 1:return r;case 2:var a=t.a.c7;return(T(a+e,Ua(r).a4)>0?u(zt,Oa,Xa(u(Wa,Ia,o))):_t)(u(Wa,Ha({c7:a+e}),o));default:var i=o.k,c=i.b,l=u(Ya,e,i.a);return u(Wa,t,{k:L(l,u(n,l,c)),E:$,q:N(o.q,z([o.k]))})}})),Ka=r((function(n,e){n:for(;;){if(n>0){if(e.b){n-=1,e=e.b;continue n}return e}return e}})),Ja=t((function(n,e,r){n:for(;;){if(n>0){if(e.b){var t=e.a;n-=1,e=e.b,r=u(yr,t,r);continue n}return r}return r}})),Qa=r((function(n,e){return Kr(f(Ja,n,e,$))})),ni=t((function(n,e,r){if(e>0){var t=L(e,r);n:for(;;){e:for(;;){if(!t.b.b)return r;if(!t.b.b.b){if(1===t.a)break n;break e}switch(t.a){case 1:break n;case 2:var o=t.b;return z([o.a,o.b.a]);case 3:if(t.b.b.b.b){var a=t.b,i=a.b;return z([a.a,i.a,i.b.a])}break e;default:if(t.b.b.b.b&&t.b.b.b.b.b){var c=t.b,l=c.b,s=l.b,d=s.b,m=d.b;return u(yr,c.a,u(yr,l.a,u(yr,s.a,u(yr,d.a,n>1e3?u(Qa,e-4,m):f(ni,n+1,e-4,m)))))}break e}}return r}return z([t.b.a])}return $})),ei=r((function(n,e){return f(ni,0,n,e)})),ri=r((function(n,e){var r=e.b.E,t=N(e.b.q,N(z([e.b.k]),r)),o=u(ei,n,t),a=u(Ka,n,t);if(a.b)return u(Wa,Ia,{k:a.a,E:a.b,q:o});var i=Kr(o);return i.b?u(Wa,Ia,{k:i.a,E:$,q:Kr(i.b)}):e})),ti={$:0},oi=r((function(n,e){switch(n.$){case 1:return function(n){var e=n.b.q,r=n.b.E;return e.b?u(Wa,Ia,{k:e.a,E:N(e.b,N(z([n.b.k]),r)),q:$}):n}(e);case 2:return u(Xa,e,function(n){var e=n.b.k,r=n.b.E,t=Kr(n.b.q);if(t.b){var o=t.b;return Br(u(Wa,Ia,{k:t.a,E:u(yr,e,r),q:Kr(o)}))}return Vr}(e));case 3:return u(Wa,Ia,e.b);case 4:return function(n){return u(Wa,ti,n.b)}(e);case 5:return function(n){var e=n.b;return u(Wa,Ha({c7:Ua(n).a4}),e)}(e);case 6:return u(Xa,e,Oa(e));case 7:return function(n){var e=n.b.q,r=n.b.k,t=Kr(n.b.E);if(t.b){var o=t.b;return u(Wa,Ia,{k:t.a,E:$,q:N(e,N(z([r]),Kr(o)))})}return n}(e);default:return u(ri,n.a,e)}})),ai=r((function(n,e){var r=e.b;return L(n(e.a),r)})),ii=o((function(n,e,r,t){return{ci:t,aS:r,bF:n,bG:e}})),ci=Mo,li={cc:!1,aS:!1,co:!1,O:ci,ai:!1,a1:!1,c3:!1,c4:!1,b9:!1},ui=r((function(n,e){return S(e,{aS:n})})),fi=t((function(n,e,r){return S(r,{bF:n,bG:e})})),si=function(n){if(-1===n.$&&-1===n.d.$&&-1===n.e.$){if(-1!==n.e.d.$||n.e.d.a){var e=n.d,r=n.e;return i=r.b,c=r.c,t=r.d,f=r.e,d(Lo,1,n.b,n.c,d(Lo,0,e.b,e.c,e.d,e.e),d(Lo,0,i,c,t,f))}var t,o=n.d,a=n.e,i=a.b,c=a.c,l=(t=a.d).d,u=t.e,f=a.e;return d(Lo,0,t.b,t.c,d(Lo,1,n.b,n.c,d(Lo,0,o.b,o.c,o.d,o.e),l),d(Lo,1,i,c,u,f))}return n},di=function(n){if(-1===n.$&&-1===n.d.$&&-1===n.e.$){if(-1!==n.d.d.$||n.d.d.a){var e=n.d,r=n.e;return u=r.b,f=r.c,s=r.d,m=r.e,d(Lo,1,t=n.b,o=n.c,d(Lo,0,e.b,e.c,e.d,c=e.e),d(Lo,0,u,f,s,m))}var t=n.b,o=n.c,a=n.d,i=a.d,c=a.e,l=n.e,u=l.b,f=l.c,s=l.d,m=l.e;return d(Lo,0,a.b,a.c,d(Lo,1,i.b,i.c,i.d,i.e),d(Lo,1,t,o,c,d(Lo,0,u,f,s,m)))}return n},mi=c((function(n,e,r,t,o,a,i){if(-1!==a.$||a.a){n:for(;;){if(-1===i.$&&1===i.a){if(-1===i.d.$){if(1===i.d.a)return di(e);break n}return di(e)}break n}return e}return d(Lo,r,a.b,a.c,a.d,d(Lo,0,t,o,a.e,i))})),vi=function(n){if(-1===n.$&&-1===n.d.$){var e=n.a,r=n.b,t=n.c,o=n.d,a=o.d,i=n.e;if(1===o.a){if(-1!==a.$||a.a){var c=si(n);if(-1===c.$){var l=c.e;return d(wo,c.a,c.b,c.c,vi(c.d),l)}return Po}return d(Lo,e,r,t,vi(o),i)}return d(Lo,e,r,t,vi(o),i)}return Po},bi=r((function(n,e){if(-2===e.$)return Po;var r=e.a,t=e.b,o=e.c,a=e.d,i=e.e;if(0>T(n,t)){if(-1===a.$&&1===a.a){var c=a.d;if(-1!==c.$||c.a){var l=si(e);if(-1===l.$){var f=l.e;return d(wo,l.a,l.b,l.c,u(bi,n,l.d),f)}return Po}return d(Lo,r,t,o,u(bi,n,a),i)}return d(Lo,r,t,o,u(bi,n,a),i)}return u(pi,n,v(mi,n,e,r,t,o,a,i))})),pi=r((function(n,e){if(-1===e.$){var r=e.a,t=e.b,o=e.c,a=e.d,i=e.e;if(P(n,t)){var c=function(n){for(;;){if(-1!==n.$||-1!==n.d.$)return n;n=n.d}}(i);return-1===c.$?d(wo,r,c.b,c.c,a,vi(i)):Po}return d(wo,r,t,o,a,u(bi,n,i))}return Po})),gi=r((function(n,e){var r=u(bi,n,e);return-1!==r.$||r.a?r:d(Lo,1,r.b,r.c,r.d,r.e)})),hi=r((function(n,e){return{dn:-e/2,cq:e,ai:-n/2,a1:n/2,bA:e/2,de:n}})),xi=r((function(n,e){return{S:e,X:n}})),Ci=f(Lt,r((function(n,e){return L(n,e)})),u(Pt,"A1",Ra),u(Pt,"A2",Ra)),Pi=sn,Mi=s(Pi,t((function(n,e,r){return w(n,e,r)})),u(Pt,"A1",Mt),u(Pt,"A2",Mt),u(Pt,"A3",Mt)),Ti=f(Lt,r((function(n,e){return L(n,e)})),u(Pt,"A1",Ra),u(Pt,"A2",Mi)),yi=f(Lt,xi,u(Pt,"floats",Ga(Ti)),u(Pt,"colors",Ga(Ci))),Li=dn,wi=r((function(n,e){return e.$?Vr:n(e.a)})),Si=r((function(n,e){return e.$?zr(e.a):n(e.a)})),Ni=o((function(n,e,r,t){return{e3:e,fb:n,fh:r,fu:t}})),$i=Ie,Fi=r((function(n,e){return e.$?zr(n):Gr(e.a)})),Di=je,zi=function(n){return n.b?Br(n.a):Vr},_i=r((function(n,e){return e.$?Vr:Br(n(e.a))})),Ai=r((function(n,e){return e.$?zr(e.a):Gr(n(e.a))})),Ri=r((function(n,e){return Zr(e)-Zr(n)})),Gi=t((function(n,e,r){var t=Zr(r);return 1>T(Zr(n),t)&&1>T(t,Zr(e))})),ki=r((function(n,e){var r=f(Gi,"0","9",e)?Gr(u(Ri,"0",e)):f(Gi,"a","z",e)?Gr(10+u(Ri,"a",e)):f(Gi,"A","Z",e)?Gr(10+u(Ri,"A",e)):zr({$:0,a:e});return u(Si,(function(r){return 0>T(r,n)?Gr(r):zr({$:1,a:e})}),r)})),Bi=r((function(n,e){var r=Jr(e);if(1===r.$)return Gr(0);var t=r.a,o=t.b;return u(Si,(function(e){return u(Si,(function(r){return Gr(e+r*n)}),u(Bi,n,o))}),u(ki,n,t.a))})),Vi=function(n){for(var e=n.length,r=Array(e),t=0;e>t;){var o=n.charCodeAt(t);55296>o||o>56319?(r[e-t]=n[t],t++):(r[e-t]=n[t+1],r[e-++t]=n[t-1],t++)}return r.join("")},Ei=r((function(n,e){return 2>n||n>36?zr({$:2,a:n}):u(Bi,n,Vi(e))})),ji=Ei(16),Ii=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),Hi=t((function(n,e,r){return s(Ii,n,e,r,1)})),Wi=o((function(n,e,r,t){return s(Ii,n,e,r,t)})),Ui=G,Oi=H,qi=r((function(n,e){var r=u(Ui,10,n);return Oi(e*r)/r})),Yi=Y,Xi=function(n){return f(Yi,yr,$,n)},Zi=(Eo=function(n){var e=Xi(n);if(e.b&&!e.b.b){var r=e.a;return _(z([r,r])).join("")}return n},u(zt,(function(n){return n.toLowerCase()}),u(zt,(function(n){return u(_i,(function(e){return f($i,1,e,n)}),u(Di,{eI:!1,fd:!1},"^#?(?:(?:([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2}))|(?:([a-f\\d])([a-f\\d])([a-f\\d]))|(?:([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2}))|(?:([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d])))$"))}),u(zt,wi(zi),u(zt,_i((function(n){return n.fu})),u(zt,_i(Bo(_t)),u(zt,Fi("Parsing hex regex failed"),Si((function(n){var e=u(Ht,u(zt,Eo,u(zt,ji,Ai(ot))),n);n:for(;;){if(e.b&&!e.a.$&&e.b.b&&!e.b.a.$&&e.b.b.b&&!e.b.b.a.$){if(e.b.b.b.b){if(e.b.b.b.a.$||e.b.b.b.b.b)break n;var r=e.b,t=r.b;return Gr(s(Wi,e.a.a/255,r.a.a/255,t.a.a/255,u(qi,2,t.b.a.a/255)))}var o=e.b;return Gr(f(Hi,e.a.a/255,o.a.a/255,o.b.a.a/255))}break n}return zr("Parsing ints from hex failed")}))))))))),Ki=r((function(n,e){return L(e.a,n(e.b))})),Ji=s(Ii,1,1,1,1),Qi=r((function(n,e){return e.$?n:e.a})),nc=u(zt,Li(yi),u(zt,Ai((function(n){return{S:u(Ht,Ki(u(zt,Zi,Qi(Ji))),n.S),aF:"",X:n.X,as:""}})),Qi(Tt))),ec=function(n){return f(Wr,r((function(n,e){return f(Tn,n.a,n.b,e)})),{},n)},rc=Mn,tc=function(n){var e=n.b;return ec(z([L("A1",rc(n.a)),L("A2",rc(e))]))},oc=Mn,ac=function(n){var e=n.b,r=n.c;return ec(z([L("A1",oc(n.a)),L("A2",oc(e)),L("A3",oc(r))]))},ic=function(n){var e=n.b;return ec(z([L("A1",rc(n.a)),L("A2",ac(e))]))},cc=r((function(n,e){return f(Wr,function(n){return r((function(e,r){return r.push(n(e)),r}))}(n),[],e)})),lc=q,uc=function(n){return u(lc,n,"")},fc=t((function(n,e,r){return n>0?f(fc,n>>1,N(e,e),1&n?N(r,e):r):r})),sc=r((function(n,e){return f(fc,n,e,"")})),dc=t((function(n,e,r){return N(u(sc,n-At(r),uc(e)),r)})),mc=function(n){return 0>n||n>1114111?"�":n>65535?String.fromCharCode(Math.floor((n-=65536)/1024)+55296,n%1024+56320):String.fromCharCode(n)},vc=k,bc=function(n){var e=function(n){return 10>n?jr(n):uc(mc(87+n))};return 16>n?e(n):N(bc(n/16|0),e(u(vc,16,n)))},pc=u(zt,bc,u(dc,2,"0")),gc=function(n){return{aQ:n.d,cg:n.c,cp:n.b,cY:n.a}},hc=function(n){var e=gc(n),r=e.cY,t=e.cp,o=e.cg;return u(Ir,"",u(yr,"#",u(Ht,u(zt,Oi,pc),z([255*r,255*t,255*o]))))},xc=u(zt,(function(n){return{S:u(Ht,Ki(hc),n.S),X:n.X}}),u(zt,(function(n){return ec(z([L("floats",u(cc,ic,n.X)),L("colors",u(cc,tc,n.S))]))}),Er(0))),Cc=function(n){return 0>n?-n:n},Pc=function(n){if(0===n.length||/[\sxbo]/.test(n))return Vr;var e=+n;return e==e?Br(e):Vr},Mc=t((function(n,e,r){return u(Xa,NaN,Pc(u(n,e,r)))})),Tc=function(n){return!n},yc=r((function(n,e){for(;;){if(!e.b)return!1;var r=e.b;if(n(e.a))return!0;n=n,e=r}})),Lc=r((function(n,e){var r=u(yc,(function(n){return"0"!==n&&"."!==n}),Xi(e));return N(n&&r?"-":"",e)})),wc=Q,Sc=function(n){var e=n.a,r=n.b;if("9"===e){var t=Jr(r);return 1===t.$?"01":u(lc,"0",Sc(t.a))}var o=Zr(e);return o>=48&&57>o?u(lc,mc(o+1),r):"0"},Nc=function(n){return n===1/0||n===-1/0},$c=O,Fc=t((function(n,e,r){return N(r,u(sc,n-At(r),uc(e)))})),Dc=function(n){var e=u(Hr,".",n);return e.b?L(e.a,e.b.b?e.b.a:"0"):L("0","0")},zc=t((function(n,e,r){if(Nc(r)||$c(r))return wc(r);var t=0>r,o=Dc(function(n){var e=u(Hr,"e",wc(Cc(n)));if(e.b){if(e.b.b){var r=e.a,t=e.b.a,o=u(Xa,0,kt(u(Bt,"+",t)?u(Gt,1,t):t)),a=Dc(r),i=N(a.a,a.b),c=0>o?u(Xa,"0",u(_i,(function(n){return n.a+"."+n.b}),u(_i,ai(uc),Jr(N(u(sc,Cc(o),"0"),i))))):f(Fc,o+1,"0",i);return N(0>n?"-":"",c)}return N(0>n?"-":"",r=e.a)}return""}(Cc(r))),a=o.a,i=o.b,c=At(a)+e,l=N(u(sc,1-c,"0"),f(Fc,c,"0",N(a,i))),s=At(l),d=u(st,1,c),m=u(n,t,f(Rt,d,s,l)),v=f(Rt,0,d,l),b=m?Vi(u(Xa,"1",u(_i,Sc,Jr(Vi(v))))):v,p=At(b),g="0"===b?b:e>0?0>T(e,At(i))?f(Rt,0,p-e,b)+"."+f(Rt,p-e,p,b):N(a+".",f(Fc,e,"0",i)):N(b,u(sc,Cc(e),"0"));return u(Lc,t,g)})),_c=zc(r((function(n,e){var r,t=Jr(e);return 1!==t.$&&("5"===t.a.a?""!==t.a.b||!n:(r=Zr(t.a.a))>53&&n||r>=53&&!n)}))),Ac=Mc(_c),Rc=t((function(n,e,r){var t=u(tt,10,Cc(e-n));return u(Ac,0>t?3:1>t?2:2>t?1:0,r)})),Gc=r((function(n,e){switch(n.$){case 2:var r=nc(e.as);return S(r,{aF:r.aF,as:r.as});case 3:return S(e,{as:n.a});case 4:return S(e,{aF:xc(e)});case 0:var t=n.a,o=n.b;return S(e,{X:u(Ht,(function(n){var e=n.a,r=n.b,a=r.a,i=r.c;return P(e,t)?L(e,w(a,f(Rc,a,i,o),i)):n}),e.X)});default:return t=n.a,o=n.b,S(e,{S:u(Ht,(function(n){var e=n.a;return P(e,t)?L(e,o):n}),e.S)})}})),kc=r((function(n,e){return f($o,n,0,e)})),Bc=r((function(n,e){return u(gi,n,e)})),Vc=t((function(n,e,r){var t=u(n?kc:Bc,e,r.O);switch(e){case" ":return S(r,{O:t,c4:n});case"Enter":return S(r,{co:n,O:t});case"Shift":return S(r,{O:t,c3:n});case"Backspace":return S(r,{cc:n,O:t});case"ArrowUp":return S(r,{O:t,b9:n});case"ArrowDown":return S(r,{aS:n,O:t});case"ArrowLeft":return S(r,{O:t,ai:n});case"ArrowRight":return S(r,{O:t,a1:n});default:return S(r,{O:t})}})),Ec=r((function(n,e){switch(n.$){case 1:var r=n.a.fF;return S(e,{ad:u(hi,r.de,r.cq)});case 2:return S(e,{ad:u(hi,n.a,n.b)});case 3:return S(e,{bm:li,I:s(ii,e.I.bF,e.I.bG,!1,!1)});case 0:return S(e,{bm:f(Vc,n.a,n.b,e.bm)});case 4:return S(e,{I:f(fi,e.ad.ai+n.a,e.ad.bA-n.b,e.I)});case 5:return S(e,{I:u(qa,!0,e.I)});case 6:return S(e,{I:u(ui,n.a,e.I)});case 7:case 8:return S(e,{ae:f(Wr,(function(n){return u($o,n.bl,{bF:e.ad.ai+n.cL,bG:e.ad.bA-n.cM})}),e.ae,n.a)});case 9:case 10:return S(e,{ae:f(Wr,(function(n){return gi(n.bl)}),e.ae,n.a)});default:return S(e,{aR:u(Gc,n.a,e.aR)})}})),jc=r((function(n,e){var r=e.b;return u(Wa,e.a,S(r,{k:u(ai,Ec(n),r.k)}))})),Ic=t((function(n,e,r){var t=r.b,o=t.k;return u(Wa,r.a,S(t,{k:u(Ki,u(n,o.a,e),o)}))})),Hc=o((function(n,e,r,t){switch(r.$){case 0:return t;case 1:return S(t,{a8:r.a});case 2:return S(t,{bf:!1});case 3:return S(t,{bf:!0});case 4:return S(t,{R:f(Ic,e,r.a,t.R)});case 5:return S(t,{R:u(oi,r.a,t.R)});case 7:return S(t,{R:u(jc,r.a,t.R)});default:return S(t,{R:f(Za,n,r.a,t.R)})}})),Wc=(Pa=function(){return{en:(n=ke.body,e=ke.documentElement,{de:Math.max(n.scrollWidth,n.offsetWidth,e.scrollWidth,e.offsetWidth,e.clientWidth),cq:Math.max(n.scrollHeight,n.offsetHeight,e.scrollHeight,e.offsetHeight,e.clientHeight)}),fF:{bF:Be.pageXOffset,bG:Be.pageYOffset,de:ke.documentElement.clientWidth,cq:ke.documentElement.clientHeight}};var n,e},Ln((function(n){Re((function(){n(yn(Pa()))}))}))),Uc=r((function(n,e){return{aR:e,cm:n.cm,bm:li,I:s(ii,0,0,!1,!1),ad:u(hi,600,600),a4:0,ae:Mo}})),Oc=r((function(n,e){return u(Wa,ti,{k:L(n,e(n)),E:$,q:$})})),qc=In,Yc=qc($),Xc=function(n){return{$:11,a:n}},Zc=function(n){return{$:4,a:n}},Kc=function(n){return{$:5,a:n}},Jc={$:2},Qc={$:0},nl=function(n){return{$:1,a:n}},el={$:3},rl=r((function(n){return n})),tl=re("button"),ol=function(n){return n?"Level Editor":"Configurations"},al=function(n){return u(Xa,0,zi(u(Bo,(function(e){return P(ol(e),n)?Br(e):Vr}),z([0,1]))))},il=oe,cl=il,ll=ae,ul=r((function(n,e){return u(ll,n,{$:0,a:e})})),fl=r((function(n,e){return f(It,Pt,e,n)})),sl=u(fl,z(["target","value"]),Ra),dl=function(n){return u(ul,"click",wt(n))},ml=re("option"),vl=re("select"),bl=ie,pl=bl,gl=ne,hl=gl,xl=r((function(n,e){return u(ce,n,rc(e))})),Cl=xl("value"),Pl=r((function(n,e){return{$:1,a:n,b:e}})),Ml=r((function(n,e){return{$:0,a:n,b:e}})),Tl=s(Ii,0,0,0,1),yl=u(tl,z([u(pl,"cursor","pointer"),dl({$:4})]),z([hl("Export Configurations as json")])),Ll=re("h3"),wl=re("p"),Sl=Mn,Nl=r((function(n,e){return u(ce,n,Sl(e))})),$l=Nl("readOnly"),Fl=re("textarea"),Dl=function(n){return u(Nt,$,z([u(Fl,z([$l(!0)]),z([hl(n.aF)]))]))},zl=function(n){return u(Nt,$,z([u(Ll,$,z([hl("Export Configurations")])),u(wl,$,z([yl])),u(wl,$,z([Dl(n)]))]))},_l=xl("htmlFor"),Al=re("hr"),Rl=xl("id"),Gl=u(tl,z([u(pl,"cursor","pointer"),dl({$:2})]),z([hl("Import Configurations")])),kl=function(n){return{$:3,a:n}},Bl=function(n){return L(n,!0)},Vl=r((function(n,e){return u(ll,n,{$:1,a:e})})),El=function(n){return u(Vl,"input",u(yt,Bl,u(yt,n,sl)))},jl=function(n){return u(Nt,$,z([u(Fl,z([El(kl)]),z([hl(n.as)]))]))},Il=function(n){return u(Nt,$,z([u(Ll,$,z([hl("Import Configurations")])),u(wl,$,z([jl(n)])),u(wl,$,z([Gl]))]))},Hl=re("input"),Wl=re("label"),Ul=xl("max"),Ol=xl("min"),ql=xl("name"),Yl=re("span"),Xl=xl("type"),Zl=function(n){return{$:0,a:n}},Kl=function(n){return Ur(n.b.q)},Jl=function(n){return u(Hl,z([u(pl,"position","absolute"),Xl("range"),u(pl,"width","100%"),Ol("0"),Ul(jr((e=n,r=e.b.E,Ur(e.b.q)+1+Ur(r)-1))),Cl(jr(Kl(n))),El(u(zt,kt,u(zt,Xa(0),Zl)))]),$);var e,r},Ql=function(n){var e=n.b.k,r=n.b.E,t=u(Xa,e,zi(n.b.q)).a.a4,o=u(Xa,e,zi(Kr(r))).a.a4-t,a=ut(o/1);return u(Nt,z([u(pl,"position","absolute"),u(pl,"width","100%"),u(pl,"height","20px")]),u(Ht,(function(n){return u(Nt,z([u(pl,"position","absolute"),u(pl,"background-color","yellow"),u(pl,"width","1px"),u(pl,"height","20px"),u(pl,"left",wc(100*n*1/o)+"%")]),$)}),u(Yr,0,a)))},nu={$:1},eu={$:7},ru={$:6},tu={$:2},ou={$:3},au={$:5},iu={$:4},cu=r((function(n,e){return u(tl,z([u(pl,"display","inline-block"),u(pl,"width","30px"),u(pl,"height","30px"),u(pl,"margin","2px"),u(pl,"padding","0px"),u(pl,"top","0px"),u(pl,"font-size","20px"),dl(n)]),z([hl(e)]))})),lu=function(n){return u(Nt,z([u(pl,"width","100%")]),z([(e=n,r=e.a,u(Nt,$,z([u(cu,nu,"⏮️"),u(cu,tu,"◀️"),1===r.$?u(cu,au,"▶️"):u(cu,ou,"⏸️"),r.$?u(cu,iu,"⏺️"):u(cu,ou,"⏹"),u(cu,ru,"⏯️"),u(cu,eu,"⏭️")]))),u(Nt,$,z([Ql(n),Jl(n)]))]));var e,r},uu=t((function(n,e,t){var o,a,i,c,l=t.R.b.k.b,f=u(Nt,z([u(pl,"margin-left","0px")]),z([u(vl,z([(o=u(zt,al,nl),u(ul,"change",u(yt,o,sl))),Cl(ol(t.a8)),u(pl,"width","200px"),u(pl,"height","40px"),u(pl,"font-size","20px")]),u(Ht,(function(n){return u(ml,z([Cl(ol(n))]),z([hl(ol(n))]))}),z([0,1])))])),s=r((function(n,e){return u(tl,z([u(pl,"font-size","30px"),u(pl,"width","40px"),u(pl,"height","40px"),dl(n)]),z([hl(e)]))})),d=Ua(t.R),m=t.a8?u(cl,Zc,u(e,d,l)):u(Nt,$,z([u(cl,Kc,lu(t.R)),u(cl,u(zt,Xc,Ft),(a=d.aR,i=function(n){var e=n.a,r=n.b,t=r.a,o=r.b,a=r.c;return u(Nt,z([u(pl,"margin-top","15px")]),z([u(Nt,$,z([u(Wl,z([_l(e)]),z([hl(e),hl(": "),u(Yl,z([u(pl,"font-family","monospace"),u(pl,"font-weight","bold")]),z([hl(wc(o))]))]))])),u(Hl,z([Xl("range"),Rl(e),ql(e),Ol(wc(t)),Ul(wc(a)),El((function(n){return u(Ml,e,u(Xa,0,Pc(n)))})),u(xl,"step","any"),u(pl,"width","200px"),Cl(wc(o))]),$)]))},c=function(n){var e=n.a,r=n.b;return u(Nt,z([u(pl,"margin-top","15px")]),z([u(Nt,$,z([u(Wl,z([_l(e)]),z([hl(e)]))])),u(Hl,z([Xl("color"),u(pl,"width","200px"),u(pl,"height","30px"),Rl(e),ql(e),El((function(n){return u(Pl,e,u(Qi,Tl,Zi(n)))})),Cl(hc(r))]),$)]))},u(Nt,z([u(pl,"margin-left","20px"),u(pl,"height","100%"),u(pl,"overflow","scroll")]),z([u(Nt,$,u(Ht,i,a.X)),u(Nt,$,u(Ht,c,a.S)),u(Al,$,$),zl(a),Il(a)]))))])),v=u(Nt,z([u(pl,"position","fixed"),u(pl,"top","0px"),u(pl,"left","0px"),u(pl,"width",wc(250)+"px"),u(pl,"height",wc(d.ad.cq)+"px"),u(pl,"font-family",'-apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif'),u(pl,"font-size","16px")]),z(t.bf?[u(Nt,z([u(pl,"height","100px")]),z([u(s,Jc,"✕"),f])),u(Nt,z([u(pl,"height",wc(d.ad.cq-100)+"px")]),z([m]))]:[u(s,el,"≡")])),b=u(Nt,z([u(pl,"position","fixed"),u(pl,"top","0px"),u(pl,"left","0px"),u(pl,"width",wc(d.ad.de)+"px"),u(pl,"height",wc(d.ad.cq)+"px"),u(pl,"font-size","16px")]),z([u(cl,rl(Qc),u(n,d,l))]));return u(Nt,z([u(pl,"touch-action","none"),u(pl,"user-select","none")]),z([b,v]))})),fu=i((function(n,e,t,o,a,i){return Jt({e4:function(n){return L({a8:0,bf:!1,R:u(Oc,u(Uc,n,t),o),dd:0},u(Kt,u(zt,$t,Ft),Wc))},fv:function(n){return 1===n.dd?u(oo,Ft,Aa(Dt)):ja},fC:r((function(n,r){return L(s(Hc,e,i,n,r),Yc)})),fE:u(uu,n,a)})})),su=o((function(n,e,o,a){return m(fu,n,e,o,a,r((function(){return u(Nt,$,$)})),t((function(n,e,r){return r})))})),du=t((function(n,e,r){return s(su,n,e,Tt,r)})),mu=r((function(n,e){return e})),vu=3.141592653589793,bu=function(n){return n*vu/180},pu=function(n){return vu*(n/180)},gu=W,hu=r((function(n,e){var r=e.di-n.di,t=e.bG-n.bG,o=e.bF-n.bF,a=u(st,Cc(o),u(st,Cc(t),Cc(r)));if(a){var i=r/a,c=t/a,l=o/a,f=gu(l*l+c*c+i*i);return Br({bF:l/f,bG:c/f,di:i/f})}return Vr})),xu=r((function(n,e){return{bF:e.bG*n.di-e.di*n.bG,bG:e.di*n.bF-e.bF*n.di,di:e.bF*n.bG-e.bG*n.bF}})),Cu=function(n){var e=n,r=u(st,Cc(e.bF),u(st,Cc(e.bG),Cc(e.di)));if(r){var t=e.di/r,o=e.bG/r,a=e.bF/r,i=gu(a*a+o*o+t*t);return Br({bF:a/i,bG:o/i,di:t/i})}return Vr},Pu=r((function(n,e){return{bF:e.bF-n.bF,bG:e.bG-n.bG,di:e.di-n.di}})),Mu=r((function(n,e){return e.bF*n.bF+e.bG*n.bG+e.di*n.di})),Tu=r((function(n,e){return T(e,n)>0})),yu=r((function(n,e){return 0>T(e,n)})),Lu=r((function(n,e){return{bF:e.bF-n.bF,bG:e.bG-n.bG,di:e.di-n.di}})),wu=r((function(n,e){var r=e.bF*n.bF+e.bG*n.bG+e.di*n.di;return{bF:n.bF*r,bG:n.bG*r,di:n.di*r}})),Su={bF:0,bG:0,di:0},Nu=t((function(n,e,r){return u(wi,(function(t){return u(wi,(function(o){var a,i=u(xu,e,n),c=u(Mu,r,i),l=u(Tu,0,c)?i:u(yu,0,c)?{bF:-(a=i).bF,bG:-a.bG,di:-a.di}:Su;return u(_i,(function(n){return w(t,o,n)}),Cu(l))}),Cu(u(Lu,u(wu,t,e),e)))}),Cu(n))})),$u=function(n){var e=function(n){var e=n,r=Cc(e.di),t=Cc(e.bG),o=Cc(e.bF);if(1>T(o,t)){if(1>T(o,r)){var a=gu(e.di*e.di+e.bG*e.bG);return{bF:0,bG:-e.di/a,di:e.bG/a}}return a=gu(e.bG*e.bG+e.bF*e.bF),{bF:-e.bG/a,bG:e.bF/a,di:0}}return 1>T(t,r)?(a=gu(e.di*e.di+e.bF*e.bF),{bF:e.di/a,bG:0,di:-e.bF/a}):(a=gu(e.bF*e.bF+e.bG*e.bG),{bF:-e.bG/a,bG:e.bF/a,di:0})}(n);return L(e,{bF:n.bG*e.di-n.di*e.bG,bG:n.di*e.bF-n.bF*e.di,di:n.bF*e.bG-n.bG*e.bF})},Fu=r((function(n,e){var r=$u(n);return{cK:e,dg:r.a,dh:r.b,dj:n}})),Du=function(n){var e=u(Pu,n.eX,n.eU),r=n.fB,t=f(Nu,e,r,u(xu,e,r));if(t.$){var o=Cu(e);if(o.$){var a=$u(n.fB);return{cK:n.eU,dg:a.b,dh:n.fB,dj:a.a}}return u(Fu,o.a,n.eU)}var i=t.a;return{cK:n.eU,dg:i.c,dh:i.b,dj:i.a}},zu={bF:0,bG:0,di:0},_u=function(n){return Cc(n)},Au=function(n){return.5*n},Ru=E,Gu={bF:0,bG:1,di:0},ku=function(n){var e,r,t,o=n.eX,a=n.eU,i=n.fB;return e={ew:pu(40),dc:Du({eU:a,eX:o,fB:u(Xa,Gu,u(hu,zu,i))})},t=Au(_u(e.ew)),{cX:(r=Ru(t),{$:0,a:r}),dc:e.dc}},Bu=s(Ii,52/255,101/255,164/255,1),Vu=s(Ii,115/255,210/255,22/255,1),Eu=function(n){return{$:5,a:n}},ju=r((function(n,e){return{$:4,a:n,b:e}})),Iu=r((function(n,e){return{bF:e.bF+n.bF,bG:e.bG+n.bG,di:e.di+n.di}})),Hu=r((function(n,e){return L(n,u(Iu,e,n))})),Wu=t((function(n,e,r){return{bF:n,bG:e,di:r}})),Uu=r((function(n,e){var r=e.b,t=e.c;return f(Wu,n(e.a),n(r),n(t))})),Ou=function(n){return n},qu=r((function(n,e){return u(ju,n,u(Hu,zu,u(Uu,Ou,e)))})),Yu=s(Ii,.8,0,0,1),Xu=(jo=z([u(qu,Yu,w(100,0,0)),u(qu,Vu,w(0,100,0)),u(qu,Bu,w(0,0,100))]),Eu(jo)),Zu=r((function(n,e){return{$:0,a:n,b:e}})),Ku=r((function(n,e){return T(e,n)>-1})),Ju=r((function(n,e){return n+.5*(e-n)})),Qu=r((function(n,e){return e-n})),nf={bF:-1,bG:0,di:0},ef={bF:0,bG:-1,di:0},rf={bF:0,bG:0,di:-1},tf={bF:1,bG:0,di:0},of={bF:0,bG:0,di:1},af=t((function(n,e,r){return{bF:n,bG:e,di:r}})),cf=i((function(n,e,r,t,o,a){var i=u(Ku,r,a)?of:rf,c=u(Ku,e,o)?Gu:ef,l=u(Ku,n,t)?tf:nf,s=w(_u(u(Qu,n,t)),_u(u(Qu,e,o)),_u(u(Qu,r,a)));return{eD:{cK:f(af,u(Ju,n,t),u(Ju,e,o),u(Ju,r,a)),dg:l,dh:c,dj:i},dt:s}})),lf=function(n){return n.bF},uf=function(n){return n.bG},ff=function(n){return n.di},sf=r((function(n,e){return m(cf,lf(n),uf(n),ff(n),lf(e),uf(e),ff(e))})),df=t((function(n,e,r){return{bF:n,bG:e,di:r}})),mf=r((function(n,e){var r=w(e.a/2,e.b/2,e.c/2),t=r.a,o=r.b,a=r.c;return u(Zu,n,u(sf,f(df,-t,-o,-a),f(df,t,o,a)))})),vf=s(Ii,211/255,215/255,207/255,1),bf=r((function(n,e){return{$:2,a:n,b:e}})),pf=r((function(n,e){return{$:3,a:n,b:e}})),gf=r((function(n,e){return{$:1,a:n,b:e}})),hf=t((function(n,e,r){return{bF:n,bG:e,di:r}})),xf=function(n){return n.eD},Cf=function(n){return n.dt},Pf=function(n){return n.cK},Mf=function(n){return n.dg},Tf=function(n){return n.dh},yf=function(n){return n.dj},Lf=r((function(n,e){return{cK:u(Iu,n,Pf(e)),dg:Mf(e),dh:Tf(e),dj:yf(e)}})),wf=r((function(n,e){return{eD:u(Lf,n,xf(e)),dt:Cf(e)}})),Sf=r((function(n,e){return{eO:e,cK:n}})),Nf=r((function(n,e){var r=e;return u(Sf,u(Iu,n,r.cK),r.eO)})),$f=r((function(n,e){var r=e;return{l:u(Nf,n,r.l),e8:r.e8,fm:r.fm}})),Ff=r((function(n,e){var r=e.b;return L(n(e.a),n(r))})),Df=r((function(n,e){return u(Ff,Iu(n),e)})),zf=function(n){return n.eK},_f=function(n){return n.fm},Af=r((function(n,e){return{eK:e,fm:_u(n)}})),Rf=r((function(n,e){return u(Af,_f(e),u(Iu,n,zf(e)))})),Gf=r((function(n,e){var r=e.b,t=e.c;return w(n(e.a),n(r),n(t))})),kf=r((function(n,e){return u(Gf,Iu(n),e)})),Bf=r((function(n,e){var r=n.a,t=n.b,o=n.c,a=f(hf,r,t,o);switch(e.$){case 0:return u(Zu,e.a,u(wf,a,e.b));case 1:return u(gf,e.a,u(kf,a,e.b));case 3:return u(pf,e.a,u(Rf,a,e.b));case 2:return u(bf,e.a,u($f,a,e.b));case 4:return u(ju,e.a,u(Df,a,e.b));default:var i=e.a;return Eu(u(Ht,Bf(w(r,t,o)),i))}})),Vf=function(n){return Bf(w(0,n,0))},Ef=B,jf=r((function(n,e){return(e-ut(e/n)*n)/n})),If=o((function(n,e,r,t){return n+(e-n)*(1+Ef(6.283185307179586*u(jf,r,t)))/2})),Hf=function(n){return u(Vf,s(If,0,1,1,n.a4),u(mf,vf,w(1,1,1)))},Wf=r((function(n){return z([Xu,Hf(n)])})),Uf=function(n){return{$:0,a:n}},Of={$:3},qf=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),Yf=qf,Xf=r((function(n,e){return e.b?f(It,yr,e,n):n})),Zf=function(n){return f(It,Xf,$,n)},Kf=r((function(n,e){return Zf(u(Ht,n,e))})),Jf=function(n){return u(le,"height",jr(n))},Qf=function(n){return te(function(n){return"script"==n?"p":n}(n))},ns=function(n){return{$:2,a:n}},es=r((function(n,e){switch(e.$){case 0:return u(dr,n,e);case 1:return u(mr,n,e);case 2:return u(vr,n,e);case 3:return u(br,n,e);case 4:return u(pr,n,e);default:return u(gr,n,e)}})),rs=r((function(n,e){switch(e.$){case 0:return u(Ye,n,e);case 1:return u(Xe,n,e);case 2:return u(Ze,n,e);case 3:return u(Ke,n,e);case 4:return u(Je,n,e);case 5:return u(Qe,n,e);case 6:return u(nr,n,e);case 7:return u(er,n,e);default:return function(n){var e=n.sampleAlphaToCoverage;e.toggle=n.toggle,e.enabled||(n.gl.enable(n.gl.SAMPLE_ALPHA_TO_COVERAGE),e.enabled=!0)}(n)}})),ts=t((function(n,e,r){return f(sr,n,e,r)})),os=Tr,as=s(os,1,1,1,1),is=t((function(n,e,r){return u(Ht,(function(n){return u(n,e,r)}),n)})),cs=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),ls=r((function(n,e){var r=e.bF,t=e.bG;return f(cs,n*r/t,n,n*(1-r-t)/t)})),us=Pr,fs=r((function(n,e){return f(us,3.2406*(t=(r=u(ls,n,e)).a)-1.5372*(o=r.b)-.4986*(a=r.c),-.9689*t+1.8758*o+.0415*a,.0557*t-.204*o+1.057*a);var r,t,o,a})),ss=r((function(n,e){return{dE:P(n.dE,e.dE),s:n.s*e.s+n.t*e.v+n.u*e.y,t:n.s*e.t+n.t*e.w+n.u*e.z,u:n.s*e.u+n.t*e.x+n.u*e.A,v:n.v*e.s+n.w*e.v+n.x*e.y,w:n.v*e.t+n.w*e.w+n.x*e.z,x:n.v*e.u+n.w*e.x+n.x*e.A,y:n.y*e.s+n.z*e.v+n.A*e.y,z:n.y*e.t+n.z*e.w+n.A*e.z,A:n.y*e.u+n.z*e.x+n.A*e.A,J:e.J+(n.J*e.s+n.K*e.v+n.L*e.y)*e.b7,K:e.K+(n.J*e.t+n.K*e.w+n.L*e.z)*e.b7,L:e.L+(n.J*e.u+n.K*e.x+n.L*e.A)*e.b7,b7:n.b7*e.b7}})),ds=function(n){var e=new Float64Array(16);return e[0]=n.dM,e[1]=n.dQ,e[2]=n.dU,e[3]=n.dY,e[4]=n.dN,e[5]=n.dR,e[6]=n.dV,e[7]=n.dZ,e[8]=n.dO,e[9]=n.dS,e[10]=n.dW,e[11]=n.d_,e[12]=n.dP,e[13]=n.dT,e[14]=n.dX,e[15]=n.d$,e},ms=a((function(n,e,r,t,o){return m(o,n,s(os,t.b7,t.b7,t.b7,t.dE?1:-1),function(n){return ds({dM:n.s,dN:n.v,dO:n.y,dP:n.J,dQ:n.t,dR:n.w,dS:n.z,dT:n.K,dU:n.u,dV:n.x,dW:n.A,dX:n.L,dY:0,dZ:0,d_:0,d$:1})}(t),t.dE,e,r)})),vs=i((function(n,e,r,t,o,a){n:for(;;)switch(o.$){case 0:return a;case 5:var i=o.b;n=n,e=e,r=r,t=u(ss,o.a,t),o=i,a=a;continue n;case 1:return{P:u(yr,d(ms,n,e,r,t,o.b),a.P),Z:a.Z,fq:a.fq};case 3:return{P:a.P,Z:u(yr,d(ms,n,e,r,t,o.b),a.Z),fq:a.fq};case 2:return{P:a.P,Z:a.Z,fq:u(yr,d(ms,n,e,r,t,o.a),a.fq)};default:var c=o.a;return f(Wr,s(vs,n,e,r,t),a,c)}})),bs=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),ps=bs,gs=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),hs=r((function(n,e){return{$:6,a:n,b:e}})),xs=hs,Cs=z([s(gs,518,!1,0,1),s(ps,!1,!1,!1,!1),u(xs,0,1)]),Ps=519,Ms=7681,Ts={src:"\n        precision lowp float;\n\n        void main() {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        }\n    ",attributes:{},uniforms:{}},ys=qe,Ls=r((function(n,e){return{$:0,a:n,b:e}})),ws=Ls({du:1,dD:0,d8:5}),Ss=Cr,Ns=ws(z([{b3:u(Ss,-1,-1)},{b3:u(Ss,1,-1)},{b3:u(Ss,-1,1)},{b3:u(Ss,1,1)}])),$s={src:"\n        precision lowp float;\n\n        attribute vec2 position;\n\n        void main() {\n            gl_Position = vec4(position, 0.0, 1.0);\n        }\n    ",attributes:{position:"b3"},uniforms:{}},Fs=function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return function(f){return{$:2,a:n,b:e,c:r,d:t,e:o,f:a,g:i,h:c,i:l,j:u,k:f}}}}}}}}}}}},Ds=t((function(n,e,t){var o=n.cZ,a=n.cB,i=n.df,c=r((function(n,e){return e(n)})),l=r((function(n,e){return e(n)})),s=function(n){return u(zt,c(n.bw),u(zt,l(n.bh),u(zt,l(n.bH),l(n.bI))))};return u(s,t,u(s,e,f(Fs,o,a,i)))})),zs=function(n){return f(Ds,{cB:n.cB,cZ:n.cZ,df:n.df},{bh:n.bh,bw:n.bw,bH:n.bH,bI:n.bI},{bh:n.bh,bw:n.bw,bH:n.bH,bI:n.bI})},_s=function(n){return d(ys,z([zs(n),s(ps,!1,!1,!1,!1)]),$s,Ts,Ns,{})},As=_s({bh:Ms,cB:0,cZ:8,bw:Ps,df:15,bH:Ms,bI:Ms}),Rs=7680,Gs=function(n){return _s({bh:Rs,cB:15,cZ:8,bw:516,df:(e=n,u(Ui,2,e+4)),bH:5386,bI:5386});var e},ks=t((function(n,e,r){return Zf(z([f(is,n,r,Cs),z([Gs(e),As])]))})),Bs=r((function(n,e){return Zf(u(Xr,ks(n),e))})),Vs=s(gs,513,!0,0,1),Es=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),js=r((function(n,e){return f(Es,32774,n,e)})),Is=function(n){var e=n.b5,t=n.bS,o=n.bM,a=n.bJ,i=n.bO,c=n.aQ;return u(r((function(n,r){var i=n.b,c=n.c,l=r.a,u=r.b,f=r.c;return function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return{$:0,a:n,b:e,c:r,d:t,e:o,f:a,g:i,h:c,i:l,j:u}}}}}}}}}}}(n.a)(i)(c)(l)(u)(f)(e)(t)(o)(a)})),i,c)}({bJ:0,aQ:u(js,1,771),bM:0,bO:u(js,770,771),bS:0,b5:0}),Hs=z([Vs,Is]),Ws=function(n){return n.d3},Us=function(n){return n.d6},Os=function(n){return w(u(Qu,function(n){return n.d4}(n),function(n){return n.d1}(n)),u(Qu,function(n){return n.d5}(n),function(n){return n.d2}(n)),u(Qu,Us(n),Ws(n)))},qs=function(n){return Pf(n)},Ys=function(n){return{cK:{bF:n.J,bG:n.K,di:n.L},dg:{bF:n.s,bG:n.t,di:n.u},dh:{bF:n.v,bG:n.w,di:n.x},dj:{bF:n.y,bG:n.z,di:n.A}}},Xs=r((function(n,e){var r=n.dj,t=n.dh,o=n.dg;return{bF:e.bF*o.bF+e.bG*o.bG+e.di*o.di,bG:e.bF*t.bF+e.bG*t.bG+e.di*t.di,di:e.bF*r.bF+e.bG*r.bG+e.di*r.di}})),Zs=r((function(n,e){var r=n.cK,t=e.bF-r.bF,o=e.bG-r.bG,a=e.di-r.di,i=n.dj,c=n.dh,l=n.dg;return{bF:t*l.bF+o*l.bG+a*l.di,bG:t*c.bF+o*c.bG+a*c.di,di:t*i.bF+o*i.bG+a*i.di}})),Ks=r((function(n,e){return{cK:u(Zs,n,Pf(e)),dg:u(Xs,n,Mf(e)),dh:u(Xs,n,Tf(e)),dj:u(Xs,n,yf(e))}})),Js=r((function(n,e){return u(st,n,e)})),Qs=r((function(n,e){return 0>T(n,e)?n:e})),nd=r((function(n,e){return u(Qs,n,e)})),ed=r((function(n,e){var r=e,t=n;return{d1:u(Js,t.d1,r.d1),d2:u(Js,t.d2,r.d2),d3:u(Js,t.d3,r.d3),d4:u(nd,t.d4,r.d4),d5:u(nd,t.d5,r.d5),d6:u(nd,t.d6,r.d6)}})),rd=r((function(n,e){return e+n})),td=r((function(n,e){var r=n.a,t=n.c,o=Au(_u(n.b)),a=Au(_u(r)),i=Au(_u(t)),c=function(n){return w(n.bF,n.bG,n.di)}(e),l=c.a,f=c.b,s=c.c;return{d1:u(rd,a,l),d2:u(rd,o,f),d3:u(rd,i,s),d4:u(Qu,a,l),d5:u(Qu,o,f),d6:u(Qu,i,s)}})),od=o((function(n,e,r,t){var o=r.eK,a=2*r.e$*e,i=2*r.e_*e,c=2*r.eZ*e,l=o.di*e,s=o.bG*e,d=o.bF*e,m=yf(n),v=Cc(c*m.bF)+Cc(i*m.bG)+Cc(a*m.di),b=Tf(n),p=Cc(c*b.bF)+Cc(i*b.bG)+Cc(a*b.di),g=Mf(n),h=Cc(c*g.bF)+Cc(i*g.bG)+Cc(a*g.di),x=u(td,w(h,p,v),u(Zs,n,f(df,d,s,l)));return Br(t.$?x:u(ed,t.a,x))})),ad=o((function(n,e,r,t){n:for(;;){if(!t.b)return r;var o=t.a,a=t.b;switch(o.$){case 0:n=c=n,e=l=e,r=f=r,t=a;continue n;case 1:var i=s(od,n,e,o.a,r);n=c=n,e=l=e,r=f=i,t=a;continue n;case 2:n=c=n,e=l=e,r=f=r,t=a;continue n;case 3:i=s(od,n,e,o.a,r),n=c=n,e=l=e,r=f=i,t=a;continue n;case 4:var c=n,l=e,f=s(ad,n,e,r,o.a);n=c,e=l,r=f,t=a;continue n;default:var d=o.a,m=o.b,v=u(Ks,Ys(d),n),b=e*d.b7;n=c=n,e=l=e,r=f=s(ad,v,b,r,z([m])),t=a;continue n}}})),id=function(n){return n[0]},cd=function(n){return n[1]},ld=function(n){return n[2]},ud=function(n){return{$:4,a:n}},fd=r((function(n,e){for(;;){if(!n.b)return e;var r=n.a;n=n.b,e=u(yr,r,e)}})),sd=function(n){return ud(u(fd,n,$))},dd={dE:!0,s:1,t:0,u:0,v:0,w:1,x:0,y:0,z:0,A:1,J:0,K:0,L:0,b7:1},md=_s({bh:Ms,cB:0,cZ:8,bw:Ps,df:255,bH:Ms,bI:Ms}),vd={bM:0,eJ:!1,bS:0,cV:0,b5:0,c9:0,bF:0,bG:0,di:0},bd=r((function(n,e){return ds({dM:n.bF,dN:n.b5,dO:e.bF,dP:e.b5,dQ:n.bG,dR:n.bS,dS:e.bG,dT:e.bS,dU:n.di,dV:n.bM,dW:e.di,dX:e.bM,dY:n.c9,dZ:n.cV,d_:e.c9,d$:e.cV})})),pd=L({bo:u(bd,vd,vd),bW:u(bd,vd,vd),bX:u(bd,vd,vd),bY:u(bd,vd,vd)},s(os,0,0,0,0)),gd=r((function(n,e){return n*e})),hd=function(n){return-n},xd=function(n){return s(gs,515,n.af,n.aa,n._)},Cd=z([xd({_:1,aa:0,af:!0}),zs({bh:Rs,cB:240,cZ:0,bw:514,df:0,bH:Rs,bI:Rs}),Is]),Pd=r((function(n,e){var r=n,t=e.eW,o=e.eC,a=_u(e.ff),i=_u(t),c=r.cX;if(c.$){var l=c.a;return Nc(i)?ds({dM:2/(o*l),dN:0,dO:0,dP:0,dQ:0,dR:2/l,dS:0,dT:0,dU:0,dV:0,dW:0,dX:-1,dY:0,dZ:0,d_:0,d$:1}):ds({dM:2/(o*l),dN:0,dO:0,dP:0,dQ:0,dR:2/l,dS:0,dT:0,dU:0,dV:0,dW:-2/(i-a),dX:-(i+a)/(i-a),dY:0,dZ:0,d_:0,d$:1})}var u=c.a;return Nc(i)?ds({dM:1/(o*u),dN:0,dO:0,dP:0,dQ:0,dR:1/u,dS:0,dT:0,dU:0,dV:0,dW:-1,dX:-2*a,dY:0,dZ:0,d_:-1,d$:0}):ds({dM:1/(o*u),dN:0,dO:0,dP:0,dQ:0,dR:1/u,dS:0,dT:0,dU:0,dV:0,dW:-(i+a)/(i-a),dX:-2*i*a/(i-a),dY:0,dZ:0,d_:-1,d$:0})})),Md=r((function(n,e){return 1==(1&n>>e)?0:1})),Td=t((function(n,e,r){return Zf(u(Ht,(function(r){var t=r<<4;return f(is,n,L(e,s(os,u(Md,r,0),u(Md,r,1),u(Md,r,2),u(Md,r,3))),function(n){return z([xd({_:1,aa:0,af:!0}),zs({bh:Rs,cB:240,cZ:n,bw:514,df:0,bH:Rs,bI:Rs}),Is])}(t))}),u(Yr,1,u(Ui,2,r)-1)))})),yd=function(n){return{bF:-n.bF,bG:-n.bG,di:-n.di}},Ld=function(n){return yd(yf(n))},wd=tf,Sd=Gu,Nd=of,$d={cK:zu,dg:wd,dh:Sd,dj:Nd},Fd=r((function(n,e){var r,t,o,a,i;return t=Pf(r=u(Ks,e,n)),o=yf(r),a=Tf(r),i=Mf(r),ds({dM:i.bF,dN:a.bF,dO:o.bF,dP:t.bF,dQ:i.bG,dR:a.bG,dS:o.bG,dT:t.bG,dU:i.di,dV:a.di,dW:o.di,dX:t.di,dY:0,dZ:0,d_:0,d$:1})})),Dd=function(n){return Mf(n)},zd=function(n){return Tf(n)},_d=r((function(n,e){var r,t=z([(1,{$:1,a:1}),ns(0),Uf(!0),s(Yf,0,0,0,0)]),o=function(){var e=n.eA;switch(e.$){case 0:return w(t,"0",1);case 1:return w(u(yr,Of,t),"1",1);default:return w(t,"0",e.a)}}(),a=o.a,i=o.b,c=o.c,l=n.dt,d=l.a,v=l.b,b=u(pl,"height",jr(v)+"px"),p=d,g=p/v,h=u(Kf,(function(e){return function(n){var e=function(n){return n.dc}(n.eH),r={cK:qs(e),dg:Dd(e),dh:zd(e),dj:yd(Ld(e))},t=sd(n.dx),o=s(ad,r,1,Vr,z([t]));if(1===o.$)return $;var a=o.a,i=u(Fd,$d,e),c=u(gd,.99,u(Js,_u(n.dq),hd(Ws(a)))),l=Os(a),d=function(n){var e=n,r=u(st,Cc(e.bF),u(st,Cc(e.bG),Cc(e.di)));if(r){var t=e.di/r,o=e.bG/r,a=e.bF/r;return gu(a*a+o*o+t*t)*r}return 0}(f(Wu,l.a,l.b,l.c)),v=u(gd,1.01,u(rd,d,hd(Us(a)))),b=u(Pd,n.eH,{eC:n.eC,eW:v,ff:c}),p=function(n){return{dM:n[0],dQ:n[1],dU:n[2],dY:n[3],dN:n[4],dR:n[5],dV:n[6],dZ:n[7],dO:n[8],dS:n[9],dW:n[10],d_:n[11],dP:n[12],dT:n[13],dX:n[14],d$:n[15]}}(b).d$,g=p?yd(Ld(e)):qs(e),h=function(){var e=n.fA;switch(e.$){case 0:return L(0,0);case 1:return L(1,0);case 2:return L(2,0);case 3:return L(3,e.a);case 4:return L(4,e.a);default:return L(5,0)}}(),x=h.a,C=h.b,P=u(fs,n.eT,n.fG),M=ds({dM:0,dN:g.bF,dO:id(P),dP:n.er,dQ:0,dR:g.bG,dS:cd(P),dT:d,dU:0,dV:g.di,dW:ld(P),dX:x,dY:0,dZ:p,d_:0,d$:C}),T=m(vs,M,i,b,dd,t,{P:$,Z:$,fq:$}),y=n.fa;switch(y.$){case 0:return Zf(z([f(is,T.P,L(w=y.a,as),Hs),f(is,T.Z,pd,Hs)]));case 1:var w=y.a;return Zf(z([f(is,T.P,pd,Hs),z([md]),f(is,T.fq,w.bo,Cs),z([Gs(0)]),f(is,T.P,L(w,as),Cd),f(is,T.Z,pd,Hs)]));default:var S=y.a,N=y.b;return Zf(z([f(is,T.P,L(N,as),Hs),z([md]),u(Bs,T.fq,S),f(Td,T.P,N,Ur(S)),f(is,T.Z,pd,Hs)]))}}({eC:g,eH:n.eH,dq:n.dq,dx:e.dx,eT:e.eT,fa:e.fa,er:c,fA:e.fA,fG:e.fG})}),e),x=u(pl,"width",jr(p)+"px"),C=function(n){var e,r,t=n.b,o=n.c,a=n.d,i=function(n){return Oi(1e4*n)/100};return e=z(["rgba(",wc(i(n.a)),"%,",wc(i(t)),"%,",wc(i(o)),"%,",wc((r=a,Oi(1e3*r)/1e3)),")"]),u(Ir,"",e)}(n.dm);return f(Qf,"div",z([u(pl,"padding","0px"),x,b]),z([L(i,f(ts,a,z([(r=Oi(p*c),u(le,"width",jr(r))),Jf(Oi(v*c)),x,b,u(pl,"display","block"),u(pl,"background-color",C)]),h))]))})),Ad={bF:.31271,bG:.32902},Rd=r((function(n,e){var r=n,t=e.eO,o=t.bF,a=t.bG,i=t.di,c=u(fs,e.cr,e.ch);return{bM:ld(c),eJ:r,bS:cd(c),cV:0,b5:id(c),c9:1,bF:-o,bG:-a,di:-i}})),Gd={$:0},kd=function(n){return function(n){for(;;){if(P(n.e5,0)&&P(n.e6,0))return vd;if(!u(Tu,_u(n.e5),_u(n.e6))){var e=Cc(n.e6/vu),r=Cc(n.e5/vu),t=n.fB,o=t.bF,a=t.bG,i=t.di,c=u(fs,1,n.ch);return{bM:r*ld(c),eJ:!1,bS:r*cd(c),cV:e/r,b5:r*id(c),c9:3,bF:o,bG:a,di:i}}n={ch:n.ch,e5:n.e6,e6:n.e5,fB:yd(n.fB)}}}({ch:n.ch,e5:n.cr,e6:0,fB:n.fB})},Bd=t((function(n,e,r){return 0>T(r,n)?n:T(r,e)>0?e:r})),Vd=function(n){var e=f(Bd,1667,25e3,n),r=e>4e3?-3025846900/(e*e*e)+2107037.9/(e*e)+.2226347*1e3/e+.24039:-266123900.00000003/(e*e*e)-.2343589*1e6/(e*e)+877.6956/e+.17991;return{bF:r,bG:e>2222?e>4e3?r*r*r*3.081758-r*r*5.8733867+3.75112997*r-.37001483:r*r*r*-.9549476-r*r*1.37418593+2.09137015*r-.16748867:r*r*r*-1.1063814-r*r*1.3481102+2.18555832*r-.20219683}},Ed=Vd(12e3),jd=Vd(5600),Id=r((function(n,e){return{$:2,a:n,b:e}})),Hd=function(n){return{$:0,a:n}},Wd=function(n){return n.eJ},Ud=Hd(pd.a),Od=r((function(n,e){return f(It,r((function(e,r){var t=r.a,o=r.b;return n(e)?L(u(yr,e,t),o):L(t,u(yr,e,o))})),L($,$),e)})),qd=function(n){return ds({dM:n.bF,dN:n.b5,dO:0,dP:0,dQ:n.bG,dR:n.bS,dS:0,dT:0,dU:n.di,dV:n.bM,dW:0,dX:0,dY:n.c9,dZ:n.cV,d_:0,d$:0})},Yd=l((function(n,e,r,t,o,a,i,c){var l=u(Od,Wd,z([n,e,r,t])),f=l.a;if(f.b){var s=N(f,l.b);if(s.b&&s.b.b&&s.b.b.b&&s.b.b.b.b&&!s.b.b.b.b.b){var d=s.a,m=s.b,v=m.a,b=m.b,p=b.a,g=b.b.a;return u(Id,u(Ht,qd,f),{bo:u(bd,d,v),bW:u(bd,p,g),bX:u(bd,o,a),bY:u(bd,i,c)})}return Ud}return Hd({bo:u(bd,n,e),bW:u(bd,r,t),bX:u(bd,o,a),bY:u(bd,i,c)})})),Xd=t((function(n,e,r){return b(Yd,n,e,r,vd,vd,vd,vd,vd)})),Zd=o((function(n,e,r,t){return{$:2,a:n,b:e,c:r,d:t}})),Kd=o((function(n,e,r,t){return{$:3,a:n,b:e,c:r,d:t}})),Jd=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),Qd=o((function(n,e,r,t){return{$:6,a:n,b:e,c:r,d:t}})),nm=o((function(n,e,r,t){return{$:7,a:n,b:e,c:r,d:t}})),em=o((function(n,e,r,t){return{$:5,a:n,b:e,c:r,d:t}})),rm=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),tm=function(n){switch(n.$){case 0:return n;case 1:return s(rm,n.a,n.b,n.c,1);case 2:return s(Zd,n.a,n.b,n.c,1);case 3:return s(Kd,n.a,n.b,n.c,1);case 4:return s(Jd,n.a,n.b,n.c,1);case 5:return s(em,n.a,n.b,n.c,1);case 6:return s(Qd,n.a,n.b,n.c,1);case 7:return s(nm,n.a,n.b,n.c,1);case 8:case 9:default:return n}},om={$:0},am=l((function(n,e,r,t,o,a,i,c){for(;;){if(!c.b)return{d1:e,d2:t,d3:a,d4:n,d5:r,d6:o};var l=c.b,f=i(c.a);n=u(nd,f.d4,n),e=u(Js,f.d1,e),r=u(nd,f.d5,r),t=u(Js,f.d2,t),o=u(nd,f.d6,o),a=u(Js,f.d3,a),i=i,c=l}})),im=t((function(n,e,r){var t=n(e);return b(am,t.d4,t.d1,t.d5,t.d2,t.d6,t.d3,n,r)})),cm=r((function(n,e){return 1>T(e,n)})),lm=function(n){return u(cm,n.d1,n.d4)&&u(cm,n.d2,n.d5)&&u(cm,n.d3,n.d6)?n:{d1:u(Js,n.d4,n.d1),d2:u(Js,n.d5,n.d2),d3:u(Js,n.d6,n.d3),d4:u(nd,n.d4,n.d1),d5:u(nd,n.d5,n.d2),d6:u(nd,n.d6,n.d3)}},um=function(n){return n},fm=function(n){var e=n.a,r=n.b,t=n.c,o=lf(e),a=uf(e),i=ff(e),c=lf(r),l=uf(r),f=ff(r),s=lf(t),d=uf(t),m=ff(t);return lm({d1:u(Js,o,u(Js,c,s)),d2:u(Js,a,u(Js,l,d)),d3:u(Js,i,u(Js,f,m)),d4:u(nd,o,u(nd,c,s)),d5:u(nd,a,u(nd,l,d)),d6:u(nd,i,u(nd,f,m))})},sm=function(n){return new Float64Array([n.bF,n.bG,n.di])},dm=function(n){return sm(n)},mm=function(n){return sm(n)},vm=r((function(n,e){var r=n,t=e,o=u(st,Cc(t.bF),u(st,Cc(t.bG),Cc(t.di)));if(o){var a=t.di/o,i=t.bG/o,c=t.bF/o,l=gu(c*c+i*i+a*a);return{bF:r*c/l,bG:r*i/l,di:r*a/l}}return Su}))(1),bm=t((function(n,e,r){return vm(u(xu,u(Pu,e,r),u(Pu,n,e)))})),pm=function(n){var e=n.a,r=n.b,t=n.c,o=mm(f(bm,e,r,t));return w({p:o,b3:dm(e)},{p:o,b3:dm(r)},{p:o,b3:dm(t)})},gm=r((function(n,e){return{$:2,a:n,b:e}}))({du:3,dD:0,d8:4}),hm=t((function(n,e,r){return w(n,e,r)})),xm=(Io=u(gd,-.5,1),Ho=u(gd,-.5,1),Uo=f(af,Wo=u(gd,-.5,1),Ho,Io),qo=f(af,Wo,Ho,Oo=u(gd,.5,1)),Xo=f(af,Wo,Yo=u(gd,.5,1),Io),Zo=f(af,Wo,Yo,Oo),Jo=f(af,Ko=u(gd,.5,1),Ho,Io),Qo=f(af,Ko,Yo,Io),na=f(af,Ko,Ho,Oo),ea=f(af,Ko,Yo,Oo),tm(function(n){if(n.b){var e=n.a,r=n.b,t=gm(u(Ht,pm,n));return s(Zd,f(im,fm,e,r),n,t,0)}return om}(z([f(hm,Uo,Qo,Jo),f(hm,Uo,Xo,Qo),f(hm,qo,na,ea),f(hm,qo,ea,Zo),f(hm,Jo,Qo,ea),f(hm,Jo,ea,na),f(hm,Uo,Zo,Xo),f(hm,Uo,qo,Zo),f(hm,Uo,Jo,na),f(hm,Uo,na,qo),f(hm,Xo,ea,Qo),f(hm,Xo,Zo,ea)])))),Cm={$:0},Pm=t((function(n,e,r){return{$:1,a:n,b:e,c:r}})),Mm=t((function(n,e,r){var t=e.a,o=e.b,a=n(e.c),i=n(o),c=n(t),l=mm(f(bm,c,i,a)),s={p:l,b3:dm(c)},d={p:l,b3:dm(i)},m={p:l,b3:dm(a)};return u(yr,s,u(yr,d,u(yr,m,r)))})),Tm=function(n){return n.F},ym=o((function(n,e,r,t){return 1===e.$||1===r.$||1===t.$?Vr:Br(f(n,e.a,r.a,t.a))})),Lm=4294967295>>>32-at,wm=h,Sm=t((function(n,e,r){for(;;){var t=u(wm,Lm&e>>>n,r);if(t.$)return u(wm,Lm&e,t.a);n-=at,e=e,r=t.a}})),Nm=r((function(n,e){var r=e.a,t=e.b,o=e.c,a=e.d;return 0>n||T(n,r)>-1?Vr:T(n,function(n){return n>>>5<<5}(r))>-1?Br(u(wm,Lm&n,a)):Br(f(Sm,t,n,o))})),$m=function(n){return n.ap},Fm=r((function(n,e){return u(Nm,n,$m(e))})),Dm=t((function(n,e,r){for(;;){var t=u(mt,Qr,n),o=t.a,a=t.b;if(0>T(ft(o),Qr))return u(pt,!0,{B:e,m:r,r:o});n=a,e=u(yr,lt(o),e),r+=1}})),zm=function(n){return n.b?f(Dm,n,$,0):it},_m=r((function(n,e){return!u(yc,u(go,Tc,n),e)})),Am=r((function(n,e){return f(It,r((function(e,r){return n(e)?u(yr,e,r):r})),$,e)})),Rm=r((function(n,e){var r=function(n){return n.a}(n),t=function(n){var e=n.a,t=n.b,o=n.c;return e>=0&&0>T(e,r)&&t>=0&&0>T(t,r)&&o>=0&&0>T(o,r)};return u(_m,t,e)?{F:e,ap:n}:{F:u(Am,t,e),ap:n}})),Gm=t((function(n,e,r){return{$:3,a:n,b:e,c:r}}))({du:1,dD:3,d8:4}),km=r((function(n,e){var r=e;return L(w(n.bF,n.bG,n.di),w(r.bF,r.bG,r.di))})),Bm=r((function(n,e){n:for(;;){if(-2===e.$)return Vr;var r=e.c,t=e.d,o=e.e;switch(u(So,n,e.b)){case 0:n=n,e=t;continue n;case 1:return Br(r);default:n=n,e=o;continue n}}})),Vm=f(us,0,0,0),Em=i((function(n,e,r,t,o,a){var i=a.a,c=a.b,l=a.c,f=u(Bm,u(km,n,e),o);if(f.$){var s={p:Vm,b3:dm(e)},d={p:Vm,b3:dm(n)},m=l+1;return w(u(yr,w(r,l,m),u(yr,w(r,m,t),i)),u(yr,s,u(yr,d,c)),l+2)}return w(u(yr,w(r,f.a,t),i),c,l)})),jm=a((function(n,e,r,t,o){for(;;){if(!r.b)return L(o.a,Kr(o.b));var a=r.a,i=a.a,c=a.b,l=r.b,u=n(a.c),f=n(c),s=n(i),d=t+2,v=t+1,b=n,p=e,g=l,h=t+3,x=m(Em,u,s,d,t,e,m(Em,f,u,v,d,e,m(Em,s,f,t,v,e,o)));n=b,e=p,r=g,t=h,o=x}})),Im=a((function(n,e,r,t,o){for(;;){if(!e.b)return w(t,o,r);var a=e.a,i=a.a,c=a.b,l=e.b,s=n(a.c),d=n(c),m=n(i),v=r+2,b=r+1,p=r,g=f($o,u(km,m,s),v,f($o,u(km,s,d),b,f($o,u(km,d,m),p,o)));n=n,e=l,r+=3,t=u(yr,w(p,b,v),t),o=g}})),Hm=t((function(n,e,r){var o,a=u(Bo,(function(n){var e=n.a,r=n.b,a=n.c;return s(ym,t((function(n,e,r){return w(n,e,r)})),u(Fm,e,o),u(Fm,r,o),u(Fm,a,o))}),Tm(o=r)),i=f(It,Mm(e),$,a),c=d(Im,e,a,0,$,Mo),l=d(jm,e,c.b,a,0,w(c.a,$,c.c)),m=l.a,v=l.b,b=v.b?N(i,v):i;return f(Pm,n,u(Rm,zm(b),m),u(Gm,b,m))})),Wm=function(n){return{F:u(Ht,(function(n){return w(3*n,3*n+1,3*n+2)}),u(Yr,0,Ur(n)-1)),ap:zm(Zf(u(Ht,(function(n){return z([n.a,n.b,n.c])}),n)))}},Um=function(n){switch(n.$){case 0:return Cm;case 1:case 2:return f(Hm,n.a,_t,Wm(u(Ht,um,n.b)));case 3:return f(Hm,n.a,_t,n.b);case 4:case 5:case 6:case 7:return f(Hm,n.a,(function(n){return n.b3}),n.b);case 8:case 9:default:return Cm}},Om=Um(xm),qm={$:0},Ym=qm,Xm=r((function(n,e){return{$:1,a:n,b:e}})),Zm={src:"\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        void main () {\n            gl_FragColor = texture2D(colorTexture, interpolatedUv);\n        }\n    ",attributes:{},uniforms:{colorTexture:"bP"}},Km=function(n){return{$:5,a:n}},Jm=Km(1029),Qm=Km(1028),nv=t((function(n,e,r){return 1===e?u(yr,n?Jm:Qm,r):r})),ev={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute mediump vec2 uv;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedUv = uv;\n        }\n    ",attributes:{position:"b3",uv:"N"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},rv=o((function(n,e,r,t){return u(Xm,e,l((function(e,o,a,i,c,l,u,s){return d(ys,f(nv,i,t,s),ev,Zm,r,{bP:n,b:a,c:o,d:l,e:e,f:c})})))})),tv={src:"\n        precision lowp float;\n        \n        uniform lowp vec3 constantColor;\n        \n        void main () {\n            gl_FragColor = vec4(constantColor, 1.0);\n        }\n    ",attributes:{},uniforms:{constantColor:"aE"}},ov={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{position:"b3"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},av=o((function(n,e,r,t){return u(Xm,e,l((function(e,o,a,i,c,l,u,s){return d(ys,f(nv,i,t,s),ov,tv,r,{aE:n,b:a,c:o,d:l,e:e,f:c})})))})),iv=r((function(n,e){return{$:3,a:n,b:e}})),cv={src:"\n        precision lowp float;\n        \n        uniform lowp vec3 constantColor;\n        uniform lowp float pointRadius;\n        uniform highp mat4 sceneProperties;\n        \n        float pointAlpha(float pointRadius, vec2 pointCoord) {\n            float pointSize = 2.0 * pointRadius;\n            float x = (pointSize + 2.0) * (pointCoord.s - 0.5);\n            float y = (pointSize + 2.0) * (pointCoord.t - 0.5);\n            float r = sqrt(x * x + y * y);\n            float innerRadius = pointRadius;\n            float outerRadius = pointRadius + 1.0;\n            if (r > outerRadius) {\n                return 0.0;\n            } else if (r > innerRadius) {\n                return outerRadius - r;\n            } else {\n                return 1.0;\n            }\n        }\n        \n        void main () {\n            float supersampling = sceneProperties[3][0];\n            float alpha = pointAlpha(pointRadius * supersampling, gl_PointCoord);\n            gl_FragColor = vec4(constantColor, alpha);\n        }\n    ",attributes:{},uniforms:{constantColor:"aE",pointRadius:"b2",sceneProperties:"e"}},lv={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform lowp float pointRadius;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            float supersampling = sceneProperties[3][0];\n            gl_PointSize = 2.0 * pointRadius * supersampling + 2.0;\n        }\n    ",attributes:{position:"b3"},uniforms:{modelMatrix:"b",modelScale:"c",pointRadius:"b2",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},uv=o((function(n,e,r,t){return u(iv,r,l((function(r,o,a,i,c,l,u,f){return d(ys,f,lv,cv,t,{aE:n,b:a,c:o,b2:e,d:l,e:r,f:c})})))})),fv={src:"\n        precision mediump float;\n        \n        uniform mediump vec3 emissiveColor;\n        uniform highp mat4 sceneProperties;\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{emissiveColor:"aU",sceneProperties:"e"}},sv=Mr,dv=a((function(n,e,r,t,o){return u(Xm,r,l((function(r,a,i,c,l,s,m,v){return d(ys,f(nv,c,o,v),ov,fv,t,{aU:u(sv,e,n),b:i,c:a,d:s,e:r,f:l})})))})),mv={src:"\n        precision mediump float;\n        \n        uniform mediump vec3 emissiveColor;\n        uniform lowp float pointRadius;\n        uniform highp mat4 sceneProperties;\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        float pointAlpha(float pointRadius, vec2 pointCoord) {\n            float pointSize = 2.0 * pointRadius;\n            float x = (pointSize + 2.0) * (pointCoord.s - 0.5);\n            float y = (pointSize + 2.0) * (pointCoord.t - 0.5);\n            float r = sqrt(x * x + y * y);\n            float innerRadius = pointRadius;\n            float outerRadius = pointRadius + 1.0;\n            if (r > outerRadius) {\n                return 0.0;\n            } else if (r > innerRadius) {\n                return outerRadius - r;\n            } else {\n                return 1.0;\n            }\n        }\n        \n        void main () {\n            vec4 color = toSrgb(emissiveColor, sceneProperties);\n            float supersampling = sceneProperties[3][0];\n            float alpha = pointAlpha(pointRadius * supersampling, gl_PointCoord);\n            gl_FragColor = vec4(color.rgb, alpha);\n        }\n    ",attributes:{},uniforms:{emissiveColor:"aU",pointRadius:"b2",sceneProperties:"e"}},vv=a((function(n,e,r,t,o){return u(iv,t,l((function(t,a,i,c,l,f,s,m){return d(ys,m,lv,mv,o,{aU:u(sv,e,n),b:i,c:a,b2:r,d:f,e:t,f:l})})))})),bv={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 materialColor;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{enabledLights:"U",lights12:"bo",lights34:"bW",lights56:"bX",lights78:"bY",materialColor:"cC",sceneProperties:"e",viewMatrix:"f"}},pv={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n        }\n    ",attributes:{normal:"p",position:"b3"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},gv=o((function(n,e,r,t){return u(Xm,e,l((function(e,o,a,i,c,l,u,s){var m=u.a,v=u.b;return d(ys,f(nv,i,t,s),pv,bv,r,{U:v,bo:m.bo,bW:m.bW,bX:m.bX,bY:m.bY,cC:n,b:a,c:o,d:l,e:e,f:c})})))})),hv={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D materialColorTexture;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n            vec3 materialColor = fromSrgb(texture2D(materialColorTexture, interpolatedUv).rgb);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{enabledLights:"U",lights12:"bo",lights34:"bW",lights56:"bX",lights78:"bY",materialColorTexture:"cD",normalMapTexture:"a$",sceneProperties:"e",useNormalMap:"a6",viewMatrix:"f"}},xv={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        attribute mediump vec2 uv;\n        attribute highp vec3 tangent;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getWorldTangent(vec3 modelTangent, vec4 modelScale, mat4 modelMatrix) {\n            return (modelMatrix * vec4(safeNormalize(modelScale.xyz * modelTangent), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = uv;\n            interpolatedTangent = getWorldTangent(tangent, modelScale, modelMatrix);\n        }\n    ",attributes:{normal:"p",position:"b3",tangent:"et",uv:"N"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Cv=i((function(n,e,r,t,o,a){return u(Xm,t,l((function(t,i,c,l,u,s,m,v){var b=m.a,p=m.b;return d(ys,f(nv,l,a,v),xv,hv,o,{U:p,bo:b.bo,bW:b.bW,bX:b.bX,bY:b.bY,cD:n,b:c,c:i,a$:e,d:s,e:t,a6:r,f:u})})))})),Pv={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D baseColorTexture;\n        uniform lowp vec4 constantBaseColor;\n        uniform mediump sampler2D roughnessTexture;\n        uniform lowp vec2 constantRoughness;\n        uniform mediump sampler2D metallicTexture;\n        uniform lowp vec2 constantMetallic;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getFloatValue(sampler2D texture, vec2 uv, vec2 constantValue) {\n            if (constantValue.y == 1.0) {\n                return constantValue.x;\n            } else {\n                vec4 textureColor = texture2D(texture, uv);\n                return dot(textureColor, vec4(0.2126, 0.7152, 0.0722, 0.0));\n            }\n        }\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 baseColor = fromSrgb(texture2D(baseColorTexture, interpolatedUv).rgb) * (1.0 - constantBaseColor.w) + constantBaseColor.rgb * constantBaseColor.w;\n            float roughness = getFloatValue(roughnessTexture, interpolatedUv, constantRoughness);\n            float metallic = getFloatValue(metallicTexture, interpolatedUv, constantMetallic);\n        \n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{baseColorTexture:"cf",constantBaseColor:"cj",constantMetallic:"ck",constantRoughness:"cl",enabledLights:"U",lights12:"bo",lights34:"bW",lights56:"bX",lights78:"bY",metallicTexture:"cG",normalMapTexture:"a$",roughnessTexture:"c1",sceneProperties:"e",useNormalMap:"a6",viewMatrix:"f"}},Mv={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 baseColor;\n        uniform lowp float roughness;\n        uniform lowp float metallic;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{baseColor:"ce",enabledLights:"U",lights12:"bo",lights34:"bW",lights56:"bX",lights78:"bY",metallic:"cF",roughness:"c0",sceneProperties:"e",viewMatrix:"f"}},Tv=i((function(n,e,r,t,o,a){return u(Xm,t,l((function(t,i,c,l,u,s,m,v){var b=m.a,p=m.b;return d(ys,f(nv,l,a,v),pv,Mv,o,{ce:n,U:p,bo:b.bo,bW:b.bW,bX:b.bX,bY:b.bY,cF:r,b:c,c:i,d:s,c0:e,e:t,f:u})})))})),yv=r((function(n,e){return{$:1,a:n,b:e}})),Lv=r((function(n,e){return e.$?L(e.a.D,1):L(n,0)})),wv=s(os,0,0,0,0),Sv=r((function(n,e){var r;return e.$?L(e.a.D,wv):L(n,s(os,id(r=e.a),cd(r),ld(r),1))})),Nv=r((function(n,e){var r,t=L(n,e);return t.a.$?u(yv,L(r=t.a.a.D,wv),u(Lv,r,e)):t.b.$?u(yv,u(Sv,r=t.b.a.D,n),u(Lv,r,e)):{$:0,a:t.a.a}})),$v=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),Fv=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),Dv=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),zv=u(Ss,0,0),_v=r((function(n,e){return e.$?L(e.a.D,zv):L(n,u(Ss,e.a,1))})),Av=o((function(n,e,r,t){var o,a=s(Dv,n,e,r,t);return a.a.$?s(Fv,L(o=a.a.a.D,wv),u(_v,o,e),u(_v,o,r),u(Lv,o,t)):a.b.$?s(Fv,u(Sv,o=a.b.a.D,n),L(o,zv),u(_v,o,r),u(Lv,o,t)):a.c.$?s(Fv,u(Sv,o=a.c.a.D,n),u(_v,o,e),L(o,zv),u(Lv,o,t)):a.d.$?s(Fv,u(Sv,o=a.d.a.D,n),u(_v,o,e),u(_v,o,r),L(o,1)):f($v,a.a.a,a.b.a,a.c.a)})),Rv={src:"\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        uniform mediump float backlight;\n        uniform highp mat4 sceneProperties;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            vec3 emissiveColor = fromSrgb(texture2D(colorTexture, interpolatedUv).rgb) * backlight;\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{backlight:"cb",colorTexture:"bP",sceneProperties:"e"}},Gv=a((function(n,e,r,t,o){return u(Xm,r,l((function(r,a,i,c,l,u,s,m){return d(ys,f(nv,c,o,m),ev,Rv,t,{cb:e,bP:n,b:i,c:a,d:u,e:r,f:l})})))})),kv={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        attribute mediump vec2 uv;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = uv;\n            interpolatedTangent = vec3(0.0, 0.0, 0.0);\n        }\n    ",attributes:{normal:"p",position:"b3",uv:"N"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Bv=o((function(n,e,r,t){return u(Xm,e,l((function(e,o,a,i,c,l,u,s){var m=u.a,v=u.b;return d(ys,f(nv,i,t,s),kv,hv,r,{U:v,bo:m.bo,bW:m.bW,bX:m.bX,bY:m.bY,cD:n,b:a,c:o,a$:n,d:l,e:e,a6:0,f:c})})))})),Vv=function(n){return e(9,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return n(e,r,t,o,a,i,c,l,u)}}}}}}}}}))}((function(n,e,r,t,o,a,i,c,s){return u(Xm,i,l((function(i,l,u,m,v,b,p,g){var h=p.a,x=p.b;return d(ys,f(nv,m,s,g),kv,Pv,c,{cf:n,cj:e,ck:a,cl:t,U:x,bo:h.bo,bW:h.bW,bX:h.bX,bY:h.bY,cG:o,b:u,c:l,a$:n,d:b,c1:r,e:i,a6:0,f:v})})))})),Ev=t((function(n,e,r){return r>.5?e+(1-r)*(n-e):n+r*(e-n)})),jv=function(n){return f(af,function(n){return f(Ev,n.d4,n.d1,.5)}(n),function(n){return f(Ev,n.d5,n.d2,.5)}(n),function(n){return f(Ev,n.d6,n.d3,.5)}(n))},Iv=function(n){var e=Os(n),r=e.a,t=e.b,o=e.c;return{eK:jv(n),eZ:r/2,e_:t/2,e$:o/2}},Hv=r((function(n,e){switch(n.$){case 0:if(n.b.$){var r=n.b.a.D;switch(e.$){case 0:case 1:case 2:case 3:case 4:return Ym;case 5:case 6:case 7:return o=e.c,a=e.d,s(rv,r,Iv(R=e.a),o,a);case 8:case 9:default:return Ym}}else{var t=n.b.a;switch(e.$){case 0:return Ym;case 1:var o=e.c,a=e.d;return s(av,t,Iv(R=e.a),o,a);case 2:case 3:case 4:return o=e.c,a=e.d,s(av,t,Iv(R=e.a),o,a);case 5:case 6:case 7:return o=e.c,a=e.d,s(av,t,Iv(R=e.a),o,a);case 8:case 9:return o=e.c,s(av,t,Iv(R=e.a),o,0);default:return o=e.d,s(uv,t,e.b,Iv(R=e.a),o)}}case 1:if(n.b.$)switch(r=n.b.a.D,c=n.c,e.$){case 0:case 1:case 2:case 3:case 4:return Ym;case 5:case 6:case 7:return o=e.c,a=e.d,d(Gv,r,c,Iv(R=e.a),o,a);case 8:case 9:default:return Ym}else{var i=n.b.a,c=n.c;switch(e.$){case 0:return Ym;case 1:case 2:case 3:case 4:case 5:case 6:case 7:return o=e.c,a=e.d,d(dv,i,c,Iv(R=e.a),o,a);case 8:case 9:return o=e.c,d(dv,i,c,Iv(R=e.a),o,0);default:return o=e.d,d(vv,i,c,e.b,Iv(R=e.a),o)}}case 2:var v=u(Nv,n.b,n.c);if(v.$){var b=v.a.a,p=v.b,g=p.a,h=p.b;switch(e.$){case 0:case 1:case 2:case 3:case 4:case 5:return Ym;case 6:return o=e.c,C=e.d,s(Bv,b,Iv(R=e.a),o,C);case 7:return o=e.c,C=e.d,m(Cv,b,g,h,Iv(R=e.a),o,C);case 8:case 9:default:return Ym}}else{var x=v.a;switch(e.$){case 0:case 1:return Ym;case 2:o=e.c;var C=e.d;return s(gv,x,Iv(R=e.a),o,C);case 3:return Ym;case 4:return o=e.c,C=e.d,s(gv,x,Iv(R=e.a),o,C);case 5:return Ym;case 6:case 7:return o=e.c,C=e.d,s(gv,x,Iv(R=e.a),o,C);case 8:case 9:default:return Ym}}default:var P=s(Av,n.b,n.c,n.d,n.e);if(P.$){var M=P.a,T=M.a,y=M.b,L=P.b,w=L.a,S=L.b,N=P.c,$=N.a,F=N.b,D=P.d;switch(g=D.a,h=D.b,e.$){case 0:case 1:case 2:case 3:case 4:case 5:return Ym;case 6:return o=e.c,a=e.d,function(n,e,r,t,o,a,i,c,l,u){return 9===n.a?n.f(e,r,t,o,a,i,c,l,u):n(e)(r)(t)(o)(a)(i)(c)(l)(u)}(Vv,T,y,w,S,$,F,Iv(R=e.a),o,a);case 7:return R=e.a,o=e.c,a=e.d,function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(s){return function(m){return function(v){return u(Xm,s,l((function(l,u,s,b,p,g,h,x){var C=h.a,P=h.b;return d(ys,f(nv,b,v,x),xv,Pv,m,{cf:n,cj:e,ck:a,cl:t,U:P,bo:C.bo,bW:C.bW,bX:C.bX,bY:C.bY,cG:o,b:s,c:u,a$:i,d:g,c1:r,e:l,a6:c,f:p})})))}}}}}}}}}}}(T)(y)(w)(S)($)(F)(g)(h)(Iv(R))(o)(a);case 8:case 9:default:return Ym}}else{var z=P.a,_=P.b,A=P.c;switch(e.$){case 0:case 1:return Ym;case 2:return o=e.c,a=e.d,m(Tv,z,_,A,Iv(R=e.a),o,a);case 3:return Ym;case 4:return o=e.c,a=e.d,m(Tv,z,_,A,Iv(R=e.a),o,a);case 5:return Ym;case 6:return o=e.c,a=e.d,m(Tv,z,_,A,Iv(R=e.a),o,a);case 7:var R;return o=e.c,a=e.d,m(Tv,z,_,A,Iv(R=e.a),o,a);case 8:case 9:default:return Ym}}}})),Wv=function(n){return n.bF},Uv=function(n){return n.bG},Ov=function(n){return n.di},qv=function(n){var e=n,r=Ov(e.dj),t=Uv(e.dj),o=Wv(e.dj),a=Ov(e.dh),i=Uv(e.dh),c=Wv(e.dh),l=Ov(e.dg),u=Uv(e.dg),f=Wv(e.dg);return f*i*r+u*a*o+l*c*t-l*i*o-u*c*r-f*a*t>0},Yv=r((function(n,e){return{$:5,a:n,b:e}})),Xv=r((function(n,e){var r=e;switch(r.$){case 0:return Ym;case 5:var t=r.b;return u(Yv,u(ss,r.a,n),t);case 1:case 3:case 2:default:return u(Yv,n,r)}})),Zv=r((function(n,e){return u(Xv,function(n){var e=Pf(n),r=yf(n),t=Tf(n),o=Mf(n);return{dE:qv(n),s:o.bF,t:o.bG,u:o.di,v:t.bF,w:t.bG,x:t.di,y:r.bF,z:r.bG,A:r.di,J:e.bF,K:e.bG,L:e.di,b7:1}}(n),e)})),Kv=function(n){return{$:2,a:n}},Jv=r((function(n,e){var r=n.a,t=n.b,o=n.c,a=e.eK;return{eK:{bF:r*a.bF,bG:t*a.bG,di:o*a.di},eZ:r*e.eZ,e_:t*e.e_,e$:o*e.e$}})),Qv=function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){var f,s,d={bF:(s=t)[0],bG:s[1],di:s[2],ey:s[3]},m=(f={ey:d.ey,bF:d.bF*n.a,bG:d.bG*n.b,di:d.di*n.c},new Float64Array([f.bF,f.bG,f.di,f.ey]));return b(e,r,m,o,a,i,c,l,u)}}}}}}}}}},nb=r((function(n,e){switch(e.$){case 0:return qm;case 5:return u(Yv,e.a,u(nb,n,e.b));case 1:var r=e.b;return u(Xm,u(Jv,n,e.a),u(Qv,n,r));case 3:return e;case 2:return Kv(u(Qv,n,r=e.a));default:var t=e.a;return ud(u(Ht,nb(n),t))}})),eb=r((function(n,e){return u(nb,n,e)})),rb={src:"\n        precision lowp float;\n        \n        void main () {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        }\n    ",attributes:{},uniforms:{}},tb=f(Ds,{cB:0,cZ:0,df:15},{bh:Rs,bw:Ps,bH:Rs,bI:7683},{bh:Rs,bw:Ps,bH:Rs,bI:7682}),ob=f(Ds,{cB:0,cZ:0,df:15},{bh:Rs,bw:Ps,bH:Rs,bI:7682},{bh:Rs,bw:Ps,bH:Rs,bI:7683}),ab=r((function(n,e){return u(yr,n?ob:tb,e)})),ib={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 shadowVertexPosition(vec3 position, vec3 normal, mat4 shadowLight, vec4 modelScale, mat4 modelMatrix, mat4 viewMatrix, mat4 projectionMatrix, mat4 sceneProperties) {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            vec3 worldNormal = getWorldNormal(normal, vec4(modelScale.xyz, 1.0), modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 directionToLight = getDirectionToLight(worldPosition.xyz, xyz_type, rgb_parameter);\n            vec3 offset = vec3(0.0, 0.0, 0.0);\n            float sceneDiameter = sceneProperties[3][1];\n            if (dot(directionToLight, worldNormal) <= 0.0) {\n                offset = -sceneDiameter * directionToLight;\n            } else {\n                offset = -0.001 * sceneDiameter * directionToLight;\n            }\n            vec4 offsetPosition = worldPosition + vec4(offset, 0.0);\n            return projectionMatrix * (viewMatrix * offsetPosition);\n        }\n        \n        void main () {\n            gl_Position = shadowVertexPosition(\n                position,\n                normal,\n                shadowLight,\n                modelScale,\n                modelMatrix,\n                viewMatrix,\n                projectionMatrix,\n                sceneProperties\n            );\n        }\n    ",attributes:{normal:"p",position:"b3"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"b8",viewMatrix:"f"}},cb=function(n){var e=function(n){if(n.$){var e=n.c;return Br(l((function(n,r,t,o,a,i,c,l){return d(ys,u(ab,o,l),ib,rb,e,{b:t,c:r,d:i,e:n,b8:c,f:a})})))}return Vr}(n);return e.$?Ym:Kv(e.a)},lb=o((function(n,e,r,t){var o,a=u(Hv,r,xm),i=(o=L(n,e)).a?o.b?sd(z([a,cb(Om)])):a:o.b?cb(Om):Ym,c=Cf(t),l=c.a,f=c.b,s=c.c;return u(Zv,xf(t),u(eb,w(l,f,s),i))})),ub=r((function(n,e){return s(lb,!0,!0,n,e)})),fb=function(n){return{$:0,a:n}},sb=r((function(n,e){return{$:0,a:n,b:e}})),db=function(n){return Ef(n)},mb=r((function(n,e){return e/n})),vb=V,bb=function(n){var e=n;return{bF:Ef(e),bG:vb(e)}},pb=r((function(n,e){var r=n.b3;return u(yr,{p:mm(n.p),b3:dm(r)},e)})),gb=c((function(n,e,r,t,o,a,i){for(;;){if(!i.b)return lm({d1:e,d2:t,d3:a,d4:n,d5:r,d6:o});var c=i.a,l=i.b,f=ld(c.b3),s=cd(c.b3),d=id(c.b3);n=u(Qs,n,d),e=u(st,e,d),r=u(Qs,r,s),t=u(st,t,s),o=u(Qs,o,f),a=u(st,a,f),i=l}})),hb=r((function(n,e){var r=ld(n.b3),t=cd(n.b3),o=id(n.b3);return v(gb,o,o,t,t,r,r,e)})),xb=r((function(n,e){var r=n.dh,t=n.dg;return{bF:e.bF*t.bF+e.bG*r.bF,bG:e.bF*t.bG+e.bG*r.bG,di:e.bF*t.di+e.bG*r.di}})),Cb=function(n){return vb(n)},Pb=function(n){return 6.283185307179586*n},Mb={cK:zu,dg:wd,dh:Sd},Tb=(ra=u(mb,72,Pb(1)),ta=of,oa=rf,ia=f(af,0,0,aa=u(gd,.5,1)),la=f(af,0,0,ca=u(gd,-.5,1)),tm(function(n){var e=f(wr,pb,$,$m(n));if(e.b){var r=e.a,t=e.b,o=u(Gm,e,Tm(n));return s(Jd,u(hb,r,t),n,o,0)}return om}(Wm(Zf(u(Ht,(function(n){var e=u(gd,n,ra),r=u(xb,Mb,bb(e)),t=u(gd,db(e),1),o=u(gd,Cb(e),1),a=f(af,t,o,aa),i=f(af,t,o,ca),c=u(gd,u(vc,72,n+1),ra),l=u(xb,Mb,bb(c)),s=u(gd,db(c),1),d=u(gd,Cb(c),1),m=f(af,s,d,ca),v=f(af,s,d,aa);return z([w({p:oa,b3:la},{p:oa,b3:m},{p:oa,b3:i}),w({p:r,b3:i},{p:l,b3:m},{p:l,b3:v}),w({p:r,b3:i},{p:l,b3:v},{p:r,b3:a}),w({p:ta,b3:ia},{p:ta,b3:a},{p:ta,b3:v})])}),u(Yr,0,71))))))),yb=Um(Tb),Lb=function(n){return n.cK},wb=o((function(n,e,r,t){var o,a=function(n){var e=function(n){return n.eO}(n),r=$u(e),t=r.a,o=r.b;return{cK:Lb(n),dg:t,dh:o,dj:e}}(function(n){return n.l}(t)),i=u(Hv,r,Tb),c=(o=L(n,e)).a?o.b?sd(z([i,cb(yb)])):i:o.b?cb(yb):Ym,l=function(n){return n.fm}(t),f=function(n){return n.e8}(t);return u(Zv,a,u(eb,w(l,l,f),c))})),Sb=r((function(n,e){return s(wb,!0,!0,n,e)})),Nb={src:"\n        precision highp float;\n        \n        attribute lowp float triangleVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 triangleVertexPositions;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleVertex), triangleVertexPositions, position, normal);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{triangleVertex:"c8"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",triangleVertexPositions:"bC",viewMatrix:"f"}},$b={src:"\n        precision highp float;\n        \n        attribute lowp float triangleVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 triangleVertexPositions;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleVertex), triangleVertexPositions, position, normal);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n        }\n    ",attributes:{triangleVertex:"c8"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",triangleVertexPositions:"bC",viewMatrix:"f"}},Fb=function(n){var e=n.a,r=n.b,t=n.c;return ds({dM:e.bF,dN:r.bF,dO:t.bF,dP:0,dQ:e.bG,dR:r.bG,dS:t.bG,dT:0,dU:e.di,dV:r.di,dW:t.di,dX:0,dY:0,dZ:0,d_:0,d$:0})},Db=gm(z([w({c8:0},{c8:1},{c8:2})])),zb=r((function(n,e){var r=fm(e),t=Iv(r);switch(n.$){case 0:if(n.b.$)return Ym;var o=n.b.a;return u(Xm,t,l((function(n,r,t,a,i,c,l,u){return d(ys,f(nv,a,0,u),Nb,tv,Db,{aE:o,b:t,c:r,d:c,e:n,bC:Fb(e),f:i})})));case 1:if(n.b.$)return Ym;var a=n.b.a,i=n.c;return u(Xm,t,l((function(n,r,t,o,c,l,s,m){return d(ys,f(nv,o,0,m),Nb,fv,Db,{aU:u(sv,i,a),b:t,c:r,d:l,e:n,bC:Fb(e),f:c})})));case 2:var c=u(Nv,n.b,n.c);if(c.$)return Ym;var m=c.a;return u(Xm,t,l((function(n,r,t,o,a,i,c,l){var u=c.a,s=c.b;return d(ys,f(nv,o,0,l),$b,bv,Db,{U:s,bo:u.bo,bW:u.bW,bX:u.bX,bY:u.bY,cC:m,b:t,c:r,d:i,e:n,bC:Fb(e),f:a})})));default:var v=s(Av,n.b,n.c,n.d,n.e);if(v.$)return Ym;var b=v.a,p=v.b,g=v.c;return u(Xm,t,l((function(n,r,t,o,a,i,c,l){var u=c.a,s=c.b;return d(ys,f(nv,o,0,l),$b,Mv,Db,{ce:b,U:s,bo:u.bo,bW:u.bW,bX:u.bX,bY:u.bY,cF:g,b:t,c:r,d:i,c0:p,e:n,bC:Fb(e),f:a})})))}})),_b=(ua=z([{a5:u(Ss,0,1)},{a5:u(Ss,1,1)},{a5:u(Ss,2,1)},{a5:u(Ss,0,-1)},{a5:u(Ss,1,-1)},{a5:u(Ss,2,-1)}]),fa=z([w(0,1,2),w(3,5,4),w(3,4,1),w(3,1,0),w(4,5,2),w(4,2,1),w(5,3,0),w(5,0,2)]),u(Gm,ua,fa)),Ab={src:"\n        precision highp float;\n        \n        attribute highp vec2 triangleShadowVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        uniform highp mat4 triangleVertexPositions;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 shadowVertexPosition(vec3 position, vec3 normal, mat4 shadowLight, vec4 modelScale, mat4 modelMatrix, mat4 viewMatrix, mat4 projectionMatrix, mat4 sceneProperties) {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            vec3 worldNormal = getWorldNormal(normal, vec4(modelScale.xyz, 1.0), modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 directionToLight = getDirectionToLight(worldPosition.xyz, xyz_type, rgb_parameter);\n            vec3 offset = vec3(0.0, 0.0, 0.0);\n            float sceneDiameter = sceneProperties[3][1];\n            if (dot(directionToLight, worldNormal) <= 0.0) {\n                offset = -sceneDiameter * directionToLight;\n            } else {\n                offset = -0.001 * sceneDiameter * directionToLight;\n            }\n            vec4 offsetPosition = worldPosition + vec4(offset, 0.0);\n            return projectionMatrix * (viewMatrix * offsetPosition);\n        }\n        \n        void main () {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleShadowVertex.x), triangleVertexPositions, position, normal);\n            normal *= triangleShadowVertex.y;\n            gl_Position = shadowVertexPosition(\n                position,\n                normal,\n                shadowLight,\n                modelScale,\n                modelMatrix,\n                viewMatrix,\n                projectionMatrix,\n                sceneProperties\n            );\n        }\n    ",attributes:{triangleShadowVertex:"a5"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"b8",triangleVertexPositions:"bC",viewMatrix:"f"}},Rb=function(n){return Kv(l((function(e,r,t,o,a,i,c,l){return d(ys,u(ab,o,l),Ab,rb,_b,{b:t,c:r,d:i,e:e,b8:c,bC:Fb(n),f:a})})))},Gb=o((function(n,e,r,t){var o=u(zb,r,t),a=L(n,e);return a.a?a.b?sd(z([o,Rb(t)])):o:a.b?Rb(t):Ym})),kb=r((function(n,e){return s(Gb,!0,!0,n,e)})),Bb=r((function(n,e){var r=ff(e),t=ff(n),o=uf(e),a=uf(n),i=lf(e),c=lf(n);return{d1:u(Js,c,i),d2:u(Js,a,o),d3:u(Js,t,r),d4:u(nd,c,i),d5:u(nd,a,o),d6:u(nd,t,r)}})),Vb={src:"\n        precision highp float;\n        \n        attribute lowp float lineSegmentVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp vec3 lineSegmentStartPoint;\n        uniform highp vec3 lineSegmentEndPoint;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = (1.0 - lineSegmentVertex) * lineSegmentStartPoint + lineSegmentVertex * lineSegmentEndPoint;\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{lineSegmentVertex:"dL"},uniforms:{lineSegmentEndPoint:"dJ",lineSegmentStartPoint:"dK",modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Eb=r((function(n,e){return{$:1,a:n,b:e}}))({du:2,dD:0,d8:1})(z([L({dL:0},{dL:1})])),jb=r((function(n,e){var r,t=u(Bb,(r=e).a,r.b),o=Iv(t),a=e.a,i=e.b;switch(n.$){case 0:if(n.b.$)return Ym;var c=n.b.a;return u(Xm,o,l((function(n,e,r,t,o,l,u,f){return d(ys,f,Vb,tv,Eb,{aE:c,dJ:dm(i),dK:dm(a),b:r,c:e,d:l,e:n,f:o})})));case 1:if(n.b.$)return Ym;c=n.b.a;var f=n.c;return u(Xm,o,l((function(n,e,r,t,o,l,s,m){return d(ys,m,Vb,fv,Eb,{aU:u(sv,f,c),dJ:dm(i),dK:dm(a),b:r,c:e,d:l,e:n,f:o})})));case 2:default:return Ym}})),Ib=r((function(n,e){return u(jb,n,e)})),Hb=t((function(n,e,r){return{$:2,a:n,b:e,c:r}})),Wb=function(n){return f(Bd,0,1,n>.04045?u(Ui,(n+.055)/1.055,2.4):n/12.92)},Ub=function(n){return f(Hb,0,fb(function(n){var e=gc(n),r=e.cp,t=e.cg;return f(us,Wb(e.cY),Wb(r),Wb(t))}(n)),fb(0))},Ob=r((function(n,e){return n/e})),qb=a((function(n,e,r,t,o){for(;;){var a=t(e/r),i=u(yr,a,o);if(P(e,n))return i;n=n,e-=1,r=r,t=t,o=i}})),Yb=r((function(n,e){return 1>n?$:d(qb,0,n,n,e,$)})),Xb=r((function(n,e){var r=n.b3,t=n.N,o=t.a,a=t.b;return u(yr,{p:mm(n.p),b3:dm(r),N:u(Ss,o,a)},e)})),Zb=r((function(n,e){var r=n,t=e,o=Ef(t);return{bF:o*Ef(r),bG:o*vb(r),di:vb(t)}})),Kb=(sa=u(Yr,0,71),da=u(Yb,72,u(Ev,0,Pb(1))),ma=rt(36),va=u(Yr,0,ma-1),ba=u(Yb,ma,u(Ev,pu(90),pu(-90))),pa=zm(Zf(u(Ht,(function(n){return u(Ht,(function(e){return{p:u(Zb,n,e),b3:f(af,u(gd,db(e)*db(n),1),u(gd,db(e)*Cb(n),1),u(gd,Cb(e),1)),N:L(u(Ob,n,Pb(1)),u(Ob,u(rd,pu(90),e),pu(180)))}}),ba)}),da))),ga=r((function(n,e){return n*(ma+1)+e})),ha=Zf(u(Ht,(function(n){return Zf(u(Ht,(function(e){var r=u(ga,n+1,e),t=u(ga,n,e),o=u(ga,n+1,e+1),a=u(ga,n,e+1);return z([w(a,o,r),w(a,r,t)])}),va))}),sa)),tm(function(n){var e=f(wr,Xb,$,$m(n));if(e.b){var r=e.a,t=e.b,o=u(Gm,e,Tm(n));return s(Qd,u(hb,r,t),n,o,0)}return om}(u(Rm,pa,ha)))),Jb=r((function(n,e){for(;;){var r=u(vc,144,2*n+3),t=u(vc,144,2*n+2),o=2*n+1,a=2*n,i=u(yr,w(144,a,t),u(yr,w(a,r,t),u(yr,w(a,o,r),u(yr,w(o,145,r),e))));if(!n)return i;n-=1,e=i}})),Qb=t((function(n,e,r){return r>.5?e+(1-r)*(n-e):n+r*(e-n)})),np=(xa=u(r((function(n,e){for(;;){var r=f(Qb,0,6.283185307179586,n/72),t=u(yr,{bK:r,b$:0,b6:1},u(yr,{bK:r,b$:1,b6:1},e));if(!n)return t;n-=1,e=t}})),71,z([{bK:0,b$:0,b6:0},{bK:0,b$:1,b6:0}])),u(Gm,xa,u(Jb,71,$))),ep={src:"\n        precision highp float;\n        \n        attribute highp float angle;\n        attribute highp float offsetScale;\n        attribute highp float radiusScale;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const lowp float kPerspectiveProjection = 0.0;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec3 perpendicularTo(vec3 d) {\n            float absX = abs(d.x);\n            float absY = abs(d.y);\n            float absZ = abs(d.z);\n            if (absX <= absY) {\n                if (absX <= absZ) {\n                    float scale = 1.0 / length(d.zy);\n                    return vec3(0.0, -d.z * scale, d.y * scale);\n                } else {\n                    float scale = 1.0 / length(d.xy);\n                    return vec3(-d.y * scale, d.x * scale, 0.0);\n                }\n            } else {\n                if (absY <= absZ) {\n                    float scale = 1.0 / length(d.xz);\n                    return vec3(d.z * scale, 0.0, -d.x * scale);\n                } else {\n                    float scale = 1.0 / length(d.xy);\n                    return vec3(-d.y * scale, d.x * scale, 0.0);\n                }\n            }\n        }\n        \n        void main () {\n            vec4 worldCenter = getWorldPosition(vec3(0.0, 0.0, 0.0), modelScale, modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 zDirection = getDirectionToLight(worldCenter.xyz, xyz_type, rgb_parameter);\n            vec3 xDirection = perpendicularTo(zDirection);\n            vec3 yDirection = cross(zDirection, xDirection);\n            float r = modelScale.x;\n            float adjustedRadius = r;\n            float zOffset = 0.0;\n            if (xyz_type.w == kPointLight) {\n                float distanceToLight = length(xyz_type.xyz - worldCenter.xyz);\n                float rSquared = r * r;\n                zOffset = rSquared / distanceToLight;\n                float zSquared = zOffset * zOffset;\n                adjustedRadius = sqrt(rSquared - zSquared) * radiusScale;\n            }\n            vec3 worldPosition =\n                worldCenter.xyz\n                    + zDirection * zOffset\n                    + xDirection * adjustedRadius * cos(angle)\n                    + yDirection * adjustedRadius * sin(angle);\n            vec3 directionToLight = getDirectionToLight(worldPosition, xyz_type, rgb_parameter);\n            float sceneDiameter = sceneProperties[3][1];\n            vec3 offset = -sceneDiameter * offsetScale * directionToLight;\n            vec4 offsetPosition = vec4(worldPosition + offset, 1.0);\n            gl_Position = projectionMatrix * (viewMatrix * offsetPosition);\n        }\n    ",attributes:{angle:"bK",offsetScale:"b$",radiusScale:"b6"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"b8",viewMatrix:"f"}},rp=function(){return Kv(l((function(n,e,r,t,o,a,i,c){return d(ys,u(ab,!0,c),ep,rb,np,{aE:f(us,0,0,1),b:r,c:e,d:a,e:n,b8:i,f:o})})))},tp=r((function(n,e){return u(Xv,function(n){return{dE:!0,s:1,t:0,u:0,v:0,w:1,x:0,y:0,z:0,A:1,J:n.bF,K:n.bG,L:n.di,b7:1}}(n),e)})),op=o((function(n,e,r,t){var o,a=u(Hv,r,Kb),i=(o=L(n,e)).a?o.b?sd(z([a,rp()])):a:o.b?rp():Ym,c=_f(t);return u(tp,u(Pu,zu,zf(t)),u(eb,w(c,c,c),i))})),ap=r((function(n,e){return s(op,!0,!0,n,e)})),ip=function(n){switch(n.$){case 0:var e=n.b;return z([u(ub,Ub(n.a),e)]);case 1:var r=n.b;return z([u(kb,Ub(n.a),r)]);case 3:var t=n.b;return z([u(ap,Ub(n.a),t)]);case 2:var o=n.b;return z([u(Sb,Ub(n.a),o)]);case 4:var a=n.b;return z([u(Ib,(i=n.a,u(sb,0,fb(function(n){var e=gc(n);return f(us,e.cY,e.cp,e.cg)}(i)))),a)]);default:return u(Kf,ip,n.a)}var i},cp=function(n){return u(Kf,ip,n)},lp=r((function(n,e){return function(n){var e,r=u(Rd,n.fq,{ch:jd,eO:n.fx,cr:8e4}),t=kd({ch:Ed,cr:2e4,fB:n.fB}),o=kd({ch:Ad,cr:15e3,fB:yd(n.fB)}),a=f(Xd,r,t,o);return function(n){return u(_d,{eA:n.eA,dm:n.dm,eH:n.eH,dq:n.dq,dt:n.dt},z([{dx:n.dx,eT:n.eT,fa:n.fa,fA:n.fA,fG:n.fG}]))}({eA:(e=n.cm,{$:2,a:e}),dm:n.dm,eH:n.eH,dq:n.dq,dt:n.dt,dx:n.dx,eT:1.2*u(Ui,2,15),fa:a,fA:Gd,fG:Ad})}({dm:n.eE,eH:n.eH,dq:.005,cm:n.cm,dt:L(Oi(n.ad.de),Oi(n.ad.cq)),dx:cp(e),fq:!0,fx:u(Zb,n.fw,n.fy),fB:Nd})}));Ca={Main:{init:f(du,r((function(n,e){return u(lp,{eE:Ji,eH:ku({eU:{bF:0,bG:4,di:8},eX:{bF:0,bG:0,di:0},fB:{bF:0,bG:1,di:0}}),cm:n.cm,ad:n.ad,fw:-bu(135),fy:-bu(45)},u(Wf,n,e))})),mu,(function(){return{}}))(u(Ct,(function(n){return wt({cm:n})}),u(Pt,"devicePixelRatio",Mt)))(0)}},n.Elm?function n(e,r){for(var t in r)t in e?"init"==t?C(6):n(e[t],r[t]):e[t]=r[t]}(n.Elm,Ca):n.Elm=Ca}(n);const e=n.Elm.Main.init({node:document.getElementById("elm-node"),flags:{devicePixelRatio:window.devicePixelRatio}});function r(n){const e=[];for(let r=0;r<n.length;r++)e.push({identifier:n[r].identifier,pageX:n[r].pageX,pageY:n[r].pageY});return e}window.addEventListener("touchstart",(n=>{e.ports.touchStart.send(r(n.changedTouches))})),window.addEventListener("touchmove",(n=>{e.ports.touchMove.send(r(n.changedTouches))})),window.addEventListener("touchend",(n=>{e.ports.touchEnd.send(r(n.changedTouches))})),window.addEventListener("touchcancel",(n=>{e.ports.touchCancel.send(r(n.changedTouches))}))}();
//# sourceMappingURL=index.fafb71b4.js.map
