!function(){var n={};!function(n){function e(n,e,r){return r.a=n,r.f=e,r}function r(n){return e(2,n,(function(e){return function(r){return n(e,r)}}))}function t(n){return e(3,n,(function(e){return function(r){return function(t){return n(e,r,t)}}}))}function o(n){return e(4,n,(function(e){return function(r){return function(t){return function(o){return n(e,r,t,o)}}}}))}function a(n){return e(5,n,(function(e){return function(r){return function(t){return function(o){return function(a){return n(e,r,t,o,a)}}}}}))}function i(n){return e(6,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return n(e,r,t,o,a,i)}}}}}}))}function c(n){return e(7,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return n(e,r,t,o,a,i,c)}}}}}}}))}function l(n){return e(8,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return n(e,r,t,o,a,i,c,l)}}}}}}}}))}function u(n,e,r){return 2===n.a?n.f(e,r):n(e)(r)}function f(n,e,r,t){return 3===n.a?n.f(e,r,t):n(e)(r)(t)}function s(n,e,r,t,o){return 4===n.a?n.f(e,r,t,o):n(e)(r)(t)(o)}function d(n,e,r,t,o,a){return 5===n.a?n.f(e,r,t,o,a):n(e)(r)(t)(o)(a)}function v(n,e,r,t,o,a,i){return 6===n.a?n.f(e,r,t,o,a,i):n(e)(r)(t)(o)(a)(i)}function m(n,e,r,t,o,a,i,c){return 7===n.a?n.f(e,r,t,o,a,i,c):n(e)(r)(t)(o)(a)(i)(c)}function b(n,e,r,t,o,a,i,c,l){return 8===n.a?n.f(e,r,t,o,a,i,c,l):n(e)(r)(t)(o)(a)(i)(c)(l)}var p=t((function(n,e,r){for(var t=Array(n),o=0;n>o;o++)t[o]=r(e+o);return t})),g=r((function(n,e){for(var r=Array(n),t=0;n>t&&e.b;t++)r[t]=e.a,e=e.b;return r.length=t,L(r,e)})),h=r((function(n,e){return e[n]})),x=t((function(n,e,r){for(var t=r.length-1;t>=0;t--)e=u(n,r[t],e);return e}));function C(n){throw Error("https://github.com/elm/core/blob/1.0.0/hints/"+n+".md")}function P(n,e){for(var r,t=[],o=M(n,e,0,t);o&&(r=t.pop());o=M(r.a,r.b,0,t));return o}function M(n,e,r,t){if(n===e)return!0;if("object"!=typeof n||null===n||null===e)return"function"==typeof n&&C(5),!1;if(r>100)return t.push(L(n,e)),!0;for(var o in 0>n.$&&(n=Nr(n),e=Nr(e)),n)if(!M(n[o],e[o],r+1,t))return!1;return!0}function y(n,e,r){if("object"!=typeof n)return n===e?0:e>n?-1:1;if(void 0===n.$)return(r=y(n.a,e.a))||(r=y(n.b,e.b))?r:y(n.c,e.c);for(;n.b&&e.b&&!(r=y(n.a,e.a));n=n.b,e=e.b);return r||(n.b?1:e.b?-1:0)}var T=r((function(n,e){var r=y(n,e);return 0>r?Fr:r?$r:Rr}));function L(n,e){return{a:n,b:e}}function w(n,e,r){return{a:n,b:e,c:r}}function S(n,e){var r={};for(var t in n)r[t]=n[t];for(var t in e)r[t]=e[t];return r}function N(n,e){if("string"==typeof n)return n+e;if(!n.b)return e;var r=$(n.a,e);n=n.b;for(var t=r;n.b;n=n.b)t=t.b=$(n.a,e);return r}var R={$:0};function $(n,e){return{$:1,a:n,b:e}}var F=r($);function D(n){for(var e=R,r=n.length;r--;)e=$(n[r],e);return e}function z(n){for(var e=[];n.b;n=n.b)e.push(n.a);return e}var _=t((function(n,e,r){for(var t=[];e.b&&r.b;e=e.b,r=r.b)t.push(u(n,e.a,r.a));return D(t)})),A=r((function(n,e){return n*e})),V=r(Math.pow),G=r((function(n,e){var r=e%n;return 0===n?C(11):r>0&&0>n||0>r&&n>0?r+n:r})),k=Math.cos,B=Math.sin,E=Math.tan,H=Math.ceil,I=Math.floor,W=Math.round,j=Math.sqrt,U=Math.log,O=isNaN,q=r((function(n,e){return n+e})),Y=t((function(n,e,r){for(var t=r.length;t--;){var o=r[t],a=r.charCodeAt(t);56320>a||a>57343||(o=r[--t]+o),e=u(n,o,e)}return e})),X=r((function(n,e){return e.split(n)})),Z=r((function(n,e){return e.join(n)})),K=t((function(n,e,r){return r.slice(n,e)})),J=r((function(n,e){return 0===e.indexOf(n)}));function Q(n){return n+""}function nn(n){return{$:2,b:n}}var en=nn((function(n){return"number"!=typeof n?hn("an INT",n):n>-2147483647&&2147483647>n&&(0|n)===n?Vr(n):!isFinite(n)||n%1?hn("an INT",n):Vr(n)})),rn=nn((function(n){return"boolean"==typeof n?Vr(n):hn("a BOOL",n)})),tn=nn((function(n){return"number"==typeof n?Vr(n):hn("a FLOAT",n)})),on=(nn((function(n){return Vr(n)})),nn((function(n){return"string"==typeof n?Vr(n):n instanceof String?Vr(n+""):hn("a STRING",n)}))),an=r((function(n,e){return{$:6,d:n,b:e}}));function cn(n,e){return{$:9,f:n,g:e}}var ln=r((function(n,e){return{$:10,b:e,h:n}})),un=r((function(n,e){return cn(n,[e])})),fn=t((function(n,e,r){return cn(n,[e,r])})),sn=o((function(n,e,r,t){return cn(n,[e,r,t])})),dn=r((function(n,e){try{return mn(n,JSON.parse(e))}catch(n){return Dr(u(zr,"This is not valid JSON! "+n.message,e))}})),vn=r((function(n,e){return mn(n,e)}));function mn(n,e){switch(n.$){case 2:return n.b(e);case 5:return null===e?Vr(n.c):hn("null",e);case 3:return pn(e)?bn(n.b,e,D):hn("a LIST",e);case 4:return pn(e)?bn(n.b,e,gn):hn("an ARRAY",e);case 6:var r=n.d;if("object"!=typeof e||null===e||!(r in e))return hn("an OBJECT with a field named `"+r+"`",e);var t=mn(n.b,e[r]);return xt(t)?t:Dr(u(_r,r,t.a));case 7:var o=n.e;return pn(e)?e.length>o?(t=mn(n.b,e[o]),xt(t)?t:Dr(u(Ar,o,t.a))):hn("a LONGER array. Need index "+o+" but only see "+e.length+" entries",e):hn("an ARRAY",e);case 8:if("object"!=typeof e||null===e||pn(e))return hn("an OBJECT",e);var a=R;for(var i in e)if(e.hasOwnProperty(i)){if(t=mn(n.b,e[i]),!xt(t))return Dr(u(_r,i,t.a));a=$(L(i,t.a),a)}return Vr(Kr(a));case 9:for(var c=n.f,l=n.g,f=0;l.length>f;f++){if(t=mn(l[f],e),!xt(t))return t;c=c(t.a)}return Vr(c);case 10:return t=mn(n.b,e),xt(t)?mn(n.h(t.a),e):t;case 11:for(var s=R,d=n.g;d.b;d=d.b){if(t=mn(d.a,e),xt(t))return t;s=$(t.a,s)}return Dr(Gr(Kr(s)));case 1:return Dr(u(zr,n.a,e));case 0:return Vr(n.a)}}function bn(n,e,r){for(var t=e.length,o=Array(t),a=0;t>a;a++){var i=mn(n,e[a]);if(!xt(i))return Dr(u(Ar,a,i.a));o[a]=i.a}return Vr(r(o))}function pn(n){return Array.isArray(n)||"undefined"!=typeof FileList&&n instanceof FileList}function gn(n){return u(ht,n.length,(function(e){return n[e]}))}function hn(n,e){return Dr(u(zr,"Expecting "+n,e))}function xn(n,e){if(n===e)return!0;if(n.$!==e.$)return!1;switch(n.$){case 0:case 1:return n.a===e.a;case 2:return n.b===e.b;case 5:return n.c===e.c;case 3:case 4:case 8:return xn(n.b,e.b);case 6:return n.d===e.d&&xn(n.b,e.b);case 7:return n.e===e.e&&xn(n.b,e.b);case 9:return n.f===e.f&&Cn(n.g,e.g);case 10:return n.h===e.h&&xn(n.b,e.b);case 11:return Cn(n.g,e.g)}}function Cn(n,e){var r=n.length;if(r!==e.length)return!1;for(var t=0;r>t;t++)if(!xn(n[t],e[t]))return!1;return!0}var Pn=r((function(n,e){return JSON.stringify(e,null,n)+""}));function Mn(n){return n}var yn=t((function(n,e,r){return r[n]=e,r}));function Tn(n){return{$:0,a:n}}function Ln(n){return{$:2,b:n,c:null}}var wn=r((function(n,e){return{$:3,b:n,d:e}})),Sn=0;function Nn(n){var e={$:0,e:Sn++,f:n,g:null,h:[]};return _n(e),e}function Rn(n){return Ln((function(e){e(Tn(Nn(n)))}))}function $n(n,e){n.h.push(e),_n(n)}var Fn=r((function(n,e){return Ln((function(r){$n(n,e),r(Tn(0))}))})),Dn=!1,zn=[];function _n(n){if(zn.push(n),!Dn){for(Dn=!0;n=zn.shift();)An(n);Dn=!1}}function An(n){for(;n.f;){var e=n.f.$;if(0===e||1===e){for(;n.g&&n.g.$!==e;)n.g=n.g.i;if(!n.g)return;n.f=n.g.b(n.f.a),n.g=n.g.i}else{if(2===e)return void(n.f.c=n.f.b((function(e){n.f=e,_n(n)})));if(5===e){if(0===n.h.length)return;n.f=n.f.b(n.h.shift())}else n.g={$:3===e?0:1,b:n.f.b,i:n.g},n.f=n.f.d}}}var Vn={};function Gn(n,e,r,t,o){return{b:n,c:e,d:r,e:t,f:o}}function kn(n,e){var r={g:e,h:void 0},t=n.c,o=n.d,a=n.e,i=n.f;return r.h=Nn(u(wn,(function n(e){return u(wn,n,{$:5,b:function(n){var c=n.a;return 0===n.$?f(o,r,c,e):a&&i?s(t,r,c.i,c.j,e):f(t,r,a?c.i:c.j,e)}})}),n.b))}var Bn=r((function(n,e){return Ln((function(r){n.g(e),r(Tn(0))}))})),En=r((function(n,e){return u(Fn,n.h,{$:0,a:e})}));function Hn(n){return function(e){return{$:1,k:n,l:e}}}function In(n){return{$:2,m:n}}var Wn=r((function(n,e){return{$:3,n:n,o:e}})),jn=[],Un=!1;function On(n,e,r){if(jn.push({p:n,q:e,r:r}),!Un){Un=!0;for(var t;t=jn.shift();)qn(t.p,t.q,t.r);Un=!1}}function qn(n,e,r){var t={};for(var o in Yn(!0,e,t,null),Yn(!1,r,t,null),n)$n(n[o],{$:"fx",a:t[o]||{i:R,j:R}})}function Yn(n,e,r,t){switch(e.$){case 1:var o=e.k,a=function(n,e,r,t){return u(n?Vn[e].e:Vn[e].f,(function(n){for(var e=r;e;e=e.t)n=e.s(n);return n}),t)}(n,o,t,e.l);return void(r[o]=function(n,e,r){return r=r||{i:R,j:R},n?r.i=$(e,r.i):r.j=$(e,r.j),r}(n,a,r[o]));case 2:for(var i=e.m;i.b;i=i.b)Yn(n,i.a,r,t);return;case 3:return void Yn(n,e.o,r,{s:e.n,t:t})}}function Xn(n,e){return function(n){Vn[n]&&C(3)}(n),Vn[n]={f:Zn,u:e,a:Kn},Hn(n)}var Zn=r((function(n,e){return function(r){return n(e(r))}}));function Kn(n,e){var r=R,o=Vn[n].u,a=Tn(null);return Vn[n].b=a,Vn[n].c=t((function(n,e){return r=e,a})),{send:function(n){var t=u(vn,o,n);xt(t)||C(4);for(var a=t.a,i=r;i.b;i=i.b)e(i.a(a))}}}var Jn="undefined"!=typeof document?document:{};function Qn(n,e){n.appendChild(e)}function ne(n){return{$:0,a:n}}var ee,re=r((function(n,e){return r((function(r,t){for(var o=[],a=0;t.b;t=t.b){var i=t.a;a+=i.b||0,o.push(i)}return a+=o.length,{$:1,c:e,d:ue(r),e:o,f:n,b:a}}))}))(void 0),te=r((function(n,e){return r((function(r,t){for(var o=[],a=0;t.b;t=t.b){var i=t.a;a+=i.b.b||0,o.push(i)}return a+=o.length,{$:2,c:e,d:ue(r),e:o,f:n,b:a}}))}))(void 0),oe=r((function(n,e){return{$:4,j:n,k:e,b:1+(e.b||0)}})),ae=r((function(n,e){return{$:"a0",n:n,o:e}})),ie=r((function(n,e){return{$:"a1",n:n,o:e}})),ce=r((function(n,e){return{$:"a2",n:n,o:e}})),le=r((function(n,e){return{$:"a3",n:n,o:e}}));function ue(n){for(var e={};n.b;n=n.b){var r=n.a,t=r.$,o=r.n,a=r.o;if("a2"!==t){var i=e[t]||(e[t]={});"a3"===t&&"class"===o?fe(i,o,a):i[o]=a}else"className"===o?fe(e,o,a):e[o]=a}return e}function fe(n,e,r){var t=n[e];n[e]=t?t+" "+r:r}function se(n,e){var r=n.$;if(5===r)return se(n.k||(n.k=n.m()),e);if(0===r)return Jn.createTextNode(n.a);if(4===r){for(var t=n.k,o=n.j;4===t.$;)"object"!=typeof o?o=[o,t.j]:o.push(t.j),t=t.k;var a={j:o,p:e};return(i=se(t,a)).elm_event_node_ref=a,i}if(3===r)return de(i=n.h(n.g),e,n.d),i;var i=n.f?Jn.createElementNS(n.f,n.c):Jn.createElement(n.c);de(i,e,n.d);for(var c=n.e,l=0;c.length>l;l++)Qn(i,se(1===r?c[l]:c[l].b,e));return i}function de(n,e,r){for(var t in r){var o=r[t];"a1"===t?ve(n,o):"a0"===t?pe(n,e,o):"a3"===t?me(n,o):"a4"===t?be(n,o):("value"!==t&&"checked"!==t||n[t]!==o)&&(n[t]=o)}}function ve(n,e){var r=n.style;for(var t in e)r[t]=e[t]}function me(n,e){for(var r in e){var t=e[r];void 0!==t?n.setAttribute(r,t):n.removeAttribute(r)}}function be(n,e){for(var r in e){var t=e[r],o=t.f,a=t.o;void 0!==a?n.setAttributeNS(o,r,a):n.removeAttributeNS(o,r)}}function pe(n,e,r){var t=n.elmFs||(n.elmFs={});for(var o in r){var a=r[o],i=t[o];if(a){if(i){if(i.q.$===a.$){i.q=a;continue}n.removeEventListener(o,i)}i=ge(e,a),n.addEventListener(o,i,ee&&{passive:2>wt(a)}),t[o]=i}else n.removeEventListener(o,i),t[o]=void 0}}try{window.addEventListener("t",null,Object.defineProperty({},"passive",{get:function(){ee=!0}}))}catch(n){}function ge(n,e){function r(e){var t=r.q,o=mn(t.a,e);if(xt(o)){for(var a,i=wt(t),c=o.a,l=i?3>i?c.a:c.au:c,u=1==i?c.b:3==i&&c.c3,f=(u&&e.stopPropagation(),(2==i?c.b:3==i&&c.cT)&&e.preventDefault(),n);a=f.j;){if("function"==typeof a)l=a(l);else for(var s=a.length;s--;)l=a[s](l);f=f.p}f(l,u)}}return r.q=e,r}function he(n,e){return n.$==e.$&&xn(n.a,e.a)}function xe(n,e,r,t){var o={$:e,r:r,s:t,t:void 0,u:void 0};return n.push(o),o}function Ce(n,e,r,t){if(n!==e){var o=n.$,a=e.$;if(o!==a){if(1!==o||2!==a)return void xe(r,0,t,e);e=function(n){for(var e=n.e,r=e.length,t=Array(r),o=0;r>o;o++)t[o]=e[o].b;return{$:1,c:n.c,d:n.d,e:t,f:n.f,b:n.b}}(e),a=1}switch(a){case 5:for(var i=n.l,c=e.l,l=i.length,u=l===c.length;u&&l--;)u=i[l]===c[l];if(u)return void(e.k=n.k);e.k=e.m();var f=[];return Ce(n.k,e.k,f,0),void(f.length>0&&xe(r,1,t,f));case 4:for(var s=n.j,d=e.j,v=!1,m=n.k;4===m.$;)v=!0,"object"!=typeof s?s=[s,m.j]:s.push(m.j),m=m.k;for(var b=e.k;4===b.$;)v=!0,"object"!=typeof d?d=[d,b.j]:d.push(b.j),b=b.k;return v&&s.length!==d.length?void xe(r,0,t,e):((v?function(n,e){for(var r=0;n.length>r;r++)if(n[r]!==e[r])return!1;return!0}(s,d):s===d)||xe(r,2,t,d),void Ce(m,b,r,t+1));case 0:return void(n.a!==e.a&&xe(r,3,t,e.a));case 1:return void Pe(n,e,r,t,ye);case 2:return void Pe(n,e,r,t,Te);case 3:if(n.h!==e.h)return void xe(r,0,t,e);var p=Me(n.d,e.d);p&&xe(r,4,t,p);var g=e.i(n.g,e.g);return void(g&&xe(r,5,t,g))}}}function Pe(n,e,r,t,o){if(n.c===e.c&&n.f===e.f){var a=Me(n.d,e.d);a&&xe(r,4,t,a),o(n,e,r,t)}else xe(r,0,t,e)}function Me(n,e,r){var t;for(var o in n)if("a1"!==o&&"a0"!==o&&"a3"!==o&&"a4"!==o)if(o in e){var a=n[o],i=e[o];a===i&&"value"!==o&&"checked"!==o||"a0"===r&&he(a,i)||((t=t||{})[o]=i)}else(t=t||{})[o]=r?"a1"===r?"":"a0"===r||"a3"===r?void 0:{f:n[o].f,o:void 0}:"string"==typeof n[o]?"":null;else{var c=Me(n[o],e[o]||{},o);c&&((t=t||{})[o]=c)}for(var l in e)l in n||((t=t||{})[l]=e[l]);return t}function ye(n,e,r,t){var o=n.e,a=e.e,i=o.length,c=a.length;i>c?xe(r,6,t,{v:c,i:i-c}):c>i&&xe(r,7,t,{v:i,e:a});for(var l=c>i?i:c,u=0;l>u;u++){var f=o[u];Ce(f,a[u],r,++t),t+=f.b||0}}function Te(n,e,r,t){for(var o=[],a={},i=[],c=n.e,l=e.e,u=c.length,f=l.length,s=0,d=0,v=t;u>s&&f>d;){var m=(w=c[s]).a,b=(S=l[d]).a,p=w.b,g=S.b,h=void 0,x=void 0;if(m!==b){var C=c[s+1],P=l[d+1];if(C){var M=C.a,y=C.b;x=b===M}if(P){var T=P.a,L=P.b;h=m===T}if(h&&x)Ce(p,L,o,++v),we(a,o,m,g,d,i),v+=p.b||0,Se(a,o,m,y,++v),v+=y.b||0,s+=2,d+=2;else if(h)v++,we(a,o,b,g,d,i),Ce(p,L,o,v),v+=p.b||0,s+=1,d+=2;else if(x)Se(a,o,m,p,++v),v+=p.b||0,Ce(y,g,o,++v),v+=y.b||0,s+=2,d+=1;else{if(!C||M!==T)break;Se(a,o,m,p,++v),we(a,o,b,g,d,i),v+=p.b||0,Ce(y,L,o,++v),v+=y.b||0,s+=2,d+=2}}else Ce(p,g,o,++v),v+=p.b||0,s++,d++}for(;u>s;){var w;v++,Se(a,o,(w=c[s]).a,p=w.b,v),v+=p.b||0,s++}for(;f>d;){var S,N=N||[];we(a,o,(S=l[d]).a,S.b,void 0,N),d++}(o.length>0||i.length>0||N)&&xe(r,8,t,{w:o,x:i,y:N})}var Le="_elmW6BL";function we(n,e,r,t,o,a){var i=n[r];if(!i)return a.push({r:o,A:i={c:0,z:t,r:o,s:void 0}}),void(n[r]=i);if(1===i.c){a.push({r:o,A:i}),i.c=2;var c=[];return Ce(i.z,t,c,i.r),i.r=o,void(i.s.s={w:c,A:i})}we(n,e,r+Le,t,o,a)}function Se(n,e,r,t,o){var a=n[r];if(a){if(0===a.c){a.c=2;var i=[];return Ce(t,a.z,i,o),void xe(e,9,o,{w:i,A:a})}Se(n,e,r+Le,t,o)}else{var c=xe(e,9,o,void 0);n[r]={c:1,z:t,r:o,s:c}}}function Ne(n,e,r,t){Re(n,e,r,0,0,e.b,t)}function Re(n,e,r,t,o,a,i){for(var c=r[t],l=c.r;l===o;){var u=c.$;if(1===u)Ne(n,e.k,c.s,i);else if(8===u)c.t=n,c.u=i,(f=c.s.w).length>0&&Re(n,e,f,0,o,a,i);else if(9===u){c.t=n,c.u=i;var f,s=c.s;s&&(s.A.s=n,(f=s.w).length>0&&Re(n,e,f,0,o,a,i))}else c.t=n,c.u=i;if(!(c=r[++t])||(l=c.r)>a)return t}var d=e.$;if(4===d){for(var v=e.k;4===v.$;)v=v.k;return Re(n,v,r,t,o+1,a,n.elm_event_node_ref)}for(var m=e.e,b=n.childNodes,p=0;m.length>p;p++){o++;var g=1===d?m[p]:m[p].b,h=o+(g.b||0);if(!(o>l||l>h||(c=r[t=Re(b[p],g,r,t,o,h,i)])&&(l=c.r)<=a))return t;o=h}return t}function $e(n,e){for(var r=0;e.length>r;r++){var t=e[r],o=t.t,a=Fe(o,t);o===n&&(n=a)}return n}function Fe(n,e){switch(e.$){case 0:return function(n,e,r){var t=n.parentNode,o=se(e,r);return o.elm_event_node_ref||(o.elm_event_node_ref=n.elm_event_node_ref),t&&o!==n&&t.replaceChild(o,n),o}(n,e.s,e.u);case 4:return de(n,e.u,e.s),n;case 3:return n.replaceData(0,n.length,e.s),n;case 1:return $e(n,e.s);case 2:return n.elm_event_node_ref?n.elm_event_node_ref.j=e.s:n.elm_event_node_ref={j:e.s,p:e.u},n;case 6:for(var r=e.s,t=0;r.i>t;t++)n.removeChild(n.childNodes[r.v]);return n;case 7:for(var o=(r=e.s).e,a=n.childNodes[t=r.v];o.length>t;t++)n.insertBefore(se(o[t],e.u),a);return n;case 9:if(!(r=e.s))return n.parentNode.removeChild(n),n;var i=r.A;return void 0!==i.r&&n.parentNode.removeChild(n),i.s=$e(n,r.w),n;case 8:return function(n,e){var r=e.s,t=function(n,e){if(n){for(var r=Jn.createDocumentFragment(),t=0;n.length>t;t++){var o=n[t].A;Qn(r,2===o.c?o.s:se(o.z,e.u))}return r}}(r.y,e);n=$e(n,r.w);for(var o=r.x,a=0;o.length>a;a++){var i=o[a],c=i.A,l=2===c.c?c.s:se(c.z,e.u);n.insertBefore(l,n.childNodes[i.r])}return t&&Qn(n,t),n}(n,e);case 5:return e.s(n);default:C(10)}}function De(n){if(3===n.nodeType)return ne(n.textContent);if(1!==n.nodeType)return ne("");for(var e=R,r=n.attributes,t=r.length;t--;){var o=r[t];e=$(u(le,o.name,o.value),e)}var a=n.tagName.toLowerCase(),i=R,c=n.childNodes;for(t=c.length;t--;)i=$(De(c[t]),i);return f(re,a,e,i)}var ze=o((function(n,e,r,t){return function(n,e,r,t,o,a){var i=u(vn,n,e?e.flags:void 0);xt(i)||C(2);var c={},l=r(i.a),f=l.a,s=a(v,f),d=function(n,e){var r;for(var t in Vn){var o=Vn[t];o.a&&((r=r||{})[t]=o.a(t,e)),n[t]=kn(o,e)}return r}(c,v);function v(n,e){var r=u(t,n,f);s(f=r.a,e),On(c,r.b,o(f))}return On(c,l.b,o(f)),d?{ports:d}:{}}(e,t,n.e5,n.fF,n.fz,(function(e,r){var o=n.fH,a=t.node,i=De(a);return function(n,e){e(n);var r=0;function t(){r=1===r?0:(Ae(t),e(n),1)}return function(o,a){n=o,a?(e(n),2===r&&(r=1)):(0===r&&Ae(t),r=2)}}(r,(function(n){var r=o(n),t=function(n,e){var r=[];return Ce(n,e,r,0),r}(i,r);a=function(n,e,r,t){return 0===r.length?n:(Ne(n,e,r,t),$e(n,r))}(a,i,t,e),i=r}))}))})),_e="undefined"!=typeof cancelAnimationFrame?cancelAnimationFrame:function(n){clearTimeout(n)},Ae="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:function(n){return setTimeout(n,1e3/60)},Ve={addEventListener:function(){},removeEventListener:function(){}},Ge="undefined"!=typeof document?document:Ve,ke="undefined"!=typeof window?window:Ve,Be=t((function(n,e,r){return Rn(Ln((function(){function t(n){Nn(r(n))}return n.addEventListener(e,t,ee&&{passive:!0}),function(){n.removeEventListener(e,t)}})))})),Ee=r((function(n,e){var r=mn(n,e);return xt(r)?kr(r.a):Br})),He=r((function(n,e){var r="g";n.fe&&(r+="m"),n.eH&&(r+="i");try{return kr(RegExp(e,r))}catch(n){return Br}})),Ie=t((function(n,e,r){for(var t,o=[],a=0,i=r,c=e.lastIndex,l=-1;a++<n&&(t=e.exec(i))&&l!=e.lastIndex;){for(var u=t.length-1,f=Array(u);u>0;){var d=t[u];f[--u]=d?kr(d):Br}o.push(s(Ni,t[0],t.index,a,D(f))),l=e.lastIndex}return e.lastIndex=c,D(o)})),We=0;function je(n,e){for(;e.b;e=e.b)n(e.a)}function Ue(n){for(var e=0;n.b;n=n.b)e++;return e}var Oe="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:function(n){setTimeout(n,1e3/60)},qe=a((function(n,e,r,t,o){return{$:0,a:n,b:e,c:r,d:t,e:o}})),Ye=r((function(n,e){var r=n.blend;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.BLEND),r.enabled=!0),r.a===e.a&&r.d===e.d||(n.gl.blendEquationSeparate(e.a,e.d),r.a=e.a,r.d=e.d),r.b===e.b&&r.c===e.c&&r.e===e.e&&r.f===e.f||(n.gl.blendFuncSeparate(e.b,e.c,e.e,e.f),r.b=e.b,r.c=e.c,r.e=e.e,r.f=e.f),r.g===e.g&&r.h===e.h&&r.i===e.i&&r.j===e.j||(n.gl.blendColor(e.g,e.h,e.i,e.j),r.g=e.g,r.h=e.h,r.i=e.i,r.j=e.j)})),Xe=r((function(n,e){var r=n.depthTest;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.DEPTH_TEST),r.enabled=!0),r.a!==e.a&&(n.gl.depthFunc(e.a),r.a=e.a),r.b!==e.b&&(n.gl.depthMask(e.b),r.b=e.b),r.c===e.c&&r.d===e.d||(n.gl.depthRange(e.c,e.d),r.c=e.c,r.d=e.d)})),Ze=r((function(n,e){var r=n.stencilTest;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.STENCIL_TEST),r.enabled=!0),r.d===e.d&&r.a===e.a&&r.b===e.b||(n.gl.stencilFuncSeparate(n.gl.FRONT,e.d,e.a,e.b),r.d=e.d),r.e===e.e&&r.f===e.f&&r.g===e.g||(n.gl.stencilOpSeparate(n.gl.FRONT,e.e,e.f,e.g),r.e=e.e,r.f=e.f,r.g=e.g),r.c!==e.c&&(n.gl.stencilMask(e.c),r.c=e.c),r.h===e.h&&r.a===e.a&&r.b===e.b||(n.gl.stencilFuncSeparate(n.gl.BACK,e.h,e.a,e.b),r.h=e.h,r.a=e.a,r.b=e.b),r.i===e.i&&r.j===e.j&&r.k===e.k||(n.gl.stencilOpSeparate(n.gl.BACK,e.i,e.j,e.k),r.i=e.i,r.j=e.j,r.k=e.k)})),Ke=r((function(n,e){var r=n.scissor;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.SCISSOR_TEST),r.enabled=!0),r.a===e.a&&r.b===e.b&&r.c===e.c&&r.d===e.d||(n.gl.scissor(e.a,e.b,e.c,e.d),r.a=e.a,r.b=e.b,r.c=e.c,r.d=e.d)})),Je=r((function(n,e){var r=n.colorMask;r.toggle=n.toggle,r.enabled=!0,r.a===e.a&&r.b===e.b&&r.c===e.c&&r.d===e.d||(n.gl.colorMask(e.a,e.b,e.c,e.d),r.a=e.a,r.b=e.b,r.c=e.c,r.d=e.d)})),Qe=r((function(n,e){var r=n.cullFace;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.CULL_FACE),r.enabled=!0),r.a!==e.a&&(n.gl.cullFace(e.a),r.a=e.a)})),nr=r((function(n,e){var r=n.polygonOffset;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.POLYGON_OFFSET_FILL),r.enabled=!0),r.a===e.a&&r.b===e.b||(n.gl.polygonOffset(e.a,e.b),r.a=e.a,r.b=e.b)})),er=r((function(n,e){var r=n.sampleCoverage;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.SAMPLE_COVERAGE),r.enabled=!0),r.a===e.a&&r.b===e.b||(n.gl.sampleCoverage(e.a,e.b),r.a=e.a,r.b=e.b)})),rr=function(n){n.scissor.enabled&&(n.gl.disable(n.gl.SCISSOR_TEST),n.scissor.enabled=!1)},tr=function(n){var e=n.colorMask;e.a&&e.b&&e.c&&e.d||(n.gl.colorMask(!0,!0,!0,!0),e.a=!0,e.b=!0,e.c=!0,e.d=!0)},or=["blend","depthTest","stencilTest","scissor","colorMask","cullFace","polygonOffset","sampleCoverage","sampleAlphaToCoverage"],ar=[function(n){n.blend.enabled&&(n.gl.disable(n.gl.BLEND),n.blend.enabled=!1)},function(n){n.depthTest.enabled&&(n.gl.disable(n.gl.DEPTH_TEST),n.depthTest.enabled=!1)},function(n){n.stencilTest.enabled&&(n.gl.disable(n.gl.STENCIL_TEST),n.stencilTest.enabled=!1)},rr,tr,function(n){n.gl.disable(n.gl.CULL_FACE)},function(n){n.gl.disable(n.gl.POLYGON_OFFSET_FILL)},function(n){n.gl.disable(n.gl.SAMPLE_COVERAGE)},function(n){n.gl.disable(n.gl.SAMPLE_ALPHA_TO_COVERAGE)}];function ir(n,e,r){var t=n.createShader(r);return n.shaderSource(t,"#extension GL_OES_standard_derivatives : enable\n"+e),n.compileShader(t),t}function cr(n,e){switch(e){case n.FLOAT:return{size:1,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC2:return{size:2,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC3:return{size:3,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC4:return{size:4,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_MAT4:return{size:4,arraySize:4,type:Float32Array,baseType:n.FLOAT};case n.INT:return{size:1,arraySize:1,type:Int32Array,baseType:n.INT}}}function lr(n,e,r,t){for(var o=r.a.dr,a=[],i=0;o>i;i++)a.push(String.fromCharCode(97+i));var c=cr(n,e.type);if(void 0===c)throw Error("No info available for: "+e.type);var l=0,u=c.size*c.arraySize*o,f=new c.type(Ue(r.b)*u);je((function(n){!function(n,e,r,t,i){var c;if(1===o)for(c=0;e>c;c++)n[r++]=1===e?t[i]:t[i][c];else a.forEach((function(o){for(c=0;e>c;c++)n[r++]=1===e?t[o][i]:t[o][i][c]}))}(f,c.size*c.arraySize,l,n,t[e.name]||e.name),l+=u}),r.b);var s=n.createBuffer();return n.bindBuffer(n.ARRAY_BUFFER,s),n.bufferData(n.ARRAY_BUFFER,f,n.STATIC_DRAW),s}function ur(n,e){return n+"#"+e}var fr=r((function(n,e){var r=n.f,t=r.gl;return t?(t.viewport(0,0,t.drawingBufferWidth,t.drawingBufferHeight),r.depthTest.b||(t.depthMask(!0),r.depthTest.b=!0),r.stencilTest.c!==r.STENCIL_WRITEMASK&&(t.stencilMask(r.STENCIL_WRITEMASK),r.stencilTest.c=r.STENCIL_WRITEMASK),rr(r),tr(r),t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT|t.STENCIL_BUFFER_BIT),je((function(e){if(e.d.b.b){var o,a,i,c,l;if(e.b.id&&e.c.id&&(o=ur(e.b.id,e.c.id),a=r.programs[o]),!a){var u,f;e.b.id?u=r.shaders[e.b.id]:e.b.id=We++,u||(u=ir(t,e.b.src,t.VERTEX_SHADER),r.shaders[e.b.id]=u),e.c.id?f=r.shaders[e.c.id]:e.c.id=We++,f||(f=ir(t,e.c.src,t.FRAGMENT_SHADER),r.shaders[e.c.id]=f);var s=function(n,e,r){var t=n.createProgram();if(n.attachShader(t,e),n.attachShader(t,r),n.linkProgram(t),!n.getProgramParameter(t,n.LINK_STATUS))throw"Link failed: "+n.getProgramInfoLog(t)+"\nvs info-log: "+n.getShaderInfoLog(e)+"\nfs info-log: "+n.getShaderInfoLog(r);return t}(t,u,f);(a={glProgram:s,attributes:Object.assign({},e.b.attributes,e.c.attributes),currentUniforms:{},activeAttributes:[],activeAttributeLocations:[]}).uniformSetters=function(n,e,r,t){var o=r.glProgram,a=r.currentUniforms,i=0,c=e.f;function l(e,r){var t=r.name,o=n.getUniformLocation(e,t);switch(r.type){case n.INT:return function(e){a[t]!==e&&(n.uniform1i(o,e),a[t]=e)};case n.FLOAT:return function(e){a[t]!==e&&(n.uniform1f(o,e),a[t]=e)};case n.FLOAT_VEC2:return function(e){a[t]!==e&&(n.uniform2f(o,e[0],e[1]),a[t]=e)};case n.FLOAT_VEC3:return function(e){a[t]!==e&&(n.uniform3f(o,e[0],e[1],e[2]),a[t]=e)};case n.FLOAT_VEC4:return function(e){a[t]!==e&&(n.uniform4f(o,e[0],e[1],e[2],e[3]),a[t]=e)};case n.FLOAT_MAT4:return function(e){a[t]!==e&&(n.uniformMatrix4fv(o,!1,new Float32Array(e)),a[t]=e)};case n.SAMPLER_2D:var l=i++;return function(e){n.activeTexture(n.TEXTURE0+l);var r=c.textures.get(e);r||(r=e.eL(n),c.textures.set(e,r)),n.bindTexture(n.TEXTURE_2D,r),a[t]!==e&&(n.uniform1i(o,l),a[t]=e)};case n.BOOL:return function(e){a[t]!==e&&(n.uniform1i(o,e),a[t]=e)};default:return function(){}}}for(var u={},f=n.getProgramParameter(o,n.ACTIVE_UNIFORMS),s=0;f>s;s++){var d=n.getActiveUniform(o,s);u[t[d.name]||d.name]=l(o,d)}return u}(t,n,a,Object.assign({},e.b.uniforms,e.c.uniforms));var d=t.getProgramParameter(s,t.ACTIVE_ATTRIBUTES);for(i=0;d>i;i++){var v=t.getActiveAttrib(s,i),m=t.getAttribLocation(s,v.name);a.activeAttributes.push(v),a.activeAttributeLocations.push(m)}o=ur(e.b.id,e.c.id),r.programs[o]=a}r.lastProgId!==o&&(t.useProgram(a.glProgram),r.lastProgId=o),c=a.uniformSetters,Object.keys(l=e.e).forEach((function(n){var e=c[n];e&&e(l[n])}));var b=r.buffers.get(e.d);for(b||(b=function(n,e){if(e.a.dB>0){var r=n.createBuffer(),t=function(n,e){var r,t=new Uint32Array(Ue(n)*e),o=0;return je((function(n){if(1===e)t[o++]=n;else for(r=0;e>r;r++)t[o++]=n[String.fromCharCode(97+r)]}),n),t}(e.c,e.a.dB);return n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,r),n.bufferData(n.ELEMENT_ARRAY_BUFFER,t,n.STATIC_DRAW),{numIndices:t.length,indexBuffer:r,buffers:{}}}return{numIndices:e.a.dr*Ue(e.b),indexBuffer:null,buffers:{}}}(t,e.d),r.buffers.set(e.d,b)),i=0;a.activeAttributes.length>i;i++){m=a.activeAttributeLocations[i],void 0===b.buffers[(v=a.activeAttributes[i]).name]&&(b.buffers[v.name]=lr(t,v,e.d,a.attributes)),t.bindBuffer(t.ARRAY_BUFFER,b.buffers[v.name]);var p=cr(t,v.type);if(1===p.arraySize)t.enableVertexAttribArray(m),t.vertexAttribPointer(m,p.size,p.baseType,!1,0,0);else for(var g=4*p.size,h=g*p.arraySize,x=0;p.arraySize>x;x++)t.enableVertexAttribArray(m+x),t.vertexAttribPointer(m+x,p.size,p.baseType,!1,h,g*x)}for(r.toggle=!r.toggle,je(Ks(r),e.a),i=0;9>i;i++){var C=r[or[i]];C.toggle!==r.toggle&&C.enabled&&(ar[i](r),C.enabled=!1,C.toggle=r.toggle)}b.indexBuffer?(t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,b.indexBuffer),t.drawElements(e.d.a.d6,b.numIndices,t.UNSIGNED_INT,0)):t.drawArrays(e.d.a.d6,0,b.numIndices)}}),n.g),e):e})),sr=t((function(n,e,r){return function(n,e,r,t){return{$:3,d:ue(n),g:e,h:r,i:t}}(e,{g:r,f:{},h:n},hr,xr)})),dr=r((function(n,e){n.contextAttributes.alpha=!0,n.contextAttributes.premultipliedAlpha=e.a})),vr=r((function(n,e){n.contextAttributes.depth=!0,n.sceneSettings.push((function(n){n.clearDepth(e.a)}))})),mr=r((function(n,e){n.contextAttributes.stencil=!0,n.sceneSettings.push((function(n){n.clearStencil(e.a)}))})),br=r((function(n){n.contextAttributes.antialias=!0})),pr=r((function(n,e){n.sceneSettings.push((function(n){n.clearColor(e.a,e.b,e.c,e.d)}))})),gr=r((function(n){n.contextAttributes.preserveDrawingBuffer=!0}));function hr(n){var e={contextAttributes:{alpha:!1,depth:!1,stencil:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1},sceneSettings:[]};je((function(n){return u(Zs,e,n)}),n.h);var r=Jn.createElement("canvas"),t=r.getContext&&(r.getContext("webgl",e.contextAttributes)||r.getContext("experimental-webgl",e.contextAttributes));return t&&"undefined"!=typeof WeakMap?(e.sceneSettings.forEach((function(n){n(t)})),t.getExtension("OES_standard_derivatives"),t.getExtension("OES_element_index_uint"),n.f.gl=t,n.f.toggle=!1,n.f.blend={enabled:!1,toggle:!1},n.f.depthTest={enabled:!1,toggle:!1},n.f.stencilTest={enabled:!1,toggle:!1},n.f.scissor={enabled:!1,toggle:!1},n.f.colorMask={enabled:!1,toggle:!1},n.f.cullFace={enabled:!1,toggle:!1},n.f.polygonOffset={enabled:!1,toggle:!1},n.f.sampleCoverage={enabled:!1,toggle:!1},n.f.sampleAlphaToCoverage={enabled:!1,toggle:!1},n.f.shaders=[],n.f.programs={},n.f.lastProgId=null,n.f.buffers=new WeakMap,n.f.textures=new WeakMap,n.f.STENCIL_WRITEMASK=t.getParameter(t.STENCIL_WRITEMASK),Oe((function(){return u(fr,n,r)}))):(r=Jn.createElement("div")).innerHTML='<a href="https://get.webgl.org/">Enable WebGL</a> to see this content!',r}function xr(n,e){return e.f=n.f,fr(e)}var Cr=r((function(n,e){return new Float64Array([n,e])}));new Float64Array(3),new Float64Array(3),new Float64Array(3);var Pr=t((function(n,e,r){return new Float64Array([n,e,r])})),Mr=r((function(n,e){return new Float64Array([e[0]*n,e[1]*n,e[2]*n])})),yr=o((function(n,e,r,t){return new Float64Array([n,e,r,t])}));new Float64Array(16),new Float64Array(16),new Float64Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);var Tr=F,Lr=x,wr=t((function(n,e,t){var o=t.c,a=t.d,i=r((function(e,r){return f(Lr,e.$?n:i,r,e.a)}));return f(Lr,i,f(Lr,n,e,a),o)})),Sr=t((function(n,e,r){for(;;){if(-2===r.$)return e;var t=r.d,o=n,a=f(n,r.b,r.c,f(Sr,n,e,r.e));n=o,e=a,r=t}})),Nr=function(n){return f(Sr,t((function(n,e,r){return u(Tr,L(n,e),r)})),R,n)},Rr=1,$r=2,Fr=0,Dr=function(n){return{$:1,a:n}},zr=r((function(n,e){return{$:3,a:n,b:e}})),_r=r((function(n,e){return{$:0,a:n,b:e}})),Ar=r((function(n,e){return{$:1,a:n,b:e}})),Vr=function(n){return{$:0,a:n}},Gr=function(n){return{$:2,a:n}},kr=function(n){return{$:0,a:n}},Br={$:1},Er=Pn,Hr=Q,Ir=r((function(n,e){return u(Z,n,z(e))})),Wr=r((function(n,e){return D(u(X,n,e))})),jr=t((function(n,e,r){for(;;){if(!r.b)return e;var t=r.b,o=n,a=u(n,r.a,e);n=o,e=a,r=t}})),Ur=function(n){return f(jr,r((function(n,e){return e+1})),0,n)},Or=_,qr=t((function(n,e,r){for(;;){if(y(n,e)>=1)return r;var t=n,o=e-1,a=u(Tr,e,r);n=t,e=o,r=a}})),Yr=r((function(n,e){return f(qr,n,e,R)})),Xr=r((function(n,e){return f(Or,n,u(Yr,0,Ur(e)-1),e)})),Zr=function(n){var e=n.charCodeAt(0);return 55296>e||e>56319?e:1024*(e-55296)+n.charCodeAt(1)-56320+65536},Kr=function(n){return f(jr,Tr,R,n)},Jr=function(n){var e=n.charCodeAt(0);return isNaN(e)?Br:kr(55296>e||e>56319?L(n[0],n.slice(1)):L(n[0]+n[1],n.slice(2)))},Qr=32,nt=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),et=[],rt=H,tt=r((function(n,e){return U(e)/U(n)})),ot=function(n){return n},at=rt(u(tt,2,Qr)),it=s(nt,0,at,et,et),ct=p,lt=function(n){return{$:1,a:n}},ut=I,ft=function(n){return n.length},st=r((function(n,e){return y(n,e)>0?n:e})),dt=A,vt=g,mt=r((function(n,e){for(;;){var r=u(vt,Qr,n),t=r.b,o=u(Tr,{$:0,a:r.a},e);if(!t.b)return Kr(o);n=t,e=o}})),bt=r((function(n,e){for(;;){var r=rt(e/Qr);if(1===r)return u(vt,Qr,n).a;n=u(mt,n,R),e=r}})),pt=r((function(n,e){if(e.m){var r=e.m*Qr,t=ut(u(tt,Qr,r-1)),o=n?Kr(e.B):e.B,a=u(bt,o,e.m);return s(nt,ft(e.r)+r,u(st,5,t*at),a,e.r)}return s(nt,ft(e.r),at,et,e.r)})),gt=a((function(n,e,r,t,o){for(;;){if(0>e)return u(pt,!1,{B:t,m:r/Qr|0,r:o});var a=lt(f(ct,Qr,e,n));n=n,e-=Qr,r=r,t=u(Tr,a,t),o=o}})),ht=r((function(n,e){if(n>0){var r=n%Qr;return d(gt,e,n-r-Qr,n,R,f(ct,r,n-r,e))}return it})),xt=function(n){return!n.$},Ct=ln,Pt=an,Mt=tn,yt=un,Tt=fn,Lt=function(n){return{$:0,a:n}},wt=function(n){switch(n.$){case 0:return 0;case 1:return 1;case 2:return 2;default:return 3}},St=re("div"),Nt=function(n){return{$:1,a:n}},Rt=function(n){return{$:7,a:n}},$t=function(n){return{$:3,a:n}},Ft=t((function(n,e,r){return e(n(r))})),Dt=function(n){return n},zt=function(n){return n.length},_t=K,At=r((function(n,e){return 1>n?e:f(_t,n,zt(e),e)})),Vt=function(n){for(var e=0,r=n.charCodeAt(0),t=43==r||45==r?1:0,o=t;n.length>o;++o){var a=n.charCodeAt(o);if(48>a||a>57)return Br;e=10*e+a-48}return o==t?Br:kr(45==r?-e:e)},Gt=J,kt=Tn,Bt=kt(0),Et=o((function(n,e,r,t){if(t.b){var o=t.a,a=t.b;if(a.b){var i=a.a,c=a.b;if(c.b){var l=c.a,d=c.b;if(d.b){var v=d.b;return u(n,o,u(n,i,u(n,l,u(n,d.a,r>500?f(jr,n,e,Kr(v)):s(Et,n,e,r+1,v)))))}return u(n,o,u(n,i,u(n,l,e)))}return u(n,o,u(n,i,e))}return u(n,o,e)}return e})),Ht=t((function(n,e,r){return s(Et,n,e,0,r)})),It=r((function(n,e){return f(Ht,r((function(e,r){return u(Tr,n(e),r)})),R,e)})),Wt=wn,jt=r((function(n,e){return u(Wt,(function(e){return kt(n(e))}),e)})),Ut=t((function(n,e,r){return u(Wt,(function(e){return u(Wt,(function(r){return kt(u(n,e,r))}),r)}),e)})),Ot=function(n){return f(Ht,Ut(Tr),kt(R),n)},qt=Bn,Yt=r((function(n,e){var r=e;return Rn(u(Wt,qt(n),r))}));Vn.Task=Gn(Bt,t((function(n,e){return u(jt,(function(){return 0}),Ot(u(It,Yt(n),e)))})),t((function(){return kt(0)})),r((function(n,e){return u(jt,n,e)})));var Xt=Hn("Task"),Zt=r((function(n,e){return Xt(u(jt,n,e))})),Kt=ze,Jt=r((function(n,e){return{$:0,a:n,b:e}})),Qt=function(n){return{$:6,a:n}},no=r((function(n,e){return{$:4,a:n,b:e}})),eo=r((function(n,e){return{$:2,a:n,b:e}})),ro=In,to=Wn,oo=function(n){return{$:1,a:n}},ao=t((function(n,e,r){return{cG:r,ej:e,eo:n}})),io=kt(f(ao,R,Br,0)),co=function(n){return Ln((function(e){var r=n.f;2===r.$&&r.c&&r.c(),n.f=null,e(Tn(0))}))},lo=Ln((function(n){n(Tn(Date.now()))})),uo=Ln((function(n){var e=Ae((function(){n(Tn(Date.now()))}));return function(){_e(e)}})),fo=En,so=Rn,vo=t((function(n,e,r){var t=r.ej,o=r.cG,a=L(t,e);return 1===a.a.$?a.b.b?u(Wt,(function(n){return u(Wt,(function(r){return kt(f(ao,e,kr(n),r))}),lo)}),so(u(Wt,fo(n),uo))):io:a.b.b?kt(f(ao,e,t,o)):u(Wt,(function(){return io}),co(a.a.a))})),mo=Dt,bo=t((function(n,e,r){var t=r.eo,o=r.cG,a=function(r){return u(qt,n,(0,r.a)(r.$?e-o:mo(e)))};return u(Wt,(function(n){return u(Wt,(function(){return kt(f(ao,t,kr(n),e))}),Ot(u(It,a,t)))}),so(u(Wt,fo(n),uo)))})),po=t((function(n,e,r){return n(e(r))}));Vn["Browser.AnimationManager"]=Gn(io,vo,bo,0,r((function(n,e){return e.$?oo(u(po,n,e.a)):{$:0,a:u(po,n,e.a)}})));var go=Hn("Browser.AnimationManager"),ho=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),xo=r((function(n,e){return{eb:e,eo:n}})),Co={$:-2},Po=Co,Mo=kt(u(xo,R,Po)),yo=function(n){return L(N(n.a?"w_":"d_",n.b),n)},To=a((function(n,e,r,t,o){return{$:-1,a:n,b:e,c:r,d:t,e:o}})),Lo=a((function(n,e,r,t,o){if(-1!==o.$||o.a){if(-1!==t.$||t.a||-1!==t.d.$||t.d.a)return d(To,n,e,r,t,o);var a=t.d;return i=t.e,d(To,0,t.b,t.c,d(To,1,a.b,a.c,a.d,a.e),d(To,1,e,r,i,o))}var i,c=o.b,l=o.c,u=o.d,f=o.e;return-1!==t.$||t.a?d(To,n,c,l,d(To,0,e,r,t,u),f):d(To,0,e,r,d(To,1,t.b,t.c,t.d,i=t.e),d(To,1,c,l,u,f))})),wo=T,So=t((function(n,e,r){if(-2===r.$)return d(To,0,n,e,Co,Co);var t=r.a,o=r.b,a=r.c,i=r.d,c=r.e;switch(u(wo,n,o)){case 0:return d(Lo,t,o,a,f(So,n,e,i),c);case 1:return d(To,t,o,e,i,c);default:return d(Lo,t,o,a,i,f(So,n,e,c))}})),No=t((function(n,e,r){var t=f(So,n,e,r);return-1!==t.$||t.a?t:d(To,1,t.b,t.c,t.d,t.e)})),Ro=function(n){return f(jr,r((function(n,e){return f(No,n.a,n.b,e)})),Po,n)},$o=t((function(n,e,r){for(;;){if(-2===r.$)return e;var t=r.e,o=n,a=f(n,r.b,r.c,f($o,n,e,r.d));n=o,e=a,r=t}})),Fo=i((function(n,e,o,a,i,c){var l=f($o,t((function(r,t,a){n:for(;;){var i=a.a,c=a.b;if(i.b){var l=i.a,u=l.a,d=l.b,v=i.b;if(0>y(u,r)){r=r,t=t,a=L(v,f(n,u,d,c));continue n}return y(u,r)>0?L(i,f(o,r,t,c)):L(v,s(e,u,d,t,c))}return L(i,f(o,r,t,c))}})),L(Nr(a),c),i),u=l.a,d=l.b;return f(jr,r((function(e,r){return f(n,e.a,e.b,r)})),d,u)})),Do=r((function(n,e){return{dv:e,dD:n}})),zo=t((function(n,e,r){return u(jt,(function(n){return L(e,n)}),f(Be,r.a?ke:Ge,r.b,(function(r){return u(fo,n,u(Do,e,r))})))})),_o=r((function(n,e){return f($o,No,e,n)})),Ao=t((function(n,e,r){var a=t((function(e,r,t){var o=t.c;return w(t.a,t.b,u(Tr,f(zo,n,e,r),o))})),i=t((function(n,e,r){var t=r.b,o=r.c;return w(u(Tr,e,r.a),t,o)})),c=o((function(n,e,r,t){var o=t.c;return w(t.a,f(No,n,e,t.b),o)})),l=u(It,yo,e),s=v(Fo,i,c,a,r.eb,Ro(l),w(R,Po,R)),d=s.b,m=s.c;return u(Wt,(function(n){return kt(u(xo,l,u(_o,d,Ro(n))))}),u(Wt,(function(){return Ot(m)}),Ot(u(It,co,s.a))))})),Vo=t((function(n,e,r){var t=n(e);return t.$?r:u(Tr,t.a,r)})),Go=r((function(n,e){return f(Ht,Vo(n),R,e)}));Vn["Browser.Events"]=Gn(Mo,Ao,t((function(n,e,r){var t=e.dD,o=e.dv,a=u(Go,(function(n){var e=n.b.c;return P(n.a,t)?u(Ee,e,o):Br}),r.eo);return u(Wt,(function(){return kt(r)}),Ot(u(It,qt(n),a)))})),0,r((function(n,e){return f(ho,e.a,e.b,u(yt,n,e.c))})));var ko,Bo,Eo,Ho,Io,Wo,jo,Uo,Oo,qo,Yo,Xo,Zo,Ko,Jo,Qo,na,ea,ra,ta,oa,aa,ia,ca,la,ua,fa,sa,da,va,ma,ba,pa,ga,ha,xa,Ca,Pa=Hn("Browser.Events"),Ma=t((function(n,e,r){return Pa(f(ho,n,e,r))})),ya=u(Ma,0,"click"),Ta=u(Ma,0,"keydown"),La=u(Ma,0,"keyup"),wa=u(Ma,0,"mousedown"),Sa=u(Ma,0,"mousemove"),Na=u(Ma,0,"mouseup"),Ra=en,$a=rn,Fa=r((function(n,e){return n(e?1:0)})),Da=function(n){var e=void 0!==Jn.hidden?{e2:"hidden",eK:"visibilitychange"}:void 0!==Jn.mozHidden?{e2:"mozHidden",eK:"mozvisibilitychange"}:void 0!==Jn.msHidden?{e2:"msHidden",eK:"msvisibilitychange"}:void 0!==Jn.webkitHidden?{e2:"webkitHidden",eK:"webkitvisibilitychange"}:{e2:"hidden",eK:"visibilitychange"};return f(Ma,0,e.eK,u(yt,Fa(n),u(Pt,"target",u(Pt,e.e2,$a))))},za=on,_a=function(n){return{$:3,b:n}},Aa=Xn("touchCancel",_a(u(Ct,(function(n){return u(Ct,(function(e){return u(Ct,(function(r){return Lt({bl:r,cI:e,cJ:n})}),u(Pt,"identifier",Ra))}),u(Pt,"pageX",Mt))}),u(Pt,"pageY",Mt)))),Va=Xn("touchEnd",_a(u(Ct,(function(n){return u(Ct,(function(e){return u(Ct,(function(r){return Lt({bl:r,cI:e,cJ:n})}),u(Pt,"identifier",Ra))}),u(Pt,"pageX",Mt))}),u(Pt,"pageY",Mt)))),Ga=Xn("touchMove",_a(u(Ct,(function(n){return u(Ct,(function(e){return u(Ct,(function(r){return Lt({bl:r,cI:e,cJ:n})}),u(Pt,"identifier",Ra))}),u(Pt,"pageX",Mt))}),u(Pt,"pageY",Mt)))),ka=Xn("touchStart",_a(u(Ct,(function(n){return u(Ct,(function(e){return u(Ct,(function(r){return Lt({bl:r,cI:e,cJ:n})}),u(Pt,"identifier",Ra))}),u(Pt,"pageX",Mt))}),u(Pt,"pageY",Mt)))),Ba=ro(u(Tr,(Ca=u(Ft,dt(.001),(function(n){return{$:6,a:n}})),go(oo(Ca))),u(It,to(Rt),D([(ko=eo,f(Ma,1,"resize",u(Pt,"target",f(Tt,ko,u(Pt,"innerWidth",Ra),u(Pt,"innerHeight",Ra))))),La(u(yt,Jt(!1),u(Pt,"key",za))),Ta(u(yt,Jt(!0),u(Pt,"key",za))),Da($t),ya(Lt({$:5})),wa(Lt(Qt(!0))),Na(Lt(Qt(!1))),Sa(f(Tt,no,u(Pt,"pageX",Mt),u(Pt,"pageY",Mt))),ka((function(n){return{$:7,a:n}})),Ga((function(n){return{$:8,a:n}})),Va((function(n){return{$:9,a:n}})),Aa((function(n){return{$:10,a:n}}))])))),Ea={$:1},Ha=function(n){return{$:2,a:n}},Ia=r((function(n,e){return{$:0,a:n,b:e}})),Wa=function(n){return n.b.k.a},ja=function(n){var e=n.b.E;return e.b?kr(u(Ia,n.a,{k:e.a,E:e.b,q:N(n.b.q,D([n.b.k]))})):Br},Ua=r((function(n,e){return S(e,{cg:n})})),Oa=r((function(n,e){return S(e,e.I.cg?{I:u(Ua,!1,e.I),a4:e.a4+n}:{a4:e.a4+n})})),qa=r((function(n,e){return e.$?n:e.a})),Ya=t((function(n,e,r){var t=r.a,o=r.b;switch(t.$){case 1:return r;case 2:var a=t.a.c4;return(y(a+e,Wa(r).a4)>0?u(Ft,ja,qa(u(Ia,Ea,o))):Dt)(u(Ia,Ha({c4:a+e}),o));default:var i=o.k,c=i.b,l=u(Oa,e,i.a);return u(Ia,t,{k:L(l,u(n,l,c)),E:R,q:N(o.q,D([o.k]))})}})),Xa=r((function(n,e){n:for(;;){if(n>0){if(e.b){n-=1,e=e.b;continue n}return e}return e}})),Za=t((function(n,e,r){n:for(;;){if(n>0){if(e.b){var t=e.a;n-=1,e=e.b,r=u(Tr,t,r);continue n}return r}return r}})),Ka=r((function(n,e){return Kr(f(Za,n,e,R))})),Ja=t((function(n,e,r){if(e>0){var t=L(e,r);n:for(;;){e:for(;;){if(!t.b.b)return r;if(!t.b.b.b){if(1===t.a)break n;break e}switch(t.a){case 1:break n;case 2:var o=t.b;return D([o.a,o.b.a]);case 3:if(t.b.b.b.b){var a=t.b,i=a.b;return D([a.a,i.a,i.b.a])}break e;default:if(t.b.b.b.b&&t.b.b.b.b.b){var c=t.b,l=c.b,s=l.b,d=s.b,v=d.b;return u(Tr,c.a,u(Tr,l.a,u(Tr,s.a,u(Tr,d.a,n>1e3?u(Ka,e-4,v):f(Ja,n+1,e-4,v)))))}break e}}return r}return D([t.b.a])}return R})),Qa=r((function(n,e){return f(Ja,0,n,e)})),ni=r((function(n,e){var r=e.b.E,t=N(e.b.q,N(D([e.b.k]),r)),o=u(Qa,n,t),a=u(Xa,n,t);if(a.b)return u(Ia,Ea,{k:a.a,E:a.b,q:o});var i=Kr(o);return i.b?u(Ia,Ea,{k:i.a,E:R,q:Kr(i.b)}):e})),ei={$:0},ri=r((function(n,e){switch(n.$){case 1:return function(n){var e=n.b.q,r=n.b.E;return e.b?u(Ia,Ea,{k:e.a,E:N(e.b,N(D([n.b.k]),r)),q:R}):n}(e);case 2:return u(qa,e,function(n){var e=n.b.k,r=n.b.E,t=Kr(n.b.q);if(t.b){var o=t.b;return kr(u(Ia,Ea,{k:t.a,E:u(Tr,e,r),q:Kr(o)}))}return Br}(e));case 3:return u(Ia,Ea,e.b);case 4:return function(n){return u(Ia,ei,n.b)}(e);case 5:return function(n){var e=n.b;return u(Ia,Ha({c4:Wa(n).a4}),e)}(e);case 6:return u(qa,e,ja(e));case 7:return function(n){var e=n.b.q,r=n.b.k,t=Kr(n.b.E);if(t.b){var o=t.b;return u(Ia,Ea,{k:t.a,E:R,q:N(e,N(D([r]),Kr(o)))})}return n}(e);default:return u(ni,n.a,e)}})),ti=r((function(n,e){var r=e.b;return L(n(e.a),r)})),oi=o((function(n,e,r,t){return{cg:t,aS:r,bF:n,bG:e}})),ai=Po,ii={ca:!1,aS:!1,cl:!1,O:ai,ai:!1,a1:!1,c0:!1,c1:!1,b6:!1},ci=r((function(n,e){return S(e,{aS:n})})),li=t((function(n,e,r){return S(r,{bF:n,bG:e})})),ui=function(n){if(-1===n.$&&-1===n.d.$&&-1===n.e.$){if(-1!==n.e.d.$||n.e.d.a){var e=n.d,r=n.e;return i=r.b,c=r.c,t=r.d,f=r.e,d(To,1,n.b,n.c,d(To,0,e.b,e.c,e.d,e.e),d(To,0,i,c,t,f))}var t,o=n.d,a=n.e,i=a.b,c=a.c,l=(t=a.d).d,u=t.e,f=a.e;return d(To,0,t.b,t.c,d(To,1,n.b,n.c,d(To,0,o.b,o.c,o.d,o.e),l),d(To,1,i,c,u,f))}return n},fi=function(n){if(-1===n.$&&-1===n.d.$&&-1===n.e.$){if(-1!==n.d.d.$||n.d.d.a){var e=n.d,r=n.e;return u=r.b,f=r.c,s=r.d,v=r.e,d(To,1,t=n.b,o=n.c,d(To,0,e.b,e.c,e.d,c=e.e),d(To,0,u,f,s,v))}var t=n.b,o=n.c,a=n.d,i=a.d,c=a.e,l=n.e,u=l.b,f=l.c,s=l.d,v=l.e;return d(To,0,a.b,a.c,d(To,1,i.b,i.c,i.d,i.e),d(To,1,t,o,c,d(To,0,u,f,s,v)))}return n},si=c((function(n,e,r,t,o,a,i){if(-1!==a.$||a.a){n:for(;;){if(-1===i.$&&1===i.a){if(-1===i.d.$){if(1===i.d.a)return fi(e);break n}return fi(e)}break n}return e}return d(To,r,a.b,a.c,a.d,d(To,0,t,o,a.e,i))})),di=function(n){if(-1===n.$&&-1===n.d.$){var e=n.a,r=n.b,t=n.c,o=n.d,a=o.d,i=n.e;if(1===o.a){if(-1!==a.$||a.a){var c=ui(n);if(-1===c.$){var l=c.e;return d(Lo,c.a,c.b,c.c,di(c.d),l)}return Co}return d(To,e,r,t,di(o),i)}return d(To,e,r,t,di(o),i)}return Co},vi=r((function(n,e){if(-2===e.$)return Co;var r=e.a,t=e.b,o=e.c,a=e.d,i=e.e;if(0>y(n,t)){if(-1===a.$&&1===a.a){var c=a.d;if(-1!==c.$||c.a){var l=ui(e);if(-1===l.$){var f=l.e;return d(Lo,l.a,l.b,l.c,u(vi,n,l.d),f)}return Co}return d(To,r,t,o,u(vi,n,a),i)}return d(To,r,t,o,u(vi,n,a),i)}return u(mi,n,m(si,n,e,r,t,o,a,i))})),mi=r((function(n,e){if(-1===e.$){var r=e.a,t=e.b,o=e.c,a=e.d,i=e.e;if(P(n,t)){var c=function(n){for(;;){if(-1!==n.$||-1!==n.d.$)return n;n=n.d}}(i);return-1===c.$?d(Lo,r,c.b,c.c,a,di(i)):Co}return d(Lo,r,t,o,a,u(vi,n,i))}return Co})),bi=r((function(n,e){var r=u(vi,n,e);return-1!==r.$||r.a?r:d(To,1,r.b,r.c,r.d,r.e)})),pi=r((function(n,e){return{dk:-e/2,cn:e,ai:-n/2,a1:n/2,bA:e/2,db:n}})),gi=r((function(n,e){return{S:e,X:n}})),hi=f(Tt,r((function(n,e){return L(n,e)})),u(Pt,"A1",za),u(Pt,"A2",za)),xi=sn,Ci=s(xi,t((function(n,e,r){return w(n,e,r)})),u(Pt,"A1",Mt),u(Pt,"A2",Mt),u(Pt,"A3",Mt)),Pi=f(Tt,r((function(n,e){return L(n,e)})),u(Pt,"A1",za),u(Pt,"A2",Ci)),Mi=f(Tt,gi,u(Pt,"floats",_a(Pi)),u(Pt,"colors",_a(hi))),yi=dn,Ti=r((function(n,e){return{S:e,aF:"",X:n,as:""}})),Li=u(Ti,R,R),wi=r((function(n,e){return e.$?Br:n(e.a)})),Si=r((function(n,e){return e.$?Dr(e.a):n(e.a)})),Ni=o((function(n,e,r,t){return{e4:e,fc:n,fi:r,fy:t}})),Ri=Ie,$i=r((function(n,e){return e.$?Dr(n):Vr(e.a)})),Fi=He,Di=function(n){return n.b?kr(n.a):Br},zi=r((function(n,e){return e.$?Br:kr(n(e.a))})),_i=r((function(n,e){return e.$?Dr(e.a):Vr(n(e.a))})),Ai=r((function(n,e){return Zr(e)-Zr(n)})),Vi=t((function(n,e,r){var t=Zr(r);return 1>y(Zr(n),t)&&1>y(t,Zr(e))})),Gi=r((function(n,e){var r=f(Vi,"0","9",e)?Vr(u(Ai,"0",e)):f(Vi,"a","z",e)?Vr(10+u(Ai,"a",e)):f(Vi,"A","Z",e)?Vr(10+u(Ai,"A",e)):Dr({$:0,a:e});return u(Si,(function(r){return 0>y(r,n)?Vr(r):Dr({$:1,a:e})}),r)})),ki=r((function(n,e){var r=Jr(e);if(1===r.$)return Vr(0);var t=r.a,o=t.b;return u(Si,(function(e){return u(Si,(function(r){return Vr(e+r*n)}),u(ki,n,o))}),u(Gi,n,t.a))})),Bi=function(n){for(var e=n.length,r=Array(e),t=0;e>t;){var o=n.charCodeAt(t);55296>o||o>56319?(r[e-t]=n[t],t++):(r[e-t]=n[t+1],r[e-++t]=n[t-1],t++)}return r.join("")},Ei=r((function(n,e){return 2>n||n>36?Dr({$:2,a:n}):u(ki,n,Bi(e))})),Hi=Ei(16),Ii=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),Wi=t((function(n,e,r){return s(Ii,n,e,r,1)})),ji=o((function(n,e,r,t){return s(Ii,n,e,r,t)})),Ui=V,Oi=W,qi=r((function(n,e){var r=u(Ui,10,n);return Oi(e*r)/r})),Yi=Y,Xi=function(n){return f(Yi,Tr,R,n)},Zi=(Bo=function(n){var e=Xi(n);if(e.b&&!e.b.b){var r=e.a;return z(D([r,r])).join("")}return n},u(Ft,(function(n){return n.toLowerCase()}),u(Ft,(function(n){return u(zi,(function(e){return f(Ri,1,e,n)}),u(Fi,{eH:!1,fe:!1},"^#?(?:(?:([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2}))|(?:([a-f\\d])([a-f\\d])([a-f\\d]))|(?:([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2}))|(?:([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d])))$"))}),u(Ft,wi(Di),u(Ft,zi((function(n){return n.fy})),u(Ft,zi(Go(Dt)),u(Ft,$i("Parsing hex regex failed"),Si((function(n){var e=u(It,u(Ft,Bo,u(Ft,Hi,_i(ot))),n);n:for(;;){if(e.b&&!e.a.$&&e.b.b&&!e.b.a.$&&e.b.b.b&&!e.b.b.a.$){if(e.b.b.b.b){if(e.b.b.b.a.$||e.b.b.b.b.b)break n;var r=e.b,t=r.b;return Vr(s(ji,e.a.a/255,r.a.a/255,t.a.a/255,u(qi,2,t.b.a.a/255)))}var o=e.b;return Vr(f(Wi,e.a.a/255,o.a.a/255,o.b.a.a/255))}break n}return Dr("Parsing ints from hex failed")}))))))))),Ki=r((function(n,e){return L(e.a,n(e.b))})),Ji=s(Ii,1,1,1,1),Qi=r((function(n,e){return e.$?n:e.a})),nc=u(Ft,yi(Mi),u(Ft,_i((function(n){return{S:u(It,Ki(u(Ft,Zi,Qi(Ji))),n.S),aF:"",X:n.X,as:""}})),Qi(Li))),ec=function(n){return f(jr,r((function(n,e){return f(yn,n.a,n.b,e)})),{},n)},rc=Mn,tc=function(n){var e=n.b;return ec(D([L("A1",rc(n.a)),L("A2",rc(e))]))},oc=Mn,ac=function(n){var e=n.b,r=n.c;return ec(D([L("A1",oc(n.a)),L("A2",oc(e)),L("A3",oc(r))]))},ic=function(n){var e=n.b;return ec(D([L("A1",rc(n.a)),L("A2",ac(e))]))},cc=r((function(n,e){return f(jr,function(n){return r((function(e,r){return r.push(n(e)),r}))}(n),[],e)})),lc=q,uc=function(n){return u(lc,n,"")},fc=t((function(n,e,r){return n>0?f(fc,n>>1,N(e,e),1&n?N(r,e):r):r})),sc=r((function(n,e){return f(fc,n,e,"")})),dc=t((function(n,e,r){return N(u(sc,n-zt(r),uc(e)),r)})),vc=function(n){return 0>n||n>1114111?"�":n>65535?String.fromCharCode(Math.floor((n-=65536)/1024)+55296,n%1024+56320):String.fromCharCode(n)},mc=G,bc=function(n){var e=function(n){return 10>n?Hr(n):uc(vc(87+n))};return 16>n?e(n):N(bc(n/16|0),e(u(mc,16,n)))},pc=u(Ft,bc,u(dc,2,"0")),gc=function(n){return{aQ:n.d,ce:n.c,cm:n.b,cV:n.a}},hc=function(n){var e=gc(n),r=e.cV,t=e.cm,o=e.ce;return u(Ir,"",u(Tr,"#",u(It,u(Ft,Oi,pc),D([255*r,255*t,255*o]))))},xc=u(Ft,(function(n){return{S:u(It,Ki(hc),n.S),X:n.X}}),u(Ft,(function(n){return ec(D([L("floats",u(cc,ic,n.X)),L("colors",u(cc,tc,n.S))]))}),Er(0))),Cc=function(n){return 0>n?-n:n},Pc=function(n){if(0===n.length||/[\sxbo]/.test(n))return Br;var e=+n;return e==e?kr(e):Br},Mc=t((function(n,e,r){return u(qa,NaN,Pc(u(n,e,r)))})),yc=function(n){return!n},Tc=r((function(n,e){for(;;){if(!e.b)return!1;var r=e.b;if(n(e.a))return!0;n=n,e=r}})),Lc=r((function(n,e){var r=u(Tc,(function(n){return"0"!==n&&"."!==n}),Xi(e));return N(n&&r?"-":"",e)})),wc=Q,Sc=function(n){var e=n.a,r=n.b;if("9"===e){var t=Jr(r);return 1===t.$?"01":u(lc,"0",Sc(t.a))}var o=Zr(e);return o>=48&&57>o?u(lc,vc(o+1),r):"0"},Nc=function(n){return n===1/0||n===-1/0},Rc=O,$c=t((function(n,e,r){return N(r,u(sc,n-zt(r),uc(e)))})),Fc=function(n){var e=u(Wr,".",n);return e.b?L(e.a,e.b.b?e.b.a:"0"):L("0","0")},Dc=t((function(n,e,r){if(Nc(r)||Rc(r))return wc(r);var t=0>r,o=Fc(function(n){var e=u(Wr,"e",wc(Cc(n)));if(e.b){if(e.b.b){var r=e.a,t=e.b.a,o=u(qa,0,Vt(u(Gt,"+",t)?u(At,1,t):t)),a=Fc(r),i=N(a.a,a.b),c=0>o?u(qa,"0",u(zi,(function(n){return n.a+"."+n.b}),u(zi,ti(uc),Jr(N(u(sc,Cc(o),"0"),i))))):f($c,o+1,"0",i);return N(0>n?"-":"",c)}return N(0>n?"-":"",r=e.a)}return""}(Cc(r))),a=o.a,i=o.b,c=zt(a)+e,l=N(u(sc,1-c,"0"),f($c,c,"0",N(a,i))),s=zt(l),d=u(st,1,c),v=u(n,t,f(_t,d,s,l)),m=f(_t,0,d,l),b=v?Bi(u(qa,"1",u(zi,Sc,Jr(Bi(m))))):m,p=zt(b),g="0"===b?b:e>0?0>y(e,zt(i))?f(_t,0,p-e,b)+"."+f(_t,p-e,p,b):N(a+".",f($c,e,"0",i)):N(b,u(sc,Cc(e),"0"));return u(Lc,t,g)})),zc=Dc(r((function(n,e){var r,t=Jr(e);return 1!==t.$&&("5"===t.a.a?""!==t.a.b||!n:(r=Zr(t.a.a))>53&&n||r>=53&&!n)}))),_c=Mc(zc),Ac=t((function(n,e,r){var t=u(tt,10,Cc(e-n));return u(_c,0>t?3:1>t?2:2>t?1:0,r)})),Vc=r((function(n,e){switch(n.$){case 2:var r=nc(e.as);return S(r,{aF:r.aF,as:r.as});case 3:return S(e,{as:n.a});case 4:return S(e,{aF:xc(e)});case 0:var t=n.a,o=n.b;return S(e,{X:u(It,(function(n){var e=n.a,r=n.b,a=r.a,i=r.c;return P(e,t)?L(e,w(a,f(Ac,a,i,o),i)):n}),e.X)});default:return t=n.a,o=n.b,S(e,{S:u(It,(function(n){var e=n.a;return P(e,t)?L(e,o):n}),e.S)})}})),Gc=r((function(n,e){return f(No,n,0,e)})),kc=r((function(n,e){return u(bi,n,e)})),Bc=t((function(n,e,r){var t=u(n?Gc:kc,e,r.O);switch(e){case" ":return S(r,{O:t,c1:n});case"Enter":return S(r,{cl:n,O:t});case"Shift":return S(r,{O:t,c0:n});case"Backspace":return S(r,{ca:n,O:t});case"ArrowUp":return S(r,{O:t,b6:n});case"ArrowDown":return S(r,{aS:n,O:t});case"ArrowLeft":return S(r,{O:t,ai:n});case"ArrowRight":return S(r,{O:t,a1:n});default:return S(r,{O:t})}})),Ec=r((function(n,e){switch(n.$){case 1:var r=n.a.fI;return S(e,{ad:u(pi,r.db,r.cn)});case 2:return S(e,{ad:u(pi,n.a,n.b)});case 3:return S(e,{bm:ii,I:s(oi,e.I.bF,e.I.bG,!1,!1)});case 0:return S(e,{bm:f(Bc,n.a,n.b,e.bm)});case 4:return S(e,{I:f(li,e.ad.ai+n.a,e.ad.bA-n.b,e.I)});case 5:return S(e,{I:u(Ua,!0,e.I)});case 6:return S(e,{I:u(ci,n.a,e.I)});case 7:case 8:return S(e,{ae:f(jr,(function(n){return u(No,n.bl,{bF:e.ad.ai+n.cI,bG:e.ad.bA-n.cJ})}),e.ae,n.a)});case 9:case 10:return S(e,{ae:f(jr,(function(n){return bi(n.bl)}),e.ae,n.a)});default:return S(e,{aR:u(Vc,n.a,e.aR)})}})),Hc=r((function(n,e){var r=e.b;return u(Ia,e.a,S(r,{k:u(ti,Ec(n),r.k)}))})),Ic=t((function(n,e,r){var t=r.b,o=t.k;return u(Ia,r.a,S(t,{k:u(Ki,u(n,o.a,e),o)}))})),Wc=o((function(n,e,r,t){switch(r.$){case 0:return t;case 1:return S(t,{a8:r.a});case 2:return S(t,{bf:!1});case 3:return S(t,{bf:!0});case 4:return S(t,{R:f(Ic,e,r.a,t.R)});case 5:return S(t,{R:u(ri,r.a,t.R)});case 7:return S(t,{R:u(Hc,r.a,t.R)});default:return S(t,{R:f(Ya,n,r.a,t.R)})}})),jc=(xa=function(){return{el:(n=Ge.body,e=Ge.documentElement,{db:Math.max(n.scrollWidth,n.offsetWidth,e.scrollWidth,e.offsetWidth,e.clientWidth),cn:Math.max(n.scrollHeight,n.offsetHeight,e.scrollHeight,e.offsetHeight,e.clientHeight)}),fI:{bF:ke.pageXOffset,bG:ke.pageYOffset,db:Ge.documentElement.clientWidth,cn:Ge.documentElement.clientHeight}};var n,e},Ln((function(n){Ae((function(){n(Tn(xa()))}))}))),Uc=r((function(n,e){return{aR:e,ck:n.ck,bm:ii,I:s(oi,0,0,!1,!1),ad:u(pi,600,600),a4:0,ae:Po}})),Oc=r((function(n,e){return u(Ia,ei,{k:L(n,e(n)),E:R,q:R})})),qc=In,Yc=qc(R),Xc=function(n){return{$:11,a:n}},Zc=function(n){return{$:4,a:n}},Kc=function(n){return{$:5,a:n}},Jc={$:2},Qc={$:0},nl=function(n){return{$:1,a:n}},el={$:3},rl=r((function(n){return n})),tl=re("button"),ol=function(n){return n?"Level Editor":"Configurations"},al=function(n){return u(qa,0,Di(u(Go,(function(e){return P(ol(e),n)?kr(e):Br}),D([0,1]))))},il=oe,cl=il,ll=ae,ul=r((function(n,e){return u(ll,n,{$:0,a:e})})),fl=r((function(n,e){return f(Ht,Pt,e,n)})),sl=u(fl,D(["target","value"]),za),dl=function(n){return u(ul,"click",Lt(n))},vl=re("option"),ml=re("select"),bl=ie,pl=bl,gl=ne,hl=gl,xl=r((function(n,e){return u(ce,n,rc(e))})),Cl=xl("value"),Pl=r((function(n,e){return{$:1,a:n,b:e}})),Ml=r((function(n,e){return{$:0,a:n,b:e}})),yl=s(Ii,0,0,0,1),Tl=u(tl,D([u(pl,"cursor","pointer"),dl({$:4})]),D([hl("Export Configurations as json")])),Ll=re("h3"),wl=re("p"),Sl=Mn,Nl=r((function(n,e){return u(ce,n,Sl(e))})),Rl=Nl("readOnly"),$l=re("textarea"),Fl=function(n){return u(St,R,D([u($l,D([Rl(!0)]),D([hl(n.aF)]))]))},Dl=function(n){return u(St,R,D([u(Ll,R,D([hl("Export Configurations")])),u(wl,R,D([Tl])),u(wl,R,D([Fl(n)]))]))},zl=xl("htmlFor"),_l=re("hr"),Al=xl("id"),Vl=u(tl,D([u(pl,"cursor","pointer"),dl({$:2})]),D([hl("Import Configurations")])),Gl=function(n){return{$:3,a:n}},kl=function(n){return L(n,!0)},Bl=r((function(n,e){return u(ll,n,{$:1,a:e})})),El=function(n){return u(Bl,"input",u(yt,kl,u(yt,n,sl)))},Hl=function(n){return u(St,R,D([u($l,D([El(Gl)]),D([hl(n.as)]))]))},Il=function(n){return u(St,R,D([u(Ll,R,D([hl("Import Configurations")])),u(wl,R,D([Hl(n)])),u(wl,R,D([Vl]))]))},Wl=re("input"),jl=re("label"),Ul=xl("max"),Ol=xl("min"),ql=xl("name"),Yl=re("span"),Xl=xl("type"),Zl=function(n){return{$:0,a:n}},Kl=function(n){return Ur(n.b.q)},Jl=function(n){return u(Wl,D([u(pl,"position","absolute"),Xl("range"),u(pl,"width","100%"),Ol("0"),Ul(Hr((e=n,r=e.b.E,Ur(e.b.q)+1+Ur(r)-1))),Cl(Hr(Kl(n))),El(u(Ft,Vt,u(Ft,qa(0),Zl)))]),R);var e,r},Ql=function(n){var e=n.b.k,r=n.b.E,t=u(qa,e,Di(n.b.q)).a.a4,o=u(qa,e,Di(Kr(r))).a.a4-t,a=ut(o/1);return u(St,D([u(pl,"position","absolute"),u(pl,"width","100%"),u(pl,"height","20px")]),u(It,(function(n){return u(St,D([u(pl,"position","absolute"),u(pl,"background-color","yellow"),u(pl,"width","1px"),u(pl,"height","20px"),u(pl,"left",wc(100*n*1/o)+"%")]),R)}),u(Yr,0,a)))},nu={$:1},eu={$:7},ru={$:6},tu={$:2},ou={$:3},au={$:5},iu={$:4},cu=r((function(n,e){return u(tl,D([u(pl,"display","inline-block"),u(pl,"width","30px"),u(pl,"height","30px"),u(pl,"margin","2px"),u(pl,"padding","0px"),u(pl,"top","0px"),u(pl,"font-size","20px"),dl(n)]),D([hl(e)]))})),lu=function(n){return u(St,D([u(pl,"width","100%")]),D([(e=n,r=e.a,u(St,R,D([u(cu,nu,"⏮️"),u(cu,tu,"◀️"),1===r.$?u(cu,au,"▶️"):u(cu,ou,"⏸️"),r.$?u(cu,iu,"⏺️"):u(cu,ou,"⏹"),u(cu,ru,"⏯️"),u(cu,eu,"⏭️")]))),u(St,R,D([Ql(n),Jl(n)]))]));var e,r},uu=t((function(n,e,t){var o,a,i,c,l=t.R.b.k.b,f=u(St,D([u(pl,"margin-left","0px")]),D([u(ml,D([(o=u(Ft,al,nl),u(ul,"change",u(yt,o,sl))),Cl(ol(t.a8)),u(pl,"width","200px"),u(pl,"height","40px"),u(pl,"font-size","20px")]),u(It,(function(n){return u(vl,D([Cl(ol(n))]),D([hl(ol(n))]))}),D([0,1])))])),s=r((function(n,e){return u(tl,D([u(pl,"font-size","30px"),u(pl,"width","40px"),u(pl,"height","40px"),dl(n)]),D([hl(e)]))})),d=Wa(t.R),v=t.a8?u(cl,Zc,u(e,d,l)):u(St,R,D([u(cl,Kc,lu(t.R)),u(cl,u(Ft,Xc,Rt),(a=d.aR,i=function(n){var e=n.a,r=n.b,t=r.a,o=r.b,a=r.c;return u(St,D([u(pl,"margin-top","15px")]),D([u(St,R,D([u(jl,D([zl(e)]),D([hl(e),hl(": "),u(Yl,D([u(pl,"font-family","monospace"),u(pl,"font-weight","bold")]),D([hl(wc(o))]))]))])),u(Wl,D([Xl("range"),Al(e),ql(e),Ol(wc(t)),Ul(wc(a)),El((function(n){return u(Ml,e,u(qa,0,Pc(n)))})),u(xl,"step","any"),u(pl,"width","200px"),Cl(wc(o))]),R)]))},c=function(n){var e=n.a,r=n.b;return u(St,D([u(pl,"margin-top","15px")]),D([u(St,R,D([u(jl,D([zl(e)]),D([hl(e)]))])),u(Wl,D([Xl("color"),u(pl,"width","200px"),u(pl,"height","30px"),Al(e),ql(e),El((function(n){return u(Pl,e,u(Qi,yl,Zi(n)))})),Cl(hc(r))]),R)]))},u(St,D([u(pl,"margin-left","20px"),u(pl,"height","100%"),u(pl,"overflow","scroll")]),D([u(St,R,u(It,i,a.X)),u(St,R,u(It,c,a.S)),u(_l,R,R),Dl(a),Il(a)]))))])),m=u(St,D([u(pl,"position","fixed"),u(pl,"top","0px"),u(pl,"left","0px"),u(pl,"width",wc(250)+"px"),u(pl,"height",wc(d.ad.cn)+"px"),u(pl,"font-family",'-apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif'),u(pl,"font-size","16px")]),D(t.bf?[u(St,D([u(pl,"height","100px")]),D([u(s,Jc,"✕"),f])),u(St,D([u(pl,"height",wc(d.ad.cn-100)+"px")]),D([v]))]:[u(s,el,"≡")])),b=u(St,D([u(pl,"position","fixed"),u(pl,"top","0px"),u(pl,"left","0px"),u(pl,"width",wc(d.ad.db)+"px"),u(pl,"height",wc(d.ad.cn)+"px"),u(pl,"font-size","16px")]),D([u(cl,rl(Qc),u(n,d,l))]));return u(St,D([u(pl,"touch-action","none"),u(pl,"user-select","none")]),D([b,m]))})),fu=i((function(n,e,t,o,a,i){return Kt({e5:function(n){return L({a8:0,bf:!1,R:u(Oc,u(Uc,n,t),o),da:0},u(Zt,u(Ft,Nt,Rt),jc))},fz:function(n){return 1===n.da?u(to,Rt,Da($t)):Ba},fF:r((function(n,r){return L(s(Wc,e,i,n,r),Yc)})),fH:u(uu,n,a)})})),su=o((function(n,e,o,a){return v(fu,n,e,o,a,r((function(){return u(St,R,R)})),t((function(n,e,r){return r})))})),du=t((function(n,e,r){return{eM:r,fo:n,fs:e}})),vu={fn:D([f(du,w(-3,3,0),w(0,0,0),D([w(0,0,0),w(1,0,0),w(0,1,0)])),f(du,w(0,3,0),w(0,0,0),D([w(0,0,0),w(1,0,0),w(0,1,0),w(0,2,0)])),f(du,w(3,3,0),w(0,0,0),D([w(0,0,0),w(1,1,0),w(0,1,0),w(0,2,0)])),f(du,w(-3,-1,0),w(0,0,0),D([w(0,0,0),w(0,1,0),w(1,1,0),w(1,2,0)])),f(du,w(3,0,0),w(0,0,0),D([w(0,0,0),w(1,0,0),w(0,0,1),w(0,1,1)])),f(du,w(-2,-3,0),w(0,0,0),D([w(0,0,0),w(1,0,0),w(0,0,1),w(1,1,0)])),f(du,w(2,-3,0),w(0,0,0),D([w(0,0,0),w(1,0,0),w(0,0,1),w(0,1,0)]))])},mu=Ti,bu=mu,pu=3.141592653589793,gu=u(bu,D([L("camera distance",w(3,20,60)),L("camera azimuth",w(0,.6,6.283185307179586)),L("camera elevation",w(-1.5707963267948966,.4,1.5707963267948966)),L("sunlight azimuth",w(0,5.5,6.283185307179586)),L("sunlight elevation",w(-1.5707963267948966,-1,1.5707963267948966)),L("saturation",w(0,.6,1)),L("lightning",w(0,.8,1)),L("cube scale",w(.1,.95,1)),L("edge width",w(.001,.1,.5))]),D([L("edge color",yl)])),hu=r((function(n,e){return e})),xu=re("h2"),Cu=r((function(){return u(St,D([u(pl,"min-width","320px"),u(pl,"max-width","500px"),u(pl,"margin","0 auto")]),D([u(xu,D([u(pl,"margin","10px"),u(pl,"text-align","center")]),D([hl("The Soma Cube")])),u(wl,D([u(pl,"margin","10px 20px 10px 20px")]),D([u(St,R,D([hl("Space Key to chose the next piece")])),u(St,R,D([hl("Arrow keys to rotate the cube")])),u(St,R,D([hl("WASDQE to move the cube")])),u(St,R,D([hl("Shift + Arrow Keys to rotate the camera")]))]))]))})),Pu=r((function(n,e){return u(qa,0,Di(u(Go,(function(e){var r=e.b.b;return P(e.a,n)?kr(r):Br}),e.X)))})),Mu=r((function(n,e){return u(Pu,n,e.aR)})),yu=Mu,Tu=function(n){return pu*(n/180)},Lu=function(n){return-n},wu=r((function(n,e){return{bF:n.bG*e.fR-n.fR*e.bG,bG:n.fR*e.bF-n.bF*e.fR,fR:n.bF*e.bG-n.bG*e.bF}})),Su=function(n){return n.de},Nu=function(n){return n.df},Ru=function(n){return n.cH},$u=k,Fu=B,Du=t((function(n,e,r){var t=n,o=r,a=.5*e,i=$u(a),c=Fu(a),l=t.eO,u=l.bF*c,f=i*u,s=u*u,d=l.bG*c,v=i*d,m=u*d,b=d*d,p=l.fR*c,g=i*p,h=u*p,x=d*p,C=p*p;return{bF:(1-2*(b+C))*o.bF+2*(m-g)*o.bG+2*(h+v)*o.fR,bG:2*(m+g)*o.bF+(1-2*(s+C))*o.bG+2*(x-f)*o.fR,fR:2*(h-v)*o.bF+2*(x+f)*o.bG+(1-2*(s+b))*o.fR}})),zu=t((function(n,e,r){var t=n,o=r,a=.5*e,i=$u(a),c=Fu(a),l=t.cH,u=o.bF-l.bF,f=o.bG-l.bG,s=o.fR-l.fR,d=t.eO,v=d.bF*c,m=i*v,b=v*v,p=d.bG*c,g=i*p,h=v*p,x=p*p,C=d.fR*c,P=i*C,M=v*C,y=p*C,T=C*C;return{bF:l.bF+(1-2*(x+T))*u+2*(h-P)*f+2*(M+g)*s,bG:l.bG+2*(h+P)*u+(1-2*(b+T))*f+2*(y-m)*s,fR:l.fR+2*(M-g)*u+2*(y+m)*f+(1-2*(b+x))*s}})),_u=function(n){return n.de},Au=function(n){return n.df},Vu=function(n){return n.dg},Gu=t((function(n,e,r){return{cH:f(zu,n,e,Ru(r)),de:f(Du,n,e,_u(r)),df:f(Du,n,e,Au(r)),dg:f(Du,n,e,Vu(r))}})),ku=t((function(n,e,r){return f(Gu,n(r),e,r)})),Bu=function(n){return n.eO},Eu=r((function(n,e){return{bF:e.bF+n.bF,bG:e.bG+n.bG,fR:e.fR+n.fR}})),Hu=r((function(n,e){return{cH:u(Eu,n,Ru(e)),de:_u(e),df:Au(e),dg:Vu(e)}})),Iu=r((function(n,e){return{bF:n*e.bF,bG:n*e.bG,fR:n*e.fR}})),Wu=t((function(n,e,r){return u(Hu,u(Iu,e,n),r)})),ju=t((function(n,e,r){return f(Wu,Bu(n(r)),e,r)})),Uu=r((function(n,e){return{eO:e,cH:n}})),Ou=function(n){return u(Uu,n.cH,n.de)},qu=function(n){return u(Uu,n.cH,n.df)},Yu=function(n){return u(Uu,n.cH,n.dg)},Xu=function(n){return Cc(n)},Zu=function(n){return.5*n},Ku=E,Ju={bF:0,bG:0,fR:0},Qu=Dt,nf={bF:1,bG:0,fR:0},ef=nf,rf={bF:0,bG:0,fR:1},tf=rf,of=Qu({cH:Ju,de:tf,df:ef}),af=function(n){return a=(e={eC:u(yu,"camera azimuth",n),eP:u(yu,"camera distance",n),eS:u(yu,"camera elevation",n),eY:{bF:.5,bG:1,fR:0}}).eY,i=e.eC,c=e.eS,l=e.eP,function(n){var e,r=Zu(Xu(n.eu));return{cU:(e=Ku(r),{$:0,a:e}),c9:n.c9}}({eu:Tu(40),c9:(r={eC:i,eP:l,eS:c,eY:a,dy:of},o={cH:r.eY,de:Nu(r.dy),df:(t=r.dy,u(wu,Su(t),Nu(t))),dg:Su(r.dy)},f(ju,Yu,r.eP,f(ku,Ou,Lu(r.eS),f(ku,qu,r.eC,o))))});var e,r,t,o,a,i,c,l},cf=r((function(n,e){return{$:0,a:n,b:e}})),lf=r((function(n,e){return y(e,n)>-1})),uf=r((function(n,e){return n+.5*(e-n)})),ff=r((function(n,e){return e-n})),sf={bF:-1,bG:0,fR:0},df={bF:0,bG:-1,fR:0},vf={bF:0,bG:0,fR:-1},mf={bF:0,bG:1,fR:0},bf=t((function(n,e,r){return{bF:n,bG:e,fR:r}})),pf=i((function(n,e,r,t,o,a){var i=u(lf,r,a)?rf:vf,c=u(lf,e,o)?mf:df,l=u(lf,n,t)?nf:sf,s=w(Xu(u(ff,n,t)),Xu(u(ff,e,o)),Xu(u(ff,r,a)));return{eB:{cH:f(bf,u(uf,n,t),u(uf,e,o),u(uf,r,a)),de:l,df:c,dg:i},dq:s}})),gf=function(n){return n.bF},hf=function(n){return n.bG},xf=function(n){return n.fR},Cf=r((function(n,e){return v(pf,gf(n),hf(n),xf(n),gf(e),hf(e),xf(e))})),Pf=t((function(n,e,r){return{bF:n,bG:e,fR:r}})),Mf=r((function(n,e){var r=w(e.a/2,e.b/2,e.c/2),t=r.a,o=r.b,a=r.c;return u(cf,n,u(Cf,f(Pf,-t,-o,-a),f(Pf,t,o,a)))})),yf=function(n){return n*pu/180},Tf=function(n){return{$:5,a:n}},Lf=function(n){return Tf(n)},wf=o((function(n,e,r,t){var o=w(n,e,r),a=o.a,i=o.b,c=o.c,l=c>.5?c+i-c*i:c*(i+1),u=2*c-l,f=function(n){var e=0>n?n+1:n>1?n-1:n;return 1>6*e?u+(l-u)*e*6:1>2*e?l:2>3*e?u+(l-u)*(2/3-e)*6:u},d=f(a-1/3),v=f(a),m=f(a+1/3);return s(Ii,m,v,d,t)})),Sf=t((function(n,e,r){return s(wf,n,e,r,1)})),Nf=r((function(n,e){return{$:2,a:n,b:e}})),Rf=r((function(n,e){return{$:4,a:n,b:e}})),$f=r((function(n,e){return{$:3,a:n,b:e}})),Ff=r((function(n,e){return{$:1,a:n,b:e}})),Df=t((function(n,e,r){return{bF:n,bG:e,fR:r}})),zf=function(n){return n.eB},_f=function(n){return n.dq},Af=r((function(n,e){return{eB:u(Hu,n,zf(e)),dq:_f(e)}})),Vf=r((function(n,e){var r=e;return u(Uu,u(Eu,n,r.cH),r.eO)})),Gf=r((function(n,e){var r=e;return{l:u(Vf,n,r.l),e9:r.e9,fp:r.fp}})),kf=r((function(n,e){var r=e.b;return L(n(e.a),n(r))})),Bf=r((function(n,e){return u(kf,Eu(n),e)})),Ef=function(n){return n.eJ},Hf=function(n){return n.fp},If=r((function(n,e){return{eJ:e,fp:Xu(n)}})),Wf=r((function(n,e){return u(If,Hf(e),u(Eu,n,Ef(e)))})),jf=r((function(n,e){var r=e.b,t=e.c;return w(n(e.a),n(r),n(t))})),Uf=r((function(n,e){return u(jf,Eu(n),e)})),Of=r((function(n,e){var r=n.a,t=n.b,o=n.c,a=f(Df,r,t,o);switch(e.$){case 0:return u(cf,e.a,u(Af,a,e.b));case 1:return u(Ff,e.a,u(Uf,a,e.b));case 3:return u($f,e.a,u(Wf,a,e.b));case 2:return u(Nf,e.a,u(Gf,a,e.b));case 4:return u(Rf,e.a,u(Bf,a,e.b));default:var i=e.a;return Tf(u(It,Of(w(r,t,o)),i))}})),qf=function(n){return Of(w(n,0,0))},Yf=function(n){return Of(w(0,0,n))},Xf=t((function(n,e,r){return{eB:f(Gu,n,e,zf(r)),dq:_f(r)}})),Zf=r((function(n,e){var r=u(zu,n,e),t=u(Du,n,e);return function(n){var e=n;return u(Uu,r(e.cH),t(e.eO))}})),Kf=t((function(n,e,r){var t=r;return{l:f(Zf,n,e,t.l),e9:t.e9,fp:t.fp}})),Jf=t((function(n,e,r){return u(kf,u(zu,n,e),r)})),Qf=t((function(n,e,r){return u(If,Hf(r),f(zu,n,e,Ef(r)))})),ns=t((function(n,e,r){return u(jf,u(zu,n,e),r)})),es=t((function(n,e,r){switch(r.$){case 0:return u(cf,r.a,f(Xf,n,e,r.b));case 1:return u(Ff,r.a,f(ns,n,e,r.b));case 3:return u($f,r.a,f(Qf,n,e,r.b));case 2:return u(Nf,r.a,f(Kf,n,e,r.b));case 4:return u(Rf,r.a,f(Jf,n,e,r.b));default:var t=r.a;return Tf(u(It,u(es,n,e),t))}})),rs=u(Uu,Ju,ef),ts=r((function(n,e){return f(es,rs,n,e)})),os=mf,as=u(Uu,Ju,os),is=r((function(n,e){return f(es,as,n,e)})),cs=u(Uu,Ju,tf),ls=r((function(n,e){return f(es,cs,n,e)})),us=r((function(n,e){return(e-ut(e/n)*n)/n})),fs=o((function(n,e,r,t){return n+(e-n)*(1+$u(6.283185307179586*u(us,r,t)))/2})),ss=function(n){var e=u(yu,"edge width",n),r=u(Mf,f(Sf,s(fs,0,1,7,n.a4),u(yu,"saturation",n),u(yu,"lightning",n)),w(e,3+e,e)),t=Lf(D([u(qf,1.5,u(Yf,1.5,r)),u(is,yf(90),u(qf,1.5,u(Yf,1.5,r))),u(is,yf(180),u(qf,1.5,u(Yf,1.5,r))),u(is,yf(270),u(qf,1.5,u(Yf,1.5,r)))]));return Lf(D([t,u(ts,yf(90),t),u(ls,yf(90),t)]))},ds=r((function(n,e){var r=e/2;return u(cf,n,u(Cf,f(Pf,-r,-r,-r),f(Pf,r,r,r)))})),vs=function(n){return Of(w(0,n,0))},ms=r((function(n,e){return n*e})),bs=function(n){return{bF:-n.bF,bG:-n.bG,fR:-n.fR}},ps=t((function(n,e,r){return{bF:n.bF+e*(r.bF-n.bF),bG:n.bG+e*(r.bG-n.bG),fR:n.fR+e*(r.fR-n.fR)}})),gs=t((function(n,e,r){var t=zf(r),o=_u(t),a=Au(t),i=Vu(t),c=f(ps,n,e,Ru(t)),l=0>e?{cH:c,de:bs(o),df:bs(a),dg:bs(i)}:{cH:c,de:o,df:a,dg:i},s=_f(r),d=s.b,v=s.c;return{eB:l,dq:w(Xu(u(ms,e,s.a)),Xu(u(ms,e,d)),Xu(u(ms,e,v)))}})),hs=function(n){return n.l},xs=function(n){return Bu(hs(n))},Cs=function(n){return n.cH},Ps=function(n){return n.e9},Ms=function(n){return n.fp},ys=t((function(n,e,r){var t=Xu(u(ms,e,Ms(r))),o=Xu(u(ms,e,Ps(r))),a=0>e?bs(xs(r)):xs(r),i=f(ps,n,e,function(n){return Cs(hs(n))}(r));return{l:u(Uu,i,a),e9:o,fp:t}})),Ts=t((function(n,e,r){return u(kf,u(ps,n,e),r)})),Ls=t((function(n,e,r){return u(If,u(ms,Cc(e),Hf(r)),f(ps,n,e,Ef(r)))})),ws=t((function(n,e,r){return u(jf,u(ps,n,e),r)})),Ss=r((function(n,e){switch(e.$){case 0:return u(cf,e.a,f(gs,Ju,n,e.b));case 1:return u(Ff,e.a,f(ws,Ju,n,e.b));case 3:return u($f,e.a,f(Ls,Ju,n,e.b));case 2:return u(Nf,e.a,f(ys,Ju,n,e.b));case 4:return u(Rf,e.a,f(Ts,Ju,n,e.b));default:var r=e.a;return Tf(u(It,Ss(n),r))}})),Ns=t((function(n,e,r){return u(Yf,r.c,u(vs,r.b,u(qf,r.a,u(Ss,u(yu,"cube scale",n),u(ds,e,1)))))})),Rs=t((function(n,e,r){var t=r.fs,o=t.a,a=t.b,i=r.fo;return u(Yf,i.c,u(vs,i.b,u(qf,i.a,u(ls,t.c*yf(90),u(is,a*yf(90),u(ts,o*yf(90),Lf(u(It,u(Ns,n,e),r.eM))))))))})),$s=4294967295>>>32-at,Fs=h,Ds=t((function(n,e,r){for(;;){var t=u(Fs,$s&e>>>n,r);if(t.$)return u(Fs,$s&e,t.a);n-=at,e=e,r=t.a}})),zs=r((function(n,e){var r=e.a,t=e.b,o=e.c,a=e.d;return 0>n||y(n,r)>-1?Br:y(n,function(n){return n>>>5<<5}(r))>-1?kr(u(Fs,$s&n,a)):kr(f(Ds,t,n,o))})),_s=s(Ii,211/255,215/255,207/255,1),As=function(n){return n.a},Vs=r((function(n,e){return u(qa,_s,u(zs,u(mc,As(e),n),e))})),Gs=t((function(n,e,r){for(;;){var t=u(vt,Qr,n),o=t.a,a=t.b;if(0>y(ft(o),Qr))return u(pt,!0,{B:e,m:r,r:o});n=a,e=u(Tr,lt(o),e),r+=1}})),ks=function(n){return n.b?f(Gs,n,R,0):it},Bs=r((function(n,e){return Lf(u(Xr,(function(e){return u(Rs,n,u(Vs,e,function(n){return ks(u(It,(function(e){return f(Sf,e/8,u(yu,"saturation",n),u(yu,"lightning",n))}),u(Yr,0,8)))}(n)))}),e.dc.fn))})),Es=function(n){return{$:0,a:n}},Hs={$:3},Is=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),Ws=Is,js=r((function(n,e){return e.b?f(Ht,Tr,e,n):n})),Us=function(n){return f(Ht,js,R,n)},Os=r((function(n,e){return Us(u(It,n,e))})),qs=function(n){return u(le,"height",Hr(n))},Ys=function(n){return te(function(n){return"script"==n?"p":n}(n))},Xs=function(n){return{$:2,a:n}},Zs=r((function(n,e){switch(e.$){case 0:return u(dr,n,e);case 1:return u(vr,n,e);case 2:return u(mr,n,e);case 3:return u(br,n,e);case 4:return u(pr,n,e);default:return u(gr,n,e)}})),Ks=r((function(n,e){switch(e.$){case 0:return u(Ye,n,e);case 1:return u(Xe,n,e);case 2:return u(Ze,n,e);case 3:return u(Ke,n,e);case 4:return u(Je,n,e);case 5:return u(Qe,n,e);case 6:return u(nr,n,e);case 7:return u(er,n,e);default:return function(n){var e=n.sampleAlphaToCoverage;e.toggle=n.toggle,e.enabled||(n.gl.enable(n.gl.SAMPLE_ALPHA_TO_COVERAGE),e.enabled=!0)}(n)}})),Js=t((function(n,e,r){return f(sr,n,e,r)})),Qs=yr,nd=s(Qs,1,1,1,1),ed=t((function(n,e,r){return u(It,(function(n){return u(n,e,r)}),n)})),rd=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),td=r((function(n,e){var r=e.bF,t=e.bG;return f(rd,n*r/t,n,n*(1-r-t)/t)})),od=Pr,ad=r((function(n,e){return f(od,3.2406*(t=(r=u(td,n,e)).a)-1.5372*(o=r.b)-.4986*(a=r.c),-.9689*t+1.8758*o+.0415*a,.0557*t-.204*o+1.057*a);var r,t,o,a})),id=r((function(n,e){return{dC:P(n.dC,e.dC),s:n.s*e.s+n.t*e.v+n.u*e.y,t:n.s*e.t+n.t*e.w+n.u*e.z,u:n.s*e.u+n.t*e.x+n.u*e.A,v:n.v*e.s+n.w*e.v+n.x*e.y,w:n.v*e.t+n.w*e.w+n.x*e.z,x:n.v*e.u+n.w*e.x+n.x*e.A,y:n.y*e.s+n.z*e.v+n.A*e.y,z:n.y*e.t+n.z*e.w+n.A*e.z,A:n.y*e.u+n.z*e.x+n.A*e.A,J:e.J+(n.J*e.s+n.K*e.v+n.L*e.y)*e.b4,K:e.K+(n.J*e.t+n.K*e.w+n.L*e.z)*e.b4,L:e.L+(n.J*e.u+n.K*e.x+n.L*e.A)*e.b4,b4:n.b4*e.b4}})),cd=function(n){var e=new Float64Array(16);return e[0]=n.dK,e[1]=n.dO,e[2]=n.dS,e[3]=n.dW,e[4]=n.dL,e[5]=n.dP,e[6]=n.dT,e[7]=n.dX,e[8]=n.dM,e[9]=n.dQ,e[10]=n.dU,e[11]=n.dY,e[12]=n.dN,e[13]=n.dR,e[14]=n.dV,e[15]=n.dZ,e},ld=a((function(n,e,r,t,o){return v(o,n,s(Qs,t.b4,t.b4,t.b4,t.dC?1:-1),function(n){return cd({dK:n.s,dL:n.v,dM:n.y,dN:n.J,dO:n.t,dP:n.w,dQ:n.z,dR:n.K,dS:n.u,dT:n.x,dU:n.A,dV:n.L,dW:0,dX:0,dY:0,dZ:1})}(t),t.dC,e,r)})),ud=i((function(n,e,r,t,o,a){n:for(;;)switch(o.$){case 0:return a;case 5:var i=o.b;n=n,e=e,r=r,t=u(id,o.a,t),o=i,a=a;continue n;case 1:return{P:u(Tr,d(ld,n,e,r,t,o.b),a.P),Z:a.Z,fu:a.fu};case 3:return{P:a.P,Z:u(Tr,d(ld,n,e,r,t,o.b),a.Z),fu:a.fu};case 2:return{P:a.P,Z:a.Z,fu:u(Tr,d(ld,n,e,r,t,o.a),a.fu)};default:var c=o.a;return f(jr,s(ud,n,e,r,t),a,c)}})),fd=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),sd=fd,dd=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),vd=r((function(n,e){return{$:6,a:n,b:e}})),md=vd,bd=D([s(dd,518,!1,0,1),s(sd,!1,!1,!1,!1),u(md,0,1)]),pd=519,gd=7681,hd={src:"\n        precision lowp float;\n\n        void main() {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        }\n    ",attributes:{},uniforms:{}},xd=qe,Cd=r((function(n,e){return{$:0,a:n,b:e}})),Pd=Cd({dr:1,dB:0,d6:5}),Md=Cr,yd=Pd(D([{fo:u(Md,-1,-1)},{fo:u(Md,1,-1)},{fo:u(Md,-1,1)},{fo:u(Md,1,1)}])),Td={src:"\n        precision lowp float;\n\n        attribute vec2 position;\n\n        void main() {\n            gl_Position = vec4(position, 0.0, 1.0);\n        }\n    ",attributes:{position:"fo"},uniforms:{}},Ld=function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return function(f){return{$:2,a:n,b:e,c:r,d:t,e:o,f:a,g:i,h:c,i:l,j:u,k:f}}}}}}}}}}}},wd=t((function(n,e,t){var o=n.cW,a=n.cy,i=n.dd,c=r((function(n,e){return e(n)})),l=r((function(n,e){return e(n)})),s=function(n){return u(Ft,c(n.bw),u(Ft,l(n.bh),u(Ft,l(n.bH),l(n.bI))))};return u(s,t,u(s,e,f(Ld,o,a,i)))})),Sd=function(n){return f(wd,{cy:n.cy,cW:n.cW,dd:n.dd},{bh:n.bh,bw:n.bw,bH:n.bH,bI:n.bI},{bh:n.bh,bw:n.bw,bH:n.bH,bI:n.bI})},Nd=function(n){return d(xd,D([Sd(n),s(sd,!1,!1,!1,!1)]),Td,hd,yd,{})},Rd=Nd({bh:gd,cy:0,cW:8,bw:pd,dd:15,bH:gd,bI:gd}),$d=7680,Fd=function(n){return Nd({bh:$d,cy:15,cW:8,bw:516,dd:(e=n,u(Ui,2,e+4)),bH:5386,bI:5386});var e},Dd=t((function(n,e,r){return Us(D([f(ed,n,r,bd),D([Fd(e),Rd])]))})),zd=r((function(n,e){return Us(u(Xr,Dd(n),e))})),_d=s(dd,513,!0,0,1),Ad=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),Vd=r((function(n,e){return f(Ad,32774,n,e)})),Gd=function(n){var e=n.b2,t=n.bQ,o=n.bL,a=n.bJ,i=n.bN,c=n.aQ;return u(r((function(n,r){var i=n.b,c=n.c,l=r.a,u=r.b,f=r.c;return function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return{$:0,a:n,b:e,c:r,d:t,e:o,f:a,g:i,h:c,i:l,j:u}}}}}}}}}}}(n.a)(i)(c)(l)(u)(f)(e)(t)(o)(a)})),i,c)}({bJ:0,aQ:u(Vd,1,771),bL:0,bN:u(Vd,770,771),bQ:0,b2:0}),kd=D([_d,Gd]),Bd=function(n){return n.d1},Ed=function(n){return n.d4},Hd=function(n){return w(u(ff,function(n){return n.d2}(n),function(n){return n.d$}(n)),u(ff,function(n){return n.d3}(n),function(n){return n.d0}(n)),u(ff,Ed(n),Bd(n)))},Id=function(n){return Ru(n)},Wd=function(n){return{cH:{bF:n.J,bG:n.K,fR:n.L},de:{bF:n.s,bG:n.t,fR:n.u},df:{bF:n.v,bG:n.w,fR:n.x},dg:{bF:n.y,bG:n.z,fR:n.A}}},jd=r((function(n,e){var r=n.dg,t=n.df,o=n.de;return{bF:e.bF*o.bF+e.bG*o.bG+e.fR*o.fR,bG:e.bF*t.bF+e.bG*t.bG+e.fR*t.fR,fR:e.bF*r.bF+e.bG*r.bG+e.fR*r.fR}})),Ud=r((function(n,e){var r=n.cH,t=e.bF-r.bF,o=e.bG-r.bG,a=e.fR-r.fR,i=n.dg,c=n.df,l=n.de;return{bF:t*l.bF+o*l.bG+a*l.fR,bG:t*c.bF+o*c.bG+a*c.fR,fR:t*i.bF+o*i.bG+a*i.fR}})),Od=r((function(n,e){return{cH:u(Ud,n,Ru(e)),de:u(jd,n,_u(e)),df:u(jd,n,Au(e)),dg:u(jd,n,Vu(e))}})),qd=r((function(n,e){return u(st,n,e)})),Yd=r((function(n,e){return 0>y(n,e)?n:e})),Xd=r((function(n,e){return u(Yd,n,e)})),Zd=r((function(n,e){var r=e,t=n;return{d$:u(qd,t.d$,r.d$),d0:u(qd,t.d0,r.d0),d1:u(qd,t.d1,r.d1),d2:u(Xd,t.d2,r.d2),d3:u(Xd,t.d3,r.d3),d4:u(Xd,t.d4,r.d4)}})),Kd=r((function(n,e){return e+n})),Jd=r((function(n,e){var r=n.a,t=n.c,o=Zu(Xu(n.b)),a=Zu(Xu(r)),i=Zu(Xu(t)),c=function(n){return w(n.bF,n.bG,n.fR)}(e),l=c.a,f=c.b,s=c.c;return{d$:u(Kd,a,l),d0:u(Kd,o,f),d1:u(Kd,i,s),d2:u(ff,a,l),d3:u(ff,o,f),d4:u(ff,i,s)}})),Qd=o((function(n,e,r,t){var o=r.eJ,a=2*r.e0*e,i=2*r.e$*e,c=2*r.e_*e,l=o.fR*e,s=o.bG*e,d=o.bF*e,v=Vu(n),m=Cc(c*v.bF)+Cc(i*v.bG)+Cc(a*v.fR),b=Au(n),p=Cc(c*b.bF)+Cc(i*b.bG)+Cc(a*b.fR),g=_u(n),h=Cc(c*g.bF)+Cc(i*g.bG)+Cc(a*g.fR),x=u(Jd,w(h,p,m),u(Ud,n,f(Pf,d,s,l)));return kr(t.$?x:u(Zd,t.a,x))})),nv=o((function(n,e,r,t){n:for(;;){if(!t.b)return r;var o=t.a,a=t.b;switch(o.$){case 0:n=c=n,e=l=e,r=f=r,t=a;continue n;case 1:var i=s(Qd,n,e,o.a,r);n=c=n,e=l=e,r=f=i,t=a;continue n;case 2:n=c=n,e=l=e,r=f=r,t=a;continue n;case 3:i=s(Qd,n,e,o.a,r),n=c=n,e=l=e,r=f=i,t=a;continue n;case 4:var c=n,l=e,f=s(nv,n,e,r,o.a);n=c,e=l,r=f,t=a;continue n;default:var d=o.a,v=o.b,m=u(Od,Wd(d),n),b=e*d.b4;n=c=n,e=l=e,r=f=s(nv,m,b,r,D([v])),t=a;continue n}}})),ev=function(n){return n[0]},rv=function(n){return n[1]},tv=function(n){return n[2]},ov=function(n){return{$:4,a:n}},av=r((function(n,e){for(;;){if(!n.b)return e;var r=n.a;n=n.b,e=u(Tr,r,e)}})),iv=function(n){return ov(u(av,n,R))},cv={dC:!0,s:1,t:0,u:0,v:0,w:1,x:0,y:0,z:0,A:1,J:0,K:0,L:0,b4:1},lv=Nd({bh:gd,cy:0,cW:8,bw:pd,dd:255,bH:gd,bI:gd}),uv=j,fv={bL:0,eI:!1,bQ:0,cS:0,b2:0,c6:0,bF:0,bG:0,fR:0},sv=r((function(n,e){return cd({dK:n.bF,dL:n.b2,dM:e.bF,dN:e.b2,dO:n.bG,dP:n.bQ,dQ:e.bG,dR:e.bQ,dS:n.fR,dT:n.bL,dU:e.fR,dV:e.bL,dW:n.c6,dX:n.cS,dY:e.c6,dZ:e.cS})})),dv=L({bo:u(sv,fv,fv),bU:u(sv,fv,fv),bV:u(sv,fv,fv),bW:u(sv,fv,fv)},s(Qs,0,0,0,0)),vv=function(n){return s(dd,515,n.af,n.aa,n._)},mv=D([vv({_:1,aa:0,af:!0}),Sd({bh:$d,cy:240,cW:0,bw:514,dd:0,bH:$d,bI:$d}),Gd]),bv=r((function(n,e){var r=n,t=e.eX,o=e.eA,a=Xu(e.fg),i=Xu(t),c=r.cU;if(c.$){var l=c.a;return Nc(i)?cd({dK:2/(o*l),dL:0,dM:0,dN:0,dO:0,dP:2/l,dQ:0,dR:0,dS:0,dT:0,dU:0,dV:-1,dW:0,dX:0,dY:0,dZ:1}):cd({dK:2/(o*l),dL:0,dM:0,dN:0,dO:0,dP:2/l,dQ:0,dR:0,dS:0,dT:0,dU:-2/(i-a),dV:-(i+a)/(i-a),dW:0,dX:0,dY:0,dZ:1})}var u=c.a;return Nc(i)?cd({dK:1/(o*u),dL:0,dM:0,dN:0,dO:0,dP:1/u,dQ:0,dR:0,dS:0,dT:0,dU:-1,dV:-2*a,dW:0,dX:0,dY:-1,dZ:0}):cd({dK:1/(o*u),dL:0,dM:0,dN:0,dO:0,dP:1/u,dQ:0,dR:0,dS:0,dT:0,dU:-(i+a)/(i-a),dV:-2*i*a/(i-a),dW:0,dX:0,dY:-1,dZ:0})})),pv=r((function(n,e){return 1==(1&n>>e)?0:1})),gv=t((function(n,e,r){return Us(u(It,(function(r){var t=r<<4;return f(ed,n,L(e,s(Qs,u(pv,r,0),u(pv,r,1),u(pv,r,2),u(pv,r,3))),function(n){return D([vv({_:1,aa:0,af:!0}),Sd({bh:$d,cy:240,cW:n,bw:514,dd:0,bH:$d,bI:$d}),Gd])}(t))}),u(Yr,1,u(Ui,2,r)-1)))})),hv=function(n){return bs(Vu(n))},xv={cH:Ju,de:ef,df:os,dg:tf},Cv=r((function(n,e){var r,t,o,a,i;return t=Ru(r=u(Od,e,n)),o=Vu(r),a=Au(r),i=_u(r),cd({dK:i.bF,dL:a.bF,dM:o.bF,dN:t.bF,dO:i.bG,dP:a.bG,dQ:o.bG,dR:t.bG,dS:i.fR,dT:a.fR,dU:o.fR,dV:t.fR,dW:0,dX:0,dY:0,dZ:1})})),Pv=function(n){return _u(n)},Mv=t((function(n,e,r){return{bF:n,bG:e,fR:r}})),yv=function(n){return Au(n)},Tv=r((function(n,e){var r,t=D([(1,{$:1,a:1}),Xs(0),Es(!0),s(Ws,0,0,0,0)]),o=function(){var e=n.ey;switch(e.$){case 0:return w(t,"0",1);case 1:return w(u(Tr,Hs,t),"1",1);default:return w(t,"0",e.a)}}(),a=o.a,i=o.b,c=o.c,l=n.dq,d=l.a,m=l.b,b=u(pl,"height",Hr(m)+"px"),p=d,g=p/m,h=u(Os,(function(e){return function(n){var e=function(n){return n.c9}(n.eG),r={cH:Id(e),de:Pv(e),df:yv(e),dg:bs(hv(e))},t=iv(n.du),o=s(nv,r,1,Br,D([t]));if(1===o.$)return R;var a=o.a,i=u(Cv,xv,e),c=u(ms,.99,u(qd,Xu(n.dn),Lu(Bd(a)))),l=Hd(a),d=function(n){var e=n,r=u(st,Cc(e.bF),u(st,Cc(e.bG),Cc(e.fR)));if(r){var t=e.fR/r,o=e.bG/r,a=e.bF/r;return uv(a*a+o*o+t*t)*r}return 0}(f(Mv,l.a,l.b,l.c)),m=u(ms,1.01,u(Kd,d,Lu(Ed(a)))),b=u(bv,n.eG,{eA:n.eA,eX:m,fg:c}),p=function(n){return{dK:n[0],dO:n[1],dS:n[2],dW:n[3],dL:n[4],dP:n[5],dT:n[6],dX:n[7],dM:n[8],dQ:n[9],dU:n[10],dY:n[11],dN:n[12],dR:n[13],dV:n[14],dZ:n[15]}}(b).dZ,g=p?bs(hv(e)):Id(e),h=function(){var e=n.fE;switch(e.$){case 0:return L(0,0);case 1:return L(1,0);case 2:return L(2,0);case 3:return L(3,e.a);case 4:return L(4,e.a);default:return L(5,0)}}(),x=h.a,C=h.b,P=u(ad,n.eV,n.fJ),M=cd({dK:0,dL:g.bF,dM:ev(P),dN:n.ep,dO:0,dP:g.bG,dQ:rv(P),dR:d,dS:0,dT:g.fR,dU:tv(P),dV:x,dW:0,dX:p,dY:0,dZ:C}),y=v(ud,M,i,b,cv,t,{P:R,Z:R,fu:R}),T=n.fb;switch(T.$){case 0:return Us(D([f(ed,y.P,L(w=T.a,nd),kd),f(ed,y.Z,dv,kd)]));case 1:var w=T.a;return Us(D([f(ed,y.P,dv,kd),D([lv]),f(ed,y.fu,w.bo,bd),D([Fd(0)]),f(ed,y.P,L(w,nd),mv),f(ed,y.Z,dv,kd)]));default:var S=T.a,N=T.b;return Us(D([f(ed,y.P,L(N,nd),kd),D([lv]),u(zd,y.fu,S),f(gv,y.P,N,Ur(S)),f(ed,y.Z,dv,kd)]))}}({eA:g,eG:n.eG,dn:n.dn,du:e.du,eV:e.eV,fb:e.fb,ep:c,fE:e.fE,fJ:e.fJ})}),e),x=u(pl,"width",Hr(p)+"px"),C=function(n){var e,r,t=n.b,o=n.c,a=n.d,i=function(n){return Oi(1e4*n)/100};return e=D(["rgba(",wc(i(n.a)),"%,",wc(i(t)),"%,",wc(i(o)),"%,",wc((r=a,Oi(1e3*r)/1e3)),")"]),u(Ir,"",e)}(n.dj);return f(Ys,"div",D([u(pl,"padding","0px"),x,b]),D([L(i,f(Js,a,D([(r=Oi(p*c),u(le,"width",Hr(r))),qs(Oi(m*c)),x,b,u(pl,"display","block"),u(pl,"background-color",C)]),h))]))})),Lv={bF:.31271,bG:.32902},wv=r((function(n,e){var r=n,t=e.eO,o=t.bF,a=t.bG,i=t.fR,c=u(ad,e.co,e.cf);return{bL:tv(c),eI:r,bQ:rv(c),cS:0,b2:ev(c),c6:1,bF:-o,bG:-a,fR:-i}})),Sv={$:0},Nv=r((function(n,e){return y(e,n)>0})),Rv=function(n){return function(n){for(;;){if(P(n.e6,0)&&P(n.e7,0))return fv;if(!u(Nv,Xu(n.e6),Xu(n.e7))){var e=Cc(n.e7/pu),r=Cc(n.e6/pu),t=n.b7,o=t.bF,a=t.bG,i=t.fR,c=u(ad,1,n.cf);return{bL:r*tv(c),eI:!1,bQ:r*rv(c),cS:e/r,b2:r*ev(c),c6:3,bF:o,bG:a,fR:i}}n={cf:n.cf,e6:n.e7,e7:n.e6,b7:bs(n.b7)}}}({cf:n.cf,e6:n.co,e7:0,b7:n.b7})},$v=t((function(n,e,r){return 0>y(r,n)?n:y(r,e)>0?e:r})),Fv=function(n){var e=f($v,1667,25e3,n),r=e>4e3?-3025846900/(e*e*e)+2107037.9/(e*e)+.2226347*1e3/e+.24039:-266123900.00000003/(e*e*e)-.2343589*1e6/(e*e)+877.6956/e+.17991;return{bF:r,bG:e>2222?e>4e3?r*r*r*3.081758-r*r*5.8733867+3.75112997*r-.37001483:r*r*r*-.9549476-r*r*1.37418593+2.09137015*r-.16748867:r*r*r*-1.1063814-r*r*1.3481102+2.18555832*r-.20219683}},Dv=Fv(12e3),zv=Fv(5600),_v=r((function(n,e){return{$:2,a:n,b:e}})),Av=function(n){return{$:0,a:n}},Vv=function(n){return n.eI},Gv=Av(dv.a),kv=r((function(n,e){return f(Ht,r((function(e,r){var t=r.a,o=r.b;return n(e)?L(u(Tr,e,t),o):L(t,u(Tr,e,o))})),L(R,R),e)})),Bv=function(n){return cd({dK:n.bF,dL:n.b2,dM:0,dN:0,dO:n.bG,dP:n.bQ,dQ:0,dR:0,dS:n.fR,dT:n.bL,dU:0,dV:0,dW:n.c6,dX:n.cS,dY:0,dZ:0})},Ev=l((function(n,e,r,t,o,a,i,c){var l=u(kv,Vv,D([n,e,r,t])),f=l.a;if(f.b){var s=N(f,l.b);if(s.b&&s.b.b&&s.b.b.b&&s.b.b.b.b&&!s.b.b.b.b.b){var d=s.a,v=s.b,m=v.a,b=v.b,p=b.a,g=b.b.a;return u(_v,u(It,Bv,f),{bo:u(sv,d,m),bU:u(sv,p,g),bV:u(sv,o,a),bW:u(sv,i,c)})}return Gv}return Av({bo:u(sv,n,e),bU:u(sv,r,t),bV:u(sv,o,a),bW:u(sv,i,c)})})),Hv=t((function(n,e,r){return b(Ev,n,e,r,fv,fv,fv,fv,fv)})),Iv=o((function(n,e,r,t){return{$:2,a:n,b:e,c:r,d:t}})),Wv=o((function(n,e,r,t){return{$:3,a:n,b:e,c:r,d:t}})),jv=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),Uv=o((function(n,e,r,t){return{$:6,a:n,b:e,c:r,d:t}})),Ov=o((function(n,e,r,t){return{$:7,a:n,b:e,c:r,d:t}})),qv=o((function(n,e,r,t){return{$:5,a:n,b:e,c:r,d:t}})),Yv=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),Xv=function(n){switch(n.$){case 0:return n;case 1:return s(Yv,n.a,n.b,n.c,1);case 2:return s(Iv,n.a,n.b,n.c,1);case 3:return s(Wv,n.a,n.b,n.c,1);case 4:return s(jv,n.a,n.b,n.c,1);case 5:return s(qv,n.a,n.b,n.c,1);case 6:return s(Uv,n.a,n.b,n.c,1);case 7:return s(Ov,n.a,n.b,n.c,1);case 8:case 9:default:return n}},Zv={$:0},Kv=l((function(n,e,r,t,o,a,i,c){for(;;){if(!c.b)return{d$:e,d0:t,d1:a,d2:n,d3:r,d4:o};var l=c.b,f=i(c.a);n=u(Xd,f.d2,n),e=u(qd,f.d$,e),r=u(Xd,f.d3,r),t=u(qd,f.d0,t),o=u(Xd,f.d4,o),a=u(qd,f.d1,a),i=i,c=l}})),Jv=t((function(n,e,r){var t=n(e);return b(Kv,t.d2,t.d$,t.d3,t.d0,t.d4,t.d1,n,r)})),Qv=r((function(n,e){return 1>y(e,n)})),nm=function(n){return u(Qv,n.d$,n.d2)&&u(Qv,n.d0,n.d3)&&u(Qv,n.d1,n.d4)?n:{d$:u(qd,n.d2,n.d$),d0:u(qd,n.d3,n.d0),d1:u(qd,n.d4,n.d1),d2:u(Xd,n.d2,n.d$),d3:u(Xd,n.d3,n.d0),d4:u(Xd,n.d4,n.d1)}},em=function(n){return n},rm=function(n){var e=n.a,r=n.b,t=n.c,o=gf(e),a=hf(e),i=xf(e),c=gf(r),l=hf(r),f=xf(r),s=gf(t),d=hf(t),v=xf(t);return nm({d$:u(qd,o,u(qd,c,s)),d0:u(qd,a,u(qd,l,d)),d1:u(qd,i,u(qd,f,v)),d2:u(Xd,o,u(Xd,c,s)),d3:u(Xd,a,u(Xd,l,d)),d4:u(Xd,i,u(Xd,f,v))})},tm=function(n){return new Float64Array([n.bF,n.bG,n.fR])},om=function(n){return tm(n)},am=function(n){return tm(n)},im=r((function(n,e){return{bF:e.bG*n.fR-e.fR*n.bG,bG:e.fR*n.bF-e.bF*n.fR,fR:e.bF*n.bG-e.bG*n.bF}})),cm=r((function(n,e){return{bF:e.bF-n.bF,bG:e.bG-n.bG,fR:e.fR-n.fR}})),lm={bF:0,bG:0,fR:0},um=r((function(n,e){var r=n,t=e,o=u(st,Cc(t.bF),u(st,Cc(t.bG),Cc(t.fR)));if(o){var a=t.fR/o,i=t.bG/o,c=t.bF/o,l=uv(c*c+i*i+a*a);return{bF:r*c/l,bG:r*i/l,fR:r*a/l}}return lm}))(1),fm=t((function(n,e,r){return um(u(im,u(cm,e,r),u(cm,n,e)))})),sm=function(n){var e=n.a,r=n.b,t=n.c,o=am(f(fm,e,r,t));return w({p:o,fo:om(e)},{p:o,fo:om(r)},{p:o,fo:om(t)})},dm=r((function(n,e){return{$:2,a:n,b:e}}))({dr:3,dB:0,d6:4}),vm=t((function(n,e,r){return w(n,e,r)})),mm=(Eo=u(ms,-.5,1),Ho=u(ms,-.5,1),Wo=f(bf,Io=u(ms,-.5,1),Ho,Eo),Uo=f(bf,Io,Ho,jo=u(ms,.5,1)),qo=f(bf,Io,Oo=u(ms,.5,1),Eo),Yo=f(bf,Io,Oo,jo),Zo=f(bf,Xo=u(ms,.5,1),Ho,Eo),Ko=f(bf,Xo,Oo,Eo),Jo=f(bf,Xo,Ho,jo),Qo=f(bf,Xo,Oo,jo),Xv(function(n){if(n.b){var e=n.a,r=n.b,t=dm(u(It,sm,n));return s(Iv,f(Jv,rm,e,r),n,t,0)}return Zv}(D([f(vm,Wo,Ko,Zo),f(vm,Wo,qo,Ko),f(vm,Uo,Jo,Qo),f(vm,Uo,Qo,Yo),f(vm,Zo,Ko,Qo),f(vm,Zo,Qo,Jo),f(vm,Wo,Yo,qo),f(vm,Wo,Uo,Yo),f(vm,Wo,Zo,Jo),f(vm,Wo,Jo,Uo),f(vm,qo,Qo,Ko),f(vm,qo,Yo,Qo)])))),bm={$:0},pm=t((function(n,e,r){return{$:1,a:n,b:e,c:r}})),gm=t((function(n,e,r){var t=e.a,o=e.b,a=n(e.c),i=n(o),c=n(t),l=am(f(fm,c,i,a)),s={p:l,fo:om(c)},d={p:l,fo:om(i)},v={p:l,fo:om(a)};return u(Tr,s,u(Tr,d,u(Tr,v,r)))})),hm=function(n){return n.F},xm=o((function(n,e,r,t){return 1===e.$||1===r.$||1===t.$?Br:kr(f(n,e.a,r.a,t.a))})),Cm=function(n){return n.ap},Pm=r((function(n,e){return u(zs,n,Cm(e))})),Mm=r((function(n,e){return!u(Tc,u(po,yc,n),e)})),ym=r((function(n,e){return f(Ht,r((function(e,r){return n(e)?u(Tr,e,r):r})),R,e)})),Tm=r((function(n,e){var r=As(n),t=function(n){var e=n.a,t=n.b,o=n.c;return e>=0&&0>y(e,r)&&t>=0&&0>y(t,r)&&o>=0&&0>y(o,r)};return u(Mm,t,e)?{F:e,ap:n}:{F:u(ym,t,e),ap:n}})),Lm=t((function(n,e,r){return{$:3,a:n,b:e,c:r}}))({dr:1,dB:3,d6:4}),wm=r((function(n,e){var r=e;return L(w(n.bF,n.bG,n.fR),w(r.bF,r.bG,r.fR))})),Sm=r((function(n,e){n:for(;;){if(-2===e.$)return Br;var r=e.c,t=e.d,o=e.e;switch(u(wo,n,e.b)){case 0:n=n,e=t;continue n;case 1:return kr(r);default:n=n,e=o;continue n}}})),Nm=f(od,0,0,0),Rm=i((function(n,e,r,t,o,a){var i=a.a,c=a.b,l=a.c,f=u(Sm,u(wm,n,e),o);if(f.$){var s={p:Nm,fo:om(e)},d={p:Nm,fo:om(n)},v=l+1;return w(u(Tr,w(r,l,v),u(Tr,w(r,v,t),i)),u(Tr,s,u(Tr,d,c)),l+2)}return w(u(Tr,w(r,f.a,t),i),c,l)})),$m=a((function(n,e,r,t,o){for(;;){if(!r.b)return L(o.a,Kr(o.b));var a=r.a,i=a.a,c=a.b,l=r.b,u=n(a.c),f=n(c),s=n(i),d=t+2,m=t+1,b=n,p=e,g=l,h=t+3,x=v(Rm,u,s,d,t,e,v(Rm,f,u,m,d,e,v(Rm,s,f,t,m,e,o)));n=b,e=p,r=g,t=h,o=x}})),Fm=a((function(n,e,r,t,o){for(;;){if(!e.b)return w(t,o,r);var a=e.a,i=a.a,c=a.b,l=e.b,s=n(a.c),d=n(c),v=n(i),m=r+2,b=r+1,p=r,g=f(No,u(wm,v,s),m,f(No,u(wm,s,d),b,f(No,u(wm,d,v),p,o)));n=n,e=l,r+=3,t=u(Tr,w(p,b,m),t),o=g}})),Dm=t((function(n,e,r){var o,a=u(Go,(function(n){var e=n.a,r=n.b,a=n.c;return s(xm,t((function(n,e,r){return w(n,e,r)})),u(Pm,e,o),u(Pm,r,o),u(Pm,a,o))}),hm(o=r)),i=f(Ht,gm(e),R,a),c=d(Fm,e,a,0,R,Po),l=d($m,e,c.b,a,0,w(c.a,R,c.c)),v=l.a,m=l.b,b=m.b?N(i,m):i;return f(pm,n,u(Tm,ks(b),v),u(Lm,b,v))})),zm=function(n){return{F:u(It,(function(n){return w(3*n,3*n+1,3*n+2)}),u(Yr,0,Ur(n)-1)),ap:ks(Us(u(It,(function(n){return D([n.a,n.b,n.c])}),n)))}},_m=function(n){switch(n.$){case 0:return bm;case 1:case 2:return f(Dm,n.a,Dt,zm(u(It,em,n.b)));case 3:return f(Dm,n.a,Dt,n.b);case 4:case 5:case 6:case 7:return f(Dm,n.a,(function(n){return n.fo}),n.b);case 8:case 9:default:return bm}},Am=_m(mm),Vm={$:0},Gm=Vm,km=r((function(n,e){return{$:1,a:n,b:e}})),Bm={src:"\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        void main () {\n            gl_FragColor = texture2D(colorTexture, interpolatedUv);\n        }\n    ",attributes:{},uniforms:{colorTexture:"bO"}},Em=function(n){return{$:5,a:n}},Hm=Em(1029),Im=Em(1028),Wm=t((function(n,e,r){return 1===e?u(Tr,n?Hm:Im,r):r})),jm={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute mediump vec2 uv;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedUv = uv;\n        }\n    ",attributes:{position:"fo",uv:"N"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Um=o((function(n,e,r,t){return u(km,e,l((function(e,o,a,i,c,l,u,s){return d(xd,f(Wm,i,t,s),jm,Bm,r,{bO:n,b:a,c:o,d:l,e:e,f:c})})))})),Om={src:"\n        precision lowp float;\n        \n        uniform lowp vec3 constantColor;\n        \n        void main () {\n            gl_FragColor = vec4(constantColor, 1.0);\n        }\n    ",attributes:{},uniforms:{constantColor:"aE"}},qm={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{position:"fo"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Ym=o((function(n,e,r,t){return u(km,e,l((function(e,o,a,i,c,l,u,s){return d(xd,f(Wm,i,t,s),qm,Om,r,{aE:n,b:a,c:o,d:l,e:e,f:c})})))})),Xm=r((function(n,e){return{$:3,a:n,b:e}})),Zm={src:"\n        precision lowp float;\n        \n        uniform lowp vec3 constantColor;\n        uniform lowp float pointRadius;\n        uniform highp mat4 sceneProperties;\n        \n        float pointAlpha(float pointRadius, vec2 pointCoord) {\n            float pointSize = 2.0 * pointRadius;\n            float x = (pointSize + 2.0) * (pointCoord.s - 0.5);\n            float y = (pointSize + 2.0) * (pointCoord.t - 0.5);\n            float r = sqrt(x * x + y * y);\n            float innerRadius = pointRadius;\n            float outerRadius = pointRadius + 1.0;\n            if (r > outerRadius) {\n                return 0.0;\n            } else if (r > innerRadius) {\n                return outerRadius - r;\n            } else {\n                return 1.0;\n            }\n        }\n        \n        void main () {\n            float supersampling = sceneProperties[3][0];\n            float alpha = pointAlpha(pointRadius * supersampling, gl_PointCoord);\n            gl_FragColor = vec4(constantColor, alpha);\n        }\n    ",attributes:{},uniforms:{constantColor:"aE",pointRadius:"b0",sceneProperties:"e"}},Km={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform lowp float pointRadius;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            float supersampling = sceneProperties[3][0];\n            gl_PointSize = 2.0 * pointRadius * supersampling + 2.0;\n        }\n    ",attributes:{position:"fo"},uniforms:{modelMatrix:"b",modelScale:"c",pointRadius:"b0",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Jm=o((function(n,e,r,t){return u(Xm,r,l((function(r,o,a,i,c,l,u,f){return d(xd,f,Km,Zm,t,{aE:n,b:a,c:o,b0:e,d:l,e:r,f:c})})))})),Qm={src:"\n        precision mediump float;\n        \n        uniform mediump vec3 emissiveColor;\n        uniform highp mat4 sceneProperties;\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{emissiveColor:"aU",sceneProperties:"e"}},nb=Mr,eb=a((function(n,e,r,t,o){return u(km,r,l((function(r,a,i,c,l,s,v,m){return d(xd,f(Wm,c,o,m),qm,Qm,t,{aU:u(nb,e,n),b:i,c:a,d:s,e:r,f:l})})))})),rb={src:"\n        precision mediump float;\n        \n        uniform mediump vec3 emissiveColor;\n        uniform lowp float pointRadius;\n        uniform highp mat4 sceneProperties;\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        float pointAlpha(float pointRadius, vec2 pointCoord) {\n            float pointSize = 2.0 * pointRadius;\n            float x = (pointSize + 2.0) * (pointCoord.s - 0.5);\n            float y = (pointSize + 2.0) * (pointCoord.t - 0.5);\n            float r = sqrt(x * x + y * y);\n            float innerRadius = pointRadius;\n            float outerRadius = pointRadius + 1.0;\n            if (r > outerRadius) {\n                return 0.0;\n            } else if (r > innerRadius) {\n                return outerRadius - r;\n            } else {\n                return 1.0;\n            }\n        }\n        \n        void main () {\n            vec4 color = toSrgb(emissiveColor, sceneProperties);\n            float supersampling = sceneProperties[3][0];\n            float alpha = pointAlpha(pointRadius * supersampling, gl_PointCoord);\n            gl_FragColor = vec4(color.rgb, alpha);\n        }\n    ",attributes:{},uniforms:{emissiveColor:"aU",pointRadius:"b0",sceneProperties:"e"}},tb=a((function(n,e,r,t,o){return u(Xm,t,l((function(t,a,i,c,l,f,s,v){return d(xd,v,Km,rb,o,{aU:u(nb,e,n),b:i,c:a,b0:r,d:f,e:t,f:l})})))})),ob={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 materialColor;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{enabledLights:"U",lights12:"bo",lights34:"bU",lights56:"bV",lights78:"bW",materialColor:"cz",sceneProperties:"e",viewMatrix:"f"}},ab={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n        }\n    ",attributes:{normal:"p",position:"fo"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},ib=o((function(n,e,r,t){return u(km,e,l((function(e,o,a,i,c,l,u,s){var v=u.a,m=u.b;return d(xd,f(Wm,i,t,s),ab,ob,r,{U:m,bo:v.bo,bU:v.bU,bV:v.bV,bW:v.bW,cz:n,b:a,c:o,d:l,e:e,f:c})})))})),cb={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D materialColorTexture;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n            vec3 materialColor = fromSrgb(texture2D(materialColorTexture, interpolatedUv).rgb);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{enabledLights:"U",lights12:"bo",lights34:"bU",lights56:"bV",lights78:"bW",materialColorTexture:"cA",normalMapTexture:"a$",sceneProperties:"e",useNormalMap:"a6",viewMatrix:"f"}},lb={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        attribute mediump vec2 uv;\n        attribute highp vec3 tangent;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getWorldTangent(vec3 modelTangent, vec4 modelScale, mat4 modelMatrix) {\n            return (modelMatrix * vec4(safeNormalize(modelScale.xyz * modelTangent), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = uv;\n            interpolatedTangent = getWorldTangent(tangent, modelScale, modelMatrix);\n        }\n    ",attributes:{normal:"p",position:"fo",tangent:"er",uv:"N"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},ub=i((function(n,e,r,t,o,a){return u(km,t,l((function(t,i,c,l,u,s,v,m){var b=v.a,p=v.b;return d(xd,f(Wm,l,a,m),lb,cb,o,{U:p,bo:b.bo,bU:b.bU,bV:b.bV,bW:b.bW,cA:n,b:c,c:i,a$:e,d:s,e:t,a6:r,f:u})})))})),fb={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D baseColorTexture;\n        uniform lowp vec4 constantBaseColor;\n        uniform mediump sampler2D roughnessTexture;\n        uniform lowp vec2 constantRoughness;\n        uniform mediump sampler2D metallicTexture;\n        uniform lowp vec2 constantMetallic;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getFloatValue(sampler2D texture, vec2 uv, vec2 constantValue) {\n            if (constantValue.y == 1.0) {\n                return constantValue.x;\n            } else {\n                vec4 textureColor = texture2D(texture, uv);\n                return dot(textureColor, vec4(0.2126, 0.7152, 0.0722, 0.0));\n            }\n        }\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 baseColor = fromSrgb(texture2D(baseColorTexture, interpolatedUv).rgb) * (1.0 - constantBaseColor.w) + constantBaseColor.rgb * constantBaseColor.w;\n            float roughness = getFloatValue(roughnessTexture, interpolatedUv, constantRoughness);\n            float metallic = getFloatValue(metallicTexture, interpolatedUv, constantMetallic);\n        \n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{baseColorTexture:"cd",constantBaseColor:"ch",constantMetallic:"ci",constantRoughness:"cj",enabledLights:"U",lights12:"bo",lights34:"bU",lights56:"bV",lights78:"bW",metallicTexture:"cD",normalMapTexture:"a$",roughnessTexture:"c_",sceneProperties:"e",useNormalMap:"a6",viewMatrix:"f"}},sb={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 baseColor;\n        uniform lowp float roughness;\n        uniform lowp float metallic;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{baseColor:"cc",enabledLights:"U",lights12:"bo",lights34:"bU",lights56:"bV",lights78:"bW",metallic:"cC",roughness:"cZ",sceneProperties:"e",viewMatrix:"f"}},db=i((function(n,e,r,t,o,a){return u(km,t,l((function(t,i,c,l,u,s,v,m){var b=v.a,p=v.b;return d(xd,f(Wm,l,a,m),ab,sb,o,{cc:n,U:p,bo:b.bo,bU:b.bU,bV:b.bV,bW:b.bW,cC:r,b:c,c:i,d:s,cZ:e,e:t,f:u})})))})),vb=r((function(n,e){return{$:1,a:n,b:e}})),mb=r((function(n,e){return e.$?L(e.a.D,1):L(n,0)})),bb=s(Qs,0,0,0,0),pb=r((function(n,e){var r;return e.$?L(e.a.D,bb):L(n,s(Qs,ev(r=e.a),rv(r),tv(r),1))})),gb=r((function(n,e){var r,t=L(n,e);return t.a.$?u(vb,L(r=t.a.a.D,bb),u(mb,r,e)):t.b.$?u(vb,u(pb,r=t.b.a.D,n),u(mb,r,e)):{$:0,a:t.a.a}})),hb=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),xb=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),Cb=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),Pb=u(Md,0,0),Mb=r((function(n,e){return e.$?L(e.a.D,Pb):L(n,u(Md,e.a,1))})),yb=o((function(n,e,r,t){var o,a=s(Cb,n,e,r,t);return a.a.$?s(xb,L(o=a.a.a.D,bb),u(Mb,o,e),u(Mb,o,r),u(mb,o,t)):a.b.$?s(xb,u(pb,o=a.b.a.D,n),L(o,Pb),u(Mb,o,r),u(mb,o,t)):a.c.$?s(xb,u(pb,o=a.c.a.D,n),u(Mb,o,e),L(o,Pb),u(mb,o,t)):a.d.$?s(xb,u(pb,o=a.d.a.D,n),u(Mb,o,e),u(Mb,o,r),L(o,1)):f(hb,a.a.a,a.b.a,a.c.a)})),Tb={src:"\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        uniform mediump float backlight;\n        uniform highp mat4 sceneProperties;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            vec3 emissiveColor = fromSrgb(texture2D(colorTexture, interpolatedUv).rgb) * backlight;\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{backlight:"b9",colorTexture:"bO",sceneProperties:"e"}},Lb=a((function(n,e,r,t,o){return u(km,r,l((function(r,a,i,c,l,u,s,v){return d(xd,f(Wm,c,o,v),jm,Tb,t,{b9:e,bO:n,b:i,c:a,d:u,e:r,f:l})})))})),wb={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        attribute mediump vec2 uv;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = uv;\n            interpolatedTangent = vec3(0.0, 0.0, 0.0);\n        }\n    ",attributes:{normal:"p",position:"fo",uv:"N"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Sb=o((function(n,e,r,t){return u(km,e,l((function(e,o,a,i,c,l,u,s){var v=u.a,m=u.b;return d(xd,f(Wm,i,t,s),wb,cb,r,{U:m,bo:v.bo,bU:v.bU,bV:v.bV,bW:v.bW,cA:n,b:a,c:o,a$:n,d:l,e:e,a6:0,f:c})})))})),Nb=function(n){return e(9,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return n(e,r,t,o,a,i,c,l,u)}}}}}}}}}))}((function(n,e,r,t,o,a,i,c,s){return u(km,i,l((function(i,l,u,v,m,b,p,g){var h=p.a,x=p.b;return d(xd,f(Wm,v,s,g),wb,fb,c,{cd:n,ch:e,ci:a,cj:t,U:x,bo:h.bo,bU:h.bU,bV:h.bV,bW:h.bW,cD:o,b:u,c:l,a$:n,d:b,c_:r,e:i,a6:0,f:m})})))})),Rb=t((function(n,e,r){return r>.5?e+(1-r)*(n-e):n+r*(e-n)})),$b=function(n){return f(bf,function(n){return f(Rb,n.d2,n.d$,.5)}(n),function(n){return f(Rb,n.d3,n.d0,.5)}(n),function(n){return f(Rb,n.d4,n.d1,.5)}(n))},Fb=function(n){var e=Hd(n),r=e.a,t=e.b,o=e.c;return{eJ:$b(n),e_:r/2,e$:t/2,e0:o/2}},Db=r((function(n,e){switch(n.$){case 0:if(n.b.$){var r=n.b.a.D;switch(e.$){case 0:case 1:case 2:case 3:case 4:return Gm;case 5:case 6:case 7:return o=e.c,a=e.d,s(Um,r,Fb(A=e.a),o,a);case 8:case 9:default:return Gm}}else{var t=n.b.a;switch(e.$){case 0:return Gm;case 1:var o=e.c,a=e.d;return s(Ym,t,Fb(A=e.a),o,a);case 2:case 3:case 4:return o=e.c,a=e.d,s(Ym,t,Fb(A=e.a),o,a);case 5:case 6:case 7:return o=e.c,a=e.d,s(Ym,t,Fb(A=e.a),o,a);case 8:case 9:return o=e.c,s(Ym,t,Fb(A=e.a),o,0);default:return o=e.d,s(Jm,t,e.b,Fb(A=e.a),o)}}case 1:if(n.b.$)switch(r=n.b.a.D,c=n.c,e.$){case 0:case 1:case 2:case 3:case 4:return Gm;case 5:case 6:case 7:return o=e.c,a=e.d,d(Lb,r,c,Fb(A=e.a),o,a);case 8:case 9:default:return Gm}else{var i=n.b.a,c=n.c;switch(e.$){case 0:return Gm;case 1:case 2:case 3:case 4:case 5:case 6:case 7:return o=e.c,a=e.d,d(eb,i,c,Fb(A=e.a),o,a);case 8:case 9:return o=e.c,d(eb,i,c,Fb(A=e.a),o,0);default:return o=e.d,d(tb,i,c,e.b,Fb(A=e.a),o)}}case 2:var m=u(gb,n.b,n.c);if(m.$){var b=m.a.a,p=m.b,g=p.a,h=p.b;switch(e.$){case 0:case 1:case 2:case 3:case 4:case 5:return Gm;case 6:return o=e.c,C=e.d,s(Sb,b,Fb(A=e.a),o,C);case 7:return o=e.c,C=e.d,v(ub,b,g,h,Fb(A=e.a),o,C);case 8:case 9:default:return Gm}}else{var x=m.a;switch(e.$){case 0:case 1:return Gm;case 2:o=e.c;var C=e.d;return s(ib,x,Fb(A=e.a),o,C);case 3:return Gm;case 4:return o=e.c,C=e.d,s(ib,x,Fb(A=e.a),o,C);case 5:return Gm;case 6:case 7:return o=e.c,C=e.d,s(ib,x,Fb(A=e.a),o,C);case 8:case 9:default:return Gm}}default:var P=s(yb,n.b,n.c,n.d,n.e);if(P.$){var M=P.a,y=M.a,T=M.b,L=P.b,w=L.a,S=L.b,N=P.c,R=N.a,$=N.b,F=P.d;switch(g=F.a,h=F.b,e.$){case 0:case 1:case 2:case 3:case 4:case 5:return Gm;case 6:return o=e.c,a=e.d,function(n,e,r,t,o,a,i,c,l,u){return 9===n.a?n.f(e,r,t,o,a,i,c,l,u):n(e)(r)(t)(o)(a)(i)(c)(l)(u)}(Nb,y,T,w,S,R,$,Fb(A=e.a),o,a);case 7:return A=e.a,o=e.c,a=e.d,function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(s){return function(v){return function(m){return u(km,s,l((function(l,u,s,b,p,g,h,x){var C=h.a,P=h.b;return d(xd,f(Wm,b,m,x),lb,fb,v,{cd:n,ch:e,ci:a,cj:t,U:P,bo:C.bo,bU:C.bU,bV:C.bV,bW:C.bW,cD:o,b:s,c:u,a$:i,d:g,c_:r,e:l,a6:c,f:p})})))}}}}}}}}}}}(y)(T)(w)(S)(R)($)(g)(h)(Fb(A))(o)(a);case 8:case 9:default:return Gm}}else{var D=P.a,z=P.b,_=P.c;switch(e.$){case 0:case 1:return Gm;case 2:return o=e.c,a=e.d,v(db,D,z,_,Fb(A=e.a),o,a);case 3:return Gm;case 4:return o=e.c,a=e.d,v(db,D,z,_,Fb(A=e.a),o,a);case 5:return Gm;case 6:return o=e.c,a=e.d,v(db,D,z,_,Fb(A=e.a),o,a);case 7:var A;return o=e.c,a=e.d,v(db,D,z,_,Fb(A=e.a),o,a);case 8:case 9:default:return Gm}}}})),zb=function(n){return n.bF},_b=function(n){return n.bG},Ab=function(n){return n.fR},Vb=function(n){var e=n,r=Ab(e.dg),t=_b(e.dg),o=zb(e.dg),a=Ab(e.df),i=_b(e.df),c=zb(e.df),l=Ab(e.de),u=_b(e.de),f=zb(e.de);return f*i*r+u*a*o+l*c*t-l*i*o-u*c*r-f*a*t>0},Gb=r((function(n,e){return{$:5,a:n,b:e}})),kb=r((function(n,e){var r=e;switch(r.$){case 0:return Gm;case 5:var t=r.b;return u(Gb,u(id,r.a,n),t);case 1:case 3:case 2:default:return u(Gb,n,r)}})),Bb=r((function(n,e){return u(kb,function(n){var e=Ru(n),r=Vu(n),t=Au(n),o=_u(n);return{dC:Vb(n),s:o.bF,t:o.bG,u:o.fR,v:t.bF,w:t.bG,x:t.fR,y:r.bF,z:r.bG,A:r.fR,J:e.bF,K:e.bG,L:e.fR,b4:1}}(n),e)})),Eb=function(n){return{$:2,a:n}},Hb=r((function(n,e){var r=n.a,t=n.b,o=n.c,a=e.eJ;return{eJ:{bF:r*a.bF,bG:t*a.bG,fR:o*a.fR},e_:r*e.e_,e$:t*e.e$,e0:o*e.e0}})),Ib=function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){var f,s,d={bF:(s=t)[0],bG:s[1],fR:s[2],ew:s[3]},v=(f={ew:d.ew,bF:d.bF*n.a,bG:d.bG*n.b,fR:d.fR*n.c},new Float64Array([f.bF,f.bG,f.fR,f.ew]));return b(e,r,v,o,a,i,c,l,u)}}}}}}}}}},Wb=r((function(n,e){switch(e.$){case 0:return Vm;case 5:return u(Gb,e.a,u(Wb,n,e.b));case 1:var r=e.b;return u(km,u(Hb,n,e.a),u(Ib,n,r));case 3:return e;case 2:return Eb(u(Ib,n,r=e.a));default:var t=e.a;return ov(u(It,Wb(n),t))}})),jb=r((function(n,e){return u(Wb,n,e)})),Ub={src:"\n        precision lowp float;\n        \n        void main () {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        }\n    ",attributes:{},uniforms:{}},Ob=f(wd,{cy:0,cW:0,dd:15},{bh:$d,bw:pd,bH:$d,bI:7683},{bh:$d,bw:pd,bH:$d,bI:7682}),qb=f(wd,{cy:0,cW:0,dd:15},{bh:$d,bw:pd,bH:$d,bI:7682},{bh:$d,bw:pd,bH:$d,bI:7683}),Yb=r((function(n,e){return u(Tr,n?qb:Ob,e)})),Xb={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 shadowVertexPosition(vec3 position, vec3 normal, mat4 shadowLight, vec4 modelScale, mat4 modelMatrix, mat4 viewMatrix, mat4 projectionMatrix, mat4 sceneProperties) {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            vec3 worldNormal = getWorldNormal(normal, vec4(modelScale.xyz, 1.0), modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 directionToLight = getDirectionToLight(worldPosition.xyz, xyz_type, rgb_parameter);\n            vec3 offset = vec3(0.0, 0.0, 0.0);\n            float sceneDiameter = sceneProperties[3][1];\n            if (dot(directionToLight, worldNormal) <= 0.0) {\n                offset = -sceneDiameter * directionToLight;\n            } else {\n                offset = -0.001 * sceneDiameter * directionToLight;\n            }\n            vec4 offsetPosition = worldPosition + vec4(offset, 0.0);\n            return projectionMatrix * (viewMatrix * offsetPosition);\n        }\n        \n        void main () {\n            gl_Position = shadowVertexPosition(\n                position,\n                normal,\n                shadowLight,\n                modelScale,\n                modelMatrix,\n                viewMatrix,\n                projectionMatrix,\n                sceneProperties\n            );\n        }\n    ",attributes:{normal:"p",position:"fo"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"b5",viewMatrix:"f"}},Zb=function(n){var e=function(n){if(n.$){var e=n.c;return kr(l((function(n,r,t,o,a,i,c,l){return d(xd,u(Yb,o,l),Xb,Ub,e,{b:t,c:r,d:i,e:n,b5:c,f:a})})))}return Br}(n);return e.$?Gm:Eb(e.a)},Kb=o((function(n,e,r,t){var o,a=u(Db,r,mm),i=(o=L(n,e)).a?o.b?iv(D([a,Zb(Am)])):a:o.b?Zb(Am):Gm,c=_f(t),l=c.a,f=c.b,s=c.c;return u(Bb,zf(t),u(jb,w(l,f,s),i))})),Jb=r((function(n,e){return s(Kb,!0,!0,n,e)})),Qb=function(n){return{$:0,a:n}},np=r((function(n,e){return{$:0,a:n,b:e}})),ep=function(n){return $u(n)},rp=r((function(n,e){return e/n})),tp=function(n){var e=n;return{bF:$u(e),bG:Fu(e)}},op=r((function(n,e){var r=n.fo;return u(Tr,{p:am(n.p),fo:om(r)},e)})),ap=c((function(n,e,r,t,o,a,i){for(;;){if(!i.b)return nm({d$:e,d0:t,d1:a,d2:n,d3:r,d4:o});var c=i.a,l=i.b,f=tv(c.fo),s=rv(c.fo),d=ev(c.fo);n=u(Yd,n,d),e=u(st,e,d),r=u(Yd,r,s),t=u(st,t,s),o=u(Yd,o,f),a=u(st,a,f),i=l}})),ip=r((function(n,e){var r=tv(n.fo),t=rv(n.fo),o=ev(n.fo);return m(ap,o,o,t,t,r,r,e)})),cp=r((function(n,e){var r=n.df,t=n.de;return{bF:e.bF*t.bF+e.bG*r.bF,bG:e.bF*t.bG+e.bG*r.bG,fR:e.bF*t.fR+e.bG*r.fR}})),lp=function(n){return Fu(n)},up=function(n){return 6.283185307179586*n},fp=Qu({cH:Ju,de:ef,df:os}),sp=(na=u(rp,72,up(1)),ea=rf,ra=vf,oa=f(bf,0,0,ta=u(ms,.5,1)),ia=f(bf,0,0,aa=u(ms,-.5,1)),Xv(function(n){var e=f(wr,op,R,Cm(n));if(e.b){var r=e.a,t=e.b,o=u(Lm,e,hm(n));return s(jv,u(ip,r,t),n,o,0)}return Zv}(zm(Us(u(It,(function(n){var e=u(ms,n,na),r=u(cp,fp,tp(e)),t=u(ms,ep(e),1),o=u(ms,lp(e),1),a=f(bf,t,o,ta),i=f(bf,t,o,aa),c=u(ms,u(mc,72,n+1),na),l=u(cp,fp,tp(c)),s=u(ms,ep(c),1),d=u(ms,lp(c),1),v=f(bf,s,d,aa),m=f(bf,s,d,ta);return D([w({p:ra,fo:ia},{p:ra,fo:v},{p:ra,fo:i}),w({p:r,fo:i},{p:l,fo:v},{p:l,fo:m}),w({p:r,fo:i},{p:l,fo:m},{p:r,fo:a}),w({p:ea,fo:oa},{p:ea,fo:a},{p:ea,fo:m})])}),u(Yr,0,71))))))),dp=_m(sp),vp=o((function(n,e,r,t){var o,a=function(n){var e,r,t=Bu(n),o=L(r=function(n){var e=n,r=Cc(e.fR),t=Cc(e.bG),o=Cc(e.bF);if(1>y(o,t)){if(1>y(o,r)){var a=uv(e.fR*e.fR+e.bG*e.bG);return{bF:0,bG:-e.fR/a,fR:e.bG/a}}return a=uv(e.bG*e.bG+e.bF*e.bF),{bF:-e.bG/a,bG:e.bF/a,fR:0}}return 1>y(t,r)?(a=uv(e.fR*e.fR+e.bF*e.bF),{bF:e.fR/a,bG:0,fR:-e.bF/a}):(a=uv(e.bF*e.bF+e.bG*e.bG),{bF:-e.bG/a,bG:e.bF/a,fR:0})}(e=t),{bF:e.bG*r.fR-e.fR*r.bG,bG:e.fR*r.bF-e.bF*r.fR,fR:e.bF*r.bG-e.bG*r.bF}),a=o.a,i=o.b;return{cH:Cs(n),de:a,df:i,dg:t}}(hs(t)),i=u(Db,r,sp),c=(o=L(n,e)).a?o.b?iv(D([i,Zb(dp)])):i:o.b?Zb(dp):Gm,l=Ms(t),f=Ps(t);return u(Bb,a,u(jb,w(l,l,f),c))})),mp=r((function(n,e){return s(vp,!0,!0,n,e)})),bp={src:"\n        precision highp float;\n        \n        attribute lowp float triangleVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 triangleVertexPositions;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleVertex), triangleVertexPositions, position, normal);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{triangleVertex:"c5"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",triangleVertexPositions:"bC",viewMatrix:"f"}},pp={src:"\n        precision highp float;\n        \n        attribute lowp float triangleVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 triangleVertexPositions;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleVertex), triangleVertexPositions, position, normal);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n        }\n    ",attributes:{triangleVertex:"c5"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",triangleVertexPositions:"bC",viewMatrix:"f"}},gp=function(n){var e=n.a,r=n.b,t=n.c;return cd({dK:e.bF,dL:r.bF,dM:t.bF,dN:0,dO:e.bG,dP:r.bG,dQ:t.bG,dR:0,dS:e.fR,dT:r.fR,dU:t.fR,dV:0,dW:0,dX:0,dY:0,dZ:0})},hp=dm(D([w({c5:0},{c5:1},{c5:2})])),xp=r((function(n,e){var r=rm(e),t=Fb(r);switch(n.$){case 0:if(n.b.$)return Gm;var o=n.b.a;return u(km,t,l((function(n,r,t,a,i,c,l,u){return d(xd,f(Wm,a,0,u),bp,Om,hp,{aE:o,b:t,c:r,d:c,e:n,bC:gp(e),f:i})})));case 1:if(n.b.$)return Gm;var a=n.b.a,i=n.c;return u(km,t,l((function(n,r,t,o,c,l,s,v){return d(xd,f(Wm,o,0,v),bp,Qm,hp,{aU:u(nb,i,a),b:t,c:r,d:l,e:n,bC:gp(e),f:c})})));case 2:var c=u(gb,n.b,n.c);if(c.$)return Gm;var v=c.a;return u(km,t,l((function(n,r,t,o,a,i,c,l){var u=c.a,s=c.b;return d(xd,f(Wm,o,0,l),pp,ob,hp,{U:s,bo:u.bo,bU:u.bU,bV:u.bV,bW:u.bW,cz:v,b:t,c:r,d:i,e:n,bC:gp(e),f:a})})));default:var m=s(yb,n.b,n.c,n.d,n.e);if(m.$)return Gm;var b=m.a,p=m.b,g=m.c;return u(km,t,l((function(n,r,t,o,a,i,c,l){var u=c.a,s=c.b;return d(xd,f(Wm,o,0,l),pp,sb,hp,{cc:b,U:s,bo:u.bo,bU:u.bU,bV:u.bV,bW:u.bW,cC:g,b:t,c:r,d:i,cZ:p,e:n,bC:gp(e),f:a})})))}})),Cp=(ca=D([{a5:u(Md,0,1)},{a5:u(Md,1,1)},{a5:u(Md,2,1)},{a5:u(Md,0,-1)},{a5:u(Md,1,-1)},{a5:u(Md,2,-1)}]),la=D([w(0,1,2),w(3,5,4),w(3,4,1),w(3,1,0),w(4,5,2),w(4,2,1),w(5,3,0),w(5,0,2)]),u(Lm,ca,la)),Pp={src:"\n        precision highp float;\n        \n        attribute highp vec2 triangleShadowVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        uniform highp mat4 triangleVertexPositions;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 shadowVertexPosition(vec3 position, vec3 normal, mat4 shadowLight, vec4 modelScale, mat4 modelMatrix, mat4 viewMatrix, mat4 projectionMatrix, mat4 sceneProperties) {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            vec3 worldNormal = getWorldNormal(normal, vec4(modelScale.xyz, 1.0), modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 directionToLight = getDirectionToLight(worldPosition.xyz, xyz_type, rgb_parameter);\n            vec3 offset = vec3(0.0, 0.0, 0.0);\n            float sceneDiameter = sceneProperties[3][1];\n            if (dot(directionToLight, worldNormal) <= 0.0) {\n                offset = -sceneDiameter * directionToLight;\n            } else {\n                offset = -0.001 * sceneDiameter * directionToLight;\n            }\n            vec4 offsetPosition = worldPosition + vec4(offset, 0.0);\n            return projectionMatrix * (viewMatrix * offsetPosition);\n        }\n        \n        void main () {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleShadowVertex.x), triangleVertexPositions, position, normal);\n            normal *= triangleShadowVertex.y;\n            gl_Position = shadowVertexPosition(\n                position,\n                normal,\n                shadowLight,\n                modelScale,\n                modelMatrix,\n                viewMatrix,\n                projectionMatrix,\n                sceneProperties\n            );\n        }\n    ",attributes:{triangleShadowVertex:"a5"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"b5",triangleVertexPositions:"bC",viewMatrix:"f"}},Mp=function(n){return Eb(l((function(e,r,t,o,a,i,c,l){return d(xd,u(Yb,o,l),Pp,Ub,Cp,{b:t,c:r,d:i,e:e,b5:c,bC:gp(n),f:a})})))},yp=o((function(n,e,r,t){var o=u(xp,r,t),a=L(n,e);return a.a?a.b?iv(D([o,Mp(t)])):o:a.b?Mp(t):Gm})),Tp=r((function(n,e){return s(yp,!0,!0,n,e)})),Lp=r((function(n,e){var r=xf(e),t=xf(n),o=hf(e),a=hf(n),i=gf(e),c=gf(n);return{d$:u(qd,c,i),d0:u(qd,a,o),d1:u(qd,t,r),d2:u(Xd,c,i),d3:u(Xd,a,o),d4:u(Xd,t,r)}})),wp={src:"\n        precision highp float;\n        \n        attribute lowp float lineSegmentVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp vec3 lineSegmentStartPoint;\n        uniform highp vec3 lineSegmentEndPoint;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = (1.0 - lineSegmentVertex) * lineSegmentStartPoint + lineSegmentVertex * lineSegmentEndPoint;\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{lineSegmentVertex:"dJ"},uniforms:{lineSegmentEndPoint:"dH",lineSegmentStartPoint:"dI",modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Sp=r((function(n,e){return{$:1,a:n,b:e}}))({dr:2,dB:0,d6:1})(D([L({dJ:0},{dJ:1})])),Np=r((function(n,e){var r,t=u(Lp,(r=e).a,r.b),o=Fb(t),a=e.a,i=e.b;switch(n.$){case 0:if(n.b.$)return Gm;var c=n.b.a;return u(km,o,l((function(n,e,r,t,o,l,u,f){return d(xd,f,wp,Om,Sp,{aE:c,dH:om(i),dI:om(a),b:r,c:e,d:l,e:n,f:o})})));case 1:if(n.b.$)return Gm;c=n.b.a;var f=n.c;return u(km,o,l((function(n,e,r,t,o,l,s,v){return d(xd,v,wp,Qm,Sp,{aU:u(nb,f,c),dH:om(i),dI:om(a),b:r,c:e,d:l,e:n,f:o})})));case 2:default:return Gm}})),Rp=r((function(n,e){return u(Np,n,e)})),$p=t((function(n,e,r){return{$:2,a:n,b:e,c:r}})),Fp=function(n){return f($v,0,1,n>.04045?u(Ui,(n+.055)/1.055,2.4):n/12.92)},Dp=function(n){return f($p,0,Qb(function(n){var e=gc(n),r=e.cm,t=e.ce;return f(od,Fp(e.cV),Fp(r),Fp(t))}(n)),Qb(0))},zp=r((function(n,e){return n/e})),_p=a((function(n,e,r,t,o){for(;;){var a=t(e/r),i=u(Tr,a,o);if(P(e,n))return i;n=n,e-=1,r=r,t=t,o=i}})),Ap=r((function(n,e){return 1>n?R:d(_p,0,n,n,e,R)})),Vp=r((function(n,e){var r=n.fo,t=n.N,o=t.a,a=t.b;return u(Tr,{p:am(n.p),fo:om(r),N:u(Md,o,a)},e)})),Gp=r((function(n,e){var r=n,t=e,o=$u(t);return{bF:o*$u(r),bG:o*Fu(r),fR:Fu(t)}})),kp=(ua=u(Yr,0,71),fa=u(Ap,72,u(Rb,0,up(1))),sa=rt(36),da=u(Yr,0,sa-1),va=u(Ap,sa,u(Rb,Tu(90),Tu(-90))),ma=ks(Us(u(It,(function(n){return u(It,(function(e){return{p:u(Gp,n,e),fo:f(bf,u(ms,ep(e)*ep(n),1),u(ms,ep(e)*lp(n),1),u(ms,lp(e),1)),N:L(u(zp,n,up(1)),u(zp,u(Kd,Tu(90),e),Tu(180)))}}),va)}),fa))),ba=r((function(n,e){return n*(sa+1)+e})),pa=Us(u(It,(function(n){return Us(u(It,(function(e){var r=u(ba,n+1,e),t=u(ba,n,e),o=u(ba,n+1,e+1),a=u(ba,n,e+1);return D([w(a,o,r),w(a,r,t)])}),da))}),ua)),Xv(function(n){var e=f(wr,Vp,R,Cm(n));if(e.b){var r=e.a,t=e.b,o=u(Lm,e,hm(n));return s(Uv,u(ip,r,t),n,o,0)}return Zv}(u(Tm,ma,pa)))),Bp=r((function(n,e){for(;;){var r=u(mc,144,2*n+3),t=u(mc,144,2*n+2),o=2*n+1,a=2*n,i=u(Tr,w(144,a,t),u(Tr,w(a,r,t),u(Tr,w(a,o,r),u(Tr,w(o,145,r),e))));if(!n)return i;n-=1,e=i}})),Ep=t((function(n,e,r){return r>.5?e+(1-r)*(n-e):n+r*(e-n)})),Hp=(ga=u(r((function(n,e){for(;;){var r=f(Ep,0,6.283185307179586,n/72),t=u(Tr,{bK:r,bZ:0,b3:1},u(Tr,{bK:r,bZ:1,b3:1},e));if(!n)return t;n-=1,e=t}})),71,D([{bK:0,bZ:0,b3:0},{bK:0,bZ:1,b3:0}])),u(Lm,ga,u(Bp,71,R))),Ip={src:"\n        precision highp float;\n        \n        attribute highp float angle;\n        attribute highp float offsetScale;\n        attribute highp float radiusScale;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const lowp float kPerspectiveProjection = 0.0;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec3 perpendicularTo(vec3 d) {\n            float absX = abs(d.x);\n            float absY = abs(d.y);\n            float absZ = abs(d.z);\n            if (absX <= absY) {\n                if (absX <= absZ) {\n                    float scale = 1.0 / length(d.zy);\n                    return vec3(0.0, -d.z * scale, d.y * scale);\n                } else {\n                    float scale = 1.0 / length(d.xy);\n                    return vec3(-d.y * scale, d.x * scale, 0.0);\n                }\n            } else {\n                if (absY <= absZ) {\n                    float scale = 1.0 / length(d.xz);\n                    return vec3(d.z * scale, 0.0, -d.x * scale);\n                } else {\n                    float scale = 1.0 / length(d.xy);\n                    return vec3(-d.y * scale, d.x * scale, 0.0);\n                }\n            }\n        }\n        \n        void main () {\n            vec4 worldCenter = getWorldPosition(vec3(0.0, 0.0, 0.0), modelScale, modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 zDirection = getDirectionToLight(worldCenter.xyz, xyz_type, rgb_parameter);\n            vec3 xDirection = perpendicularTo(zDirection);\n            vec3 yDirection = cross(zDirection, xDirection);\n            float r = modelScale.x;\n            float adjustedRadius = r;\n            float zOffset = 0.0;\n            if (xyz_type.w == kPointLight) {\n                float distanceToLight = length(xyz_type.xyz - worldCenter.xyz);\n                float rSquared = r * r;\n                zOffset = rSquared / distanceToLight;\n                float zSquared = zOffset * zOffset;\n                adjustedRadius = sqrt(rSquared - zSquared) * radiusScale;\n            }\n            vec3 worldPosition =\n                worldCenter.xyz\n                    + zDirection * zOffset\n                    + xDirection * adjustedRadius * cos(angle)\n                    + yDirection * adjustedRadius * sin(angle);\n            vec3 directionToLight = getDirectionToLight(worldPosition, xyz_type, rgb_parameter);\n            float sceneDiameter = sceneProperties[3][1];\n            vec3 offset = -sceneDiameter * offsetScale * directionToLight;\n            vec4 offsetPosition = vec4(worldPosition + offset, 1.0);\n            gl_Position = projectionMatrix * (viewMatrix * offsetPosition);\n        }\n    ",attributes:{angle:"bK",offsetScale:"bZ",radiusScale:"b3"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"b5",viewMatrix:"f"}},Wp=function(){return Eb(l((function(n,e,r,t,o,a,i,c){return d(xd,u(Yb,!0,c),Ip,Ub,Hp,{aE:f(od,0,0,1),b:r,c:e,d:a,e:n,b5:i,f:o})})))},jp=r((function(n,e){return u(kb,function(n){return{dC:!0,s:1,t:0,u:0,v:0,w:1,x:0,y:0,z:0,A:1,J:n.bF,K:n.bG,L:n.fR,b4:1}}(n),e)})),Up=o((function(n,e,r,t){var o,a=u(Db,r,kp),i=(o=L(n,e)).a?o.b?iv(D([a,Wp()])):a:o.b?Wp():Gm,c=Hf(t);return u(jp,u(cm,Ju,Ef(t)),u(jb,w(c,c,c),i))})),Op=r((function(n,e){return s(Up,!0,!0,n,e)})),qp=function(n){switch(n.$){case 0:var e=n.b;return D([u(Jb,Dp(n.a),e)]);case 1:var r=n.b;return D([u(Tp,Dp(n.a),r)]);case 3:var t=n.b;return D([u(Op,Dp(n.a),t)]);case 2:var o=n.b;return D([u(mp,Dp(n.a),o)]);case 4:var a=n.b;return D([u(Rp,(i=n.a,u(np,0,Qb(function(n){var e=gc(n);return f(od,e.cV,e.cm,e.ce)}(i)))),a)]);default:return u(Os,qp,n.a)}var i},Yp=r((function(n,e){return function(n){var e,r=u(wv,n.fu,{cf:zv,eO:n.fB,co:8e4}),t=Rv({cf:Dv,co:2e4,b7:n.b7}),o=Rv({cf:Lv,co:15e3,b7:bs(n.b7)}),a=f(Hv,r,t,o);return function(n){return u(Tv,{ey:n.ey,dj:n.dj,eG:n.eG,dn:n.dn,dq:n.dq},D([{du:n.du,eV:n.eV,fb:n.fb,fE:n.fE,fJ:n.fJ}]))}({ey:(e=n.ck,{$:2,a:e}),dj:n.dj,eG:n.eG,dn:n.dn,dq:n.dq,du:n.du,eV:1.2*u(Ui,2,15),fb:a,fE:Sv,fJ:Lv})}({dj:n.eD,eG:n.eG,dn:.005,ck:n.ck,dq:L(Oi(n.ad.db),Oi(n.ad.cn)),du:(r=e,u(Os,qp,r)),fu:!0,fB:u(Gp,n.fA,n.fC),b7:tf});var r})),Xp=r((function(n,e){return u(Yp,{eD:Ji,eG:af(n),ck:n.ck,ad:n.ad,fA:u(yu,"sunlight azimuth",n),fC:u(yu,"sunlight elevation",n)},D([u(Bs,n,e),ss(n)]))}));ha={Main:{init:s(su,r((function(n,e){return u(St,R,D([u(St,D([u(pl,"position","absolute"),u(pl,"width","100%")]),D([u(Cu,n,e)])),u(Xp,n,e)]))})),hu,gu,(function(){return{dc:vu}}))(u(Ct,(function(n){return Lt({ck:n})}),u(Pt,"devicePixelRatio",Mt)))(0)}},n.Elm?function n(e,r){for(var t in r)t in e?"init"==t?C(6):n(e[t],r[t]):e[t]=r[t]}(n.Elm,ha):n.Elm=ha}(n);const e=n.Elm.Main.init({node:document.getElementById("elm-node"),flags:{devicePixelRatio:window.devicePixelRatio}});function r(n){const e=[];for(let r=0;r<n.length;r++)e.push({identifier:n[r].identifier,pageX:n[r].pageX,pageY:n[r].pageY});return e}window.addEventListener("touchstart",(n=>{e.ports.touchStart.send(r(n.changedTouches))})),window.addEventListener("touchmove",(n=>{e.ports.touchMove.send(r(n.changedTouches))})),window.addEventListener("touchend",(n=>{e.ports.touchEnd.send(r(n.changedTouches))})),window.addEventListener("touchcancel",(n=>{e.ports.touchCancel.send(r(n.changedTouches))}))}();
//# sourceMappingURL=index.61e6c405.js.map
