!function(){var n={};!function(n){function e(n,e,r){return r.a=n,r.f=e,r}function r(n){return e(2,n,(function(e){return function(r){return n(e,r)}}))}function t(n){return e(3,n,(function(e){return function(r){return function(t){return n(e,r,t)}}}))}function o(n){return e(4,n,(function(e){return function(r){return function(t){return function(o){return n(e,r,t,o)}}}}))}function a(n){return e(5,n,(function(e){return function(r){return function(t){return function(o){return function(a){return n(e,r,t,o,a)}}}}}))}function i(n){return e(6,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return n(e,r,t,o,a,i)}}}}}}))}function c(n){return e(7,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return n(e,r,t,o,a,i,c)}}}}}}}))}function l(n){return e(8,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return n(e,r,t,o,a,i,c,l)}}}}}}}}))}function u(n,e,r){return 2===n.a?n.f(e,r):n(e)(r)}function f(n,e,r,t){return 3===n.a?n.f(e,r,t):n(e)(r)(t)}function s(n,e,r,t,o){return 4===n.a?n.f(e,r,t,o):n(e)(r)(t)(o)}function d(n,e,r,t,o,a){return 5===n.a?n.f(e,r,t,o,a):n(e)(r)(t)(o)(a)}function b(n,e,r,t,o,a,i){return 6===n.a?n.f(e,r,t,o,a,i):n(e)(r)(t)(o)(a)(i)}function v(n,e,r,t,o,a,i,c){return 7===n.a?n.f(e,r,t,o,a,i,c):n(e)(r)(t)(o)(a)(i)(c)}function m(n,e,r,t,o,a,i,c,l){return 8===n.a?n.f(e,r,t,o,a,i,c,l):n(e)(r)(t)(o)(a)(i)(c)(l)}var p=t((function(n,e,r){for(var t=Array(n),o=0;n>o;o++)t[o]=r(e+o);return t})),g=r((function(n,e){for(var r=Array(n),t=0;n>t&&e.b;t++)r[t]=e.a,e=e.b;return r.length=t,L(r,e)})),h=r((function(n,e){return e[n]})),x=t((function(n,e,r){for(var t=r.length-1;t>=0;t--)e=u(n,r[t],e);return e}));function P(n){throw Error("https://github.com/elm/core/blob/1.0.0/hints/"+n+".md")}function C(n,e){for(var r,t=[],o=M(n,e,0,t);o&&(r=t.pop());o=M(r.a,r.b,0,t));return o}function M(n,e,r,t){if(n===e)return!0;if("object"!=typeof n||null===n||null===e)return"function"==typeof n&&P(5),!1;if(r>100)return t.push(L(n,e)),!0;for(var o in 0>n.$&&(n=Nr(n),e=Nr(e)),n)if(!M(n[o],e[o],r+1,t))return!1;return!0}function T(n,e,r){if("object"!=typeof n)return n===e?0:e>n?-1:1;if(void 0===n.$)return(r=T(n.a,e.a))||(r=T(n.b,e.b))?r:T(n.c,e.c);for(;n.b&&e.b&&!(r=T(n.a,e.a));n=n.b,e=e.b);return r||(n.b?1:e.b?-1:0)}var y=r((function(n,e){var r=T(n,e);return 0>r?$r:r?Hr:Dr}));function L(n,e){return{a:n,b:e}}function w(n,e,r){return{a:n,b:e,c:r}}function S(n,e){var r={};for(var t in n)r[t]=n[t];for(var t in e)r[t]=e[t];return r}function N(n,e){if("string"==typeof n)return n+e;if(!n.b)return e;var r=H(n.a,e);n=n.b;for(var t=r;n.b;n=n.b)t=t.b=H(n.a,e);return r}var D={$:0};function H(n,e){return{$:1,a:n,b:e}}var $=r(H);function I(n){for(var e=D,r=n.length;r--;)e=H(n[r],e);return e}function z(n){for(var e=[];n.b;n=n.b)e.push(n.a);return e}var _=t((function(n,e,r){for(var t=[];e.b&&r.b;e=e.b,r=r.b)t.push(u(n,e.a,r.a));return I(t)})),G=r((function(n,e){return n*e})),A=r(Math.pow),R=r((function(n,e){var r=e%n;return 0===n?P(11):r>0&&0>n||0>r&&n>0?r+n:r})),k=Math.cos,V=Math.sin,B=Math.tan,F=Math.ceil,E=Math.floor,j=Math.round,U=Math.sqrt,Y=Math.log,W=isNaN,O=r((function(n,e){return n+e})),q=t((function(n,e,r){for(var t=r.length;t--;){var o=r[t],a=r.charCodeAt(t);56320>a||a>57343||(o=r[--t]+o),e=u(n,o,e)}return e})),X=r((function(n,e){return e.split(n)})),J=r((function(n,e){return e.join(n)})),Z=t((function(n,e,r){return r.slice(n,e)})),K=r((function(n,e){return 0===e.indexOf(n)}));function Q(n){return n+""}function nn(n){return{$:2,b:n}}var en=nn((function(n){return"number"!=typeof n?hn("an INT",n):n>-2147483647&&2147483647>n&&(0|n)===n?Ar(n):!isFinite(n)||n%1?hn("an INT",n):Ar(n)})),rn=nn((function(n){return"boolean"==typeof n?Ar(n):hn("a BOOL",n)})),tn=nn((function(n){return"number"==typeof n?Ar(n):hn("a FLOAT",n)})),on=(nn((function(n){return Ar(n)})),nn((function(n){return"string"==typeof n?Ar(n):n instanceof String?Ar(n+""):hn("a STRING",n)}))),an=r((function(n,e){return{$:6,d:n,b:e}}));function cn(n,e){return{$:9,f:n,g:e}}var ln=r((function(n,e){return{$:10,b:e,h:n}})),un=r((function(n,e){return cn(n,[e])})),fn=t((function(n,e,r){return cn(n,[e,r])})),sn=o((function(n,e,r,t){return cn(n,[e,r,t])})),dn=r((function(n,e){try{return vn(n,JSON.parse(e))}catch(n){return Ir(u(zr,"This is not valid JSON! "+n.message,e))}})),bn=r((function(n,e){return vn(n,e)}));function vn(n,e){switch(n.$){case 2:return n.b(e);case 5:return null===e?Ar(n.c):hn("null",e);case 3:return pn(e)?mn(n.b,e,I):hn("a LIST",e);case 4:return pn(e)?mn(n.b,e,gn):hn("an ARRAY",e);case 6:var r=n.d;if("object"!=typeof e||null===e||!(r in e))return hn("an OBJECT with a field named `"+r+"`",e);var t=vn(n.b,e[r]);return xt(t)?t:Ir(u(_r,r,t.a));case 7:var o=n.e;return pn(e)?e.length>o?(t=vn(n.b,e[o]),xt(t)?t:Ir(u(Gr,o,t.a))):hn("a LONGER array. Need index "+o+" but only see "+e.length+" entries",e):hn("an ARRAY",e);case 8:if("object"!=typeof e||null===e||pn(e))return hn("an OBJECT",e);var a=D;for(var i in e)if(e.hasOwnProperty(i)){if(t=vn(n.b,e[i]),!xt(t))return Ir(u(_r,i,t.a));a=H(L(i,t.a),a)}return Ar(Zr(a));case 9:for(var c=n.f,l=n.g,f=0;l.length>f;f++){if(t=vn(l[f],e),!xt(t))return t;c=c(t.a)}return Ar(c);case 10:return t=vn(n.b,e),xt(t)?vn(n.h(t.a),e):t;case 11:for(var s=D,d=n.g;d.b;d=d.b){if(t=vn(d.a,e),xt(t))return t;s=H(t.a,s)}return Ir(Rr(Zr(s)));case 1:return Ir(u(zr,n.a,e));case 0:return Ar(n.a)}}function mn(n,e,r){for(var t=e.length,o=Array(t),a=0;t>a;a++){var i=vn(n,e[a]);if(!xt(i))return Ir(u(Gr,a,i.a));o[a]=i.a}return Ar(r(o))}function pn(n){return Array.isArray(n)||"undefined"!=typeof FileList&&n instanceof FileList}function gn(n){return u(ht,n.length,(function(e){return n[e]}))}function hn(n,e){return Ir(u(zr,"Expecting "+n,e))}function xn(n,e){if(n===e)return!0;if(n.$!==e.$)return!1;switch(n.$){case 0:case 1:return n.a===e.a;case 2:return n.b===e.b;case 5:return n.c===e.c;case 3:case 4:case 8:return xn(n.b,e.b);case 6:return n.d===e.d&&xn(n.b,e.b);case 7:return n.e===e.e&&xn(n.b,e.b);case 9:return n.f===e.f&&Pn(n.g,e.g);case 10:return n.h===e.h&&xn(n.b,e.b);case 11:return Pn(n.g,e.g)}}function Pn(n,e){var r=n.length;if(r!==e.length)return!1;for(var t=0;r>t;t++)if(!xn(n[t],e[t]))return!1;return!0}var Cn=r((function(n,e){return JSON.stringify(e,null,n)+""}));function Mn(n){return n}var Tn=t((function(n,e,r){return r[n]=e,r}));function yn(n){return{$:0,a:n}}function Ln(n){return{$:2,b:n,c:null}}var wn=r((function(n,e){return{$:3,b:n,d:e}})),Sn=0;function Nn(n){var e={$:0,e:Sn++,f:n,g:null,h:[]};return _n(e),e}function Dn(n){return Ln((function(e){e(yn(Nn(n)))}))}function Hn(n,e){n.h.push(e),_n(n)}var $n=r((function(n,e){return Ln((function(r){Hn(n,e),r(yn(0))}))})),In=!1,zn=[];function _n(n){if(zn.push(n),!In){for(In=!0;n=zn.shift();)Gn(n);In=!1}}function Gn(n){for(;n.f;){var e=n.f.$;if(0===e||1===e){for(;n.g&&n.g.$!==e;)n.g=n.g.i;if(!n.g)return;n.f=n.g.b(n.f.a),n.g=n.g.i}else{if(2===e)return void(n.f.c=n.f.b((function(e){n.f=e,_n(n)})));if(5===e){if(0===n.h.length)return;n.f=n.f.b(n.h.shift())}else n.g={$:3===e?0:1,b:n.f.b,i:n.g},n.f=n.f.d}}}var An={};function Rn(n,e,r,t,o){return{b:n,c:e,d:r,e:t,f:o}}function kn(n,e){var r={g:e,h:void 0},t=n.c,o=n.d,a=n.e,i=n.f;return r.h=Nn(u(wn,(function n(e){return u(wn,n,{$:5,b:function(n){var c=n.a;return 0===n.$?f(o,r,c,e):a&&i?s(t,r,c.i,c.j,e):f(t,r,a?c.i:c.j,e)}})}),n.b))}var Vn=r((function(n,e){return Ln((function(r){n.g(e),r(yn(0))}))})),Bn=r((function(n,e){return u($n,n.h,{$:0,a:e})}));function Fn(n){return function(e){return{$:1,k:n,l:e}}}function En(n){return{$:2,m:n}}var jn=r((function(n,e){return{$:3,n:n,o:e}})),Un=[],Yn=!1;function Wn(n,e,r){if(Un.push({p:n,q:e,r:r}),!Yn){Yn=!0;for(var t;t=Un.shift();)On(t.p,t.q,t.r);Yn=!1}}function On(n,e,r){var t={};for(var o in qn(!0,e,t,null),qn(!1,r,t,null),n)Hn(n[o],{$:"fx",a:t[o]||{i:D,j:D}})}function qn(n,e,r,t){switch(e.$){case 1:var o=e.k,a=function(n,e,r,t){return u(n?An[e].e:An[e].f,(function(n){for(var e=r;e;e=e.t)n=e.s(n);return n}),t)}(n,o,t,e.l);return void(r[o]=function(n,e,r){return r=r||{i:D,j:D},n?r.i=H(e,r.i):r.j=H(e,r.j),r}(n,a,r[o]));case 2:for(var i=e.m;i.b;i=i.b)qn(n,i.a,r,t);return;case 3:return void qn(n,e.o,r,{s:e.n,t:t})}}function Xn(n,e){return function(n){An[n]&&P(3)}(n),An[n]={f:Jn,u:e,a:Zn},Fn(n)}var Jn=r((function(n,e){return function(r){return n(e(r))}}));function Zn(n,e){var r=D,o=An[n].u,a=yn(null);return An[n].b=a,An[n].c=t((function(n,e){return r=e,a})),{send:function(n){var t=u(bn,o,n);xt(t)||P(4);for(var a=t.a,i=r;i.b;i=i.b)e(i.a(a))}}}var Kn="undefined"!=typeof document?document:{};function Qn(n,e){n.appendChild(e)}function ne(n){return{$:0,a:n}}var ee,re=r((function(n,e){return r((function(r,t){for(var o=[],a=0;t.b;t=t.b){var i=t.a;a+=i.b||0,o.push(i)}return a+=o.length,{$:1,c:e,d:ue(r),e:o,f:n,b:a}}))}))(void 0),te=r((function(n,e){return r((function(r,t){for(var o=[],a=0;t.b;t=t.b){var i=t.a;a+=i.b.b||0,o.push(i)}return a+=o.length,{$:2,c:e,d:ue(r),e:o,f:n,b:a}}))}))(void 0),oe=r((function(n,e){return{$:4,j:n,k:e,b:1+(e.b||0)}})),ae=r((function(n,e){return{$:"a0",n:n,o:e}})),ie=r((function(n,e){return{$:"a1",n:n,o:e}})),ce=r((function(n,e){return{$:"a2",n:n,o:e}})),le=r((function(n,e){return{$:"a3",n:n,o:e}}));function ue(n){for(var e={};n.b;n=n.b){var r=n.a,t=r.$,o=r.n,a=r.o;if("a2"!==t){var i=e[t]||(e[t]={});"a3"===t&&"class"===o?fe(i,o,a):i[o]=a}else"className"===o?fe(e,o,a):e[o]=a}return e}function fe(n,e,r){var t=n[e];n[e]=t?t+" "+r:r}function se(n,e){var r=n.$;if(5===r)return se(n.k||(n.k=n.m()),e);if(0===r)return Kn.createTextNode(n.a);if(4===r){for(var t=n.k,o=n.j;4===t.$;)"object"!=typeof o?o=[o,t.j]:o.push(t.j),t=t.k;var a={j:o,p:e};return(i=se(t,a)).elm_event_node_ref=a,i}if(3===r)return de(i=n.h(n.g),e,n.d),i;var i=n.f?Kn.createElementNS(n.f,n.c):Kn.createElement(n.c);de(i,e,n.d);for(var c=n.e,l=0;c.length>l;l++)Qn(i,se(1===r?c[l]:c[l].b,e));return i}function de(n,e,r){for(var t in r){var o=r[t];"a1"===t?be(n,o):"a0"===t?pe(n,e,o):"a3"===t?ve(n,o):"a4"===t?me(n,o):("value"!==t&&"checked"!==t||n[t]!==o)&&(n[t]=o)}}function be(n,e){var r=n.style;for(var t in e)r[t]=e[t]}function ve(n,e){for(var r in e){var t=e[r];void 0!==t?n.setAttribute(r,t):n.removeAttribute(r)}}function me(n,e){for(var r in e){var t=e[r],o=t.f,a=t.o;void 0!==a?n.setAttributeNS(o,r,a):n.removeAttributeNS(o,r)}}function pe(n,e,r){var t=n.elmFs||(n.elmFs={});for(var o in r){var a=r[o],i=t[o];if(a){if(i){if(i.q.$===a.$){i.q=a;continue}n.removeEventListener(o,i)}i=ge(e,a),n.addEventListener(o,i,ee&&{passive:2>Nt(a)}),t[o]=i}else n.removeEventListener(o,i),t[o]=void 0}}try{window.addEventListener("t",null,Object.defineProperty({},"passive",{get:function(){ee=!0}}))}catch(n){}function ge(n,e){function r(e){var t=r.q,o=vn(t.a,e);if(xt(o)){for(var a,i=Nt(t),c=o.a,l=i?3>i?c.a:c.au:c,u=1==i?c.b:3==i&&c.c5,f=(u&&e.stopPropagation(),(2==i?c.b:3==i&&c.cV)&&e.preventDefault(),n);a=f.j;){if("function"==typeof a)l=a(l);else for(var s=a.length;s--;)l=a[s](l);f=f.p}f(l,u)}}return r.q=e,r}function he(n,e){return n.$==e.$&&xn(n.a,e.a)}function xe(n,e,r,t){var o={$:e,r:r,s:t,t:void 0,u:void 0};return n.push(o),o}function Pe(n,e,r,t){if(n!==e){var o=n.$,a=e.$;if(o!==a){if(1!==o||2!==a)return void xe(r,0,t,e);e=function(n){for(var e=n.e,r=e.length,t=Array(r),o=0;r>o;o++)t[o]=e[o].b;return{$:1,c:n.c,d:n.d,e:t,f:n.f,b:n.b}}(e),a=1}switch(a){case 5:for(var i=n.l,c=e.l,l=i.length,u=l===c.length;u&&l--;)u=i[l]===c[l];if(u)return void(e.k=n.k);e.k=e.m();var f=[];return Pe(n.k,e.k,f,0),void(f.length>0&&xe(r,1,t,f));case 4:for(var s=n.j,d=e.j,b=!1,v=n.k;4===v.$;)b=!0,"object"!=typeof s?s=[s,v.j]:s.push(v.j),v=v.k;for(var m=e.k;4===m.$;)b=!0,"object"!=typeof d?d=[d,m.j]:d.push(m.j),m=m.k;return b&&s.length!==d.length?void xe(r,0,t,e):((b?function(n,e){for(var r=0;n.length>r;r++)if(n[r]!==e[r])return!1;return!0}(s,d):s===d)||xe(r,2,t,d),void Pe(v,m,r,t+1));case 0:return void(n.a!==e.a&&xe(r,3,t,e.a));case 1:return void Ce(n,e,r,t,Te);case 2:return void Ce(n,e,r,t,ye);case 3:if(n.h!==e.h)return void xe(r,0,t,e);var p=Me(n.d,e.d);p&&xe(r,4,t,p);var g=e.i(n.g,e.g);return void(g&&xe(r,5,t,g))}}}function Ce(n,e,r,t,o){if(n.c===e.c&&n.f===e.f){var a=Me(n.d,e.d);a&&xe(r,4,t,a),o(n,e,r,t)}else xe(r,0,t,e)}function Me(n,e,r){var t;for(var o in n)if("a1"!==o&&"a0"!==o&&"a3"!==o&&"a4"!==o)if(o in e){var a=n[o],i=e[o];a===i&&"value"!==o&&"checked"!==o||"a0"===r&&he(a,i)||((t=t||{})[o]=i)}else(t=t||{})[o]=r?"a1"===r?"":"a0"===r||"a3"===r?void 0:{f:n[o].f,o:void 0}:"string"==typeof n[o]?"":null;else{var c=Me(n[o],e[o]||{},o);c&&((t=t||{})[o]=c)}for(var l in e)l in n||((t=t||{})[l]=e[l]);return t}function Te(n,e,r,t){var o=n.e,a=e.e,i=o.length,c=a.length;i>c?xe(r,6,t,{v:c,i:i-c}):c>i&&xe(r,7,t,{v:i,e:a});for(var l=c>i?i:c,u=0;l>u;u++){var f=o[u];Pe(f,a[u],r,++t),t+=f.b||0}}function ye(n,e,r,t){for(var o=[],a={},i=[],c=n.e,l=e.e,u=c.length,f=l.length,s=0,d=0,b=t;u>s&&f>d;){var v=(w=c[s]).a,m=(S=l[d]).a,p=w.b,g=S.b,h=void 0,x=void 0;if(v!==m){var P=c[s+1],C=l[d+1];if(P){var M=P.a,T=P.b;x=m===M}if(C){var y=C.a,L=C.b;h=v===y}if(h&&x)Pe(p,L,o,++b),we(a,o,v,g,d,i),b+=p.b||0,Se(a,o,v,T,++b),b+=T.b||0,s+=2,d+=2;else if(h)b++,we(a,o,m,g,d,i),Pe(p,L,o,b),b+=p.b||0,s+=1,d+=2;else if(x)Se(a,o,v,p,++b),b+=p.b||0,Pe(T,g,o,++b),b+=T.b||0,s+=2,d+=1;else{if(!P||M!==y)break;Se(a,o,v,p,++b),we(a,o,m,g,d,i),b+=p.b||0,Pe(T,L,o,++b),b+=T.b||0,s+=2,d+=2}}else Pe(p,g,o,++b),b+=p.b||0,s++,d++}for(;u>s;){var w;b++,Se(a,o,(w=c[s]).a,p=w.b,b),b+=p.b||0,s++}for(;f>d;){var S,N=N||[];we(a,o,(S=l[d]).a,S.b,void 0,N),d++}(o.length>0||i.length>0||N)&&xe(r,8,t,{w:o,x:i,y:N})}var Le="_elmW6BL";function we(n,e,r,t,o,a){var i=n[r];if(!i)return a.push({r:o,A:i={c:0,z:t,r:o,s:void 0}}),void(n[r]=i);if(1===i.c){a.push({r:o,A:i}),i.c=2;var c=[];return Pe(i.z,t,c,i.r),i.r=o,void(i.s.s={w:c,A:i})}we(n,e,r+Le,t,o,a)}function Se(n,e,r,t,o){var a=n[r];if(a){if(0===a.c){a.c=2;var i=[];return Pe(t,a.z,i,o),void xe(e,9,o,{w:i,A:a})}Se(n,e,r+Le,t,o)}else{var c=xe(e,9,o,void 0);n[r]={c:1,z:t,r:o,s:c}}}function Ne(n,e,r,t){De(n,e,r,0,0,e.b,t)}function De(n,e,r,t,o,a,i){for(var c=r[t],l=c.r;l===o;){var u=c.$;if(1===u)Ne(n,e.k,c.s,i);else if(8===u)c.t=n,c.u=i,(f=c.s.w).length>0&&De(n,e,f,0,o,a,i);else if(9===u){c.t=n,c.u=i;var f,s=c.s;s&&(s.A.s=n,(f=s.w).length>0&&De(n,e,f,0,o,a,i))}else c.t=n,c.u=i;if(!(c=r[++t])||(l=c.r)>a)return t}var d=e.$;if(4===d){for(var b=e.k;4===b.$;)b=b.k;return De(n,b,r,t,o+1,a,n.elm_event_node_ref)}for(var v=e.e,m=n.childNodes,p=0;v.length>p;p++){o++;var g=1===d?v[p]:v[p].b,h=o+(g.b||0);if(!(o>l||l>h||(c=r[t=De(m[p],g,r,t,o,h,i)])&&(l=c.r)<=a))return t;o=h}return t}function He(n,e){for(var r=0;e.length>r;r++){var t=e[r],o=t.t,a=$e(o,t);o===n&&(n=a)}return n}function $e(n,e){switch(e.$){case 0:return function(n,e,r){var t=n.parentNode,o=se(e,r);return o.elm_event_node_ref||(o.elm_event_node_ref=n.elm_event_node_ref),t&&o!==n&&t.replaceChild(o,n),o}(n,e.s,e.u);case 4:return de(n,e.u,e.s),n;case 3:return n.replaceData(0,n.length,e.s),n;case 1:return He(n,e.s);case 2:return n.elm_event_node_ref?n.elm_event_node_ref.j=e.s:n.elm_event_node_ref={j:e.s,p:e.u},n;case 6:for(var r=e.s,t=0;r.i>t;t++)n.removeChild(n.childNodes[r.v]);return n;case 7:for(var o=(r=e.s).e,a=n.childNodes[t=r.v];o.length>t;t++)n.insertBefore(se(o[t],e.u),a);return n;case 9:if(!(r=e.s))return n.parentNode.removeChild(n),n;var i=r.A;return void 0!==i.r&&n.parentNode.removeChild(n),i.s=He(n,r.w),n;case 8:return function(n,e){var r=e.s,t=function(n,e){if(n){for(var r=Kn.createDocumentFragment(),t=0;n.length>t;t++){var o=n[t].A;Qn(r,2===o.c?o.s:se(o.z,e.u))}return r}}(r.y,e);n=He(n,r.w);for(var o=r.x,a=0;o.length>a;a++){var i=o[a],c=i.A,l=2===c.c?c.s:se(c.z,e.u);n.insertBefore(l,n.childNodes[i.r])}return t&&Qn(n,t),n}(n,e);case 5:return e.s(n);default:P(10)}}function Ie(n){if(3===n.nodeType)return ne(n.textContent);if(1!==n.nodeType)return ne("");for(var e=D,r=n.attributes,t=r.length;t--;){var o=r[t];e=H(u(le,o.name,o.value),e)}var a=n.tagName.toLowerCase(),i=D,c=n.childNodes;for(t=c.length;t--;)i=H(Ie(c[t]),i);return f(re,a,e,i)}var ze=o((function(n,e,r,t){return function(n,e,r,t,o,a){var i=u(bn,n,e?e.flags:void 0);xt(i)||P(2);var c={},l=r(i.a),f=l.a,s=a(b,f),d=function(n,e){var r;for(var t in An){var o=An[t];o.a&&((r=r||{})[t]=o.a(t,e)),n[t]=kn(o,e)}return r}(c,b);function b(n,e){var r=u(t,n,f);s(f=r.a,e),Wn(c,r.b,o(f))}return Wn(c,l.b,o(f)),d?{ports:d}:{}}(e,t,n.e5,n.fD,n.fw,(function(e,r){var o=n.fF,a=t.node,i=Ie(a);return function(n,e){e(n);var r=0;function t(){r=1===r?0:(Ge(t),e(n),1)}return function(o,a){n=o,a?(e(n),2===r&&(r=1)):(0===r&&Ge(t),r=2)}}(r,(function(n){var r=o(n),t=function(n,e){var r=[];return Pe(n,e,r,0),r}(i,r);a=function(n,e,r,t){return 0===r.length?n:(Ne(n,e,r,t),He(n,r))}(a,i,t,e),i=r}))}))})),_e="undefined"!=typeof cancelAnimationFrame?cancelAnimationFrame:function(n){clearTimeout(n)},Ge="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:function(n){return setTimeout(n,1e3/60)},Ae={addEventListener:function(){},removeEventListener:function(){}},Re="undefined"!=typeof document?document:Ae,ke="undefined"!=typeof window?window:Ae,Ve=t((function(n,e,r){return Dn(Ln((function(){function t(n){Nn(r(n))}return n.addEventListener(e,t,ee&&{passive:!0}),function(){n.removeEventListener(e,t)}})))})),Be=r((function(n,e){var r=vn(n,e);return xt(r)?kr(r.a):Vr})),Fe=r((function(n,e){var r="g";n.fe&&(r+="m"),n.eI&&(r+="i");try{return kr(RegExp(e,r))}catch(n){return Vr}})),Ee=t((function(n,e,r){for(var t,o=[],a=0,i=r,c=e.lastIndex,l=-1;a++<n&&(t=e.exec(i))&&l!=e.lastIndex;){for(var u=t.length-1,f=Array(u);u>0;){var d=t[u];f[--u]=d?kr(d):Vr}o.push(s(Hi,t[0],t.index,a,I(f))),l=e.lastIndex}return e.lastIndex=c,I(o)})),je=0;function Ue(n,e){for(;e.b;e=e.b)n(e.a)}function Ye(n){for(var e=0;n.b;n=n.b)e++;return e}var We="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:function(n){setTimeout(n,1e3/60)},Oe=a((function(n,e,r,t,o){return{$:0,a:n,b:e,c:r,d:t,e:o}})),qe=r((function(n,e){var r=n.blend;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.BLEND),r.enabled=!0),r.a===e.a&&r.d===e.d||(n.gl.blendEquationSeparate(e.a,e.d),r.a=e.a,r.d=e.d),r.b===e.b&&r.c===e.c&&r.e===e.e&&r.f===e.f||(n.gl.blendFuncSeparate(e.b,e.c,e.e,e.f),r.b=e.b,r.c=e.c,r.e=e.e,r.f=e.f),r.g===e.g&&r.h===e.h&&r.i===e.i&&r.j===e.j||(n.gl.blendColor(e.g,e.h,e.i,e.j),r.g=e.g,r.h=e.h,r.i=e.i,r.j=e.j)})),Xe=r((function(n,e){var r=n.depthTest;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.DEPTH_TEST),r.enabled=!0),r.a!==e.a&&(n.gl.depthFunc(e.a),r.a=e.a),r.b!==e.b&&(n.gl.depthMask(e.b),r.b=e.b),r.c===e.c&&r.d===e.d||(n.gl.depthRange(e.c,e.d),r.c=e.c,r.d=e.d)})),Je=r((function(n,e){var r=n.stencilTest;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.STENCIL_TEST),r.enabled=!0),r.d===e.d&&r.a===e.a&&r.b===e.b||(n.gl.stencilFuncSeparate(n.gl.FRONT,e.d,e.a,e.b),r.d=e.d),r.e===e.e&&r.f===e.f&&r.g===e.g||(n.gl.stencilOpSeparate(n.gl.FRONT,e.e,e.f,e.g),r.e=e.e,r.f=e.f,r.g=e.g),r.c!==e.c&&(n.gl.stencilMask(e.c),r.c=e.c),r.h===e.h&&r.a===e.a&&r.b===e.b||(n.gl.stencilFuncSeparate(n.gl.BACK,e.h,e.a,e.b),r.h=e.h,r.a=e.a,r.b=e.b),r.i===e.i&&r.j===e.j&&r.k===e.k||(n.gl.stencilOpSeparate(n.gl.BACK,e.i,e.j,e.k),r.i=e.i,r.j=e.j,r.k=e.k)})),Ze=r((function(n,e){var r=n.scissor;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.SCISSOR_TEST),r.enabled=!0),r.a===e.a&&r.b===e.b&&r.c===e.c&&r.d===e.d||(n.gl.scissor(e.a,e.b,e.c,e.d),r.a=e.a,r.b=e.b,r.c=e.c,r.d=e.d)})),Ke=r((function(n,e){var r=n.colorMask;r.toggle=n.toggle,r.enabled=!0,r.a===e.a&&r.b===e.b&&r.c===e.c&&r.d===e.d||(n.gl.colorMask(e.a,e.b,e.c,e.d),r.a=e.a,r.b=e.b,r.c=e.c,r.d=e.d)})),Qe=r((function(n,e){var r=n.cullFace;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.CULL_FACE),r.enabled=!0),r.a!==e.a&&(n.gl.cullFace(e.a),r.a=e.a)})),nr=r((function(n,e){var r=n.polygonOffset;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.POLYGON_OFFSET_FILL),r.enabled=!0),r.a===e.a&&r.b===e.b||(n.gl.polygonOffset(e.a,e.b),r.a=e.a,r.b=e.b)})),er=r((function(n,e){var r=n.sampleCoverage;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.SAMPLE_COVERAGE),r.enabled=!0),r.a===e.a&&r.b===e.b||(n.gl.sampleCoverage(e.a,e.b),r.a=e.a,r.b=e.b)})),rr=function(n){n.scissor.enabled&&(n.gl.disable(n.gl.SCISSOR_TEST),n.scissor.enabled=!1)},tr=function(n){var e=n.colorMask;e.a&&e.b&&e.c&&e.d||(n.gl.colorMask(!0,!0,!0,!0),e.a=!0,e.b=!0,e.c=!0,e.d=!0)},or=["blend","depthTest","stencilTest","scissor","colorMask","cullFace","polygonOffset","sampleCoverage","sampleAlphaToCoverage"],ar=[function(n){n.blend.enabled&&(n.gl.disable(n.gl.BLEND),n.blend.enabled=!1)},function(n){n.depthTest.enabled&&(n.gl.disable(n.gl.DEPTH_TEST),n.depthTest.enabled=!1)},function(n){n.stencilTest.enabled&&(n.gl.disable(n.gl.STENCIL_TEST),n.stencilTest.enabled=!1)},rr,tr,function(n){n.gl.disable(n.gl.CULL_FACE)},function(n){n.gl.disable(n.gl.POLYGON_OFFSET_FILL)},function(n){n.gl.disable(n.gl.SAMPLE_COVERAGE)},function(n){n.gl.disable(n.gl.SAMPLE_ALPHA_TO_COVERAGE)}];function ir(n,e,r){var t=n.createShader(r);return n.shaderSource(t,"#extension GL_OES_standard_derivatives : enable\n"+e),n.compileShader(t),t}function cr(n,e){switch(e){case n.FLOAT:return{size:1,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC2:return{size:2,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC3:return{size:3,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC4:return{size:4,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_MAT4:return{size:4,arraySize:4,type:Float32Array,baseType:n.FLOAT};case n.INT:return{size:1,arraySize:1,type:Int32Array,baseType:n.INT}}}function lr(n,e,r,t){for(var o=r.a.ds,a=[],i=0;o>i;i++)a.push(String.fromCharCode(97+i));var c=cr(n,e.type);if(void 0===c)throw Error("No info available for: "+e.type);var l=0,u=c.size*c.arraySize*o,f=new c.type(Ye(r.b)*u);Ue((function(n){!function(n,e,r,t,i){var c;if(1===o)for(c=0;e>c;c++)n[r++]=1===e?t[i]:t[i][c];else a.forEach((function(o){for(c=0;e>c;c++)n[r++]=1===e?t[o][i]:t[o][i][c]}))}(f,c.size*c.arraySize,l,n,t[e.name]||e.name),l+=u}),r.b);var s=n.createBuffer();return n.bindBuffer(n.ARRAY_BUFFER,s),n.bufferData(n.ARRAY_BUFFER,f,n.STATIC_DRAW),s}function ur(n,e){return n+"#"+e}var fr=r((function(n,e){var r=n.f,t=r.gl;return t?(t.viewport(0,0,t.drawingBufferWidth,t.drawingBufferHeight),r.depthTest.b||(t.depthMask(!0),r.depthTest.b=!0),r.stencilTest.c!==r.STENCIL_WRITEMASK&&(t.stencilMask(r.STENCIL_WRITEMASK),r.stencilTest.c=r.STENCIL_WRITEMASK),rr(r),tr(r),t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT|t.STENCIL_BUFFER_BIT),Ue((function(e){if(e.d.b.b){var o,a,i,c,l;if(e.b.id&&e.c.id&&(o=ur(e.b.id,e.c.id),a=r.programs[o]),!a){var u,f;e.b.id?u=r.shaders[e.b.id]:e.b.id=je++,u||(u=ir(t,e.b.src,t.VERTEX_SHADER),r.shaders[e.b.id]=u),e.c.id?f=r.shaders[e.c.id]:e.c.id=je++,f||(f=ir(t,e.c.src,t.FRAGMENT_SHADER),r.shaders[e.c.id]=f);var s=function(n,e,r){var t=n.createProgram();if(n.attachShader(t,e),n.attachShader(t,r),n.linkProgram(t),!n.getProgramParameter(t,n.LINK_STATUS))throw"Link failed: "+n.getProgramInfoLog(t)+"\nvs info-log: "+n.getShaderInfoLog(e)+"\nfs info-log: "+n.getShaderInfoLog(r);return t}(t,u,f);(a={glProgram:s,attributes:Object.assign({},e.b.attributes,e.c.attributes),currentUniforms:{},activeAttributes:[],activeAttributeLocations:[]}).uniformSetters=function(n,e,r,t){var o=r.glProgram,a=r.currentUniforms,i=0,c=e.f;function l(e,r){var t=r.name,o=n.getUniformLocation(e,t);switch(r.type){case n.INT:return function(e){a[t]!==e&&(n.uniform1i(o,e),a[t]=e)};case n.FLOAT:return function(e){a[t]!==e&&(n.uniform1f(o,e),a[t]=e)};case n.FLOAT_VEC2:return function(e){a[t]!==e&&(n.uniform2f(o,e[0],e[1]),a[t]=e)};case n.FLOAT_VEC3:return function(e){a[t]!==e&&(n.uniform3f(o,e[0],e[1],e[2]),a[t]=e)};case n.FLOAT_VEC4:return function(e){a[t]!==e&&(n.uniform4f(o,e[0],e[1],e[2],e[3]),a[t]=e)};case n.FLOAT_MAT4:return function(e){a[t]!==e&&(n.uniformMatrix4fv(o,!1,new Float32Array(e)),a[t]=e)};case n.SAMPLER_2D:var l=i++;return function(e){n.activeTexture(n.TEXTURE0+l);var r=c.textures.get(e);r||(r=e.eN(n),c.textures.set(e,r)),n.bindTexture(n.TEXTURE_2D,r),a[t]!==e&&(n.uniform1i(o,l),a[t]=e)};case n.BOOL:return function(e){a[t]!==e&&(n.uniform1i(o,e),a[t]=e)};default:return function(){}}}for(var u={},f=n.getProgramParameter(o,n.ACTIVE_UNIFORMS),s=0;f>s;s++){var d=n.getActiveUniform(o,s);u[t[d.name]||d.name]=l(o,d)}return u}(t,n,a,Object.assign({},e.b.uniforms,e.c.uniforms));var d=t.getProgramParameter(s,t.ACTIVE_ATTRIBUTES);for(i=0;d>i;i++){var b=t.getActiveAttrib(s,i),v=t.getAttribLocation(s,b.name);a.activeAttributes.push(b),a.activeAttributeLocations.push(v)}o=ur(e.b.id,e.c.id),r.programs[o]=a}r.lastProgId!==o&&(t.useProgram(a.glProgram),r.lastProgId=o),c=a.uniformSetters,Object.keys(l=e.e).forEach((function(n){var e=c[n];e&&e(l[n])}));var m=r.buffers.get(e.d);for(m||(m=function(n,e){if(e.a.dC>0){var r=n.createBuffer(),t=function(n,e){var r,t=new Uint32Array(Ye(n)*e),o=0;return Ue((function(n){if(1===e)t[o++]=n;else for(r=0;e>r;r++)t[o++]=n[String.fromCharCode(97+r)]}),n),t}(e.c,e.a.dC);return n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,r),n.bufferData(n.ELEMENT_ARRAY_BUFFER,t,n.STATIC_DRAW),{numIndices:t.length,indexBuffer:r,buffers:{}}}return{numIndices:e.a.ds*Ye(e.b),indexBuffer:null,buffers:{}}}(t,e.d),r.buffers.set(e.d,m)),i=0;a.activeAttributes.length>i;i++){v=a.activeAttributeLocations[i],void 0===m.buffers[(b=a.activeAttributes[i]).name]&&(m.buffers[b.name]=lr(t,b,e.d,a.attributes)),t.bindBuffer(t.ARRAY_BUFFER,m.buffers[b.name]);var p=cr(t,b.type);if(1===p.arraySize)t.enableVertexAttribArray(v),t.vertexAttribPointer(v,p.size,p.baseType,!1,0,0);else for(var g=4*p.size,h=g*p.arraySize,x=0;p.arraySize>x;x++)t.enableVertexAttribArray(v+x),t.vertexAttribPointer(v+x,p.size,p.baseType,!1,h,g*x)}for(r.toggle=!r.toggle,Ue(Qs(r),e.a),i=0;9>i;i++){var P=r[or[i]];P.toggle!==r.toggle&&P.enabled&&(ar[i](r),P.enabled=!1,P.toggle=r.toggle)}m.indexBuffer?(t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,m.indexBuffer),t.drawElements(e.d.a.d7,m.numIndices,t.UNSIGNED_INT,0)):t.drawArrays(e.d.a.d7,0,m.numIndices)}}),n.g),e):e})),sr=t((function(n,e,r){return function(n,e,r,t){return{$:3,d:ue(n),g:e,h:r,i:t}}(e,{g:r,f:{},h:n},hr,xr)})),dr=r((function(n,e){n.contextAttributes.alpha=!0,n.contextAttributes.premultipliedAlpha=e.a})),br=r((function(n,e){n.contextAttributes.depth=!0,n.sceneSettings.push((function(n){n.clearDepth(e.a)}))})),vr=r((function(n,e){n.contextAttributes.stencil=!0,n.sceneSettings.push((function(n){n.clearStencil(e.a)}))})),mr=r((function(n){n.contextAttributes.antialias=!0})),pr=r((function(n,e){n.sceneSettings.push((function(n){n.clearColor(e.a,e.b,e.c,e.d)}))})),gr=r((function(n){n.contextAttributes.preserveDrawingBuffer=!0}));function hr(n){var e={contextAttributes:{alpha:!1,depth:!1,stencil:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1},sceneSettings:[]};Ue((function(n){return u(Ks,e,n)}),n.h);var r=Kn.createElement("canvas"),t=r.getContext&&(r.getContext("webgl",e.contextAttributes)||r.getContext("experimental-webgl",e.contextAttributes));return t&&"undefined"!=typeof WeakMap?(e.sceneSettings.forEach((function(n){n(t)})),t.getExtension("OES_standard_derivatives"),t.getExtension("OES_element_index_uint"),n.f.gl=t,n.f.toggle=!1,n.f.blend={enabled:!1,toggle:!1},n.f.depthTest={enabled:!1,toggle:!1},n.f.stencilTest={enabled:!1,toggle:!1},n.f.scissor={enabled:!1,toggle:!1},n.f.colorMask={enabled:!1,toggle:!1},n.f.cullFace={enabled:!1,toggle:!1},n.f.polygonOffset={enabled:!1,toggle:!1},n.f.sampleCoverage={enabled:!1,toggle:!1},n.f.sampleAlphaToCoverage={enabled:!1,toggle:!1},n.f.shaders=[],n.f.programs={},n.f.lastProgId=null,n.f.buffers=new WeakMap,n.f.textures=new WeakMap,n.f.STENCIL_WRITEMASK=t.getParameter(t.STENCIL_WRITEMASK),We((function(){return u(fr,n,r)}))):(r=Kn.createElement("div")).innerHTML='<a href="https://get.webgl.org/">Enable WebGL</a> to see this content!',r}function xr(n,e){return e.f=n.f,fr(e)}var Pr=r((function(n,e){return new Float64Array([n,e])}));new Float64Array(3),new Float64Array(3),new Float64Array(3);var Cr=t((function(n,e,r){return new Float64Array([n,e,r])})),Mr=r((function(n,e){return new Float64Array([e[0]*n,e[1]*n,e[2]*n])})),Tr=o((function(n,e,r,t){return new Float64Array([n,e,r,t])}));new Float64Array(16),new Float64Array(16),new Float64Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);var yr=$,Lr=x,wr=t((function(n,e,t){var o=t.c,a=t.d,i=r((function(e,r){return f(Lr,e.$?n:i,r,e.a)}));return f(Lr,i,f(Lr,n,e,a),o)})),Sr=t((function(n,e,r){for(;;){if(-2===r.$)return e;var t=r.d,o=n,a=f(n,r.b,r.c,f(Sr,n,e,r.e));n=o,e=a,r=t}})),Nr=function(n){return f(Sr,t((function(n,e,r){return u(yr,L(n,e),r)})),D,n)},Dr=1,Hr=2,$r=0,Ir=function(n){return{$:1,a:n}},zr=r((function(n,e){return{$:3,a:n,b:e}})),_r=r((function(n,e){return{$:0,a:n,b:e}})),Gr=r((function(n,e){return{$:1,a:n,b:e}})),Ar=function(n){return{$:0,a:n}},Rr=function(n){return{$:2,a:n}},kr=function(n){return{$:0,a:n}},Vr={$:1},Br=Cn,Fr=Q,Er=r((function(n,e){return u(J,n,z(e))})),jr=r((function(n,e){return I(u(X,n,e))})),Ur=t((function(n,e,r){for(;;){if(!r.b)return e;var t=r.b,o=n,a=u(n,r.a,e);n=o,e=a,r=t}})),Yr=function(n){return f(Ur,r((function(n,e){return e+1})),0,n)},Wr=_,Or=t((function(n,e,r){for(;;){if(T(n,e)>=1)return r;var t=n,o=e-1,a=u(yr,e,r);n=t,e=o,r=a}})),qr=r((function(n,e){return f(Or,n,e,D)})),Xr=r((function(n,e){return f(Wr,n,u(qr,0,Yr(e)-1),e)})),Jr=function(n){var e=n.charCodeAt(0);return 55296>e||e>56319?e:1024*(e-55296)+n.charCodeAt(1)-56320+65536},Zr=function(n){return f(Ur,yr,D,n)},Kr=function(n){var e=n.charCodeAt(0);return isNaN(e)?Vr:kr(55296>e||e>56319?L(n[0],n.slice(1)):L(n[0]+n[1],n.slice(2)))},Qr=32,nt=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),et=[],rt=F,tt=r((function(n,e){return Y(e)/Y(n)})),ot=function(n){return n},at=rt(u(tt,2,Qr)),it=s(nt,0,at,et,et),ct=p,lt=function(n){return{$:1,a:n}},ut=E,ft=function(n){return n.length},st=r((function(n,e){return T(n,e)>0?n:e})),dt=G,bt=g,vt=r((function(n,e){for(;;){var r=u(bt,Qr,n),t=r.b,o=u(yr,{$:0,a:r.a},e);if(!t.b)return Zr(o);n=t,e=o}})),mt=r((function(n,e){for(;;){var r=rt(e/Qr);if(1===r)return u(bt,Qr,n).a;n=u(vt,n,D),e=r}})),pt=r((function(n,e){if(e.m){var r=e.m*Qr,t=ut(u(tt,Qr,r-1)),o=n?Zr(e.B):e.B,a=u(mt,o,e.m);return s(nt,ft(e.r)+r,u(st,5,t*at),a,e.r)}return s(nt,ft(e.r),at,et,e.r)})),gt=a((function(n,e,r,t,o){for(;;){if(0>e)return u(pt,!1,{B:t,m:r/Qr|0,r:o});var a=lt(f(ct,Qr,e,n));n=n,e-=Qr,r=r,t=u(yr,a,t),o=o}})),ht=r((function(n,e){if(n>0){var r=n%Qr;return d(gt,e,n-r-Qr,n,D,f(ct,r,n-r,e))}return it})),xt=function(n){return!n.$},Pt=ln,Ct=r((function(n,e){return{S:e,aG:"",X:n,as:""}})),Mt=Ct,Tt=an,yt=tn,Lt=un,wt=fn,St=function(n){return{$:0,a:n}},Nt=function(n){switch(n.$){case 0:return 0;case 1:return 1;case 2:return 2;default:return 3}},Dt=re("div"),Ht=function(n){return{$:1,a:n}},$t=function(n){return{$:7,a:n}},It=function(n){return{$:3,a:n}},zt=t((function(n,e,r){return e(n(r))})),_t=function(n){return n},Gt=function(n){return n.length},At=Z,Rt=r((function(n,e){return 1>n?e:f(At,n,Gt(e),e)})),kt=function(n){for(var e=0,r=n.charCodeAt(0),t=43==r||45==r?1:0,o=t;n.length>o;++o){var a=n.charCodeAt(o);if(48>a||a>57)return Vr;e=10*e+a-48}return o==t?Vr:kr(45==r?-e:e)},Vt=K,Bt=yn,Ft=Bt(0),Et=o((function(n,e,r,t){if(t.b){var o=t.a,a=t.b;if(a.b){var i=a.a,c=a.b;if(c.b){var l=c.a,d=c.b;if(d.b){var b=d.b;return u(n,o,u(n,i,u(n,l,u(n,d.a,r>500?f(Ur,n,e,Zr(b)):s(Et,n,e,r+1,b)))))}return u(n,o,u(n,i,u(n,l,e)))}return u(n,o,u(n,i,e))}return u(n,o,e)}return e})),jt=t((function(n,e,r){return s(Et,n,e,0,r)})),Ut=r((function(n,e){return f(jt,r((function(e,r){return u(yr,n(e),r)})),D,e)})),Yt=wn,Wt=r((function(n,e){return u(Yt,(function(e){return Bt(n(e))}),e)})),Ot=t((function(n,e,r){return u(Yt,(function(e){return u(Yt,(function(r){return Bt(u(n,e,r))}),r)}),e)})),qt=function(n){return f(jt,Ot(yr),Bt(D),n)},Xt=Vn,Jt=r((function(n,e){var r=e;return Dn(u(Yt,Xt(n),r))}));An.Task=Rn(Ft,t((function(n,e){return u(Wt,(function(){return 0}),qt(u(Ut,Jt(n),e)))})),t((function(){return Bt(0)})),r((function(n,e){return u(Wt,n,e)})));var Zt=Fn("Task"),Kt=r((function(n,e){return Zt(u(Wt,n,e))})),Qt=ze,no=r((function(n,e){return{$:0,a:n,b:e}})),eo=function(n){return{$:6,a:n}},ro=r((function(n,e){return{$:4,a:n,b:e}})),to=r((function(n,e){return{$:2,a:n,b:e}})),oo=En,ao=jn,io=function(n){return{$:1,a:n}},co=t((function(n,e,r){return{cI:r,el:e,eq:n}})),lo=Bt(f(co,D,Vr,0)),uo=function(n){return Ln((function(e){var r=n.f;2===r.$&&r.c&&r.c(),n.f=null,e(yn(0))}))},fo=Ln((function(n){n(yn(Date.now()))})),so=Ln((function(n){var e=Ge((function(){n(yn(Date.now()))}));return function(){_e(e)}})),bo=Bn,vo=Dn,mo=t((function(n,e,r){var t=r.el,o=r.cI,a=L(t,e);return 1===a.a.$?a.b.b?u(Yt,(function(n){return u(Yt,(function(r){return Bt(f(co,e,kr(n),r))}),fo)}),vo(u(Yt,bo(n),so))):lo:a.b.b?Bt(f(co,e,t,o)):u(Yt,(function(){return lo}),uo(a.a.a))})),po=_t,go=t((function(n,e,r){var t=r.eq,o=r.cI,a=function(r){return u(Xt,n,(0,r.a)(r.$?e-o:po(e)))};return u(Yt,(function(n){return u(Yt,(function(){return Bt(f(co,t,kr(n),e))}),qt(u(Ut,a,t)))}),vo(u(Yt,bo(n),so)))})),ho=t((function(n,e,r){return n(e(r))}));An["Browser.AnimationManager"]=Rn(lo,mo,go,0,r((function(n,e){return e.$?io(u(ho,n,e.a)):{$:0,a:u(ho,n,e.a)}})));var xo=Fn("Browser.AnimationManager"),Po=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),Co=r((function(n,e){return{ec:e,eq:n}})),Mo={$:-2},To=Mo,yo=Bt(u(Co,D,To)),Lo=function(n){return L(N(n.a?"w_":"d_",n.b),n)},wo=a((function(n,e,r,t,o){return{$:-1,a:n,b:e,c:r,d:t,e:o}})),So=a((function(n,e,r,t,o){if(-1!==o.$||o.a){if(-1!==t.$||t.a||-1!==t.d.$||t.d.a)return d(wo,n,e,r,t,o);var a=t.d;return i=t.e,d(wo,0,t.b,t.c,d(wo,1,a.b,a.c,a.d,a.e),d(wo,1,e,r,i,o))}var i,c=o.b,l=o.c,u=o.d,f=o.e;return-1!==t.$||t.a?d(wo,n,c,l,d(wo,0,e,r,t,u),f):d(wo,0,e,r,d(wo,1,t.b,t.c,t.d,i=t.e),d(wo,1,c,l,u,f))})),No=y,Do=t((function(n,e,r){if(-2===r.$)return d(wo,0,n,e,Mo,Mo);var t=r.a,o=r.b,a=r.c,i=r.d,c=r.e;switch(u(No,n,o)){case 0:return d(So,t,o,a,f(Do,n,e,i),c);case 1:return d(wo,t,o,e,i,c);default:return d(So,t,o,a,i,f(Do,n,e,c))}})),Ho=t((function(n,e,r){var t=f(Do,n,e,r);return-1!==t.$||t.a?t:d(wo,1,t.b,t.c,t.d,t.e)})),$o=function(n){return f(Ur,r((function(n,e){return f(Ho,n.a,n.b,e)})),To,n)},Io=t((function(n,e,r){for(;;){if(-2===r.$)return e;var t=r.e,o=n,a=f(n,r.b,r.c,f(Io,n,e,r.d));n=o,e=a,r=t}})),zo=i((function(n,e,o,a,i,c){var l=f(Io,t((function(r,t,a){n:for(;;){var i=a.a,c=a.b;if(i.b){var l=i.a,u=l.a,d=l.b,b=i.b;if(0>T(u,r)){r=r,t=t,a=L(b,f(n,u,d,c));continue n}return T(u,r)>0?L(i,f(o,r,t,c)):L(b,s(e,u,d,t,c))}return L(i,f(o,r,t,c))}})),L(Nr(a),c),i),u=l.a,d=l.b;return f(Ur,r((function(e,r){return f(n,e.a,e.b,r)})),d,u)})),_o=r((function(n,e){return{dx:e,dE:n}})),Go=t((function(n,e,r){return u(Wt,(function(n){return L(e,n)}),f(Ve,r.a?ke:Re,r.b,(function(r){return u(bo,n,u(_o,e,r))})))})),Ao=r((function(n,e){return f(Io,Ho,e,n)})),Ro=t((function(n,e,r){var a=t((function(e,r,t){var o=t.c;return w(t.a,t.b,u(yr,f(Go,n,e,r),o))})),i=t((function(n,e,r){var t=r.b,o=r.c;return w(u(yr,e,r.a),t,o)})),c=o((function(n,e,r,t){var o=t.c;return w(t.a,f(Ho,n,e,t.b),o)})),l=u(Ut,Lo,e),s=b(zo,i,c,a,r.ec,$o(l),w(D,To,D)),d=s.b,v=s.c;return u(Yt,(function(n){return Bt(u(Co,l,u(Ao,d,$o(n))))}),u(Yt,(function(){return qt(v)}),qt(u(Ut,uo,s.a))))})),ko=t((function(n,e,r){var t=n(e);return t.$?r:u(yr,t.a,r)})),Vo=r((function(n,e){return f(jt,ko(n),D,e)}));An["Browser.Events"]=Rn(yo,Ro,t((function(n,e,r){var t=e.dE,o=e.dx,a=u(Vo,(function(n){var e=n.b.c;return C(n.a,t)?u(Be,e,o):Vr}),r.eq);return u(Yt,(function(){return Bt(r)}),qt(u(Ut,Xt(n),a)))})),0,r((function(n,e){return f(Po,e.a,e.b,u(Lt,n,e.c))})));var Bo,Fo,Eo,jo,Uo,Yo,Wo,Oo,qo,Xo,Jo,Zo,Ko,Qo,na,ea,ra,ta,oa,aa,ia,ca,la,ua,fa,sa,da,ba,va,ma,pa,ga,ha,xa,Pa,Ca,Ma,Ta,ya=Fn("Browser.Events"),La=t((function(n,e,r){return ya(f(Po,n,e,r))})),wa=u(La,0,"click"),Sa=u(La,0,"keydown"),Na=u(La,0,"keyup"),Da=u(La,0,"mousedown"),Ha=u(La,0,"mousemove"),$a=u(La,0,"mouseup"),Ia=en,za=rn,_a=r((function(n,e){return n(e?1:0)})),Ga=function(n){var e=void 0!==Kn.hidden?{e2:"hidden",eL:"visibilitychange"}:void 0!==Kn.mozHidden?{e2:"mozHidden",eL:"mozvisibilitychange"}:void 0!==Kn.msHidden?{e2:"msHidden",eL:"msvisibilitychange"}:void 0!==Kn.webkitHidden?{e2:"webkitHidden",eL:"webkitvisibilitychange"}:{e2:"hidden",eL:"visibilitychange"};return f(La,0,e.eL,u(Lt,_a(n),u(Tt,"target",u(Tt,e.e2,za))))},Aa=on,Ra=function(n){return{$:3,b:n}},ka=Xn("touchCancel",Ra(u(Pt,(function(n){return u(Pt,(function(e){return u(Pt,(function(r){return St({bm:r,cK:e,cL:n})}),u(Tt,"identifier",Ia))}),u(Tt,"pageX",yt))}),u(Tt,"pageY",yt)))),Va=Xn("touchEnd",Ra(u(Pt,(function(n){return u(Pt,(function(e){return u(Pt,(function(r){return St({bm:r,cK:e,cL:n})}),u(Tt,"identifier",Ia))}),u(Tt,"pageX",yt))}),u(Tt,"pageY",yt)))),Ba=Xn("touchMove",Ra(u(Pt,(function(n){return u(Pt,(function(e){return u(Pt,(function(r){return St({bm:r,cK:e,cL:n})}),u(Tt,"identifier",Ia))}),u(Tt,"pageX",yt))}),u(Tt,"pageY",yt)))),Fa=Xn("touchStart",Ra(u(Pt,(function(n){return u(Pt,(function(e){return u(Pt,(function(r){return St({bm:r,cK:e,cL:n})}),u(Tt,"identifier",Ia))}),u(Tt,"pageX",yt))}),u(Tt,"pageY",yt)))),Ea=oo(u(yr,(Ta=u(zt,dt(.001),(function(n){return{$:6,a:n}})),xo(io(Ta))),u(Ut,ao($t),I([(Bo=to,f(La,1,"resize",u(Tt,"target",f(wt,Bo,u(Tt,"innerWidth",Ia),u(Tt,"innerHeight",Ia))))),Na(u(Lt,no(!1),u(Tt,"key",Aa))),Sa(u(Lt,no(!0),u(Tt,"key",Aa))),Ga(It),wa(St({$:5})),Da(St(eo(!0))),$a(St(eo(!1))),Ha(f(wt,ro,u(Tt,"pageX",yt),u(Tt,"pageY",yt))),Fa((function(n){return{$:7,a:n}})),Ba((function(n){return{$:8,a:n}})),Va((function(n){return{$:9,a:n}})),ka((function(n){return{$:10,a:n}}))])))),ja={$:1},Ua=function(n){return{$:2,a:n}},Ya=r((function(n,e){return{$:0,a:n,b:e}})),Wa=function(n){return n.b.k.a},Oa=function(n){var e=n.b.E;return e.b?kr(u(Ya,n.a,{k:e.a,E:e.b,q:N(n.b.q,I([n.b.k]))})):Vr},qa=r((function(n,e){return S(e,{ch:n})})),Xa=r((function(n,e){return S(e,e.I.ch?{I:u(qa,!1,e.I),a5:e.a5+n}:{a5:e.a5+n})})),Ja=r((function(n,e){return e.$?n:e.a})),Za=t((function(n,e,r){var t=r.a,o=r.b;switch(t.$){case 1:return r;case 2:var a=t.a.c6;return(T(a+e,Wa(r).a5)>0?u(zt,Oa,Ja(u(Ya,ja,o))):_t)(u(Ya,Ua({c6:a+e}),o));default:var i=o.k,c=i.b,l=u(Xa,e,i.a);return u(Ya,t,{k:L(l,u(n,l,c)),E:D,q:N(o.q,I([o.k]))})}})),Ka=r((function(n,e){n:for(;;){if(n>0){if(e.b){n-=1,e=e.b;continue n}return e}return e}})),Qa=t((function(n,e,r){n:for(;;){if(n>0){if(e.b){var t=e.a;n-=1,e=e.b,r=u(yr,t,r);continue n}return r}return r}})),ni=r((function(n,e){return Zr(f(Qa,n,e,D))})),ei=t((function(n,e,r){if(e>0){var t=L(e,r);n:for(;;){e:for(;;){if(!t.b.b)return r;if(!t.b.b.b){if(1===t.a)break n;break e}switch(t.a){case 1:break n;case 2:var o=t.b;return I([o.a,o.b.a]);case 3:if(t.b.b.b.b){var a=t.b,i=a.b;return I([a.a,i.a,i.b.a])}break e;default:if(t.b.b.b.b&&t.b.b.b.b.b){var c=t.b,l=c.b,s=l.b,d=s.b,b=d.b;return u(yr,c.a,u(yr,l.a,u(yr,s.a,u(yr,d.a,n>1e3?u(ni,e-4,b):f(ei,n+1,e-4,b)))))}break e}}return r}return I([t.b.a])}return D})),ri=r((function(n,e){return f(ei,0,n,e)})),ti=r((function(n,e){var r=e.b.E,t=N(e.b.q,N(I([e.b.k]),r)),o=u(ri,n,t),a=u(Ka,n,t);if(a.b)return u(Ya,ja,{k:a.a,E:a.b,q:o});var i=Zr(o);return i.b?u(Ya,ja,{k:i.a,E:D,q:Zr(i.b)}):e})),oi={$:0},ai=r((function(n,e){switch(n.$){case 1:return function(n){var e=n.b.q,r=n.b.E;return e.b?u(Ya,ja,{k:e.a,E:N(e.b,N(I([n.b.k]),r)),q:D}):n}(e);case 2:return u(Ja,e,function(n){var e=n.b.k,r=n.b.E,t=Zr(n.b.q);if(t.b){var o=t.b;return kr(u(Ya,ja,{k:t.a,E:u(yr,e,r),q:Zr(o)}))}return Vr}(e));case 3:return u(Ya,ja,e.b);case 4:return function(n){return u(Ya,oi,n.b)}(e);case 5:return function(n){var e=n.b;return u(Ya,Ua({c6:Wa(n).a5}),e)}(e);case 6:return u(Ja,e,Oa(e));case 7:return function(n){var e=n.b.q,r=n.b.k,t=Zr(n.b.E);if(t.b){var o=t.b;return u(Ya,ja,{k:t.a,E:D,q:N(e,N(I([r]),Zr(o)))})}return n}(e);default:return u(ti,n.a,e)}})),ii=r((function(n,e){var r=e.b;return L(n(e.a),r)})),ci=o((function(n,e,r,t){return{ch:t,aT:r,bG:n,bH:e}})),li=To,ui={cc:!1,aT:!1,cn:!1,O:li,ai:!1,a2:!1,c2:!1,c3:!1,b9:!1},fi=r((function(n,e){return S(e,{aT:n})})),si=t((function(n,e,r){return S(r,{bG:n,bH:e})})),di=function(n){if(-1===n.$&&-1===n.d.$&&-1===n.e.$){if(-1!==n.e.d.$||n.e.d.a){var e=n.d,r=n.e;return i=r.b,c=r.c,t=r.d,f=r.e,d(wo,1,n.b,n.c,d(wo,0,e.b,e.c,e.d,e.e),d(wo,0,i,c,t,f))}var t,o=n.d,a=n.e,i=a.b,c=a.c,l=(t=a.d).d,u=t.e,f=a.e;return d(wo,0,t.b,t.c,d(wo,1,n.b,n.c,d(wo,0,o.b,o.c,o.d,o.e),l),d(wo,1,i,c,u,f))}return n},bi=function(n){if(-1===n.$&&-1===n.d.$&&-1===n.e.$){if(-1!==n.d.d.$||n.d.d.a){var e=n.d,r=n.e;return u=r.b,f=r.c,s=r.d,b=r.e,d(wo,1,t=n.b,o=n.c,d(wo,0,e.b,e.c,e.d,c=e.e),d(wo,0,u,f,s,b))}var t=n.b,o=n.c,a=n.d,i=a.d,c=a.e,l=n.e,u=l.b,f=l.c,s=l.d,b=l.e;return d(wo,0,a.b,a.c,d(wo,1,i.b,i.c,i.d,i.e),d(wo,1,t,o,c,d(wo,0,u,f,s,b)))}return n},vi=c((function(n,e,r,t,o,a,i){if(-1!==a.$||a.a){n:for(;;){if(-1===i.$&&1===i.a){if(-1===i.d.$){if(1===i.d.a)return bi(e);break n}return bi(e)}break n}return e}return d(wo,r,a.b,a.c,a.d,d(wo,0,t,o,a.e,i))})),mi=function(n){if(-1===n.$&&-1===n.d.$){var e=n.a,r=n.b,t=n.c,o=n.d,a=o.d,i=n.e;if(1===o.a){if(-1!==a.$||a.a){var c=di(n);if(-1===c.$){var l=c.e;return d(So,c.a,c.b,c.c,mi(c.d),l)}return Mo}return d(wo,e,r,t,mi(o),i)}return d(wo,e,r,t,mi(o),i)}return Mo},pi=r((function(n,e){if(-2===e.$)return Mo;var r=e.a,t=e.b,o=e.c,a=e.d,i=e.e;if(0>T(n,t)){if(-1===a.$&&1===a.a){var c=a.d;if(-1!==c.$||c.a){var l=di(e);if(-1===l.$){var f=l.e;return d(So,l.a,l.b,l.c,u(pi,n,l.d),f)}return Mo}return d(wo,r,t,o,u(pi,n,a),i)}return d(wo,r,t,o,u(pi,n,a),i)}return u(gi,n,v(vi,n,e,r,t,o,a,i))})),gi=r((function(n,e){if(-1===e.$){var r=e.a,t=e.b,o=e.c,a=e.d,i=e.e;if(C(n,t)){var c=function(n){for(;;){if(-1!==n.$||-1!==n.d.$)return n;n=n.d}}(i);return-1===c.$?d(So,r,c.b,c.c,a,mi(i)):Mo}return d(So,r,t,o,a,u(pi,n,i))}return Mo})),hi=r((function(n,e){var r=u(pi,n,e);return-1!==r.$||r.a?r:d(wo,1,r.b,r.c,r.d,r.e)})),xi=r((function(n,e){return{dm:-e/2,cp:e,ai:-n/2,a2:n/2,bB:e/2,dd:n}})),Pi=r((function(n,e){return{S:e,X:n}})),Ci=f(wt,r((function(n,e){return L(n,e)})),u(Tt,"A1",Aa),u(Tt,"A2",Aa)),Mi=sn,Ti=s(Mi,t((function(n,e,r){return w(n,e,r)})),u(Tt,"A1",yt),u(Tt,"A2",yt),u(Tt,"A3",yt)),yi=f(wt,r((function(n,e){return L(n,e)})),u(Tt,"A1",Aa),u(Tt,"A2",Ti)),Li=f(wt,Pi,u(Tt,"floats",Ra(yi)),u(Tt,"colors",Ra(Ci))),wi=dn,Si=u(Ct,D,D),Ni=r((function(n,e){return e.$?Vr:n(e.a)})),Di=r((function(n,e){return e.$?Ir(e.a):n(e.a)})),Hi=o((function(n,e,r,t){return{e4:e,fc:n,fi:r,fv:t}})),$i=Ee,Ii=r((function(n,e){return e.$?Ir(n):Ar(e.a)})),zi=Fe,_i=function(n){return n.b?kr(n.a):Vr},Gi=r((function(n,e){return e.$?Vr:kr(n(e.a))})),Ai=r((function(n,e){return e.$?Ir(e.a):Ar(n(e.a))})),Ri=r((function(n,e){return Jr(e)-Jr(n)})),ki=t((function(n,e,r){var t=Jr(r);return 1>T(Jr(n),t)&&1>T(t,Jr(e))})),Vi=r((function(n,e){var r=f(ki,"0","9",e)?Ar(u(Ri,"0",e)):f(ki,"a","z",e)?Ar(10+u(Ri,"a",e)):f(ki,"A","Z",e)?Ar(10+u(Ri,"A",e)):Ir({$:0,a:e});return u(Di,(function(r){return 0>T(r,n)?Ar(r):Ir({$:1,a:e})}),r)})),Bi=r((function(n,e){var r=Kr(e);if(1===r.$)return Ar(0);var t=r.a,o=t.b;return u(Di,(function(e){return u(Di,(function(r){return Ar(e+r*n)}),u(Bi,n,o))}),u(Vi,n,t.a))})),Fi=function(n){for(var e=n.length,r=Array(e),t=0;e>t;){var o=n.charCodeAt(t);55296>o||o>56319?(r[e-t]=n[t],t++):(r[e-t]=n[t+1],r[e-++t]=n[t-1],t++)}return r.join("")},Ei=r((function(n,e){return 2>n||n>36?Ir({$:2,a:n}):u(Bi,n,Fi(e))})),ji=Ei(16),Ui=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),Yi=t((function(n,e,r){return s(Ui,n,e,r,1)})),Wi=o((function(n,e,r,t){return s(Ui,n,e,r,t)})),Oi=A,qi=j,Xi=r((function(n,e){var r=u(Oi,10,n);return qi(e*r)/r})),Ji=q,Zi=function(n){return f(Ji,yr,D,n)},Ki=(Fo=function(n){var e=Zi(n);if(e.b&&!e.b.b){var r=e.a;return z(I([r,r])).join("")}return n},u(zt,(function(n){return n.toLowerCase()}),u(zt,(function(n){return u(Gi,(function(e){return f($i,1,e,n)}),u(zi,{eI:!1,fe:!1},"^#?(?:(?:([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2}))|(?:([a-f\\d])([a-f\\d])([a-f\\d]))|(?:([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2}))|(?:([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d])))$"))}),u(zt,Ni(_i),u(zt,Gi((function(n){return n.fv})),u(zt,Gi(Vo(_t)),u(zt,Ii("Parsing hex regex failed"),Di((function(n){var e=u(Ut,u(zt,Fo,u(zt,ji,Ai(ot))),n);n:for(;;){if(e.b&&!e.a.$&&e.b.b&&!e.b.a.$&&e.b.b.b&&!e.b.b.a.$){if(e.b.b.b.b){if(e.b.b.b.a.$||e.b.b.b.b.b)break n;var r=e.b,t=r.b;return Ar(s(Wi,e.a.a/255,r.a.a/255,t.a.a/255,u(Xi,2,t.b.a.a/255)))}var o=e.b;return Ar(f(Yi,e.a.a/255,o.a.a/255,o.b.a.a/255))}break n}return Ir("Parsing ints from hex failed")}))))))))),Qi=r((function(n,e){return L(e.a,n(e.b))})),nc=s(Ui,1,1,1,1),ec=r((function(n,e){return e.$?n:e.a})),rc=u(zt,wi(Li),u(zt,Ai((function(n){return{S:u(Ut,Qi(u(zt,Ki,ec(nc))),n.S),aG:"",X:n.X,as:""}})),ec(Si))),tc=function(n){return f(Ur,r((function(n,e){return f(Tn,n.a,n.b,e)})),{},n)},oc=Mn,ac=function(n){var e=n.b;return tc(I([L("A1",oc(n.a)),L("A2",oc(e))]))},ic=Mn,cc=function(n){var e=n.b,r=n.c;return tc(I([L("A1",ic(n.a)),L("A2",ic(e)),L("A3",ic(r))]))},lc=function(n){var e=n.b;return tc(I([L("A1",oc(n.a)),L("A2",cc(e))]))},uc=r((function(n,e){return f(Ur,function(n){return r((function(e,r){return r.push(n(e)),r}))}(n),[],e)})),fc=O,sc=function(n){return u(fc,n,"")},dc=t((function(n,e,r){return n>0?f(dc,n>>1,N(e,e),1&n?N(r,e):r):r})),bc=r((function(n,e){return f(dc,n,e,"")})),vc=t((function(n,e,r){return N(u(bc,n-Gt(r),sc(e)),r)})),mc=function(n){return 0>n||n>1114111?"�":n>65535?String.fromCharCode(Math.floor((n-=65536)/1024)+55296,n%1024+56320):String.fromCharCode(n)},pc=R,gc=function(n){var e=function(n){return 10>n?Fr(n):sc(mc(87+n))};return 16>n?e(n):N(gc(n/16|0),e(u(pc,16,n)))},hc=u(zt,gc,u(vc,2,"0")),xc=function(n){return{aR:n.d,cg:n.c,co:n.b,cX:n.a}},Pc=function(n){var e=xc(n),r=e.cX,t=e.co,o=e.cg;return u(Er,"",u(yr,"#",u(Ut,u(zt,qi,hc),I([255*r,255*t,255*o]))))},Cc=u(zt,(function(n){return{S:u(Ut,Qi(Pc),n.S),X:n.X}}),u(zt,(function(n){return tc(I([L("floats",u(uc,lc,n.X)),L("colors",u(uc,ac,n.S))]))}),Br(0))),Mc=function(n){return 0>n?-n:n},Tc=function(n){if(0===n.length||/[\sxbo]/.test(n))return Vr;var e=+n;return e==e?kr(e):Vr},yc=t((function(n,e,r){return u(Ja,NaN,Tc(u(n,e,r)))})),Lc=function(n){return!n},wc=r((function(n,e){for(;;){if(!e.b)return!1;var r=e.b;if(n(e.a))return!0;n=n,e=r}})),Sc=r((function(n,e){var r=u(wc,(function(n){return"0"!==n&&"."!==n}),Zi(e));return N(n&&r?"-":"",e)})),Nc=Q,Dc=function(n){var e=n.a,r=n.b;if("9"===e){var t=Kr(r);return 1===t.$?"01":u(fc,"0",Dc(t.a))}var o=Jr(e);return o>=48&&57>o?u(fc,mc(o+1),r):"0"},Hc=function(n){return n===1/0||n===-1/0},$c=W,Ic=t((function(n,e,r){return N(r,u(bc,n-Gt(r),sc(e)))})),zc=function(n){var e=u(jr,".",n);return e.b?L(e.a,e.b.b?e.b.a:"0"):L("0","0")},_c=t((function(n,e,r){if(Hc(r)||$c(r))return Nc(r);var t=0>r,o=zc(function(n){var e=u(jr,"e",Nc(Mc(n)));if(e.b){if(e.b.b){var r=e.a,t=e.b.a,o=u(Ja,0,kt(u(Vt,"+",t)?u(Rt,1,t):t)),a=zc(r),i=N(a.a,a.b),c=0>o?u(Ja,"0",u(Gi,(function(n){return n.a+"."+n.b}),u(Gi,ii(sc),Kr(N(u(bc,Mc(o),"0"),i))))):f(Ic,o+1,"0",i);return N(0>n?"-":"",c)}return N(0>n?"-":"",r=e.a)}return""}(Mc(r))),a=o.a,i=o.b,c=Gt(a)+e,l=N(u(bc,1-c,"0"),f(Ic,c,"0",N(a,i))),s=Gt(l),d=u(st,1,c),b=u(n,t,f(At,d,s,l)),v=f(At,0,d,l),m=b?Fi(u(Ja,"1",u(Gi,Dc,Kr(Fi(v))))):v,p=Gt(m),g="0"===m?m:e>0?0>T(e,Gt(i))?f(At,0,p-e,m)+"."+f(At,p-e,p,m):N(a+".",f(Ic,e,"0",i)):N(m,u(bc,Mc(e),"0"));return u(Sc,t,g)})),Gc=_c(r((function(n,e){var r,t=Kr(e);return 1!==t.$&&("5"===t.a.a?""!==t.a.b||!n:(r=Jr(t.a.a))>53&&n||r>=53&&!n)}))),Ac=yc(Gc),Rc=t((function(n,e,r){var t=u(tt,10,Mc(e-n));return u(Ac,0>t?3:1>t?2:2>t?1:0,r)})),kc=r((function(n,e){switch(n.$){case 2:var r=rc(e.as);return S(r,{aG:r.aG,as:r.as});case 3:return S(e,{as:n.a});case 4:return S(e,{aG:Cc(e)});case 0:var t=n.a,o=n.b;return S(e,{X:u(Ut,(function(n){var e=n.a,r=n.b,a=r.a,i=r.c;return C(e,t)?L(e,w(a,f(Rc,a,i,o),i)):n}),e.X)});default:return t=n.a,o=n.b,S(e,{S:u(Ut,(function(n){var e=n.a;return C(e,t)?L(e,o):n}),e.S)})}})),Vc=r((function(n,e){return f(Ho,n,0,e)})),Bc=r((function(n,e){return u(hi,n,e)})),Fc=t((function(n,e,r){var t=u(n?Vc:Bc,e,r.O);switch(e){case" ":return S(r,{O:t,c3:n});case"Enter":return S(r,{cn:n,O:t});case"Shift":return S(r,{O:t,c2:n});case"Backspace":return S(r,{cc:n,O:t});case"ArrowUp":return S(r,{O:t,b9:n});case"ArrowDown":return S(r,{aT:n,O:t});case"ArrowLeft":return S(r,{O:t,ai:n});case"ArrowRight":return S(r,{O:t,a2:n});default:return S(r,{O:t})}})),Ec=r((function(n,e){switch(n.$){case 1:var r=n.a.fG;return S(e,{ad:u(xi,r.dd,r.cp)});case 2:return S(e,{ad:u(xi,n.a,n.b)});case 3:return S(e,{bn:ui,I:s(ci,e.I.bG,e.I.bH,!1,!1)});case 0:return S(e,{bn:f(Fc,n.a,n.b,e.bn)});case 4:return S(e,{I:f(si,e.ad.ai+n.a,e.ad.bB-n.b,e.I)});case 5:return S(e,{I:u(qa,!0,e.I)});case 6:return S(e,{I:u(fi,n.a,e.I)});case 7:case 8:return S(e,{ae:f(Ur,(function(n){return u(Ho,n.bm,{bG:e.ad.ai+n.cK,bH:e.ad.bB-n.cL})}),e.ae,n.a)});case 9:case 10:return S(e,{ae:f(Ur,(function(n){return hi(n.bm)}),e.ae,n.a)});default:return S(e,{aS:u(kc,n.a,e.aS)})}})),jc=r((function(n,e){var r=e.b;return u(Ya,e.a,S(r,{k:u(ii,Ec(n),r.k)}))})),Uc=t((function(n,e,r){var t=r.b,o=t.k;return u(Ya,r.a,S(t,{k:u(Qi,u(n,o.a,e),o)}))})),Yc=o((function(n,e,r,t){switch(r.$){case 0:return t;case 1:return S(t,{a9:r.a});case 2:return S(t,{bg:!1});case 3:return S(t,{bg:!0});case 4:return S(t,{R:f(Uc,e,r.a,t.R)});case 5:return S(t,{R:u(ai,r.a,t.R)});case 7:return S(t,{R:u(jc,r.a,t.R)});default:return S(t,{R:f(Za,n,r.a,t.R)})}})),Wc=(Ma=function(){return{en:(n=Re.body,e=Re.documentElement,{dd:Math.max(n.scrollWidth,n.offsetWidth,e.scrollWidth,e.offsetWidth,e.clientWidth),cp:Math.max(n.scrollHeight,n.offsetHeight,e.scrollHeight,e.offsetHeight,e.clientHeight)}),fG:{bG:ke.pageXOffset,bH:ke.pageYOffset,dd:Re.documentElement.clientWidth,cp:Re.documentElement.clientHeight}};var n,e},Ln((function(n){Ge((function(){n(yn(Ma()))}))}))),Oc=r((function(n,e){return{aS:e,cl:n.cl,bn:ui,I:s(ci,0,0,!1,!1),ad:u(xi,600,600),a5:0,ae:To}})),qc=r((function(n,e){return u(Ya,oi,{k:L(n,e(n)),E:D,q:D})})),Xc=En,Jc=Xc(D),Zc=function(n){return{$:11,a:n}},Kc=function(n){return{$:4,a:n}},Qc=function(n){return{$:5,a:n}},nl={$:2},el={$:0},rl=function(n){return{$:1,a:n}},tl={$:3},ol=r((function(n){return n})),al=re("button"),il=function(n){return n?"Level Editor":"Configurations"},cl=function(n){return u(Ja,0,_i(u(Vo,(function(e){return C(il(e),n)?kr(e):Vr}),I([0,1]))))},ll=oe,ul=ll,fl=ae,sl=r((function(n,e){return u(fl,n,{$:0,a:e})})),dl=r((function(n,e){return f(jt,Tt,e,n)})),bl=u(dl,I(["target","value"]),Aa),vl=function(n){return u(sl,"click",St(n))},ml=re("option"),pl=re("select"),gl=ie,hl=gl,xl=ne,Pl=xl,Cl=r((function(n,e){return u(ce,n,oc(e))})),Ml=Cl("value"),Tl=r((function(n,e){return{$:1,a:n,b:e}})),yl=r((function(n,e){return{$:0,a:n,b:e}})),Ll=s(Ui,0,0,0,1),wl=u(al,I([u(hl,"cursor","pointer"),vl({$:4})]),I([Pl("Export Configurations as json")])),Sl=re("h3"),Nl=re("p"),Dl=Mn,Hl=r((function(n,e){return u(ce,n,Dl(e))})),$l=Hl("readOnly"),Il=re("textarea"),zl=function(n){return u(Dt,D,I([u(Il,I([$l(!0)]),I([Pl(n.aG)]))]))},_l=function(n){return u(Dt,D,I([u(Sl,D,I([Pl("Export Configurations")])),u(Nl,D,I([wl])),u(Nl,D,I([zl(n)]))]))},Gl=Cl("htmlFor"),Al=re("hr"),Rl=Cl("id"),kl=u(al,I([u(hl,"cursor","pointer"),vl({$:2})]),I([Pl("Import Configurations")])),Vl=function(n){return{$:3,a:n}},Bl=function(n){return L(n,!0)},Fl=r((function(n,e){return u(fl,n,{$:1,a:e})})),El=function(n){return u(Fl,"input",u(Lt,Bl,u(Lt,n,bl)))},jl=function(n){return u(Dt,D,I([u(Il,I([El(Vl)]),I([Pl(n.as)]))]))},Ul=function(n){return u(Dt,D,I([u(Sl,D,I([Pl("Import Configurations")])),u(Nl,D,I([jl(n)])),u(Nl,D,I([kl]))]))},Yl=re("input"),Wl=re("label"),Ol=Cl("max"),ql=Cl("min"),Xl=Cl("name"),Jl=re("span"),Zl=Cl("type"),Kl=function(n){return{$:0,a:n}},Ql=function(n){return Yr(n.b.q)},nu=function(n){return u(Yl,I([u(hl,"position","absolute"),Zl("range"),u(hl,"width","100%"),ql("0"),Ol(Fr((e=n,r=e.b.E,Yr(e.b.q)+1+Yr(r)-1))),Ml(Fr(Ql(n))),El(u(zt,kt,u(zt,Ja(0),Kl)))]),D);var e,r},eu=function(n){var e=n.b.k,r=n.b.E,t=u(Ja,e,_i(n.b.q)).a.a5,o=u(Ja,e,_i(Zr(r))).a.a5-t,a=ut(o/1);return u(Dt,I([u(hl,"position","absolute"),u(hl,"width","100%"),u(hl,"height","20px")]),u(Ut,(function(n){return u(Dt,I([u(hl,"position","absolute"),u(hl,"background-color","yellow"),u(hl,"width","1px"),u(hl,"height","20px"),u(hl,"left",Nc(100*n*1/o)+"%")]),D)}),u(qr,0,a)))},ru={$:1},tu={$:7},ou={$:6},au={$:2},iu={$:3},cu={$:5},lu={$:4},uu=r((function(n,e){return u(al,I([u(hl,"display","inline-block"),u(hl,"width","30px"),u(hl,"height","30px"),u(hl,"margin","2px"),u(hl,"padding","0px"),u(hl,"top","0px"),u(hl,"font-size","20px"),vl(n)]),I([Pl(e)]))})),fu=function(n){return u(Dt,I([u(hl,"width","100%")]),I([(e=n,r=e.a,u(Dt,D,I([u(uu,ru,"⏮️"),u(uu,au,"◀️"),1===r.$?u(uu,cu,"▶️"):u(uu,iu,"⏸️"),r.$?u(uu,lu,"⏺️"):u(uu,iu,"⏹"),u(uu,ou,"⏯️"),u(uu,tu,"⏭️")]))),u(Dt,D,I([eu(n),nu(n)]))]));var e,r},su=t((function(n,e,t){var o,a,i,c,l=t.R.b.k.b,f=u(Dt,I([u(hl,"margin-left","0px")]),I([u(pl,I([(o=u(zt,cl,rl),u(sl,"change",u(Lt,o,bl))),Ml(il(t.a9)),u(hl,"width","200px"),u(hl,"height","40px"),u(hl,"font-size","20px")]),u(Ut,(function(n){return u(ml,I([Ml(il(n))]),I([Pl(il(n))]))}),I([0,1])))])),s=r((function(n,e){return u(al,I([u(hl,"font-size","30px"),u(hl,"width","40px"),u(hl,"height","40px"),vl(n)]),I([Pl(e)]))})),d=Wa(t.R),b=t.a9?u(ul,Kc,u(e,d,l)):u(Dt,D,I([u(ul,Qc,fu(t.R)),u(ul,u(zt,Zc,$t),(a=d.aS,i=function(n){var e=n.a,r=n.b,t=r.a,o=r.b,a=r.c;return u(Dt,I([u(hl,"margin-top","15px")]),I([u(Dt,D,I([u(Wl,I([Gl(e)]),I([Pl(e),Pl(": "),u(Jl,I([u(hl,"font-family","monospace"),u(hl,"font-weight","bold")]),I([Pl(Nc(o))]))]))])),u(Yl,I([Zl("range"),Rl(e),Xl(e),ql(Nc(t)),Ol(Nc(a)),El((function(n){return u(yl,e,u(Ja,0,Tc(n)))})),u(Cl,"step","any"),u(hl,"width","200px"),Ml(Nc(o))]),D)]))},c=function(n){var e=n.a,r=n.b;return u(Dt,I([u(hl,"margin-top","15px")]),I([u(Dt,D,I([u(Wl,I([Gl(e)]),I([Pl(e)]))])),u(Yl,I([Zl("color"),u(hl,"width","200px"),u(hl,"height","30px"),Rl(e),Xl(e),El((function(n){return u(Tl,e,u(ec,Ll,Ki(n)))})),Ml(Pc(r))]),D)]))},u(Dt,I([u(hl,"margin-left","20px"),u(hl,"height","100%"),u(hl,"overflow","scroll")]),I([u(Dt,D,u(Ut,i,a.X)),u(Dt,D,u(Ut,c,a.S)),u(Al,D,D),_l(a),Ul(a)]))))])),v=u(Dt,I([u(hl,"position","fixed"),u(hl,"top","0px"),u(hl,"left","0px"),u(hl,"width",Nc(250)+"px"),u(hl,"height",Nc(d.ad.cp)+"px"),u(hl,"font-family",'-apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif'),u(hl,"font-size","16px")]),I(t.bg?[u(Dt,I([u(hl,"height","100px")]),I([u(s,nl,"✕"),f])),u(Dt,I([u(hl,"height",Nc(d.ad.cp-100)+"px")]),I([b]))]:[u(s,tl,"≡")])),m=u(Dt,I([u(hl,"position","fixed"),u(hl,"top","0px"),u(hl,"left","0px"),u(hl,"width",Nc(d.ad.dd)+"px"),u(hl,"height",Nc(d.ad.cp)+"px"),u(hl,"font-size","16px")]),I([u(ul,ol(el),u(n,d,l))]));return u(Dt,I([u(hl,"touch-action","none"),u(hl,"user-select","none")]),I([m,v]))})),du=i((function(n,e,t,o,a,i){return Qt({e5:function(n){return L({a9:0,bg:!1,R:u(qc,u(Oc,n,t),o),dc:0},u(Kt,u(zt,Ht,$t),Wc))},fw:function(n){return 1===n.dc?u(ao,$t,Ga(It)):Ea},fD:r((function(n,r){return L(s(Yc,e,i,n,r),Jc)})),fF:u(su,n,a)})})),bu=o((function(n,e,o,a){return b(du,n,e,o,a,r((function(){return u(Dt,D,D)})),t((function(n,e,r){return r})))})),vu=(Eo=I([L(-3,-3),L(-3,1),L(-3,2),L(-3,3),L(-2,-2),L(-2,0),L(-2,3),L(-2,4),L(-1,-5),L(-1,-4),L(-1,-3),L(-1,-2),L(-1,0),L(-1,3),L(-1,4),L(0,-4),L(0,-3),L(0,-2),L(0,-1),L(0,0),L(0,1),L(0,2),L(0,3),L(0,4),L(1,-5),L(1,-4),L(1,-3),L(1,-2),L(1,0),L(1,3),L(1,4),L(2,-2),L(2,0),L(2,3),L(2,4),L(3,-3),L(3,1),L(3,2),L(3,3)]),f(Ur,Vc,li,Eo)),mu=3.141592653589793,pu=function(n){return mu*(n/180)},gu=U,hu=r((function(n,e){var r=e.bI-n.bI,t=e.bH-n.bH,o=e.bG-n.bG,a=u(st,Mc(o),u(st,Mc(t),Mc(r)));if(a){var i=r/a,c=t/a,l=o/a,f=gu(l*l+c*c+i*i);return kr({bG:l/f,bH:c/f,bI:i/f})}return Vr})),xu=r((function(n,e){return{bG:e.bH*n.bI-e.bI*n.bH,bH:e.bI*n.bG-e.bG*n.bI,bI:e.bG*n.bH-e.bH*n.bG}})),Pu=function(n){var e=n,r=u(st,Mc(e.bG),u(st,Mc(e.bH),Mc(e.bI)));if(r){var t=e.bI/r,o=e.bH/r,a=e.bG/r,i=gu(a*a+o*o+t*t);return kr({bG:a/i,bH:o/i,bI:t/i})}return Vr},Cu=r((function(n,e){return{bG:e.bG-n.bG,bH:e.bH-n.bH,bI:e.bI-n.bI}})),Mu=r((function(n,e){return e.bG*n.bG+e.bH*n.bH+e.bI*n.bI})),Tu=r((function(n,e){return T(e,n)>0})),yu=r((function(n,e){return 0>T(e,n)})),Lu=r((function(n,e){return{bG:e.bG-n.bG,bH:e.bH-n.bH,bI:e.bI-n.bI}})),wu=r((function(n,e){var r=e.bG*n.bG+e.bH*n.bH+e.bI*n.bI;return{bG:n.bG*r,bH:n.bH*r,bI:n.bI*r}})),Su={bG:0,bH:0,bI:0},Nu=t((function(n,e,r){return u(Ni,(function(t){return u(Ni,(function(o){var a,i=u(xu,e,n),c=u(Mu,r,i),l=u(Tu,0,c)?i:u(yu,0,c)?{bG:-(a=i).bG,bH:-a.bH,bI:-a.bI}:Su;return u(Gi,(function(n){return w(t,o,n)}),Pu(l))}),Pu(u(Lu,u(wu,t,e),e)))}),Pu(n))})),Du=function(n){var e=function(n){var e=n,r=Mc(e.bI),t=Mc(e.bH),o=Mc(e.bG);if(1>T(o,t)){if(1>T(o,r)){var a=gu(e.bI*e.bI+e.bH*e.bH);return{bG:0,bH:-e.bI/a,bI:e.bH/a}}return a=gu(e.bH*e.bH+e.bG*e.bG),{bG:-e.bH/a,bH:e.bG/a,bI:0}}return 1>T(t,r)?(a=gu(e.bI*e.bI+e.bG*e.bG),{bG:e.bI/a,bH:0,bI:-e.bG/a}):(a=gu(e.bG*e.bG+e.bH*e.bH),{bG:-e.bH/a,bH:e.bG/a,bI:0})}(n);return L(e,{bG:n.bH*e.bI-n.bI*e.bH,bH:n.bI*e.bG-n.bG*e.bI,bI:n.bG*e.bH-n.bH*e.bG})},Hu=r((function(n,e){var r=Du(n);return{cJ:e,df:r.a,dg:r.b,dh:n}})),$u=function(n){var e=u(Cu,n.eY,n.eV),r=n.fC,t=f(Nu,e,r,u(xu,e,r));if(t.$){var o=Pu(e);if(o.$){var a=Du(n.fC);return{cJ:n.eV,df:a.b,dg:n.fC,dh:a.a}}return u(Hu,o.a,n.eV)}var i=t.a;return{cJ:n.eV,df:i.c,dg:i.b,dh:i.a}},Iu={bG:0,bH:0,bI:0},zu=function(n){return Mc(n)},_u=function(n){return.5*n},Gu=B,Au={bG:0,bH:1,bI:0},Ru=k,ku=r((function(n,e){return(e-ut(e/n)*n)/n})),Vu=o((function(n,e,r,t){return n+(e-n)*(1+Ru(6.283185307179586*u(ku,r,t)))/2})),Bu=function(n){return a=(o={eV:{bG:1+s(Vu,-5,5,7,n.a5),bH:1,bI:20},eY:{bG:0,bH:0,bI:0},fC:{bG:0,bH:1,bI:0}}).eY,i=o.eV,c=o.fC,e={ew:pu(40),db:$u({eV:i,eY:a,fC:u(Ja,Au,u(hu,Iu,c))})},t=_u(zu(e.ew)),{cW:(r=Gu(t),{$:0,a:r}),db:e.db};var e,r,t,o,a,i,c},Fu=t((function(n,e,r){return{bG:n,bH:e,bI:r}})),Eu=r((function(n,e){return e.bG*n.bG+e.bH*n.bH+e.bI*n.bI})),ju=function(n){return n.eP},Uu=r((function(n,e){return n*e})),Yu=function(n){return n.cJ},Wu=r((function(n,e){var r=n.cJ,t=n.fh;return(e.bG-r.bG)*t.bG+(e.bH-r.bH)*t.bH+(e.bI-r.bI)*t.bI})),Ou=t((function(n,e,r){return{bG:r.bG+e*n.bG,bH:r.bH+e*n.bH,bI:r.bI+e*n.bI}})),qu=r((function(n,e){var r=ju(e),t=u(Eu,n.fh,r);if(t){var o=Yu(e);return kr(f(Ou,r,u(Uu,-1/t,u(Wu,n,o)),o))}return Vr})),Xu=r((function(n,e){return{bG:n,bH:e}})),Ju=r((function(n,e){return n*e})),Zu=function(n){return n.eD},Ku=r((function(n,e){return e/n})),Qu=function(n){return n.cJ},nf=function(n){return Qu(n)},ef=function(n){return-n},rf={bG:0,bH:0,bI:-1},tf=r((function(n,e){return e/n})),of=r((function(n,e){var r=n.dh,t=n.dg,o=n.df;return{bG:o.bG*e.bG+t.bG*e.bH+r.bG*e.bI,bH:o.bH*e.bG+t.bH*e.bH+r.bH*e.bI,bI:o.bI*e.bG+t.bI*e.bH+r.bI*e.bI}})),af=r((function(n,e){return{eP:e,cJ:n}})),cf=function(n){return{bG:-n.bG,bH:-n.bH,bI:-n.bI}},lf=function(n){return n.dh},uf=function(n){return cf(lf(n))},ff=r((function(n,e){var r=n.cJ,t=n.df;return(e.bG-r.bG)*t.bG+(e.bH-r.bH)*t.bH})),sf=t((function(n,e,r){return{bG:n,bH:e,bI:r}})),df=o((function(n,e,r,t){var o=n.cJ,a=n.dh,i=n.dg,c=n.df;return{bG:o.bG+e*c.bG+r*i.bG+t*a.bG,bH:o.bH+e*c.bH+r*i.bH+t*a.bH,bI:o.bI+e*c.bI+r*i.bI+t*a.bI}})),bf=r((function(n,e){var r=n.cJ,t=n.dg;return(e.bG-r.bG)*t.bG+(e.bH-r.bH)*t.bH})),vf=t((function(n,e,r){var t=n,o=u(bf,Zu(e),r),a=u(ff,Zu(e),r),i=t.db,c=function(n){return n.dr}(e).b,l=t.cW;if(l.$){var d=u(tf,c,l.a);return u(af,s(df,i,u(Ju,d,a),u(Ju,d,o),0),uf(t.db))}var b=ef(u(Ku,l.a,u(Uu,.5,c))),v=u(of,i,u(Ja,rf,Pu(f(sf,a,o,b))));return u(af,nf(t.db),v)})),mf=V,pf=function(n){var e=n;return{bG:Ru(e),bH:mf(e)}},gf=r((function(n,e){return{cJ:e,df:n,dg:(r=n,{bG:-r.bH,bH:r.bG})};var r})),hf=r((function(n,e){return u(gf,pf(n),e)})),xf=t((function(n,e,r){var t=n.a,o=n.b;return{eD:u(hf,e,r),dr:L(zu(t),zu(o))}})),Pf=function(n){return n.bG},Cf=r((function(n,e){return{bG:n,bH:e}})),Mf=function(n){return n.bH},Tf=function(n){return n.bI},yf=o((function(n,e,r,t){var o=r.bG,a=r.bH,i=f(xf,L(e.dd,e.cp),pu(0),u(Xu,0,0));return u(Gi,(function(n){return f(Fu,Pf(n),Mf(n),Tf(n))}),u(qu,t,f(vf,n,i,u(Cf,o,a))))})),Lf=r((function(n,e){return{bG:e.bG+n.bG,bH:e.bH+n.bH,bI:e.bI+n.bI}})),wf=r((function(n,e){return{fh:n,cJ:e}})),Sf=r((function(n,e){return u(wf,e.fh,u(Lf,n,e.cJ))})),Nf=r((function(n,e){return{fh:e,cJ:n}})),Df={bG:0,bH:0,bI:1},Hf=Df,$f=u(Nf,Iu,Hf),If=o((function(n,e,r,t){return s(yf,e,r,t,u(Sf,f(sf,0,0,n),$f))})),zf=If(0),_f=r((function(n,e){var r=f(zf,Bu(n),n.ad,n.I);if(r.$)return e;var t=r.a;return S(e,{aF:u(Vc,L(qi(t.bG),qi(t.bH)),e.aF)})})),Gf=r((function(n,e){var r=f(zf,Bu(n),n.ad,n.I);if(r.$)return e;var t=r.a;return S(e,{aF:u(Bc,L(qi(t.bG),qi(t.bH)),e.aF)})})),Af=r((function(n,e){return n.bn.c2&&n.I.aT?u(Gf,n,e):n.I.aT?u(_f,n,e):e})),Rf=t((function(n,e,r){return 0>T(r,n)?n:T(r,e)>0?e:r})),kf=r((function(n,e){return{$:0,a:n,b:e}})),Vf=r((function(n,e){return T(e,n)>-1})),Bf=r((function(n,e){return n+.5*(e-n)})),Ff=r((function(n,e){return e-n})),Ef={bG:-1,bH:0,bI:0},jf={bG:0,bH:-1,bI:0},Uf={bG:1,bH:0,bI:0},Yf=t((function(n,e,r){return{bG:n,bH:e,bI:r}})),Wf=i((function(n,e,r,t,o,a){var i=u(Vf,r,a)?Df:rf,c=u(Vf,e,o)?Au:jf,l=u(Vf,n,t)?Uf:Ef,s=w(zu(u(Ff,n,t)),zu(u(Ff,e,o)),zu(u(Ff,r,a)));return{eD:{cJ:f(Yf,u(Bf,n,t),u(Bf,e,o),u(Bf,r,a)),df:l,dg:c,dh:i},dr:s}})),Of=r((function(n,e){return b(Wf,Pf(n),Mf(n),Tf(n),Pf(e),Mf(e),Tf(e))})),qf=t((function(n,e,r){return{bG:n,bH:e,bI:r}})),Xf=r((function(n,e){var r=e/2;return u(kf,n,u(Of,f(qf,-r,-r,-r),f(qf,r,r,r)))})),Jf=function(n){return{$:5,a:n}},Zf=r((function(n,e){return{$:2,a:n,b:e}})),Kf=r((function(n,e){return{$:4,a:n,b:e}})),Qf=r((function(n,e){return{$:3,a:n,b:e}})),ns=r((function(n,e){return{$:1,a:n,b:e}})),es=t((function(n,e,r){return{bG:n,bH:e,bI:r}})),rs=function(n){return n.eD},ts=function(n){return n.dr},os=function(n){return n.df},as=function(n){return n.dg},is=r((function(n,e){return{cJ:u(Lf,n,Qu(e)),df:os(e),dg:as(e),dh:lf(e)}})),cs=r((function(n,e){return{eD:u(is,n,rs(e)),dr:ts(e)}})),ls=r((function(n,e){var r=e;return u(af,u(Lf,n,r.cJ),r.eP)})),us=r((function(n,e){var r=e;return{l:u(ls,n,r.l),e9:r.e9,fn:r.fn}})),fs=r((function(n,e){var r=e.b;return L(n(e.a),n(r))})),ss=r((function(n,e){return u(fs,Lf(n),e)})),ds=function(n){return n.eK},bs=function(n){return n.fn},vs=r((function(n,e){return{eK:e,fn:zu(n)}})),ms=r((function(n,e){return u(vs,bs(e),u(Lf,n,ds(e)))})),ps=r((function(n,e){var r=e.b,t=e.c;return w(n(e.a),n(r),n(t))})),gs=r((function(n,e){return u(ps,Lf(n),e)})),hs=r((function(n,e){var r=n.a,t=n.b,o=n.c,a=f(es,r,t,o);switch(e.$){case 0:return u(kf,e.a,u(cs,a,e.b));case 1:return u(ns,e.a,u(gs,a,e.b));case 3:return u(Qf,e.a,u(ms,a,e.b));case 2:return u(Zf,e.a,u(us,a,e.b));case 4:return u(Kf,e.a,u(ss,a,e.b));default:var i=e.a;return Jf(u(Ut,hs(w(r,t,o)),i))}})),xs=function(n){return hs(w(n,0,0))},Ps=function(n){return hs(w(0,n,0))},Cs=function(n){return hs(w(0,0,n))},Ms=t((function(n,e,r){var t=n,o=r,a=.5*e,i=Ru(a),c=mf(a),l=t.eP,u=l.bG*c,f=i*u,s=u*u,d=l.bH*c,b=i*d,v=u*d,m=d*d,p=l.bI*c,g=i*p,h=u*p,x=d*p,P=p*p;return{bG:(1-2*(m+P))*o.bG+2*(v-g)*o.bH+2*(h+b)*o.bI,bH:2*(v+g)*o.bG+(1-2*(s+P))*o.bH+2*(x-f)*o.bI,bI:2*(h-b)*o.bG+2*(x+f)*o.bH+(1-2*(s+m))*o.bI}})),Ts=t((function(n,e,r){var t=n,o=r,a=.5*e,i=Ru(a),c=mf(a),l=t.cJ,u=o.bG-l.bG,f=o.bH-l.bH,s=o.bI-l.bI,d=t.eP,b=d.bG*c,v=i*b,m=b*b,p=d.bH*c,g=i*p,h=b*p,x=p*p,P=d.bI*c,C=i*P,M=b*P,T=p*P,y=P*P;return{bG:l.bG+(1-2*(x+y))*u+2*(h-C)*f+2*(M+g)*s,bH:l.bH+2*(h+C)*u+(1-2*(m+y))*f+2*(T-v)*s,bI:l.bI+2*(M-g)*u+2*(T+v)*f+(1-2*(m+x))*s}})),ys=t((function(n,e,r){return{cJ:f(Ts,n,e,Qu(r)),df:f(Ms,n,e,os(r)),dg:f(Ms,n,e,as(r)),dh:f(Ms,n,e,lf(r))}})),Ls=t((function(n,e,r){return{eD:f(ys,n,e,rs(r)),dr:ts(r)}})),ws=r((function(n,e){var r=u(Ts,n,e),t=u(Ms,n,e);return function(n){var e=n;return u(af,r(e.cJ),t(e.eP))}})),Ss=t((function(n,e,r){var t=r;return{l:f(ws,n,e,t.l),e9:t.e9,fn:t.fn}})),Ns=t((function(n,e,r){return u(fs,u(Ts,n,e),r)})),Ds=t((function(n,e,r){return u(vs,bs(r),f(Ts,n,e,ds(r)))})),Hs=t((function(n,e,r){return u(ps,u(Ts,n,e),r)})),$s=t((function(n,e,r){switch(r.$){case 0:return u(kf,r.a,f(Ls,n,e,r.b));case 1:return u(ns,r.a,f(Hs,n,e,r.b));case 3:return u(Qf,r.a,f(Ds,n,e,r.b));case 2:return u(Zf,r.a,f(Ss,n,e,r.b));case 4:return u(Kf,r.a,f(Ns,n,e,r.b));default:var t=r.a;return Jf(u(Ut,u($s,n,e),t))}})),Is=Uf,zs=u(af,Iu,Is),_s=r((function(n,e){return f($s,zs,n,e)})),Gs=Au,As=u(af,Iu,Gs),Rs=r((function(n,e){return f($s,As,n,e)})),ks=u(af,Iu,Hf),Vs=r((function(n,e){return f($s,ks,n,e)})),Bs=s(Ui,237/255,212/255,0,1),Fs=r((function(n,e){var r;return u(Ps,s(Vu,-.5,.5,7,n.a5),(r=u(Ut,(function(e){var r=e.a,t=e.b,o=s(Vu,-3.141592653589793,mu,14,n.a5+.1*(r+t));return u(Cs,-.5,u(Ps,t,u(xs,r,u(Vs,o,u(_s,o,u(Rs,o,u(Xf,Bs,1)))))))}),function(n){return e=n,f(Sr,t((function(n,e,r){return u(yr,n,r)})),D,e);var e}(e.aF)),Jf(r)))})),Es=function(n){return{$:0,a:n}},js={$:3},Us=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),Ys=Us,Ws=r((function(n,e){return e.b?f(jt,yr,e,n):n})),Os=function(n){return f(jt,Ws,D,n)},qs=r((function(n,e){return Os(u(Ut,n,e))})),Xs=function(n){return u(le,"height",Fr(n))},Js=function(n){return te(function(n){return"script"==n?"p":n}(n))},Zs=function(n){return{$:2,a:n}},Ks=r((function(n,e){switch(e.$){case 0:return u(dr,n,e);case 1:return u(br,n,e);case 2:return u(vr,n,e);case 3:return u(mr,n,e);case 4:return u(pr,n,e);default:return u(gr,n,e)}})),Qs=r((function(n,e){switch(e.$){case 0:return u(qe,n,e);case 1:return u(Xe,n,e);case 2:return u(Je,n,e);case 3:return u(Ze,n,e);case 4:return u(Ke,n,e);case 5:return u(Qe,n,e);case 6:return u(nr,n,e);case 7:return u(er,n,e);default:return function(n){var e=n.sampleAlphaToCoverage;e.toggle=n.toggle,e.enabled||(n.gl.enable(n.gl.SAMPLE_ALPHA_TO_COVERAGE),e.enabled=!0)}(n)}})),nd=t((function(n,e,r){return f(sr,n,e,r)})),ed=Tr,rd=s(ed,1,1,1,1),td=t((function(n,e,r){return u(Ut,(function(n){return u(n,e,r)}),n)})),od=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),ad=r((function(n,e){var r=e.bG,t=e.bH;return f(od,n*r/t,n,n*(1-r-t)/t)})),id=Cr,cd=r((function(n,e){return f(id,3.2406*(t=(r=u(ad,n,e)).a)-1.5372*(o=r.b)-.4986*(a=r.c),-.9689*t+1.8758*o+.0415*a,.0557*t-.204*o+1.057*a);var r,t,o,a})),ld=r((function(n,e){return{dD:C(n.dD,e.dD),s:n.s*e.s+n.t*e.v+n.u*e.y,t:n.s*e.t+n.t*e.w+n.u*e.z,u:n.s*e.u+n.t*e.x+n.u*e.A,v:n.v*e.s+n.w*e.v+n.x*e.y,w:n.v*e.t+n.w*e.w+n.x*e.z,x:n.v*e.u+n.w*e.x+n.x*e.A,y:n.y*e.s+n.z*e.v+n.A*e.y,z:n.y*e.t+n.z*e.w+n.A*e.z,A:n.y*e.u+n.z*e.x+n.A*e.A,J:e.J+(n.J*e.s+n.K*e.v+n.L*e.y)*e.b7,K:e.K+(n.J*e.t+n.K*e.w+n.L*e.z)*e.b7,L:e.L+(n.J*e.u+n.K*e.x+n.L*e.A)*e.b7,b7:n.b7*e.b7}})),ud=function(n){var e=new Float64Array(16);return e[0]=n.dL,e[1]=n.dP,e[2]=n.dT,e[3]=n.dX,e[4]=n.dM,e[5]=n.dQ,e[6]=n.dU,e[7]=n.dY,e[8]=n.dN,e[9]=n.dR,e[10]=n.dV,e[11]=n.dZ,e[12]=n.dO,e[13]=n.dS,e[14]=n.dW,e[15]=n.d_,e},fd=a((function(n,e,r,t,o){return b(o,n,s(ed,t.b7,t.b7,t.b7,t.dD?1:-1),function(n){return ud({dL:n.s,dM:n.v,dN:n.y,dO:n.J,dP:n.t,dQ:n.w,dR:n.z,dS:n.K,dT:n.u,dU:n.x,dV:n.A,dW:n.L,dX:0,dY:0,dZ:0,d_:1})}(t),t.dD,e,r)})),sd=i((function(n,e,r,t,o,a){n:for(;;)switch(o.$){case 0:return a;case 5:var i=o.b;n=n,e=e,r=r,t=u(ld,o.a,t),o=i,a=a;continue n;case 1:return{P:u(yr,d(fd,n,e,r,t,o.b),a.P),Z:a.Z,fr:a.fr};case 3:return{P:a.P,Z:u(yr,d(fd,n,e,r,t,o.b),a.Z),fr:a.fr};case 2:return{P:a.P,Z:a.Z,fr:u(yr,d(fd,n,e,r,t,o.a),a.fr)};default:var c=o.a;return f(Ur,s(sd,n,e,r,t),a,c)}})),dd=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),bd=dd,vd=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),md=r((function(n,e){return{$:6,a:n,b:e}})),pd=md,gd=I([s(vd,518,!1,0,1),s(bd,!1,!1,!1,!1),u(pd,0,1)]),hd=519,xd=7681,Pd={src:"\n        precision lowp float;\n\n        void main() {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        }\n    ",attributes:{},uniforms:{}},Cd=Oe,Md=r((function(n,e){return{$:0,a:n,b:e}})),Td=Md({ds:1,dC:0,d7:5}),yd=Pr,Ld=Td(I([{ef:u(yd,-1,-1)},{ef:u(yd,1,-1)},{ef:u(yd,-1,1)},{ef:u(yd,1,1)}])),wd={src:"\n        precision lowp float;\n\n        attribute vec2 position;\n\n        void main() {\n            gl_Position = vec4(position, 0.0, 1.0);\n        }\n    ",attributes:{position:"ef"},uniforms:{}},Sd=function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return function(f){return{$:2,a:n,b:e,c:r,d:t,e:o,f:a,g:i,h:c,i:l,j:u,k:f}}}}}}}}}}}},Nd=t((function(n,e,t){var o=n.cY,a=n.cA,i=n.de,c=r((function(n,e){return e(n)})),l=r((function(n,e){return e(n)})),s=function(n){return u(zt,c(n.bx),u(zt,l(n.bi),u(zt,l(n.bJ),l(n.bK))))};return u(s,t,u(s,e,f(Sd,o,a,i)))})),Dd=function(n){return f(Nd,{cA:n.cA,cY:n.cY,de:n.de},{bi:n.bi,bx:n.bx,bJ:n.bJ,bK:n.bK},{bi:n.bi,bx:n.bx,bJ:n.bJ,bK:n.bK})},Hd=function(n){return d(Cd,I([Dd(n),s(bd,!1,!1,!1,!1)]),wd,Pd,Ld,{})},$d=Hd({bi:xd,cA:0,cY:8,bx:hd,de:15,bJ:xd,bK:xd}),Id=7680,zd=function(n){return Hd({bi:Id,cA:15,cY:8,bx:516,de:(e=n,u(Oi,2,e+4)),bJ:5386,bK:5386});var e},_d=t((function(n,e,r){return Os(I([f(td,n,r,gd),I([zd(e),$d])]))})),Gd=r((function(n,e){return Os(u(Xr,_d(n),e))})),Ad=s(vd,513,!0,0,1),Rd=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),kd=r((function(n,e){return f(Rd,32774,n,e)})),Vd=function(n){var e=n.b5,t=n.bT,o=n.bN,a=n.bL,i=n.bQ,c=n.aR;return u(r((function(n,r){var i=n.b,c=n.c,l=r.a,u=r.b,f=r.c;return function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return{$:0,a:n,b:e,c:r,d:t,e:o,f:a,g:i,h:c,i:l,j:u}}}}}}}}}}}(n.a)(i)(c)(l)(u)(f)(e)(t)(o)(a)})),i,c)}({bL:0,aR:u(kd,1,771),bN:0,bQ:u(kd,770,771),bT:0,b5:0}),Bd=I([Ad,Vd]),Fd=function(n){return n.d2},Ed=function(n){return n.d5},jd=function(n){return w(u(Ff,function(n){return n.d3}(n),function(n){return n.d0}(n)),u(Ff,function(n){return n.d4}(n),function(n){return n.d1}(n)),u(Ff,Ed(n),Fd(n)))},Ud=function(n){return{cJ:{bG:n.J,bH:n.K,bI:n.L},df:{bG:n.s,bH:n.t,bI:n.u},dg:{bG:n.v,bH:n.w,bI:n.x},dh:{bG:n.y,bH:n.z,bI:n.A}}},Yd=r((function(n,e){var r=n.dh,t=n.dg,o=n.df;return{bG:e.bG*o.bG+e.bH*o.bH+e.bI*o.bI,bH:e.bG*t.bG+e.bH*t.bH+e.bI*t.bI,bI:e.bG*r.bG+e.bH*r.bH+e.bI*r.bI}})),Wd=r((function(n,e){var r=n.cJ,t=e.bG-r.bG,o=e.bH-r.bH,a=e.bI-r.bI,i=n.dh,c=n.dg,l=n.df;return{bG:t*l.bG+o*l.bH+a*l.bI,bH:t*c.bG+o*c.bH+a*c.bI,bI:t*i.bG+o*i.bH+a*i.bI}})),Od=r((function(n,e){return{cJ:u(Wd,n,Qu(e)),df:u(Yd,n,os(e)),dg:u(Yd,n,as(e)),dh:u(Yd,n,lf(e))}})),qd=r((function(n,e){return u(st,n,e)})),Xd=r((function(n,e){return 0>T(n,e)?n:e})),Jd=r((function(n,e){return u(Xd,n,e)})),Zd=r((function(n,e){var r=e,t=n;return{d0:u(qd,t.d0,r.d0),d1:u(qd,t.d1,r.d1),d2:u(qd,t.d2,r.d2),d3:u(Jd,t.d3,r.d3),d4:u(Jd,t.d4,r.d4),d5:u(Jd,t.d5,r.d5)}})),Kd=r((function(n,e){return e+n})),Qd=r((function(n,e){var r=n.a,t=n.c,o=_u(zu(n.b)),a=_u(zu(r)),i=_u(zu(t)),c=function(n){return w(n.bG,n.bH,n.bI)}(e),l=c.a,f=c.b,s=c.c;return{d0:u(Kd,a,l),d1:u(Kd,o,f),d2:u(Kd,i,s),d3:u(Ff,a,l),d4:u(Ff,o,f),d5:u(Ff,i,s)}})),nb=o((function(n,e,r,t){var o=r.eK,a=2*r.e0*e,i=2*r.e$*e,c=2*r.e_*e,l=o.bI*e,s=o.bH*e,d=o.bG*e,b=lf(n),v=Mc(c*b.bG)+Mc(i*b.bH)+Mc(a*b.bI),m=as(n),p=Mc(c*m.bG)+Mc(i*m.bH)+Mc(a*m.bI),g=os(n),h=Mc(c*g.bG)+Mc(i*g.bH)+Mc(a*g.bI),x=u(Qd,w(h,p,v),u(Wd,n,f(qf,d,s,l)));return kr(t.$?x:u(Zd,t.a,x))})),eb=o((function(n,e,r,t){n:for(;;){if(!t.b)return r;var o=t.a,a=t.b;switch(o.$){case 0:n=c=n,e=l=e,r=f=r,t=a;continue n;case 1:var i=s(nb,n,e,o.a,r);n=c=n,e=l=e,r=f=i,t=a;continue n;case 2:n=c=n,e=l=e,r=f=r,t=a;continue n;case 3:i=s(nb,n,e,o.a,r),n=c=n,e=l=e,r=f=i,t=a;continue n;case 4:var c=n,l=e,f=s(eb,n,e,r,o.a);n=c,e=l,r=f,t=a;continue n;default:var d=o.a,b=o.b,v=u(Od,Ud(d),n),m=e*d.b7;n=c=n,e=l=e,r=f=s(eb,v,m,r,I([b])),t=a;continue n}}})),rb=function(n){return n[0]},tb=function(n){return n[1]},ob=function(n){return n[2]},ab=function(n){return{$:4,a:n}},ib=r((function(n,e){for(;;){if(!n.b)return e;var r=n.a;n=n.b,e=u(yr,r,e)}})),cb=function(n){return ab(u(ib,n,D))},lb={dD:!0,s:1,t:0,u:0,v:0,w:1,x:0,y:0,z:0,A:1,J:0,K:0,L:0,b7:1},ub=Hd({bi:xd,cA:0,cY:8,bx:hd,de:255,bJ:xd,bK:xd}),fb={bN:0,eJ:!1,bT:0,cU:0,b5:0,c8:0,bG:0,bH:0,bI:0},sb=r((function(n,e){return ud({dL:n.bG,dM:n.b5,dN:e.bG,dO:e.b5,dP:n.bH,dQ:n.bT,dR:e.bH,dS:e.bT,dT:n.bI,dU:n.bN,dV:e.bI,dW:e.bN,dX:n.c8,dY:n.cU,dZ:e.c8,d_:e.cU})})),db=L({bp:u(sb,fb,fb),bX:u(sb,fb,fb),bY:u(sb,fb,fb),bZ:u(sb,fb,fb)},s(ed,0,0,0,0)),bb=function(n){return s(vd,515,n.af,n.aa,n._)},vb=I([bb({_:1,aa:0,af:!0}),Dd({bi:Id,cA:240,cY:0,bx:514,de:0,bJ:Id,bK:Id}),Vd]),mb=r((function(n,e){var r=n,t=e.eX,o=e.eC,a=zu(e.fg),i=zu(t),c=r.cW;if(c.$){var l=c.a;return Hc(i)?ud({dL:2/(o*l),dM:0,dN:0,dO:0,dP:0,dQ:2/l,dR:0,dS:0,dT:0,dU:0,dV:0,dW:-1,dX:0,dY:0,dZ:0,d_:1}):ud({dL:2/(o*l),dM:0,dN:0,dO:0,dP:0,dQ:2/l,dR:0,dS:0,dT:0,dU:0,dV:-2/(i-a),dW:-(i+a)/(i-a),dX:0,dY:0,dZ:0,d_:1})}var u=c.a;return Hc(i)?ud({dL:1/(o*u),dM:0,dN:0,dO:0,dP:0,dQ:1/u,dR:0,dS:0,dT:0,dU:0,dV:-1,dW:-2*a,dX:0,dY:0,dZ:-1,d_:0}):ud({dL:1/(o*u),dM:0,dN:0,dO:0,dP:0,dQ:1/u,dR:0,dS:0,dT:0,dU:0,dV:-(i+a)/(i-a),dW:-2*i*a/(i-a),dX:0,dY:0,dZ:-1,d_:0})})),pb=r((function(n,e){return 1==(1&n>>e)?0:1})),gb=t((function(n,e,r){return Os(u(Ut,(function(r){var t=r<<4;return f(td,n,L(e,s(ed,u(pb,r,0),u(pb,r,1),u(pb,r,2),u(pb,r,3))),function(n){return I([bb({_:1,aa:0,af:!0}),Dd({bi:Id,cA:240,cY:n,bx:514,de:0,bJ:Id,bK:Id}),Vd])}(t))}),u(qr,1,u(Oi,2,r)-1)))})),hb={cJ:Iu,df:Is,dg:Gs,dh:Hf},xb=r((function(n,e){var r,t,o,a,i;return t=Qu(r=u(Od,e,n)),o=lf(r),a=as(r),i=os(r),ud({dL:i.bG,dM:a.bG,dN:o.bG,dO:t.bG,dP:i.bH,dQ:a.bH,dR:o.bH,dS:t.bH,dT:i.bI,dU:a.bI,dV:o.bI,dW:t.bI,dX:0,dY:0,dZ:0,d_:1})})),Pb=function(n){return os(n)},Cb=function(n){return as(n)},Mb=r((function(n,e){var r,t=I([(1,{$:1,a:1}),Zs(0),Es(!0),s(Ys,0,0,0,0)]),o=function(){var e=n.eA;switch(e.$){case 0:return w(t,"0",1);case 1:return w(u(yr,js,t),"1",1);default:return w(t,"0",e.a)}}(),a=o.a,i=o.b,c=o.c,l=n.dr,d=l.a,v=l.b,m=u(hl,"height",Fr(v)+"px"),p=d,g=p/v,h=u(qs,(function(e){return function(n){var e=function(n){return n.db}(n.eH),r={cJ:nf(e),df:Pb(e),dg:Cb(e),dh:cf(uf(e))},t=cb(n.dw),o=s(eb,r,1,Vr,I([t]));if(1===o.$)return D;var a=o.a,i=u(xb,hb,e),c=u(Uu,.99,u(qd,zu(n.eM),ef(Fd(a)))),l=jd(a),d=function(n){var e=n,r=u(st,Mc(e.bG),u(st,Mc(e.bH),Mc(e.bI)));if(r){var t=e.bI/r,o=e.bH/r,a=e.bG/r;return gu(a*a+o*o+t*t)*r}return 0}(f(sf,l.a,l.b,l.c)),v=u(Uu,1.01,u(Kd,d,ef(Ed(a)))),m=u(mb,n.eH,{eC:n.eC,eX:v,fg:c}),p=function(n){return{dL:n[0],dP:n[1],dT:n[2],dX:n[3],dM:n[4],dQ:n[5],dU:n[6],dY:n[7],dN:n[8],dR:n[9],dV:n[10],dZ:n[11],dO:n[12],dS:n[13],dW:n[14],d_:n[15]}}(m).d_,g=p?cf(uf(e)):nf(e),h=function(){var e=n.fB;switch(e.$){case 0:return L(0,0);case 1:return L(1,0);case 2:return L(2,0);case 3:return L(3,e.a);case 4:return L(4,e.a);default:return L(5,0)}}(),x=h.a,P=h.b,C=u(cd,n.eU,n.fH),M=ud({dL:0,dM:g.bG,dN:rb(C),dO:n.er,dP:0,dQ:g.bH,dR:tb(C),dS:d,dT:0,dU:g.bI,dV:ob(C),dW:x,dX:0,dY:p,dZ:0,d_:P}),T=b(sd,M,i,m,lb,t,{P:D,Z:D,fr:D}),y=n.fb;switch(y.$){case 0:return Os(I([f(td,T.P,L(w=y.a,rd),Bd),f(td,T.Z,db,Bd)]));case 1:var w=y.a;return Os(I([f(td,T.P,db,Bd),I([ub]),f(td,T.fr,w.bp,gd),I([zd(0)]),f(td,T.P,L(w,rd),vb),f(td,T.Z,db,Bd)]));default:var S=y.a,N=y.b;return Os(I([f(td,T.P,L(N,rd),Bd),I([ub]),u(Gd,T.fr,S),f(gb,T.P,N,Yr(S)),f(td,T.Z,db,Bd)]))}}({eC:g,eH:n.eH,eM:n.eM,dw:e.dw,eU:e.eU,fb:e.fb,er:c,fB:e.fB,fH:e.fH})}),e),x=u(hl,"width",Fr(p)+"px"),P=function(n){var e,r,t=n.b,o=n.c,a=n.d,i=function(n){return qi(1e4*n)/100};return e=I(["rgba(",Nc(i(n.a)),"%,",Nc(i(t)),"%,",Nc(i(o)),"%,",Nc((r=a,qi(1e3*r)/1e3)),")"]),u(Er,"",e)}(n.dl);return f(Js,"div",I([u(hl,"padding","0px"),x,m]),I([L(i,f(nd,a,I([(r=qi(p*c),u(le,"width",Fr(r))),Xs(qi(v*c)),x,m,u(hl,"display","block"),u(hl,"background-color",P)]),h))]))})),Tb=o((function(n,e,r,t){return{$:2,a:n,b:e,c:r,d:t}})),yb=o((function(n,e,r,t){return{$:3,a:n,b:e,c:r,d:t}})),Lb=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),wb=o((function(n,e,r,t){return{$:6,a:n,b:e,c:r,d:t}})),Sb=o((function(n,e,r,t){return{$:7,a:n,b:e,c:r,d:t}})),Nb=o((function(n,e,r,t){return{$:5,a:n,b:e,c:r,d:t}})),Db=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),Hb=function(n){switch(n.$){case 0:return n;case 1:return s(Db,n.a,n.b,n.c,1);case 2:return s(Tb,n.a,n.b,n.c,1);case 3:return s(yb,n.a,n.b,n.c,1);case 4:return s(Lb,n.a,n.b,n.c,1);case 5:return s(Nb,n.a,n.b,n.c,1);case 6:return s(wb,n.a,n.b,n.c,1);case 7:return s(Sb,n.a,n.b,n.c,1);case 8:case 9:default:return n}},$b={$:0},Ib=l((function(n,e,r,t,o,a,i,c){for(;;){if(!c.b)return{d0:e,d1:t,d2:a,d3:n,d4:r,d5:o};var l=c.b,f=i(c.a);n=u(Jd,f.d3,n),e=u(qd,f.d0,e),r=u(Jd,f.d4,r),t=u(qd,f.d1,t),o=u(Jd,f.d5,o),a=u(qd,f.d2,a),i=i,c=l}})),zb=t((function(n,e,r){var t=n(e);return m(Ib,t.d3,t.d0,t.d4,t.d1,t.d5,t.d2,n,r)})),_b=r((function(n,e){return 1>T(e,n)})),Gb=function(n){return u(_b,n.d0,n.d3)&&u(_b,n.d1,n.d4)&&u(_b,n.d2,n.d5)?n:{d0:u(qd,n.d3,n.d0),d1:u(qd,n.d4,n.d1),d2:u(qd,n.d5,n.d2),d3:u(Jd,n.d3,n.d0),d4:u(Jd,n.d4,n.d1),d5:u(Jd,n.d5,n.d2)}},Ab=function(n){return n},Rb=function(n){var e=n.a,r=n.b,t=n.c,o=Pf(e),a=Mf(e),i=Tf(e),c=Pf(r),l=Mf(r),f=Tf(r),s=Pf(t),d=Mf(t),b=Tf(t);return Gb({d0:u(qd,o,u(qd,c,s)),d1:u(qd,a,u(qd,l,d)),d2:u(qd,i,u(qd,f,b)),d3:u(Jd,o,u(Jd,c,s)),d4:u(Jd,a,u(Jd,l,d)),d5:u(Jd,i,u(Jd,f,b))})},kb=function(n){return new Float64Array([n.bG,n.bH,n.bI])},Vb=function(n){return kb(n)},Bb=function(n){return kb(n)},Fb=r((function(n,e){var r=n,t=e,o=u(st,Mc(t.bG),u(st,Mc(t.bH),Mc(t.bI)));if(o){var a=t.bI/o,i=t.bH/o,c=t.bG/o,l=gu(c*c+i*i+a*a);return{bG:r*c/l,bH:r*i/l,bI:r*a/l}}return Su}))(1),Eb=t((function(n,e,r){return Fb(u(xu,u(Cu,e,r),u(Cu,n,e)))})),jb=function(n){var e=n.a,r=n.b,t=n.c,o=Bb(f(Eb,e,r,t));return w({p:o,ef:Vb(e)},{p:o,ef:Vb(r)},{p:o,ef:Vb(t)})},Ub=r((function(n,e){return{$:2,a:n,b:e}}))({ds:3,dC:0,d7:4}),Yb=t((function(n,e,r){return w(n,e,r)})),Wb=(jo=u(Uu,-.5,1),Uo=u(Uu,-.5,1),Wo=f(Yf,Yo=u(Uu,-.5,1),Uo,jo),qo=f(Yf,Yo,Uo,Oo=u(Uu,.5,1)),Jo=f(Yf,Yo,Xo=u(Uu,.5,1),jo),Zo=f(Yf,Yo,Xo,Oo),Qo=f(Yf,Ko=u(Uu,.5,1),Uo,jo),na=f(Yf,Ko,Xo,jo),ea=f(Yf,Ko,Uo,Oo),ra=f(Yf,Ko,Xo,Oo),Hb(function(n){if(n.b){var e=n.a,r=n.b,t=Ub(u(Ut,jb,n));return s(Tb,f(zb,Rb,e,r),n,t,0)}return $b}(I([f(Yb,Wo,na,Qo),f(Yb,Wo,Jo,na),f(Yb,qo,ea,ra),f(Yb,qo,ra,Zo),f(Yb,Qo,na,ra),f(Yb,Qo,ra,ea),f(Yb,Wo,Zo,Jo),f(Yb,Wo,qo,Zo),f(Yb,Wo,Qo,ea),f(Yb,Wo,ea,qo),f(Yb,Jo,ra,na),f(Yb,Jo,Zo,ra)])))),Ob={$:0},qb=t((function(n,e,r){return{$:1,a:n,b:e,c:r}})),Xb=t((function(n,e,r){var t=e.a,o=e.b,a=n(e.c),i=n(o),c=n(t),l=Bb(f(Eb,c,i,a)),s={p:l,ef:Vb(c)},d={p:l,ef:Vb(i)},b={p:l,ef:Vb(a)};return u(yr,s,u(yr,d,u(yr,b,r)))})),Jb=function(n){return n.F},Zb=o((function(n,e,r,t){return 1===e.$||1===r.$||1===t.$?Vr:kr(f(n,e.a,r.a,t.a))})),Kb=4294967295>>>32-at,Qb=h,nv=t((function(n,e,r){for(;;){var t=u(Qb,Kb&e>>>n,r);if(t.$)return u(Qb,Kb&e,t.a);n-=at,e=e,r=t.a}})),ev=r((function(n,e){var r=e.a,t=e.b,o=e.c,a=e.d;return 0>n||T(n,r)>-1?Vr:T(n,function(n){return n>>>5<<5}(r))>-1?kr(u(Qb,Kb&n,a)):kr(f(nv,t,n,o))})),rv=function(n){return n.ap},tv=r((function(n,e){return u(ev,n,rv(e))})),ov=t((function(n,e,r){for(;;){var t=u(bt,Qr,n),o=t.a,a=t.b;if(0>T(ft(o),Qr))return u(pt,!0,{B:e,m:r,r:o});n=a,e=u(yr,lt(o),e),r+=1}})),av=function(n){return n.b?f(ov,n,D,0):it},iv=r((function(n,e){return!u(wc,u(ho,Lc,n),e)})),cv=r((function(n,e){return f(jt,r((function(e,r){return n(e)?u(yr,e,r):r})),D,e)})),lv=r((function(n,e){var r=function(n){return n.a}(n),t=function(n){var e=n.a,t=n.b,o=n.c;return e>=0&&0>T(e,r)&&t>=0&&0>T(t,r)&&o>=0&&0>T(o,r)};return u(iv,t,e)?{F:e,ap:n}:{F:u(cv,t,e),ap:n}})),uv=t((function(n,e,r){return{$:3,a:n,b:e,c:r}}))({ds:1,dC:3,d7:4}),fv=r((function(n,e){var r=e;return L(w(n.bG,n.bH,n.bI),w(r.bG,r.bH,r.bI))})),sv=r((function(n,e){n:for(;;){if(-2===e.$)return Vr;var r=e.c,t=e.d,o=e.e;switch(u(No,n,e.b)){case 0:n=n,e=t;continue n;case 1:return kr(r);default:n=n,e=o;continue n}}})),dv=f(id,0,0,0),bv=i((function(n,e,r,t,o,a){var i=a.a,c=a.b,l=a.c,f=u(sv,u(fv,n,e),o);if(f.$){var s={p:dv,ef:Vb(e)},d={p:dv,ef:Vb(n)},b=l+1;return w(u(yr,w(r,l,b),u(yr,w(r,b,t),i)),u(yr,s,u(yr,d,c)),l+2)}return w(u(yr,w(r,f.a,t),i),c,l)})),vv=a((function(n,e,r,t,o){for(;;){if(!r.b)return L(o.a,Zr(o.b));var a=r.a,i=a.a,c=a.b,l=r.b,u=n(a.c),f=n(c),s=n(i),d=t+2,v=t+1,m=n,p=e,g=l,h=t+3,x=b(bv,u,s,d,t,e,b(bv,f,u,v,d,e,b(bv,s,f,t,v,e,o)));n=m,e=p,r=g,t=h,o=x}})),mv=a((function(n,e,r,t,o){for(;;){if(!e.b)return w(t,o,r);var a=e.a,i=a.a,c=a.b,l=e.b,s=n(a.c),d=n(c),b=n(i),v=r+2,m=r+1,p=r,g=f(Ho,u(fv,b,s),v,f(Ho,u(fv,s,d),m,f(Ho,u(fv,d,b),p,o)));n=n,e=l,r+=3,t=u(yr,w(p,m,v),t),o=g}})),pv=t((function(n,e,r){var o,a=u(Vo,(function(n){var e=n.a,r=n.b,a=n.c;return s(Zb,t((function(n,e,r){return w(n,e,r)})),u(tv,e,o),u(tv,r,o),u(tv,a,o))}),Jb(o=r)),i=f(jt,Xb(e),D,a),c=d(mv,e,a,0,D,To),l=d(vv,e,c.b,a,0,w(c.a,D,c.c)),b=l.a,v=l.b,m=v.b?N(i,v):i;return f(qb,n,u(lv,av(m),b),u(uv,m,b))})),gv=function(n){return{F:u(Ut,(function(n){return w(3*n,3*n+1,3*n+2)}),u(qr,0,Yr(n)-1)),ap:av(Os(u(Ut,(function(n){return I([n.a,n.b,n.c])}),n)))}},hv=function(n){switch(n.$){case 0:return Ob;case 1:case 2:return f(pv,n.a,_t,gv(u(Ut,Ab,n.b)));case 3:return f(pv,n.a,_t,n.b);case 4:case 5:case 6:case 7:return f(pv,n.a,(function(n){return n.ef}),n.b);case 8:case 9:default:return Ob}},xv=hv(Wb),Pv={$:0},Cv=Pv,Mv=r((function(n,e){return{$:1,a:n,b:e}})),Tv={src:"\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        void main () {\n            gl_FragColor = texture2D(colorTexture, interpolatedUv);\n        }\n    ",attributes:{},uniforms:{colorTexture:"bR"}},yv=function(n){return{$:5,a:n}},Lv=yv(1029),wv=yv(1028),Sv=t((function(n,e,r){return 1===e?u(yr,n?Lv:wv,r):r})),Nv={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute mediump vec2 uv;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedUv = uv;\n        }\n    ",attributes:{position:"ef",uv:"N"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Dv=o((function(n,e,r,t){return u(Mv,e,l((function(e,o,a,i,c,l,u,s){return d(Cd,f(Sv,i,t,s),Nv,Tv,r,{bR:n,b:a,c:o,d:l,e:e,f:c})})))})),Hv={src:"\n        precision lowp float;\n        \n        uniform lowp vec3 constantColor;\n        \n        void main () {\n            gl_FragColor = vec4(constantColor, 1.0);\n        }\n    ",attributes:{},uniforms:{constantColor:"aE"}},$v={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{position:"ef"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Iv=o((function(n,e,r,t){return u(Mv,e,l((function(e,o,a,i,c,l,u,s){return d(Cd,f(Sv,i,t,s),$v,Hv,r,{aE:n,b:a,c:o,d:l,e:e,f:c})})))})),zv=r((function(n,e){return{$:3,a:n,b:e}})),_v={src:"\n        precision lowp float;\n        \n        uniform lowp vec3 constantColor;\n        uniform lowp float pointRadius;\n        uniform highp mat4 sceneProperties;\n        \n        float pointAlpha(float pointRadius, vec2 pointCoord) {\n            float pointSize = 2.0 * pointRadius;\n            float x = (pointSize + 2.0) * (pointCoord.s - 0.5);\n            float y = (pointSize + 2.0) * (pointCoord.t - 0.5);\n            float r = sqrt(x * x + y * y);\n            float innerRadius = pointRadius;\n            float outerRadius = pointRadius + 1.0;\n            if (r > outerRadius) {\n                return 0.0;\n            } else if (r > innerRadius) {\n                return outerRadius - r;\n            } else {\n                return 1.0;\n            }\n        }\n        \n        void main () {\n            float supersampling = sceneProperties[3][0];\n            float alpha = pointAlpha(pointRadius * supersampling, gl_PointCoord);\n            gl_FragColor = vec4(constantColor, alpha);\n        }\n    ",attributes:{},uniforms:{constantColor:"aE",pointRadius:"b3",sceneProperties:"e"}},Gv={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform lowp float pointRadius;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            float supersampling = sceneProperties[3][0];\n            gl_PointSize = 2.0 * pointRadius * supersampling + 2.0;\n        }\n    ",attributes:{position:"ef"},uniforms:{modelMatrix:"b",modelScale:"c",pointRadius:"b3",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Av=o((function(n,e,r,t){return u(zv,r,l((function(r,o,a,i,c,l,u,f){return d(Cd,f,Gv,_v,t,{aE:n,b:a,c:o,b3:e,d:l,e:r,f:c})})))})),Rv={src:"\n        precision mediump float;\n        \n        uniform mediump vec3 emissiveColor;\n        uniform highp mat4 sceneProperties;\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{emissiveColor:"aV",sceneProperties:"e"}},kv=Mr,Vv=a((function(n,e,r,t,o){return u(Mv,r,l((function(r,a,i,c,l,s,b,v){return d(Cd,f(Sv,c,o,v),$v,Rv,t,{aV:u(kv,e,n),b:i,c:a,d:s,e:r,f:l})})))})),Bv={src:"\n        precision mediump float;\n        \n        uniform mediump vec3 emissiveColor;\n        uniform lowp float pointRadius;\n        uniform highp mat4 sceneProperties;\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        float pointAlpha(float pointRadius, vec2 pointCoord) {\n            float pointSize = 2.0 * pointRadius;\n            float x = (pointSize + 2.0) * (pointCoord.s - 0.5);\n            float y = (pointSize + 2.0) * (pointCoord.t - 0.5);\n            float r = sqrt(x * x + y * y);\n            float innerRadius = pointRadius;\n            float outerRadius = pointRadius + 1.0;\n            if (r > outerRadius) {\n                return 0.0;\n            } else if (r > innerRadius) {\n                return outerRadius - r;\n            } else {\n                return 1.0;\n            }\n        }\n        \n        void main () {\n            vec4 color = toSrgb(emissiveColor, sceneProperties);\n            float supersampling = sceneProperties[3][0];\n            float alpha = pointAlpha(pointRadius * supersampling, gl_PointCoord);\n            gl_FragColor = vec4(color.rgb, alpha);\n        }\n    ",attributes:{},uniforms:{emissiveColor:"aV",pointRadius:"b3",sceneProperties:"e"}},Fv=a((function(n,e,r,t,o){return u(zv,t,l((function(t,a,i,c,l,f,s,b){return d(Cd,b,Gv,Bv,o,{aV:u(kv,e,n),b:i,c:a,b3:r,d:f,e:t,f:l})})))})),Ev={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 materialColor;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{enabledLights:"U",lights12:"bp",lights34:"bX",lights56:"bY",lights78:"bZ",materialColor:"cB",sceneProperties:"e",viewMatrix:"f"}},jv={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n        }\n    ",attributes:{normal:"p",position:"ef"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Uv=o((function(n,e,r,t){return u(Mv,e,l((function(e,o,a,i,c,l,u,s){var b=u.a,v=u.b;return d(Cd,f(Sv,i,t,s),jv,Ev,r,{U:v,bp:b.bp,bX:b.bX,bY:b.bY,bZ:b.bZ,cB:n,b:a,c:o,d:l,e:e,f:c})})))})),Yv={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D materialColorTexture;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n            vec3 materialColor = fromSrgb(texture2D(materialColorTexture, interpolatedUv).rgb);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{enabledLights:"U",lights12:"bp",lights34:"bX",lights56:"bY",lights78:"bZ",materialColorTexture:"cC",normalMapTexture:"a0",sceneProperties:"e",useNormalMap:"a7",viewMatrix:"f"}},Wv={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        attribute mediump vec2 uv;\n        attribute highp vec3 tangent;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getWorldTangent(vec3 modelTangent, vec4 modelScale, mat4 modelMatrix) {\n            return (modelMatrix * vec4(safeNormalize(modelScale.xyz * modelTangent), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = uv;\n            interpolatedTangent = getWorldTangent(tangent, modelScale, modelMatrix);\n        }\n    ",attributes:{normal:"p",position:"ef",tangent:"et",uv:"N"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Ov=i((function(n,e,r,t,o,a){return u(Mv,t,l((function(t,i,c,l,u,s,b,v){var m=b.a,p=b.b;return d(Cd,f(Sv,l,a,v),Wv,Yv,o,{U:p,bp:m.bp,bX:m.bX,bY:m.bY,bZ:m.bZ,cC:n,b:c,c:i,a0:e,d:s,e:t,a7:r,f:u})})))})),qv={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D baseColorTexture;\n        uniform lowp vec4 constantBaseColor;\n        uniform mediump sampler2D roughnessTexture;\n        uniform lowp vec2 constantRoughness;\n        uniform mediump sampler2D metallicTexture;\n        uniform lowp vec2 constantMetallic;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getFloatValue(sampler2D texture, vec2 uv, vec2 constantValue) {\n            if (constantValue.y == 1.0) {\n                return constantValue.x;\n            } else {\n                vec4 textureColor = texture2D(texture, uv);\n                return dot(textureColor, vec4(0.2126, 0.7152, 0.0722, 0.0));\n            }\n        }\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 baseColor = fromSrgb(texture2D(baseColorTexture, interpolatedUv).rgb) * (1.0 - constantBaseColor.w) + constantBaseColor.rgb * constantBaseColor.w;\n            float roughness = getFloatValue(roughnessTexture, interpolatedUv, constantRoughness);\n            float metallic = getFloatValue(metallicTexture, interpolatedUv, constantMetallic);\n        \n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{baseColorTexture:"cf",constantBaseColor:"ci",constantMetallic:"cj",constantRoughness:"ck",enabledLights:"U",lights12:"bp",lights34:"bX",lights56:"bY",lights78:"bZ",metallicTexture:"cF",normalMapTexture:"a0",roughnessTexture:"c0",sceneProperties:"e",useNormalMap:"a7",viewMatrix:"f"}},Xv={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 baseColor;\n        uniform lowp float roughness;\n        uniform lowp float metallic;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{baseColor:"ce",enabledLights:"U",lights12:"bp",lights34:"bX",lights56:"bY",lights78:"bZ",metallic:"cE",roughness:"c$",sceneProperties:"e",viewMatrix:"f"}},Jv=i((function(n,e,r,t,o,a){return u(Mv,t,l((function(t,i,c,l,u,s,b,v){var m=b.a,p=b.b;return d(Cd,f(Sv,l,a,v),jv,Xv,o,{ce:n,U:p,bp:m.bp,bX:m.bX,bY:m.bY,bZ:m.bZ,cE:r,b:c,c:i,d:s,c$:e,e:t,f:u})})))})),Zv=r((function(n,e){return{$:1,a:n,b:e}})),Kv=r((function(n,e){return e.$?L(e.a.D,1):L(n,0)})),Qv=s(ed,0,0,0,0),nm=r((function(n,e){var r;return e.$?L(e.a.D,Qv):L(n,s(ed,rb(r=e.a),tb(r),ob(r),1))})),em=r((function(n,e){var r,t=L(n,e);return t.a.$?u(Zv,L(r=t.a.a.D,Qv),u(Kv,r,e)):t.b.$?u(Zv,u(nm,r=t.b.a.D,n),u(Kv,r,e)):{$:0,a:t.a.a}})),rm=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),tm=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),om=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),am=u(yd,0,0),im=r((function(n,e){return e.$?L(e.a.D,am):L(n,u(yd,e.a,1))})),cm=o((function(n,e,r,t){var o,a=s(om,n,e,r,t);return a.a.$?s(tm,L(o=a.a.a.D,Qv),u(im,o,e),u(im,o,r),u(Kv,o,t)):a.b.$?s(tm,u(nm,o=a.b.a.D,n),L(o,am),u(im,o,r),u(Kv,o,t)):a.c.$?s(tm,u(nm,o=a.c.a.D,n),u(im,o,e),L(o,am),u(Kv,o,t)):a.d.$?s(tm,u(nm,o=a.d.a.D,n),u(im,o,e),u(im,o,r),L(o,1)):f(rm,a.a.a,a.b.a,a.c.a)})),lm={src:"\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        uniform mediump float backlight;\n        uniform highp mat4 sceneProperties;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            vec3 emissiveColor = fromSrgb(texture2D(colorTexture, interpolatedUv).rgb) * backlight;\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{backlight:"cb",colorTexture:"bR",sceneProperties:"e"}},um=a((function(n,e,r,t,o){return u(Mv,r,l((function(r,a,i,c,l,u,s,b){return d(Cd,f(Sv,c,o,b),Nv,lm,t,{cb:e,bR:n,b:i,c:a,d:u,e:r,f:l})})))})),fm={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        attribute mediump vec2 uv;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = uv;\n            interpolatedTangent = vec3(0.0, 0.0, 0.0);\n        }\n    ",attributes:{normal:"p",position:"ef",uv:"N"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},sm=o((function(n,e,r,t){return u(Mv,e,l((function(e,o,a,i,c,l,u,s){var b=u.a,v=u.b;return d(Cd,f(Sv,i,t,s),fm,Yv,r,{U:v,bp:b.bp,bX:b.bX,bY:b.bY,bZ:b.bZ,cC:n,b:a,c:o,a0:n,d:l,e:e,a7:0,f:c})})))})),dm=function(n){return e(9,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return n(e,r,t,o,a,i,c,l,u)}}}}}}}}}))}((function(n,e,r,t,o,a,i,c,s){return u(Mv,i,l((function(i,l,u,b,v,m,p,g){var h=p.a,x=p.b;return d(Cd,f(Sv,b,s,g),fm,qv,c,{cf:n,ci:e,cj:a,ck:t,U:x,bp:h.bp,bX:h.bX,bY:h.bY,bZ:h.bZ,cF:o,b:u,c:l,a0:n,d:m,c0:r,e:i,a7:0,f:v})})))})),bm=t((function(n,e,r){return r>.5?e+(1-r)*(n-e):n+r*(e-n)})),vm=function(n){return f(Yf,function(n){return f(bm,n.d3,n.d0,.5)}(n),function(n){return f(bm,n.d4,n.d1,.5)}(n),function(n){return f(bm,n.d5,n.d2,.5)}(n))},mm=function(n){var e=jd(n),r=e.a,t=e.b,o=e.c;return{eK:vm(n),e_:r/2,e$:t/2,e0:o/2}},pm=r((function(n,e){switch(n.$){case 0:if(n.b.$){var r=n.b.a.D;switch(e.$){case 0:case 1:case 2:case 3:case 4:return Cv;case 5:case 6:case 7:return o=e.c,a=e.d,s(Dv,r,mm(G=e.a),o,a);case 8:case 9:default:return Cv}}else{var t=n.b.a;switch(e.$){case 0:return Cv;case 1:var o=e.c,a=e.d;return s(Iv,t,mm(G=e.a),o,a);case 2:case 3:case 4:return o=e.c,a=e.d,s(Iv,t,mm(G=e.a),o,a);case 5:case 6:case 7:return o=e.c,a=e.d,s(Iv,t,mm(G=e.a),o,a);case 8:case 9:return o=e.c,s(Iv,t,mm(G=e.a),o,0);default:return o=e.d,s(Av,t,e.b,mm(G=e.a),o)}}case 1:if(n.b.$)switch(r=n.b.a.D,c=n.c,e.$){case 0:case 1:case 2:case 3:case 4:return Cv;case 5:case 6:case 7:return o=e.c,a=e.d,d(um,r,c,mm(G=e.a),o,a);case 8:case 9:default:return Cv}else{var i=n.b.a,c=n.c;switch(e.$){case 0:return Cv;case 1:case 2:case 3:case 4:case 5:case 6:case 7:return o=e.c,a=e.d,d(Vv,i,c,mm(G=e.a),o,a);case 8:case 9:return o=e.c,d(Vv,i,c,mm(G=e.a),o,0);default:return o=e.d,d(Fv,i,c,e.b,mm(G=e.a),o)}}case 2:var v=u(em,n.b,n.c);if(v.$){var m=v.a.a,p=v.b,g=p.a,h=p.b;switch(e.$){case 0:case 1:case 2:case 3:case 4:case 5:return Cv;case 6:return o=e.c,P=e.d,s(sm,m,mm(G=e.a),o,P);case 7:return o=e.c,P=e.d,b(Ov,m,g,h,mm(G=e.a),o,P);case 8:case 9:default:return Cv}}else{var x=v.a;switch(e.$){case 0:case 1:return Cv;case 2:o=e.c;var P=e.d;return s(Uv,x,mm(G=e.a),o,P);case 3:return Cv;case 4:return o=e.c,P=e.d,s(Uv,x,mm(G=e.a),o,P);case 5:return Cv;case 6:case 7:return o=e.c,P=e.d,s(Uv,x,mm(G=e.a),o,P);case 8:case 9:default:return Cv}}default:var C=s(cm,n.b,n.c,n.d,n.e);if(C.$){var M=C.a,T=M.a,y=M.b,L=C.b,w=L.a,S=L.b,N=C.c,D=N.a,H=N.b,$=C.d;switch(g=$.a,h=$.b,e.$){case 0:case 1:case 2:case 3:case 4:case 5:return Cv;case 6:return o=e.c,a=e.d,function(n,e,r,t,o,a,i,c,l,u){return 9===n.a?n.f(e,r,t,o,a,i,c,l,u):n(e)(r)(t)(o)(a)(i)(c)(l)(u)}(dm,T,y,w,S,D,H,mm(G=e.a),o,a);case 7:return G=e.a,o=e.c,a=e.d,function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(s){return function(b){return function(v){return u(Mv,s,l((function(l,u,s,m,p,g,h,x){var P=h.a,C=h.b;return d(Cd,f(Sv,m,v,x),Wv,qv,b,{cf:n,ci:e,cj:a,ck:t,U:C,bp:P.bp,bX:P.bX,bY:P.bY,bZ:P.bZ,cF:o,b:s,c:u,a0:i,d:g,c0:r,e:l,a7:c,f:p})})))}}}}}}}}}}}(T)(y)(w)(S)(D)(H)(g)(h)(mm(G))(o)(a);case 8:case 9:default:return Cv}}else{var I=C.a,z=C.b,_=C.c;switch(e.$){case 0:case 1:return Cv;case 2:return o=e.c,a=e.d,b(Jv,I,z,_,mm(G=e.a),o,a);case 3:return Cv;case 4:return o=e.c,a=e.d,b(Jv,I,z,_,mm(G=e.a),o,a);case 5:return Cv;case 6:return o=e.c,a=e.d,b(Jv,I,z,_,mm(G=e.a),o,a);case 7:var G;return o=e.c,a=e.d,b(Jv,I,z,_,mm(G=e.a),o,a);case 8:case 9:default:return Cv}}}})),gm=function(n){return n.bG},hm=function(n){return n.bH},xm=function(n){return n.bI},Pm=function(n){var e=n,r=xm(e.dh),t=hm(e.dh),o=gm(e.dh),a=xm(e.dg),i=hm(e.dg),c=gm(e.dg),l=xm(e.df),u=hm(e.df),f=gm(e.df);return f*i*r+u*a*o+l*c*t-l*i*o-u*c*r-f*a*t>0},Cm=r((function(n,e){return{$:5,a:n,b:e}})),Mm=r((function(n,e){var r=e;switch(r.$){case 0:return Cv;case 5:var t=r.b;return u(Cm,u(ld,r.a,n),t);case 1:case 3:case 2:default:return u(Cm,n,r)}})),Tm=r((function(n,e){return u(Mm,function(n){var e=Qu(n),r=lf(n),t=as(n),o=os(n);return{dD:Pm(n),s:o.bG,t:o.bH,u:o.bI,v:t.bG,w:t.bH,x:t.bI,y:r.bG,z:r.bH,A:r.bI,J:e.bG,K:e.bH,L:e.bI,b7:1}}(n),e)})),ym=function(n){return{$:2,a:n}},Lm=r((function(n,e){var r=n.a,t=n.b,o=n.c,a=e.eK;return{eK:{bG:r*a.bG,bH:t*a.bH,bI:o*a.bI},e_:r*e.e_,e$:t*e.e$,e0:o*e.e0}})),wm=function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){var f,s,d={bG:(s=t)[0],bH:s[1],bI:s[2],ey:s[3]},b=(f={ey:d.ey,bG:d.bG*n.a,bH:d.bH*n.b,bI:d.bI*n.c},new Float64Array([f.bG,f.bH,f.bI,f.ey]));return m(e,r,b,o,a,i,c,l,u)}}}}}}}}}},Sm=r((function(n,e){switch(e.$){case 0:return Pv;case 5:return u(Cm,e.a,u(Sm,n,e.b));case 1:var r=e.b;return u(Mv,u(Lm,n,e.a),u(wm,n,r));case 3:return e;case 2:return ym(u(wm,n,r=e.a));default:var t=e.a;return ab(u(Ut,Sm(n),t))}})),Nm=r((function(n,e){return u(Sm,n,e)})),Dm={src:"\n        precision lowp float;\n        \n        void main () {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        }\n    ",attributes:{},uniforms:{}},Hm=f(Nd,{cA:0,cY:0,de:15},{bi:Id,bx:hd,bJ:Id,bK:7683},{bi:Id,bx:hd,bJ:Id,bK:7682}),$m=f(Nd,{cA:0,cY:0,de:15},{bi:Id,bx:hd,bJ:Id,bK:7682},{bi:Id,bx:hd,bJ:Id,bK:7683}),Im=r((function(n,e){return u(yr,n?$m:Hm,e)})),zm={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 shadowVertexPosition(vec3 position, vec3 normal, mat4 shadowLight, vec4 modelScale, mat4 modelMatrix, mat4 viewMatrix, mat4 projectionMatrix, mat4 sceneProperties) {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            vec3 worldNormal = getWorldNormal(normal, vec4(modelScale.xyz, 1.0), modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 directionToLight = getDirectionToLight(worldPosition.xyz, xyz_type, rgb_parameter);\n            vec3 offset = vec3(0.0, 0.0, 0.0);\n            float sceneDiameter = sceneProperties[3][1];\n            if (dot(directionToLight, worldNormal) <= 0.0) {\n                offset = -sceneDiameter * directionToLight;\n            } else {\n                offset = -0.001 * sceneDiameter * directionToLight;\n            }\n            vec4 offsetPosition = worldPosition + vec4(offset, 0.0);\n            return projectionMatrix * (viewMatrix * offsetPosition);\n        }\n        \n        void main () {\n            gl_Position = shadowVertexPosition(\n                position,\n                normal,\n                shadowLight,\n                modelScale,\n                modelMatrix,\n                viewMatrix,\n                projectionMatrix,\n                sceneProperties\n            );\n        }\n    ",attributes:{normal:"p",position:"ef"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"b8",viewMatrix:"f"}},_m=function(n){var e=function(n){if(n.$){var e=n.c;return kr(l((function(n,r,t,o,a,i,c,l){return d(Cd,u(Im,o,l),zm,Dm,e,{b:t,c:r,d:i,e:n,b8:c,f:a})})))}return Vr}(n);return e.$?Cv:ym(e.a)},Gm=o((function(n,e,r,t){var o,a=u(pm,r,Wb),i=(o=L(n,e)).a?o.b?cb(I([a,_m(xv)])):a:o.b?_m(xv):Cv,c=ts(t),l=c.a,f=c.b,s=c.c;return u(Tm,rs(t),u(Nm,w(l,f,s),i))})),Am=r((function(n,e){return s(Gm,!0,!0,n,e)})),Rm=function(n){return{$:0,a:n}},km=r((function(n,e){return{$:0,a:n,b:e}})),Vm=function(n){return Ru(n)},Bm=r((function(n,e){var r=n.ef;return u(yr,{p:Bb(n.p),ef:Vb(r)},e)})),Fm=c((function(n,e,r,t,o,a,i){for(;;){if(!i.b)return Gb({d0:e,d1:t,d2:a,d3:n,d4:r,d5:o});var c=i.a,l=i.b,f=ob(c.ef),s=tb(c.ef),d=rb(c.ef);n=u(Xd,n,d),e=u(st,e,d),r=u(Xd,r,s),t=u(st,t,s),o=u(Xd,o,f),a=u(st,a,f),i=l}})),Em=r((function(n,e){var r=ob(n.ef),t=tb(n.ef),o=rb(n.ef);return v(Fm,o,o,t,t,r,r,e)})),jm=r((function(n,e){var r=n.dg,t=n.df;return{bG:e.bG*t.bG+e.bH*r.bG,bH:e.bG*t.bH+e.bH*r.bH,bI:e.bG*t.bI+e.bH*r.bI}})),Um=function(n){return mf(n)},Ym=function(n){return 6.283185307179586*n},Wm={cJ:Iu,df:Is,dg:Gs},Om=(ta=u(Ku,72,Ym(1)),oa=Df,aa=rf,ca=f(Yf,0,0,ia=u(Uu,.5,1)),ua=f(Yf,0,0,la=u(Uu,-.5,1)),Hb(function(n){var e=f(wr,Bm,D,rv(n));if(e.b){var r=e.a,t=e.b,o=u(uv,e,Jb(n));return s(Lb,u(Em,r,t),n,o,0)}return $b}(gv(Os(u(Ut,(function(n){var e=u(Uu,n,ta),r=u(jm,Wm,pf(e)),t=u(Uu,Vm(e),1),o=u(Uu,Um(e),1),a=f(Yf,t,o,ia),i=f(Yf,t,o,la),c=u(Uu,u(pc,72,n+1),ta),l=u(jm,Wm,pf(c)),s=u(Uu,Vm(c),1),d=u(Uu,Um(c),1),b=f(Yf,s,d,la),v=f(Yf,s,d,ia);return I([w({p:aa,ef:ua},{p:aa,ef:b},{p:aa,ef:i}),w({p:r,ef:i},{p:l,ef:b},{p:l,ef:v}),w({p:r,ef:i},{p:l,ef:v},{p:r,ef:a}),w({p:oa,ef:ca},{p:oa,ef:a},{p:oa,ef:v})])}),u(qr,0,71))))))),qm=hv(Om),Xm=o((function(n,e,r,t){var o,a=function(n){var e=ju(n),r=Du(e),t=r.a,o=r.b;return{cJ:Yu(n),df:t,dg:o,dh:e}}(function(n){return n.l}(t)),i=u(pm,r,Om),c=(o=L(n,e)).a?o.b?cb(I([i,_m(qm)])):i:o.b?_m(qm):Cv,l=function(n){return n.fn}(t),f=function(n){return n.e9}(t);return u(Tm,a,u(Nm,w(l,l,f),c))})),Jm=r((function(n,e){return s(Xm,!0,!0,n,e)})),Zm={src:"\n        precision highp float;\n        \n        attribute lowp float triangleVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 triangleVertexPositions;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleVertex), triangleVertexPositions, position, normal);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{triangleVertex:"c7"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",triangleVertexPositions:"bD",viewMatrix:"f"}},Km={src:"\n        precision highp float;\n        \n        attribute lowp float triangleVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 triangleVertexPositions;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleVertex), triangleVertexPositions, position, normal);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n        }\n    ",attributes:{triangleVertex:"c7"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",triangleVertexPositions:"bD",viewMatrix:"f"}},Qm=function(n){var e=n.a,r=n.b,t=n.c;return ud({dL:e.bG,dM:r.bG,dN:t.bG,dO:0,dP:e.bH,dQ:r.bH,dR:t.bH,dS:0,dT:e.bI,dU:r.bI,dV:t.bI,dW:0,dX:0,dY:0,dZ:0,d_:0})},np=Ub(I([w({c7:0},{c7:1},{c7:2})])),ep=r((function(n,e){var r=Rb(e),t=mm(r);switch(n.$){case 0:if(n.b.$)return Cv;var o=n.b.a;return u(Mv,t,l((function(n,r,t,a,i,c,l,u){return d(Cd,f(Sv,a,0,u),Zm,Hv,np,{aE:o,b:t,c:r,d:c,e:n,bD:Qm(e),f:i})})));case 1:if(n.b.$)return Cv;var a=n.b.a,i=n.c;return u(Mv,t,l((function(n,r,t,o,c,l,s,b){return d(Cd,f(Sv,o,0,b),Zm,Rv,np,{aV:u(kv,i,a),b:t,c:r,d:l,e:n,bD:Qm(e),f:c})})));case 2:var c=u(em,n.b,n.c);if(c.$)return Cv;var b=c.a;return u(Mv,t,l((function(n,r,t,o,a,i,c,l){var u=c.a,s=c.b;return d(Cd,f(Sv,o,0,l),Km,Ev,np,{U:s,bp:u.bp,bX:u.bX,bY:u.bY,bZ:u.bZ,cB:b,b:t,c:r,d:i,e:n,bD:Qm(e),f:a})})));default:var v=s(cm,n.b,n.c,n.d,n.e);if(v.$)return Cv;var m=v.a,p=v.b,g=v.c;return u(Mv,t,l((function(n,r,t,o,a,i,c,l){var u=c.a,s=c.b;return d(Cd,f(Sv,o,0,l),Km,Xv,np,{ce:m,U:s,bp:u.bp,bX:u.bX,bY:u.bY,bZ:u.bZ,cE:g,b:t,c:r,d:i,c$:p,e:n,bD:Qm(e),f:a})})))}})),rp=(fa=I([{a6:u(yd,0,1)},{a6:u(yd,1,1)},{a6:u(yd,2,1)},{a6:u(yd,0,-1)},{a6:u(yd,1,-1)},{a6:u(yd,2,-1)}]),sa=I([w(0,1,2),w(3,5,4),w(3,4,1),w(3,1,0),w(4,5,2),w(4,2,1),w(5,3,0),w(5,0,2)]),u(uv,fa,sa)),tp={src:"\n        precision highp float;\n        \n        attribute highp vec2 triangleShadowVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        uniform highp mat4 triangleVertexPositions;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 shadowVertexPosition(vec3 position, vec3 normal, mat4 shadowLight, vec4 modelScale, mat4 modelMatrix, mat4 viewMatrix, mat4 projectionMatrix, mat4 sceneProperties) {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            vec3 worldNormal = getWorldNormal(normal, vec4(modelScale.xyz, 1.0), modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 directionToLight = getDirectionToLight(worldPosition.xyz, xyz_type, rgb_parameter);\n            vec3 offset = vec3(0.0, 0.0, 0.0);\n            float sceneDiameter = sceneProperties[3][1];\n            if (dot(directionToLight, worldNormal) <= 0.0) {\n                offset = -sceneDiameter * directionToLight;\n            } else {\n                offset = -0.001 * sceneDiameter * directionToLight;\n            }\n            vec4 offsetPosition = worldPosition + vec4(offset, 0.0);\n            return projectionMatrix * (viewMatrix * offsetPosition);\n        }\n        \n        void main () {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleShadowVertex.x), triangleVertexPositions, position, normal);\n            normal *= triangleShadowVertex.y;\n            gl_Position = shadowVertexPosition(\n                position,\n                normal,\n                shadowLight,\n                modelScale,\n                modelMatrix,\n                viewMatrix,\n                projectionMatrix,\n                sceneProperties\n            );\n        }\n    ",attributes:{triangleShadowVertex:"a6"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"b8",triangleVertexPositions:"bD",viewMatrix:"f"}},op=function(n){return ym(l((function(e,r,t,o,a,i,c,l){return d(Cd,u(Im,o,l),tp,Dm,rp,{b:t,c:r,d:i,e:e,b8:c,bD:Qm(n),f:a})})))},ap=o((function(n,e,r,t){var o=u(ep,r,t),a=L(n,e);return a.a?a.b?cb(I([o,op(t)])):o:a.b?op(t):Cv})),ip=r((function(n,e){return s(ap,!0,!0,n,e)})),cp=r((function(n,e){var r=Tf(e),t=Tf(n),o=Mf(e),a=Mf(n),i=Pf(e),c=Pf(n);return{d0:u(qd,c,i),d1:u(qd,a,o),d2:u(qd,t,r),d3:u(Jd,c,i),d4:u(Jd,a,o),d5:u(Jd,t,r)}})),lp={src:"\n        precision highp float;\n        \n        attribute lowp float lineSegmentVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp vec3 lineSegmentStartPoint;\n        uniform highp vec3 lineSegmentEndPoint;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = (1.0 - lineSegmentVertex) * lineSegmentStartPoint + lineSegmentVertex * lineSegmentEndPoint;\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{lineSegmentVertex:"dK"},uniforms:{lineSegmentEndPoint:"dI",lineSegmentStartPoint:"dJ",modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},up=r((function(n,e){return{$:1,a:n,b:e}}))({ds:2,dC:0,d7:1})(I([L({dK:0},{dK:1})])),fp=r((function(n,e){var r,t=u(cp,(r=e).a,r.b),o=mm(t),a=e.a,i=e.b;switch(n.$){case 0:if(n.b.$)return Cv;var c=n.b.a;return u(Mv,o,l((function(n,e,r,t,o,l,u,f){return d(Cd,f,lp,Hv,up,{aE:c,dI:Vb(i),dJ:Vb(a),b:r,c:e,d:l,e:n,f:o})})));case 1:if(n.b.$)return Cv;c=n.b.a;var f=n.c;return u(Mv,o,l((function(n,e,r,t,o,l,s,b){return d(Cd,b,lp,Rv,up,{aV:u(kv,f,c),dI:Vb(i),dJ:Vb(a),b:r,c:e,d:l,e:n,f:o})})));case 2:default:return Cv}})),sp=r((function(n,e){return u(fp,n,e)})),dp=t((function(n,e,r){return{$:2,a:n,b:e,c:r}})),bp=function(n){return f(Rf,0,1,n>.04045?u(Oi,(n+.055)/1.055,2.4):n/12.92)},vp=function(n){return f(dp,0,Rm(function(n){var e=xc(n),r=e.co,t=e.cg;return f(id,bp(e.cX),bp(r),bp(t))}(n)),Rm(0))},mp=r((function(n,e){return n/e})),pp=a((function(n,e,r,t,o){for(;;){var a=t(e/r),i=u(yr,a,o);if(C(e,n))return i;n=n,e-=1,r=r,t=t,o=i}})),gp=r((function(n,e){return 1>n?D:d(pp,0,n,n,e,D)})),hp=r((function(n,e){var r=n.ef,t=n.N,o=t.a,a=t.b;return u(yr,{p:Bb(n.p),ef:Vb(r),N:u(yd,o,a)},e)})),xp=r((function(n,e){var r=n,t=e,o=Ru(t);return{bG:o*Ru(r),bH:o*mf(r),bI:mf(t)}})),Pp=(da=u(qr,0,71),ba=u(gp,72,u(bm,0,Ym(1))),va=rt(36),ma=u(qr,0,va-1),pa=u(gp,va,u(bm,pu(90),pu(-90))),ga=av(Os(u(Ut,(function(n){return u(Ut,(function(e){return{p:u(xp,n,e),ef:f(Yf,u(Uu,Vm(e)*Vm(n),1),u(Uu,Vm(e)*Um(n),1),u(Uu,Um(e),1)),N:L(u(mp,n,Ym(1)),u(mp,u(Kd,pu(90),e),pu(180)))}}),pa)}),ba))),ha=r((function(n,e){return n*(va+1)+e})),xa=Os(u(Ut,(function(n){return Os(u(Ut,(function(e){var r=u(ha,n+1,e),t=u(ha,n,e),o=u(ha,n+1,e+1),a=u(ha,n,e+1);return I([w(a,o,r),w(a,r,t)])}),ma))}),da)),Hb(function(n){var e=f(wr,hp,D,rv(n));if(e.b){var r=e.a,t=e.b,o=u(uv,e,Jb(n));return s(wb,u(Em,r,t),n,o,0)}return $b}(u(lv,ga,xa)))),Cp=r((function(n,e){for(;;){var r=u(pc,144,2*n+3),t=u(pc,144,2*n+2),o=2*n+1,a=2*n,i=u(yr,w(144,a,t),u(yr,w(a,r,t),u(yr,w(a,o,r),u(yr,w(o,145,r),e))));if(!n)return i;n-=1,e=i}})),Mp=t((function(n,e,r){return r>.5?e+(1-r)*(n-e):n+r*(e-n)})),Tp=(Pa=u(r((function(n,e){for(;;){var r=f(Mp,0,6.283185307179586,n/72),t=u(yr,{bM:r,b0:0,b6:1},u(yr,{bM:r,b0:1,b6:1},e));if(!n)return t;n-=1,e=t}})),71,I([{bM:0,b0:0,b6:0},{bM:0,b0:1,b6:0}])),u(uv,Pa,u(Cp,71,D))),yp={src:"\n        precision highp float;\n        \n        attribute highp float angle;\n        attribute highp float offsetScale;\n        attribute highp float radiusScale;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const lowp float kPerspectiveProjection = 0.0;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec3 perpendicularTo(vec3 d) {\n            float absX = abs(d.x);\n            float absY = abs(d.y);\n            float absZ = abs(d.z);\n            if (absX <= absY) {\n                if (absX <= absZ) {\n                    float scale = 1.0 / length(d.zy);\n                    return vec3(0.0, -d.z * scale, d.y * scale);\n                } else {\n                    float scale = 1.0 / length(d.xy);\n                    return vec3(-d.y * scale, d.x * scale, 0.0);\n                }\n            } else {\n                if (absY <= absZ) {\n                    float scale = 1.0 / length(d.xz);\n                    return vec3(d.z * scale, 0.0, -d.x * scale);\n                } else {\n                    float scale = 1.0 / length(d.xy);\n                    return vec3(-d.y * scale, d.x * scale, 0.0);\n                }\n            }\n        }\n        \n        void main () {\n            vec4 worldCenter = getWorldPosition(vec3(0.0, 0.0, 0.0), modelScale, modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 zDirection = getDirectionToLight(worldCenter.xyz, xyz_type, rgb_parameter);\n            vec3 xDirection = perpendicularTo(zDirection);\n            vec3 yDirection = cross(zDirection, xDirection);\n            float r = modelScale.x;\n            float adjustedRadius = r;\n            float zOffset = 0.0;\n            if (xyz_type.w == kPointLight) {\n                float distanceToLight = length(xyz_type.xyz - worldCenter.xyz);\n                float rSquared = r * r;\n                zOffset = rSquared / distanceToLight;\n                float zSquared = zOffset * zOffset;\n                adjustedRadius = sqrt(rSquared - zSquared) * radiusScale;\n            }\n            vec3 worldPosition =\n                worldCenter.xyz\n                    + zDirection * zOffset\n                    + xDirection * adjustedRadius * cos(angle)\n                    + yDirection * adjustedRadius * sin(angle);\n            vec3 directionToLight = getDirectionToLight(worldPosition, xyz_type, rgb_parameter);\n            float sceneDiameter = sceneProperties[3][1];\n            vec3 offset = -sceneDiameter * offsetScale * directionToLight;\n            vec4 offsetPosition = vec4(worldPosition + offset, 1.0);\n            gl_Position = projectionMatrix * (viewMatrix * offsetPosition);\n        }\n    ",attributes:{angle:"bM",offsetScale:"b0",radiusScale:"b6"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"b8",viewMatrix:"f"}},Lp=function(){return ym(l((function(n,e,r,t,o,a,i,c){return d(Cd,u(Im,!0,c),yp,Dm,Tp,{aE:f(id,0,0,1),b:r,c:e,d:a,e:n,b8:i,f:o})})))},wp=r((function(n,e){return u(Mm,function(n){return{dD:!0,s:1,t:0,u:0,v:0,w:1,x:0,y:0,z:0,A:1,J:n.bG,K:n.bH,L:n.bI,b7:1}}(n),e)})),Sp=o((function(n,e,r,t){var o,a=u(pm,r,Pp),i=(o=L(n,e)).a?o.b?cb(I([a,Lp()])):a:o.b?Lp():Cv,c=bs(t);return u(wp,u(Cu,Iu,ds(t)),u(Nm,w(c,c,c),i))})),Np=r((function(n,e){return s(Sp,!0,!0,n,e)})),Dp=function(n){switch(n.$){case 0:var e=n.b;return I([u(Am,vp(n.a),e)]);case 1:var r=n.b;return I([u(ip,vp(n.a),r)]);case 3:var t=n.b;return I([u(Np,vp(n.a),t)]);case 2:var o=n.b;return I([u(Jm,vp(n.a),o)]);case 4:var a=n.b;return I([u(sp,(i=n.a,u(km,0,Rm(function(n){var e=xc(n);return f(id,e.cX,e.co,e.cg)}(i)))),a)]);default:return u(qs,Dp,n.a)}var i},Hp=r((function(n,e){return r={eA:n.eA,dl:n.eE,eH:n.eH,eM:n.eM,dr:L(qi(n.ad.dd),qi(n.ad.cp)),dw:(t=e,u(qs,Dp,t)),eU:n.eU,fb:n.fb,fB:n.fB,fH:n.fH},u(Mb,{eA:r.eA,dl:r.dl,eH:r.eH,eM:r.eM,dr:r.dr},I([{dw:r.dw,eU:r.eU,fb:r.fb,fB:r.fB,fH:r.fH}]));var r,t})),$p=function(n){return n*mu/180},Ip=r((function(n,e){var r=n,t=e.eP,o=t.bG,a=t.bH,i=t.bI,c=u(cd,e.cq,e.bP);return{bN:ob(c),eJ:r,bT:tb(c),cU:0,b5:rb(c),c8:1,bG:-o,bH:-a,bI:-i}})),zp={bG:.37208,bH:.37529},_p=r((function(n,e){return{$:2,a:n,b:e}})),Gp=function(n){return{$:0,a:n}},Ap=function(n){return n.eJ},Rp=Gp(db.a),kp=r((function(n,e){return f(jt,r((function(e,r){var t=r.a,o=r.b;return n(e)?L(u(yr,e,t),o):L(t,u(yr,e,o))})),L(D,D),e)})),Vp=function(n){return ud({dL:n.bG,dM:n.b5,dN:0,dO:0,dP:n.bH,dQ:n.bT,dR:0,dS:0,dT:n.bI,dU:n.bN,dV:0,dW:0,dX:n.c8,dY:n.cU,dZ:0,d_:0})},Bp=l((function(n,e,r,t,o,a,i,c){var l=u(kp,Ap,I([n,e,r,t])),f=l.a;if(f.b){var s=N(f,l.b);if(s.b&&s.b.b&&s.b.b.b&&s.b.b.b.b&&!s.b.b.b.b.b){var d=s.a,b=s.b,v=b.a,m=b.b,p=m.a,g=m.b.a;return u(_p,u(Ut,Vp,f),{bp:u(sb,d,v),bX:u(sb,p,g),bY:u(sb,o,a),bZ:u(sb,i,c)})}return Rp}return Gp({bp:u(sb,n,e),bX:u(sb,r,t),bY:u(sb,o,a),bZ:u(sb,i,c)})})),Fp=o((function(n,e,r,t){return m(Bp,n,e,r,t,fb,fb,fb,fb)})),Ep={$:5},jp={bG:.44757,bH:.40745},Up={$:1},Yp=r((function(n,e){var r=n,t=e.ef,o=t.bG,a=t.bH,i=t.bI,c=u(cd,e.cq,e.bP);return{bN:ob(c),eJ:r,bT:tb(c),cU:0,b5:rb(c),c8:2,bG:o,bH:a,bI:i}})),Wp=function(n){return u(Yp,!0,{bP:n.bP,cq:n.cq,ef:n.ef})};Ca={Main:{init:s(bu,r((function(n,e){var r,t,o,a=(r={dk:$p(-90),bP:(t=f(Rf,1667,25e3,2e3),o=t>4e3?-3025846900/(t*t*t)+2107037.9/(t*t)+.2226347*1e3/t+.24039:-266123900.00000003/(t*t*t)-.2343589*1e6/(t*t)+877.6956/t+.17991,{bG:o,bH:t>2222?t>4e3?o*o*o*3.081758-o*o*5.8733867+3.75112997*o-.37001483:o*o*o*-.9549476-o*o*1.37418593+2.09137015*o-.16748867:o*o*o*-1.1063814-o*o*1.3481102+2.18555832*o-.20219683}),dt:$p(-45),cq:100},u(Ip,!0,{bP:r.bP,eP:u(xp,r.dk,r.dt),cq:r.cq})),i=Wp({bP:zp,cq:6e3,ef:{bG:2,bH:3,bI:3}}),c=function(n){return function(n){for(;;){if(C(n.e6,0)&&C(n.e7,0))return fb;if(!u(Tu,zu(n.e6),zu(n.e7))){var e=Mc(n.e7/mu),r=Mc(n.e6/mu),t=n.fC,o=t.bG,a=t.bH,i=t.bI,c=u(cd,1,n.bP);return{bN:r*ob(c),eJ:!1,bT:r*tb(c),cU:e/r,b5:r*rb(c),c8:3,bG:o,bH:a,bI:i}}n={bP:n.bP,e6:n.e7,e7:n.e6,fC:cf(n.fC)}}}({bP:n.bP,e6:n.e6,e7:n.e7,fC:u(xp,n.dk,n.dt)})}({dk:$p(0),bP:zp,dt:$p(-45),e6:20,e7:10}),l=Wp({bP:jp,cq:6e3,ef:{bG:-2,bH:4,bI:3}});return u(Hp,{eA:Up,eE:Ll,eH:Bu(n),eM:.1,eU:1.2*u(Oi,2,6),fb:s(Fp,l,i,a,c),ad:n.ad,fB:Ep,fH:zp},I([u(Fs,n,e)]))})),Af,u(Mt,D,D),(function(){return{aF:vu}}))(u(Pt,(function(n){return St({cl:n})}),u(Tt,"devicePixelRatio",yt)))(0)}},n.Elm?function n(e,r){for(var t in r)t in e?"init"==t?P(6):n(e[t],r[t]):e[t]=r[t]}(n.Elm,Ca):n.Elm=Ca}(n);const e=n.Elm.Main.init({node:document.getElementById("elm-node"),flags:{devicePixelRatio:window.devicePixelRatio}});function r(n){const e=[];for(let r=0;r<n.length;r++)e.push({identifier:n[r].identifier,pageX:n[r].pageX,pageY:n[r].pageY});return e}window.addEventListener("touchstart",(n=>{e.ports.touchStart.send(r(n.changedTouches))})),window.addEventListener("touchmove",(n=>{e.ports.touchMove.send(r(n.changedTouches))})),window.addEventListener("touchend",(n=>{e.ports.touchEnd.send(r(n.changedTouches))})),window.addEventListener("touchcancel",(n=>{e.ports.touchCancel.send(r(n.changedTouches))}))}();
//# sourceMappingURL=index.8087e956.js.map
