!function(){var n={};!function(n){function e(n,e,r){return r.a=n,r.f=e,r}function r(n){return e(2,n,(function(e){return function(r){return n(e,r)}}))}function t(n){return e(3,n,(function(e){return function(r){return function(t){return n(e,r,t)}}}))}function o(n){return e(4,n,(function(e){return function(r){return function(t){return function(o){return n(e,r,t,o)}}}}))}function a(n){return e(5,n,(function(e){return function(r){return function(t){return function(o){return function(a){return n(e,r,t,o,a)}}}}}))}function i(n){return e(6,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return n(e,r,t,o,a,i)}}}}}}))}function c(n){return e(7,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return n(e,r,t,o,a,i,c)}}}}}}}))}function l(n){return e(8,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return n(e,r,t,o,a,i,c,l)}}}}}}}}))}function u(n,e,r){return 2===n.a?n.f(e,r):n(e)(r)}function f(n,e,r,t){return 3===n.a?n.f(e,r,t):n(e)(r)(t)}function s(n,e,r,t,o){return 4===n.a?n.f(e,r,t,o):n(e)(r)(t)(o)}function d(n,e,r,t,o,a){return 5===n.a?n.f(e,r,t,o,a):n(e)(r)(t)(o)(a)}function b(n,e,r,t,o,a,i){return 6===n.a?n.f(e,r,t,o,a,i):n(e)(r)(t)(o)(a)(i)}function v(n,e,r,t,o,a,i,c){return 7===n.a?n.f(e,r,t,o,a,i,c):n(e)(r)(t)(o)(a)(i)(c)}function m(n,e,r,t,o,a,i,c,l){return 8===n.a?n.f(e,r,t,o,a,i,c,l):n(e)(r)(t)(o)(a)(i)(c)(l)}var p=t((function(n,e,r){for(var t=Array(n),o=0;n>o;o++)t[o]=r(e+o);return t})),g=r((function(n,e){for(var r=Array(n),t=0;n>t&&e.b;t++)r[t]=e.a,e=e.b;return r.length=t,L(r,e)})),h=r((function(n,e){return e[n]})),x=t((function(n,e,r){for(var t=r.length-1;t>=0;t--)e=u(n,r[t],e);return e}));function C(n){throw Error("https://github.com/elm/core/blob/1.0.0/hints/"+n+".md")}function M(n,e){for(var r,t=[],o=P(n,e,0,t);o&&(r=t.pop());o=P(r.a,r.b,0,t));return o}function P(n,e,r,t){if(n===e)return!0;if("object"!=typeof n||null===n||null===e)return"function"==typeof n&&C(5),!1;if(r>100)return t.push(L(n,e)),!0;for(var o in 0>n.$&&(n=Sr(n),e=Sr(e)),n)if(!P(n[o],e[o],r+1,t))return!1;return!0}function y(n,e,r){if("object"!=typeof n)return n===e?0:e>n?-1:1;if(void 0===n.$)return(r=y(n.a,e.a))||(r=y(n.b,e.b))?r:y(n.c,e.c);for(;n.b&&e.b&&!(r=y(n.a,e.a));n=n.b,e=e.b);return r||(n.b?1:e.b?-1:0)}var T=r((function(n,e){var r=y(n,e);return 0>r?Nr:r?Fr:Er}));function L(n,e){return{a:n,b:e}}function D(n,e,r){return{a:n,b:e,c:r}}function w(n,e){var r={};for(var t in n)r[t]=n[t];for(var t in e)r[t]=e[t];return r}function S(n,e){if("string"==typeof n)return n+e;if(!n.b)return e;var r=F(n.a,e);n=n.b;for(var t=r;n.b;n=n.b)t=t.b=F(n.a,e);return r}var E={$:0};function F(n,e){return{$:1,a:n,b:e}}var N=r(F);function $(n){for(var e=E,r=n.length;r--;)e=F(n[r],e);return e}function z(n){for(var e=[];n.b;n=n.b)e.push(n.a);return e}var _=t((function(n,e,r){for(var t=[];e.b&&r.b;e=e.b,r=r.b)t.push(u(n,e.a,r.a));return $(t)})),A=r((function(n,e){return n*e})),R=r(Math.pow),V=r((function(n,e){var r=e%n;return 0===n?C(11):r>0&&0>n||0>r&&n>0?r+n:r})),k=Math.cos,B=Math.sin,H=Math.tan,W=Math.ceil,I=Math.floor,j=Math.round,U=Math.sqrt,O=Math.log,G=isNaN,q=r((function(n,e){return n+e})),X=t((function(n,e,r){for(var t=r.length;t--;){var o=r[t],a=r.charCodeAt(t);56320>a||a>57343||(o=r[--t]+o),e=u(n,o,e)}return e})),Y=r((function(n,e){return e.split(n)})),J=r((function(n,e){return e.join(n)})),Z=t((function(n,e,r){return r.slice(n,e)})),K=r((function(n,e){return 0===e.indexOf(n)}));function Q(n){return n+""}function nn(n){return{$:2,b:n}}var en=nn((function(n){return"number"!=typeof n?hn("an INT",n):n>-2147483647&&2147483647>n&&(0|n)===n?Rr(n):!isFinite(n)||n%1?hn("an INT",n):Rr(n)})),rn=nn((function(n){return"boolean"==typeof n?Rr(n):hn("a BOOL",n)})),tn=nn((function(n){return"number"==typeof n?Rr(n):hn("a FLOAT",n)})),on=(nn((function(n){return Rr(n)})),nn((function(n){return"string"==typeof n?Rr(n):n instanceof String?Rr(n+""):hn("a STRING",n)}))),an=r((function(n,e){return{$:6,d:n,b:e}}));function cn(n,e){return{$:9,f:n,g:e}}var ln=r((function(n,e){return{$:10,b:e,h:n}})),un=r((function(n,e){return cn(n,[e])})),fn=t((function(n,e,r){return cn(n,[e,r])})),sn=o((function(n,e,r,t){return cn(n,[e,r,t])})),dn=r((function(n,e){try{return vn(n,JSON.parse(e))}catch(n){return $r(u(zr,"This is not valid JSON! "+n.message,e))}})),bn=r((function(n,e){return vn(n,e)}));function vn(n,e){switch(n.$){case 2:return n.b(e);case 5:return null===e?Rr(n.c):hn("null",e);case 3:return pn(e)?mn(n.b,e,$):hn("a LIST",e);case 4:return pn(e)?mn(n.b,e,gn):hn("an ARRAY",e);case 6:var r=n.d;if("object"!=typeof e||null===e||!(r in e))return hn("an OBJECT with a field named `"+r+"`",e);var t=vn(n.b,e[r]);return xt(t)?t:$r(u(_r,r,t.a));case 7:var o=n.e;return pn(e)?e.length>o?(t=vn(n.b,e[o]),xt(t)?t:$r(u(Ar,o,t.a))):hn("a LONGER array. Need index "+o+" but only see "+e.length+" entries",e):hn("an ARRAY",e);case 8:if("object"!=typeof e||null===e||pn(e))return hn("an OBJECT",e);var a=E;for(var i in e)if(e.hasOwnProperty(i)){if(t=vn(n.b,e[i]),!xt(t))return $r(u(_r,i,t.a));a=F(L(i,t.a),a)}return Rr(Zr(a));case 9:for(var c=n.f,l=n.g,f=0;l.length>f;f++){if(t=vn(l[f],e),!xt(t))return t;c=c(t.a)}return Rr(c);case 10:return t=vn(n.b,e),xt(t)?vn(n.h(t.a),e):t;case 11:for(var s=E,d=n.g;d.b;d=d.b){if(t=vn(d.a,e),xt(t))return t;s=F(t.a,s)}return $r(Vr(Zr(s)));case 1:return $r(u(zr,n.a,e));case 0:return Rr(n.a)}}function mn(n,e,r){for(var t=e.length,o=Array(t),a=0;t>a;a++){var i=vn(n,e[a]);if(!xt(i))return $r(u(Ar,a,i.a));o[a]=i.a}return Rr(r(o))}function pn(n){return Array.isArray(n)||"undefined"!=typeof FileList&&n instanceof FileList}function gn(n){return u(ht,n.length,(function(e){return n[e]}))}function hn(n,e){return $r(u(zr,"Expecting "+n,e))}function xn(n,e){if(n===e)return!0;if(n.$!==e.$)return!1;switch(n.$){case 0:case 1:return n.a===e.a;case 2:return n.b===e.b;case 5:return n.c===e.c;case 3:case 4:case 8:return xn(n.b,e.b);case 6:return n.d===e.d&&xn(n.b,e.b);case 7:return n.e===e.e&&xn(n.b,e.b);case 9:return n.f===e.f&&Cn(n.g,e.g);case 10:return n.h===e.h&&xn(n.b,e.b);case 11:return Cn(n.g,e.g)}}function Cn(n,e){var r=n.length;if(r!==e.length)return!1;for(var t=0;r>t;t++)if(!xn(n[t],e[t]))return!1;return!0}var Mn=r((function(n,e){return JSON.stringify(e,null,n)+""}));function Pn(n){return n}var yn=t((function(n,e,r){return r[n]=e,r}));function Tn(n){return{$:0,a:n}}function Ln(n){return{$:2,b:n,c:null}}var Dn=r((function(n,e){return{$:3,b:n,d:e}})),wn=0;function Sn(n){var e={$:0,e:wn++,f:n,g:null,h:[]};return _n(e),e}function En(n){return Ln((function(e){e(Tn(Sn(n)))}))}function Fn(n,e){n.h.push(e),_n(n)}var Nn=r((function(n,e){return Ln((function(r){Fn(n,e),r(Tn(0))}))})),$n=!1,zn=[];function _n(n){if(zn.push(n),!$n){for($n=!0;n=zn.shift();)An(n);$n=!1}}function An(n){for(;n.f;){var e=n.f.$;if(0===e||1===e){for(;n.g&&n.g.$!==e;)n.g=n.g.i;if(!n.g)return;n.f=n.g.b(n.f.a),n.g=n.g.i}else{if(2===e)return void(n.f.c=n.f.b((function(e){n.f=e,_n(n)})));if(5===e){if(0===n.h.length)return;n.f=n.f.b(n.h.shift())}else n.g={$:3===e?0:1,b:n.f.b,i:n.g},n.f=n.f.d}}}var Rn={};function Vn(n,e,r,t,o){return{b:n,c:e,d:r,e:t,f:o}}function kn(n,e){var r={g:e,h:void 0},t=n.c,o=n.d,a=n.e,i=n.f;return r.h=Sn(u(Dn,(function n(e){return u(Dn,n,{$:5,b:function(n){var c=n.a;return 0===n.$?f(o,r,c,e):a&&i?s(t,r,c.i,c.j,e):f(t,r,a?c.i:c.j,e)}})}),n.b))}var Bn=r((function(n,e){return Ln((function(r){n.g(e),r(Tn(0))}))})),Hn=r((function(n,e){return u(Nn,n.h,{$:0,a:e})}));function Wn(n){return function(e){return{$:1,k:n,l:e}}}function In(n){return{$:2,m:n}}var jn=r((function(n,e){return{$:3,n:n,o:e}})),Un=[],On=!1;function Gn(n,e,r){if(Un.push({p:n,q:e,r:r}),!On){On=!0;for(var t;t=Un.shift();)qn(t.p,t.q,t.r);On=!1}}function qn(n,e,r){var t={};for(var o in Xn(!0,e,t,null),Xn(!1,r,t,null),n)Fn(n[o],{$:"fx",a:t[o]||{i:E,j:E}})}function Xn(n,e,r,t){switch(e.$){case 1:var o=e.k,a=function(n,e,r,t){return u(n?Rn[e].e:Rn[e].f,(function(n){for(var e=r;e;e=e.t)n=e.s(n);return n}),t)}(n,o,t,e.l);return void(r[o]=function(n,e,r){return r=r||{i:E,j:E},n?r.i=F(e,r.i):r.j=F(e,r.j),r}(n,a,r[o]));case 2:for(var i=e.m;i.b;i=i.b)Xn(n,i.a,r,t);return;case 3:return void Xn(n,e.o,r,{s:e.n,t:t})}}function Yn(n,e){return function(n){Rn[n]&&C(3)}(n),Rn[n]={f:Jn,u:e,a:Zn},Wn(n)}var Jn=r((function(n,e){return function(r){return n(e(r))}}));function Zn(n,e){var r=E,o=Rn[n].u,a=Tn(null);return Rn[n].b=a,Rn[n].c=t((function(n,e){return r=e,a})),{send:function(n){var t=u(bn,o,n);xt(t)||C(4);for(var a=t.a,i=r;i.b;i=i.b)e(i.a(a))}}}var Kn="undefined"!=typeof document?document:{};function Qn(n,e){n.appendChild(e)}function ne(n){return{$:0,a:n}}var ee,re=r((function(n,e){return r((function(r,t){for(var o=[],a=0;t.b;t=t.b){var i=t.a;a+=i.b||0,o.push(i)}return a+=o.length,{$:1,c:e,d:ue(r),e:o,f:n,b:a}}))}))(void 0),te=r((function(n,e){return r((function(r,t){for(var o=[],a=0;t.b;t=t.b){var i=t.a;a+=i.b.b||0,o.push(i)}return a+=o.length,{$:2,c:e,d:ue(r),e:o,f:n,b:a}}))}))(void 0),oe=r((function(n,e){return{$:4,j:n,k:e,b:1+(e.b||0)}})),ae=r((function(n,e){return{$:"a0",n:n,o:e}})),ie=r((function(n,e){return{$:"a1",n:n,o:e}})),ce=r((function(n,e){return{$:"a2",n:n,o:e}})),le=r((function(n,e){return{$:"a3",n:n,o:e}}));function ue(n){for(var e={};n.b;n=n.b){var r=n.a,t=r.$,o=r.n,a=r.o;if("a2"!==t){var i=e[t]||(e[t]={});"a3"===t&&"class"===o?fe(i,o,a):i[o]=a}else"className"===o?fe(e,o,a):e[o]=a}return e}function fe(n,e,r){var t=n[e];n[e]=t?t+" "+r:r}function se(n,e){var r=n.$;if(5===r)return se(n.k||(n.k=n.m()),e);if(0===r)return Kn.createTextNode(n.a);if(4===r){for(var t=n.k,o=n.j;4===t.$;)"object"!=typeof o?o=[o,t.j]:o.push(t.j),t=t.k;var a={j:o,p:e};return(i=se(t,a)).elm_event_node_ref=a,i}if(3===r)return de(i=n.h(n.g),e,n.d),i;var i=n.f?Kn.createElementNS(n.f,n.c):Kn.createElement(n.c);de(i,e,n.d);for(var c=n.e,l=0;c.length>l;l++)Qn(i,se(1===r?c[l]:c[l].b,e));return i}function de(n,e,r){for(var t in r){var o=r[t];"a1"===t?be(n,o):"a0"===t?pe(n,e,o):"a3"===t?ve(n,o):"a4"===t?me(n,o):("value"!==t&&"checked"!==t||n[t]!==o)&&(n[t]=o)}}function be(n,e){var r=n.style;for(var t in e)r[t]=e[t]}function ve(n,e){for(var r in e){var t=e[r];void 0!==t?n.setAttribute(r,t):n.removeAttribute(r)}}function me(n,e){for(var r in e){var t=e[r],o=t.f,a=t.o;void 0!==a?n.setAttributeNS(o,r,a):n.removeAttributeNS(o,r)}}function pe(n,e,r){var t=n.elmFs||(n.elmFs={});for(var o in r){var a=r[o],i=t[o];if(a){if(i){if(i.q.$===a.$){i.q=a;continue}n.removeEventListener(o,i)}i=ge(e,a),n.addEventListener(o,i,ee&&{passive:2>St(a)}),t[o]=i}else n.removeEventListener(o,i),t[o]=void 0}}try{window.addEventListener("t",null,Object.defineProperty({},"passive",{get:function(){ee=!0}}))}catch(n){}function ge(n,e){function r(e){var t=r.q,o=vn(t.a,e);if(xt(o)){for(var a,i=St(t),c=o.a,l=i?3>i?c.a:c.as:c,u=1==i?c.b:3==i&&c.c3,f=(u&&e.stopPropagation(),(2==i?c.b:3==i&&c.cT)&&e.preventDefault(),n);a=f.j;){if("function"==typeof a)l=a(l);else for(var s=a.length;s--;)l=a[s](l);f=f.p}f(l,u)}}return r.q=e,r}function he(n,e){return n.$==e.$&&xn(n.a,e.a)}function xe(n,e,r,t){var o={$:e,r:r,s:t,t:void 0,u:void 0};return n.push(o),o}function Ce(n,e,r,t){if(n!==e){var o=n.$,a=e.$;if(o!==a){if(1!==o||2!==a)return void xe(r,0,t,e);e=function(n){for(var e=n.e,r=e.length,t=Array(r),o=0;r>o;o++)t[o]=e[o].b;return{$:1,c:n.c,d:n.d,e:t,f:n.f,b:n.b}}(e),a=1}switch(a){case 5:for(var i=n.l,c=e.l,l=i.length,u=l===c.length;u&&l--;)u=i[l]===c[l];if(u)return void(e.k=n.k);e.k=e.m();var f=[];return Ce(n.k,e.k,f,0),void(f.length>0&&xe(r,1,t,f));case 4:for(var s=n.j,d=e.j,b=!1,v=n.k;4===v.$;)b=!0,"object"!=typeof s?s=[s,v.j]:s.push(v.j),v=v.k;for(var m=e.k;4===m.$;)b=!0,"object"!=typeof d?d=[d,m.j]:d.push(m.j),m=m.k;return b&&s.length!==d.length?void xe(r,0,t,e):((b?function(n,e){for(var r=0;n.length>r;r++)if(n[r]!==e[r])return!1;return!0}(s,d):s===d)||xe(r,2,t,d),void Ce(v,m,r,t+1));case 0:return void(n.a!==e.a&&xe(r,3,t,e.a));case 1:return void Me(n,e,r,t,ye);case 2:return void Me(n,e,r,t,Te);case 3:if(n.h!==e.h)return void xe(r,0,t,e);var p=Pe(n.d,e.d);p&&xe(r,4,t,p);var g=e.i(n.g,e.g);return void(g&&xe(r,5,t,g))}}}function Me(n,e,r,t,o){if(n.c===e.c&&n.f===e.f){var a=Pe(n.d,e.d);a&&xe(r,4,t,a),o(n,e,r,t)}else xe(r,0,t,e)}function Pe(n,e,r){var t;for(var o in n)if("a1"!==o&&"a0"!==o&&"a3"!==o&&"a4"!==o)if(o in e){var a=n[o],i=e[o];a===i&&"value"!==o&&"checked"!==o||"a0"===r&&he(a,i)||((t=t||{})[o]=i)}else(t=t||{})[o]=r?"a1"===r?"":"a0"===r||"a3"===r?void 0:{f:n[o].f,o:void 0}:"string"==typeof n[o]?"":null;else{var c=Pe(n[o],e[o]||{},o);c&&((t=t||{})[o]=c)}for(var l in e)l in n||((t=t||{})[l]=e[l]);return t}function ye(n,e,r,t){var o=n.e,a=e.e,i=o.length,c=a.length;i>c?xe(r,6,t,{v:c,i:i-c}):c>i&&xe(r,7,t,{v:i,e:a});for(var l=c>i?i:c,u=0;l>u;u++){var f=o[u];Ce(f,a[u],r,++t),t+=f.b||0}}function Te(n,e,r,t){for(var o=[],a={},i=[],c=n.e,l=e.e,u=c.length,f=l.length,s=0,d=0,b=t;u>s&&f>d;){var v=(D=c[s]).a,m=(w=l[d]).a,p=D.b,g=w.b,h=void 0,x=void 0;if(v!==m){var C=c[s+1],M=l[d+1];if(C){var P=C.a,y=C.b;x=m===P}if(M){var T=M.a,L=M.b;h=v===T}if(h&&x)Ce(p,L,o,++b),De(a,o,v,g,d,i),b+=p.b||0,we(a,o,v,y,++b),b+=y.b||0,s+=2,d+=2;else if(h)b++,De(a,o,m,g,d,i),Ce(p,L,o,b),b+=p.b||0,s+=1,d+=2;else if(x)we(a,o,v,p,++b),b+=p.b||0,Ce(y,g,o,++b),b+=y.b||0,s+=2,d+=1;else{if(!C||P!==T)break;we(a,o,v,p,++b),De(a,o,m,g,d,i),b+=p.b||0,Ce(y,L,o,++b),b+=y.b||0,s+=2,d+=2}}else Ce(p,g,o,++b),b+=p.b||0,s++,d++}for(;u>s;){var D;b++,we(a,o,(D=c[s]).a,p=D.b,b),b+=p.b||0,s++}for(;f>d;){var w,S=S||[];De(a,o,(w=l[d]).a,w.b,void 0,S),d++}(o.length>0||i.length>0||S)&&xe(r,8,t,{w:o,x:i,y:S})}var Le="_elmW6BL";function De(n,e,r,t,o,a){var i=n[r];if(!i)return a.push({r:o,A:i={c:0,z:t,r:o,s:void 0}}),void(n[r]=i);if(1===i.c){a.push({r:o,A:i}),i.c=2;var c=[];return Ce(i.z,t,c,i.r),i.r=o,void(i.s.s={w:c,A:i})}De(n,e,r+Le,t,o,a)}function we(n,e,r,t,o){var a=n[r];if(a){if(0===a.c){a.c=2;var i=[];return Ce(t,a.z,i,o),void xe(e,9,o,{w:i,A:a})}we(n,e,r+Le,t,o)}else{var c=xe(e,9,o,void 0);n[r]={c:1,z:t,r:o,s:c}}}function Se(n,e,r,t){Ee(n,e,r,0,0,e.b,t)}function Ee(n,e,r,t,o,a,i){for(var c=r[t],l=c.r;l===o;){var u=c.$;if(1===u)Se(n,e.k,c.s,i);else if(8===u)c.t=n,c.u=i,(f=c.s.w).length>0&&Ee(n,e,f,0,o,a,i);else if(9===u){c.t=n,c.u=i;var f,s=c.s;s&&(s.A.s=n,(f=s.w).length>0&&Ee(n,e,f,0,o,a,i))}else c.t=n,c.u=i;if(!(c=r[++t])||(l=c.r)>a)return t}var d=e.$;if(4===d){for(var b=e.k;4===b.$;)b=b.k;return Ee(n,b,r,t,o+1,a,n.elm_event_node_ref)}for(var v=e.e,m=n.childNodes,p=0;v.length>p;p++){o++;var g=1===d?v[p]:v[p].b,h=o+(g.b||0);if(!(o>l||l>h||(c=r[t=Ee(m[p],g,r,t,o,h,i)])&&(l=c.r)<=a))return t;o=h}return t}function Fe(n,e){for(var r=0;e.length>r;r++){var t=e[r],o=t.t,a=Ne(o,t);o===n&&(n=a)}return n}function Ne(n,e){switch(e.$){case 0:return function(n,e,r){var t=n.parentNode,o=se(e,r);return o.elm_event_node_ref||(o.elm_event_node_ref=n.elm_event_node_ref),t&&o!==n&&t.replaceChild(o,n),o}(n,e.s,e.u);case 4:return de(n,e.u,e.s),n;case 3:return n.replaceData(0,n.length,e.s),n;case 1:return Fe(n,e.s);case 2:return n.elm_event_node_ref?n.elm_event_node_ref.j=e.s:n.elm_event_node_ref={j:e.s,p:e.u},n;case 6:for(var r=e.s,t=0;r.i>t;t++)n.removeChild(n.childNodes[r.v]);return n;case 7:for(var o=(r=e.s).e,a=n.childNodes[t=r.v];o.length>t;t++)n.insertBefore(se(o[t],e.u),a);return n;case 9:if(!(r=e.s))return n.parentNode.removeChild(n),n;var i=r.A;return void 0!==i.r&&n.parentNode.removeChild(n),i.s=Fe(n,r.w),n;case 8:return function(n,e){var r=e.s,t=function(n,e){if(n){for(var r=Kn.createDocumentFragment(),t=0;n.length>t;t++){var o=n[t].A;Qn(r,2===o.c?o.s:se(o.z,e.u))}return r}}(r.y,e);n=Fe(n,r.w);for(var o=r.x,a=0;o.length>a;a++){var i=o[a],c=i.A,l=2===c.c?c.s:se(c.z,e.u);n.insertBefore(l,n.childNodes[i.r])}return t&&Qn(n,t),n}(n,e);case 5:return e.s(n);default:C(10)}}function $e(n){if(3===n.nodeType)return ne(n.textContent);if(1!==n.nodeType)return ne("");for(var e=E,r=n.attributes,t=r.length;t--;){var o=r[t];e=F(u(le,o.name,o.value),e)}var a=n.tagName.toLowerCase(),i=E,c=n.childNodes;for(t=c.length;t--;)i=F($e(c[t]),i);return f(re,a,e,i)}var ze=o((function(n,e,r,t){return function(n,e,r,t,o,a){var i=u(bn,n,e?e.flags:void 0);xt(i)||C(2);var c={},l=r(i.a),f=l.a,s=a(b,f),d=function(n,e){var r;for(var t in Rn){var o=Rn[t];o.a&&((r=r||{})[t]=o.a(t,e)),n[t]=kn(o,e)}return r}(c,b);function b(n,e){var r=u(t,n,f);s(f=r.a,e),Gn(c,r.b,o(f))}return Gn(c,l.b,o(f)),d?{ports:d}:{}}(e,t,n.e2,n.fA,n.ft,(function(e,r){var o=n.fC,a=t.node,i=$e(a);return function(n,e){e(n);var r=0;function t(){r=1===r?0:(Ae(t),e(n),1)}return function(o,a){n=o,a?(e(n),2===r&&(r=1)):(0===r&&Ae(t),r=2)}}(r,(function(n){var r=o(n),t=function(n,e){var r=[];return Ce(n,e,r,0),r}(i,r);a=function(n,e,r,t){return 0===r.length?n:(Se(n,e,r,t),Fe(n,r))}(a,i,t,e),i=r}))}))})),_e="undefined"!=typeof cancelAnimationFrame?cancelAnimationFrame:function(n){clearTimeout(n)},Ae="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:function(n){return setTimeout(n,1e3/60)},Re={addEventListener:function(){},removeEventListener:function(){}},Ve="undefined"!=typeof document?document:Re,ke="undefined"!=typeof window?window:Re,Be=t((function(n,e,r){return En(Ln((function(){function t(n){Sn(r(n))}return n.addEventListener(e,t,ee&&{passive:!0}),function(){n.removeEventListener(e,t)}})))})),He=r((function(n,e){var r=vn(n,e);return xt(r)?kr(r.a):Br})),We=r((function(n,e){var r="g";n.fb&&(r+="m"),n.eF&&(r+="i");try{return kr(RegExp(e,r))}catch(n){return Br}})),Ie=t((function(n,e,r){for(var t,o=[],a=0,i=r,c=e.lastIndex,l=-1;a++<n&&(t=e.exec(i))&&l!=e.lastIndex;){for(var u=t.length-1,f=Array(u);u>0;){var d=t[u];f[--u]=d?kr(d):Br}o.push(s(pi,t[0],t.index,a,$(f))),l=e.lastIndex}return e.lastIndex=c,$(o)})),je=0;function Ue(n,e){for(;e.b;e=e.b)n(e.a)}function Oe(n){for(var e=0;n.b;n=n.b)e++;return e}var Ge="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:function(n){setTimeout(n,1e3/60)},qe=a((function(n,e,r,t,o){return{$:0,a:n,b:e,c:r,d:t,e:o}})),Xe=r((function(n,e){var r=n.blend;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.BLEND),r.enabled=!0),r.a===e.a&&r.d===e.d||(n.gl.blendEquationSeparate(e.a,e.d),r.a=e.a,r.d=e.d),r.b===e.b&&r.c===e.c&&r.e===e.e&&r.f===e.f||(n.gl.blendFuncSeparate(e.b,e.c,e.e,e.f),r.b=e.b,r.c=e.c,r.e=e.e,r.f=e.f),r.g===e.g&&r.h===e.h&&r.i===e.i&&r.j===e.j||(n.gl.blendColor(e.g,e.h,e.i,e.j),r.g=e.g,r.h=e.h,r.i=e.i,r.j=e.j)})),Ye=r((function(n,e){var r=n.depthTest;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.DEPTH_TEST),r.enabled=!0),r.a!==e.a&&(n.gl.depthFunc(e.a),r.a=e.a),r.b!==e.b&&(n.gl.depthMask(e.b),r.b=e.b),r.c===e.c&&r.d===e.d||(n.gl.depthRange(e.c,e.d),r.c=e.c,r.d=e.d)})),Je=r((function(n,e){var r=n.stencilTest;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.STENCIL_TEST),r.enabled=!0),r.d===e.d&&r.a===e.a&&r.b===e.b||(n.gl.stencilFuncSeparate(n.gl.FRONT,e.d,e.a,e.b),r.d=e.d),r.e===e.e&&r.f===e.f&&r.g===e.g||(n.gl.stencilOpSeparate(n.gl.FRONT,e.e,e.f,e.g),r.e=e.e,r.f=e.f,r.g=e.g),r.c!==e.c&&(n.gl.stencilMask(e.c),r.c=e.c),r.h===e.h&&r.a===e.a&&r.b===e.b||(n.gl.stencilFuncSeparate(n.gl.BACK,e.h,e.a,e.b),r.h=e.h,r.a=e.a,r.b=e.b),r.i===e.i&&r.j===e.j&&r.k===e.k||(n.gl.stencilOpSeparate(n.gl.BACK,e.i,e.j,e.k),r.i=e.i,r.j=e.j,r.k=e.k)})),Ze=r((function(n,e){var r=n.scissor;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.SCISSOR_TEST),r.enabled=!0),r.a===e.a&&r.b===e.b&&r.c===e.c&&r.d===e.d||(n.gl.scissor(e.a,e.b,e.c,e.d),r.a=e.a,r.b=e.b,r.c=e.c,r.d=e.d)})),Ke=r((function(n,e){var r=n.colorMask;r.toggle=n.toggle,r.enabled=!0,r.a===e.a&&r.b===e.b&&r.c===e.c&&r.d===e.d||(n.gl.colorMask(e.a,e.b,e.c,e.d),r.a=e.a,r.b=e.b,r.c=e.c,r.d=e.d)})),Qe=r((function(n,e){var r=n.cullFace;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.CULL_FACE),r.enabled=!0),r.a!==e.a&&(n.gl.cullFace(e.a),r.a=e.a)})),nr=r((function(n,e){var r=n.polygonOffset;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.POLYGON_OFFSET_FILL),r.enabled=!0),r.a===e.a&&r.b===e.b||(n.gl.polygonOffset(e.a,e.b),r.a=e.a,r.b=e.b)})),er=r((function(n,e){var r=n.sampleCoverage;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.SAMPLE_COVERAGE),r.enabled=!0),r.a===e.a&&r.b===e.b||(n.gl.sampleCoverage(e.a,e.b),r.a=e.a,r.b=e.b)})),rr=function(n){n.scissor.enabled&&(n.gl.disable(n.gl.SCISSOR_TEST),n.scissor.enabled=!1)},tr=function(n){var e=n.colorMask;e.a&&e.b&&e.c&&e.d||(n.gl.colorMask(!0,!0,!0,!0),e.a=!0,e.b=!0,e.c=!0,e.d=!0)},or=["blend","depthTest","stencilTest","scissor","colorMask","cullFace","polygonOffset","sampleCoverage","sampleAlphaToCoverage"],ar=[function(n){n.blend.enabled&&(n.gl.disable(n.gl.BLEND),n.blend.enabled=!1)},function(n){n.depthTest.enabled&&(n.gl.disable(n.gl.DEPTH_TEST),n.depthTest.enabled=!1)},function(n){n.stencilTest.enabled&&(n.gl.disable(n.gl.STENCIL_TEST),n.stencilTest.enabled=!1)},rr,tr,function(n){n.gl.disable(n.gl.CULL_FACE)},function(n){n.gl.disable(n.gl.POLYGON_OFFSET_FILL)},function(n){n.gl.disable(n.gl.SAMPLE_COVERAGE)},function(n){n.gl.disable(n.gl.SAMPLE_ALPHA_TO_COVERAGE)}];function ir(n,e,r){var t=n.createShader(r);return n.shaderSource(t,"#extension GL_OES_standard_derivatives : enable\n"+e),n.compileShader(t),t}function cr(n,e){switch(e){case n.FLOAT:return{size:1,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC2:return{size:2,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC3:return{size:3,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC4:return{size:4,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_MAT4:return{size:4,arraySize:4,type:Float32Array,baseType:n.FLOAT};case n.INT:return{size:1,arraySize:1,type:Int32Array,baseType:n.INT}}}function lr(n,e,r,t){for(var o=r.a.dp,a=[],i=0;o>i;i++)a.push(String.fromCharCode(97+i));var c=cr(n,e.type);if(void 0===c)throw Error("No info available for: "+e.type);var l=0,u=c.size*c.arraySize*o,f=new c.type(Oe(r.b)*u);Ue((function(n){!function(n,e,r,t,i){var c;if(1===o)for(c=0;e>c;c++)n[r++]=1===e?t[i]:t[i][c];else a.forEach((function(o){for(c=0;e>c;c++)n[r++]=1===e?t[o][i]:t[o][i][c]}))}(f,c.size*c.arraySize,l,n,t[e.name]||e.name),l+=u}),r.b);var s=n.createBuffer();return n.bindBuffer(n.ARRAY_BUFFER,s),n.bufferData(n.ARRAY_BUFFER,f,n.STATIC_DRAW),s}function ur(n,e){return n+"#"+e}var fr=r((function(n,e){var r=n.f,t=r.gl;return t?(t.viewport(0,0,t.drawingBufferWidth,t.drawingBufferHeight),r.depthTest.b||(t.depthMask(!0),r.depthTest.b=!0),r.stencilTest.c!==r.STENCIL_WRITEMASK&&(t.stencilMask(r.STENCIL_WRITEMASK),r.stencilTest.c=r.STENCIL_WRITEMASK),rr(r),tr(r),t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT|t.STENCIL_BUFFER_BIT),Ue((function(e){if(e.d.b.b){var o,a,i,c,l;if(e.b.id&&e.c.id&&(o=ur(e.b.id,e.c.id),a=r.programs[o]),!a){var u,f;e.b.id?u=r.shaders[e.b.id]:e.b.id=je++,u||(u=ir(t,e.b.src,t.VERTEX_SHADER),r.shaders[e.b.id]=u),e.c.id?f=r.shaders[e.c.id]:e.c.id=je++,f||(f=ir(t,e.c.src,t.FRAGMENT_SHADER),r.shaders[e.c.id]=f);var s=function(n,e,r){var t=n.createProgram();if(n.attachShader(t,e),n.attachShader(t,r),n.linkProgram(t),!n.getProgramParameter(t,n.LINK_STATUS))throw"Link failed: "+n.getProgramInfoLog(t)+"\nvs info-log: "+n.getShaderInfoLog(e)+"\nfs info-log: "+n.getShaderInfoLog(r);return t}(t,u,f);(a={glProgram:s,attributes:Object.assign({},e.b.attributes,e.c.attributes),currentUniforms:{},activeAttributes:[],activeAttributeLocations:[]}).uniformSetters=function(n,e,r,t){var o=r.glProgram,a=r.currentUniforms,i=0,c=e.f;function l(e,r){var t=r.name,o=n.getUniformLocation(e,t);switch(r.type){case n.INT:return function(e){a[t]!==e&&(n.uniform1i(o,e),a[t]=e)};case n.FLOAT:return function(e){a[t]!==e&&(n.uniform1f(o,e),a[t]=e)};case n.FLOAT_VEC2:return function(e){a[t]!==e&&(n.uniform2f(o,e[0],e[1]),a[t]=e)};case n.FLOAT_VEC3:return function(e){a[t]!==e&&(n.uniform3f(o,e[0],e[1],e[2]),a[t]=e)};case n.FLOAT_VEC4:return function(e){a[t]!==e&&(n.uniform4f(o,e[0],e[1],e[2],e[3]),a[t]=e)};case n.FLOAT_MAT4:return function(e){a[t]!==e&&(n.uniformMatrix4fv(o,!1,new Float32Array(e)),a[t]=e)};case n.SAMPLER_2D:var l=i++;return function(e){n.activeTexture(n.TEXTURE0+l);var r=c.textures.get(e);r||(r=e.eK(n),c.textures.set(e,r)),n.bindTexture(n.TEXTURE_2D,r),a[t]!==e&&(n.uniform1i(o,l),a[t]=e)};case n.BOOL:return function(e){a[t]!==e&&(n.uniform1i(o,e),a[t]=e)};default:return function(){}}}for(var u={},f=n.getProgramParameter(o,n.ACTIVE_UNIFORMS),s=0;f>s;s++){var d=n.getActiveUniform(o,s);u[t[d.name]||d.name]=l(o,d)}return u}(t,n,a,Object.assign({},e.b.uniforms,e.c.uniforms));var d=t.getProgramParameter(s,t.ACTIVE_ATTRIBUTES);for(i=0;d>i;i++){var b=t.getActiveAttrib(s,i),v=t.getAttribLocation(s,b.name);a.activeAttributes.push(b),a.activeAttributeLocations.push(v)}o=ur(e.b.id,e.c.id),r.programs[o]=a}r.lastProgId!==o&&(t.useProgram(a.glProgram),r.lastProgId=o),c=a.uniformSetters,Object.keys(l=e.e).forEach((function(n){var e=c[n];e&&e(l[n])}));var m=r.buffers.get(e.d);for(m||(m=function(n,e){if(e.a.dz>0){var r=n.createBuffer(),t=function(n,e){var r,t=new Uint32Array(Oe(n)*e),o=0;return Ue((function(n){if(1===e)t[o++]=n;else for(r=0;e>r;r++)t[o++]=n[String.fromCharCode(97+r)]}),n),t}(e.c,e.a.dz);return n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,r),n.bufferData(n.ELEMENT_ARRAY_BUFFER,t,n.STATIC_DRAW),{numIndices:t.length,indexBuffer:r,buffers:{}}}return{numIndices:e.a.dp*Oe(e.b),indexBuffer:null,buffers:{}}}(t,e.d),r.buffers.set(e.d,m)),i=0;a.activeAttributes.length>i;i++){v=a.activeAttributeLocations[i],void 0===m.buffers[(b=a.activeAttributes[i]).name]&&(m.buffers[b.name]=lr(t,b,e.d,a.attributes)),t.bindBuffer(t.ARRAY_BUFFER,m.buffers[b.name]);var p=cr(t,b.type);if(1===p.arraySize)t.enableVertexAttribArray(v),t.vertexAttribPointer(v,p.size,p.baseType,!1,0,0);else for(var g=4*p.size,h=g*p.arraySize,x=0;p.arraySize>x;x++)t.enableVertexAttribArray(v+x),t.vertexAttribPointer(v+x,p.size,p.baseType,!1,h,g*x)}for(r.toggle=!r.toggle,Ue(Cs(r),e.a),i=0;9>i;i++){var C=r[or[i]];C.toggle!==r.toggle&&C.enabled&&(ar[i](r),C.enabled=!1,C.toggle=r.toggle)}m.indexBuffer?(t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,m.indexBuffer),t.drawElements(e.d.a.d4,m.numIndices,t.UNSIGNED_INT,0)):t.drawArrays(e.d.a.d4,0,m.numIndices)}}),n.g),e):e})),sr=t((function(n,e,r){return function(n,e,r,t){return{$:3,d:ue(n),g:e,h:r,i:t}}(e,{g:r,f:{},h:n},hr,xr)})),dr=r((function(n,e){n.contextAttributes.alpha=!0,n.contextAttributes.premultipliedAlpha=e.a})),br=r((function(n,e){n.contextAttributes.depth=!0,n.sceneSettings.push((function(n){n.clearDepth(e.a)}))})),vr=r((function(n,e){n.contextAttributes.stencil=!0,n.sceneSettings.push((function(n){n.clearStencil(e.a)}))})),mr=r((function(n){n.contextAttributes.antialias=!0})),pr=r((function(n,e){n.sceneSettings.push((function(n){n.clearColor(e.a,e.b,e.c,e.d)}))})),gr=r((function(n){n.contextAttributes.preserveDrawingBuffer=!0}));function hr(n){var e={contextAttributes:{alpha:!1,depth:!1,stencil:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1},sceneSettings:[]};Ue((function(n){return u(xs,e,n)}),n.h);var r=Kn.createElement("canvas"),t=r.getContext&&(r.getContext("webgl",e.contextAttributes)||r.getContext("experimental-webgl",e.contextAttributes));return t&&"undefined"!=typeof WeakMap?(e.sceneSettings.forEach((function(n){n(t)})),t.getExtension("OES_standard_derivatives"),t.getExtension("OES_element_index_uint"),n.f.gl=t,n.f.toggle=!1,n.f.blend={enabled:!1,toggle:!1},n.f.depthTest={enabled:!1,toggle:!1},n.f.stencilTest={enabled:!1,toggle:!1},n.f.scissor={enabled:!1,toggle:!1},n.f.colorMask={enabled:!1,toggle:!1},n.f.cullFace={enabled:!1,toggle:!1},n.f.polygonOffset={enabled:!1,toggle:!1},n.f.sampleCoverage={enabled:!1,toggle:!1},n.f.sampleAlphaToCoverage={enabled:!1,toggle:!1},n.f.shaders=[],n.f.programs={},n.f.lastProgId=null,n.f.buffers=new WeakMap,n.f.textures=new WeakMap,n.f.STENCIL_WRITEMASK=t.getParameter(t.STENCIL_WRITEMASK),Ge((function(){return u(fr,n,r)}))):(r=Kn.createElement("div")).innerHTML='<a href="https://get.webgl.org/">Enable WebGL</a> to see this content!',r}function xr(n,e){return e.f=n.f,fr(e)}var Cr=r((function(n,e){return new Float64Array([n,e])}));new Float64Array(3),new Float64Array(3),new Float64Array(3);var Mr=t((function(n,e,r){return new Float64Array([n,e,r])})),Pr=r((function(n,e){return new Float64Array([e[0]*n,e[1]*n,e[2]*n])})),yr=o((function(n,e,r,t){return new Float64Array([n,e,r,t])}));new Float64Array(16),new Float64Array(16),new Float64Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);var Tr=N,Lr=x,Dr=t((function(n,e,t){var o=t.c,a=t.d,i=r((function(e,r){return f(Lr,e.$?n:i,r,e.a)}));return f(Lr,i,f(Lr,n,e,a),o)})),wr=t((function(n,e,r){for(;;){if(-2===r.$)return e;var t=r.d,o=n,a=f(n,r.b,r.c,f(wr,n,e,r.e));n=o,e=a,r=t}})),Sr=function(n){return f(wr,t((function(n,e,r){return u(Tr,L(n,e),r)})),E,n)},Er=1,Fr=2,Nr=0,$r=function(n){return{$:1,a:n}},zr=r((function(n,e){return{$:3,a:n,b:e}})),_r=r((function(n,e){return{$:0,a:n,b:e}})),Ar=r((function(n,e){return{$:1,a:n,b:e}})),Rr=function(n){return{$:0,a:n}},Vr=function(n){return{$:2,a:n}},kr=function(n){return{$:0,a:n}},Br={$:1},Hr=Mn,Wr=Q,Ir=r((function(n,e){return u(J,n,z(e))})),jr=r((function(n,e){return $(u(Y,n,e))})),Ur=t((function(n,e,r){for(;;){if(!r.b)return e;var t=r.b,o=n,a=u(n,r.a,e);n=o,e=a,r=t}})),Or=function(n){return f(Ur,r((function(n,e){return e+1})),0,n)},Gr=_,qr=t((function(n,e,r){for(;;){if(y(n,e)>=1)return r;var t=n,o=e-1,a=u(Tr,e,r);n=t,e=o,r=a}})),Xr=r((function(n,e){return f(qr,n,e,E)})),Yr=r((function(n,e){return f(Gr,n,u(Xr,0,Or(e)-1),e)})),Jr=function(n){var e=n.charCodeAt(0);return 55296>e||e>56319?e:1024*(e-55296)+n.charCodeAt(1)-56320+65536},Zr=function(n){return f(Ur,Tr,E,n)},Kr=function(n){var e=n.charCodeAt(0);return isNaN(e)?Br:kr(55296>e||e>56319?L(n[0],n.slice(1)):L(n[0]+n[1],n.slice(2)))},Qr=32,nt=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),et=[],rt=W,tt=r((function(n,e){return O(e)/O(n)})),ot=function(n){return n},at=rt(u(tt,2,Qr)),it=s(nt,0,at,et,et),ct=p,lt=function(n){return{$:1,a:n}},ut=I,ft=function(n){return n.length},st=r((function(n,e){return y(n,e)>0?n:e})),dt=A,bt=g,vt=r((function(n,e){for(;;){var r=u(bt,Qr,n),t=r.b,o=u(Tr,{$:0,a:r.a},e);if(!t.b)return Zr(o);n=t,e=o}})),mt=r((function(n,e){for(;;){var r=rt(e/Qr);if(1===r)return u(bt,Qr,n).a;n=u(vt,n,E),e=r}})),pt=r((function(n,e){if(e.l){var r=e.l*Qr,t=ut(u(tt,Qr,r-1)),o=n?Zr(e.z):e.z,a=u(mt,o,e.l);return s(nt,ft(e.p)+r,u(st,5,t*at),a,e.p)}return s(nt,ft(e.p),at,et,e.p)})),gt=a((function(n,e,r,t,o){for(;;){if(0>e)return u(pt,!1,{z:t,l:r/Qr|0,p:o});var a=lt(f(ct,Qr,e,n));n=n,e-=Qr,r=r,t=u(Tr,a,t),o=o}})),ht=r((function(n,e){if(n>0){var r=n%Qr;return d(gt,e,n-r-Qr,n,E,f(ct,r,n-r,e))}return it})),xt=function(n){return!n.$},Ct=ln,Mt=r((function(n,e){return{P:e,aE:"",U:n,aq:""}})),Pt=Mt,yt=an,Tt=tn,Lt=un,Dt=fn,wt=function(n){return{$:0,a:n}},St=function(n){switch(n.$){case 0:return 0;case 1:return 1;case 2:return 2;default:return 3}},Et=re("div"),Ft=function(n){return{$:2,a:n}},Nt=function(n){return{$:6,a:n}},$t=function(n){return{$:4,a:n}},zt=t((function(n,e,r){return e(n(r))})),_t=function(n){return n},At=function(n){return n.length},Rt=Z,Vt=r((function(n,e){return 1>n?e:f(Rt,n,At(e),e)})),kt=K,Bt=Tn,Ht=Bt(0),Wt=o((function(n,e,r,t){if(t.b){var o=t.a,a=t.b;if(a.b){var i=a.a,c=a.b;if(c.b){var l=c.a,d=c.b;if(d.b){var b=d.b;return u(n,o,u(n,i,u(n,l,u(n,d.a,r>500?f(Ur,n,e,Zr(b)):s(Wt,n,e,r+1,b)))))}return u(n,o,u(n,i,u(n,l,e)))}return u(n,o,u(n,i,e))}return u(n,o,e)}return e})),It=t((function(n,e,r){return s(Wt,n,e,0,r)})),jt=r((function(n,e){return f(It,r((function(e,r){return u(Tr,n(e),r)})),E,e)})),Ut=Dn,Ot=r((function(n,e){return u(Ut,(function(e){return Bt(n(e))}),e)})),Gt=t((function(n,e,r){return u(Ut,(function(e){return u(Ut,(function(r){return Bt(u(n,e,r))}),r)}),e)})),qt=function(n){return f(It,Gt(Tr),Bt(E),n)},Xt=Bn,Yt=r((function(n,e){var r=e;return En(u(Ut,Xt(n),r))}));Rn.Task=Vn(Ht,t((function(n,e){return u(Ot,(function(){return 0}),qt(u(jt,Yt(n),e)))})),t((function(){return Bt(0)})),r((function(n,e){return u(Ot,n,e)})));var Jt=Wn("Task"),Zt=r((function(n,e){return Jt(u(Ot,n,e))})),Kt=ze,Qt=r((function(n,e){return{$:0,a:n,b:e}})),no=function(n){return{$:7,a:n}},eo=r((function(n,e){return{$:5,a:n,b:e}})),ro=r((function(n,e){return{$:3,a:n,b:e}})),to=In,oo=jn,ao=function(n){return{$:1,a:n}},io=t((function(n,e,r){return{cG:r,ei:e,en:n}})),co=Bt(f(io,E,Br,0)),lo=function(n){return Ln((function(e){var r=n.f;2===r.$&&r.c&&r.c(),n.f=null,e(Tn(0))}))},uo=Ln((function(n){n(Tn(Date.now()))})),fo=Ln((function(n){var e=Ae((function(){n(Tn(Date.now()))}));return function(){_e(e)}})),so=Hn,bo=En,vo=t((function(n,e,r){var t=r.ei,o=r.cG,a=L(t,e);return 1===a.a.$?a.b.b?u(Ut,(function(n){return u(Ut,(function(r){return Bt(f(io,e,kr(n),r))}),uo)}),bo(u(Ut,so(n),fo))):co:a.b.b?Bt(f(io,e,t,o)):u(Ut,(function(){return co}),lo(a.a.a))})),mo=_t,po=t((function(n,e,r){var t=r.en,o=r.cG,a=function(r){return u(Xt,n,(0,r.a)(r.$?e-o:mo(e)))};return u(Ut,(function(n){return u(Ut,(function(){return Bt(f(io,t,kr(n),e))}),qt(u(jt,a,t)))}),bo(u(Ut,so(n),fo)))})),go=t((function(n,e,r){return n(e(r))}));Rn["Browser.AnimationManager"]=Vn(co,vo,po,0,r((function(n,e){return e.$?ao(u(go,n,e.a)):{$:0,a:u(go,n,e.a)}})));var ho=Wn("Browser.AnimationManager"),xo=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),Co=r((function(n,e){return{d9:e,en:n}})),Mo={$:-2},Po=Mo,yo=Bt(u(Co,E,Po)),To=function(n){return L(S(n.a?"w_":"d_",n.b),n)},Lo=a((function(n,e,r,t,o){return{$:-1,a:n,b:e,c:r,d:t,e:o}})),Do=a((function(n,e,r,t,o){if(-1!==o.$||o.a){if(-1!==t.$||t.a||-1!==t.d.$||t.d.a)return d(Lo,n,e,r,t,o);var a=t.d;return i=t.e,d(Lo,0,t.b,t.c,d(Lo,1,a.b,a.c,a.d,a.e),d(Lo,1,e,r,i,o))}var i,c=o.b,l=o.c,u=o.d,f=o.e;return-1!==t.$||t.a?d(Lo,n,c,l,d(Lo,0,e,r,t,u),f):d(Lo,0,e,r,d(Lo,1,t.b,t.c,t.d,i=t.e),d(Lo,1,c,l,u,f))})),wo=T,So=t((function(n,e,r){if(-2===r.$)return d(Lo,0,n,e,Mo,Mo);var t=r.a,o=r.b,a=r.c,i=r.d,c=r.e;switch(u(wo,n,o)){case 0:return d(Do,t,o,a,f(So,n,e,i),c);case 1:return d(Lo,t,o,e,i,c);default:return d(Do,t,o,a,i,f(So,n,e,c))}})),Eo=t((function(n,e,r){var t=f(So,n,e,r);return-1!==t.$||t.a?t:d(Lo,1,t.b,t.c,t.d,t.e)})),Fo=function(n){return f(Ur,r((function(n,e){return f(Eo,n.a,n.b,e)})),Po,n)},No=t((function(n,e,r){for(;;){if(-2===r.$)return e;var t=r.e,o=n,a=f(n,r.b,r.c,f(No,n,e,r.d));n=o,e=a,r=t}})),$o=i((function(n,e,o,a,i,c){var l=f(No,t((function(r,t,a){n:for(;;){var i=a.a,c=a.b;if(i.b){var l=i.a,u=l.a,d=l.b,b=i.b;if(0>y(u,r)){r=r,t=t,a=L(b,f(n,u,d,c));continue n}return y(u,r)>0?L(i,f(o,r,t,c)):L(b,s(e,u,d,t,c))}return L(i,f(o,r,t,c))}})),L(Sr(a),c),i),u=l.a,d=l.b;return f(Ur,r((function(e,r){return f(n,e.a,e.b,r)})),d,u)})),zo=r((function(n,e){return{du:e,dB:n}})),_o=t((function(n,e,r){return u(Ot,(function(n){return L(e,n)}),f(Be,r.a?ke:Ve,r.b,(function(r){return u(so,n,u(zo,e,r))})))})),Ao=r((function(n,e){return f(No,Eo,e,n)})),Ro=t((function(n,e,r){var a=t((function(e,r,t){var o=t.c;return D(t.a,t.b,u(Tr,f(_o,n,e,r),o))})),i=t((function(n,e,r){var t=r.b,o=r.c;return D(u(Tr,e,r.a),t,o)})),c=o((function(n,e,r,t){var o=t.c;return D(t.a,f(Eo,n,e,t.b),o)})),l=u(jt,To,e),s=b($o,i,c,a,r.d9,Fo(l),D(E,Po,E)),d=s.b,v=s.c;return u(Ut,(function(n){return Bt(u(Co,l,u(Ao,d,Fo(n))))}),u(Ut,(function(){return qt(v)}),qt(u(jt,lo,s.a))))})),Vo=t((function(n,e,r){var t=n(e);return t.$?r:u(Tr,t.a,r)})),ko=r((function(n,e){return f(It,Vo(n),E,e)}));Rn["Browser.Events"]=Vn(yo,Ro,t((function(n,e,r){var t=e.dB,o=e.du,a=u(ko,(function(n){var e=n.b.c;return M(n.a,t)?u(He,e,o):Br}),r.en);return u(Ut,(function(){return Bt(r)}),qt(u(jt,Xt(n),a)))})),0,r((function(n,e){return f(xo,e.a,e.b,u(Lt,n,e.c))})));var Bo,Ho,Wo,Io,jo,Uo,Oo,Go,qo,Xo,Yo,Jo,Zo,Ko,Qo,na,ea,ra,ta,oa,aa,ia,ca,la,ua,fa,sa,da,ba,va,ma,pa,ga,ha,xa,Ca,Ma,Pa,ya=Wn("Browser.Events"),Ta=t((function(n,e,r){return ya(f(xo,n,e,r))})),La=u(Ta,0,"click"),Da=u(Ta,0,"keydown"),wa=u(Ta,0,"keyup"),Sa=u(Ta,0,"mousedown"),Ea=u(Ta,0,"mousemove"),Fa=u(Ta,0,"mouseup"),Na=en,$a=rn,za=r((function(n,e){return n(e?1:0)})),_a=function(n){var e=void 0!==Kn.hidden?{e$:"hidden",eI:"visibilitychange"}:void 0!==Kn.mozHidden?{e$:"mozHidden",eI:"mozvisibilitychange"}:void 0!==Kn.msHidden?{e$:"msHidden",eI:"msvisibilitychange"}:void 0!==Kn.webkitHidden?{e$:"webkitHidden",eI:"webkitvisibilitychange"}:{e$:"hidden",eI:"visibilitychange"};return f(Ta,0,e.eI,u(Lt,za(n),u(yt,"target",u(yt,e.e$,$a))))},Aa=on,Ra=function(n){return{$:3,b:n}},Va=Yn("touchCancel",Ra(u(Ct,(function(n){return u(Ct,(function(e){return u(Ct,(function(r){return wt({bj:r,cI:e,cJ:n})}),u(yt,"identifier",Na))}),u(yt,"pageX",Tt))}),u(yt,"pageY",Tt)))),ka=Yn("touchEnd",Ra(u(Ct,(function(n){return u(Ct,(function(e){return u(Ct,(function(r){return wt({bj:r,cI:e,cJ:n})}),u(yt,"identifier",Na))}),u(yt,"pageX",Tt))}),u(yt,"pageY",Tt)))),Ba=Yn("touchMove",Ra(u(Ct,(function(n){return u(Ct,(function(e){return u(Ct,(function(r){return wt({bj:r,cI:e,cJ:n})}),u(yt,"identifier",Na))}),u(yt,"pageX",Tt))}),u(yt,"pageY",Tt)))),Ha=Yn("touchStart",Ra(u(Ct,(function(n){return u(Ct,(function(e){return u(Ct,(function(r){return wt({bj:r,cI:e,cJ:n})}),u(yt,"identifier",Na))}),u(yt,"pageX",Tt))}),u(yt,"pageY",Tt)))),Wa=to(u(jt,oo(Nt),$([(Bo=ro,f(Ta,1,"resize",u(yt,"target",f(Dt,Bo,u(yt,"innerWidth",Na),u(yt,"innerHeight",Na))))),wa(u(Lt,Qt(!1),u(yt,"key",Aa))),Da(u(Lt,Qt(!0),u(yt,"key",Aa))),(Pa=u(zt,dt(.001),(function(n){return{$:1,a:n}})),ho(ao(Pa))),_a($t),La(wt({$:6})),Sa(wt(no(!0))),Fa(wt(no(!1))),Ea(f(Dt,eo,u(yt,"pageX",Tt),u(yt,"pageY",Tt))),Ha((function(n){return{$:8,a:n}})),Ba((function(n){return{$:9,a:n}})),ka((function(n){return{$:10,a:n}})),Va((function(n){return{$:11,a:n}}))]))),Ia=o((function(n,e,r,t){return{cf:t,aQ:r,bD:n,bE:e}})),ja=Po,Ua={ca:!1,aQ:!1,cl:!1,M:ja,ag:!1,a$:!1,c0:!1,c1:!1,b7:!1},Oa=r((function(n,e){return w(e,{cf:n})})),Ga=r((function(n,e){return w(e,{aQ:n})})),qa=t((function(n,e,r){return w(r,{bD:n,bE:e})})),Xa=function(n){if(-1===n.$&&-1===n.d.$&&-1===n.e.$){if(-1!==n.e.d.$||n.e.d.a){var e=n.d,r=n.e;return i=r.b,c=r.c,t=r.d,f=r.e,d(Lo,1,n.b,n.c,d(Lo,0,e.b,e.c,e.d,e.e),d(Lo,0,i,c,t,f))}var t,o=n.d,a=n.e,i=a.b,c=a.c,l=(t=a.d).d,u=t.e,f=a.e;return d(Lo,0,t.b,t.c,d(Lo,1,n.b,n.c,d(Lo,0,o.b,o.c,o.d,o.e),l),d(Lo,1,i,c,u,f))}return n},Ya=function(n){if(-1===n.$&&-1===n.d.$&&-1===n.e.$){if(-1!==n.d.d.$||n.d.d.a){var e=n.d,r=n.e;return u=r.b,f=r.c,s=r.d,b=r.e,d(Lo,1,t=n.b,o=n.c,d(Lo,0,e.b,e.c,e.d,c=e.e),d(Lo,0,u,f,s,b))}var t=n.b,o=n.c,a=n.d,i=a.d,c=a.e,l=n.e,u=l.b,f=l.c,s=l.d,b=l.e;return d(Lo,0,a.b,a.c,d(Lo,1,i.b,i.c,i.d,i.e),d(Lo,1,t,o,c,d(Lo,0,u,f,s,b)))}return n},Ja=c((function(n,e,r,t,o,a,i){if(-1!==a.$||a.a){n:for(;;){if(-1===i.$&&1===i.a){if(-1===i.d.$){if(1===i.d.a)return Ya(e);break n}return Ya(e)}break n}return e}return d(Lo,r,a.b,a.c,a.d,d(Lo,0,t,o,a.e,i))})),Za=function(n){if(-1===n.$&&-1===n.d.$){var e=n.a,r=n.b,t=n.c,o=n.d,a=o.d,i=n.e;if(1===o.a){if(-1!==a.$||a.a){var c=Xa(n);if(-1===c.$){var l=c.e;return d(Do,c.a,c.b,c.c,Za(c.d),l)}return Mo}return d(Lo,e,r,t,Za(o),i)}return d(Lo,e,r,t,Za(o),i)}return Mo},Ka=r((function(n,e){if(-2===e.$)return Mo;var r=e.a,t=e.b,o=e.c,a=e.d,i=e.e;if(0>y(n,t)){if(-1===a.$&&1===a.a){var c=a.d;if(-1!==c.$||c.a){var l=Xa(e);if(-1===l.$){var f=l.e;return d(Do,l.a,l.b,l.c,u(Ka,n,l.d),f)}return Mo}return d(Lo,r,t,o,u(Ka,n,a),i)}return d(Lo,r,t,o,u(Ka,n,a),i)}return u(Qa,n,v(Ja,n,e,r,t,o,a,i))})),Qa=r((function(n,e){if(-1===e.$){var r=e.a,t=e.b,o=e.c,a=e.d,i=e.e;if(M(n,t)){var c=function(n){for(;;){if(-1!==n.$||-1!==n.d.$)return n;n=n.d}}(i);return-1===c.$?d(Do,r,c.b,c.c,a,Za(i)):Mo}return d(Do,r,t,o,a,u(Ka,n,i))}return Mo})),ni=r((function(n,e){var r=u(Ka,n,e);return-1!==r.$||r.a?r:d(Lo,1,r.b,r.c,r.d,r.e)})),ei=r((function(n,e){return{dj:-e/2,cn:e,ag:-n/2,a$:n/2,by:e/2,da:n}})),ri=r((function(n,e){return f(Eo,n,0,e)})),ti=r((function(n,e){return u(ni,n,e)})),oi=t((function(n,e,r){var t=u(n?ri:ti,e,r.M);switch(e){case" ":return w(r,{M:t,c1:n});case"Enter":return w(r,{cl:n,M:t});case"Shift":return w(r,{M:t,c0:n});case"Backspace":return w(r,{ca:n,M:t});case"ArrowUp":return w(r,{M:t,b7:n});case"ArrowDown":return w(r,{aQ:n,M:t});case"ArrowLeft":return w(r,{M:t,ag:n});case"ArrowRight":return w(r,{M:t,a$:n});default:return w(r,{M:t})}})),ai=r((function(n,e){switch(n.$){case 1:var r=n.a;return w(e,e.G.cf?{G:u(Oa,!1,e.G),a2:e.a2+r}:{a2:e.a2+r});case 2:var t=n.a.fD;return w(e,{aa:u(ei,t.da,t.cn)});case 3:return w(e,{aa:u(ei,n.a,n.b)});case 0:return w(e,{bk:f(oi,n.a,n.b,e.bk)});case 5:return w(e,{G:f(qa,e.aa.ag+n.a,e.aa.by-n.b,e.G)});case 6:return w(e,{G:u(Oa,!0,e.G)});case 7:return w(e,{G:u(Ga,n.a,e.G)});case 8:case 9:return w(e,{ab:f(Ur,(function(n){return u(Eo,n.bj,{bD:e.aa.ag+n.cI,bE:e.aa.by-n.cJ})}),e.ab,n.a)});case 10:case 11:return w(e,{ab:f(Ur,(function(n){return ni(n.bj)}),e.ab,n.a)});default:return w(e,{bk:Ua,G:s(Ia,e.G.bD,e.G.bE,!1,!1)})}})),ii=r((function(n,e){return{P:e,U:n}})),ci=f(Dt,r((function(n,e){return L(n,e)})),u(yt,"A1",Aa),u(yt,"A2",Aa)),li=sn,ui=s(li,t((function(n,e,r){return D(n,e,r)})),u(yt,"A1",Tt),u(yt,"A2",Tt),u(yt,"A3",Tt)),fi=f(Dt,r((function(n,e){return L(n,e)})),u(yt,"A1",Aa),u(yt,"A2",ui)),si=f(Dt,ii,u(yt,"floats",Ra(fi)),u(yt,"colors",Ra(ci))),di=dn,bi=u(Mt,E,E),vi=r((function(n,e){return e.$?Br:n(e.a)})),mi=r((function(n,e){return e.$?$r(e.a):n(e.a)})),pi=o((function(n,e,r,t){return{e1:e,e9:n,ff:r,fs:t}})),gi=Ie,hi=r((function(n,e){return e.$?$r(n):Rr(e.a)})),xi=We,Ci=function(n){return n.b?kr(n.a):Br},Mi=r((function(n,e){return e.$?Br:kr(n(e.a))})),Pi=r((function(n,e){return e.$?$r(e.a):Rr(n(e.a))})),yi=r((function(n,e){return Jr(e)-Jr(n)})),Ti=t((function(n,e,r){var t=Jr(r);return 1>y(Jr(n),t)&&1>y(t,Jr(e))})),Li=r((function(n,e){var r=f(Ti,"0","9",e)?Rr(u(yi,"0",e)):f(Ti,"a","z",e)?Rr(10+u(yi,"a",e)):f(Ti,"A","Z",e)?Rr(10+u(yi,"A",e)):$r({$:0,a:e});return u(mi,(function(r){return 0>y(r,n)?Rr(r):$r({$:1,a:e})}),r)})),Di=r((function(n,e){var r=Kr(e);if(1===r.$)return Rr(0);var t=r.a,o=t.b;return u(mi,(function(e){return u(mi,(function(r){return Rr(e+r*n)}),u(Di,n,o))}),u(Li,n,t.a))})),wi=function(n){for(var e=n.length,r=Array(e),t=0;e>t;){var o=n.charCodeAt(t);55296>o||o>56319?(r[e-t]=n[t],t++):(r[e-t]=n[t+1],r[e-++t]=n[t-1],t++)}return r.join("")},Si=r((function(n,e){return 2>n||n>36?$r({$:2,a:n}):u(Di,n,wi(e))})),Ei=Si(16),Fi=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),Ni=t((function(n,e,r){return s(Fi,n,e,r,1)})),$i=o((function(n,e,r,t){return s(Fi,n,e,r,t)})),zi=R,_i=j,Ai=r((function(n,e){var r=u(zi,10,n);return _i(e*r)/r})),Ri=X,Vi=function(n){return f(Ri,Tr,E,n)},ki=(Ho=function(n){var e=Vi(n);if(e.b&&!e.b.b){var r=e.a;return z($([r,r])).join("")}return n},u(zt,(function(n){return n.toLowerCase()}),u(zt,(function(n){return u(Mi,(function(e){return f(gi,1,e,n)}),u(xi,{eF:!1,fb:!1},"^#?(?:(?:([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2}))|(?:([a-f\\d])([a-f\\d])([a-f\\d]))|(?:([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2}))|(?:([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d])))$"))}),u(zt,vi(Ci),u(zt,Mi((function(n){return n.fs})),u(zt,Mi(ko(_t)),u(zt,hi("Parsing hex regex failed"),mi((function(n){var e=u(jt,u(zt,Ho,u(zt,Ei,Pi(ot))),n);n:for(;;){if(e.b&&!e.a.$&&e.b.b&&!e.b.a.$&&e.b.b.b&&!e.b.b.a.$){if(e.b.b.b.b){if(e.b.b.b.a.$||e.b.b.b.b.b)break n;var r=e.b,t=r.b;return Rr(s($i,e.a.a/255,r.a.a/255,t.a.a/255,u(Ai,2,t.b.a.a/255)))}var o=e.b;return Rr(f(Ni,e.a.a/255,o.a.a/255,o.b.a.a/255))}break n}return $r("Parsing ints from hex failed")}))))))))),Bi=r((function(n,e){return L(e.a,n(e.b))})),Hi=s(Fi,1,1,1,1),Wi=r((function(n,e){return e.$?n:e.a})),Ii=u(zt,di(si),u(zt,Pi((function(n){return{P:u(jt,Bi(u(zt,ki,Wi(Hi))),n.P),aE:"",U:n.U,aq:""}})),Wi(bi))),ji=function(n){return f(Ur,r((function(n,e){return f(yn,n.a,n.b,e)})),{},n)},Ui=Pn,Oi=function(n){var e=n.b;return ji($([L("A1",Ui(n.a)),L("A2",Ui(e))]))},Gi=Pn,qi=function(n){var e=n.b,r=n.c;return ji($([L("A1",Gi(n.a)),L("A2",Gi(e)),L("A3",Gi(r))]))},Xi=function(n){var e=n.b;return ji($([L("A1",Ui(n.a)),L("A2",qi(e))]))},Yi=r((function(n,e){return f(Ur,function(n){return r((function(e,r){return r.push(n(e)),r}))}(n),[],e)})),Ji=q,Zi=function(n){return u(Ji,n,"")},Ki=t((function(n,e,r){return n>0?f(Ki,n>>1,S(e,e),1&n?S(r,e):r):r})),Qi=r((function(n,e){return f(Ki,n,e,"")})),nc=t((function(n,e,r){return S(u(Qi,n-At(r),Zi(e)),r)})),ec=function(n){return 0>n||n>1114111?"�":n>65535?String.fromCharCode(Math.floor((n-=65536)/1024)+55296,n%1024+56320):String.fromCharCode(n)},rc=V,tc=function(n){var e=function(n){return 10>n?Wr(n):Zi(ec(87+n))};return 16>n?e(n):S(tc(n/16|0),e(u(rc,16,n)))},oc=u(zt,tc,u(nc,2,"0")),ac=function(n){return{aP:n.d,ce:n.c,cm:n.b,cV:n.a}},ic=function(n){var e=ac(n),r=e.cV,t=e.cm,o=e.ce;return u(Ir,"",u(Tr,"#",u(jt,u(zt,_i,oc),$([255*r,255*t,255*o]))))},cc=u(zt,(function(n){return{P:u(jt,Bi(ic),n.P),U:n.U}}),u(zt,(function(n){return ji($([L("floats",u(Yi,Xi,n.U)),L("colors",u(Yi,Oi,n.P))]))}),Hr(0))),lc=function(n){return 0>n?-n:n},uc=function(n){if(0===n.length||/[\sxbo]/.test(n))return Br;var e=+n;return e==e?kr(e):Br},fc=r((function(n,e){return e.$?n:e.a})),sc=t((function(n,e,r){return u(fc,NaN,uc(u(n,e,r)))})),dc=function(n){return!n},bc=r((function(n,e){for(;;){if(!e.b)return!1;var r=e.b;if(n(e.a))return!0;n=n,e=r}})),vc=r((function(n,e){var r=u(bc,(function(n){return"0"!==n&&"."!==n}),Vi(e));return S(n&&r?"-":"",e)})),mc=Q,pc=function(n){var e=n.a,r=n.b;if("9"===e){var t=Kr(r);return 1===t.$?"01":u(Ji,"0",pc(t.a))}var o=Jr(e);return o>=48&&57>o?u(Ji,ec(o+1),r):"0"},gc=function(n){return n===1/0||n===-1/0},hc=G,xc=t((function(n,e,r){return S(r,u(Qi,n-At(r),Zi(e)))})),Cc=function(n){var e=u(jr,".",n);return e.b?L(e.a,e.b.b?e.b.a:"0"):L("0","0")},Mc=r((function(n,e){var r=e.b;return L(n(e.a),r)})),Pc=t((function(n,e,r){if(gc(r)||hc(r))return mc(r);var t=0>r,o=Cc(function(n){var e=u(jr,"e",mc(lc(n)));if(e.b){if(e.b.b){var r=e.a,t=e.b.a,o=u(fc,0,function(n){for(var e=0,r=n.charCodeAt(0),t=43==r||45==r?1:0,o=t;n.length>o;++o){var a=n.charCodeAt(o);if(48>a||a>57)return Br;e=10*e+a-48}return o==t?Br:kr(45==r?-e:e)}(u(kt,"+",t)?u(Vt,1,t):t)),a=Cc(r),i=S(a.a,a.b),c=0>o?u(fc,"0",u(Mi,(function(n){return n.a+"."+n.b}),u(Mi,Mc(Zi),Kr(S(u(Qi,lc(o),"0"),i))))):f(xc,o+1,"0",i);return S(0>n?"-":"",c)}return S(0>n?"-":"",r=e.a)}return""}(lc(r))),a=o.a,i=o.b,c=At(a)+e,l=S(u(Qi,1-c,"0"),f(xc,c,"0",S(a,i))),s=At(l),d=u(st,1,c),b=u(n,t,f(Rt,d,s,l)),v=f(Rt,0,d,l),m=b?wi(u(fc,"1",u(Mi,pc,Kr(wi(v))))):v,p=At(m),g="0"===m?m:e>0?0>y(e,At(i))?f(Rt,0,p-e,m)+"."+f(Rt,p-e,p,m):S(a+".",f(xc,e,"0",i)):S(m,u(Qi,lc(e),"0"));return u(vc,t,g)})),yc=Pc(r((function(n,e){var r,t=Kr(e);return 1!==t.$&&("5"===t.a.a?""!==t.a.b||!n:(r=Jr(t.a.a))>53&&n||r>=53&&!n)}))),Tc=sc(yc),Lc=t((function(n,e,r){var t=u(tt,10,lc(e-n));return u(Tc,0>t?3:1>t?2:2>t?1:0,r)})),Dc=r((function(n,e){switch(n.$){case 2:var r=Ii(e.aq);return w(r,{aE:r.aE,aq:r.aq});case 3:return w(e,{aq:n.a});case 4:return w(e,{aE:cc(e)});case 0:var t=n.a,o=n.b;return w(e,{U:u(jt,(function(n){var e=n.a,r=n.b,a=r.a,i=r.c;return M(e,t)?L(e,D(a,f(Lc,a,i,o),i)):n}),e.U)});default:return t=n.a,o=n.b,w(e,{P:u(jt,(function(n){var e=n.a;return M(e,t)?L(e,o):n}),e.P)})}})),wc=o((function(n,e,r,t){var o=t.F;switch(r.$){case 0:return t;case 1:return w(t,{a6:r.a});case 2:return w(t,{bd:!1});case 3:return w(t,{bd:!0});case 4:return w(t,{af:f(e,t.F,r.a,t.af)});case 5:return w(t,{F:w(o,{bP:u(Dc,r.a,o.bP)})});default:var a=r.a,i=1===a.$?u(n,o,t.af):t.af;return w(t,{F:u(ai,a,t.F),af:i})}})),Sc=(Ma=function(){return{ek:(n=Ve.body,e=Ve.documentElement,{da:Math.max(n.scrollWidth,n.offsetWidth,e.scrollWidth,e.offsetWidth,e.clientWidth),cn:Math.max(n.scrollHeight,n.offsetHeight,e.scrollHeight,e.offsetHeight,e.clientHeight)}),fD:{bD:ke.pageXOffset,bE:ke.pageYOffset,da:Ve.documentElement.clientWidth,cn:Ve.documentElement.clientHeight}};var n,e},Ln((function(n){Ae((function(){n(Tn(Ma()))}))}))),Ec=r((function(n,e){return{bP:e,cj:n.cj,bk:Ua,G:s(Ia,0,0,!1,!1),aa:u(ei,600,600),a2:0,ab:Po}})),Fc=In,Nc=Fc(E),$c=function(n){return{$:5,a:n}},zc=function(n){return{$:4,a:n}},_c={$:2},Ac={$:0},Rc=function(n){return{$:1,a:n}},Vc={$:3},kc=r((function(n){return n})),Bc=re("button"),Hc=function(n){return n?"Level Editor":"Configurations"},Wc=function(n){return u(fc,0,Ci(u(ko,(function(e){return M(Hc(e),n)?kr(e):Br}),$([0,1]))))},Ic=oe,jc=Ic,Uc=ae,Oc=r((function(n,e){return u(Uc,n,{$:0,a:e})})),Gc=r((function(n,e){return f(It,yt,e,n)})),qc=u(Gc,$(["target","value"]),Aa),Xc=function(n){return u(Oc,"click",wt(n))},Yc=re("option"),Jc=re("select"),Zc=ie,Kc=Zc,Qc=ne,nl=Qc,el=r((function(n,e){return u(ce,n,Ui(e))})),rl=el("value"),tl=r((function(n,e){return{$:1,a:n,b:e}})),ol=r((function(n,e){return{$:0,a:n,b:e}})),al=s(Fi,0,0,0,1),il=u(Bc,$([u(Kc,"cursor","pointer"),Xc({$:4})]),$([nl("Export Configurations as json")])),cl=re("h3"),ll=re("p"),ul=Pn,fl=r((function(n,e){return u(ce,n,ul(e))})),sl=fl("readOnly"),dl=re("textarea"),bl=function(n){return u(Et,E,$([u(dl,$([sl(!0)]),$([nl(n.aE)]))]))},vl=function(n){return u(Et,E,$([u(cl,E,$([nl("Export Configurations")])),u(ll,E,$([il])),u(ll,E,$([bl(n)]))]))},ml=el("htmlFor"),pl=re("hr"),gl=el("id"),hl=u(Bc,$([u(Kc,"cursor","pointer"),Xc({$:2})]),$([nl("Import Configurations")])),xl=function(n){return{$:3,a:n}},Cl=function(n){return L(n,!0)},Ml=r((function(n,e){return u(Uc,n,{$:1,a:e})})),Pl=function(n){return u(Ml,"input",u(Lt,Cl,u(Lt,n,qc)))},yl=function(n){return u(Et,E,$([u(dl,$([Pl(xl)]),$([nl(n.aq)]))]))},Tl=function(n){return u(Et,E,$([u(cl,E,$([nl("Import Configurations")])),u(ll,E,$([yl(n)])),u(ll,E,$([hl]))]))},Ll=re("input"),Dl=re("label"),wl=el("max"),Sl=el("min"),El=el("name"),Fl=re("span"),Nl=el("type"),$l=t((function(n,e,t){var o,a,i,c,l=u(Et,$([u(Kc,"position","fixed"),u(Kc,"top","0px"),u(Kc,"left","0px"),u(Kc,"width",mc(t.F.aa.da)+"px"),u(Kc,"height",mc(t.F.aa.cn)+"px"),u(Kc,"font-size","16px")]),$([u(jc,kc(Ac),u(n,t.F,t.af))])),f=t.a6?u(jc,zc,u(e,t.F,t.af)):u(jc,$c,(o=t.F.bP,a=function(n){var e=n.a,r=n.b,t=r.a,o=r.b,a=r.c;return u(Et,$([u(Kc,"margin-top","15px")]),$([u(Et,E,$([u(Dl,$([ml(e)]),$([nl(e),nl(": "),u(Fl,$([u(Kc,"font-family","monospace"),u(Kc,"font-weight","bold")]),$([nl(mc(o))]))]))])),u(Ll,$([Nl("range"),gl(e),El(e),Sl(mc(t)),wl(mc(a)),Pl((function(n){return u(ol,e,u(fc,0,uc(n)))})),u(el,"step","any"),u(Kc,"width","200px"),rl(mc(o))]),E)]))},i=function(n){var e=n.a,r=n.b;return u(Et,$([u(Kc,"margin-top","15px")]),$([u(Et,E,$([u(Dl,$([ml(e)]),$([nl(e)]))])),u(Ll,$([Nl("color"),u(Kc,"width","200px"),u(Kc,"height","30px"),gl(e),El(e),Pl((function(n){return u(tl,e,u(Wi,al,ki(n)))})),rl(ic(r))]),E)]))},u(Et,$([u(Kc,"margin-left","20px"),u(Kc,"height","100%"),u(Kc,"overflow","scroll")]),$([u(Et,E,u(jt,a,o.U)),u(Et,E,u(jt,i,o.P)),u(pl,E,E),vl(o),Tl(o)])))),s=u(Et,$([u(Kc,"margin-left","0px")]),$([u(Jc,$([(c=u(zt,Wc,Rc),u(Oc,"change",u(Lt,c,qc))),rl(Hc(t.a6)),u(Kc,"width","200px"),u(Kc,"height","40px"),u(Kc,"font-size","20px")]),u(jt,(function(n){return u(Yc,$([rl(Hc(n))]),$([nl(Hc(n))]))}),$([0,1])))])),d=r((function(n,e){return u(Bc,$([u(Kc,"font-size","30px"),u(Kc,"width","40px"),u(Kc,"height","40px"),Xc(n)]),$([nl(e)]))})),b=u(Et,$([u(Kc,"position","fixed"),u(Kc,"top","0px"),u(Kc,"left","0px"),u(Kc,"width",mc(250)+"px"),u(Kc,"height",mc(t.F.aa.cn)+"px"),u(Kc,"font-family",'-apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif'),u(Kc,"font-size","16px")]),$(t.bd?[u(Et,$([u(Kc,"height","100px")]),$([u(d,_c,"✕"),s])),u(Et,$([u(Kc,"height",mc(t.F.aa.cn-100)+"px")]),$([f]))]:[u(d,Vc,"≡")]));return u(Et,$([u(Kc,"touch-action","none"),u(Kc,"user-select","none")]),$([l,b]))})),zl=i((function(n,e,t,o,a,i){return Kt({e2:function(n){var e=u(Ec,n,t);return L({a6:0,F:e,bd:!1,af:o(e),c9:0},u(Zt,u(zt,Ft,Nt),Sc))},ft:function(n){return 1===n.c9?u(oo,Nt,_a($t)):Wa},fA:r((function(n,r){return L(s(wc,e,i,n,r),Nc)})),fC:u($l,n,a)})})),_l=o((function(n,e,o,a){return b(zl,n,e,o,a,r((function(){return u(Et,E,E)})),t((function(n,e,r){return r})))})),Al=(Wo=$([L(-3,-3),L(-3,1),L(-3,2),L(-3,3),L(-2,-2),L(-2,0),L(-2,3),L(-2,4),L(-1,-5),L(-1,-4),L(-1,-3),L(-1,-2),L(-1,0),L(-1,3),L(-1,4),L(0,-4),L(0,-3),L(0,-2),L(0,-1),L(0,0),L(0,1),L(0,2),L(0,3),L(0,4),L(1,-5),L(1,-4),L(1,-3),L(1,-2),L(1,0),L(1,3),L(1,4),L(2,-2),L(2,0),L(2,3),L(2,4),L(3,-3),L(3,1),L(3,2),L(3,3)]),f(Ur,ri,ja,Wo)),Rl=3.141592653589793,Vl=function(n){return Rl*(n/180)},kl=U,Bl=r((function(n,e){var r=e.bF-n.bF,t=e.bE-n.bE,o=e.bD-n.bD,a=u(st,lc(o),u(st,lc(t),lc(r)));if(a){var i=r/a,c=t/a,l=o/a,f=kl(l*l+c*c+i*i);return kr({bD:l/f,bE:c/f,bF:i/f})}return Br})),Hl=r((function(n,e){return{bD:e.bE*n.bF-e.bF*n.bE,bE:e.bF*n.bD-e.bD*n.bF,bF:e.bD*n.bE-e.bE*n.bD}})),Wl=function(n){var e=n,r=u(st,lc(e.bD),u(st,lc(e.bE),lc(e.bF)));if(r){var t=e.bF/r,o=e.bE/r,a=e.bD/r,i=kl(a*a+o*o+t*t);return kr({bD:a/i,bE:o/i,bF:t/i})}return Br},Il=r((function(n,e){return{bD:e.bD-n.bD,bE:e.bE-n.bE,bF:e.bF-n.bF}})),jl=r((function(n,e){return e.bD*n.bD+e.bE*n.bE+e.bF*n.bF})),Ul=r((function(n,e){return y(e,n)>0})),Ol=r((function(n,e){return 0>y(e,n)})),Gl=r((function(n,e){return{bD:e.bD-n.bD,bE:e.bE-n.bE,bF:e.bF-n.bF}})),ql=r((function(n,e){var r=e.bD*n.bD+e.bE*n.bE+e.bF*n.bF;return{bD:n.bD*r,bE:n.bE*r,bF:n.bF*r}})),Xl={bD:0,bE:0,bF:0},Yl=t((function(n,e,r){return u(vi,(function(t){return u(vi,(function(o){var a,i=u(Hl,e,n),c=u(jl,r,i),l=u(Ul,0,c)?i:u(Ol,0,c)?{bD:-(a=i).bD,bE:-a.bE,bF:-a.bF}:Xl;return u(Mi,(function(n){return D(t,o,n)}),Wl(l))}),Wl(u(Gl,u(ql,t,e),e)))}),Wl(n))})),Jl=function(n){var e=function(n){var e=n,r=lc(e.bF),t=lc(e.bE),o=lc(e.bD);if(1>y(o,t)){if(1>y(o,r)){var a=kl(e.bF*e.bF+e.bE*e.bE);return{bD:0,bE:-e.bF/a,bF:e.bE/a}}return a=kl(e.bE*e.bE+e.bD*e.bD),{bD:-e.bE/a,bE:e.bD/a,bF:0}}return 1>y(t,r)?(a=kl(e.bF*e.bF+e.bD*e.bD),{bD:e.bF/a,bE:0,bF:-e.bD/a}):(a=kl(e.bD*e.bD+e.bE*e.bE),{bD:-e.bE/a,bE:e.bD/a,bF:0})}(n);return L(e,{bD:n.bE*e.bF-n.bF*e.bE,bE:n.bF*e.bD-n.bD*e.bF,bF:n.bD*e.bE-n.bE*e.bD})},Zl=r((function(n,e){var r=Jl(n);return{cH:e,dc:r.a,dd:r.b,de:n}})),Kl=function(n){var e=u(Il,n.eV,n.eS),r=n.fz,t=f(Yl,e,r,u(Hl,e,r));if(t.$){var o=Wl(e);if(o.$){var a=Jl(n.fz);return{cH:n.eS,dc:a.b,dd:n.fz,de:a.a}}return u(Zl,o.a,n.eS)}var i=t.a;return{cH:n.eS,dc:i.c,dd:i.b,de:i.a}},Ql={bD:0,bE:0,bF:0},nu=function(n){return lc(n)},eu=function(n){return.5*n},ru=H,tu={bD:0,bE:1,bF:0},ou=k,au=r((function(n,e){return(e-ut(e/n)*n)/n})),iu=o((function(n,e,r,t){return n+(e-n)*(1+ou(6.283185307179586*u(au,r,t)))/2})),cu=function(n){return a=(o={eS:{bD:1+s(iu,-5,5,7,n.a2),bE:1,bF:20},eV:{bD:0,bE:0,bF:0},fz:{bD:0,bE:1,bF:0}}).eV,i=o.eS,c=o.fz,e={et:Vl(40),c8:Kl({eS:i,eV:a,fz:u(fc,tu,u(Bl,Ql,c))})},t=eu(nu(e.et)),{cU:(r=ru(t),{$:0,a:r}),c8:e.c8};var e,r,t,o,a,i,c},lu=t((function(n,e,r){return{bD:n,bE:e,bF:r}})),uu=r((function(n,e){return e.bD*n.bD+e.bE*n.bE+e.bF*n.bF})),fu=function(n){return n.eM},su=r((function(n,e){return n*e})),du=function(n){return n.cH},bu=r((function(n,e){var r=n.cH,t=n.fe;return(e.bD-r.bD)*t.bD+(e.bE-r.bE)*t.bE+(e.bF-r.bF)*t.bF})),vu=t((function(n,e,r){return{bD:r.bD+e*n.bD,bE:r.bE+e*n.bE,bF:r.bF+e*n.bF}})),mu=r((function(n,e){var r=fu(e),t=u(uu,n.fe,r);if(t){var o=du(e);return kr(f(vu,r,u(su,-1/t,u(bu,n,o)),o))}return Br})),pu=r((function(n,e){return{bD:n,bE:e}})),gu=r((function(n,e){return n*e})),hu=function(n){return n.eA},xu=r((function(n,e){return e/n})),Cu=function(n){return n.cH},Mu=function(n){return Cu(n)},Pu=function(n){return-n},yu={bD:0,bE:0,bF:-1},Tu=r((function(n,e){return e/n})),Lu=r((function(n,e){var r=n.de,t=n.dd,o=n.dc;return{bD:o.bD*e.bD+t.bD*e.bE+r.bD*e.bF,bE:o.bE*e.bD+t.bE*e.bE+r.bE*e.bF,bF:o.bF*e.bD+t.bF*e.bE+r.bF*e.bF}})),Du=r((function(n,e){return{eM:e,cH:n}})),wu=function(n){return{bD:-n.bD,bE:-n.bE,bF:-n.bF}},Su=function(n){return n.de},Eu=function(n){return wu(Su(n))},Fu=r((function(n,e){var r=n.cH,t=n.dc;return(e.bD-r.bD)*t.bD+(e.bE-r.bE)*t.bE})),Nu=t((function(n,e,r){return{bD:n,bE:e,bF:r}})),$u=o((function(n,e,r,t){var o=n.cH,a=n.de,i=n.dd,c=n.dc;return{bD:o.bD+e*c.bD+r*i.bD+t*a.bD,bE:o.bE+e*c.bE+r*i.bE+t*a.bE,bF:o.bF+e*c.bF+r*i.bF+t*a.bF}})),zu=r((function(n,e){var r=n.cH,t=n.dd;return(e.bD-r.bD)*t.bD+(e.bE-r.bE)*t.bE})),_u=t((function(n,e,r){var t=n,o=u(zu,hu(e),r),a=u(Fu,hu(e),r),i=t.c8,c=function(n){return n.$7}(e).b,l=t.cU;if(l.$){var d=u(Tu,c,l.a);return u(Du,s($u,i,u(gu,d,a),u(gu,d,o),0),Eu(t.c8))}var b=Pu(u(xu,l.a,u(su,.5,c))),v=u(Lu,i,u(fc,yu,Wl(f(Nu,a,o,b))));return u(Du,Mu(t.c8),v)})),Au=B,Ru=function(n){var e=n;return{bD:ou(e),bE:Au(e)}},Vu=r((function(n,e){return{cH:e,dc:n,dd:(r=n,{bD:-r.bE,bE:r.bD})};var r})),ku=r((function(n,e){return u(Vu,Ru(n),e)})),Bu=t((function(n,e,r){var t=n.a,o=n.b;return{eA:u(ku,e,r),$7:L(nu(t),nu(o))}})),Hu=function(n){return n.bD},Wu=r((function(n,e){return{bD:n,bE:e}})),Iu=function(n){return n.bE},ju=function(n){return n.bF},Uu=o((function(n,e,r,t){var o=r.bD,a=r.bE,i=f(Bu,L(e.da,e.cn),Vl(0),u(pu,0,0));return u(Mi,(function(n){return f(lu,Hu(n),Iu(n),ju(n))}),u(mu,t,f(_u,n,i,u(Wu,o,a))))})),Ou=r((function(n,e){return{bD:e.bD+n.bD,bE:e.bE+n.bE,bF:e.bF+n.bF}})),Gu=r((function(n,e){return{fe:n,cH:e}})),qu=r((function(n,e){return u(Gu,e.fe,u(Ou,n,e.cH))})),Xu=r((function(n,e){return{fe:e,cH:n}})),Yu={bD:0,bE:0,bF:1},Ju=Yu,Zu=u(Xu,Ql,Ju),Ku=o((function(n,e,r,t){return s(Uu,e,r,t,u(qu,f(Nu,0,0,n),Zu))})),Qu=Ku(0),nf=r((function(n,e){var r=f(Qu,cu(n),n.aa,n.G);if(r.$)return e;var t=r.a;return w(e,{aD:u(ri,L(_i(t.bD),_i(t.bE)),e.aD)})})),ef=r((function(n,e){var r=f(Qu,cu(n),n.aa,n.G);if(r.$)return e;var t=r.a;return w(e,{aD:u(ti,L(_i(t.bD),_i(t.bE)),e.aD)})})),rf=r((function(n,e){return n.bk.c0&&n.G.aQ?u(ef,n,e):n.G.aQ?u(nf,n,e):e})),tf=t((function(n,e,r){return 0>y(r,n)?n:y(r,e)>0?e:r})),of=r((function(n,e){return{$:0,a:n,b:e}})),af=r((function(n,e){return y(e,n)>-1})),cf=r((function(n,e){return n+.5*(e-n)})),lf=r((function(n,e){return e-n})),uf={bD:-1,bE:0,bF:0},ff={bD:0,bE:-1,bF:0},sf={bD:1,bE:0,bF:0},df=t((function(n,e,r){return{bD:n,bE:e,bF:r}})),bf=i((function(n,e,r,t,o,a){var i=u(af,r,a)?Yu:yu,c=u(af,e,o)?tu:ff,l=u(af,n,t)?sf:uf,s=D(nu(u(lf,n,t)),nu(u(lf,e,o)),nu(u(lf,r,a)));return{eA:{cH:f(df,u(cf,n,t),u(cf,e,o),u(cf,r,a)),dc:l,dd:c,de:i},$7:s}})),vf=r((function(n,e){return b(bf,Hu(n),Iu(n),ju(n),Hu(e),Iu(e),ju(e))})),mf=t((function(n,e,r){return{bD:n,bE:e,bF:r}})),pf=r((function(n,e){var r=e/2;return u(of,n,u(vf,f(mf,-r,-r,-r),f(mf,r,r,r)))})),gf=function(n){return{$:5,a:n}},hf=r((function(n,e){return{$:2,a:n,b:e}})),xf=r((function(n,e){return{$:4,a:n,b:e}})),Cf=r((function(n,e){return{$:3,a:n,b:e}})),Mf=r((function(n,e){return{$:1,a:n,b:e}})),Pf=t((function(n,e,r){return{bD:n,bE:e,bF:r}})),yf=function(n){return n.eA},Tf=function(n){return n.$7},Lf=function(n){return n.dc},Df=function(n){return n.dd},wf=r((function(n,e){return{cH:u(Ou,n,Cu(e)),dc:Lf(e),dd:Df(e),de:Su(e)}})),Sf=r((function(n,e){return{eA:u(wf,n,yf(e)),$7:Tf(e)}})),Ef=r((function(n,e){var r=e;return u(Du,u(Ou,n,r.cH),r.eM)})),Ff=r((function(n,e){var r=e;return{k:u(Ef,n,r.k),e6:r.e6,fk:r.fk}})),Nf=r((function(n,e){var r=e.b;return L(n(e.a),n(r))})),$f=r((function(n,e){return u(Nf,Ou(n),e)})),zf=function(n){return n.eH},_f=function(n){return n.fk},Af=r((function(n,e){return{eH:e,fk:nu(n)}})),Rf=r((function(n,e){return u(Af,_f(e),u(Ou,n,zf(e)))})),Vf=r((function(n,e){var r=e.b,t=e.c;return D(n(e.a),n(r),n(t))})),kf=r((function(n,e){return u(Vf,Ou(n),e)})),Bf=r((function(n,e){var r=n.a,t=n.b,o=n.c,a=f(Pf,r,t,o);switch(e.$){case 0:return u(of,e.a,u(Sf,a,e.b));case 1:return u(Mf,e.a,u(kf,a,e.b));case 3:return u(Cf,e.a,u(Rf,a,e.b));case 2:return u(hf,e.a,u(Ff,a,e.b));case 4:return u(xf,e.a,u($f,a,e.b));default:var i=e.a;return gf(u(jt,Bf(D(r,t,o)),i))}})),Hf=function(n){return Bf(D(n,0,0))},Wf=function(n){return Bf(D(0,n,0))},If=function(n){return Bf(D(0,0,n))},jf=t((function(n,e,r){var t=n,o=r,a=.5*e,i=ou(a),c=Au(a),l=t.eM,u=l.bD*c,f=i*u,s=u*u,d=l.bE*c,b=i*d,v=u*d,m=d*d,p=l.bF*c,g=i*p,h=u*p,x=d*p,C=p*p;return{bD:(1-2*(m+C))*o.bD+2*(v-g)*o.bE+2*(h+b)*o.bF,bE:2*(v+g)*o.bD+(1-2*(s+C))*o.bE+2*(x-f)*o.bF,bF:2*(h-b)*o.bD+2*(x+f)*o.bE+(1-2*(s+m))*o.bF}})),Uf=t((function(n,e,r){var t=n,o=r,a=.5*e,i=ou(a),c=Au(a),l=t.cH,u=o.bD-l.bD,f=o.bE-l.bE,s=o.bF-l.bF,d=t.eM,b=d.bD*c,v=i*b,m=b*b,p=d.bE*c,g=i*p,h=b*p,x=p*p,C=d.bF*c,M=i*C,P=b*C,y=p*C,T=C*C;return{bD:l.bD+(1-2*(x+T))*u+2*(h-M)*f+2*(P+g)*s,bE:l.bE+2*(h+M)*u+(1-2*(m+T))*f+2*(y-v)*s,bF:l.bF+2*(P-g)*u+2*(y+v)*f+(1-2*(m+x))*s}})),Of=t((function(n,e,r){return{cH:f(Uf,n,e,Cu(r)),dc:f(jf,n,e,Lf(r)),dd:f(jf,n,e,Df(r)),de:f(jf,n,e,Su(r))}})),Gf=t((function(n,e,r){return{eA:f(Of,n,e,yf(r)),$7:Tf(r)}})),qf=r((function(n,e){var r=u(Uf,n,e),t=u(jf,n,e);return function(n){var e=n;return u(Du,r(e.cH),t(e.eM))}})),Xf=t((function(n,e,r){var t=r;return{k:f(qf,n,e,t.k),e6:t.e6,fk:t.fk}})),Yf=t((function(n,e,r){return u(Nf,u(Uf,n,e),r)})),Jf=t((function(n,e,r){return u(Af,_f(r),f(Uf,n,e,zf(r)))})),Zf=t((function(n,e,r){return u(Vf,u(Uf,n,e),r)})),Kf=t((function(n,e,r){switch(r.$){case 0:return u(of,r.a,f(Gf,n,e,r.b));case 1:return u(Mf,r.a,f(Zf,n,e,r.b));case 3:return u(Cf,r.a,f(Jf,n,e,r.b));case 2:return u(hf,r.a,f(Xf,n,e,r.b));case 4:return u(xf,r.a,f(Yf,n,e,r.b));default:var t=r.a;return gf(u(jt,u(Kf,n,e),t))}})),Qf=sf,ns=u(Du,Ql,Qf),es=r((function(n,e){return f(Kf,ns,n,e)})),rs=tu,ts=u(Du,Ql,rs),os=r((function(n,e){return f(Kf,ts,n,e)})),as=u(Du,Ql,Ju),is=r((function(n,e){return f(Kf,as,n,e)})),cs=s(Fi,237/255,212/255,0,1),ls=r((function(n,e){var r;return u(Wf,s(iu,-.5,.5,7,n.a2),(r=u(jt,(function(e){var r=e.a,t=e.b,o=s(iu,-3.141592653589793,Rl,14,n.a2+.1*(r+t));return u(If,-.5,u(Wf,t,u(Hf,r,u(is,o,u(es,o,u(os,o,u(pf,cs,1)))))))}),function(n){return e=n,f(wr,t((function(n,e,r){return u(Tr,n,r)})),E,e);var e}(e.aD)),gf(r)))})),us=function(n){return{$:0,a:n}},fs={$:3},ss=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),ds=ss,bs=r((function(n,e){return e.b?f(It,Tr,e,n):n})),vs=function(n){return f(It,bs,E,n)},ms=r((function(n,e){return vs(u(jt,n,e))})),ps=function(n){return u(le,"height",Wr(n))},gs=function(n){return te(function(n){return"script"==n?"p":n}(n))},hs=function(n){return{$:2,a:n}},xs=r((function(n,e){switch(e.$){case 0:return u(dr,n,e);case 1:return u(br,n,e);case 2:return u(vr,n,e);case 3:return u(mr,n,e);case 4:return u(pr,n,e);default:return u(gr,n,e)}})),Cs=r((function(n,e){switch(e.$){case 0:return u(Xe,n,e);case 1:return u(Ye,n,e);case 2:return u(Je,n,e);case 3:return u(Ze,n,e);case 4:return u(Ke,n,e);case 5:return u(Qe,n,e);case 6:return u(nr,n,e);case 7:return u(er,n,e);default:return function(n){var e=n.sampleAlphaToCoverage;e.toggle=n.toggle,e.enabled||(n.gl.enable(n.gl.SAMPLE_ALPHA_TO_COVERAGE),e.enabled=!0)}(n)}})),Ms=t((function(n,e,r){return f(sr,n,e,r)})),Ps=yr,ys=s(Ps,1,1,1,1),Ts=t((function(n,e,r){return u(jt,(function(n){return u(n,e,r)}),n)})),Ls=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),Ds=r((function(n,e){var r=e.bD,t=e.bE;return f(Ls,n*r/t,n,n*(1-r-t)/t)})),ws=Mr,Ss=r((function(n,e){return f(ws,3.2406*(t=(r=u(Ds,n,e)).a)-1.5372*(o=r.b)-.4986*(a=r.c),-.9689*t+1.8758*o+.0415*a,.0557*t-.204*o+1.057*a);var r,t,o,a})),Es=r((function(n,e){return{dA:M(n.dA,e.dA),q:n.q*e.q+n.r*e.t+n.s*e.w,r:n.q*e.r+n.r*e.u+n.s*e.x,s:n.q*e.s+n.r*e.v+n.s*e.y,t:n.t*e.q+n.u*e.t+n.v*e.w,u:n.t*e.r+n.u*e.u+n.v*e.x,v:n.t*e.s+n.u*e.v+n.v*e.y,w:n.w*e.q+n.x*e.t+n.y*e.w,x:n.w*e.r+n.x*e.u+n.y*e.x,y:n.w*e.s+n.x*e.v+n.y*e.y,H:e.H+(n.H*e.q+n.I*e.t+n.J*e.w)*e.b5,I:e.I+(n.H*e.r+n.I*e.u+n.J*e.x)*e.b5,J:e.J+(n.H*e.s+n.I*e.v+n.J*e.y)*e.b5,b5:n.b5*e.b5}})),Fs=function(n){var e=new Float64Array(16);return e[0]=n.dI,e[1]=n.dM,e[2]=n.dQ,e[3]=n.dU,e[4]=n.dJ,e[5]=n.dN,e[6]=n.dR,e[7]=n.dV,e[8]=n.dK,e[9]=n.dO,e[10]=n.dS,e[11]=n.dW,e[12]=n.dL,e[13]=n.dP,e[14]=n.dT,e[15]=n.dX,e},Ns=a((function(n,e,r,t,o){return b(o,n,s(Ps,t.b5,t.b5,t.b5,t.dA?1:-1),function(n){return Fs({dI:n.q,dJ:n.t,dK:n.w,dL:n.H,dM:n.r,dN:n.u,dO:n.x,dP:n.I,dQ:n.s,dR:n.v,dS:n.y,dT:n.J,dU:0,dV:0,dW:0,dX:1})}(t),t.dA,e,r)})),$s=i((function(n,e,r,t,o,a){n:for(;;)switch(o.$){case 0:return a;case 5:var i=o.b;n=n,e=e,r=r,t=u(Es,o.a,t),o=i,a=a;continue n;case 1:return{N:u(Tr,d(Ns,n,e,r,t,o.b),a.N),W:a.W,fo:a.fo};case 3:return{N:a.N,W:u(Tr,d(Ns,n,e,r,t,o.b),a.W),fo:a.fo};case 2:return{N:a.N,W:a.W,fo:u(Tr,d(Ns,n,e,r,t,o.a),a.fo)};default:var c=o.a;return f(Ur,s($s,n,e,r,t),a,c)}})),zs=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),_s=zs,As=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),Rs=r((function(n,e){return{$:6,a:n,b:e}})),Vs=Rs,ks=$([s(As,518,!1,0,1),s(_s,!1,!1,!1,!1),u(Vs,0,1)]),Bs=519,Hs=7681,Ws={src:"\n        precision lowp float;\n\n        void main() {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        }\n    ",attributes:{},uniforms:{}},Is=qe,js=r((function(n,e){return{$:0,a:n,b:e}})),Us=js({dp:1,dz:0,d4:5}),Os=Cr,Gs=Us($([{ec:u(Os,-1,-1)},{ec:u(Os,1,-1)},{ec:u(Os,-1,1)},{ec:u(Os,1,1)}])),qs={src:"\n        precision lowp float;\n\n        attribute vec2 position;\n\n        void main() {\n            gl_Position = vec4(position, 0.0, 1.0);\n        }\n    ",attributes:{position:"ec"},uniforms:{}},Xs=function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return function(f){return{$:2,a:n,b:e,c:r,d:t,e:o,f:a,g:i,h:c,i:l,j:u,k:f}}}}}}}}}}}},Ys=t((function(n,e,t){var o=n.cW,a=n.cy,i=n.db,c=r((function(n,e){return e(n)})),l=r((function(n,e){return e(n)})),s=function(n){return u(zt,c(n.bu),u(zt,l(n.bf),u(zt,l(n.bG),l(n.bH))))};return u(s,t,u(s,e,f(Xs,o,a,i)))})),Js=function(n){return f(Ys,{cy:n.cy,cW:n.cW,db:n.db},{bf:n.bf,bu:n.bu,bG:n.bG,bH:n.bH},{bf:n.bf,bu:n.bu,bG:n.bG,bH:n.bH})},Zs=function(n){return d(Is,$([Js(n),s(_s,!1,!1,!1,!1)]),qs,Ws,Gs,{})},Ks=Zs({bf:Hs,cy:0,cW:8,bu:Bs,db:15,bG:Hs,bH:Hs}),Qs=7680,nd=function(n){return Zs({bf:Qs,cy:15,cW:8,bu:516,db:(e=n,u(zi,2,e+4)),bG:5386,bH:5386});var e},ed=t((function(n,e,r){return vs($([f(Ts,n,r,ks),$([nd(e),Ks])]))})),rd=r((function(n,e){return vs(u(Yr,ed(n),e))})),td=s(As,513,!0,0,1),od=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),ad=r((function(n,e){return f(od,32774,n,e)})),id=function(n){var e=n.b3,t=n.bR,o=n.bK,a=n.bI,i=n.bN,c=n.aP;return u(r((function(n,r){var i=n.b,c=n.c,l=r.a,u=r.b,f=r.c;return function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return{$:0,a:n,b:e,c:r,d:t,e:o,f:a,g:i,h:c,i:l,j:u}}}}}}}}}}}(n.a)(i)(c)(l)(u)(f)(e)(t)(o)(a)})),i,c)}({bI:0,aP:u(ad,1,771),bK:0,bN:u(ad,770,771),bR:0,b3:0}),cd=$([td,id]),ld=function(n){return n.d$},ud=function(n){return n.d2},fd=function(n){return D(u(lf,function(n){return n.d0}(n),function(n){return n.dZ}(n)),u(lf,function(n){return n.d1}(n),function(n){return n.d_}(n)),u(lf,ud(n),ld(n)))},sd=function(n){return{cH:{bD:n.H,bE:n.I,bF:n.J},dc:{bD:n.q,bE:n.r,bF:n.s},dd:{bD:n.t,bE:n.u,bF:n.v},de:{bD:n.w,bE:n.x,bF:n.y}}},dd=r((function(n,e){var r=n.de,t=n.dd,o=n.dc;return{bD:e.bD*o.bD+e.bE*o.bE+e.bF*o.bF,bE:e.bD*t.bD+e.bE*t.bE+e.bF*t.bF,bF:e.bD*r.bD+e.bE*r.bE+e.bF*r.bF}})),bd=r((function(n,e){var r=n.cH,t=e.bD-r.bD,o=e.bE-r.bE,a=e.bF-r.bF,i=n.de,c=n.dd,l=n.dc;return{bD:t*l.bD+o*l.bE+a*l.bF,bE:t*c.bD+o*c.bE+a*c.bF,bF:t*i.bD+o*i.bE+a*i.bF}})),vd=r((function(n,e){return{cH:u(bd,n,Cu(e)),dc:u(dd,n,Lf(e)),dd:u(dd,n,Df(e)),de:u(dd,n,Su(e))}})),md=r((function(n,e){return u(st,n,e)})),pd=r((function(n,e){return 0>y(n,e)?n:e})),gd=r((function(n,e){return u(pd,n,e)})),hd=r((function(n,e){var r=e,t=n;return{dZ:u(md,t.dZ,r.dZ),d_:u(md,t.d_,r.d_),d$:u(md,t.d$,r.d$),d0:u(gd,t.d0,r.d0),d1:u(gd,t.d1,r.d1),d2:u(gd,t.d2,r.d2)}})),xd=r((function(n,e){return e+n})),Cd=r((function(n,e){var r=n.a,t=n.c,o=eu(nu(n.b)),a=eu(nu(r)),i=eu(nu(t)),c=function(n){return D(n.bD,n.bE,n.bF)}(e),l=c.a,f=c.b,s=c.c;return{dZ:u(xd,a,l),d_:u(xd,o,f),d$:u(xd,i,s),d0:u(lf,a,l),d1:u(lf,o,f),d2:u(lf,i,s)}})),Md=o((function(n,e,r,t){var o=r.eH,a=2*r.eZ*e,i=2*r.eY*e,c=2*r.eX*e,l=o.bF*e,s=o.bE*e,d=o.bD*e,b=Su(n),v=lc(c*b.bD)+lc(i*b.bE)+lc(a*b.bF),m=Df(n),p=lc(c*m.bD)+lc(i*m.bE)+lc(a*m.bF),g=Lf(n),h=lc(c*g.bD)+lc(i*g.bE)+lc(a*g.bF),x=u(Cd,D(h,p,v),u(bd,n,f(mf,d,s,l)));return kr(t.$?x:u(hd,t.a,x))})),Pd=o((function(n,e,r,t){n:for(;;){if(!t.b)return r;var o=t.a,a=t.b;switch(o.$){case 0:n=c=n,e=l=e,r=f=r,t=a;continue n;case 1:var i=s(Md,n,e,o.a,r);n=c=n,e=l=e,r=f=i,t=a;continue n;case 2:n=c=n,e=l=e,r=f=r,t=a;continue n;case 3:i=s(Md,n,e,o.a,r),n=c=n,e=l=e,r=f=i,t=a;continue n;case 4:var c=n,l=e,f=s(Pd,n,e,r,o.a);n=c,e=l,r=f,t=a;continue n;default:var d=o.a,b=o.b,v=u(vd,sd(d),n),m=e*d.b5;n=c=n,e=l=e,r=f=s(Pd,v,m,r,$([b])),t=a;continue n}}})),yd=function(n){return n[0]},Td=function(n){return n[1]},Ld=function(n){return n[2]},Dd=function(n){return{$:4,a:n}},wd=r((function(n,e){for(;;){if(!n.b)return e;var r=n.a;n=n.b,e=u(Tr,r,e)}})),Sd=function(n){return Dd(u(wd,n,E))},Ed={dA:!0,q:1,r:0,s:0,t:0,u:1,v:0,w:0,x:0,y:1,H:0,I:0,J:0,b5:1},Fd=Zs({bf:Hs,cy:0,cW:8,bu:Bs,db:255,bG:Hs,bH:Hs}),Nd={bK:0,eG:!1,bR:0,cS:0,b3:0,c5:0,bD:0,bE:0,bF:0},$d=r((function(n,e){return Fs({dI:n.bD,dJ:n.b3,dK:e.bD,dL:e.b3,dM:n.bE,dN:n.bR,dO:e.bE,dP:e.bR,dQ:n.bF,dR:n.bK,dS:e.bF,dT:e.bK,dU:n.c5,dV:n.cS,dW:e.c5,dX:e.cS})})),zd=L({bm:u($d,Nd,Nd),bV:u($d,Nd,Nd),bW:u($d,Nd,Nd),bX:u($d,Nd,Nd)},s(Ps,0,0,0,0)),_d=function(n){return s(As,515,n.ac,n.Y,n.X)},Ad=$([_d({X:1,Y:0,ac:!0}),Js({bf:Qs,cy:240,cW:0,bu:514,db:0,bG:Qs,bH:Qs}),id]),Rd=r((function(n,e){var r=n,t=e.eU,o=e.ez,a=nu(e.fd),i=nu(t),c=r.cU;if(c.$){var l=c.a;return gc(i)?Fs({dI:2/(o*l),dJ:0,dK:0,dL:0,dM:0,dN:2/l,dO:0,dP:0,dQ:0,dR:0,dS:0,dT:-1,dU:0,dV:0,dW:0,dX:1}):Fs({dI:2/(o*l),dJ:0,dK:0,dL:0,dM:0,dN:2/l,dO:0,dP:0,dQ:0,dR:0,dS:-2/(i-a),dT:-(i+a)/(i-a),dU:0,dV:0,dW:0,dX:1})}var u=c.a;return gc(i)?Fs({dI:1/(o*u),dJ:0,dK:0,dL:0,dM:0,dN:1/u,dO:0,dP:0,dQ:0,dR:0,dS:-1,dT:-2*a,dU:0,dV:0,dW:-1,dX:0}):Fs({dI:1/(o*u),dJ:0,dK:0,dL:0,dM:0,dN:1/u,dO:0,dP:0,dQ:0,dR:0,dS:-(i+a)/(i-a),dT:-2*i*a/(i-a),dU:0,dV:0,dW:-1,dX:0})})),Vd=r((function(n,e){return 1==(1&n>>e)?0:1})),kd=t((function(n,e,r){return vs(u(jt,(function(r){var t=r<<4;return f(Ts,n,L(e,s(Ps,u(Vd,r,0),u(Vd,r,1),u(Vd,r,2),u(Vd,r,3))),function(n){return $([_d({X:1,Y:0,ac:!0}),Js({bf:Qs,cy:240,cW:n,bu:514,db:0,bG:Qs,bH:Qs}),id])}(t))}),u(Xr,1,u(zi,2,r)-1)))})),Bd={cH:Ql,dc:Qf,dd:rs,de:Ju},Hd=r((function(n,e){var r,t,o,a,i;return t=Cu(r=u(vd,e,n)),o=Su(r),a=Df(r),i=Lf(r),Fs({dI:i.bD,dJ:a.bD,dK:o.bD,dL:t.bD,dM:i.bE,dN:a.bE,dO:o.bE,dP:t.bE,dQ:i.bF,dR:a.bF,dS:o.bF,dT:t.bF,dU:0,dV:0,dW:0,dX:1})})),Wd=function(n){return Lf(n)},Id=function(n){return Df(n)},jd=r((function(n,e){var r,t=$([(1,{$:1,a:1}),hs(0),us(!0),s(ds,0,0,0,0)]),o=function(){var e=n.ex;switch(e.$){case 0:return D(t,"0",1);case 1:return D(u(Tr,fs,t),"1",1);default:return D(t,"0",e.a)}}(),a=o.a,i=o.b,c=o.c,l=n.$7,d=l.a,v=l.b,m=u(Kc,"height",Wr(v)+"px"),p=d,g=p/v,h=u(ms,(function(e){return function(n){var e=function(n){return n.c8}(n.eE),r={cH:Mu(e),dc:Wd(e),dd:Id(e),de:wu(Eu(e))},t=Sd(n.dt),o=s(Pd,r,1,Br,$([t]));if(1===o.$)return E;var a=o.a,i=u(Hd,Bd,e),c=u(su,.99,u(md,nu(n.eJ),Pu(ld(a)))),l=fd(a),d=function(n){var e=n,r=u(st,lc(e.bD),u(st,lc(e.bE),lc(e.bF)));if(r){var t=e.bF/r,o=e.bE/r,a=e.bD/r;return kl(a*a+o*o+t*t)*r}return 0}(f(Nu,l.a,l.b,l.c)),v=u(su,1.01,u(xd,d,Pu(ud(a)))),m=u(Rd,n.eE,{ez:n.ez,eU:v,fd:c}),p=function(n){return{dI:n[0],dM:n[1],dQ:n[2],dU:n[3],dJ:n[4],dN:n[5],dR:n[6],dV:n[7],dK:n[8],dO:n[9],dS:n[10],dW:n[11],dL:n[12],dP:n[13],dT:n[14],dX:n[15]}}(m).dX,g=p?wu(Eu(e)):Mu(e),h=function(){var e=n.fy;switch(e.$){case 0:return L(0,0);case 1:return L(1,0);case 2:return L(2,0);case 3:return L(3,e.a);case 4:return L(4,e.a);default:return L(5,0)}}(),x=h.a,C=h.b,M=u(Ss,n.eR,n.fE),P=Fs({dI:0,dJ:g.bD,dK:yd(M),dL:n.eo,dM:0,dN:g.bE,dO:Td(M),dP:d,dQ:0,dR:g.bF,dS:Ld(M),dT:x,dU:0,dV:p,dW:0,dX:C}),y=b($s,P,i,m,Ed,t,{N:E,W:E,fo:E}),T=n.e8;switch(T.$){case 0:return vs($([f(Ts,y.N,L(D=T.a,ys),cd),f(Ts,y.W,zd,cd)]));case 1:var D=T.a;return vs($([f(Ts,y.N,zd,cd),$([Fd]),f(Ts,y.fo,D.bm,ks),$([nd(0)]),f(Ts,y.N,L(D,ys),Ad),f(Ts,y.W,zd,cd)]));default:var w=T.a,S=T.b;return vs($([f(Ts,y.N,L(S,ys),cd),$([Fd]),u(rd,y.fo,w),f(kd,y.N,S,Or(w)),f(Ts,y.W,zd,cd)]))}}({ez:g,eE:n.eE,eJ:n.eJ,dt:e.dt,eR:e.eR,e8:e.e8,eo:c,fy:e.fy,fE:e.fE})}),e),x=u(Kc,"width",Wr(p)+"px"),C=function(n){var e,r,t=n.b,o=n.c,a=n.d,i=function(n){return _i(1e4*n)/100};return e=$(["rgba(",mc(i(n.a)),"%,",mc(i(t)),"%,",mc(i(o)),"%,",mc((r=a,_i(1e3*r)/1e3)),")"]),u(Ir,"",e)}(n.di);return f(gs,"div",$([u(Kc,"padding","0px"),x,m]),$([L(i,f(Ms,a,$([(r=_i(p*c),u(le,"width",Wr(r))),ps(_i(v*c)),x,m,u(Kc,"display","block"),u(Kc,"background-color",C)]),h))]))})),Ud=o((function(n,e,r,t){return{$:2,a:n,b:e,c:r,d:t}})),Od=o((function(n,e,r,t){return{$:3,a:n,b:e,c:r,d:t}})),Gd=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),qd=o((function(n,e,r,t){return{$:6,a:n,b:e,c:r,d:t}})),Xd=o((function(n,e,r,t){return{$:7,a:n,b:e,c:r,d:t}})),Yd=o((function(n,e,r,t){return{$:5,a:n,b:e,c:r,d:t}})),Jd=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),Zd=function(n){switch(n.$){case 0:return n;case 1:return s(Jd,n.a,n.b,n.c,1);case 2:return s(Ud,n.a,n.b,n.c,1);case 3:return s(Od,n.a,n.b,n.c,1);case 4:return s(Gd,n.a,n.b,n.c,1);case 5:return s(Yd,n.a,n.b,n.c,1);case 6:return s(qd,n.a,n.b,n.c,1);case 7:return s(Xd,n.a,n.b,n.c,1);case 8:case 9:default:return n}},Kd={$:0},Qd=l((function(n,e,r,t,o,a,i,c){for(;;){if(!c.b)return{dZ:e,d_:t,d$:a,d0:n,d1:r,d2:o};var l=c.b,f=i(c.a);n=u(gd,f.d0,n),e=u(md,f.dZ,e),r=u(gd,f.d1,r),t=u(md,f.d_,t),o=u(gd,f.d2,o),a=u(md,f.d$,a),i=i,c=l}})),nb=t((function(n,e,r){var t=n(e);return m(Qd,t.d0,t.dZ,t.d1,t.d_,t.d2,t.d$,n,r)})),eb=r((function(n,e){return 1>y(e,n)})),rb=function(n){return u(eb,n.dZ,n.d0)&&u(eb,n.d_,n.d1)&&u(eb,n.d$,n.d2)?n:{dZ:u(md,n.d0,n.dZ),d_:u(md,n.d1,n.d_),d$:u(md,n.d2,n.d$),d0:u(gd,n.d0,n.dZ),d1:u(gd,n.d1,n.d_),d2:u(gd,n.d2,n.d$)}},tb=function(n){return n},ob=function(n){var e=n.a,r=n.b,t=n.c,o=Hu(e),a=Iu(e),i=ju(e),c=Hu(r),l=Iu(r),f=ju(r),s=Hu(t),d=Iu(t),b=ju(t);return rb({dZ:u(md,o,u(md,c,s)),d_:u(md,a,u(md,l,d)),d$:u(md,i,u(md,f,b)),d0:u(gd,o,u(gd,c,s)),d1:u(gd,a,u(gd,l,d)),d2:u(gd,i,u(gd,f,b))})},ab=function(n){return new Float64Array([n.bD,n.bE,n.bF])},ib=function(n){return ab(n)},cb=function(n){return ab(n)},lb=r((function(n,e){var r=n,t=e,o=u(st,lc(t.bD),u(st,lc(t.bE),lc(t.bF)));if(o){var a=t.bF/o,i=t.bE/o,c=t.bD/o,l=kl(c*c+i*i+a*a);return{bD:r*c/l,bE:r*i/l,bF:r*a/l}}return Xl}))(1),ub=t((function(n,e,r){return lb(u(Hl,u(Il,e,r),u(Il,n,e)))})),fb=function(n){var e=n.a,r=n.b,t=n.c,o=cb(f(ub,e,r,t));return D({o:o,ec:ib(e)},{o:o,ec:ib(r)},{o:o,ec:ib(t)})},sb=r((function(n,e){return{$:2,a:n,b:e}}))({dp:3,dz:0,d4:4}),db=t((function(n,e,r){return D(n,e,r)})),bb=(Io=u(su,-.5,1),jo=u(su,-.5,1),Oo=f(df,Uo=u(su,-.5,1),jo,Io),qo=f(df,Uo,jo,Go=u(su,.5,1)),Yo=f(df,Uo,Xo=u(su,.5,1),Io),Jo=f(df,Uo,Xo,Go),Ko=f(df,Zo=u(su,.5,1),jo,Io),Qo=f(df,Zo,Xo,Io),na=f(df,Zo,jo,Go),ea=f(df,Zo,Xo,Go),Zd(function(n){if(n.b){var e=n.a,r=n.b,t=sb(u(jt,fb,n));return s(Ud,f(nb,ob,e,r),n,t,0)}return Kd}($([f(db,Oo,Qo,Ko),f(db,Oo,Yo,Qo),f(db,qo,na,ea),f(db,qo,ea,Jo),f(db,Ko,Qo,ea),f(db,Ko,ea,na),f(db,Oo,Jo,Yo),f(db,Oo,qo,Jo),f(db,Oo,Ko,na),f(db,Oo,na,qo),f(db,Yo,ea,Qo),f(db,Yo,Jo,ea)])))),vb={$:0},mb=t((function(n,e,r){return{$:1,a:n,b:e,c:r}})),pb=t((function(n,e,r){var t=e.a,o=e.b,a=n(e.c),i=n(o),c=n(t),l=cb(f(ub,c,i,a)),s={o:l,ec:ib(c)},d={o:l,ec:ib(i)},b={o:l,ec:ib(a)};return u(Tr,s,u(Tr,d,u(Tr,b,r)))})),gb=function(n){return n.C},hb=o((function(n,e,r,t){return 1===e.$||1===r.$||1===t.$?Br:kr(f(n,e.a,r.a,t.a))})),xb=4294967295>>>32-at,Cb=h,Mb=t((function(n,e,r){for(;;){var t=u(Cb,xb&e>>>n,r);if(t.$)return u(Cb,xb&e,t.a);n-=at,e=e,r=t.a}})),Pb=r((function(n,e){var r=e.a,t=e.b,o=e.c,a=e.d;return 0>n||y(n,r)>-1?Br:y(n,function(n){return n>>>5<<5}(r))>-1?kr(u(Cb,xb&n,a)):kr(f(Mb,t,n,o))})),yb=function(n){return n.an},Tb=r((function(n,e){return u(Pb,n,yb(e))})),Lb=t((function(n,e,r){for(;;){var t=u(bt,Qr,n),o=t.a,a=t.b;if(0>y(ft(o),Qr))return u(pt,!0,{z:e,l:r,p:o});n=a,e=u(Tr,lt(o),e),r+=1}})),Db=function(n){return n.b?f(Lb,n,E,0):it},wb=r((function(n,e){return!u(bc,u(go,dc,n),e)})),Sb=r((function(n,e){return f(It,r((function(e,r){return n(e)?u(Tr,e,r):r})),E,e)})),Eb=r((function(n,e){var r=function(n){return n.a}(n),t=function(n){var e=n.a,t=n.b,o=n.c;return e>=0&&0>y(e,r)&&t>=0&&0>y(t,r)&&o>=0&&0>y(o,r)};return u(wb,t,e)?{C:e,an:n}:{C:u(Sb,t,e),an:n}})),Fb=t((function(n,e,r){return{$:3,a:n,b:e,c:r}}))({dp:1,dz:3,d4:4}),Nb=r((function(n,e){var r=e;return L(D(n.bD,n.bE,n.bF),D(r.bD,r.bE,r.bF))})),$b=r((function(n,e){n:for(;;){if(-2===e.$)return Br;var r=e.c,t=e.d,o=e.e;switch(u(wo,n,e.b)){case 0:n=n,e=t;continue n;case 1:return kr(r);default:n=n,e=o;continue n}}})),zb=f(ws,0,0,0),_b=i((function(n,e,r,t,o,a){var i=a.a,c=a.b,l=a.c,f=u($b,u(Nb,n,e),o);if(f.$){var s={o:zb,ec:ib(e)},d={o:zb,ec:ib(n)},b=l+1;return D(u(Tr,D(r,l,b),u(Tr,D(r,b,t),i)),u(Tr,s,u(Tr,d,c)),l+2)}return D(u(Tr,D(r,f.a,t),i),c,l)})),Ab=a((function(n,e,r,t,o){for(;;){if(!r.b)return L(o.a,Zr(o.b));var a=r.a,i=a.a,c=a.b,l=r.b,u=n(a.c),f=n(c),s=n(i),d=t+2,v=t+1,m=n,p=e,g=l,h=t+3,x=b(_b,u,s,d,t,e,b(_b,f,u,v,d,e,b(_b,s,f,t,v,e,o)));n=m,e=p,r=g,t=h,o=x}})),Rb=a((function(n,e,r,t,o){for(;;){if(!e.b)return D(t,o,r);var a=e.a,i=a.a,c=a.b,l=e.b,s=n(a.c),d=n(c),b=n(i),v=r+2,m=r+1,p=r,g=f(Eo,u(Nb,b,s),v,f(Eo,u(Nb,s,d),m,f(Eo,u(Nb,d,b),p,o)));n=n,e=l,r+=3,t=u(Tr,D(p,m,v),t),o=g}})),Vb=t((function(n,e,r){var o,a=u(ko,(function(n){var e=n.a,r=n.b,a=n.c;return s(hb,t((function(n,e,r){return D(n,e,r)})),u(Tb,e,o),u(Tb,r,o),u(Tb,a,o))}),gb(o=r)),i=f(It,pb(e),E,a),c=d(Rb,e,a,0,E,Po),l=d(Ab,e,c.b,a,0,D(c.a,E,c.c)),b=l.a,v=l.b,m=v.b?S(i,v):i;return f(mb,n,u(Eb,Db(m),b),u(Fb,m,b))})),kb=function(n){return{C:u(jt,(function(n){return D(3*n,3*n+1,3*n+2)}),u(Xr,0,Or(n)-1)),an:Db(vs(u(jt,(function(n){return $([n.a,n.b,n.c])}),n)))}},Bb=function(n){switch(n.$){case 0:return vb;case 1:case 2:return f(Vb,n.a,_t,kb(u(jt,tb,n.b)));case 3:return f(Vb,n.a,_t,n.b);case 4:case 5:case 6:case 7:return f(Vb,n.a,(function(n){return n.ec}),n.b);case 8:case 9:default:return vb}},Hb=Bb(bb),Wb={$:0},Ib=Wb,jb=r((function(n,e){return{$:1,a:n,b:e}})),Ub={src:"\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        void main () {\n            gl_FragColor = texture2D(colorTexture, interpolatedUv);\n        }\n    ",attributes:{},uniforms:{colorTexture:"bO"}},Ob=function(n){return{$:5,a:n}},Gb=Ob(1029),qb=Ob(1028),Xb=t((function(n,e,r){return 1===e?u(Tr,n?Gb:qb,r):r})),Yb={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute mediump vec2 uv;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedUv = uv;\n        }\n    ",attributes:{position:"ec",uv:"L"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Jb=o((function(n,e,r,t){return u(jb,e,l((function(e,o,a,i,c,l,u,s){return d(Is,f(Xb,i,t,s),Yb,Ub,r,{bO:n,b:a,c:o,d:l,e:e,f:c})})))})),Zb={src:"\n        precision lowp float;\n        \n        uniform lowp vec3 constantColor;\n        \n        void main () {\n            gl_FragColor = vec4(constantColor, 1.0);\n        }\n    ",attributes:{},uniforms:{constantColor:"aC"}},Kb={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{position:"ec"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Qb=o((function(n,e,r,t){return u(jb,e,l((function(e,o,a,i,c,l,u,s){return d(Is,f(Xb,i,t,s),Kb,Zb,r,{aC:n,b:a,c:o,d:l,e:e,f:c})})))})),nv=r((function(n,e){return{$:3,a:n,b:e}})),ev={src:"\n        precision lowp float;\n        \n        uniform lowp vec3 constantColor;\n        uniform lowp float pointRadius;\n        uniform highp mat4 sceneProperties;\n        \n        float pointAlpha(float pointRadius, vec2 pointCoord) {\n            float pointSize = 2.0 * pointRadius;\n            float x = (pointSize + 2.0) * (pointCoord.s - 0.5);\n            float y = (pointSize + 2.0) * (pointCoord.t - 0.5);\n            float r = sqrt(x * x + y * y);\n            float innerRadius = pointRadius;\n            float outerRadius = pointRadius + 1.0;\n            if (r > outerRadius) {\n                return 0.0;\n            } else if (r > innerRadius) {\n                return outerRadius - r;\n            } else {\n                return 1.0;\n            }\n        }\n        \n        void main () {\n            float supersampling = sceneProperties[3][0];\n            float alpha = pointAlpha(pointRadius * supersampling, gl_PointCoord);\n            gl_FragColor = vec4(constantColor, alpha);\n        }\n    ",attributes:{},uniforms:{constantColor:"aC",pointRadius:"b1",sceneProperties:"e"}},rv={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform lowp float pointRadius;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            float supersampling = sceneProperties[3][0];\n            gl_PointSize = 2.0 * pointRadius * supersampling + 2.0;\n        }\n    ",attributes:{position:"ec"},uniforms:{modelMatrix:"b",modelScale:"c",pointRadius:"b1",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},tv=o((function(n,e,r,t){return u(nv,r,l((function(r,o,a,i,c,l,u,f){return d(Is,f,rv,ev,t,{aC:n,b:a,c:o,b1:e,d:l,e:r,f:c})})))})),ov={src:"\n        precision mediump float;\n        \n        uniform mediump vec3 emissiveColor;\n        uniform highp mat4 sceneProperties;\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{emissiveColor:"aS",sceneProperties:"e"}},av=Pr,iv=a((function(n,e,r,t,o){return u(jb,r,l((function(r,a,i,c,l,s,b,v){return d(Is,f(Xb,c,o,v),Kb,ov,t,{aS:u(av,e,n),b:i,c:a,d:s,e:r,f:l})})))})),cv={src:"\n        precision mediump float;\n        \n        uniform mediump vec3 emissiveColor;\n        uniform lowp float pointRadius;\n        uniform highp mat4 sceneProperties;\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        float pointAlpha(float pointRadius, vec2 pointCoord) {\n            float pointSize = 2.0 * pointRadius;\n            float x = (pointSize + 2.0) * (pointCoord.s - 0.5);\n            float y = (pointSize + 2.0) * (pointCoord.t - 0.5);\n            float r = sqrt(x * x + y * y);\n            float innerRadius = pointRadius;\n            float outerRadius = pointRadius + 1.0;\n            if (r > outerRadius) {\n                return 0.0;\n            } else if (r > innerRadius) {\n                return outerRadius - r;\n            } else {\n                return 1.0;\n            }\n        }\n        \n        void main () {\n            vec4 color = toSrgb(emissiveColor, sceneProperties);\n            float supersampling = sceneProperties[3][0];\n            float alpha = pointAlpha(pointRadius * supersampling, gl_PointCoord);\n            gl_FragColor = vec4(color.rgb, alpha);\n        }\n    ",attributes:{},uniforms:{emissiveColor:"aS",pointRadius:"b1",sceneProperties:"e"}},lv=a((function(n,e,r,t,o){return u(nv,t,l((function(t,a,i,c,l,f,s,b){return d(Is,b,rv,cv,o,{aS:u(av,e,n),b:i,c:a,b1:r,d:f,e:t,f:l})})))})),uv={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 materialColor;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{enabledLights:"R",lights12:"bm",lights34:"bV",lights56:"bW",lights78:"bX",materialColor:"cz",sceneProperties:"e",viewMatrix:"f"}},fv={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n        }\n    ",attributes:{normal:"o",position:"ec"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},sv=o((function(n,e,r,t){return u(jb,e,l((function(e,o,a,i,c,l,u,s){var b=u.a,v=u.b;return d(Is,f(Xb,i,t,s),fv,uv,r,{R:v,bm:b.bm,bV:b.bV,bW:b.bW,bX:b.bX,cz:n,b:a,c:o,d:l,e:e,f:c})})))})),dv={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D materialColorTexture;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n            vec3 materialColor = fromSrgb(texture2D(materialColorTexture, interpolatedUv).rgb);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{enabledLights:"R",lights12:"bm",lights34:"bV",lights56:"bW",lights78:"bX",materialColorTexture:"cA",normalMapTexture:"aZ",sceneProperties:"e",useNormalMap:"a4",viewMatrix:"f"}},bv={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        attribute mediump vec2 uv;\n        attribute highp vec3 tangent;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getWorldTangent(vec3 modelTangent, vec4 modelScale, mat4 modelMatrix) {\n            return (modelMatrix * vec4(safeNormalize(modelScale.xyz * modelTangent), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = uv;\n            interpolatedTangent = getWorldTangent(tangent, modelScale, modelMatrix);\n        }\n    ",attributes:{normal:"o",position:"ec",tangent:"eq",uv:"L"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},vv=i((function(n,e,r,t,o,a){return u(jb,t,l((function(t,i,c,l,u,s,b,v){var m=b.a,p=b.b;return d(Is,f(Xb,l,a,v),bv,dv,o,{R:p,bm:m.bm,bV:m.bV,bW:m.bW,bX:m.bX,cA:n,b:c,c:i,aZ:e,d:s,e:t,a4:r,f:u})})))})),mv={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D baseColorTexture;\n        uniform lowp vec4 constantBaseColor;\n        uniform mediump sampler2D roughnessTexture;\n        uniform lowp vec2 constantRoughness;\n        uniform mediump sampler2D metallicTexture;\n        uniform lowp vec2 constantMetallic;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getFloatValue(sampler2D texture, vec2 uv, vec2 constantValue) {\n            if (constantValue.y == 1.0) {\n                return constantValue.x;\n            } else {\n                vec4 textureColor = texture2D(texture, uv);\n                return dot(textureColor, vec4(0.2126, 0.7152, 0.0722, 0.0));\n            }\n        }\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 baseColor = fromSrgb(texture2D(baseColorTexture, interpolatedUv).rgb) * (1.0 - constantBaseColor.w) + constantBaseColor.rgb * constantBaseColor.w;\n            float roughness = getFloatValue(roughnessTexture, interpolatedUv, constantRoughness);\n            float metallic = getFloatValue(metallicTexture, interpolatedUv, constantMetallic);\n        \n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{baseColorTexture:"cd",constantBaseColor:"cg",constantMetallic:"ch",constantRoughness:"ci",enabledLights:"R",lights12:"bm",lights34:"bV",lights56:"bW",lights78:"bX",metallicTexture:"cD",normalMapTexture:"aZ",roughnessTexture:"c_",sceneProperties:"e",useNormalMap:"a4",viewMatrix:"f"}},pv={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 baseColor;\n        uniform lowp float roughness;\n        uniform lowp float metallic;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{baseColor:"cc",enabledLights:"R",lights12:"bm",lights34:"bV",lights56:"bW",lights78:"bX",metallic:"cC",roughness:"cZ",sceneProperties:"e",viewMatrix:"f"}},gv=i((function(n,e,r,t,o,a){return u(jb,t,l((function(t,i,c,l,u,s,b,v){var m=b.a,p=b.b;return d(Is,f(Xb,l,a,v),fv,pv,o,{cc:n,R:p,bm:m.bm,bV:m.bV,bW:m.bW,bX:m.bX,cC:r,b:c,c:i,d:s,cZ:e,e:t,f:u})})))})),hv=r((function(n,e){return{$:1,a:n,b:e}})),xv=r((function(n,e){return e.$?L(e.a.B,1):L(n,0)})),Cv=s(Ps,0,0,0,0),Mv=r((function(n,e){var r;return e.$?L(e.a.B,Cv):L(n,s(Ps,yd(r=e.a),Td(r),Ld(r),1))})),Pv=r((function(n,e){var r,t=L(n,e);return t.a.$?u(hv,L(r=t.a.a.B,Cv),u(xv,r,e)):t.b.$?u(hv,u(Mv,r=t.b.a.B,n),u(xv,r,e)):{$:0,a:t.a.a}})),yv=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),Tv=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),Lv=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),Dv=u(Os,0,0),wv=r((function(n,e){return e.$?L(e.a.B,Dv):L(n,u(Os,e.a,1))})),Sv=o((function(n,e,r,t){var o,a=s(Lv,n,e,r,t);return a.a.$?s(Tv,L(o=a.a.a.B,Cv),u(wv,o,e),u(wv,o,r),u(xv,o,t)):a.b.$?s(Tv,u(Mv,o=a.b.a.B,n),L(o,Dv),u(wv,o,r),u(xv,o,t)):a.c.$?s(Tv,u(Mv,o=a.c.a.B,n),u(wv,o,e),L(o,Dv),u(xv,o,t)):a.d.$?s(Tv,u(Mv,o=a.d.a.B,n),u(wv,o,e),u(wv,o,r),L(o,1)):f(yv,a.a.a,a.b.a,a.c.a)})),Ev={src:"\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        uniform mediump float backlight;\n        uniform highp mat4 sceneProperties;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            vec3 emissiveColor = fromSrgb(texture2D(colorTexture, interpolatedUv).rgb) * backlight;\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{backlight:"b9",colorTexture:"bO",sceneProperties:"e"}},Fv=a((function(n,e,r,t,o){return u(jb,r,l((function(r,a,i,c,l,u,s,b){return d(Is,f(Xb,c,o,b),Yb,Ev,t,{b9:e,bO:n,b:i,c:a,d:u,e:r,f:l})})))})),Nv={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        attribute mediump vec2 uv;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = uv;\n            interpolatedTangent = vec3(0.0, 0.0, 0.0);\n        }\n    ",attributes:{normal:"o",position:"ec",uv:"L"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},$v=o((function(n,e,r,t){return u(jb,e,l((function(e,o,a,i,c,l,u,s){var b=u.a,v=u.b;return d(Is,f(Xb,i,t,s),Nv,dv,r,{R:v,bm:b.bm,bV:b.bV,bW:b.bW,bX:b.bX,cA:n,b:a,c:o,aZ:n,d:l,e:e,a4:0,f:c})})))})),zv=function(n){return e(9,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return n(e,r,t,o,a,i,c,l,u)}}}}}}}}}))}((function(n,e,r,t,o,a,i,c,s){return u(jb,i,l((function(i,l,u,b,v,m,p,g){var h=p.a,x=p.b;return d(Is,f(Xb,b,s,g),Nv,mv,c,{cd:n,cg:e,ch:a,ci:t,R:x,bm:h.bm,bV:h.bV,bW:h.bW,bX:h.bX,cD:o,b:u,c:l,aZ:n,d:m,c_:r,e:i,a4:0,f:v})})))})),_v=t((function(n,e,r){return r>.5?e+(1-r)*(n-e):n+r*(e-n)})),Av=function(n){return f(df,function(n){return f(_v,n.d0,n.dZ,.5)}(n),function(n){return f(_v,n.d1,n.d_,.5)}(n),function(n){return f(_v,n.d2,n.d$,.5)}(n))},Rv=function(n){var e=fd(n),r=e.a,t=e.b,o=e.c;return{eH:Av(n),eX:r/2,eY:t/2,eZ:o/2}},Vv=r((function(n,e){switch(n.$){case 0:if(n.b.$){var r=n.b.a.B;switch(e.$){case 0:case 1:case 2:case 3:case 4:return Ib;case 5:case 6:case 7:return o=e.c,a=e.d,s(Jb,r,Rv(A=e.a),o,a);case 8:case 9:default:return Ib}}else{var t=n.b.a;switch(e.$){case 0:return Ib;case 1:var o=e.c,a=e.d;return s(Qb,t,Rv(A=e.a),o,a);case 2:case 3:case 4:return o=e.c,a=e.d,s(Qb,t,Rv(A=e.a),o,a);case 5:case 6:case 7:return o=e.c,a=e.d,s(Qb,t,Rv(A=e.a),o,a);case 8:case 9:return o=e.c,s(Qb,t,Rv(A=e.a),o,0);default:return o=e.d,s(tv,t,e.b,Rv(A=e.a),o)}}case 1:if(n.b.$)switch(r=n.b.a.B,c=n.c,e.$){case 0:case 1:case 2:case 3:case 4:return Ib;case 5:case 6:case 7:return o=e.c,a=e.d,d(Fv,r,c,Rv(A=e.a),o,a);case 8:case 9:default:return Ib}else{var i=n.b.a,c=n.c;switch(e.$){case 0:return Ib;case 1:case 2:case 3:case 4:case 5:case 6:case 7:return o=e.c,a=e.d,d(iv,i,c,Rv(A=e.a),o,a);case 8:case 9:return o=e.c,d(iv,i,c,Rv(A=e.a),o,0);default:return o=e.d,d(lv,i,c,e.b,Rv(A=e.a),o)}}case 2:var v=u(Pv,n.b,n.c);if(v.$){var m=v.a.a,p=v.b,g=p.a,h=p.b;switch(e.$){case 0:case 1:case 2:case 3:case 4:case 5:return Ib;case 6:return o=e.c,C=e.d,s($v,m,Rv(A=e.a),o,C);case 7:return o=e.c,C=e.d,b(vv,m,g,h,Rv(A=e.a),o,C);case 8:case 9:default:return Ib}}else{var x=v.a;switch(e.$){case 0:case 1:return Ib;case 2:o=e.c;var C=e.d;return s(sv,x,Rv(A=e.a),o,C);case 3:return Ib;case 4:return o=e.c,C=e.d,s(sv,x,Rv(A=e.a),o,C);case 5:return Ib;case 6:case 7:return o=e.c,C=e.d,s(sv,x,Rv(A=e.a),o,C);case 8:case 9:default:return Ib}}default:var M=s(Sv,n.b,n.c,n.d,n.e);if(M.$){var P=M.a,y=P.a,T=P.b,L=M.b,D=L.a,w=L.b,S=M.c,E=S.a,F=S.b,N=M.d;switch(g=N.a,h=N.b,e.$){case 0:case 1:case 2:case 3:case 4:case 5:return Ib;case 6:return o=e.c,a=e.d,function(n,e,r,t,o,a,i,c,l,u){return 9===n.a?n.f(e,r,t,o,a,i,c,l,u):n(e)(r)(t)(o)(a)(i)(c)(l)(u)}(zv,y,T,D,w,E,F,Rv(A=e.a),o,a);case 7:return A=e.a,o=e.c,a=e.d,function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(s){return function(b){return function(v){return u(jb,s,l((function(l,u,s,m,p,g,h,x){var C=h.a,M=h.b;return d(Is,f(Xb,m,v,x),bv,mv,b,{cd:n,cg:e,ch:a,ci:t,R:M,bm:C.bm,bV:C.bV,bW:C.bW,bX:C.bX,cD:o,b:s,c:u,aZ:i,d:g,c_:r,e:l,a4:c,f:p})})))}}}}}}}}}}}(y)(T)(D)(w)(E)(F)(g)(h)(Rv(A))(o)(a);case 8:case 9:default:return Ib}}else{var $=M.a,z=M.b,_=M.c;switch(e.$){case 0:case 1:return Ib;case 2:return o=e.c,a=e.d,b(gv,$,z,_,Rv(A=e.a),o,a);case 3:return Ib;case 4:return o=e.c,a=e.d,b(gv,$,z,_,Rv(A=e.a),o,a);case 5:return Ib;case 6:return o=e.c,a=e.d,b(gv,$,z,_,Rv(A=e.a),o,a);case 7:var A;return o=e.c,a=e.d,b(gv,$,z,_,Rv(A=e.a),o,a);case 8:case 9:default:return Ib}}}})),kv=function(n){return n.bD},Bv=function(n){return n.bE},Hv=function(n){return n.bF},Wv=function(n){var e=n,r=Hv(e.de),t=Bv(e.de),o=kv(e.de),a=Hv(e.dd),i=Bv(e.dd),c=kv(e.dd),l=Hv(e.dc),u=Bv(e.dc),f=kv(e.dc);return f*i*r+u*a*o+l*c*t-l*i*o-u*c*r-f*a*t>0},Iv=r((function(n,e){return{$:5,a:n,b:e}})),jv=r((function(n,e){var r=e;switch(r.$){case 0:return Ib;case 5:var t=r.b;return u(Iv,u(Es,r.a,n),t);case 1:case 3:case 2:default:return u(Iv,n,r)}})),Uv=r((function(n,e){return u(jv,function(n){var e=Cu(n),r=Su(n),t=Df(n),o=Lf(n);return{dA:Wv(n),q:o.bD,r:o.bE,s:o.bF,t:t.bD,u:t.bE,v:t.bF,w:r.bD,x:r.bE,y:r.bF,H:e.bD,I:e.bE,J:e.bF,b5:1}}(n),e)})),Ov=function(n){return{$:2,a:n}},Gv=r((function(n,e){var r=n.a,t=n.b,o=n.c,a=e.eH;return{eH:{bD:r*a.bD,bE:t*a.bE,bF:o*a.bF},eX:r*e.eX,eY:t*e.eY,eZ:o*e.eZ}})),qv=function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){var f,s,d={bD:(s=t)[0],bE:s[1],bF:s[2],ev:s[3]},b=(f={ev:d.ev,bD:d.bD*n.a,bE:d.bE*n.b,bF:d.bF*n.c},new Float64Array([f.bD,f.bE,f.bF,f.ev]));return m(e,r,b,o,a,i,c,l,u)}}}}}}}}}},Xv=r((function(n,e){switch(e.$){case 0:return Wb;case 5:return u(Iv,e.a,u(Xv,n,e.b));case 1:var r=e.b;return u(jb,u(Gv,n,e.a),u(qv,n,r));case 3:return e;case 2:return Ov(u(qv,n,r=e.a));default:var t=e.a;return Dd(u(jt,Xv(n),t))}})),Yv=r((function(n,e){return u(Xv,n,e)})),Jv={src:"\n        precision lowp float;\n        \n        void main () {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        }\n    ",attributes:{},uniforms:{}},Zv=f(Ys,{cy:0,cW:0,db:15},{bf:Qs,bu:Bs,bG:Qs,bH:7683},{bf:Qs,bu:Bs,bG:Qs,bH:7682}),Kv=f(Ys,{cy:0,cW:0,db:15},{bf:Qs,bu:Bs,bG:Qs,bH:7682},{bf:Qs,bu:Bs,bG:Qs,bH:7683}),Qv=r((function(n,e){return u(Tr,n?Kv:Zv,e)})),nm={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 shadowVertexPosition(vec3 position, vec3 normal, mat4 shadowLight, vec4 modelScale, mat4 modelMatrix, mat4 viewMatrix, mat4 projectionMatrix, mat4 sceneProperties) {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            vec3 worldNormal = getWorldNormal(normal, vec4(modelScale.xyz, 1.0), modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 directionToLight = getDirectionToLight(worldPosition.xyz, xyz_type, rgb_parameter);\n            vec3 offset = vec3(0.0, 0.0, 0.0);\n            float sceneDiameter = sceneProperties[3][1];\n            if (dot(directionToLight, worldNormal) <= 0.0) {\n                offset = -sceneDiameter * directionToLight;\n            } else {\n                offset = -0.001 * sceneDiameter * directionToLight;\n            }\n            vec4 offsetPosition = worldPosition + vec4(offset, 0.0);\n            return projectionMatrix * (viewMatrix * offsetPosition);\n        }\n        \n        void main () {\n            gl_Position = shadowVertexPosition(\n                position,\n                normal,\n                shadowLight,\n                modelScale,\n                modelMatrix,\n                viewMatrix,\n                projectionMatrix,\n                sceneProperties\n            );\n        }\n    ",attributes:{normal:"o",position:"ec"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"b6",viewMatrix:"f"}},em=function(n){var e=function(n){if(n.$){var e=n.c;return kr(l((function(n,r,t,o,a,i,c,l){return d(Is,u(Qv,o,l),nm,Jv,e,{b:t,c:r,d:i,e:n,b6:c,f:a})})))}return Br}(n);return e.$?Ib:Ov(e.a)},rm=o((function(n,e,r,t){var o,a=u(Vv,r,bb),i=(o=L(n,e)).a?o.b?Sd($([a,em(Hb)])):a:o.b?em(Hb):Ib,c=Tf(t),l=c.a,f=c.b,s=c.c;return u(Uv,yf(t),u(Yv,D(l,f,s),i))})),tm=r((function(n,e){return s(rm,!0,!0,n,e)})),om=function(n){return{$:0,a:n}},am=r((function(n,e){return{$:0,a:n,b:e}})),im=function(n){return ou(n)},cm=r((function(n,e){var r=n.ec;return u(Tr,{o:cb(n.o),ec:ib(r)},e)})),lm=c((function(n,e,r,t,o,a,i){for(;;){if(!i.b)return rb({dZ:e,d_:t,d$:a,d0:n,d1:r,d2:o});var c=i.a,l=i.b,f=Ld(c.ec),s=Td(c.ec),d=yd(c.ec);n=u(pd,n,d),e=u(st,e,d),r=u(pd,r,s),t=u(st,t,s),o=u(pd,o,f),a=u(st,a,f),i=l}})),um=r((function(n,e){var r=Ld(n.ec),t=Td(n.ec),o=yd(n.ec);return v(lm,o,o,t,t,r,r,e)})),fm=r((function(n,e){var r=n.dd,t=n.dc;return{bD:e.bD*t.bD+e.bE*r.bD,bE:e.bD*t.bE+e.bE*r.bE,bF:e.bD*t.bF+e.bE*r.bF}})),sm=function(n){return Au(n)},dm=function(n){return 6.283185307179586*n},bm={cH:Ql,dc:Qf,dd:rs},vm=(ra=u(xu,72,dm(1)),ta=Yu,oa=yu,ia=f(df,0,0,aa=u(su,.5,1)),la=f(df,0,0,ca=u(su,-.5,1)),Zd(function(n){var e=f(Dr,cm,E,yb(n));if(e.b){var r=e.a,t=e.b,o=u(Fb,e,gb(n));return s(Gd,u(um,r,t),n,o,0)}return Kd}(kb(vs(u(jt,(function(n){var e=u(su,n,ra),r=u(fm,bm,Ru(e)),t=u(su,im(e),1),o=u(su,sm(e),1),a=f(df,t,o,aa),i=f(df,t,o,ca),c=u(su,u(rc,72,n+1),ra),l=u(fm,bm,Ru(c)),s=u(su,im(c),1),d=u(su,sm(c),1),b=f(df,s,d,ca),v=f(df,s,d,aa);return $([D({o:oa,ec:la},{o:oa,ec:b},{o:oa,ec:i}),D({o:r,ec:i},{o:l,ec:b},{o:l,ec:v}),D({o:r,ec:i},{o:l,ec:v},{o:r,ec:a}),D({o:ta,ec:ia},{o:ta,ec:a},{o:ta,ec:v})])}),u(Xr,0,71))))))),mm=Bb(vm),pm=o((function(n,e,r,t){var o,a=function(n){var e=fu(n),r=Jl(e),t=r.a,o=r.b;return{cH:du(n),dc:t,dd:o,de:e}}(function(n){return n.k}(t)),i=u(Vv,r,vm),c=(o=L(n,e)).a?o.b?Sd($([i,em(mm)])):i:o.b?em(mm):Ib,l=function(n){return n.fk}(t),f=function(n){return n.e6}(t);return u(Uv,a,u(Yv,D(l,l,f),c))})),gm=r((function(n,e){return s(pm,!0,!0,n,e)})),hm={src:"\n        precision highp float;\n        \n        attribute lowp float triangleVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 triangleVertexPositions;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleVertex), triangleVertexPositions, position, normal);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{triangleVertex:"c4"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",triangleVertexPositions:"bA",viewMatrix:"f"}},xm={src:"\n        precision highp float;\n        \n        attribute lowp float triangleVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 triangleVertexPositions;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleVertex), triangleVertexPositions, position, normal);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n        }\n    ",attributes:{triangleVertex:"c4"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",triangleVertexPositions:"bA",viewMatrix:"f"}},Cm=function(n){var e=n.a,r=n.b,t=n.c;return Fs({dI:e.bD,dJ:r.bD,dK:t.bD,dL:0,dM:e.bE,dN:r.bE,dO:t.bE,dP:0,dQ:e.bF,dR:r.bF,dS:t.bF,dT:0,dU:0,dV:0,dW:0,dX:0})},Mm=sb($([D({c4:0},{c4:1},{c4:2})])),Pm=r((function(n,e){var r=ob(e),t=Rv(r);switch(n.$){case 0:if(n.b.$)return Ib;var o=n.b.a;return u(jb,t,l((function(n,r,t,a,i,c,l,u){return d(Is,f(Xb,a,0,u),hm,Zb,Mm,{aC:o,b:t,c:r,d:c,e:n,bA:Cm(e),f:i})})));case 1:if(n.b.$)return Ib;var a=n.b.a,i=n.c;return u(jb,t,l((function(n,r,t,o,c,l,s,b){return d(Is,f(Xb,o,0,b),hm,ov,Mm,{aS:u(av,i,a),b:t,c:r,d:l,e:n,bA:Cm(e),f:c})})));case 2:var c=u(Pv,n.b,n.c);if(c.$)return Ib;var b=c.a;return u(jb,t,l((function(n,r,t,o,a,i,c,l){var u=c.a,s=c.b;return d(Is,f(Xb,o,0,l),xm,uv,Mm,{R:s,bm:u.bm,bV:u.bV,bW:u.bW,bX:u.bX,cz:b,b:t,c:r,d:i,e:n,bA:Cm(e),f:a})})));default:var v=s(Sv,n.b,n.c,n.d,n.e);if(v.$)return Ib;var m=v.a,p=v.b,g=v.c;return u(jb,t,l((function(n,r,t,o,a,i,c,l){var u=c.a,s=c.b;return d(Is,f(Xb,o,0,l),xm,pv,Mm,{cc:m,R:s,bm:u.bm,bV:u.bV,bW:u.bW,bX:u.bX,cC:g,b:t,c:r,d:i,cZ:p,e:n,bA:Cm(e),f:a})})))}})),ym=(ua=$([{a3:u(Os,0,1)},{a3:u(Os,1,1)},{a3:u(Os,2,1)},{a3:u(Os,0,-1)},{a3:u(Os,1,-1)},{a3:u(Os,2,-1)}]),fa=$([D(0,1,2),D(3,5,4),D(3,4,1),D(3,1,0),D(4,5,2),D(4,2,1),D(5,3,0),D(5,0,2)]),u(Fb,ua,fa)),Tm={src:"\n        precision highp float;\n        \n        attribute highp vec2 triangleShadowVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        uniform highp mat4 triangleVertexPositions;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 shadowVertexPosition(vec3 position, vec3 normal, mat4 shadowLight, vec4 modelScale, mat4 modelMatrix, mat4 viewMatrix, mat4 projectionMatrix, mat4 sceneProperties) {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            vec3 worldNormal = getWorldNormal(normal, vec4(modelScale.xyz, 1.0), modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 directionToLight = getDirectionToLight(worldPosition.xyz, xyz_type, rgb_parameter);\n            vec3 offset = vec3(0.0, 0.0, 0.0);\n            float sceneDiameter = sceneProperties[3][1];\n            if (dot(directionToLight, worldNormal) <= 0.0) {\n                offset = -sceneDiameter * directionToLight;\n            } else {\n                offset = -0.001 * sceneDiameter * directionToLight;\n            }\n            vec4 offsetPosition = worldPosition + vec4(offset, 0.0);\n            return projectionMatrix * (viewMatrix * offsetPosition);\n        }\n        \n        void main () {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleShadowVertex.x), triangleVertexPositions, position, normal);\n            normal *= triangleShadowVertex.y;\n            gl_Position = shadowVertexPosition(\n                position,\n                normal,\n                shadowLight,\n                modelScale,\n                modelMatrix,\n                viewMatrix,\n                projectionMatrix,\n                sceneProperties\n            );\n        }\n    ",attributes:{triangleShadowVertex:"a3"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"b6",triangleVertexPositions:"bA",viewMatrix:"f"}},Lm=function(n){return Ov(l((function(e,r,t,o,a,i,c,l){return d(Is,u(Qv,o,l),Tm,Jv,ym,{b:t,c:r,d:i,e:e,b6:c,bA:Cm(n),f:a})})))},Dm=o((function(n,e,r,t){var o=u(Pm,r,t),a=L(n,e);return a.a?a.b?Sd($([o,Lm(t)])):o:a.b?Lm(t):Ib})),wm=r((function(n,e){return s(Dm,!0,!0,n,e)})),Sm=r((function(n,e){var r=ju(e),t=ju(n),o=Iu(e),a=Iu(n),i=Hu(e),c=Hu(n);return{dZ:u(md,c,i),d_:u(md,a,o),d$:u(md,t,r),d0:u(gd,c,i),d1:u(gd,a,o),d2:u(gd,t,r)}})),Em={src:"\n        precision highp float;\n        \n        attribute lowp float lineSegmentVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp vec3 lineSegmentStartPoint;\n        uniform highp vec3 lineSegmentEndPoint;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = (1.0 - lineSegmentVertex) * lineSegmentStartPoint + lineSegmentVertex * lineSegmentEndPoint;\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{lineSegmentVertex:"dH"},uniforms:{lineSegmentEndPoint:"dF",lineSegmentStartPoint:"dG",modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Fm=r((function(n,e){return{$:1,a:n,b:e}}))({dp:2,dz:0,d4:1})($([L({dH:0},{dH:1})])),Nm=r((function(n,e){var r,t=u(Sm,(r=e).a,r.b),o=Rv(t),a=e.a,i=e.b;switch(n.$){case 0:if(n.b.$)return Ib;var c=n.b.a;return u(jb,o,l((function(n,e,r,t,o,l,u,f){return d(Is,f,Em,Zb,Fm,{aC:c,dF:ib(i),dG:ib(a),b:r,c:e,d:l,e:n,f:o})})));case 1:if(n.b.$)return Ib;c=n.b.a;var f=n.c;return u(jb,o,l((function(n,e,r,t,o,l,s,b){return d(Is,b,Em,ov,Fm,{aS:u(av,f,c),dF:ib(i),dG:ib(a),b:r,c:e,d:l,e:n,f:o})})));case 2:default:return Ib}})),$m=r((function(n,e){return u(Nm,n,e)})),zm=t((function(n,e,r){return{$:2,a:n,b:e,c:r}})),_m=function(n){return f(tf,0,1,n>.04045?u(zi,(n+.055)/1.055,2.4):n/12.92)},Am=function(n){return f(zm,0,om(function(n){var e=ac(n),r=e.cm,t=e.ce;return f(ws,_m(e.cV),_m(r),_m(t))}(n)),om(0))},Rm=r((function(n,e){return n/e})),Vm=a((function(n,e,r,t,o){for(;;){var a=t(e/r),i=u(Tr,a,o);if(M(e,n))return i;n=n,e-=1,r=r,t=t,o=i}})),km=r((function(n,e){return 1>n?E:d(Vm,0,n,n,e,E)})),Bm=r((function(n,e){var r=n.ec,t=n.L,o=t.a,a=t.b;return u(Tr,{o:cb(n.o),ec:ib(r),L:u(Os,o,a)},e)})),Hm=r((function(n,e){var r=n,t=e,o=ou(t);return{bD:o*ou(r),bE:o*Au(r),bF:Au(t)}})),Wm=(sa=u(Xr,0,71),da=u(km,72,u(_v,0,dm(1))),ba=rt(36),va=u(Xr,0,ba-1),ma=u(km,ba,u(_v,Vl(90),Vl(-90))),pa=Db(vs(u(jt,(function(n){return u(jt,(function(e){return{o:u(Hm,n,e),ec:f(df,u(su,im(e)*im(n),1),u(su,im(e)*sm(n),1),u(su,sm(e),1)),L:L(u(Rm,n,dm(1)),u(Rm,u(xd,Vl(90),e),Vl(180)))}}),ma)}),da))),ga=r((function(n,e){return n*(ba+1)+e})),ha=vs(u(jt,(function(n){return vs(u(jt,(function(e){var r=u(ga,n+1,e),t=u(ga,n,e),o=u(ga,n+1,e+1),a=u(ga,n,e+1);return $([D(a,o,r),D(a,r,t)])}),va))}),sa)),Zd(function(n){var e=f(Dr,Bm,E,yb(n));if(e.b){var r=e.a,t=e.b,o=u(Fb,e,gb(n));return s(qd,u(um,r,t),n,o,0)}return Kd}(u(Eb,pa,ha)))),Im=r((function(n,e){for(;;){var r=u(rc,144,2*n+3),t=u(rc,144,2*n+2),o=2*n+1,a=2*n,i=u(Tr,D(144,a,t),u(Tr,D(a,r,t),u(Tr,D(a,o,r),u(Tr,D(o,145,r),e))));if(!n)return i;n-=1,e=i}})),jm=t((function(n,e,r){return r>.5?e+(1-r)*(n-e):n+r*(e-n)})),Um=(xa=u(r((function(n,e){for(;;){var r=f(jm,0,6.283185307179586,n/72),t=u(Tr,{bJ:r,b_:0,b4:1},u(Tr,{bJ:r,b_:1,b4:1},e));if(!n)return t;n-=1,e=t}})),71,$([{bJ:0,b_:0,b4:0},{bJ:0,b_:1,b4:0}])),u(Fb,xa,u(Im,71,E))),Om={src:"\n        precision highp float;\n        \n        attribute highp float angle;\n        attribute highp float offsetScale;\n        attribute highp float radiusScale;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const lowp float kPerspectiveProjection = 0.0;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec3 perpendicularTo(vec3 d) {\n            float absX = abs(d.x);\n            float absY = abs(d.y);\n            float absZ = abs(d.z);\n            if (absX <= absY) {\n                if (absX <= absZ) {\n                    float scale = 1.0 / length(d.zy);\n                    return vec3(0.0, -d.z * scale, d.y * scale);\n                } else {\n                    float scale = 1.0 / length(d.xy);\n                    return vec3(-d.y * scale, d.x * scale, 0.0);\n                }\n            } else {\n                if (absY <= absZ) {\n                    float scale = 1.0 / length(d.xz);\n                    return vec3(d.z * scale, 0.0, -d.x * scale);\n                } else {\n                    float scale = 1.0 / length(d.xy);\n                    return vec3(-d.y * scale, d.x * scale, 0.0);\n                }\n            }\n        }\n        \n        void main () {\n            vec4 worldCenter = getWorldPosition(vec3(0.0, 0.0, 0.0), modelScale, modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 zDirection = getDirectionToLight(worldCenter.xyz, xyz_type, rgb_parameter);\n            vec3 xDirection = perpendicularTo(zDirection);\n            vec3 yDirection = cross(zDirection, xDirection);\n            float r = modelScale.x;\n            float adjustedRadius = r;\n            float zOffset = 0.0;\n            if (xyz_type.w == kPointLight) {\n                float distanceToLight = length(xyz_type.xyz - worldCenter.xyz);\n                float rSquared = r * r;\n                zOffset = rSquared / distanceToLight;\n                float zSquared = zOffset * zOffset;\n                adjustedRadius = sqrt(rSquared - zSquared) * radiusScale;\n            }\n            vec3 worldPosition =\n                worldCenter.xyz\n                    + zDirection * zOffset\n                    + xDirection * adjustedRadius * cos(angle)\n                    + yDirection * adjustedRadius * sin(angle);\n            vec3 directionToLight = getDirectionToLight(worldPosition, xyz_type, rgb_parameter);\n            float sceneDiameter = sceneProperties[3][1];\n            vec3 offset = -sceneDiameter * offsetScale * directionToLight;\n            vec4 offsetPosition = vec4(worldPosition + offset, 1.0);\n            gl_Position = projectionMatrix * (viewMatrix * offsetPosition);\n        }\n    ",attributes:{angle:"bJ",offsetScale:"b_",radiusScale:"b4"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"b6",viewMatrix:"f"}},Gm=function(){return Ov(l((function(n,e,r,t,o,a,i,c){return d(Is,u(Qv,!0,c),Om,Jv,Um,{aC:f(ws,0,0,1),b:r,c:e,d:a,e:n,b6:i,f:o})})))},qm=r((function(n,e){return u(jv,function(n){return{dA:!0,q:1,r:0,s:0,t:0,u:1,v:0,w:0,x:0,y:1,H:n.bD,I:n.bE,J:n.bF,b5:1}}(n),e)})),Xm=o((function(n,e,r,t){var o,a=u(Vv,r,Wm),i=(o=L(n,e)).a?o.b?Sd($([a,Gm()])):a:o.b?Gm():Ib,c=_f(t);return u(qm,u(Il,Ql,zf(t)),u(Yv,D(c,c,c),i))})),Ym=r((function(n,e){return s(Xm,!0,!0,n,e)})),Jm=function(n){switch(n.$){case 0:var e=n.b;return $([u(tm,Am(n.a),e)]);case 1:var r=n.b;return $([u(wm,Am(n.a),r)]);case 3:var t=n.b;return $([u(Ym,Am(n.a),t)]);case 2:var o=n.b;return $([u(gm,Am(n.a),o)]);case 4:var a=n.b;return $([u($m,(i=n.a,u(am,0,om(function(n){var e=ac(n);return f(ws,e.cV,e.cm,e.ce)}(i)))),a)]);default:return u(ms,Jm,n.a)}var i},Zm=r((function(n,e){return r={ex:n.ex,di:n.eB,eE:n.eE,eJ:n.eJ,$7:L(_i(n.aa.da),_i(n.aa.cn)),dt:(t=e,u(ms,Jm,t)),eR:n.eR,e8:n.e8,fy:n.fy,fE:n.fE},u(jd,{ex:r.ex,di:r.di,eE:r.eE,eJ:r.eJ,$7:r.$7},$([{dt:r.dt,eR:r.eR,e8:r.e8,fy:r.fy,fE:r.fE}]));var r,t})),Km=function(n){return n*Rl/180},Qm=r((function(n,e){var r=n,t=e.eM,o=t.bD,a=t.bE,i=t.bF,c=u(Ss,e.co,e.bM);return{bK:Ld(c),eG:r,bR:Td(c),cS:0,b3:yd(c),c5:1,bD:-o,bE:-a,bF:-i}})),np={bD:.37208,bE:.37529},ep=r((function(n,e){return{$:2,a:n,b:e}})),rp=function(n){return{$:0,a:n}},tp=function(n){return n.eG},op=rp(zd.a),ap=r((function(n,e){return f(It,r((function(e,r){var t=r.a,o=r.b;return n(e)?L(u(Tr,e,t),o):L(t,u(Tr,e,o))})),L(E,E),e)})),ip=function(n){return Fs({dI:n.bD,dJ:n.b3,dK:0,dL:0,dM:n.bE,dN:n.bR,dO:0,dP:0,dQ:n.bF,dR:n.bK,dS:0,dT:0,dU:n.c5,dV:n.cS,dW:0,dX:0})},cp=l((function(n,e,r,t,o,a,i,c){var l=u(ap,tp,$([n,e,r,t])),f=l.a;if(f.b){var s=S(f,l.b);if(s.b&&s.b.b&&s.b.b.b&&s.b.b.b.b&&!s.b.b.b.b.b){var d=s.a,b=s.b,v=b.a,m=b.b,p=m.a,g=m.b.a;return u(ep,u(jt,ip,f),{bm:u($d,d,v),bV:u($d,p,g),bW:u($d,o,a),bX:u($d,i,c)})}return op}return rp({bm:u($d,n,e),bV:u($d,r,t),bW:u($d,o,a),bX:u($d,i,c)})})),lp=o((function(n,e,r,t){return m(cp,n,e,r,t,Nd,Nd,Nd,Nd)})),up={$:5},fp={bD:.44757,bE:.40745},sp={$:1},dp=r((function(n,e){var r=n,t=e.ec,o=t.bD,a=t.bE,i=t.bF,c=u(Ss,e.co,e.bM);return{bK:Ld(c),eG:r,bR:Td(c),cS:0,b3:yd(c),c5:2,bD:o,bE:a,bF:i}})),bp=function(n){return u(dp,!0,{bM:n.bM,co:n.co,ec:n.ec})};Ca={Main:{init:s(_l,r((function(n,e){var r,t,o,a=(r={dh:Km(-90),bM:(t=f(tf,1667,25e3,2e3),o=t>4e3?-3025846900/(t*t*t)+2107037.9/(t*t)+.2226347*1e3/t+.24039:-266123900.00000003/(t*t*t)-.2343589*1e6/(t*t)+877.6956/t+.17991,{bD:o,bE:t>2222?t>4e3?o*o*o*3.081758-o*o*5.8733867+3.75112997*o-.37001483:o*o*o*-.9549476-o*o*1.37418593+2.09137015*o-.16748867:o*o*o*-1.1063814-o*o*1.3481102+2.18555832*o-.20219683}),dq:Km(-45),co:100},u(Qm,!0,{bM:r.bM,eM:u(Hm,r.dh,r.dq),co:r.co})),i=bp({bM:np,co:6e3,ec:{bD:2,bE:3,bF:3}}),c=function(n){return function(n){for(;;){if(M(n.e3,0)&&M(n.e4,0))return Nd;if(!u(Ul,nu(n.e3),nu(n.e4))){var e=lc(n.e4/Rl),r=lc(n.e3/Rl),t=n.fz,o=t.bD,a=t.bE,i=t.bF,c=u(Ss,1,n.bM);return{bK:r*Ld(c),eG:!1,bR:r*Td(c),cS:e/r,b3:r*yd(c),c5:3,bD:o,bE:a,bF:i}}n={bM:n.bM,e3:n.e4,e4:n.e3,fz:wu(n.fz)}}}({bM:n.bM,e3:n.e3,e4:n.e4,fz:u(Hm,n.dh,n.dq)})}({dh:Km(0),bM:np,dq:Km(-45),e3:20,e4:10}),l=bp({bM:fp,co:6e3,ec:{bD:-2,bE:4,bF:3}});return u(Zm,{ex:sp,eB:al,eE:cu(n),eJ:.1,eR:1.2*u(zi,2,6),e8:s(lp,l,i,a,c),aa:n.aa,fy:up,fE:np},$([u(ls,n,e)]))})),rf,u(Pt,E,E),(function(){return{aD:Al}}))(u(Ct,(function(n){return wt({cj:n})}),u(yt,"devicePixelRatio",Tt)))(0)}},n.Elm?function n(e,r){for(var t in r)t in e?"init"==t?C(6):n(e[t],r[t]):e[t]=r[t]}(n.Elm,Ca):n.Elm=Ca}(n);const e=n.Elm.Main.init({node:document.getElementById("elm-node"),flags:{devicePixelRatio:window.devicePixelRatio}});function r(n){const e=[];for(let r=0;r<n.length;r++)e.push({identifier:n[r].identifier,pageX:n[r].pageX,pageY:n[r].pageY});return e}window.addEventListener("touchstart",(n=>{e.ports.touchStart.send(r(n.changedTouches))})),window.addEventListener("touchmove",(n=>{e.ports.touchMove.send(r(n.changedTouches))})),window.addEventListener("touchend",(n=>{e.ports.touchEnd.send(r(n.changedTouches))})),window.addEventListener("touchcancel",(n=>{e.ports.touchCancel.send(r(n.changedTouches))}))}();
//# sourceMappingURL=index.fc941259.js.map
