!function(){var e={};!function(e){function n(e,n,r){return r.a=e,r.f=n,r}function r(e){return n(2,e,(function(n){return function(r){return e(n,r)}}))}function t(e){return n(3,e,(function(n){return function(r){return function(t){return e(n,r,t)}}}))}function o(e){return n(4,e,(function(n){return function(r){return function(t){return function(o){return e(n,r,t,o)}}}}))}function a(e){return n(5,e,(function(n){return function(r){return function(t){return function(o){return function(a){return e(n,r,t,o,a)}}}}}))}function i(e){return n(6,e,(function(n){return function(r){return function(t){return function(o){return function(a){return function(i){return e(n,r,t,o,a,i)}}}}}}))}function c(e){return n(7,e,(function(n){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return e(n,r,t,o,a,i,c)}}}}}}}))}function l(e){return n(8,e,(function(n){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return e(n,r,t,o,a,i,c,l)}}}}}}}}))}function u(e,n,r){return 2===e.a?e.f(n,r):e(n)(r)}function f(e,n,r,t){return 3===e.a?e.f(n,r,t):e(n)(r)(t)}function s(e,n,r,t,o){return 4===e.a?e.f(n,r,t,o):e(n)(r)(t)(o)}function d(e,n,r,t,o,a){return 5===e.a?e.f(n,r,t,o,a):e(n)(r)(t)(o)(a)}function b(e,n,r,t,o,a,i){return 6===e.a?e.f(n,r,t,o,a,i):e(n)(r)(t)(o)(a)(i)}function v(e,n,r,t,o,a,i,c){return 7===e.a?e.f(n,r,t,o,a,i,c):e(n)(r)(t)(o)(a)(i)(c)}function m(e,n,r,t,o,a,i,c,l){return 8===e.a?e.f(n,r,t,o,a,i,c,l):e(n)(r)(t)(o)(a)(i)(c)(l)}var p=t((function(e,n,r){for(var t=Array(e),o=0;e>o;o++)t[o]=r(n+o);return t})),g=r((function(e,n){for(var r=Array(e),t=0;e>t&&n.b;t++)r[t]=n.a,n=n.b;return r.length=t,L(r,n)})),h=r((function(e,n){return n[e]})),x=t((function(e,n,r){for(var t=r.length-1;t>=0;t--)n=u(e,r[t],n);return n}));function C(e){throw Error("https://github.com/elm/core/blob/1.0.0/hints/"+e+".md")}function P(e,n){for(var r,t=[],o=M(e,n,0,t);o&&(r=t.pop());o=M(r.a,r.b,0,t));return o}function M(e,n,r,t){if(e===n)return!0;if("object"!=typeof e||null===e||null===n)return"function"==typeof e&&C(5),!1;if(r>100)return t.push(L(e,n)),!0;for(var o in 0>e.$&&(e=Fr(e),n=Fr(n)),e)if(!M(e[o],n[o],r+1,t))return!1;return!0}function T(e,n,r){if("object"!=typeof e)return e===n?0:n>e?-1:1;if(void 0===e.$)return(r=T(e.a,n.a))||(r=T(e.b,n.b))?r:T(e.c,n.c);for(;e.b&&n.b&&!(r=T(e.a,n.a));e=e.b,n=n.b);return r||(e.b?1:n.b?-1:0)}var y=r((function(e,n){var r=T(e,n);return 0>r?Dr:r?$r:Nr}));function L(e,n){return{a:e,b:n}}function w(e,n,r){return{a:e,b:n,c:r}}function S(e,n){var r={};for(var t in e)r[t]=e[t];for(var t in n)r[t]=n[t];return r}function F(e,n){if("string"==typeof e)return e+n;if(!e.b)return n;var r=$(e.a,n);e=e.b;for(var t=r;e.b;e=e.b)t=t.b=$(e.a,n);return r}var N={$:0};function $(e,n){return{$:1,a:e,b:n}}var D=r($);function z(e){for(var n=N,r=e.length;r--;)n=$(e[r],n);return n}function H(e){for(var n=[];e.b;e=e.b)n.push(e.a);return n}var _=t((function(e,n,r){for(var t=[];n.b&&r.b;n=n.b,r=r.b)t.push(u(e,n.a,r.a));return z(t)})),A=r((function(e,n){return e*n})),G=r(Math.pow),R=r((function(e,n){var r=n%e;return 0===e?C(11):r>0&&0>e||0>r&&e>0?r+e:r})),k=Math.cos,B=Math.sin,V=Math.tan,E=Math.ceil,I=Math.floor,j=Math.round,W=Math.sqrt,O=Math.log,U=isNaN,Y=r((function(e,n){return e+n})),X=t((function(e,n,r){for(var t=r.length;t--;){var o=r[t],a=r.charCodeAt(t);56320>a||a>57343||(o=r[--t]+o),n=u(e,o,n)}return n})),q=r((function(e,n){return n.split(e)})),J=r((function(e,n){return n.join(e)})),K=t((function(e,n,r){return r.slice(e,n)})),Z=r((function(e,n){return 0===n.indexOf(e)}));function Q(e){return e+""}function ee(e){return{$:2,b:e}}var ne=ee((function(e){return"number"!=typeof e?ge("an INT",e):e>-2147483647&&2147483647>e&&(0|e)===e?Gr(e):!isFinite(e)||e%1?ge("an INT",e):Gr(e)})),re=ee((function(e){return"boolean"==typeof e?Gr(e):ge("a BOOL",e)})),te=ee((function(e){return"number"==typeof e?Gr(e):ge("a FLOAT",e)})),oe=(ee((function(e){return Gr(e)})),ee((function(e){return"string"==typeof e?Gr(e):e instanceof String?Gr(e+""):ge("a STRING",e)}))),ae=r((function(e,n){return{$:6,d:e,b:n}}));function ie(e,n){return{$:9,f:e,g:n}}var ce=r((function(e,n){return{$:10,b:n,h:e}})),le=r((function(e,n){return ie(e,[n])})),ue=t((function(e,n,r){return ie(e,[n,r])})),fe=o((function(e,n,r,t){return ie(e,[n,r,t])})),se=r((function(e,n){try{return be(e,JSON.parse(n))}catch(e){return zr(u(Hr,"This is not valid JSON! "+e.message,n))}})),de=r((function(e,n){return be(e,n)}));function be(e,n){switch(e.$){case 2:return e.b(n);case 5:return null===n?Gr(e.c):ge("null",n);case 3:return me(n)?ve(e.b,n,z):ge("a LIST",n);case 4:return me(n)?ve(e.b,n,pe):ge("an ARRAY",n);case 6:var r=e.d;if("object"!=typeof n||null===n||!(r in n))return ge("an OBJECT with a field named `"+r+"`",n);var t=be(e.b,n[r]);return xt(t)?t:zr(u(_r,r,t.a));case 7:var o=e.e;return me(n)?n.length>o?(t=be(e.b,n[o]),xt(t)?t:zr(u(Ar,o,t.a))):ge("a LONGER array. Need index "+o+" but only see "+n.length+" entries",n):ge("an ARRAY",n);case 8:if("object"!=typeof n||null===n||me(n))return ge("an OBJECT",n);var a=N;for(var i in n)if(n.hasOwnProperty(i)){if(t=be(e.b,n[i]),!xt(t))return zr(u(_r,i,t.a));a=$(L(i,t.a),a)}return Gr(Kr(a));case 9:for(var c=e.f,l=e.g,f=0;l.length>f;f++){if(t=be(l[f],n),!xt(t))return t;c=c(t.a)}return Gr(c);case 10:return t=be(e.b,n),xt(t)?be(e.h(t.a),n):t;case 11:for(var s=N,d=e.g;d.b;d=d.b){if(t=be(d.a,n),xt(t))return t;s=$(t.a,s)}return zr(Rr(Kr(s)));case 1:return zr(u(Hr,e.a,n));case 0:return Gr(e.a)}}function ve(e,n,r){for(var t=n.length,o=Array(t),a=0;t>a;a++){var i=be(e,n[a]);if(!xt(i))return zr(u(Ar,a,i.a));o[a]=i.a}return Gr(r(o))}function me(e){return Array.isArray(e)||"undefined"!=typeof FileList&&e instanceof FileList}function pe(e){return u(ht,e.length,(function(n){return e[n]}))}function ge(e,n){return zr(u(Hr,"Expecting "+e,n))}function he(e,n){if(e===n)return!0;if(e.$!==n.$)return!1;switch(e.$){case 0:case 1:return e.a===n.a;case 2:return e.b===n.b;case 5:return e.c===n.c;case 3:case 4:case 8:return he(e.b,n.b);case 6:return e.d===n.d&&he(e.b,n.b);case 7:return e.e===n.e&&he(e.b,n.b);case 9:return e.f===n.f&&xe(e.g,n.g);case 10:return e.h===n.h&&he(e.b,n.b);case 11:return xe(e.g,n.g)}}function xe(e,n){var r=e.length;if(r!==n.length)return!1;for(var t=0;r>t;t++)if(!he(e[t],n[t]))return!1;return!0}var Ce=r((function(e,n){return JSON.stringify(n,null,e)+""}));function Pe(e){return e}var Me=t((function(e,n,r){return r[e]=n,r}));function Te(e){return{$:0,a:e}}function ye(e){return{$:2,b:e,c:null}}var Le=r((function(e,n){return{$:3,b:e,d:n}})),we=0;function Se(e){var n={$:0,e:we++,f:e,g:null,h:[]};return He(n),n}function Fe(e){return ye((function(n){n(Te(Se(e)))}))}function Ne(e,n){e.h.push(n),He(e)}var $e=r((function(e,n){return ye((function(r){Ne(e,n),r(Te(0))}))})),De=!1,ze=[];function He(e){if(ze.push(e),!De){for(De=!0;e=ze.shift();)_e(e);De=!1}}function _e(e){for(;e.f;){var n=e.f.$;if(0===n||1===n){for(;e.g&&e.g.$!==n;)e.g=e.g.i;if(!e.g)return;e.f=e.g.b(e.f.a),e.g=e.g.i}else{if(2===n)return void(e.f.c=e.f.b((function(n){e.f=n,He(e)})));if(5===n){if(0===e.h.length)return;e.f=e.f.b(e.h.shift())}else e.g={$:3===n?0:1,b:e.f.b,i:e.g},e.f=e.f.d}}}var Ae={};function Ge(e,n,r,t,o){return{b:e,c:n,d:r,e:t,f:o}}function Re(e,n){var r={g:n,h:void 0},t=e.c,o=e.d,a=e.e,i=e.f;return r.h=Se(u(Le,(function e(n){return u(Le,e,{$:5,b:function(e){var c=e.a;return 0===e.$?f(o,r,c,n):a&&i?s(t,r,c.i,c.j,n):f(t,r,a?c.i:c.j,n)}})}),e.b))}var ke=r((function(e,n){return ye((function(r){e.g(n),r(Te(0))}))})),Be=r((function(e,n){return u($e,e.h,{$:0,a:n})}));function Ve(e){return function(n){return{$:1,k:e,l:n}}}function Ee(e){return{$:2,m:e}}var Ie=r((function(e,n){return{$:3,n:e,o:n}})),je=[],We=!1;function Oe(e,n,r){if(je.push({p:e,q:n,r:r}),!We){We=!0;for(var t;t=je.shift();)Ue(t.p,t.q,t.r);We=!1}}function Ue(e,n,r){var t={};for(var o in Ye(!0,n,t,null),Ye(!1,r,t,null),e)Ne(e[o],{$:"fx",a:t[o]||{i:N,j:N}})}function Ye(e,n,r,t){switch(n.$){case 1:var o=n.k,a=function(e,n,r,t){return u(e?Ae[n].e:Ae[n].f,(function(e){for(var n=r;n;n=n.t)e=n.s(e);return e}),t)}(e,o,t,n.l);return void(r[o]=function(e,n,r){return r=r||{i:N,j:N},e?r.i=$(n,r.i):r.j=$(n,r.j),r}(e,a,r[o]));case 2:for(var i=n.m;i.b;i=i.b)Ye(e,i.a,r,t);return;case 3:return void Ye(e,n.o,r,{s:n.n,t:t})}}function Xe(e,n){return function(e){Ae[e]&&C(3)}(e),Ae[e]={f:qe,u:n,a:Je},Ve(e)}var qe=r((function(e,n){return function(r){return e(n(r))}}));function Je(e,n){var r=N,o=Ae[e].u,a=Te(null);return Ae[e].b=a,Ae[e].c=t((function(e,n){return r=n,a})),{send:function(e){var t=u(de,o,e);xt(t)||C(4);for(var a=t.a,i=r;i.b;i=i.b)n(i.a(a))}}}var Ke="undefined"!=typeof document?document:{};function Ze(e,n){e.appendChild(n)}function Qe(e){return{$:0,a:e}}var en,nn=r((function(e,n){return r((function(r,t){for(var o=[],a=0;t.b;t=t.b){var i=t.a;a+=i.b||0,o.push(i)}return a+=o.length,{$:1,c:n,d:un(r),e:o,f:e,b:a}}))}))(void 0),rn=r((function(e,n){return r((function(r,t){for(var o=[],a=0;t.b;t=t.b){var i=t.a;a+=i.b.b||0,o.push(i)}return a+=o.length,{$:2,c:n,d:un(r),e:o,f:e,b:a}}))}))(void 0),tn=r((function(e,n){return{$:4,j:e,k:n,b:1+(n.b||0)}})),on=r((function(e,n){return{$:"a0",n:e,o:n}})),an=r((function(e,n){return{$:"a1",n:e,o:n}})),cn=r((function(e,n){return{$:"a2",n:e,o:n}})),ln=r((function(e,n){return{$:"a3",n:e,o:n}}));function un(e){for(var n={};e.b;e=e.b){var r=e.a,t=r.$,o=r.n,a=r.o;if("a2"!==t){var i=n[t]||(n[t]={});"a3"===t&&"class"===o?fn(i,o,a):i[o]=a}else"className"===o?fn(n,o,a):n[o]=a}return n}function fn(e,n,r){var t=e[n];e[n]=t?t+" "+r:r}function sn(e,n){var r=e.$;if(5===r)return sn(e.k||(e.k=e.m()),n);if(0===r)return Ke.createTextNode(e.a);if(4===r){for(var t=e.k,o=e.j;4===t.$;)"object"!=typeof o?o=[o,t.j]:o.push(t.j),t=t.k;var a={j:o,p:n};return(i=sn(t,a)).elm_event_node_ref=a,i}if(3===r)return dn(i=e.h(e.g),n,e.d),i;var i=e.f?Ke.createElementNS(e.f,e.c):Ke.createElement(e.c);dn(i,n,e.d);for(var c=e.e,l=0;c.length>l;l++)Ze(i,sn(1===r?c[l]:c[l].b,n));return i}function dn(e,n,r){for(var t in r){var o=r[t];"a1"===t?bn(e,o):"a0"===t?pn(e,n,o):"a3"===t?vn(e,o):"a4"===t?mn(e,o):("value"!==t&&"checked"!==t||e[t]!==o)&&(e[t]=o)}}function bn(e,n){var r=e.style;for(var t in n)r[t]=n[t]}function vn(e,n){for(var r in n){var t=n[r];void 0!==t?e.setAttribute(r,t):e.removeAttribute(r)}}function mn(e,n){for(var r in n){var t=n[r],o=t.f,a=t.o;void 0!==a?e.setAttributeNS(o,r,a):e.removeAttributeNS(o,r)}}function pn(e,n,r){var t=e.elmFs||(e.elmFs={});for(var o in r){var a=r[o],i=t[o];if(a){if(i){if(i.q.$===a.$){i.q=a;continue}e.removeEventListener(o,i)}i=gn(n,a),e.addEventListener(o,i,en&&{passive:2>wt(a)}),t[o]=i}else e.removeEventListener(o,i),t[o]=void 0}}try{window.addEventListener("t",null,Object.defineProperty({},"passive",{get:function(){en=!0}}))}catch(e){}function gn(e,n){function r(n){var t=r.q,o=be(t.a,n);if(xt(o)){for(var a,i=wt(t),c=o.a,l=i?3>i?c.a:c.au:c,u=1==i?c.b:3==i&&c.c4,f=(u&&n.stopPropagation(),(2==i?c.b:3==i&&c.cU)&&n.preventDefault(),e);a=f.j;){if("function"==typeof a)l=a(l);else for(var s=a.length;s--;)l=a[s](l);f=f.p}f(l,u)}}return r.q=n,r}function hn(e,n){return e.$==n.$&&he(e.a,n.a)}function xn(e,n,r,t){var o={$:n,r:r,s:t,t:void 0,u:void 0};return e.push(o),o}function Cn(e,n,r,t){if(e!==n){var o=e.$,a=n.$;if(o!==a){if(1!==o||2!==a)return void xn(r,0,t,n);n=function(e){for(var n=e.e,r=n.length,t=Array(r),o=0;r>o;o++)t[o]=n[o].b;return{$:1,c:e.c,d:e.d,e:t,f:e.f,b:e.b}}(n),a=1}switch(a){case 5:for(var i=e.l,c=n.l,l=i.length,u=l===c.length;u&&l--;)u=i[l]===c[l];if(u)return void(n.k=e.k);n.k=n.m();var f=[];return Cn(e.k,n.k,f,0),void(f.length>0&&xn(r,1,t,f));case 4:for(var s=e.j,d=n.j,b=!1,v=e.k;4===v.$;)b=!0,"object"!=typeof s?s=[s,v.j]:s.push(v.j),v=v.k;for(var m=n.k;4===m.$;)b=!0,"object"!=typeof d?d=[d,m.j]:d.push(m.j),m=m.k;return b&&s.length!==d.length?void xn(r,0,t,n):((b?function(e,n){for(var r=0;e.length>r;r++)if(e[r]!==n[r])return!1;return!0}(s,d):s===d)||xn(r,2,t,d),void Cn(v,m,r,t+1));case 0:return void(e.a!==n.a&&xn(r,3,t,n.a));case 1:return void Pn(e,n,r,t,Tn);case 2:return void Pn(e,n,r,t,yn);case 3:if(e.h!==n.h)return void xn(r,0,t,n);var p=Mn(e.d,n.d);p&&xn(r,4,t,p);var g=n.i(e.g,n.g);return void(g&&xn(r,5,t,g))}}}function Pn(e,n,r,t,o){if(e.c===n.c&&e.f===n.f){var a=Mn(e.d,n.d);a&&xn(r,4,t,a),o(e,n,r,t)}else xn(r,0,t,n)}function Mn(e,n,r){var t;for(var o in e)if("a1"!==o&&"a0"!==o&&"a3"!==o&&"a4"!==o)if(o in n){var a=e[o],i=n[o];a===i&&"value"!==o&&"checked"!==o||"a0"===r&&hn(a,i)||((t=t||{})[o]=i)}else(t=t||{})[o]=r?"a1"===r?"":"a0"===r||"a3"===r?void 0:{f:e[o].f,o:void 0}:"string"==typeof e[o]?"":null;else{var c=Mn(e[o],n[o]||{},o);c&&((t=t||{})[o]=c)}for(var l in n)l in e||((t=t||{})[l]=n[l]);return t}function Tn(e,n,r,t){var o=e.e,a=n.e,i=o.length,c=a.length;i>c?xn(r,6,t,{v:c,i:i-c}):c>i&&xn(r,7,t,{v:i,e:a});for(var l=c>i?i:c,u=0;l>u;u++){var f=o[u];Cn(f,a[u],r,++t),t+=f.b||0}}function yn(e,n,r,t){for(var o=[],a={},i=[],c=e.e,l=n.e,u=c.length,f=l.length,s=0,d=0,b=t;u>s&&f>d;){var v=(w=c[s]).a,m=(S=l[d]).a,p=w.b,g=S.b,h=void 0,x=void 0;if(v!==m){var C=c[s+1],P=l[d+1];if(C){var M=C.a,T=C.b;x=m===M}if(P){var y=P.a,L=P.b;h=v===y}if(h&&x)Cn(p,L,o,++b),wn(a,o,v,g,d,i),b+=p.b||0,Sn(a,o,v,T,++b),b+=T.b||0,s+=2,d+=2;else if(h)b++,wn(a,o,m,g,d,i),Cn(p,L,o,b),b+=p.b||0,s+=1,d+=2;else if(x)Sn(a,o,v,p,++b),b+=p.b||0,Cn(T,g,o,++b),b+=T.b||0,s+=2,d+=1;else{if(!C||M!==y)break;Sn(a,o,v,p,++b),wn(a,o,m,g,d,i),b+=p.b||0,Cn(T,L,o,++b),b+=T.b||0,s+=2,d+=2}}else Cn(p,g,o,++b),b+=p.b||0,s++,d++}for(;u>s;){var w;b++,Sn(a,o,(w=c[s]).a,p=w.b,b),b+=p.b||0,s++}for(;f>d;){var S,F=F||[];wn(a,o,(S=l[d]).a,S.b,void 0,F),d++}(o.length>0||i.length>0||F)&&xn(r,8,t,{w:o,x:i,y:F})}var Ln="_elmW6BL";function wn(e,n,r,t,o,a){var i=e[r];if(!i)return a.push({r:o,A:i={c:0,z:t,r:o,s:void 0}}),void(e[r]=i);if(1===i.c){a.push({r:o,A:i}),i.c=2;var c=[];return Cn(i.z,t,c,i.r),i.r=o,void(i.s.s={w:c,A:i})}wn(e,n,r+Ln,t,o,a)}function Sn(e,n,r,t,o){var a=e[r];if(a){if(0===a.c){a.c=2;var i=[];return Cn(t,a.z,i,o),void xn(n,9,o,{w:i,A:a})}Sn(e,n,r+Ln,t,o)}else{var c=xn(n,9,o,void 0);e[r]={c:1,z:t,r:o,s:c}}}function Fn(e,n,r,t){Nn(e,n,r,0,0,n.b,t)}function Nn(e,n,r,t,o,a,i){for(var c=r[t],l=c.r;l===o;){var u=c.$;if(1===u)Fn(e,n.k,c.s,i);else if(8===u)c.t=e,c.u=i,(f=c.s.w).length>0&&Nn(e,n,f,0,o,a,i);else if(9===u){c.t=e,c.u=i;var f,s=c.s;s&&(s.A.s=e,(f=s.w).length>0&&Nn(e,n,f,0,o,a,i))}else c.t=e,c.u=i;if(!(c=r[++t])||(l=c.r)>a)return t}var d=n.$;if(4===d){for(var b=n.k;4===b.$;)b=b.k;return Nn(e,b,r,t,o+1,a,e.elm_event_node_ref)}for(var v=n.e,m=e.childNodes,p=0;v.length>p;p++){o++;var g=1===d?v[p]:v[p].b,h=o+(g.b||0);if(!(o>l||l>h||(c=r[t=Nn(m[p],g,r,t,o,h,i)])&&(l=c.r)<=a))return t;o=h}return t}function $n(e,n){for(var r=0;n.length>r;r++){var t=n[r],o=t.t,a=Dn(o,t);o===e&&(e=a)}return e}function Dn(e,n){switch(n.$){case 0:return function(e,n,r){var t=e.parentNode,o=sn(n,r);return o.elm_event_node_ref||(o.elm_event_node_ref=e.elm_event_node_ref),t&&o!==e&&t.replaceChild(o,e),o}(e,n.s,n.u);case 4:return dn(e,n.u,n.s),e;case 3:return e.replaceData(0,e.length,n.s),e;case 1:return $n(e,n.s);case 2:return e.elm_event_node_ref?e.elm_event_node_ref.j=n.s:e.elm_event_node_ref={j:n.s,p:n.u},e;case 6:for(var r=n.s,t=0;r.i>t;t++)e.removeChild(e.childNodes[r.v]);return e;case 7:for(var o=(r=n.s).e,a=e.childNodes[t=r.v];o.length>t;t++)e.insertBefore(sn(o[t],n.u),a);return e;case 9:if(!(r=n.s))return e.parentNode.removeChild(e),e;var i=r.A;return void 0!==i.r&&e.parentNode.removeChild(e),i.s=$n(e,r.w),e;case 8:return function(e,n){var r=n.s,t=function(e,n){if(e){for(var r=Ke.createDocumentFragment(),t=0;e.length>t;t++){var o=e[t].A;Ze(r,2===o.c?o.s:sn(o.z,n.u))}return r}}(r.y,n);e=$n(e,r.w);for(var o=r.x,a=0;o.length>a;a++){var i=o[a],c=i.A,l=2===c.c?c.s:sn(c.z,n.u);e.insertBefore(l,e.childNodes[i.r])}return t&&Ze(e,t),e}(e,n);case 5:return n.s(e);default:C(10)}}function zn(e){if(3===e.nodeType)return Qe(e.textContent);if(1!==e.nodeType)return Qe("");for(var n=N,r=e.attributes,t=r.length;t--;){var o=r[t];n=$(u(ln,o.name,o.value),n)}var a=e.tagName.toLowerCase(),i=N,c=e.childNodes;for(t=c.length;t--;)i=$(zn(c[t]),i);return f(nn,a,n,i)}var Hn=o((function(e,n,r,t){return function(e,n,r,t,o,a){var i=u(de,e,n?n.flags:void 0);xt(i)||C(2);var c={},l=r(i.a),f=l.a,s=a(b,f),d=function(e,n){var r;for(var t in Ae){var o=Ae[t];o.a&&((r=r||{})[t]=o.a(t,n)),e[t]=Re(o,n)}return r}(c,b);function b(e,n){var r=u(t,e,f);s(f=r.a,n),Oe(c,r.b,o(f))}return Oe(c,l.b,o(f)),d?{ports:d}:{}}(n,t,e.e4,e.fC,e.fv,(function(n,r){var o=e.fE,a=t.node,i=zn(a);return function(e,n){n(e);var r=0;function t(){r=1===r?0:(An(t),n(e),1)}return function(o,a){e=o,a?(n(e),2===r&&(r=1)):(0===r&&An(t),r=2)}}(r,(function(e){var r=o(e),t=function(e,n){var r=[];return Cn(e,n,r,0),r}(i,r);a=function(e,n,r,t){return 0===r.length?e:(Fn(e,n,r,t),$n(e,r))}(a,i,t,n),i=r}))}))})),_n="undefined"!=typeof cancelAnimationFrame?cancelAnimationFrame:function(e){clearTimeout(e)},An="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:function(e){return setTimeout(e,1e3/60)},Gn={addEventListener:function(){},removeEventListener:function(){}},Rn="undefined"!=typeof document?document:Gn,kn="undefined"!=typeof window?window:Gn,Bn=t((function(e,n,r){return Fe(ye((function(){function t(e){Se(r(e))}return e.addEventListener(n,t,en&&{passive:!0}),function(){e.removeEventListener(n,t)}})))})),Vn=r((function(e,n){var r=be(e,n);return xt(r)?kr(r.a):Br})),En=r((function(e,n){var r="g";e.fd&&(r+="m"),e.eH&&(r+="i");try{return kr(RegExp(n,r))}catch(e){return Br}})),In=t((function(e,n,r){for(var t,o=[],a=0,i=r,c=n.lastIndex,l=-1;a++<e&&(t=n.exec(i))&&l!=n.lastIndex;){for(var u=t.length-1,f=Array(u);u>0;){var d=t[u];f[--u]=d?kr(d):Br}o.push(s(Fi,t[0],t.index,a,z(f))),l=n.lastIndex}return n.lastIndex=c,z(o)})),jn=0;function Wn(e,n){for(;n.b;n=n.b)e(n.a)}function On(e){for(var n=0;e.b;e=e.b)n++;return n}var Un="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:function(e){setTimeout(e,1e3/60)},Yn=a((function(e,n,r,t,o){return{$:0,a:e,b:n,c:r,d:t,e:o}})),Xn=r((function(e,n){var r=e.blend;r.toggle=e.toggle,r.enabled||(e.gl.enable(e.gl.BLEND),r.enabled=!0),r.a===n.a&&r.d===n.d||(e.gl.blendEquationSeparate(n.a,n.d),r.a=n.a,r.d=n.d),r.b===n.b&&r.c===n.c&&r.e===n.e&&r.f===n.f||(e.gl.blendFuncSeparate(n.b,n.c,n.e,n.f),r.b=n.b,r.c=n.c,r.e=n.e,r.f=n.f),r.g===n.g&&r.h===n.h&&r.i===n.i&&r.j===n.j||(e.gl.blendColor(n.g,n.h,n.i,n.j),r.g=n.g,r.h=n.h,r.i=n.i,r.j=n.j)})),qn=r((function(e,n){var r=e.depthTest;r.toggle=e.toggle,r.enabled||(e.gl.enable(e.gl.DEPTH_TEST),r.enabled=!0),r.a!==n.a&&(e.gl.depthFunc(n.a),r.a=n.a),r.b!==n.b&&(e.gl.depthMask(n.b),r.b=n.b),r.c===n.c&&r.d===n.d||(e.gl.depthRange(n.c,n.d),r.c=n.c,r.d=n.d)})),Jn=r((function(e,n){var r=e.stencilTest;r.toggle=e.toggle,r.enabled||(e.gl.enable(e.gl.STENCIL_TEST),r.enabled=!0),r.d===n.d&&r.a===n.a&&r.b===n.b||(e.gl.stencilFuncSeparate(e.gl.FRONT,n.d,n.a,n.b),r.d=n.d),r.e===n.e&&r.f===n.f&&r.g===n.g||(e.gl.stencilOpSeparate(e.gl.FRONT,n.e,n.f,n.g),r.e=n.e,r.f=n.f,r.g=n.g),r.c!==n.c&&(e.gl.stencilMask(n.c),r.c=n.c),r.h===n.h&&r.a===n.a&&r.b===n.b||(e.gl.stencilFuncSeparate(e.gl.BACK,n.h,n.a,n.b),r.h=n.h,r.a=n.a,r.b=n.b),r.i===n.i&&r.j===n.j&&r.k===n.k||(e.gl.stencilOpSeparate(e.gl.BACK,n.i,n.j,n.k),r.i=n.i,r.j=n.j,r.k=n.k)})),Kn=r((function(e,n){var r=e.scissor;r.toggle=e.toggle,r.enabled||(e.gl.enable(e.gl.SCISSOR_TEST),r.enabled=!0),r.a===n.a&&r.b===n.b&&r.c===n.c&&r.d===n.d||(e.gl.scissor(n.a,n.b,n.c,n.d),r.a=n.a,r.b=n.b,r.c=n.c,r.d=n.d)})),Zn=r((function(e,n){var r=e.colorMask;r.toggle=e.toggle,r.enabled=!0,r.a===n.a&&r.b===n.b&&r.c===n.c&&r.d===n.d||(e.gl.colorMask(n.a,n.b,n.c,n.d),r.a=n.a,r.b=n.b,r.c=n.c,r.d=n.d)})),Qn=r((function(e,n){var r=e.cullFace;r.toggle=e.toggle,r.enabled||(e.gl.enable(e.gl.CULL_FACE),r.enabled=!0),r.a!==n.a&&(e.gl.cullFace(n.a),r.a=n.a)})),er=r((function(e,n){var r=e.polygonOffset;r.toggle=e.toggle,r.enabled||(e.gl.enable(e.gl.POLYGON_OFFSET_FILL),r.enabled=!0),r.a===n.a&&r.b===n.b||(e.gl.polygonOffset(n.a,n.b),r.a=n.a,r.b=n.b)})),nr=r((function(e,n){var r=e.sampleCoverage;r.toggle=e.toggle,r.enabled||(e.gl.enable(e.gl.SAMPLE_COVERAGE),r.enabled=!0),r.a===n.a&&r.b===n.b||(e.gl.sampleCoverage(n.a,n.b),r.a=n.a,r.b=n.b)})),rr=function(e){e.scissor.enabled&&(e.gl.disable(e.gl.SCISSOR_TEST),e.scissor.enabled=!1)},tr=function(e){var n=e.colorMask;n.a&&n.b&&n.c&&n.d||(e.gl.colorMask(!0,!0,!0,!0),n.a=!0,n.b=!0,n.c=!0,n.d=!0)},or=["blend","depthTest","stencilTest","scissor","colorMask","cullFace","polygonOffset","sampleCoverage","sampleAlphaToCoverage"],ar=[function(e){e.blend.enabled&&(e.gl.disable(e.gl.BLEND),e.blend.enabled=!1)},function(e){e.depthTest.enabled&&(e.gl.disable(e.gl.DEPTH_TEST),e.depthTest.enabled=!1)},function(e){e.stencilTest.enabled&&(e.gl.disable(e.gl.STENCIL_TEST),e.stencilTest.enabled=!1)},rr,tr,function(e){e.gl.disable(e.gl.CULL_FACE)},function(e){e.gl.disable(e.gl.POLYGON_OFFSET_FILL)},function(e){e.gl.disable(e.gl.SAMPLE_COVERAGE)},function(e){e.gl.disable(e.gl.SAMPLE_ALPHA_TO_COVERAGE)}];function ir(e,n,r){var t=e.createShader(r);return e.shaderSource(t,"#extension GL_OES_standard_derivatives : enable\n"+n),e.compileShader(t),t}function cr(e,n){switch(n){case e.FLOAT:return{size:1,arraySize:1,type:Float32Array,baseType:e.FLOAT};case e.FLOAT_VEC2:return{size:2,arraySize:1,type:Float32Array,baseType:e.FLOAT};case e.FLOAT_VEC3:return{size:3,arraySize:1,type:Float32Array,baseType:e.FLOAT};case e.FLOAT_VEC4:return{size:4,arraySize:1,type:Float32Array,baseType:e.FLOAT};case e.FLOAT_MAT4:return{size:4,arraySize:4,type:Float32Array,baseType:e.FLOAT};case e.INT:return{size:1,arraySize:1,type:Int32Array,baseType:e.INT}}}function lr(e,n,r,t){for(var o=r.a.dr,a=[],i=0;o>i;i++)a.push(String.fromCharCode(97+i));var c=cr(e,n.type);if(void 0===c)throw Error("No info available for: "+n.type);var l=0,u=c.size*c.arraySize*o,f=new c.type(On(r.b)*u);Wn((function(e){!function(e,n,r,t,i){var c;if(1===o)for(c=0;n>c;c++)e[r++]=1===n?t[i]:t[i][c];else a.forEach((function(o){for(c=0;n>c;c++)e[r++]=1===n?t[o][i]:t[o][i][c]}))}(f,c.size*c.arraySize,l,e,t[n.name]||n.name),l+=u}),r.b);var s=e.createBuffer();return e.bindBuffer(e.ARRAY_BUFFER,s),e.bufferData(e.ARRAY_BUFFER,f,e.STATIC_DRAW),s}function ur(e,n){return e+"#"+n}var fr=r((function(e,n){var r=e.f,t=r.gl;return t?(t.viewport(0,0,t.drawingBufferWidth,t.drawingBufferHeight),r.depthTest.b||(t.depthMask(!0),r.depthTest.b=!0),r.stencilTest.c!==r.STENCIL_WRITEMASK&&(t.stencilMask(r.STENCIL_WRITEMASK),r.stencilTest.c=r.STENCIL_WRITEMASK),rr(r),tr(r),t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT|t.STENCIL_BUFFER_BIT),Wn((function(n){if(n.d.b.b){var o,a,i,c,l;if(n.b.id&&n.c.id&&(o=ur(n.b.id,n.c.id),a=r.programs[o]),!a){var u,f;n.b.id?u=r.shaders[n.b.id]:n.b.id=jn++,u||(u=ir(t,n.b.src,t.VERTEX_SHADER),r.shaders[n.b.id]=u),n.c.id?f=r.shaders[n.c.id]:n.c.id=jn++,f||(f=ir(t,n.c.src,t.FRAGMENT_SHADER),r.shaders[n.c.id]=f);var s=function(e,n,r){var t=e.createProgram();if(e.attachShader(t,n),e.attachShader(t,r),e.linkProgram(t),!e.getProgramParameter(t,e.LINK_STATUS))throw"Link failed: "+e.getProgramInfoLog(t)+"\nvs info-log: "+e.getShaderInfoLog(n)+"\nfs info-log: "+e.getShaderInfoLog(r);return t}(t,u,f);(a={glProgram:s,attributes:Object.assign({},n.b.attributes,n.c.attributes),currentUniforms:{},activeAttributes:[],activeAttributeLocations:[]}).uniformSetters=function(e,n,r,t){var o=r.glProgram,a=r.currentUniforms,i=0,c=n.f;function l(n,r){var t=r.name,o=e.getUniformLocation(n,t);switch(r.type){case e.INT:return function(n){a[t]!==n&&(e.uniform1i(o,n),a[t]=n)};case e.FLOAT:return function(n){a[t]!==n&&(e.uniform1f(o,n),a[t]=n)};case e.FLOAT_VEC2:return function(n){a[t]!==n&&(e.uniform2f(o,n[0],n[1]),a[t]=n)};case e.FLOAT_VEC3:return function(n){a[t]!==n&&(e.uniform3f(o,n[0],n[1],n[2]),a[t]=n)};case e.FLOAT_VEC4:return function(n){a[t]!==n&&(e.uniform4f(o,n[0],n[1],n[2],n[3]),a[t]=n)};case e.FLOAT_MAT4:return function(n){a[t]!==n&&(e.uniformMatrix4fv(o,!1,new Float32Array(n)),a[t]=n)};case e.SAMPLER_2D:var l=i++;return function(n){e.activeTexture(e.TEXTURE0+l);var r=c.textures.get(n);r||(r=n.eM(e),c.textures.set(n,r)),e.bindTexture(e.TEXTURE_2D,r),a[t]!==n&&(e.uniform1i(o,l),a[t]=n)};case e.BOOL:return function(n){a[t]!==n&&(e.uniform1i(o,n),a[t]=n)};default:return function(){}}}for(var u={},f=e.getProgramParameter(o,e.ACTIVE_UNIFORMS),s=0;f>s;s++){var d=e.getActiveUniform(o,s);u[t[d.name]||d.name]=l(o,d)}return u}(t,e,a,Object.assign({},n.b.uniforms,n.c.uniforms));var d=t.getProgramParameter(s,t.ACTIVE_ATTRIBUTES);for(i=0;d>i;i++){var b=t.getActiveAttrib(s,i),v=t.getAttribLocation(s,b.name);a.activeAttributes.push(b),a.activeAttributeLocations.push(v)}o=ur(n.b.id,n.c.id),r.programs[o]=a}r.lastProgId!==o&&(t.useProgram(a.glProgram),r.lastProgId=o),c=a.uniformSetters,Object.keys(l=n.e).forEach((function(e){var n=c[e];n&&n(l[e])}));var m=r.buffers.get(n.d);for(m||(m=function(e,n){if(n.a.dB>0){var r=e.createBuffer(),t=function(e,n){var r,t=new Uint32Array(On(e)*n),o=0;return Wn((function(e){if(1===n)t[o++]=e;else for(r=0;n>r;r++)t[o++]=e[String.fromCharCode(97+r)]}),e),t}(n.c,n.a.dB);return e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,r),e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW),{numIndices:t.length,indexBuffer:r,buffers:{}}}return{numIndices:n.a.dr*On(n.b),indexBuffer:null,buffers:{}}}(t,n.d),r.buffers.set(n.d,m)),i=0;a.activeAttributes.length>i;i++){v=a.activeAttributeLocations[i],void 0===m.buffers[(b=a.activeAttributes[i]).name]&&(m.buffers[b.name]=lr(t,b,n.d,a.attributes)),t.bindBuffer(t.ARRAY_BUFFER,m.buffers[b.name]);var p=cr(t,b.type);if(1===p.arraySize)t.enableVertexAttribArray(v),t.vertexAttribPointer(v,p.size,p.baseType,!1,0,0);else for(var g=4*p.size,h=g*p.arraySize,x=0;p.arraySize>x;x++)t.enableVertexAttribArray(v+x),t.vertexAttribPointer(v+x,p.size,p.baseType,!1,h,g*x)}for(r.toggle=!r.toggle,Wn(ef(r),n.a),i=0;9>i;i++){var C=r[or[i]];C.toggle!==r.toggle&&C.enabled&&(ar[i](r),C.enabled=!1,C.toggle=r.toggle)}m.indexBuffer?(t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,m.indexBuffer),t.drawElements(n.d.a.d6,m.numIndices,t.UNSIGNED_INT,0)):t.drawArrays(n.d.a.d6,0,m.numIndices)}}),e.g),n):n})),sr=t((function(e,n,r){return function(e,n,r,t){return{$:3,d:un(e),g:n,h:r,i:t}}(n,{g:r,f:{},h:e},hr,xr)})),dr=r((function(e,n){e.contextAttributes.alpha=!0,e.contextAttributes.premultipliedAlpha=n.a})),br=r((function(e,n){e.contextAttributes.depth=!0,e.sceneSettings.push((function(e){e.clearDepth(n.a)}))})),vr=r((function(e,n){e.contextAttributes.stencil=!0,e.sceneSettings.push((function(e){e.clearStencil(n.a)}))})),mr=r((function(e){e.contextAttributes.antialias=!0})),pr=r((function(e,n){e.sceneSettings.push((function(e){e.clearColor(n.a,n.b,n.c,n.d)}))})),gr=r((function(e){e.contextAttributes.preserveDrawingBuffer=!0}));function hr(e){var n={contextAttributes:{alpha:!1,depth:!1,stencil:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1},sceneSettings:[]};Wn((function(e){return u(Qu,n,e)}),e.h);var r=Ke.createElement("canvas"),t=r.getContext&&(r.getContext("webgl",n.contextAttributes)||r.getContext("experimental-webgl",n.contextAttributes));return t&&"undefined"!=typeof WeakMap?(n.sceneSettings.forEach((function(e){e(t)})),t.getExtension("OES_standard_derivatives"),t.getExtension("OES_element_index_uint"),e.f.gl=t,e.f.toggle=!1,e.f.blend={enabled:!1,toggle:!1},e.f.depthTest={enabled:!1,toggle:!1},e.f.stencilTest={enabled:!1,toggle:!1},e.f.scissor={enabled:!1,toggle:!1},e.f.colorMask={enabled:!1,toggle:!1},e.f.cullFace={enabled:!1,toggle:!1},e.f.polygonOffset={enabled:!1,toggle:!1},e.f.sampleCoverage={enabled:!1,toggle:!1},e.f.sampleAlphaToCoverage={enabled:!1,toggle:!1},e.f.shaders=[],e.f.programs={},e.f.lastProgId=null,e.f.buffers=new WeakMap,e.f.textures=new WeakMap,e.f.STENCIL_WRITEMASK=t.getParameter(t.STENCIL_WRITEMASK),Un((function(){return u(fr,e,r)}))):(r=Ke.createElement("div")).innerHTML='<a href="https://get.webgl.org/">Enable WebGL</a> to see this content!',r}function xr(e,n){return n.f=e.f,fr(n)}var Cr=r((function(e,n){return new Float64Array([e,n])}));new Float64Array(3),new Float64Array(3),new Float64Array(3);var Pr=t((function(e,n,r){return new Float64Array([e,n,r])})),Mr=r((function(e,n){return new Float64Array([n[0]*e,n[1]*e,n[2]*e])})),Tr=o((function(e,n,r,t){return new Float64Array([e,n,r,t])}));new Float64Array(16),new Float64Array(16),new Float64Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);var yr=D,Lr=x,wr=t((function(e,n,t){var o=t.c,a=t.d,i=r((function(n,r){return f(Lr,n.$?e:i,r,n.a)}));return f(Lr,i,f(Lr,e,n,a),o)})),Sr=t((function(e,n,r){for(;;){if(-2===r.$)return n;var t=r.d,o=e,a=f(e,r.b,r.c,f(Sr,e,n,r.e));e=o,n=a,r=t}})),Fr=function(e){return f(Sr,t((function(e,n,r){return u(yr,L(e,n),r)})),N,e)},Nr=1,$r=2,Dr=0,zr=function(e){return{$:1,a:e}},Hr=r((function(e,n){return{$:3,a:e,b:n}})),_r=r((function(e,n){return{$:0,a:e,b:n}})),Ar=r((function(e,n){return{$:1,a:e,b:n}})),Gr=function(e){return{$:0,a:e}},Rr=function(e){return{$:2,a:e}},kr=function(e){return{$:0,a:e}},Br={$:1},Vr=Ce,Er=Q,Ir=r((function(e,n){return u(J,e,H(n))})),jr=r((function(e,n){return z(u(q,e,n))})),Wr=t((function(e,n,r){for(;;){if(!r.b)return n;var t=r.b,o=e,a=u(e,r.a,n);e=o,n=a,r=t}})),Or=function(e){return f(Wr,r((function(e,n){return n+1})),0,e)},Ur=_,Yr=t((function(e,n,r){for(;;){if(T(e,n)>=1)return r;var t=e,o=n-1,a=u(yr,n,r);e=t,n=o,r=a}})),Xr=r((function(e,n){return f(Yr,e,n,N)})),qr=r((function(e,n){return f(Ur,e,u(Xr,0,Or(n)-1),n)})),Jr=function(e){var n=e.charCodeAt(0);return 55296>n||n>56319?n:1024*(n-55296)+e.charCodeAt(1)-56320+65536},Kr=function(e){return f(Wr,yr,N,e)},Zr=function(e){var n=e.charCodeAt(0);return isNaN(n)?Br:kr(55296>n||n>56319?L(e[0],e.slice(1)):L(e[0]+e[1],e.slice(2)))},Qr=32,et=o((function(e,n,r,t){return{$:0,a:e,b:n,c:r,d:t}})),nt=[],rt=E,tt=r((function(e,n){return O(n)/O(e)})),ot=function(e){return e},at=rt(u(tt,2,Qr)),it=s(et,0,at,nt,nt),ct=p,lt=function(e){return{$:1,a:e}},ut=I,ft=function(e){return e.length},st=r((function(e,n){return T(e,n)>0?e:n})),dt=A,bt=g,vt=r((function(e,n){for(;;){var r=u(bt,Qr,e),t=r.b,o=u(yr,{$:0,a:r.a},n);if(!t.b)return Kr(o);e=t,n=o}})),mt=r((function(e,n){for(;;){var r=rt(n/Qr);if(1===r)return u(bt,Qr,e).a;e=u(vt,e,N),n=r}})),pt=r((function(e,n){if(n.m){var r=n.m*Qr,t=ut(u(tt,Qr,r-1)),o=e?Kr(n.B):n.B,a=u(mt,o,n.m);return s(et,ft(n.r)+r,u(st,5,t*at),a,n.r)}return s(et,ft(n.r),at,nt,n.r)})),gt=a((function(e,n,r,t,o){for(;;){if(0>n)return u(pt,!1,{B:t,m:r/Qr|0,r:o});var a=lt(f(ct,Qr,n,e));e=e,n-=Qr,r=r,t=u(yr,a,t),o=o}})),ht=r((function(e,n){if(e>0){var r=e%Qr;return d(gt,n,e-r-Qr,e,N,f(ct,r,e-r,n))}return it})),xt=function(e){return!e.$},Ct=ce,Pt=ae,Mt=te,Tt=le,yt=ue,Lt=function(e){return{$:0,a:e}},wt=function(e){switch(e.$){case 0:return 0;case 1:return 1;case 2:return 2;default:return 3}},St=nn("div"),Ft=function(e){return{$:1,a:e}},Nt=function(e){return{$:7,a:e}},$t=function(e){return{$:3,a:e}},Dt=t((function(e,n,r){return n(e(r))})),zt=function(e){return e},Ht=function(e){return e.length},_t=K,At=r((function(e,n){return 1>e?n:f(_t,e,Ht(n),n)})),Gt=function(e){for(var n=0,r=e.charCodeAt(0),t=43==r||45==r?1:0,o=t;e.length>o;++o){var a=e.charCodeAt(o);if(48>a||a>57)return Br;n=10*n+a-48}return o==t?Br:kr(45==r?-n:n)},Rt=Z,kt=Te,Bt=kt(0),Vt=o((function(e,n,r,t){if(t.b){var o=t.a,a=t.b;if(a.b){var i=a.a,c=a.b;if(c.b){var l=c.a,d=c.b;if(d.b){var b=d.b;return u(e,o,u(e,i,u(e,l,u(e,d.a,r>500?f(Wr,e,n,Kr(b)):s(Vt,e,n,r+1,b)))))}return u(e,o,u(e,i,u(e,l,n)))}return u(e,o,u(e,i,n))}return u(e,o,n)}return n})),Et=t((function(e,n,r){return s(Vt,e,n,0,r)})),It=r((function(e,n){return f(Et,r((function(n,r){return u(yr,e(n),r)})),N,n)})),jt=Le,Wt=r((function(e,n){return u(jt,(function(n){return kt(e(n))}),n)})),Ot=t((function(e,n,r){return u(jt,(function(n){return u(jt,(function(r){return kt(u(e,n,r))}),r)}),n)})),Ut=function(e){return f(Et,Ot(yr),kt(N),e)},Yt=ke,Xt=r((function(e,n){var r=n;return Fe(u(jt,Yt(e),r))}));Ae.Task=Ge(Bt,t((function(e,n){return u(Wt,(function(){return 0}),Ut(u(It,Xt(e),n)))})),t((function(){return kt(0)})),r((function(e,n){return u(Wt,e,n)})));var qt=Ve("Task"),Jt=r((function(e,n){return qt(u(Wt,e,n))})),Kt=Hn,Zt=r((function(e,n){return{$:0,a:e,b:n}})),Qt=function(e){return{$:6,a:e}},eo=r((function(e,n){return{$:4,a:e,b:n}})),no=r((function(e,n){return{$:2,a:e,b:n}})),ro=Ee,to=Ie,oo=function(e){return{$:1,a:e}},ao=t((function(e,n,r){return{cH:r,ek:n,ep:e}})),io=kt(f(ao,N,Br,0)),co=function(e){return ye((function(n){var r=e.f;2===r.$&&r.c&&r.c(),e.f=null,n(Te(0))}))},lo=ye((function(e){e(Te(Date.now()))})),uo=ye((function(e){var n=An((function(){e(Te(Date.now()))}));return function(){_n(n)}})),fo=Be,so=Fe,bo=t((function(e,n,r){var t=r.ek,o=r.cH,a=L(t,n);return 1===a.a.$?a.b.b?u(jt,(function(e){return u(jt,(function(r){return kt(f(ao,n,kr(e),r))}),lo)}),so(u(jt,fo(e),uo))):io:a.b.b?kt(f(ao,n,t,o)):u(jt,(function(){return io}),co(a.a.a))})),vo=zt,mo=t((function(e,n,r){var t=r.ep,o=r.cH,a=function(r){return u(Yt,e,(0,r.a)(r.$?n-o:vo(n)))};return u(jt,(function(e){return u(jt,(function(){return kt(f(ao,t,kr(e),n))}),Ut(u(It,a,t)))}),so(u(jt,fo(e),uo)))})),po=t((function(e,n,r){return e(n(r))}));Ae["Browser.AnimationManager"]=Ge(io,bo,mo,0,r((function(e,n){return n.$?oo(u(po,e,n.a)):{$:0,a:u(po,e,n.a)}})));var go=Ve("Browser.AnimationManager"),ho=t((function(e,n,r){return{$:0,a:e,b:n,c:r}})),xo=r((function(e,n){return{eb:n,ep:e}})),Co={$:-2},Po=Co,Mo=kt(u(xo,N,Po)),To=function(e){return L(F(e.a?"w_":"d_",e.b),e)},yo=a((function(e,n,r,t,o){return{$:-1,a:e,b:n,c:r,d:t,e:o}})),Lo=a((function(e,n,r,t,o){if(-1!==o.$||o.a){if(-1!==t.$||t.a||-1!==t.d.$||t.d.a)return d(yo,e,n,r,t,o);var a=t.d;return i=t.e,d(yo,0,t.b,t.c,d(yo,1,a.b,a.c,a.d,a.e),d(yo,1,n,r,i,o))}var i,c=o.b,l=o.c,u=o.d,f=o.e;return-1!==t.$||t.a?d(yo,e,c,l,d(yo,0,n,r,t,u),f):d(yo,0,n,r,d(yo,1,t.b,t.c,t.d,i=t.e),d(yo,1,c,l,u,f))})),wo=y,So=t((function(e,n,r){if(-2===r.$)return d(yo,0,e,n,Co,Co);var t=r.a,o=r.b,a=r.c,i=r.d,c=r.e;switch(u(wo,e,o)){case 0:return d(Lo,t,o,a,f(So,e,n,i),c);case 1:return d(yo,t,o,n,i,c);default:return d(Lo,t,o,a,i,f(So,e,n,c))}})),Fo=t((function(e,n,r){var t=f(So,e,n,r);return-1!==t.$||t.a?t:d(yo,1,t.b,t.c,t.d,t.e)})),No=function(e){return f(Wr,r((function(e,n){return f(Fo,e.a,e.b,n)})),Po,e)},$o=t((function(e,n,r){for(;;){if(-2===r.$)return n;var t=r.e,o=e,a=f(e,r.b,r.c,f($o,e,n,r.d));e=o,n=a,r=t}})),Do=i((function(e,n,o,a,i,c){var l=f($o,t((function(r,t,a){e:for(;;){var i=a.a,c=a.b;if(i.b){var l=i.a,u=l.a,d=l.b,b=i.b;if(0>T(u,r)){r=r,t=t,a=L(b,f(e,u,d,c));continue e}return T(u,r)>0?L(i,f(o,r,t,c)):L(b,s(n,u,d,t,c))}return L(i,f(o,r,t,c))}})),L(Fr(a),c),i),u=l.a,d=l.b;return f(Wr,r((function(n,r){return f(e,n.a,n.b,r)})),d,u)})),zo=r((function(e,n){return{dw:n,dD:e}})),Ho=t((function(e,n,r){return u(Wt,(function(e){return L(n,e)}),f(Bn,r.a?kn:Rn,r.b,(function(r){return u(fo,e,u(zo,n,r))})))})),_o=r((function(e,n){return f($o,Fo,n,e)})),Ao=t((function(e,n,r){var a=t((function(n,r,t){var o=t.c;return w(t.a,t.b,u(yr,f(Ho,e,n,r),o))})),i=t((function(e,n,r){var t=r.b,o=r.c;return w(u(yr,n,r.a),t,o)})),c=o((function(e,n,r,t){var o=t.c;return w(t.a,f(Fo,e,n,t.b),o)})),l=u(It,To,n),s=b(Do,i,c,a,r.eb,No(l),w(N,Po,N)),d=s.b,v=s.c;return u(jt,(function(e){return kt(u(xo,l,u(_o,d,No(e))))}),u(jt,(function(){return Ut(v)}),Ut(u(It,co,s.a))))})),Go=t((function(e,n,r){var t=e(n);return t.$?r:u(yr,t.a,r)})),Ro=r((function(e,n){return f(Et,Go(e),N,n)}));Ae["Browser.Events"]=Ge(Mo,Ao,t((function(e,n,r){var t=n.dD,o=n.dw,a=u(Ro,(function(e){var n=e.b.c;return P(e.a,t)?u(Vn,n,o):Br}),r.ep);return u(jt,(function(){return kt(r)}),Ut(u(It,Yt(e),a)))})),0,r((function(e,n){return f(ho,n.a,n.b,u(Tt,e,n.c))})));var ko,Bo,Vo,Eo,Io,jo,Wo,Oo,Uo,Yo,Xo,qo,Jo,Ko,Zo,Qo,ea,na,ra,ta,oa,aa,ia,ca,la,ua,fa,sa,da,ba,va,ma,pa,ga,ha,xa,Ca,Pa=Ve("Browser.Events"),Ma=t((function(e,n,r){return Pa(f(ho,e,n,r))})),Ta=u(Ma,0,"click"),ya=u(Ma,0,"keydown"),La=u(Ma,0,"keyup"),wa=u(Ma,0,"mousedown"),Sa=u(Ma,0,"mousemove"),Fa=u(Ma,0,"mouseup"),Na=ne,$a=re,Da=r((function(e,n){return e(n?1:0)})),za=function(e){var n=void 0!==Ke.hidden?{e1:"hidden",eK:"visibilitychange"}:void 0!==Ke.mozHidden?{e1:"mozHidden",eK:"mozvisibilitychange"}:void 0!==Ke.msHidden?{e1:"msHidden",eK:"msvisibilitychange"}:void 0!==Ke.webkitHidden?{e1:"webkitHidden",eK:"webkitvisibilitychange"}:{e1:"hidden",eK:"visibilitychange"};return f(Ma,0,n.eK,u(Tt,Da(e),u(Pt,"target",u(Pt,n.e1,$a))))},Ha=oe,_a=function(e){return{$:3,b:e}},Aa=Xe("touchCancel",_a(u(Ct,(function(e){return u(Ct,(function(n){return u(Ct,(function(r){return Lt({bl:r,cJ:n,cK:e})}),u(Pt,"identifier",Na))}),u(Pt,"pageX",Mt))}),u(Pt,"pageY",Mt)))),Ga=Xe("touchEnd",_a(u(Ct,(function(e){return u(Ct,(function(n){return u(Ct,(function(r){return Lt({bl:r,cJ:n,cK:e})}),u(Pt,"identifier",Na))}),u(Pt,"pageX",Mt))}),u(Pt,"pageY",Mt)))),Ra=Xe("touchMove",_a(u(Ct,(function(e){return u(Ct,(function(n){return u(Ct,(function(r){return Lt({bl:r,cJ:n,cK:e})}),u(Pt,"identifier",Na))}),u(Pt,"pageX",Mt))}),u(Pt,"pageY",Mt)))),ka=Xe("touchStart",_a(u(Ct,(function(e){return u(Ct,(function(n){return u(Ct,(function(r){return Lt({bl:r,cJ:n,cK:e})}),u(Pt,"identifier",Na))}),u(Pt,"pageX",Mt))}),u(Pt,"pageY",Mt)))),Ba=ro(u(yr,(Ca=u(Dt,dt(.001),(function(e){return{$:6,a:e}})),go(oo(Ca))),u(It,to(Nt),z([(ko=no,f(Ma,1,"resize",u(Pt,"target",f(yt,ko,u(Pt,"innerWidth",Na),u(Pt,"innerHeight",Na))))),La(u(Tt,Zt(!1),u(Pt,"key",Ha))),ya(u(Tt,Zt(!0),u(Pt,"key",Ha))),za($t),Ta(Lt({$:5})),wa(Lt(Qt(!0))),Fa(Lt(Qt(!1))),Sa(f(yt,eo,u(Pt,"pageX",Mt),u(Pt,"pageY",Mt))),ka((function(e){return{$:7,a:e}})),Ra((function(e){return{$:8,a:e}})),Ga((function(e){return{$:9,a:e}})),Aa((function(e){return{$:10,a:e}}))])))),Va={$:1},Ea=function(e){return{$:2,a:e}},Ia=r((function(e,n){return{$:0,a:e,b:n}})),ja=function(e){return e.b.k.a},Wa=function(e){var n=e.b.E;return n.b?kr(u(Ia,e.a,{k:n.a,E:n.b,q:F(e.b.q,z([e.b.k]))})):Br},Oa=r((function(e,n){return S(n,{cg:e})})),Ua=r((function(e,n){return S(n,n.I.cg?{I:u(Oa,!1,n.I),a4:n.a4+e}:{a4:n.a4+e})})),Ya=r((function(e,n){return n.$?e:n.a})),Xa=t((function(e,n,r){var t=r.a,o=r.b;switch(t.$){case 1:return r;case 2:var a=t.a.c5;return(T(a+n,ja(r).a4)>0?u(Dt,Wa,Ya(u(Ia,Va,o))):zt)(u(Ia,Ea({c5:a+n}),o));default:var i=o.k,c=i.b,l=u(Ua,n,i.a);return u(Ia,t,{k:L(l,u(e,l,c)),E:N,q:F(o.q,z([o.k]))})}})),qa=r((function(e,n){e:for(;;){if(e>0){if(n.b){e-=1,n=n.b;continue e}return n}return n}})),Ja=t((function(e,n,r){e:for(;;){if(e>0){if(n.b){var t=n.a;e-=1,n=n.b,r=u(yr,t,r);continue e}return r}return r}})),Ka=r((function(e,n){return Kr(f(Ja,e,n,N))})),Za=t((function(e,n,r){if(n>0){var t=L(n,r);e:for(;;){n:for(;;){if(!t.b.b)return r;if(!t.b.b.b){if(1===t.a)break e;break n}switch(t.a){case 1:break e;case 2:var o=t.b;return z([o.a,o.b.a]);case 3:if(t.b.b.b.b){var a=t.b,i=a.b;return z([a.a,i.a,i.b.a])}break n;default:if(t.b.b.b.b&&t.b.b.b.b.b){var c=t.b,l=c.b,s=l.b,d=s.b,b=d.b;return u(yr,c.a,u(yr,l.a,u(yr,s.a,u(yr,d.a,e>1e3?u(Ka,n-4,b):f(Za,e+1,n-4,b)))))}break n}}return r}return z([t.b.a])}return N})),Qa=r((function(e,n){return f(Za,0,e,n)})),ei=r((function(e,n){var r=n.b.E,t=F(n.b.q,F(z([n.b.k]),r)),o=u(Qa,e,t),a=u(qa,e,t);if(a.b)return u(Ia,Va,{k:a.a,E:a.b,q:o});var i=Kr(o);return i.b?u(Ia,Va,{k:i.a,E:N,q:Kr(i.b)}):n})),ni={$:0},ri=r((function(e,n){switch(e.$){case 1:return function(e){var n=e.b.q,r=e.b.E;return n.b?u(Ia,Va,{k:n.a,E:F(n.b,F(z([e.b.k]),r)),q:N}):e}(n);case 2:return u(Ya,n,function(e){var n=e.b.k,r=e.b.E,t=Kr(e.b.q);if(t.b){var o=t.b;return kr(u(Ia,Va,{k:t.a,E:u(yr,n,r),q:Kr(o)}))}return Br}(n));case 3:return u(Ia,Va,n.b);case 4:return function(e){return u(Ia,ni,e.b)}(n);case 5:return function(e){var n=e.b;return u(Ia,Ea({c5:ja(e).a4}),n)}(n);case 6:return u(Ya,n,Wa(n));case 7:return function(e){var n=e.b.q,r=e.b.k,t=Kr(e.b.E);if(t.b){var o=t.b;return u(Ia,Va,{k:t.a,E:N,q:F(n,F(z([r]),Kr(o)))})}return e}(n);default:return u(ei,e.a,n)}})),ti=r((function(e,n){var r=n.b;return L(e(n.a),r)})),oi=o((function(e,n,r,t){return{cg:t,aS:r,bF:e,bG:n}})),ai=Po,ii={cb:!1,aS:!1,cm:!1,O:ai,ai:!1,a1:!1,c1:!1,c2:!1,b8:!1},ci=r((function(e,n){return S(n,{aS:e})})),li=t((function(e,n,r){return S(r,{bF:e,bG:n})})),ui=function(e){if(-1===e.$&&-1===e.d.$&&-1===e.e.$){if(-1!==e.e.d.$||e.e.d.a){var n=e.d,r=e.e;return i=r.b,c=r.c,t=r.d,f=r.e,d(yo,1,e.b,e.c,d(yo,0,n.b,n.c,n.d,n.e),d(yo,0,i,c,t,f))}var t,o=e.d,a=e.e,i=a.b,c=a.c,l=(t=a.d).d,u=t.e,f=a.e;return d(yo,0,t.b,t.c,d(yo,1,e.b,e.c,d(yo,0,o.b,o.c,o.d,o.e),l),d(yo,1,i,c,u,f))}return e},fi=function(e){if(-1===e.$&&-1===e.d.$&&-1===e.e.$){if(-1!==e.d.d.$||e.d.d.a){var n=e.d,r=e.e;return u=r.b,f=r.c,s=r.d,b=r.e,d(yo,1,t=e.b,o=e.c,d(yo,0,n.b,n.c,n.d,c=n.e),d(yo,0,u,f,s,b))}var t=e.b,o=e.c,a=e.d,i=a.d,c=a.e,l=e.e,u=l.b,f=l.c,s=l.d,b=l.e;return d(yo,0,a.b,a.c,d(yo,1,i.b,i.c,i.d,i.e),d(yo,1,t,o,c,d(yo,0,u,f,s,b)))}return e},si=c((function(e,n,r,t,o,a,i){if(-1!==a.$||a.a){e:for(;;){if(-1===i.$&&1===i.a){if(-1===i.d.$){if(1===i.d.a)return fi(n);break e}return fi(n)}break e}return n}return d(yo,r,a.b,a.c,a.d,d(yo,0,t,o,a.e,i))})),di=function(e){if(-1===e.$&&-1===e.d.$){var n=e.a,r=e.b,t=e.c,o=e.d,a=o.d,i=e.e;if(1===o.a){if(-1!==a.$||a.a){var c=ui(e);if(-1===c.$){var l=c.e;return d(Lo,c.a,c.b,c.c,di(c.d),l)}return Co}return d(yo,n,r,t,di(o),i)}return d(yo,n,r,t,di(o),i)}return Co},bi=r((function(e,n){if(-2===n.$)return Co;var r=n.a,t=n.b,o=n.c,a=n.d,i=n.e;if(0>T(e,t)){if(-1===a.$&&1===a.a){var c=a.d;if(-1!==c.$||c.a){var l=ui(n);if(-1===l.$){var f=l.e;return d(Lo,l.a,l.b,l.c,u(bi,e,l.d),f)}return Co}return d(yo,r,t,o,u(bi,e,a),i)}return d(yo,r,t,o,u(bi,e,a),i)}return u(vi,e,v(si,e,n,r,t,o,a,i))})),vi=r((function(e,n){if(-1===n.$){var r=n.a,t=n.b,o=n.c,a=n.d,i=n.e;if(P(e,t)){var c=function(e){for(;;){if(-1!==e.$||-1!==e.d.$)return e;e=e.d}}(i);return-1===c.$?d(Lo,r,c.b,c.c,a,di(i)):Co}return d(Lo,r,t,o,a,u(bi,e,i))}return Co})),mi=r((function(e,n){var r=u(bi,e,n);return-1!==r.$||r.a?r:d(yo,1,r.b,r.c,r.d,r.e)})),pi=r((function(e,n){return{dl:-n/2,co:n,ai:-e/2,a1:e/2,bA:n/2,dc:e}})),gi=r((function(e,n){return{S:n,X:e}})),hi=f(yt,r((function(e,n){return L(e,n)})),u(Pt,"A1",Ha),u(Pt,"A2",Ha)),xi=fe,Ci=s(xi,t((function(e,n,r){return w(e,n,r)})),u(Pt,"A1",Mt),u(Pt,"A2",Mt),u(Pt,"A3",Mt)),Pi=f(yt,r((function(e,n){return L(e,n)})),u(Pt,"A1",Ha),u(Pt,"A2",Ci)),Mi=f(yt,gi,u(Pt,"floats",_a(Pi)),u(Pt,"colors",_a(hi))),Ti=se,yi=r((function(e,n){return{S:n,aF:"",X:e,as:""}})),Li=u(yi,N,N),wi=r((function(e,n){return n.$?Br:e(n.a)})),Si=r((function(e,n){return n.$?zr(n.a):e(n.a)})),Fi=o((function(e,n,r,t){return{e3:n,fb:e,fh:r,fu:t}})),Ni=In,$i=r((function(e,n){return n.$?zr(e):Gr(n.a)})),Di=En,zi=function(e){return e.b?kr(e.a):Br},Hi=r((function(e,n){return n.$?Br:kr(e(n.a))})),_i=r((function(e,n){return n.$?zr(n.a):Gr(e(n.a))})),Ai=r((function(e,n){return Jr(n)-Jr(e)})),Gi=t((function(e,n,r){var t=Jr(r);return 1>T(Jr(e),t)&&1>T(t,Jr(n))})),Ri=r((function(e,n){var r=f(Gi,"0","9",n)?Gr(u(Ai,"0",n)):f(Gi,"a","z",n)?Gr(10+u(Ai,"a",n)):f(Gi,"A","Z",n)?Gr(10+u(Ai,"A",n)):zr({$:0,a:n});return u(Si,(function(r){return 0>T(r,e)?Gr(r):zr({$:1,a:n})}),r)})),ki=r((function(e,n){var r=Zr(n);if(1===r.$)return Gr(0);var t=r.a,o=t.b;return u(Si,(function(n){return u(Si,(function(r){return Gr(n+r*e)}),u(ki,e,o))}),u(Ri,e,t.a))})),Bi=function(e){for(var n=e.length,r=Array(n),t=0;n>t;){var o=e.charCodeAt(t);55296>o||o>56319?(r[n-t]=e[t],t++):(r[n-t]=e[t+1],r[n-++t]=e[t-1],t++)}return r.join("")},Vi=r((function(e,n){return 2>e||e>36?zr({$:2,a:e}):u(ki,e,Bi(n))})),Ei=Vi(16),Ii=o((function(e,n,r,t){return{$:0,a:e,b:n,c:r,d:t}})),ji=t((function(e,n,r){return s(Ii,e,n,r,1)})),Wi=o((function(e,n,r,t){return s(Ii,e,n,r,t)})),Oi=G,Ui=j,Yi=r((function(e,n){var r=u(Oi,10,e);return Ui(n*r)/r})),Xi=X,qi=function(e){return f(Xi,yr,N,e)},Ji=(Bo=function(e){var n=qi(e);if(n.b&&!n.b.b){var r=n.a;return H(z([r,r])).join("")}return e},u(Dt,(function(e){return e.toLowerCase()}),u(Dt,(function(e){return u(Hi,(function(n){return f(Ni,1,n,e)}),u(Di,{eH:!1,fd:!1},"^#?(?:(?:([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2}))|(?:([a-f\\d])([a-f\\d])([a-f\\d]))|(?:([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2}))|(?:([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d])))$"))}),u(Dt,wi(zi),u(Dt,Hi((function(e){return e.fu})),u(Dt,Hi(Ro(zt)),u(Dt,$i("Parsing hex regex failed"),Si((function(e){var n=u(It,u(Dt,Bo,u(Dt,Ei,_i(ot))),e);e:for(;;){if(n.b&&!n.a.$&&n.b.b&&!n.b.a.$&&n.b.b.b&&!n.b.b.a.$){if(n.b.b.b.b){if(n.b.b.b.a.$||n.b.b.b.b.b)break e;var r=n.b,t=r.b;return Gr(s(Wi,n.a.a/255,r.a.a/255,t.a.a/255,u(Yi,2,t.b.a.a/255)))}var o=n.b;return Gr(f(ji,n.a.a/255,o.a.a/255,o.b.a.a/255))}break e}return zr("Parsing ints from hex failed")}))))))))),Ki=r((function(e,n){return L(n.a,e(n.b))})),Zi=s(Ii,1,1,1,1),Qi=r((function(e,n){return n.$?e:n.a})),ec=u(Dt,Ti(Mi),u(Dt,_i((function(e){return{S:u(It,Ki(u(Dt,Ji,Qi(Zi))),e.S),aF:"",X:e.X,as:""}})),Qi(Li))),nc=function(e){return f(Wr,r((function(e,n){return f(Me,e.a,e.b,n)})),{},e)},rc=Pe,tc=function(e){var n=e.b;return nc(z([L("A1",rc(e.a)),L("A2",rc(n))]))},oc=Pe,ac=function(e){var n=e.b,r=e.c;return nc(z([L("A1",oc(e.a)),L("A2",oc(n)),L("A3",oc(r))]))},ic=function(e){var n=e.b;return nc(z([L("A1",rc(e.a)),L("A2",ac(n))]))},cc=r((function(e,n){return f(Wr,function(e){return r((function(n,r){return r.push(e(n)),r}))}(e),[],n)})),lc=Y,uc=function(e){return u(lc,e,"")},fc=t((function(e,n,r){return e>0?f(fc,e>>1,F(n,n),1&e?F(r,n):r):r})),sc=r((function(e,n){return f(fc,e,n,"")})),dc=t((function(e,n,r){return F(u(sc,e-Ht(r),uc(n)),r)})),bc=function(e){return 0>e||e>1114111?"�":e>65535?String.fromCharCode(Math.floor((e-=65536)/1024)+55296,e%1024+56320):String.fromCharCode(e)},vc=R,mc=function(e){var n=function(e){return 10>e?Er(e):uc(bc(87+e))};return 16>e?n(e):F(mc(e/16|0),n(u(vc,16,e)))},pc=u(Dt,mc,u(dc,2,"0")),gc=function(e){return{aQ:e.d,cf:e.c,cn:e.b,cW:e.a}},hc=function(e){var n=gc(e),r=n.cW,t=n.cn,o=n.cf;return u(Ir,"",u(yr,"#",u(It,u(Dt,Ui,pc),z([255*r,255*t,255*o]))))},xc=u(Dt,(function(e){return{S:u(It,Ki(hc),e.S),X:e.X}}),u(Dt,(function(e){return nc(z([L("floats",u(cc,ic,e.X)),L("colors",u(cc,tc,e.S))]))}),Vr(0))),Cc=function(e){return 0>e?-e:e},Pc=function(e){if(0===e.length||/[\sxbo]/.test(e))return Br;var n=+e;return n==n?kr(n):Br},Mc=t((function(e,n,r){return u(Ya,NaN,Pc(u(e,n,r)))})),Tc=function(e){return!e},yc=r((function(e,n){for(;;){if(!n.b)return!1;var r=n.b;if(e(n.a))return!0;e=e,n=r}})),Lc=r((function(e,n){var r=u(yc,(function(e){return"0"!==e&&"."!==e}),qi(n));return F(e&&r?"-":"",n)})),wc=Q,Sc=function(e){var n=e.a,r=e.b;if("9"===n){var t=Zr(r);return 1===t.$?"01":u(lc,"0",Sc(t.a))}var o=Jr(n);return o>=48&&57>o?u(lc,bc(o+1),r):"0"},Fc=function(e){return e===1/0||e===-1/0},Nc=U,$c=t((function(e,n,r){return F(r,u(sc,e-Ht(r),uc(n)))})),Dc=function(e){var n=u(jr,".",e);return n.b?L(n.a,n.b.b?n.b.a:"0"):L("0","0")},zc=t((function(e,n,r){if(Fc(r)||Nc(r))return wc(r);var t=0>r,o=Dc(function(e){var n=u(jr,"e",wc(Cc(e)));if(n.b){if(n.b.b){var r=n.a,t=n.b.a,o=u(Ya,0,Gt(u(Rt,"+",t)?u(At,1,t):t)),a=Dc(r),i=F(a.a,a.b),c=0>o?u(Ya,"0",u(Hi,(function(e){return e.a+"."+e.b}),u(Hi,ti(uc),Zr(F(u(sc,Cc(o),"0"),i))))):f($c,o+1,"0",i);return F(0>e?"-":"",c)}return F(0>e?"-":"",r=n.a)}return""}(Cc(r))),a=o.a,i=o.b,c=Ht(a)+n,l=F(u(sc,1-c,"0"),f($c,c,"0",F(a,i))),s=Ht(l),d=u(st,1,c),b=u(e,t,f(_t,d,s,l)),v=f(_t,0,d,l),m=b?Bi(u(Ya,"1",u(Hi,Sc,Zr(Bi(v))))):v,p=Ht(m),g="0"===m?m:n>0?0>T(n,Ht(i))?f(_t,0,p-n,m)+"."+f(_t,p-n,p,m):F(a+".",f($c,n,"0",i)):F(m,u(sc,Cc(n),"0"));return u(Lc,t,g)})),Hc=zc(r((function(e,n){var r,t=Zr(n);return 1!==t.$&&("5"===t.a.a?""!==t.a.b||!e:(r=Jr(t.a.a))>53&&e||r>=53&&!e)}))),_c=Mc(Hc),Ac=t((function(e,n,r){var t=u(tt,10,Cc(n-e));return u(_c,0>t?3:1>t?2:2>t?1:0,r)})),Gc=r((function(e,n){switch(e.$){case 2:var r=ec(n.as);return S(r,{aF:r.aF,as:r.as});case 3:return S(n,{as:e.a});case 4:return S(n,{aF:xc(n)});case 0:var t=e.a,o=e.b;return S(n,{X:u(It,(function(e){var n=e.a,r=e.b,a=r.a,i=r.c;return P(n,t)?L(n,w(a,f(Ac,a,i,o),i)):e}),n.X)});default:return t=e.a,o=e.b,S(n,{S:u(It,(function(e){var n=e.a;return P(n,t)?L(n,o):e}),n.S)})}})),Rc=r((function(e,n){return f(Fo,e,0,n)})),kc=r((function(e,n){return u(mi,e,n)})),Bc=t((function(e,n,r){var t=u(e?Rc:kc,n,r.O);switch(n){case" ":return S(r,{O:t,c2:e});case"Enter":return S(r,{cm:e,O:t});case"Shift":return S(r,{O:t,c1:e});case"Backspace":return S(r,{cb:e,O:t});case"ArrowUp":return S(r,{O:t,b8:e});case"ArrowDown":return S(r,{aS:e,O:t});case"ArrowLeft":return S(r,{O:t,ai:e});case"ArrowRight":return S(r,{O:t,a1:e});default:return S(r,{O:t})}})),Vc=r((function(e,n){switch(e.$){case 1:var r=e.a.fF;return S(n,{ad:u(pi,r.dc,r.co)});case 2:return S(n,{ad:u(pi,e.a,e.b)});case 3:return S(n,{bm:ii,I:s(oi,n.I.bF,n.I.bG,!1,!1)});case 0:return S(n,{bm:f(Bc,e.a,e.b,n.bm)});case 4:return S(n,{I:f(li,n.ad.ai+e.a,n.ad.bA-e.b,n.I)});case 5:return S(n,{I:u(Oa,!0,n.I)});case 6:return S(n,{I:u(ci,e.a,n.I)});case 7:case 8:return S(n,{ae:f(Wr,(function(e){return u(Fo,e.bl,{bF:n.ad.ai+e.cJ,bG:n.ad.bA-e.cK})}),n.ae,e.a)});case 9:case 10:return S(n,{ae:f(Wr,(function(e){return mi(e.bl)}),n.ae,e.a)});default:return S(n,{aR:u(Gc,e.a,n.aR)})}})),Ec=r((function(e,n){var r=n.b;return u(Ia,n.a,S(r,{k:u(ti,Vc(e),r.k)}))})),Ic=t((function(e,n,r){var t=r.b,o=t.k;return u(Ia,r.a,S(t,{k:u(Ki,u(e,o.a,n),o)}))})),jc=o((function(e,n,r,t){switch(r.$){case 0:return t;case 1:return S(t,{a8:r.a});case 2:return S(t,{bf:!1});case 3:return S(t,{bf:!0});case 4:return S(t,{R:f(Ic,n,r.a,t.R)});case 5:return S(t,{R:u(ri,r.a,t.R)});case 7:return S(t,{R:u(Ec,r.a,t.R)});default:return S(t,{R:f(Xa,e,r.a,t.R)})}})),Wc=(xa=function(){return{em:(e=Rn.body,n=Rn.documentElement,{dc:Math.max(e.scrollWidth,e.offsetWidth,n.scrollWidth,n.offsetWidth,n.clientWidth),co:Math.max(e.scrollHeight,e.offsetHeight,n.scrollHeight,n.offsetHeight,n.clientHeight)}),fF:{bF:kn.pageXOffset,bG:kn.pageYOffset,dc:Rn.documentElement.clientWidth,co:Rn.documentElement.clientHeight}};var e,n},ye((function(e){An((function(){e(Te(xa()))}))}))),Oc=r((function(e,n){return{aR:n,ck:e.ck,bm:ii,I:s(oi,0,0,!1,!1),ad:u(pi,600,600),a4:0,ae:Po}})),Uc=r((function(e,n){return u(Ia,ni,{k:L(e,n(e)),E:N,q:N})})),Yc=Ee,Xc=Yc(N),qc=function(e){return{$:11,a:e}},Jc=function(e){return{$:4,a:e}},Kc=function(e){return{$:5,a:e}},Zc={$:2},Qc={$:0},el=function(e){return{$:1,a:e}},nl={$:3},rl=r((function(e){return e})),tl=nn("button"),ol=function(e){return e?"Level Editor":"Configurations"},al=function(e){return u(Ya,0,zi(u(Ro,(function(n){return P(ol(n),e)?kr(n):Br}),z([0,1]))))},il=tn,cl=il,ll=on,ul=r((function(e,n){return u(ll,e,{$:0,a:n})})),fl=r((function(e,n){return f(Et,Pt,n,e)})),sl=u(fl,z(["target","value"]),Ha),dl=function(e){return u(ul,"click",Lt(e))},bl=nn("option"),vl=nn("select"),ml=an,pl=ml,gl=Qe,hl=gl,xl=r((function(e,n){return u(cn,e,rc(n))})),Cl=xl("value"),Pl=r((function(e,n){return{$:1,a:e,b:n}})),Ml=r((function(e,n){return{$:0,a:e,b:n}})),Tl=s(Ii,0,0,0,1),yl=u(tl,z([u(pl,"cursor","pointer"),dl({$:4})]),z([hl("Export Configurations as json")])),Ll=nn("h3"),wl=nn("p"),Sl=Pe,Fl=r((function(e,n){return u(cn,e,Sl(n))})),Nl=Fl("readOnly"),$l=nn("textarea"),Dl=function(e){return u(St,N,z([u($l,z([Nl(!0)]),z([hl(e.aF)]))]))},zl=function(e){return u(St,N,z([u(Ll,N,z([hl("Export Configurations")])),u(wl,N,z([yl])),u(wl,N,z([Dl(e)]))]))},Hl=xl("htmlFor"),_l=nn("hr"),Al=xl("id"),Gl=u(tl,z([u(pl,"cursor","pointer"),dl({$:2})]),z([hl("Import Configurations")])),Rl=function(e){return{$:3,a:e}},kl=function(e){return L(e,!0)},Bl=r((function(e,n){return u(ll,e,{$:1,a:n})})),Vl=function(e){return u(Bl,"input",u(Tt,kl,u(Tt,e,sl)))},El=function(e){return u(St,N,z([u($l,z([Vl(Rl)]),z([hl(e.as)]))]))},Il=function(e){return u(St,N,z([u(Ll,N,z([hl("Import Configurations")])),u(wl,N,z([El(e)])),u(wl,N,z([Gl]))]))},jl=nn("input"),Wl=nn("label"),Ol=xl("max"),Ul=xl("min"),Yl=xl("name"),Xl=nn("span"),ql=xl("type"),Jl=function(e){return{$:0,a:e}},Kl=function(e){return Or(e.b.q)},Zl=function(e){return u(jl,z([u(pl,"position","absolute"),ql("range"),u(pl,"width","100%"),Ul("0"),Ol(Er((n=e,r=n.b.E,Or(n.b.q)+1+Or(r)-1))),Cl(Er(Kl(e))),Vl(u(Dt,Gt,u(Dt,Ya(0),Jl)))]),N);var n,r},Ql=function(e){var n=e.b.k,r=e.b.E,t=u(Ya,n,zi(e.b.q)).a.a4,o=u(Ya,n,zi(Kr(r))).a.a4-t,a=ut(o/1);return u(St,z([u(pl,"position","absolute"),u(pl,"width","100%"),u(pl,"height","20px")]),u(It,(function(e){return u(St,z([u(pl,"position","absolute"),u(pl,"background-color","yellow"),u(pl,"width","1px"),u(pl,"height","20px"),u(pl,"left",wc(100*e*1/o)+"%")]),N)}),u(Xr,0,a)))},eu={$:1},nu={$:7},ru={$:6},tu={$:2},ou={$:3},au={$:5},iu={$:4},cu=r((function(e,n){return u(tl,z([u(pl,"display","inline-block"),u(pl,"width","30px"),u(pl,"height","30px"),u(pl,"margin","2px"),u(pl,"padding","0px"),u(pl,"top","0px"),u(pl,"font-size","20px"),dl(e)]),z([hl(n)]))})),lu=function(e){return u(St,z([u(pl,"width","100%")]),z([(n=e,r=n.a,u(St,N,z([u(cu,eu,"⏮️"),u(cu,tu,"◀️"),1===r.$?u(cu,au,"▶️"):u(cu,ou,"⏸️"),r.$?u(cu,iu,"⏺️"):u(cu,ou,"⏹"),u(cu,ru,"⏯️"),u(cu,nu,"⏭️")]))),u(St,N,z([Ql(e),Zl(e)]))]));var n,r},uu=t((function(e,n,t){var o,a,i,c,l=t.R.b.k.b,f=u(St,z([u(pl,"margin-left","0px")]),z([u(vl,z([(o=u(Dt,al,el),u(ul,"change",u(Tt,o,sl))),Cl(ol(t.a8)),u(pl,"width","200px"),u(pl,"height","40px"),u(pl,"font-size","20px")]),u(It,(function(e){return u(bl,z([Cl(ol(e))]),z([hl(ol(e))]))}),z([0,1])))])),s=r((function(e,n){return u(tl,z([u(pl,"font-size","30px"),u(pl,"width","40px"),u(pl,"height","40px"),dl(e)]),z([hl(n)]))})),d=ja(t.R),b=t.a8?u(cl,Jc,u(n,d,l)):u(St,N,z([u(cl,Kc,lu(t.R)),u(cl,u(Dt,qc,Nt),(a=d.aR,i=function(e){var n=e.a,r=e.b,t=r.a,o=r.b,a=r.c;return u(St,z([u(pl,"margin-top","15px")]),z([u(St,N,z([u(Wl,z([Hl(n)]),z([hl(n),hl(": "),u(Xl,z([u(pl,"font-family","monospace"),u(pl,"font-weight","bold")]),z([hl(wc(o))]))]))])),u(jl,z([ql("range"),Al(n),Yl(n),Ul(wc(t)),Ol(wc(a)),Vl((function(e){return u(Ml,n,u(Ya,0,Pc(e)))})),u(xl,"step","any"),u(pl,"width","200px"),Cl(wc(o))]),N)]))},c=function(e){var n=e.a,r=e.b;return u(St,z([u(pl,"margin-top","15px")]),z([u(St,N,z([u(Wl,z([Hl(n)]),z([hl(n)]))])),u(jl,z([ql("color"),u(pl,"width","200px"),u(pl,"height","30px"),Al(n),Yl(n),Vl((function(e){return u(Pl,n,u(Qi,Tl,Ji(e)))})),Cl(hc(r))]),N)]))},u(St,z([u(pl,"margin-left","20px"),u(pl,"height","100%"),u(pl,"overflow","scroll")]),z([u(St,N,u(It,i,a.X)),u(St,N,u(It,c,a.S)),u(_l,N,N),zl(a),Il(a)]))))])),v=u(St,z([u(pl,"position","fixed"),u(pl,"top","0px"),u(pl,"left","0px"),u(pl,"width",wc(250)+"px"),u(pl,"height",wc(d.ad.co)+"px"),u(pl,"font-family",'-apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif'),u(pl,"font-size","16px")]),z(t.bf?[u(St,z([u(pl,"height","100px")]),z([u(s,Zc,"✕"),f])),u(St,z([u(pl,"height",wc(d.ad.co-100)+"px")]),z([b]))]:[u(s,nl,"≡")])),m=u(St,z([u(pl,"position","fixed"),u(pl,"top","0px"),u(pl,"left","0px"),u(pl,"width",wc(d.ad.dc)+"px"),u(pl,"height",wc(d.ad.co)+"px"),u(pl,"font-size","16px")]),z([u(cl,rl(Qc),u(e,d,l))]));return u(St,z([u(pl,"touch-action","none"),u(pl,"user-select","none")]),z([m,v]))})),fu=i((function(e,n,t,o,a,i){return Kt({e4:function(e){return L({a8:0,bf:!1,R:u(Uc,u(Oc,e,t),o),db:0},u(Jt,u(Dt,Ft,Nt),Wc))},fv:function(e){return 1===e.db?u(to,Nt,za($t)):Ba},fC:r((function(e,r){return L(s(jc,n,i,e,r),Xc)})),fE:u(uu,e,a)})})),su=o((function(e,n,o,a){return b(fu,e,n,o,a,r((function(){return u(St,N,N)})),t((function(e,n,r){return r})))})),du=yi,bu=du,vu=u(bu,z([L("a",w(0,1,3)),L("lux",w(2,5,5)),L("intensity above",w(0,60,300)),L("intensity below",w(0,290,300))]),N),mu=r((function(e,n){return n})),pu=3.141592653589793,gu=function(e){return pu*(e/180)},hu=W,xu=r((function(e,n){var r=n.bH-e.bH,t=n.bG-e.bG,o=n.bF-e.bF,a=u(st,Cc(o),u(st,Cc(t),Cc(r)));if(a){var i=r/a,c=t/a,l=o/a,f=hu(l*l+c*c+i*i);return kr({bF:l/f,bG:c/f,bH:i/f})}return Br})),Cu=r((function(e,n){return{bF:n.bG*e.bH-n.bH*e.bG,bG:n.bH*e.bF-n.bF*e.bH,bH:n.bF*e.bG-n.bG*e.bF}})),Pu=function(e){var n=e,r=u(st,Cc(n.bF),u(st,Cc(n.bG),Cc(n.bH)));if(r){var t=n.bH/r,o=n.bG/r,a=n.bF/r,i=hu(a*a+o*o+t*t);return kr({bF:a/i,bG:o/i,bH:t/i})}return Br},Mu=r((function(e,n){return{bF:n.bF-e.bF,bG:n.bG-e.bG,bH:n.bH-e.bH}})),Tu=r((function(e,n){return n.bF*e.bF+n.bG*e.bG+n.bH*e.bH})),yu=r((function(e,n){return T(n,e)>0})),Lu=r((function(e,n){return 0>T(n,e)})),wu=r((function(e,n){return{bF:n.bF-e.bF,bG:n.bG-e.bG,bH:n.bH-e.bH}})),Su=r((function(e,n){var r=n.bF*e.bF+n.bG*e.bG+n.bH*e.bH;return{bF:e.bF*r,bG:e.bG*r,bH:e.bH*r}})),Fu={bF:0,bG:0,bH:0},Nu=t((function(e,n,r){return u(wi,(function(t){return u(wi,(function(o){var a,i=u(Cu,n,e),c=u(Tu,r,i),l=u(yu,0,c)?i:u(Lu,0,c)?{bF:-(a=i).bF,bG:-a.bG,bH:-a.bH}:Fu;return u(Hi,(function(e){return w(t,o,e)}),Pu(l))}),Pu(u(wu,u(Su,t,n),n)))}),Pu(e))})),$u=function(e){var n=function(e){var n=e,r=Cc(n.bH),t=Cc(n.bG),o=Cc(n.bF);if(1>T(o,t)){if(1>T(o,r)){var a=hu(n.bH*n.bH+n.bG*n.bG);return{bF:0,bG:-n.bH/a,bH:n.bG/a}}return a=hu(n.bG*n.bG+n.bF*n.bF),{bF:-n.bG/a,bG:n.bF/a,bH:0}}return 1>T(t,r)?(a=hu(n.bH*n.bH+n.bF*n.bF),{bF:n.bH/a,bG:0,bH:-n.bF/a}):(a=hu(n.bF*n.bF+n.bG*n.bG),{bF:-n.bG/a,bG:n.bF/a,bH:0})}(e);return L(n,{bF:e.bG*n.bH-e.bH*n.bG,bG:e.bH*n.bF-e.bF*n.bH,bH:e.bF*n.bG-e.bG*n.bF})},Du=r((function(e,n){var r=$u(e);return{cI:n,de:r.a,df:r.b,dg:e}})),zu=function(e){var n=u(Mu,e.eX,e.eU),r=e.fB,t=f(Nu,n,r,u(Cu,n,r));if(t.$){var o=Pu(n);if(o.$){var a=$u(e.fB);return{cI:e.eU,de:a.b,df:e.fB,dg:a.a}}return u(Du,o.a,e.eU)}var i=t.a;return{cI:e.eU,de:i.c,df:i.b,dg:i.a}},Hu={bF:0,bG:0,bH:0},_u=function(e){return Cc(e)},Au=function(e){return.5*e},Gu=V,Ru={bF:0,bG:1,bH:0},ku=k,Bu=r((function(e,n){return(n-ut(n/e)*e)/e})),Vu=o((function(e,n,r,t){return e+(n-e)*(1+ku(6.283185307179586*u(Bu,r,t)))/2})),Eu=function(e){return a=(o={eU:{bF:10,bG:s(Vu,-20,20,20,e.a4),bH:60},eX:{bF:0,bG:0,bH:0},fB:{bF:0,bG:1,bH:0}}).eX,i=o.eU,c=o.fB,n={ev:gu(40),da:zu({eU:i,eX:a,fB:u(Ya,Ru,u(xu,Hu,c))})},t=Au(_u(n.ev)),{cV:(r=Gu(t),{$:0,a:r}),da:n.da};var n,r,t,o,a,i,c},Iu=t((function(e,n,r){return 0>T(r,e)?e:T(r,n)>0?n:r})),ju=function(e){return{$:0,a:e}},Wu={$:3},Ou=o((function(e,n,r,t){return{$:4,a:e,b:n,c:r,d:t}})),Uu=Ou,Yu=r((function(e,n){return n.b?f(Et,yr,n,e):e})),Xu=function(e){return f(Et,Yu,N,e)},qu=r((function(e,n){return Xu(u(It,e,n))})),Ju=function(e){return u(ln,"height",Er(e))},Ku=function(e){return rn(function(e){return"script"==e?"p":e}(e))},Zu=function(e){return{$:2,a:e}},Qu=r((function(e,n){switch(n.$){case 0:return u(dr,e,n);case 1:return u(br,e,n);case 2:return u(vr,e,n);case 3:return u(mr,e,n);case 4:return u(pr,e,n);default:return u(gr,e,n)}})),ef=r((function(e,n){switch(n.$){case 0:return u(Xn,e,n);case 1:return u(qn,e,n);case 2:return u(Jn,e,n);case 3:return u(Kn,e,n);case 4:return u(Zn,e,n);case 5:return u(Qn,e,n);case 6:return u(er,e,n);case 7:return u(nr,e,n);default:return function(e){var n=e.sampleAlphaToCoverage;n.toggle=e.toggle,n.enabled||(e.gl.enable(e.gl.SAMPLE_ALPHA_TO_COVERAGE),n.enabled=!0)}(e)}})),nf=t((function(e,n,r){return f(sr,e,n,r)})),rf=Tr,tf=s(rf,1,1,1,1),of=t((function(e,n,r){return u(It,(function(e){return u(e,n,r)}),e)})),af=t((function(e,n,r){return{$:0,a:e,b:n,c:r}})),cf=r((function(e,n){var r=n.bF,t=n.bG;return f(af,e*r/t,e,e*(1-r-t)/t)})),lf=Pr,uf=r((function(e,n){return f(lf,3.2406*(t=(r=u(cf,e,n)).a)-1.5372*(o=r.b)-.4986*(a=r.c),-.9689*t+1.8758*o+.0415*a,.0557*t-.204*o+1.057*a);var r,t,o,a})),ff=r((function(e,n){return{dC:P(e.dC,n.dC),s:e.s*n.s+e.t*n.v+e.u*n.y,t:e.s*n.t+e.t*n.w+e.u*n.z,u:e.s*n.u+e.t*n.x+e.u*n.A,v:e.v*n.s+e.w*n.v+e.x*n.y,w:e.v*n.t+e.w*n.w+e.x*n.z,x:e.v*n.u+e.w*n.x+e.x*n.A,y:e.y*n.s+e.z*n.v+e.A*n.y,z:e.y*n.t+e.z*n.w+e.A*n.z,A:e.y*n.u+e.z*n.x+e.A*n.A,J:n.J+(e.J*n.s+e.K*n.v+e.L*n.y)*n.b6,K:n.K+(e.J*n.t+e.K*n.w+e.L*n.z)*n.b6,L:n.L+(e.J*n.u+e.K*n.x+e.L*n.A)*n.b6,b6:e.b6*n.b6}})),sf=function(e){var n=new Float64Array(16);return n[0]=e.dK,n[1]=e.dO,n[2]=e.dS,n[3]=e.dW,n[4]=e.dL,n[5]=e.dP,n[6]=e.dT,n[7]=e.dX,n[8]=e.dM,n[9]=e.dQ,n[10]=e.dU,n[11]=e.dY,n[12]=e.dN,n[13]=e.dR,n[14]=e.dV,n[15]=e.dZ,n},df=a((function(e,n,r,t,o){return b(o,e,s(rf,t.b6,t.b6,t.b6,t.dC?1:-1),function(e){return sf({dK:e.s,dL:e.v,dM:e.y,dN:e.J,dO:e.t,dP:e.w,dQ:e.z,dR:e.K,dS:e.u,dT:e.x,dU:e.A,dV:e.L,dW:0,dX:0,dY:0,dZ:1})}(t),t.dC,n,r)})),bf=i((function(e,n,r,t,o,a){e:for(;;)switch(o.$){case 0:return a;case 5:var i=o.b;e=e,n=n,r=r,t=u(ff,o.a,t),o=i,a=a;continue e;case 1:return{P:u(yr,d(df,e,n,r,t,o.b),a.P),Z:a.Z,fq:a.fq};case 3:return{P:a.P,Z:u(yr,d(df,e,n,r,t,o.b),a.Z),fq:a.fq};case 2:return{P:a.P,Z:a.Z,fq:u(yr,d(df,e,n,r,t,o.a),a.fq)};default:var c=o.a;return f(Wr,s(bf,e,n,r,t),a,c)}})),vf=o((function(e,n,r,t){return{$:4,a:e,b:n,c:r,d:t}})),mf=vf,pf=o((function(e,n,r,t){return{$:1,a:e,b:n,c:r,d:t}})),gf=r((function(e,n){return{$:6,a:e,b:n}})),hf=gf,xf=z([s(pf,518,!1,0,1),s(mf,!1,!1,!1,!1),u(hf,0,1)]),Cf=519,Pf=7681,Mf={src:"\n        precision lowp float;\n\n        void main() {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        }\n    ",attributes:{},uniforms:{}},Tf=Yn,yf=r((function(e,n){return{$:0,a:e,b:n}})),Lf=yf({dr:1,dB:0,d6:5}),wf=Cr,Sf=Lf(z([{ee:u(wf,-1,-1)},{ee:u(wf,1,-1)},{ee:u(wf,-1,1)},{ee:u(wf,1,1)}])),Ff={src:"\n        precision lowp float;\n\n        attribute vec2 position;\n\n        void main() {\n            gl_Position = vec4(position, 0.0, 1.0);\n        }\n    ",attributes:{position:"ee"},uniforms:{}},Nf=function(e){return function(n){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return function(f){return{$:2,a:e,b:n,c:r,d:t,e:o,f:a,g:i,h:c,i:l,j:u,k:f}}}}}}}}}}}},$f=t((function(e,n,t){var o=e.cX,a=e.cz,i=e.dd,c=r((function(e,n){return n(e)})),l=r((function(e,n){return n(e)})),s=function(e){return u(Dt,c(e.bw),u(Dt,l(e.bh),u(Dt,l(e.bI),l(e.bJ))))};return u(s,t,u(s,n,f(Nf,o,a,i)))})),Df=function(e){return f($f,{cz:e.cz,cX:e.cX,dd:e.dd},{bh:e.bh,bw:e.bw,bI:e.bI,bJ:e.bJ},{bh:e.bh,bw:e.bw,bI:e.bI,bJ:e.bJ})},zf=function(e){return d(Tf,z([Df(e),s(mf,!1,!1,!1,!1)]),Ff,Mf,Sf,{})},Hf=zf({bh:Pf,cz:0,cX:8,bw:Cf,dd:15,bI:Pf,bJ:Pf}),_f=7680,Af=function(e){return zf({bh:_f,cz:15,cX:8,bw:516,dd:(n=e,u(Oi,2,n+4)),bI:5386,bJ:5386});var n},Gf=t((function(e,n,r){return Xu(z([f(of,e,r,xf),z([Af(n),Hf])]))})),Rf=r((function(e,n){return Xu(u(qr,Gf(e),n))})),kf=s(pf,513,!0,0,1),Bf=t((function(e,n,r){return{$:0,a:e,b:n,c:r}})),Vf=r((function(e,n){return f(Bf,32774,e,n)})),Ef=function(e){var n=e.b4,t=e.bS,o=e.bM,a=e.bK,i=e.bP,c=e.aQ;return u(r((function(e,r){var i=e.b,c=e.c,l=r.a,u=r.b,f=r.c;return function(e){return function(n){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return{$:0,a:e,b:n,c:r,d:t,e:o,f:a,g:i,h:c,i:l,j:u}}}}}}}}}}}(e.a)(i)(c)(l)(u)(f)(n)(t)(o)(a)})),i,c)}({bK:0,aQ:u(Vf,1,771),bM:0,bP:u(Vf,770,771),bS:0,b4:0}),If=z([kf,Ef]),jf=function(e){return e.d1},Wf=function(e){return e.d4},Of=r((function(e,n){return n-e})),Uf=function(e){return w(u(Of,function(e){return e.d2}(e),function(e){return e.d$}(e)),u(Of,function(e){return e.d3}(e),function(e){return e.d0}(e)),u(Of,Wf(e),jf(e)))},Yf=function(e){return e.cI},Xf=function(e){return Yf(e)},qf=function(e){return{cI:{bF:e.J,bG:e.K,bH:e.L},de:{bF:e.s,bG:e.t,bH:e.u},df:{bF:e.v,bG:e.w,bH:e.x},dg:{bF:e.y,bG:e.z,bH:e.A}}},Jf=r((function(e,n){var r=e.dg,t=e.df,o=e.de;return{bF:n.bF*o.bF+n.bG*o.bG+n.bH*o.bH,bG:n.bF*t.bF+n.bG*t.bG+n.bH*t.bH,bH:n.bF*r.bF+n.bG*r.bG+n.bH*r.bH}})),Kf=r((function(e,n){var r=e.cI,t=n.bF-r.bF,o=n.bG-r.bG,a=n.bH-r.bH,i=e.dg,c=e.df,l=e.de;return{bF:t*l.bF+o*l.bG+a*l.bH,bG:t*c.bF+o*c.bG+a*c.bH,bH:t*i.bF+o*i.bG+a*i.bH}})),Zf=function(e){return e.de},Qf=function(e){return e.df},es=function(e){return e.dg},ns=r((function(e,n){return{cI:u(Kf,e,Yf(n)),de:u(Jf,e,Zf(n)),df:u(Jf,e,Qf(n)),dg:u(Jf,e,es(n))}})),rs=t((function(e,n,r){return{bF:e,bG:n,bH:r}})),ts=r((function(e,n){return u(st,e,n)})),os=r((function(e,n){return 0>T(e,n)?e:n})),as=r((function(e,n){return u(os,e,n)})),is=r((function(e,n){var r=n,t=e;return{d$:u(ts,t.d$,r.d$),d0:u(ts,t.d0,r.d0),d1:u(ts,t.d1,r.d1),d2:u(as,t.d2,r.d2),d3:u(as,t.d3,r.d3),d4:u(as,t.d4,r.d4)}})),cs=r((function(e,n){return n+e})),ls=r((function(e,n){var r=e.a,t=e.c,o=Au(_u(e.b)),a=Au(_u(r)),i=Au(_u(t)),c=function(e){return w(e.bF,e.bG,e.bH)}(n),l=c.a,f=c.b,s=c.c;return{d$:u(cs,a,l),d0:u(cs,o,f),d1:u(cs,i,s),d2:u(Of,a,l),d3:u(Of,o,f),d4:u(Of,i,s)}})),us=o((function(e,n,r,t){var o=r.eJ,a=2*r.e$*n,i=2*r.e_*n,c=2*r.eZ*n,l=o.bH*n,s=o.bG*n,d=o.bF*n,b=es(e),v=Cc(c*b.bF)+Cc(i*b.bG)+Cc(a*b.bH),m=Qf(e),p=Cc(c*m.bF)+Cc(i*m.bG)+Cc(a*m.bH),g=Zf(e),h=Cc(c*g.bF)+Cc(i*g.bG)+Cc(a*g.bH),x=u(ls,w(h,p,v),u(Kf,e,f(rs,d,s,l)));return kr(t.$?x:u(is,t.a,x))})),fs=o((function(e,n,r,t){e:for(;;){if(!t.b)return r;var o=t.a,a=t.b;switch(o.$){case 0:e=c=e,n=l=n,r=f=r,t=a;continue e;case 1:var i=s(us,e,n,o.a,r);e=c=e,n=l=n,r=f=i,t=a;continue e;case 2:e=c=e,n=l=n,r=f=r,t=a;continue e;case 3:i=s(us,e,n,o.a,r),e=c=e,n=l=n,r=f=i,t=a;continue e;case 4:var c=e,l=n,f=s(fs,e,n,r,o.a);e=c,n=l,r=f,t=a;continue e;default:var d=o.a,b=o.b,v=u(ns,qf(d),e),m=n*d.b6;e=c=e,n=l=n,r=f=s(fs,v,m,r,z([b])),t=a;continue e}}})),ss=function(e){return e[0]},ds=function(e){return e[1]},bs=function(e){return e[2]},vs=function(e){return{$:4,a:e}},ms=r((function(e,n){for(;;){if(!e.b)return n;var r=e.a;e=e.b,n=u(yr,r,n)}})),ps=function(e){return vs(u(ms,e,N))},gs={dC:!0,s:1,t:0,u:0,v:0,w:1,x:0,y:0,z:0,A:1,J:0,K:0,L:0,b6:1},hs=zf({bh:Pf,cz:0,cX:8,bw:Cf,dd:255,bI:Pf,bJ:Pf}),xs={bM:0,eI:!1,bS:0,cT:0,b4:0,c7:0,bF:0,bG:0,bH:0},Cs=r((function(e,n){return sf({dK:e.bF,dL:e.b4,dM:n.bF,dN:n.b4,dO:e.bG,dP:e.bS,dQ:n.bG,dR:n.bS,dS:e.bH,dT:e.bM,dU:n.bH,dV:n.bM,dW:e.c7,dX:e.cT,dY:n.c7,dZ:n.cT})})),Ps=L({bo:u(Cs,xs,xs),bW:u(Cs,xs,xs),bX:u(Cs,xs,xs),bY:u(Cs,xs,xs)},s(rf,0,0,0,0)),Ms=r((function(e,n){return e*n})),Ts=function(e){return-e},ys=function(e){return s(pf,515,e.af,e.aa,e._)},Ls=z([ys({_:1,aa:0,af:!0}),Df({bh:_f,cz:240,cX:0,bw:514,dd:0,bI:_f,bJ:_f}),Ef]),ws=r((function(e,n){var r=e,t=n.eW,o=n.eB,a=_u(n.ff),i=_u(t),c=r.cV;if(c.$){var l=c.a;return Fc(i)?sf({dK:2/(o*l),dL:0,dM:0,dN:0,dO:0,dP:2/l,dQ:0,dR:0,dS:0,dT:0,dU:0,dV:-1,dW:0,dX:0,dY:0,dZ:1}):sf({dK:2/(o*l),dL:0,dM:0,dN:0,dO:0,dP:2/l,dQ:0,dR:0,dS:0,dT:0,dU:-2/(i-a),dV:-(i+a)/(i-a),dW:0,dX:0,dY:0,dZ:1})}var u=c.a;return Fc(i)?sf({dK:1/(o*u),dL:0,dM:0,dN:0,dO:0,dP:1/u,dQ:0,dR:0,dS:0,dT:0,dU:-1,dV:-2*a,dW:0,dX:0,dY:-1,dZ:0}):sf({dK:1/(o*u),dL:0,dM:0,dN:0,dO:0,dP:1/u,dQ:0,dR:0,dS:0,dT:0,dU:-(i+a)/(i-a),dV:-2*i*a/(i-a),dW:0,dX:0,dY:-1,dZ:0})})),Ss=r((function(e,n){return 1==(1&e>>n)?0:1})),Fs=t((function(e,n,r){return Xu(u(It,(function(r){var t=r<<4;return f(of,e,L(n,s(rf,u(Ss,r,0),u(Ss,r,1),u(Ss,r,2),u(Ss,r,3))),function(e){return z([ys({_:1,aa:0,af:!0}),Df({bh:_f,cz:240,cX:e,bw:514,dd:0,bI:_f,bJ:_f}),Ef])}(t))}),u(Xr,1,u(Oi,2,r)-1)))})),Ns=function(e){return{bF:-e.bF,bG:-e.bG,bH:-e.bH}},$s=function(e){return Ns(es(e))},Ds={bF:1,bG:0,bH:0},zs=Ds,Hs=Ru,_s={bF:0,bG:0,bH:1},As=_s,Gs={cI:Hu,de:zs,df:Hs,dg:As},Rs=r((function(e,n){var r,t,o,a,i;return t=Yf(r=u(ns,n,e)),o=es(r),a=Qf(r),i=Zf(r),sf({dK:i.bF,dL:a.bF,dM:o.bF,dN:t.bF,dO:i.bG,dP:a.bG,dQ:o.bG,dR:t.bG,dS:i.bH,dT:a.bH,dU:o.bH,dV:t.bH,dW:0,dX:0,dY:0,dZ:1})})),ks=function(e){return Zf(e)},Bs=t((function(e,n,r){return{bF:e,bG:n,bH:r}})),Vs=function(e){return Qf(e)},Es=r((function(e,n){var r,t=z([(1,{$:1,a:1}),Zu(0),ju(!0),s(Uu,0,0,0,0)]),o=function(){var n=e.ez;switch(n.$){case 0:return w(t,"0",1);case 1:return w(u(yr,Wu,t),"1",1);default:return w(t,"0",n.a)}}(),a=o.a,i=o.b,c=o.c,l=e.dq,d=l.a,v=l.b,m=u(pl,"height",Er(v)+"px"),p=d,g=p/v,h=u(qu,(function(n){return function(e){var n=function(e){return e.da}(e.eG),r={cI:Xf(n),de:ks(n),df:Vs(n),dg:Ns($s(n))},t=ps(e.dv),o=s(fs,r,1,Br,z([t]));if(1===o.$)return N;var a=o.a,i=u(Rs,Gs,n),c=u(Ms,.99,u(ts,_u(e.eL),Ts(jf(a)))),l=Uf(a),d=function(e){var n=e,r=u(st,Cc(n.bF),u(st,Cc(n.bG),Cc(n.bH)));if(r){var t=n.bH/r,o=n.bG/r,a=n.bF/r;return hu(a*a+o*o+t*t)*r}return 0}(f(Bs,l.a,l.b,l.c)),v=u(Ms,1.01,u(cs,d,Ts(Wf(a)))),m=u(ws,e.eG,{eB:e.eB,eW:v,ff:c}),p=function(e){return{dK:e[0],dO:e[1],dS:e[2],dW:e[3],dL:e[4],dP:e[5],dT:e[6],dX:e[7],dM:e[8],dQ:e[9],dU:e[10],dY:e[11],dN:e[12],dR:e[13],dV:e[14],dZ:e[15]}}(m).dZ,g=p?Ns($s(n)):Xf(n),h=function(){var n=e.fA;switch(n.$){case 0:return L(0,0);case 1:return L(1,0);case 2:return L(2,0);case 3:return L(3,n.a);case 4:return L(4,n.a);default:return L(5,0)}}(),x=h.a,C=h.b,P=u(uf,e.eT,e.fG),M=sf({dK:0,dL:g.bF,dM:ss(P),dN:e.eq,dO:0,dP:g.bG,dQ:ds(P),dR:d,dS:0,dT:g.bH,dU:bs(P),dV:x,dW:0,dX:p,dY:0,dZ:C}),T=b(bf,M,i,m,gs,t,{P:N,Z:N,fq:N}),y=e.fa;switch(y.$){case 0:return Xu(z([f(of,T.P,L(w=y.a,tf),If),f(of,T.Z,Ps,If)]));case 1:var w=y.a;return Xu(z([f(of,T.P,Ps,If),z([hs]),f(of,T.fq,w.bo,xf),z([Af(0)]),f(of,T.P,L(w,tf),Ls),f(of,T.Z,Ps,If)]));default:var S=y.a,F=y.b;return Xu(z([f(of,T.P,L(F,tf),If),z([hs]),u(Rf,T.fq,S),f(Fs,T.P,F,Or(S)),f(of,T.Z,Ps,If)]))}}({eB:g,eG:e.eG,eL:e.eL,dv:n.dv,eT:n.eT,fa:n.fa,eq:c,fA:n.fA,fG:n.fG})}),n),x=u(pl,"width",Er(p)+"px"),C=function(e){var n,r,t=e.b,o=e.c,a=e.d,i=function(e){return Ui(1e4*e)/100};return n=z(["rgba(",wc(i(e.a)),"%,",wc(i(t)),"%,",wc(i(o)),"%,",wc((r=a,Ui(1e3*r)/1e3)),")"]),u(Ir,"",n)}(e.dk);return f(Ku,"div",z([u(pl,"padding","0px"),x,m]),z([L(i,f(nf,a,z([(r=Ui(p*c),u(ln,"width",Er(r))),Ju(Ui(v*c)),x,m,u(pl,"display","block"),u(pl,"background-color",C)]),h))]))})),Is=function(e){return e.eC},js=o((function(e,n,r,t){return{$:2,a:e,b:n,c:r,d:t}})),Ws=o((function(e,n,r,t){return{$:3,a:e,b:n,c:r,d:t}})),Os=o((function(e,n,r,t){return{$:4,a:e,b:n,c:r,d:t}})),Us=o((function(e,n,r,t){return{$:6,a:e,b:n,c:r,d:t}})),Ys=o((function(e,n,r,t){return{$:7,a:e,b:n,c:r,d:t}})),Xs=o((function(e,n,r,t){return{$:5,a:e,b:n,c:r,d:t}})),qs=o((function(e,n,r,t){return{$:1,a:e,b:n,c:r,d:t}})),Js=function(e){switch(e.$){case 0:return e;case 1:return s(qs,e.a,e.b,e.c,1);case 2:return s(js,e.a,e.b,e.c,1);case 3:return s(Ws,e.a,e.b,e.c,1);case 4:return s(Os,e.a,e.b,e.c,1);case 5:return s(Xs,e.a,e.b,e.c,1);case 6:return s(Us,e.a,e.b,e.c,1);case 7:return s(Ys,e.a,e.b,e.c,1);case 8:case 9:default:return e}},Ks={$:0},Zs=l((function(e,n,r,t,o,a,i,c){for(;;){if(!c.b)return{d$:n,d0:t,d1:a,d2:e,d3:r,d4:o};var l=c.b,f=i(c.a);e=u(as,f.d2,e),n=u(ts,f.d$,n),r=u(as,f.d3,r),t=u(ts,f.d0,t),o=u(as,f.d4,o),a=u(ts,f.d1,a),i=i,c=l}})),Qs=t((function(e,n,r){var t=e(n);return m(Zs,t.d2,t.d$,t.d3,t.d0,t.d4,t.d1,e,r)})),ed=r((function(e,n){return 1>T(n,e)})),nd=function(e){return u(ed,e.d$,e.d2)&&u(ed,e.d0,e.d3)&&u(ed,e.d1,e.d4)?e:{d$:u(ts,e.d2,e.d$),d0:u(ts,e.d3,e.d0),d1:u(ts,e.d4,e.d1),d2:u(as,e.d2,e.d$),d3:u(as,e.d3,e.d0),d4:u(as,e.d4,e.d1)}},rd=function(e){return e},td=function(e){return e.bF},od=function(e){return e.bG},ad=function(e){return e.bH},id=function(e){var n=e.a,r=e.b,t=e.c,o=td(n),a=od(n),i=ad(n),c=td(r),l=od(r),f=ad(r),s=td(t),d=od(t),b=ad(t);return nd({d$:u(ts,o,u(ts,c,s)),d0:u(ts,a,u(ts,l,d)),d1:u(ts,i,u(ts,f,b)),d2:u(as,o,u(as,c,s)),d3:u(as,a,u(as,l,d)),d4:u(as,i,u(as,f,b))})},cd=function(e){return new Float64Array([e.bF,e.bG,e.bH])},ld=function(e){return cd(e)},ud=function(e){return cd(e)},fd=r((function(e,n){var r=e,t=n,o=u(st,Cc(t.bF),u(st,Cc(t.bG),Cc(t.bH)));if(o){var a=t.bH/o,i=t.bG/o,c=t.bF/o,l=hu(c*c+i*i+a*a);return{bF:r*c/l,bG:r*i/l,bH:r*a/l}}return Fu})),sd=fd(1),dd=t((function(e,n,r){return sd(u(Cu,u(Mu,n,r),u(Mu,e,n)))})),bd=function(e){var n=e.a,r=e.b,t=e.c,o=ud(f(dd,n,r,t));return w({p:o,ee:ld(n)},{p:o,ee:ld(r)},{p:o,ee:ld(t)})},vd=r((function(e,n){return{$:2,a:e,b:n}})),md=vd({dr:3,dB:0,d6:4}),pd=t((function(e,n,r){return w(e,n,r)})),gd=t((function(e,n,r){return{bF:e,bG:n,bH:r}})),hd=(Vo=u(Ms,-.5,1),Eo=u(Ms,-.5,1),Io=u(Ms,-.5,1),jo=f(gd,Io,Eo,Vo),Wo=u(Ms,.5,1),Oo=f(gd,Io,Eo,Wo),Uo=u(Ms,.5,1),Yo=f(gd,Io,Uo,Vo),Xo=f(gd,Io,Uo,Wo),qo=u(Ms,.5,1),Jo=f(gd,qo,Eo,Vo),Ko=f(gd,qo,Uo,Vo),Zo=f(gd,qo,Eo,Wo),Qo=f(gd,qo,Uo,Wo),Js(function(e){if(e.b){var n=e.a,r=e.b,t=md(u(It,bd,e));return s(js,f(Qs,id,n,r),e,t,0)}return Ks}(z([f(pd,jo,Ko,Jo),f(pd,jo,Yo,Ko),f(pd,Oo,Zo,Qo),f(pd,Oo,Qo,Xo),f(pd,Jo,Ko,Qo),f(pd,Jo,Qo,Zo),f(pd,jo,Xo,Yo),f(pd,jo,Oo,Xo),f(pd,jo,Jo,Zo),f(pd,jo,Zo,Oo),f(pd,Yo,Qo,Ko),f(pd,Yo,Xo,Qo)])))),xd={$:0},Cd=t((function(e,n,r){return{$:1,a:e,b:n,c:r}})),Pd=t((function(e,n,r){var t=n.a,o=n.b,a=e(n.c),i=e(o),c=e(t),l=ud(f(dd,c,i,a)),s={p:l,ee:ld(c)},d={p:l,ee:ld(i)},b={p:l,ee:ld(a)};return u(yr,s,u(yr,d,u(yr,b,r)))})),Md=function(e){return e.F},Td=o((function(e,n,r,t){return 1===n.$||1===r.$||1===t.$?Br:kr(f(e,n.a,r.a,t.a))})),yd=4294967295>>>32-at,Ld=h,wd=t((function(e,n,r){for(;;){var t=u(Ld,yd&n>>>e,r);if(t.$)return u(Ld,yd&n,t.a);e-=at,n=n,r=t.a}})),Sd=r((function(e,n){var r=n.a,t=n.b,o=n.c,a=n.d;return 0>e||T(e,r)>-1?Br:T(e,function(e){return e>>>5<<5}(r))>-1?kr(u(Ld,yd&e,a)):kr(f(wd,t,e,o))})),Fd=function(e){return e.ap},Nd=r((function(e,n){return u(Sd,e,Fd(n))})),$d=t((function(e,n,r){for(;;){var t=u(bt,Qr,e),o=t.a,a=t.b;if(0>T(ft(o),Qr))return u(pt,!0,{B:n,m:r,r:o});e=a,n=u(yr,lt(o),n),r+=1}})),Dd=function(e){return e.b?f($d,e,N,0):it},zd=r((function(e,n){return!u(yc,u(po,Tc,e),n)})),Hd=r((function(e,n){return f(Et,r((function(n,r){return e(n)?u(yr,n,r):r})),N,n)})),_d=r((function(e,n){var r=function(e){return e.a}(e),t=function(e){var n=e.a,t=e.b,o=e.c;return n>=0&&0>T(n,r)&&t>=0&&0>T(t,r)&&o>=0&&0>T(o,r)};return u(zd,t,n)?{F:n,ap:e}:{F:u(Hd,t,n),ap:e}})),Ad=t((function(e,n,r){return{$:3,a:e,b:n,c:r}})),Gd=Ad({dr:1,dB:3,d6:4}),Rd=r((function(e,n){var r=n;return L(w(e.bF,e.bG,e.bH),w(r.bF,r.bG,r.bH))})),kd=r((function(e,n){e:for(;;){if(-2===n.$)return Br;var r=n.c,t=n.d,o=n.e;switch(u(wo,e,n.b)){case 0:e=e,n=t;continue e;case 1:return kr(r);default:e=e,n=o;continue e}}})),Bd=f(lf,0,0,0),Vd=i((function(e,n,r,t,o,a){var i=a.a,c=a.b,l=a.c,f=u(kd,u(Rd,e,n),o);if(f.$){var s={p:Bd,ee:ld(n)},d={p:Bd,ee:ld(e)},b=l+1;return w(u(yr,w(r,l,b),u(yr,w(r,b,t),i)),u(yr,s,u(yr,d,c)),l+2)}return w(u(yr,w(r,f.a,t),i),c,l)})),Ed=a((function(e,n,r,t,o){for(;;){if(!r.b)return L(o.a,Kr(o.b));var a=r.a,i=a.a,c=a.b,l=r.b,u=e(a.c),f=e(c),s=e(i),d=t+2,v=t+1,m=e,p=n,g=l,h=t+3,x=b(Vd,u,s,d,t,n,b(Vd,f,u,v,d,n,b(Vd,s,f,t,v,n,o)));e=m,n=p,r=g,t=h,o=x}})),Id=a((function(e,n,r,t,o){for(;;){if(!n.b)return w(t,o,r);var a=n.a,i=a.a,c=a.b,l=n.b,s=e(a.c),d=e(c),b=e(i),v=r+2,m=r+1,p=r,g=f(Fo,u(Rd,b,s),v,f(Fo,u(Rd,s,d),m,f(Fo,u(Rd,d,b),p,o)));e=e,n=l,r+=3,t=u(yr,w(p,m,v),t),o=g}})),jd=t((function(e,n,r){var o,a=u(Ro,(function(e){var n=e.a,r=e.b,a=e.c;return s(Td,t((function(e,n,r){return w(e,n,r)})),u(Nd,n,o),u(Nd,r,o),u(Nd,a,o))}),Md(o=r)),i=f(Et,Pd(n),N,a),c=d(Id,n,a,0,N,Po),l=d(Ed,n,c.b,a,0,w(c.a,N,c.c)),b=l.a,v=l.b,m=v.b?F(i,v):i;return f(Cd,e,u(_d,Dd(m),b),u(Gd,m,b))})),Wd=function(e){return{F:u(It,(function(e){return w(3*e,3*e+1,3*e+2)}),u(Xr,0,Or(e)-1)),ap:Dd(Xu(u(It,(function(e){return z([e.a,e.b,e.c])}),e)))}},Od=function(e){switch(e.$){case 0:return xd;case 1:case 2:return f(jd,e.a,zt,Wd(u(It,rd,e.b)));case 3:return f(jd,e.a,zt,e.b);case 4:case 5:case 6:case 7:return f(jd,e.a,(function(e){return e.ee}),e.b);case 8:case 9:default:return xd}},Ud=Od(hd),Yd=function(e){return e.dq},Xd={$:0},qd=Xd,Jd=r((function(e,n){return{$:1,a:e,b:n}})),Kd={src:"\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        void main () {\n            gl_FragColor = texture2D(colorTexture, interpolatedUv);\n        }\n    ",attributes:{},uniforms:{colorTexture:"bQ"}},Zd=function(e){return{$:5,a:e}},Qd=Zd(1029),eb=Zd(1028),nb=t((function(e,n,r){return 1===n?u(yr,e?Qd:eb,r):r})),rb={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute mediump vec2 uv;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedUv = uv;\n        }\n    ",attributes:{position:"ee",uv:"N"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},tb=o((function(e,n,r,t){return u(Jd,n,l((function(n,o,a,i,c,l,u,s){return d(Tf,f(nb,i,t,s),rb,Kd,r,{bQ:e,b:a,c:o,d:l,e:n,f:c})})))})),ob={src:"\n        precision lowp float;\n        \n        uniform lowp vec3 constantColor;\n        \n        void main () {\n            gl_FragColor = vec4(constantColor, 1.0);\n        }\n    ",attributes:{},uniforms:{constantColor:"aE"}},ab={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{position:"ee"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},ib=o((function(e,n,r,t){return u(Jd,n,l((function(n,o,a,i,c,l,u,s){return d(Tf,f(nb,i,t,s),ab,ob,r,{aE:e,b:a,c:o,d:l,e:n,f:c})})))})),cb=r((function(e,n){return{$:3,a:e,b:n}})),lb={src:"\n        precision lowp float;\n        \n        uniform lowp vec3 constantColor;\n        uniform lowp float pointRadius;\n        uniform highp mat4 sceneProperties;\n        \n        float pointAlpha(float pointRadius, vec2 pointCoord) {\n            float pointSize = 2.0 * pointRadius;\n            float x = (pointSize + 2.0) * (pointCoord.s - 0.5);\n            float y = (pointSize + 2.0) * (pointCoord.t - 0.5);\n            float r = sqrt(x * x + y * y);\n            float innerRadius = pointRadius;\n            float outerRadius = pointRadius + 1.0;\n            if (r > outerRadius) {\n                return 0.0;\n            } else if (r > innerRadius) {\n                return outerRadius - r;\n            } else {\n                return 1.0;\n            }\n        }\n        \n        void main () {\n            float supersampling = sceneProperties[3][0];\n            float alpha = pointAlpha(pointRadius * supersampling, gl_PointCoord);\n            gl_FragColor = vec4(constantColor, alpha);\n        }\n    ",attributes:{},uniforms:{constantColor:"aE",pointRadius:"b2",sceneProperties:"e"}},ub={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform lowp float pointRadius;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            float supersampling = sceneProperties[3][0];\n            gl_PointSize = 2.0 * pointRadius * supersampling + 2.0;\n        }\n    ",attributes:{position:"ee"},uniforms:{modelMatrix:"b",modelScale:"c",pointRadius:"b2",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},fb=o((function(e,n,r,t){return u(cb,r,l((function(r,o,a,i,c,l,u,f){return d(Tf,f,ub,lb,t,{aE:e,b:a,c:o,b2:n,d:l,e:r,f:c})})))})),sb={src:"\n        precision mediump float;\n        \n        uniform mediump vec3 emissiveColor;\n        uniform highp mat4 sceneProperties;\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{emissiveColor:"aU",sceneProperties:"e"}},db=Mr,bb=a((function(e,n,r,t,o){return u(Jd,r,l((function(r,a,i,c,l,s,b,v){return d(Tf,f(nb,c,o,v),ab,sb,t,{aU:u(db,n,e),b:i,c:a,d:s,e:r,f:l})})))})),vb={src:"\n        precision mediump float;\n        \n        uniform mediump vec3 emissiveColor;\n        uniform lowp float pointRadius;\n        uniform highp mat4 sceneProperties;\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        float pointAlpha(float pointRadius, vec2 pointCoord) {\n            float pointSize = 2.0 * pointRadius;\n            float x = (pointSize + 2.0) * (pointCoord.s - 0.5);\n            float y = (pointSize + 2.0) * (pointCoord.t - 0.5);\n            float r = sqrt(x * x + y * y);\n            float innerRadius = pointRadius;\n            float outerRadius = pointRadius + 1.0;\n            if (r > outerRadius) {\n                return 0.0;\n            } else if (r > innerRadius) {\n                return outerRadius - r;\n            } else {\n                return 1.0;\n            }\n        }\n        \n        void main () {\n            vec4 color = toSrgb(emissiveColor, sceneProperties);\n            float supersampling = sceneProperties[3][0];\n            float alpha = pointAlpha(pointRadius * supersampling, gl_PointCoord);\n            gl_FragColor = vec4(color.rgb, alpha);\n        }\n    ",attributes:{},uniforms:{emissiveColor:"aU",pointRadius:"b2",sceneProperties:"e"}},mb=a((function(e,n,r,t,o){return u(cb,t,l((function(t,a,i,c,l,f,s,b){return d(Tf,b,ub,vb,o,{aU:u(db,n,e),b:i,c:a,b2:r,d:f,e:t,f:l})})))})),pb={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 materialColor;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{enabledLights:"U",lights12:"bo",lights34:"bW",lights56:"bX",lights78:"bY",materialColor:"cA",sceneProperties:"e",viewMatrix:"f"}},gb={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n        }\n    ",attributes:{normal:"p",position:"ee"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},hb=o((function(e,n,r,t){return u(Jd,n,l((function(n,o,a,i,c,l,u,s){var b=u.a,v=u.b;return d(Tf,f(nb,i,t,s),gb,pb,r,{U:v,bo:b.bo,bW:b.bW,bX:b.bX,bY:b.bY,cA:e,b:a,c:o,d:l,e:n,f:c})})))})),xb={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D materialColorTexture;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n            vec3 materialColor = fromSrgb(texture2D(materialColorTexture, interpolatedUv).rgb);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{enabledLights:"U",lights12:"bo",lights34:"bW",lights56:"bX",lights78:"bY",materialColorTexture:"cB",normalMapTexture:"a$",sceneProperties:"e",useNormalMap:"a6",viewMatrix:"f"}},Cb={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        attribute mediump vec2 uv;\n        attribute highp vec3 tangent;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getWorldTangent(vec3 modelTangent, vec4 modelScale, mat4 modelMatrix) {\n            return (modelMatrix * vec4(safeNormalize(modelScale.xyz * modelTangent), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = uv;\n            interpolatedTangent = getWorldTangent(tangent, modelScale, modelMatrix);\n        }\n    ",attributes:{normal:"p",position:"ee",tangent:"es",uv:"N"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Pb=i((function(e,n,r,t,o,a){return u(Jd,t,l((function(t,i,c,l,u,s,b,v){var m=b.a,p=b.b;return d(Tf,f(nb,l,a,v),Cb,xb,o,{U:p,bo:m.bo,bW:m.bW,bX:m.bX,bY:m.bY,cB:e,b:c,c:i,a$:n,d:s,e:t,a6:r,f:u})})))})),Mb={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D baseColorTexture;\n        uniform lowp vec4 constantBaseColor;\n        uniform mediump sampler2D roughnessTexture;\n        uniform lowp vec2 constantRoughness;\n        uniform mediump sampler2D metallicTexture;\n        uniform lowp vec2 constantMetallic;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getFloatValue(sampler2D texture, vec2 uv, vec2 constantValue) {\n            if (constantValue.y == 1.0) {\n                return constantValue.x;\n            } else {\n                vec4 textureColor = texture2D(texture, uv);\n                return dot(textureColor, vec4(0.2126, 0.7152, 0.0722, 0.0));\n            }\n        }\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 baseColor = fromSrgb(texture2D(baseColorTexture, interpolatedUv).rgb) * (1.0 - constantBaseColor.w) + constantBaseColor.rgb * constantBaseColor.w;\n            float roughness = getFloatValue(roughnessTexture, interpolatedUv, constantRoughness);\n            float metallic = getFloatValue(metallicTexture, interpolatedUv, constantMetallic);\n        \n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{baseColorTexture:"ce",constantBaseColor:"ch",constantMetallic:"ci",constantRoughness:"cj",enabledLights:"U",lights12:"bo",lights34:"bW",lights56:"bX",lights78:"bY",metallicTexture:"cE",normalMapTexture:"a$",roughnessTexture:"c$",sceneProperties:"e",useNormalMap:"a6",viewMatrix:"f"}},Tb={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 baseColor;\n        uniform lowp float roughness;\n        uniform lowp float metallic;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{baseColor:"cd",enabledLights:"U",lights12:"bo",lights34:"bW",lights56:"bX",lights78:"bY",metallic:"cD",roughness:"c_",sceneProperties:"e",viewMatrix:"f"}},yb=i((function(e,n,r,t,o,a){return u(Jd,t,l((function(t,i,c,l,u,s,b,v){var m=b.a,p=b.b;return d(Tf,f(nb,l,a,v),gb,Tb,o,{cd:e,U:p,bo:m.bo,bW:m.bW,bX:m.bX,bY:m.bY,cD:r,b:c,c:i,d:s,c_:n,e:t,f:u})})))})),Lb=r((function(e,n){return{$:1,a:e,b:n}})),wb=r((function(e,n){return n.$?L(n.a.D,1):L(e,0)})),Sb=s(rf,0,0,0,0),Fb=r((function(e,n){var r;return n.$?L(n.a.D,Sb):L(e,s(rf,ss(r=n.a),ds(r),bs(r),1))})),Nb=r((function(e,n){var r,t=L(e,n);return t.a.$?u(Lb,L(r=t.a.a.D,Sb),u(wb,r,n)):t.b.$?u(Lb,u(Fb,r=t.b.a.D,e),u(wb,r,n)):{$:0,a:t.a.a}})),$b=t((function(e,n,r){return{$:0,a:e,b:n,c:r}})),Db=o((function(e,n,r,t){return{$:1,a:e,b:n,c:r,d:t}})),zb=o((function(e,n,r,t){return{$:0,a:e,b:n,c:r,d:t}})),Hb=u(wf,0,0),_b=r((function(e,n){return n.$?L(n.a.D,Hb):L(e,u(wf,n.a,1))})),Ab=o((function(e,n,r,t){var o,a=s(zb,e,n,r,t);return a.a.$?s(Db,L(o=a.a.a.D,Sb),u(_b,o,n),u(_b,o,r),u(wb,o,t)):a.b.$?s(Db,u(Fb,o=a.b.a.D,e),L(o,Hb),u(_b,o,r),u(wb,o,t)):a.c.$?s(Db,u(Fb,o=a.c.a.D,e),u(_b,o,n),L(o,Hb),u(wb,o,t)):a.d.$?s(Db,u(Fb,o=a.d.a.D,e),u(_b,o,n),u(_b,o,r),L(o,1)):f($b,a.a.a,a.b.a,a.c.a)})),Gb={src:"\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        uniform mediump float backlight;\n        uniform highp mat4 sceneProperties;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            vec3 emissiveColor = fromSrgb(texture2D(colorTexture, interpolatedUv).rgb) * backlight;\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{backlight:"ca",colorTexture:"bQ",sceneProperties:"e"}},Rb=a((function(e,n,r,t,o){return u(Jd,r,l((function(r,a,i,c,l,u,s,b){return d(Tf,f(nb,c,o,b),rb,Gb,t,{ca:n,bQ:e,b:i,c:a,d:u,e:r,f:l})})))})),kb={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        attribute mediump vec2 uv;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = uv;\n            interpolatedTangent = vec3(0.0, 0.0, 0.0);\n        }\n    ",attributes:{normal:"p",position:"ee",uv:"N"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Bb=o((function(e,n,r,t){return u(Jd,n,l((function(n,o,a,i,c,l,u,s){var b=u.a,v=u.b;return d(Tf,f(nb,i,t,s),kb,xb,r,{U:v,bo:b.bo,bW:b.bW,bX:b.bX,bY:b.bY,cB:e,b:a,c:o,a$:e,d:l,e:n,a6:0,f:c})})))})),Vb=function(e){return n(9,e,(function(n){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return e(n,r,t,o,a,i,c,l,u)}}}}}}}}}))}((function(e,n,r,t,o,a,i,c,s){return u(Jd,i,l((function(i,l,u,b,v,m,p,g){var h=p.a,x=p.b;return d(Tf,f(nb,b,s,g),kb,Mb,c,{ce:e,ch:n,ci:a,cj:t,U:x,bo:h.bo,bW:h.bW,bX:h.bX,bY:h.bY,cE:o,b:u,c:l,a$:e,d:m,c$:r,e:i,a6:0,f:v})})))})),Eb=t((function(e,n,r){return r>.5?n+(1-r)*(e-n):e+r*(n-e)})),Ib=function(e){return f(gd,function(e){return f(Eb,e.d2,e.d$,.5)}(e),function(e){return f(Eb,e.d3,e.d0,.5)}(e),function(e){return f(Eb,e.d4,e.d1,.5)}(e))},jb=function(e){var n=Uf(e),r=n.a,t=n.b,o=n.c;return{eJ:Ib(e),eZ:r/2,e_:t/2,e$:o/2}},Wb=r((function(e,n){switch(e.$){case 0:if(e.b.$){var r=e.b.a.D;switch(n.$){case 0:case 1:case 2:case 3:case 4:return qd;case 5:case 6:case 7:return o=n.c,a=n.d,s(tb,r,jb(A=n.a),o,a);case 8:case 9:default:return qd}}else{var t=e.b.a;switch(n.$){case 0:return qd;case 1:var o=n.c,a=n.d;return s(ib,t,jb(A=n.a),o,a);case 2:case 3:case 4:return o=n.c,a=n.d,s(ib,t,jb(A=n.a),o,a);case 5:case 6:case 7:return o=n.c,a=n.d,s(ib,t,jb(A=n.a),o,a);case 8:case 9:return o=n.c,s(ib,t,jb(A=n.a),o,0);default:return o=n.d,s(fb,t,n.b,jb(A=n.a),o)}}case 1:if(e.b.$)switch(r=e.b.a.D,c=e.c,n.$){case 0:case 1:case 2:case 3:case 4:return qd;case 5:case 6:case 7:return o=n.c,a=n.d,d(Rb,r,c,jb(A=n.a),o,a);case 8:case 9:default:return qd}else{var i=e.b.a,c=e.c;switch(n.$){case 0:return qd;case 1:case 2:case 3:case 4:case 5:case 6:case 7:return o=n.c,a=n.d,d(bb,i,c,jb(A=n.a),o,a);case 8:case 9:return o=n.c,d(bb,i,c,jb(A=n.a),o,0);default:return o=n.d,d(mb,i,c,n.b,jb(A=n.a),o)}}case 2:var v=u(Nb,e.b,e.c);if(v.$){var m=v.a.a,p=v.b,g=p.a,h=p.b;switch(n.$){case 0:case 1:case 2:case 3:case 4:case 5:return qd;case 6:return o=n.c,C=n.d,s(Bb,m,jb(A=n.a),o,C);case 7:return o=n.c,C=n.d,b(Pb,m,g,h,jb(A=n.a),o,C);case 8:case 9:default:return qd}}else{var x=v.a;switch(n.$){case 0:case 1:return qd;case 2:o=n.c;var C=n.d;return s(hb,x,jb(A=n.a),o,C);case 3:return qd;case 4:return o=n.c,C=n.d,s(hb,x,jb(A=n.a),o,C);case 5:return qd;case 6:case 7:return o=n.c,C=n.d,s(hb,x,jb(A=n.a),o,C);case 8:case 9:default:return qd}}default:var P=s(Ab,e.b,e.c,e.d,e.e);if(P.$){var M=P.a,T=M.a,y=M.b,L=P.b,w=L.a,S=L.b,F=P.c,N=F.a,$=F.b,D=P.d;switch(g=D.a,h=D.b,n.$){case 0:case 1:case 2:case 3:case 4:case 5:return qd;case 6:return o=n.c,a=n.d,function(e,n,r,t,o,a,i,c,l,u){return 9===e.a?e.f(n,r,t,o,a,i,c,l,u):e(n)(r)(t)(o)(a)(i)(c)(l)(u)}(Vb,T,y,w,S,N,$,jb(A=n.a),o,a);case 7:return A=n.a,o=n.c,a=n.d,function(e){return function(n){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(s){return function(b){return function(v){return u(Jd,s,l((function(l,u,s,m,p,g,h,x){var C=h.a,P=h.b;return d(Tf,f(nb,m,v,x),Cb,Mb,b,{ce:e,ch:n,ci:a,cj:t,U:P,bo:C.bo,bW:C.bW,bX:C.bX,bY:C.bY,cE:o,b:s,c:u,a$:i,d:g,c$:r,e:l,a6:c,f:p})})))}}}}}}}}}}}(T)(y)(w)(S)(N)($)(g)(h)(jb(A))(o)(a);case 8:case 9:default:return qd}}else{var z=P.a,H=P.b,_=P.c;switch(n.$){case 0:case 1:return qd;case 2:return o=n.c,a=n.d,b(yb,z,H,_,jb(A=n.a),o,a);case 3:return qd;case 4:return o=n.c,a=n.d,b(yb,z,H,_,jb(A=n.a),o,a);case 5:return qd;case 6:return o=n.c,a=n.d,b(yb,z,H,_,jb(A=n.a),o,a);case 7:var A;return o=n.c,a=n.d,b(yb,z,H,_,jb(A=n.a),o,a);case 8:case 9:default:return qd}}}})),Ob=function(e){return e.bF},Ub=function(e){return e.bG},Yb=function(e){return e.bH},Xb=function(e){var n=e,r=Yb(n.dg),t=Ub(n.dg),o=Ob(n.dg),a=Yb(n.df),i=Ub(n.df),c=Ob(n.df),l=Yb(n.de),u=Ub(n.de),f=Ob(n.de);return f*i*r+u*a*o+l*c*t-l*i*o-u*c*r-f*a*t>0},qb=r((function(e,n){return{$:5,a:e,b:n}})),Jb=r((function(e,n){var r=n;switch(r.$){case 0:return qd;case 5:var t=r.b;return u(qb,u(ff,r.a,e),t);case 1:case 3:case 2:default:return u(qb,e,r)}})),Kb=r((function(e,n){return u(Jb,function(e){var n=Yf(e),r=es(e),t=Qf(e),o=Zf(e);return{dC:Xb(e),s:o.bF,t:o.bG,u:o.bH,v:t.bF,w:t.bG,x:t.bH,y:r.bF,z:r.bG,A:r.bH,J:n.bF,K:n.bG,L:n.bH,b6:1}}(e),n)})),Zb=function(e){return{$:2,a:e}},Qb=r((function(e,n){var r=e.a,t=e.b,o=e.c,a=n.eJ;return{eJ:{bF:r*a.bF,bG:t*a.bG,bH:o*a.bH},eZ:r*n.eZ,e_:t*n.e_,e$:o*n.e$}})),ev=function(e){return function(n){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){var f,s,d={bF:(s=t)[0],bG:s[1],bH:s[2],ex:s[3]},b=(f={ex:d.ex,bF:d.bF*e.a,bG:d.bG*e.b,bH:d.bH*e.c},new Float64Array([f.bF,f.bG,f.bH,f.ex]));return m(n,r,b,o,a,i,c,l,u)}}}}}}}}}},nv=r((function(e,n){switch(n.$){case 0:return Xd;case 5:return u(qb,n.a,u(nv,e,n.b));case 1:var r=n.b;return u(Jd,u(Qb,e,n.a),u(ev,e,r));case 3:return n;case 2:return Zb(u(ev,e,r=n.a));default:var t=n.a;return vs(u(It,nv(e),t))}})),rv=r((function(e,n){return u(nv,e,n)})),tv={src:"\n        precision lowp float;\n        \n        void main () {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        }\n    ",attributes:{},uniforms:{}},ov=f($f,{cz:0,cX:0,dd:15},{bh:_f,bw:Cf,bI:_f,bJ:7683},{bh:_f,bw:Cf,bI:_f,bJ:7682}),av=f($f,{cz:0,cX:0,dd:15},{bh:_f,bw:Cf,bI:_f,bJ:7682},{bh:_f,bw:Cf,bI:_f,bJ:7683}),iv=r((function(e,n){return u(yr,e?av:ov,n)})),cv={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 shadowVertexPosition(vec3 position, vec3 normal, mat4 shadowLight, vec4 modelScale, mat4 modelMatrix, mat4 viewMatrix, mat4 projectionMatrix, mat4 sceneProperties) {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            vec3 worldNormal = getWorldNormal(normal, vec4(modelScale.xyz, 1.0), modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 directionToLight = getDirectionToLight(worldPosition.xyz, xyz_type, rgb_parameter);\n            vec3 offset = vec3(0.0, 0.0, 0.0);\n            float sceneDiameter = sceneProperties[3][1];\n            if (dot(directionToLight, worldNormal) <= 0.0) {\n                offset = -sceneDiameter * directionToLight;\n            } else {\n                offset = -0.001 * sceneDiameter * directionToLight;\n            }\n            vec4 offsetPosition = worldPosition + vec4(offset, 0.0);\n            return projectionMatrix * (viewMatrix * offsetPosition);\n        }\n        \n        void main () {\n            gl_Position = shadowVertexPosition(\n                position,\n                normal,\n                shadowLight,\n                modelScale,\n                modelMatrix,\n                viewMatrix,\n                projectionMatrix,\n                sceneProperties\n            );\n        }\n    ",attributes:{normal:"p",position:"ee"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"b7",viewMatrix:"f"}},lv=function(e){var n=function(e){if(e.$){var n=e.c;return kr(l((function(e,r,t,o,a,i,c,l){return d(Tf,u(iv,o,l),cv,tv,n,{b:t,c:r,d:i,e:e,b7:c,f:a})})))}return Br}(e);return n.$?qd:Zb(n.a)},uv=o((function(e,n,r,t){var o,a=u(Wb,r,hd),i=(o=L(e,n)).a?o.b?ps(z([a,lv(Ud)])):a:o.b?lv(Ud):qd,c=Yd(t),l=c.a,f=c.b,s=c.c;return u(Kb,Is(t),u(rv,w(l,f,s),i))})),fv=r((function(e,n){return s(uv,!0,!0,e,n)})),sv=function(e){return{$:0,a:e}},dv=r((function(e,n){return{$:0,a:e,b:n}})),bv=function(e){return e.l},vv=function(e){return ku(e)},mv=r((function(e,n){return n/e})),pv=B,gv=function(e){var n=e;return{bF:ku(n),bG:pv(n)}},hv=r((function(e,n){var r=e.ee;return u(yr,{p:ud(e.p),ee:ld(r)},n)})),xv=c((function(e,n,r,t,o,a,i){for(;;){if(!i.b)return nd({d$:n,d0:t,d1:a,d2:e,d3:r,d4:o});var c=i.a,l=i.b,f=bs(c.ee),s=ds(c.ee),d=ss(c.ee);e=u(os,e,d),n=u(st,n,d),r=u(os,r,s),t=u(st,t,s),o=u(os,o,f),a=u(st,a,f),i=l}})),Cv=r((function(e,n){var r=bs(e.ee),t=ds(e.ee),o=ss(e.ee);return v(xv,o,o,t,t,r,r,n)})),Pv={bF:0,bG:0,bH:-1},Mv=r((function(e,n){var r=e.df,t=e.de;return{bF:n.bF*t.bF+n.bG*r.bF,bG:n.bF*t.bG+n.bG*r.bG,bH:n.bF*t.bH+n.bG*r.bH}})),Tv=function(e){return pv(e)},yv=function(e){return 6.283185307179586*e},Lv={cI:Hu,de:zs,df:Hs},wv=(ea=u(mv,72,yv(1)),na=_s,ra=Pv,oa=f(gd,0,0,ta=u(Ms,.5,1)),ia=f(gd,0,0,aa=u(Ms,-.5,1)),Js(function(e){var n=f(wr,hv,N,Fd(e));if(n.b){var r=n.a,t=n.b,o=u(Gd,n,Md(e));return s(Os,u(Cv,r,t),e,o,0)}return Ks}(Wd(Xu(u(It,(function(e){var n=u(Ms,e,ea),r=u(Mv,Lv,gv(n)),t=u(Ms,vv(n),1),o=u(Ms,Tv(n),1),a=f(gd,t,o,ta),i=f(gd,t,o,aa),c=u(Ms,u(vc,72,e+1),ea),l=u(Mv,Lv,gv(c)),s=u(Ms,vv(c),1),d=u(Ms,Tv(c),1),b=f(gd,s,d,aa),v=f(gd,s,d,ta);return z([w({p:ra,ee:ia},{p:ra,ee:b},{p:ra,ee:i}),w({p:r,ee:i},{p:l,ee:b},{p:l,ee:v}),w({p:r,ee:i},{p:l,ee:v},{p:r,ee:a}),w({p:na,ee:oa},{p:na,ee:a},{p:na,ee:v})])}),u(Xr,0,71))))))),Sv=Od(wv),Fv=function(e){return e.eO},Nv=function(e){return e.cI},$v=function(e){return e.e8},Dv=function(e){return e.fm},zv=o((function(e,n,r,t){var o,a=function(e){var n=Fv(e),r=$u(n),t=r.a,o=r.b;return{cI:Nv(e),de:t,df:o,dg:n}}(bv(t)),i=u(Wb,r,wv),c=(o=L(e,n)).a?o.b?ps(z([i,lv(Sv)])):i:o.b?lv(Sv):qd,l=Dv(t),f=$v(t);return u(Kb,a,u(rv,w(l,l,f),c))})),Hv=r((function(e,n){return s(zv,!0,!0,e,n)})),_v={src:"\n        precision highp float;\n        \n        attribute lowp float triangleVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 triangleVertexPositions;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleVertex), triangleVertexPositions, position, normal);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{triangleVertex:"c6"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",triangleVertexPositions:"bC",viewMatrix:"f"}},Av={src:"\n        precision highp float;\n        \n        attribute lowp float triangleVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 triangleVertexPositions;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleVertex), triangleVertexPositions, position, normal);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n        }\n    ",attributes:{triangleVertex:"c6"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",triangleVertexPositions:"bC",viewMatrix:"f"}},Gv=function(e){var n=e.a,r=e.b,t=e.c;return sf({dK:n.bF,dL:r.bF,dM:t.bF,dN:0,dO:n.bG,dP:r.bG,dQ:t.bG,dR:0,dS:n.bH,dT:r.bH,dU:t.bH,dV:0,dW:0,dX:0,dY:0,dZ:0})},Rv=md(z([w({c6:0},{c6:1},{c6:2})])),kv=r((function(e,n){var r=id(n),t=jb(r);switch(e.$){case 0:if(e.b.$)return qd;var o=e.b.a;return u(Jd,t,l((function(e,r,t,a,i,c,l,u){return d(Tf,f(nb,a,0,u),_v,ob,Rv,{aE:o,b:t,c:r,d:c,e:e,bC:Gv(n),f:i})})));case 1:if(e.b.$)return qd;var a=e.b.a,i=e.c;return u(Jd,t,l((function(e,r,t,o,c,l,s,b){return d(Tf,f(nb,o,0,b),_v,sb,Rv,{aU:u(db,i,a),b:t,c:r,d:l,e:e,bC:Gv(n),f:c})})));case 2:var c=u(Nb,e.b,e.c);if(c.$)return qd;var b=c.a;return u(Jd,t,l((function(e,r,t,o,a,i,c,l){var u=c.a,s=c.b;return d(Tf,f(nb,o,0,l),Av,pb,Rv,{U:s,bo:u.bo,bW:u.bW,bX:u.bX,bY:u.bY,cA:b,b:t,c:r,d:i,e:e,bC:Gv(n),f:a})})));default:var v=s(Ab,e.b,e.c,e.d,e.e);if(v.$)return qd;var m=v.a,p=v.b,g=v.c;return u(Jd,t,l((function(e,r,t,o,a,i,c,l){var u=c.a,s=c.b;return d(Tf,f(nb,o,0,l),Av,Tb,Rv,{cd:m,U:s,bo:u.bo,bW:u.bW,bX:u.bX,bY:u.bY,cD:g,b:t,c:r,d:i,c_:p,e:e,bC:Gv(n),f:a})})))}})),Bv=(ca=z([{a5:u(wf,0,1)},{a5:u(wf,1,1)},{a5:u(wf,2,1)},{a5:u(wf,0,-1)},{a5:u(wf,1,-1)},{a5:u(wf,2,-1)}]),la=z([w(0,1,2),w(3,5,4),w(3,4,1),w(3,1,0),w(4,5,2),w(4,2,1),w(5,3,0),w(5,0,2)]),u(Gd,ca,la)),Vv={src:"\n        precision highp float;\n        \n        attribute highp vec2 triangleShadowVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        uniform highp mat4 triangleVertexPositions;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 shadowVertexPosition(vec3 position, vec3 normal, mat4 shadowLight, vec4 modelScale, mat4 modelMatrix, mat4 viewMatrix, mat4 projectionMatrix, mat4 sceneProperties) {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            vec3 worldNormal = getWorldNormal(normal, vec4(modelScale.xyz, 1.0), modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 directionToLight = getDirectionToLight(worldPosition.xyz, xyz_type, rgb_parameter);\n            vec3 offset = vec3(0.0, 0.0, 0.0);\n            float sceneDiameter = sceneProperties[3][1];\n            if (dot(directionToLight, worldNormal) <= 0.0) {\n                offset = -sceneDiameter * directionToLight;\n            } else {\n                offset = -0.001 * sceneDiameter * directionToLight;\n            }\n            vec4 offsetPosition = worldPosition + vec4(offset, 0.0);\n            return projectionMatrix * (viewMatrix * offsetPosition);\n        }\n        \n        void main () {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleShadowVertex.x), triangleVertexPositions, position, normal);\n            normal *= triangleShadowVertex.y;\n            gl_Position = shadowVertexPosition(\n                position,\n                normal,\n                shadowLight,\n                modelScale,\n                modelMatrix,\n                viewMatrix,\n                projectionMatrix,\n                sceneProperties\n            );\n        }\n    ",attributes:{triangleShadowVertex:"a5"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"b7",triangleVertexPositions:"bC",viewMatrix:"f"}},Ev=function(e){return Zb(l((function(n,r,t,o,a,i,c,l){return d(Tf,u(iv,o,l),Vv,tv,Bv,{b:t,c:r,d:i,e:n,b7:c,bC:Gv(e),f:a})})))},Iv=o((function(e,n,r,t){var o=u(kv,r,t),a=L(e,n);return a.a?a.b?ps(z([o,Ev(t)])):o:a.b?Ev(t):qd})),jv=r((function(e,n){return s(Iv,!0,!0,e,n)})),Wv=r((function(e,n){var r=ad(n),t=ad(e),o=od(n),a=od(e),i=td(n),c=td(e);return{d$:u(ts,c,i),d0:u(ts,a,o),d1:u(ts,t,r),d2:u(as,c,i),d3:u(as,a,o),d4:u(as,t,r)}})),Ov={src:"\n        precision highp float;\n        \n        attribute lowp float lineSegmentVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp vec3 lineSegmentStartPoint;\n        uniform highp vec3 lineSegmentEndPoint;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = (1.0 - lineSegmentVertex) * lineSegmentStartPoint + lineSegmentVertex * lineSegmentEndPoint;\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{lineSegmentVertex:"dJ"},uniforms:{lineSegmentEndPoint:"dH",lineSegmentStartPoint:"dI",modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Uv=r((function(e,n){return{$:1,a:e,b:n}}))({dr:2,dB:0,d6:1})(z([L({dJ:0},{dJ:1})])),Yv=r((function(e,n){var r,t=u(Wv,(r=n).a,r.b),o=jb(t),a=n.a,i=n.b;switch(e.$){case 0:if(e.b.$)return qd;var c=e.b.a;return u(Jd,o,l((function(e,n,r,t,o,l,u,f){return d(Tf,f,Ov,ob,Uv,{aE:c,dH:ld(i),dI:ld(a),b:r,c:n,d:l,e:e,f:o})})));case 1:if(e.b.$)return qd;c=e.b.a;var f=e.c;return u(Jd,o,l((function(e,n,r,t,o,l,s,b){return d(Tf,b,Ov,sb,Uv,{aU:u(db,f,c),dH:ld(i),dI:ld(a),b:r,c:n,d:l,e:e,f:o})})));case 2:default:return qd}})),Xv=r((function(e,n){return u(Yv,e,n)})),qv=t((function(e,n,r){return{$:2,a:e,b:n,c:r}})),Jv=function(e){return f(Iu,0,1,e>.04045?u(Oi,(e+.055)/1.055,2.4):e/12.92)},Kv=function(e){return f(qv,0,sv(function(e){var n=gc(e),r=n.cn,t=n.cf;return f(lf,Jv(n.cW),Jv(r),Jv(t))}(e)),sv(0))},Zv=function(e){return e.eJ},Qv=function(e){return e.fm},em=r((function(e,n){return e/n})),nm=a((function(e,n,r,t,o){for(;;){var a=t(n/r),i=u(yr,a,o);if(P(n,e))return i;e=e,n-=1,r=r,t=t,o=i}})),rm=r((function(e,n){return 1>e?N:d(nm,0,e,e,n,N)})),tm=r((function(e,n){var r=e.ee,t=e.N,o=t.a,a=t.b;return u(yr,{p:ud(e.p),ee:ld(r),N:u(wf,o,a)},n)})),om=r((function(e,n){var r=e,t=n,o=ku(t);return{bF:o*ku(r),bG:o*pv(r),bH:pv(t)}})),am=(ua=u(Xr,0,71),fa=u(rm,72,u(Eb,0,yv(1))),sa=rt(36),da=u(Xr,0,sa-1),ba=u(rm,sa,u(Eb,gu(90),gu(-90))),va=Dd(Xu(u(It,(function(e){return u(It,(function(n){return{p:u(om,e,n),ee:f(gd,u(Ms,vv(n)*vv(e),1),u(Ms,vv(n)*Tv(e),1),u(Ms,Tv(n),1)),N:L(u(em,e,yv(1)),u(em,u(cs,gu(90),n),gu(180)))}}),ba)}),fa))),ma=r((function(e,n){return e*(sa+1)+n})),pa=Xu(u(It,(function(e){return Xu(u(It,(function(n){var r=u(ma,e+1,n),t=u(ma,e,n),o=u(ma,e+1,n+1),a=u(ma,e,n+1);return z([w(a,o,r),w(a,r,t)])}),da))}),ua)),Js(function(e){var n=f(wr,tm,N,Fd(e));if(n.b){var r=n.a,t=n.b,o=u(Gd,n,Md(e));return s(Us,u(Cv,r,t),e,o,0)}return Ks}(u(_d,va,pa)))),im=r((function(e,n){for(;;){var r=u(vc,144,2*e+3),t=u(vc,144,2*e+2),o=2*e+1,a=2*e,i=u(yr,w(144,a,t),u(yr,w(a,r,t),u(yr,w(a,o,r),u(yr,w(o,145,r),n))));if(!e)return i;e-=1,n=i}})),cm=t((function(e,n,r){return r>.5?n+(1-r)*(e-n):e+r*(n-e)})),lm=(ga=u(r((function(e,n){for(;;){var r=f(cm,0,6.283185307179586,e/72),t=u(yr,{bL:r,b$:0,b5:1},u(yr,{bL:r,b$:1,b5:1},n));if(!e)return t;e-=1,n=t}})),71,z([{bL:0,b$:0,b5:0},{bL:0,b$:1,b5:0}])),u(Gd,ga,u(im,71,N))),um={src:"\n        precision highp float;\n        \n        attribute highp float angle;\n        attribute highp float offsetScale;\n        attribute highp float radiusScale;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const lowp float kPerspectiveProjection = 0.0;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec3 perpendicularTo(vec3 d) {\n            float absX = abs(d.x);\n            float absY = abs(d.y);\n            float absZ = abs(d.z);\n            if (absX <= absY) {\n                if (absX <= absZ) {\n                    float scale = 1.0 / length(d.zy);\n                    return vec3(0.0, -d.z * scale, d.y * scale);\n                } else {\n                    float scale = 1.0 / length(d.xy);\n                    return vec3(-d.y * scale, d.x * scale, 0.0);\n                }\n            } else {\n                if (absY <= absZ) {\n                    float scale = 1.0 / length(d.xz);\n                    return vec3(d.z * scale, 0.0, -d.x * scale);\n                } else {\n                    float scale = 1.0 / length(d.xy);\n                    return vec3(-d.y * scale, d.x * scale, 0.0);\n                }\n            }\n        }\n        \n        void main () {\n            vec4 worldCenter = getWorldPosition(vec3(0.0, 0.0, 0.0), modelScale, modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 zDirection = getDirectionToLight(worldCenter.xyz, xyz_type, rgb_parameter);\n            vec3 xDirection = perpendicularTo(zDirection);\n            vec3 yDirection = cross(zDirection, xDirection);\n            float r = modelScale.x;\n            float adjustedRadius = r;\n            float zOffset = 0.0;\n            if (xyz_type.w == kPointLight) {\n                float distanceToLight = length(xyz_type.xyz - worldCenter.xyz);\n                float rSquared = r * r;\n                zOffset = rSquared / distanceToLight;\n                float zSquared = zOffset * zOffset;\n                adjustedRadius = sqrt(rSquared - zSquared) * radiusScale;\n            }\n            vec3 worldPosition =\n                worldCenter.xyz\n                    + zDirection * zOffset\n                    + xDirection * adjustedRadius * cos(angle)\n                    + yDirection * adjustedRadius * sin(angle);\n            vec3 directionToLight = getDirectionToLight(worldPosition, xyz_type, rgb_parameter);\n            float sceneDiameter = sceneProperties[3][1];\n            vec3 offset = -sceneDiameter * offsetScale * directionToLight;\n            vec4 offsetPosition = vec4(worldPosition + offset, 1.0);\n            gl_Position = projectionMatrix * (viewMatrix * offsetPosition);\n        }\n    ",attributes:{angle:"bL",offsetScale:"b$",radiusScale:"b5"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"b7",viewMatrix:"f"}},fm=function(){return Zb(l((function(e,n,r,t,o,a,i,c){return d(Tf,u(iv,!0,c),um,tv,lm,{aE:f(lf,0,0,1),b:r,c:n,d:a,e:e,b7:i,f:o})})))},sm=r((function(e,n){return u(Jb,function(e){return{dC:!0,s:1,t:0,u:0,v:0,w:1,x:0,y:0,z:0,A:1,J:e.bF,K:e.bG,L:e.bH,b6:1}}(e),n)})),dm=o((function(e,n,r,t){var o,a=u(Wb,r,am),i=(o=L(e,n)).a?o.b?ps(z([a,fm()])):a:o.b?fm():qd,c=Qv(t);return u(sm,u(Mu,Hu,Zv(t)),u(rv,w(c,c,c),i))})),bm=r((function(e,n){return s(dm,!0,!0,e,n)})),vm=function(e){switch(e.$){case 0:var n=e.b;return z([u(fv,Kv(e.a),n)]);case 1:var r=e.b;return z([u(jv,Kv(e.a),r)]);case 3:var t=e.b;return z([u(bm,Kv(e.a),t)]);case 2:var o=e.b;return z([u(Hv,Kv(e.a),o)]);case 4:var a=e.b;return z([u(Xv,(i=e.a,u(dv,0,sv(function(e){var n=gc(e);return f(lf,n.cW,n.cn,n.cf)}(i)))),a)]);default:return u(qu,vm,e.a)}var i},mm=r((function(e,n){return r={ez:e.ez,dk:e.eD,eG:e.eG,eL:e.eL,dq:L(Ui(e.ad.dc),Ui(e.ad.co)),dv:(t=n,u(qu,vm,t)),eT:e.eT,fa:e.fa,fA:e.fA,fG:e.fG},u(Es,{ez:r.ez,dk:r.dk,eG:r.eG,eL:r.eL,dq:r.dq},z([{dv:r.dv,eT:r.eT,fa:r.fa,fA:r.fA,fG:r.fG}]));var r,t})),pm=r((function(e,n){var r=e,t=n.eO,o=t.bF,a=t.bG,i=t.bH,c=u(uf,n.cp,n.bO);return{bM:bs(c),eI:r,bS:ds(c),cT:0,b4:ss(c),c7:1,bF:-o,bG:-a,bH:-i}})),gm={bF:.37208,bG:.37529},hm=r((function(e,n){return{$:2,a:e,b:n}})),xm=function(e){return{$:0,a:e}},Cm=function(e){return e.eI},Pm=xm(Ps.a),Mm=r((function(e,n){return f(Et,r((function(n,r){var t=r.a,o=r.b;return e(n)?L(u(yr,n,t),o):L(t,u(yr,n,o))})),L(N,N),n)})),Tm=function(e){return sf({dK:e.bF,dL:e.b4,dM:0,dN:0,dO:e.bG,dP:e.bS,dQ:0,dR:0,dS:e.bH,dT:e.bM,dU:0,dV:0,dW:e.c7,dX:e.cT,dY:0,dZ:0})},ym=l((function(e,n,r,t,o,a,i,c){var l=u(Mm,Cm,z([e,n,r,t])),f=l.a;if(f.b){var s=F(f,l.b);if(s.b&&s.b.b&&s.b.b.b&&s.b.b.b.b&&!s.b.b.b.b.b){var d=s.a,b=s.b,v=b.a,m=b.b,p=m.a,g=m.b.a;return u(hm,u(It,Tm,f),{bo:u(Cs,d,v),bW:u(Cs,p,g),bX:u(Cs,o,a),bY:u(Cs,i,c)})}return Pm}return xm({bo:u(Cs,e,n),bW:u(Cs,r,t),bX:u(Cs,o,a),bY:u(Cs,i,c)})})),Lm=o((function(e,n,r,t){return m(ym,e,n,r,t,xs,xs,xs,xs)})),wm=r((function(e,n){return u(Ya,0,zi(u(Ro,(function(n){var r=n.b.b;return P(n.a,e)?kr(r):Br}),n.X)))})),Sm=r((function(e,n){return u(wm,e,n.aR)})),Fm=s(Ii,211/255,215/255,207/255,1),Nm={$:5},$m={bF:.44757,bG:.40745},Dm={$:1},zm=r((function(e,n){var r=e,t=n.ee,o=t.bF,a=t.bG,i=t.bH,c=u(uf,n.cp,n.bO);return{bM:bs(c),eI:r,bS:ds(c),cT:0,b4:ss(c),c7:2,bF:o,bG:a,bH:i}})),Hm=function(e){return u(zm,!0,{bO:e.bO,cp:e.cp,ee:e.ee})},_m=r((function(e,n){return{$:0,a:e,b:n}})),Am=r((function(e,n){return T(n,e)>-1})),Gm=r((function(e,n){return e+.5*(n-e)})),Rm={bF:-1,bG:0,bH:0},km={bF:0,bG:-1,bH:0},Bm=i((function(e,n,r,t,o,a){var i=u(Am,r,a)?_s:Pv,c=u(Am,n,o)?Ru:km,l=u(Am,e,t)?Ds:Rm,s=w(_u(u(Of,e,t)),_u(u(Of,n,o)),_u(u(Of,r,a)));return{eC:{cI:f(gd,u(Gm,e,t),u(Gm,n,o),u(Gm,r,a)),de:l,df:c,dg:i},dq:s}})),Vm=r((function(e,n){return b(Bm,td(e),od(e),ad(e),td(n),od(n),ad(n))})),Em=r((function(e,n){var r=w(n.a/2,n.b/2,n.c/2),t=r.a,o=r.b,a=r.c;return u(_m,e,u(Vm,f(rs,-t,-o,-a),f(rs,t,o,a)))})),Im=function(e){return{$:5,a:e}},jm=o((function(e,n,r,t){var o=w(e,n,r),a=o.a,i=o.b,c=o.c,l=c>.5?c+i-c*i:c*(i+1),u=2*c-l,f=function(e){var n=0>e?e+1:e>1?e-1:e;return 1>6*n?u+(l-u)*n*6:1>2*n?l:2>3*n?u+(l-u)*(2/3-n)*6:u},d=f(a-1/3),b=f(a),v=f(a+1/3);return s(Ii,v,b,d,t)})),Wm=t((function(e,n,r){return s(jm,e,n,r,1)})),Om=r((function(e,n){return{$:2,a:e,b:n}})),Um=r((function(e,n){return{$:4,a:e,b:n}})),Ym=r((function(e,n){return{$:3,a:e,b:n}})),Xm=r((function(e,n){return{$:1,a:e,b:n}})),qm=t((function(e,n,r){return{bF:e,bG:n,bH:r}})),Jm=r((function(e,n){return{bF:n.bF+e.bF,bG:n.bG+e.bG,bH:n.bH+e.bH}})),Km=r((function(e,n){return{cI:u(Jm,e,Yf(n)),de:Zf(n),df:Qf(n),dg:es(n)}})),Zm=r((function(e,n){return{eC:u(Km,e,Is(n)),dq:Yd(n)}})),Qm=r((function(e,n){return{eO:n,cI:e}})),ep=r((function(e,n){var r=n;return u(Qm,u(Jm,e,r.cI),r.eO)})),np=r((function(e,n){var r=n;return{l:u(ep,e,r.l),e8:r.e8,fm:r.fm}})),rp=r((function(e,n){var r=n.b;return L(e(n.a),e(r))})),tp=r((function(e,n){return u(rp,Jm(e),n)})),op=r((function(e,n){return{eJ:n,fm:_u(e)}})),ap=r((function(e,n){return u(op,Qv(n),u(Jm,e,Zv(n)))})),ip=r((function(e,n){var r=n.b,t=n.c;return w(e(n.a),e(r),e(t))})),cp=r((function(e,n){return u(ip,Jm(e),n)})),lp=r((function(e,n){var r=e.a,t=e.b,o=e.c,a=f(qm,r,t,o);switch(n.$){case 0:return u(_m,n.a,u(Zm,a,n.b));case 1:return u(Xm,n.a,u(cp,a,n.b));case 3:return u(Ym,n.a,u(ap,a,n.b));case 2:return u(Om,n.a,u(np,a,n.b));case 4:return u(Um,n.a,u(tp,a,n.b));default:var i=n.a;return Im(u(It,lp(w(r,t,o)),i))}})),up=function(e){return lp(w(e,0,0))},fp=t((function(e,n,r){var t=e,o=r,a=.5*n,i=ku(a),c=pv(a),l=t.eO,u=l.bF*c,f=i*u,s=u*u,d=l.bG*c,b=i*d,v=u*d,m=d*d,p=l.bH*c,g=i*p,h=u*p,x=d*p,C=p*p;return{bF:(1-2*(m+C))*o.bF+2*(v-g)*o.bG+2*(h+b)*o.bH,bG:2*(v+g)*o.bF+(1-2*(s+C))*o.bG+2*(x-f)*o.bH,bH:2*(h-b)*o.bF+2*(x+f)*o.bG+(1-2*(s+m))*o.bH}})),sp=t((function(e,n,r){var t=e,o=r,a=.5*n,i=ku(a),c=pv(a),l=t.cI,u=o.bF-l.bF,f=o.bG-l.bG,s=o.bH-l.bH,d=t.eO,b=d.bF*c,v=i*b,m=b*b,p=d.bG*c,g=i*p,h=b*p,x=p*p,C=d.bH*c,P=i*C,M=b*C,T=p*C,y=C*C;return{bF:l.bF+(1-2*(x+y))*u+2*(h-P)*f+2*(M+g)*s,bG:l.bG+2*(h+P)*u+(1-2*(m+y))*f+2*(T-v)*s,bH:l.bH+2*(M-g)*u+2*(T+v)*f+(1-2*(m+x))*s}})),dp=t((function(e,n,r){return{cI:f(sp,e,n,Yf(r)),de:f(fp,e,n,Zf(r)),df:f(fp,e,n,Qf(r)),dg:f(fp,e,n,es(r))}})),bp=t((function(e,n,r){return{eC:f(dp,e,n,Is(r)),dq:Yd(r)}})),vp=r((function(e,n){var r=u(sp,e,n),t=u(fp,e,n);return function(e){var n=e;return u(Qm,r(n.cI),t(n.eO))}})),mp=t((function(e,n,r){var t=r;return{l:f(vp,e,n,t.l),e8:t.e8,fm:t.fm}})),pp=t((function(e,n,r){return u(rp,u(sp,e,n),r)})),gp=t((function(e,n,r){return u(op,Qv(r),f(sp,e,n,Zv(r)))})),hp=t((function(e,n,r){return u(ip,u(sp,e,n),r)})),xp=t((function(e,n,r){switch(r.$){case 0:return u(_m,r.a,f(bp,e,n,r.b));case 1:return u(Xm,r.a,f(hp,e,n,r.b));case 3:return u(Ym,r.a,f(gp,e,n,r.b));case 2:return u(Om,r.a,f(mp,e,n,r.b));case 4:return u(Um,r.a,f(pp,e,n,r.b));default:var t=r.a;return Im(u(It,u(xp,e,n),t))}})),Cp=u(Qm,Hu,zs),Pp=r((function(e,n){return f(xp,Cp,e,n)})),Mp=u(Qm,Hu,Hs),Tp=r((function(e,n){return f(xp,Mp,e,n)})),yp=u(Qm,Hu,As),Lp=r((function(e,n){return f(xp,yp,e,n)})),wp=t((function(e,n,r){return{bF:e.bF+n*(r.bF-e.bF),bG:e.bG+n*(r.bG-e.bG),bH:e.bH+n*(r.bH-e.bH)}})),Sp=t((function(e,n,r){var t=Is(r),o=Zf(t),a=Qf(t),i=es(t),c=f(wp,e,n,Yf(t)),l=0>n?{cI:c,de:Ns(o),df:Ns(a),dg:Ns(i)}:{cI:c,de:o,df:a,dg:i},s=Yd(r),d=s.b,b=s.c;return{eC:l,dq:w(_u(u(Ms,n,s.a)),_u(u(Ms,n,d)),_u(u(Ms,n,b)))}})),Fp=function(e){return Fv(bv(e))},Np=t((function(e,n,r){var t=_u(u(Ms,n,Dv(r))),o=_u(u(Ms,n,$v(r))),a=0>n?Ns(Fp(r)):Fp(r),i=f(wp,e,n,function(e){return Nv(bv(e))}(r));return{l:u(Qm,i,a),e8:o,fm:t}})),$p=t((function(e,n,r){return u(rp,u(wp,e,n),r)})),Dp=t((function(e,n,r){return u(op,u(Ms,Cc(n),Qv(r)),f(wp,e,n,Zv(r)))})),zp=t((function(e,n,r){return u(ip,u(wp,e,n),r)})),Hp=r((function(e,n){switch(n.$){case 0:return u(_m,n.a,f(Sp,Hu,e,n.b));case 1:return u(Xm,n.a,f(zp,Hu,e,n.b));case 3:return u(Ym,n.a,f(Dp,Hu,e,n.b));case 2:return u(Om,n.a,f(Np,Hu,e,n.b));case 4:return u(Um,n.a,f($p,Hu,e,n.b));default:var r=n.a;return Im(u(It,Hp(e),r))}})),_p=function(e){var n=function(n){return s(Vu,0,1,4,e.a4+function(e){return.1*e}(n))};return Im(u(It,(function(r){return u(up,1.4*r,u(Lp,n(r),u(Pp,n(r),u(Tp,n(r),u(up,u(Sm,"a",e)*r,u(Hp,u(Sm,"a",e)*r,u(Em,f(Wm,n(r),.6,.8),w(1,3,1))))))))}),u(Xr,-10,10)))},Ap=r((function(e){return z([_p(e)])}));ha={Main:{init:s(su,r((function(e,n){var r,t,o,a=(r={dj:u(Sm,"azimuth for third light",e),bO:(t=f(Iu,1667,25e3,2e3),o=t>4e3?-3025846900/(t*t*t)+2107037.9/(t*t)+.2226347*1e3/t+.24039:-266123900.00000003/(t*t*t)-.2343589*1e6/(t*t)+877.6956/t+.17991,{bF:o,bG:t>2222?t>4e3?o*o*o*3.081758-o*o*5.8733867+3.75112997*o-.37001483:o*o*o*-.9549476-o*o*1.37418593+2.09137015*o-.16748867:o*o*o*-1.1063814-o*o*1.3481102+2.18555832*o-.20219683}),ds:u(Sm,"elevation for third light",e),cp:u(Oi,10,u(Sm,"lux",e))},u(pm,!0,{bO:r.bO,eO:u(om,r.dj,r.ds),cp:r.cp})),i=Hm({bO:gm,cp:6e3,ee:{bF:-45,bG:-30,bH:45}}),c=function(e){return function(e){for(;;){if(P(e.e5,0)&&P(e.e6,0))return xs;if(!u(yu,_u(e.e5),_u(e.e6))){var n=Cc(e.e6/pu),r=Cc(e.e5/pu),t=e.fB,o=t.bF,a=t.bG,i=t.bH,c=u(uf,1,e.bO);return{bM:r*bs(c),eI:!1,bS:r*ds(c),cT:n/r,b4:r*ss(c),c7:3,bF:o,bG:a,bH:i}}e={bO:e.bO,e5:e.e6,e6:e.e5,fB:Ns(e.fB)}}}({bO:e.bO,e5:e.e5,e6:e.e6,fB:u(om,e.dj,e.ds)})}({dj:u(Sm,"azimuth for fourth light",e),bO:gm,ds:u(Sm,"elevation for fourth light",e),e5:u(Sm,"intensity above",e),e6:u(Sm,"intensity below",e)}),l=Hm({bO:$m,cp:6e3,ee:{bF:-45,bG:30,bH:45}});return u(mm,{ez:Dm,eD:Fm,eG:Eu(e),eL:.1,eT:1.2*u(Oi,2,6),fa:s(Lm,l,i,a,c),ad:e.ad,fA:Nm,fG:gm},u(Ap,e,n))})),mu,vu,(function(){return{}}))(u(Ct,(function(e){return Lt({ck:e})}),u(Pt,"devicePixelRatio",Mt)))(0)}},e.Elm?function e(n,r){for(var t in r)t in n?"init"==t?C(6):e(n[t],r[t]):n[t]=r[t]}(e.Elm,ha):e.Elm=ha}(e);const n=e.Elm.Main.init({node:document.getElementById("elm-node"),flags:{devicePixelRatio:window.devicePixelRatio}});function r(e){const n=[];for(let r=0;r<e.length;r++)n.push({identifier:e[r].identifier,pageX:e[r].pageX,pageY:e[r].pageY});return n}window.addEventListener("touchstart",(e=>{n.ports.touchStart.send(r(e.changedTouches))})),window.addEventListener("touchmove",(e=>{n.ports.touchMove.send(r(e.changedTouches))})),window.addEventListener("touchend",(e=>{n.ports.touchEnd.send(r(e.changedTouches))})),window.addEventListener("touchcancel",(e=>{n.ports.touchCancel.send(r(e.changedTouches))}))}();
//# sourceMappingURL=index.c83cab73.js.map
