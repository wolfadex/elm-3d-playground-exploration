!function(){var n={};!function(n){function e(n,e,r){return r.a=n,r.f=e,r}function r(n){return e(2,n,(function(e){return function(r){return n(e,r)}}))}function t(n){return e(3,n,(function(e){return function(r){return function(t){return n(e,r,t)}}}))}function o(n){return e(4,n,(function(e){return function(r){return function(t){return function(o){return n(e,r,t,o)}}}}))}function a(n){return e(5,n,(function(e){return function(r){return function(t){return function(o){return function(a){return n(e,r,t,o,a)}}}}}))}function i(n){return e(6,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return n(e,r,t,o,a,i)}}}}}}))}function c(n){return e(7,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return n(e,r,t,o,a,i,c)}}}}}}}))}function l(n){return e(8,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return n(e,r,t,o,a,i,c,l)}}}}}}}}))}function u(n,e,r){return 2===n.a?n.f(e,r):n(e)(r)}function f(n,e,r,t){return 3===n.a?n.f(e,r,t):n(e)(r)(t)}function s(n,e,r,t,o){return 4===n.a?n.f(e,r,t,o):n(e)(r)(t)(o)}function d(n,e,r,t,o,a){return 5===n.a?n.f(e,r,t,o,a):n(e)(r)(t)(o)(a)}function m(n,e,r,t,o,a,i){return 6===n.a?n.f(e,r,t,o,a,i):n(e)(r)(t)(o)(a)(i)}function v(n,e,r,t,o,a,i,c){return 7===n.a?n.f(e,r,t,o,a,i,c):n(e)(r)(t)(o)(a)(i)(c)}function p(n,e,r,t,o,a,i,c,l){return 8===n.a?n.f(e,r,t,o,a,i,c,l):n(e)(r)(t)(o)(a)(i)(c)(l)}var b=t((function(n,e,r){for(var t=Array(n),o=0;n>o;o++)t[o]=r(e+o);return t})),g=r((function(n,e){for(var r=Array(n),t=0;n>t&&e.b;t++)r[t]=e.a,e=e.b;return r.length=t,L(r,e)})),h=r((function(n,e){return e[n]})),x=t((function(n,e,r){for(var t=r.length-1;t>=0;t--)e=u(n,r[t],e);return e}));function C(n){throw Error("https://github.com/elm/core/blob/1.0.0/hints/"+n+".md")}function P(n,e){for(var r,t=[],o=M(n,e,0,t);o&&(r=t.pop());o=M(r.a,r.b,0,t));return o}function M(n,e,r,t){if(n===e)return!0;if("object"!=typeof n||null===n||null===e)return"function"==typeof n&&C(5),!1;if(r>100)return t.push(L(n,e)),!0;for(var o in 0>n.$&&(n=Nr(n),e=Nr(e)),n)if(!M(n[o],e[o],r+1,t))return!1;return!0}function y(n,e,r){if("object"!=typeof n)return n===e?0:e>n?-1:1;if(void 0===n.$)return(r=y(n.a,e.a))||(r=y(n.b,e.b))?r:y(n.c,e.c);for(;n.b&&e.b&&!(r=y(n.a,e.a));n=n.b,e=e.b);return r||(n.b?1:e.b?-1:0)}var T=r((function(n,e){var r=y(n,e);return 0>r?zr:r?$r:Er}));function L(n,e){return{a:n,b:e}}function D(n,e,r){return{a:n,b:e,c:r}}function w(n,e){var r={};for(var t in n)r[t]=n[t];for(var t in e)r[t]=e[t];return r}function S(n,e){if("string"==typeof n)return n+e;if(!n.b)return e;var r=E(n.a,e);n=n.b;for(var t=r;n.b;n=n.b)t=t.b=E(n.a,e);return r}var N={$:0};function E(n,e){return{$:1,a:n,b:e}}var $=r(E);function z(n){for(var e=N,r=n.length;r--;)e=E(n[r],e);return e}function _(n){for(var e=[];n.b;n=n.b)e.push(n.a);return e}var A=t((function(n,e,r){for(var t=[];e.b&&r.b;e=e.b,r=r.b)t.push(u(n,e.a,r.a));return z(t)})),R=r((function(n,e){return n*e})),V=r(Math.pow),F=r((function(n,e){var r=e%n;return 0===n?C(11):r>0&&0>n||0>r&&n>0?r+n:r})),k=Math.cos,B=Math.sin,I=Math.tan,W=r(Math.atan2),j=Math.ceil,H=Math.floor,O=Math.round,U=Math.sqrt,X=Math.log,Y=isNaN,G=r((function(n,e){return n+e})),q=t((function(n,e,r){for(var t=r.length;t--;){var o=r[t],a=r.charCodeAt(t);56320>a||a>57343||(o=r[--t]+o),e=u(n,o,e)}return e})),J=r((function(n,e){return e.split(n)})),Z=r((function(n,e){return e.join(n)})),K=t((function(n,e,r){return r.slice(n,e)})),Q=r((function(n,e){return 0===e.indexOf(n)}));function nn(n){return n+""}function en(n){return{$:2,b:n}}var rn=en((function(n){return"number"!=typeof n?xn("an INT",n):n>-2147483647&&2147483647>n&&(0|n)===n?Fr(n):!isFinite(n)||n%1?xn("an INT",n):Fr(n)})),tn=en((function(n){return"boolean"==typeof n?Fr(n):xn("a BOOL",n)})),on=en((function(n){return"number"==typeof n?Fr(n):xn("a FLOAT",n)})),an=(en((function(n){return Fr(n)})),en((function(n){return"string"==typeof n?Fr(n):n instanceof String?Fr(n+""):xn("a STRING",n)}))),cn=r((function(n,e){return{$:6,d:n,b:e}}));function ln(n,e){return{$:9,f:n,g:e}}var un=r((function(n,e){return{$:10,b:e,h:n}})),fn=r((function(n,e){return ln(n,[e])})),sn=t((function(n,e,r){return ln(n,[e,r])})),dn=o((function(n,e,r,t){return ln(n,[e,r,t])})),mn=r((function(n,e){try{return pn(n,JSON.parse(e))}catch(n){return _r(u(Ar,"This is not valid JSON! "+n.message,e))}})),vn=r((function(n,e){return pn(n,e)}));function pn(n,e){switch(n.$){case 2:return n.b(e);case 5:return null===e?Fr(n.c):xn("null",e);case 3:return gn(e)?bn(n.b,e,z):xn("a LIST",e);case 4:return gn(e)?bn(n.b,e,hn):xn("an ARRAY",e);case 6:var r=n.d;if("object"!=typeof e||null===e||!(r in e))return xn("an OBJECT with a field named `"+r+"`",e);var t=pn(n.b,e[r]);return Ct(t)?t:_r(u(Rr,r,t.a));case 7:var o=n.e;return gn(e)?e.length>o?(t=pn(n.b,e[o]),Ct(t)?t:_r(u(Vr,o,t.a))):xn("a LONGER array. Need index "+o+" but only see "+e.length+" entries",e):xn("an ARRAY",e);case 8:if("object"!=typeof e||null===e||gn(e))return xn("an OBJECT",e);var a=N;for(var i in e)if(e.hasOwnProperty(i)){if(t=pn(n.b,e[i]),!Ct(t))return _r(u(Rr,i,t.a));a=E(L(i,t.a),a)}return Fr(Kr(a));case 9:for(var c=n.f,l=n.g,f=0;l.length>f;f++){if(t=pn(l[f],e),!Ct(t))return t;c=c(t.a)}return Fr(c);case 10:return t=pn(n.b,e),Ct(t)?pn(n.h(t.a),e):t;case 11:for(var s=N,d=n.g;d.b;d=d.b){if(t=pn(d.a,e),Ct(t))return t;s=E(t.a,s)}return _r(kr(Kr(s)));case 1:return _r(u(Ar,n.a,e));case 0:return Fr(n.a)}}function bn(n,e,r){for(var t=e.length,o=Array(t),a=0;t>a;a++){var i=pn(n,e[a]);if(!Ct(i))return _r(u(Vr,a,i.a));o[a]=i.a}return Fr(r(o))}function gn(n){return Array.isArray(n)||"undefined"!=typeof FileList&&n instanceof FileList}function hn(n){return u(xt,n.length,(function(e){return n[e]}))}function xn(n,e){return _r(u(Ar,"Expecting "+n,e))}function Cn(n,e){if(n===e)return!0;if(n.$!==e.$)return!1;switch(n.$){case 0:case 1:return n.a===e.a;case 2:return n.b===e.b;case 5:return n.c===e.c;case 3:case 4:case 8:return Cn(n.b,e.b);case 6:return n.d===e.d&&Cn(n.b,e.b);case 7:return n.e===e.e&&Cn(n.b,e.b);case 9:return n.f===e.f&&Pn(n.g,e.g);case 10:return n.h===e.h&&Cn(n.b,e.b);case 11:return Pn(n.g,e.g)}}function Pn(n,e){var r=n.length;if(r!==e.length)return!1;for(var t=0;r>t;t++)if(!Cn(n[t],e[t]))return!1;return!0}var Mn=r((function(n,e){return JSON.stringify(e,null,n)+""}));function yn(n){return n}var Tn=t((function(n,e,r){return r[n]=e,r}));function Ln(n){return{$:0,a:n}}function Dn(n){return{$:2,b:n,c:null}}var wn=r((function(n,e){return{$:3,b:n,d:e}})),Sn=0;function Nn(n){var e={$:0,e:Sn++,f:n,g:null,h:[]};return Rn(e),e}function En(n){return Dn((function(e){e(Ln(Nn(n)))}))}function $n(n,e){n.h.push(e),Rn(n)}var zn=r((function(n,e){return Dn((function(r){$n(n,e),r(Ln(0))}))})),_n=!1,An=[];function Rn(n){if(An.push(n),!_n){for(_n=!0;n=An.shift();)Vn(n);_n=!1}}function Vn(n){for(;n.f;){var e=n.f.$;if(0===e||1===e){for(;n.g&&n.g.$!==e;)n.g=n.g.i;if(!n.g)return;n.f=n.g.b(n.f.a),n.g=n.g.i}else{if(2===e)return void(n.f.c=n.f.b((function(e){n.f=e,Rn(n)})));if(5===e){if(0===n.h.length)return;n.f=n.f.b(n.h.shift())}else n.g={$:3===e?0:1,b:n.f.b,i:n.g},n.f=n.f.d}}}var Fn={};function kn(n,e,r,t,o){return{b:n,c:e,d:r,e:t,f:o}}function Bn(n,e){var r={g:e,h:void 0},t=n.c,o=n.d,a=n.e,i=n.f;return r.h=Nn(u(wn,(function n(e){return u(wn,n,{$:5,b:function(n){var c=n.a;return 0===n.$?f(o,r,c,e):a&&i?s(t,r,c.i,c.j,e):f(t,r,a?c.i:c.j,e)}})}),n.b))}var In=r((function(n,e){return Dn((function(r){n.g(e),r(Ln(0))}))})),Wn=r((function(n,e){return u(zn,n.h,{$:0,a:e})}));function jn(n){return function(e){return{$:1,k:n,l:e}}}function Hn(n){return{$:2,m:n}}var On=r((function(n,e){return{$:3,n:n,o:e}})),Un=[],Xn=!1;function Yn(n,e,r){if(Un.push({p:n,q:e,r:r}),!Xn){Xn=!0;for(var t;t=Un.shift();)Gn(t.p,t.q,t.r);Xn=!1}}function Gn(n,e,r){var t={};for(var o in qn(!0,e,t,null),qn(!1,r,t,null),n)$n(n[o],{$:"fx",a:t[o]||{i:N,j:N}})}function qn(n,e,r,t){switch(e.$){case 1:var o=e.k,a=function(n,e,r,t){return u(n?Fn[e].e:Fn[e].f,(function(n){for(var e=r;e;e=e.t)n=e.s(n);return n}),t)}(n,o,t,e.l);return void(r[o]=function(n,e,r){return r=r||{i:N,j:N},n?r.i=E(e,r.i):r.j=E(e,r.j),r}(n,a,r[o]));case 2:for(var i=e.m;i.b;i=i.b)qn(n,i.a,r,t);return;case 3:return void qn(n,e.o,r,{s:e.n,t:t})}}function Jn(n,e){return function(n){Fn[n]&&C(3)}(n),Fn[n]={f:Zn,u:e,a:Kn},jn(n)}var Zn=r((function(n,e){return function(r){return n(e(r))}}));function Kn(n,e){var r=N,o=Fn[n].u,a=Ln(null);return Fn[n].b=a,Fn[n].c=t((function(n,e){return r=e,a})),{send:function(n){var t=u(vn,o,n);Ct(t)||C(4);for(var a=t.a,i=r;i.b;i=i.b)e(i.a(a))}}}var Qn="undefined"!=typeof document?document:{};function ne(n,e){n.appendChild(e)}function ee(n){return{$:0,a:n}}var re,te=r((function(n,e){return r((function(r,t){for(var o=[],a=0;t.b;t=t.b){var i=t.a;a+=i.b||0,o.push(i)}return a+=o.length,{$:1,c:e,d:fe(r),e:o,f:n,b:a}}))}))(void 0),oe=r((function(n,e){return r((function(r,t){for(var o=[],a=0;t.b;t=t.b){var i=t.a;a+=i.b.b||0,o.push(i)}return a+=o.length,{$:2,c:e,d:fe(r),e:o,f:n,b:a}}))}))(void 0),ae=r((function(n,e){return{$:4,j:n,k:e,b:1+(e.b||0)}})),ie=r((function(n,e){return{$:"a0",n:n,o:e}})),ce=r((function(n,e){return{$:"a1",n:n,o:e}})),le=r((function(n,e){return{$:"a2",n:n,o:e}})),ue=r((function(n,e){return{$:"a3",n:n,o:e}}));function fe(n){for(var e={};n.b;n=n.b){var r=n.a,t=r.$,o=r.n,a=r.o;if("a2"!==t){var i=e[t]||(e[t]={});"a3"===t&&"class"===o?se(i,o,a):i[o]=a}else"className"===o?se(e,o,a):e[o]=a}return e}function se(n,e,r){var t=n[e];n[e]=t?t+" "+r:r}function de(n,e){var r=n.$;if(5===r)return de(n.k||(n.k=n.m()),e);if(0===r)return Qn.createTextNode(n.a);if(4===r){for(var t=n.k,o=n.j;4===t.$;)"object"!=typeof o?o=[o,t.j]:o.push(t.j),t=t.k;var a={j:o,p:e};return(i=de(t,a)).elm_event_node_ref=a,i}if(3===r)return me(i=n.h(n.g),e,n.d),i;var i=n.f?Qn.createElementNS(n.f,n.c):Qn.createElement(n.c);me(i,e,n.d);for(var c=n.e,l=0;c.length>l;l++)ne(i,de(1===r?c[l]:c[l].b,e));return i}function me(n,e,r){for(var t in r){var o=r[t];"a1"===t?ve(n,o):"a0"===t?ge(n,e,o):"a3"===t?pe(n,o):"a4"===t?be(n,o):("value"!==t&&"checked"!==t||n[t]!==o)&&(n[t]=o)}}function ve(n,e){var r=n.style;for(var t in e)r[t]=e[t]}function pe(n,e){for(var r in e){var t=e[r];void 0!==t?n.setAttribute(r,t):n.removeAttribute(r)}}function be(n,e){for(var r in e){var t=e[r],o=t.f,a=t.o;void 0!==a?n.setAttributeNS(o,r,a):n.removeAttributeNS(o,r)}}function ge(n,e,r){var t=n.elmFs||(n.elmFs={});for(var o in r){var a=r[o],i=t[o];if(a){if(i){if(i.q.$===a.$){i.q=a;continue}n.removeEventListener(o,i)}i=he(e,a),n.addEventListener(o,i,re&&{passive:2>St(a)}),t[o]=i}else n.removeEventListener(o,i),t[o]=void 0}}try{window.addEventListener("t",null,Object.defineProperty({},"passive",{get:function(){re=!0}}))}catch(n){}function he(n,e){function r(e){var t=r.q,o=pn(t.a,e);if(Ct(o)){for(var a,i=St(t),c=o.a,l=i?3>i?c.a:c.as:c,u=1==i?c.b:3==i&&c.c4,f=(u&&e.stopPropagation(),(2==i?c.b:3==i&&c.cU)&&e.preventDefault(),n);a=f.j;){if("function"==typeof a)l=a(l);else for(var s=a.length;s--;)l=a[s](l);f=f.p}f(l,u)}}return r.q=e,r}function xe(n,e){return n.$==e.$&&Cn(n.a,e.a)}function Ce(n,e,r,t){var o={$:e,r:r,s:t,t:void 0,u:void 0};return n.push(o),o}function Pe(n,e,r,t){if(n!==e){var o=n.$,a=e.$;if(o!==a){if(1!==o||2!==a)return void Ce(r,0,t,e);e=function(n){for(var e=n.e,r=e.length,t=Array(r),o=0;r>o;o++)t[o]=e[o].b;return{$:1,c:n.c,d:n.d,e:t,f:n.f,b:n.b}}(e),a=1}switch(a){case 5:for(var i=n.l,c=e.l,l=i.length,u=l===c.length;u&&l--;)u=i[l]===c[l];if(u)return void(e.k=n.k);e.k=e.m();var f=[];return Pe(n.k,e.k,f,0),void(f.length>0&&Ce(r,1,t,f));case 4:for(var s=n.j,d=e.j,m=!1,v=n.k;4===v.$;)m=!0,"object"!=typeof s?s=[s,v.j]:s.push(v.j),v=v.k;for(var p=e.k;4===p.$;)m=!0,"object"!=typeof d?d=[d,p.j]:d.push(p.j),p=p.k;return m&&s.length!==d.length?void Ce(r,0,t,e):((m?function(n,e){for(var r=0;n.length>r;r++)if(n[r]!==e[r])return!1;return!0}(s,d):s===d)||Ce(r,2,t,d),void Pe(v,p,r,t+1));case 0:return void(n.a!==e.a&&Ce(r,3,t,e.a));case 1:return void Me(n,e,r,t,Te);case 2:return void Me(n,e,r,t,Le);case 3:if(n.h!==e.h)return void Ce(r,0,t,e);var b=ye(n.d,e.d);b&&Ce(r,4,t,b);var g=e.i(n.g,e.g);return void(g&&Ce(r,5,t,g))}}}function Me(n,e,r,t,o){if(n.c===e.c&&n.f===e.f){var a=ye(n.d,e.d);a&&Ce(r,4,t,a),o(n,e,r,t)}else Ce(r,0,t,e)}function ye(n,e,r){var t;for(var o in n)if("a1"!==o&&"a0"!==o&&"a3"!==o&&"a4"!==o)if(o in e){var a=n[o],i=e[o];a===i&&"value"!==o&&"checked"!==o||"a0"===r&&xe(a,i)||((t=t||{})[o]=i)}else(t=t||{})[o]=r?"a1"===r?"":"a0"===r||"a3"===r?void 0:{f:n[o].f,o:void 0}:"string"==typeof n[o]?"":null;else{var c=ye(n[o],e[o]||{},o);c&&((t=t||{})[o]=c)}for(var l in e)l in n||((t=t||{})[l]=e[l]);return t}function Te(n,e,r,t){var o=n.e,a=e.e,i=o.length,c=a.length;i>c?Ce(r,6,t,{v:c,i:i-c}):c>i&&Ce(r,7,t,{v:i,e:a});for(var l=c>i?i:c,u=0;l>u;u++){var f=o[u];Pe(f,a[u],r,++t),t+=f.b||0}}function Le(n,e,r,t){for(var o=[],a={},i=[],c=n.e,l=e.e,u=c.length,f=l.length,s=0,d=0,m=t;u>s&&f>d;){var v=(D=c[s]).a,p=(w=l[d]).a,b=D.b,g=w.b,h=void 0,x=void 0;if(v!==p){var C=c[s+1],P=l[d+1];if(C){var M=C.a,y=C.b;x=p===M}if(P){var T=P.a,L=P.b;h=v===T}if(h&&x)Pe(b,L,o,++m),we(a,o,v,g,d,i),m+=b.b||0,Se(a,o,v,y,++m),m+=y.b||0,s+=2,d+=2;else if(h)m++,we(a,o,p,g,d,i),Pe(b,L,o,m),m+=b.b||0,s+=1,d+=2;else if(x)Se(a,o,v,b,++m),m+=b.b||0,Pe(y,g,o,++m),m+=y.b||0,s+=2,d+=1;else{if(!C||M!==T)break;Se(a,o,v,b,++m),we(a,o,p,g,d,i),m+=b.b||0,Pe(y,L,o,++m),m+=y.b||0,s+=2,d+=2}}else Pe(b,g,o,++m),m+=b.b||0,s++,d++}for(;u>s;){var D;m++,Se(a,o,(D=c[s]).a,b=D.b,m),m+=b.b||0,s++}for(;f>d;){var w,S=S||[];we(a,o,(w=l[d]).a,w.b,void 0,S),d++}(o.length>0||i.length>0||S)&&Ce(r,8,t,{w:o,x:i,y:S})}var De="_elmW6BL";function we(n,e,r,t,o,a){var i=n[r];if(!i)return a.push({r:o,A:i={c:0,z:t,r:o,s:void 0}}),void(n[r]=i);if(1===i.c){a.push({r:o,A:i}),i.c=2;var c=[];return Pe(i.z,t,c,i.r),i.r=o,void(i.s.s={w:c,A:i})}we(n,e,r+De,t,o,a)}function Se(n,e,r,t,o){var a=n[r];if(a){if(0===a.c){a.c=2;var i=[];return Pe(t,a.z,i,o),void Ce(e,9,o,{w:i,A:a})}Se(n,e,r+De,t,o)}else{var c=Ce(e,9,o,void 0);n[r]={c:1,z:t,r:o,s:c}}}function Ne(n,e,r,t){Ee(n,e,r,0,0,e.b,t)}function Ee(n,e,r,t,o,a,i){for(var c=r[t],l=c.r;l===o;){var u=c.$;if(1===u)Ne(n,e.k,c.s,i);else if(8===u)c.t=n,c.u=i,(f=c.s.w).length>0&&Ee(n,e,f,0,o,a,i);else if(9===u){c.t=n,c.u=i;var f,s=c.s;s&&(s.A.s=n,(f=s.w).length>0&&Ee(n,e,f,0,o,a,i))}else c.t=n,c.u=i;if(!(c=r[++t])||(l=c.r)>a)return t}var d=e.$;if(4===d){for(var m=e.k;4===m.$;)m=m.k;return Ee(n,m,r,t,o+1,a,n.elm_event_node_ref)}for(var v=e.e,p=n.childNodes,b=0;v.length>b;b++){o++;var g=1===d?v[b]:v[b].b,h=o+(g.b||0);if(!(o>l||l>h||(c=r[t=Ee(p[b],g,r,t,o,h,i)])&&(l=c.r)<=a))return t;o=h}return t}function $e(n,e){for(var r=0;e.length>r;r++){var t=e[r],o=t.t,a=ze(o,t);o===n&&(n=a)}return n}function ze(n,e){switch(e.$){case 0:return function(n,e,r){var t=n.parentNode,o=de(e,r);return o.elm_event_node_ref||(o.elm_event_node_ref=n.elm_event_node_ref),t&&o!==n&&t.replaceChild(o,n),o}(n,e.s,e.u);case 4:return me(n,e.u,e.s),n;case 3:return n.replaceData(0,n.length,e.s),n;case 1:return $e(n,e.s);case 2:return n.elm_event_node_ref?n.elm_event_node_ref.j=e.s:n.elm_event_node_ref={j:e.s,p:e.u},n;case 6:for(var r=e.s,t=0;r.i>t;t++)n.removeChild(n.childNodes[r.v]);return n;case 7:for(var o=(r=e.s).e,a=n.childNodes[t=r.v];o.length>t;t++)n.insertBefore(de(o[t],e.u),a);return n;case 9:if(!(r=e.s))return n.parentNode.removeChild(n),n;var i=r.A;return void 0!==i.r&&n.parentNode.removeChild(n),i.s=$e(n,r.w),n;case 8:return function(n,e){var r=e.s,t=function(n,e){if(n){for(var r=Qn.createDocumentFragment(),t=0;n.length>t;t++){var o=n[t].A;ne(r,2===o.c?o.s:de(o.z,e.u))}return r}}(r.y,e);n=$e(n,r.w);for(var o=r.x,a=0;o.length>a;a++){var i=o[a],c=i.A,l=2===c.c?c.s:de(c.z,e.u);n.insertBefore(l,n.childNodes[i.r])}return t&&ne(n,t),n}(n,e);case 5:return e.s(n);default:C(10)}}function _e(n){if(3===n.nodeType)return ee(n.textContent);if(1!==n.nodeType)return ee("");for(var e=N,r=n.attributes,t=r.length;t--;){var o=r[t];e=E(u(ue,o.name,o.value),e)}var a=n.tagName.toLowerCase(),i=N,c=n.childNodes;for(t=c.length;t--;)i=E(_e(c[t]),i);return f(te,a,e,i)}var Ae=o((function(n,e,r,t){return function(n,e,r,t,o,a){var i=u(vn,n,e?e.flags:void 0);Ct(i)||C(2);var c={},l=r(i.a),f=l.a,s=a(m,f),d=function(n,e){var r;for(var t in Fn){var o=Fn[t];o.a&&((r=r||{})[t]=o.a(t,e)),n[t]=Bn(o,e)}return r}(c,m);function m(n,e){var r=u(t,n,f);s(f=r.a,e),Yn(c,r.b,o(f))}return Yn(c,l.b,o(f)),d?{ports:d}:{}}(e,t,n.e4,n.fz,n.ft,(function(e,r){var o=n.fB,a=t.node,i=_e(a);return function(n,e){e(n);var r=0;function t(){r=1===r?0:(Ve(t),e(n),1)}return function(o,a){n=o,a?(e(n),2===r&&(r=1)):(0===r&&Ve(t),r=2)}}(r,(function(n){var r=o(n),t=function(n,e){var r=[];return Pe(n,e,r,0),r}(i,r);a=function(n,e,r,t){return 0===r.length?n:(Ne(n,e,r,t),$e(n,r))}(a,i,t,e),i=r}))}))})),Re="undefined"!=typeof cancelAnimationFrame?cancelAnimationFrame:function(n){clearTimeout(n)},Ve="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:function(n){return setTimeout(n,1e3/60)},Fe={addEventListener:function(){},removeEventListener:function(){}},ke="undefined"!=typeof document?document:Fe,Be="undefined"!=typeof window?window:Fe,Ie=t((function(n,e,r){return En(Dn((function(){function t(n){Nn(r(n))}return n.addEventListener(e,t,re&&{passive:!0}),function(){n.removeEventListener(e,t)}})))})),We=r((function(n,e){var r=pn(n,e);return Ct(r)?Br(r.a):Ir})),je=r((function(n,e){var r="g";n.fb&&(r+="m"),n.eK&&(r+="i");try{return Br(RegExp(e,r))}catch(n){return Ir}})),He=t((function(n,e,r){for(var t,o=[],a=0,i=r,c=e.lastIndex,l=-1;a++<n&&(t=e.exec(i))&&l!=e.lastIndex;){for(var u=t.length-1,f=Array(u);u>0;){var d=t[u];f[--u]=d?Br(d):Ir}o.push(s(bi,t[0],t.index,a,z(f))),l=e.lastIndex}return e.lastIndex=c,z(o)})),Oe=0;function Ue(n,e){for(;e.b;e=e.b)n(e.a)}function Xe(n){for(var e=0;n.b;n=n.b)e++;return e}var Ye="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:function(n){setTimeout(n,1e3/60)},Ge=a((function(n,e,r,t,o){return{$:0,a:n,b:e,c:r,d:t,e:o}})),qe=r((function(n,e){var r=n.blend;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.BLEND),r.enabled=!0),r.a===e.a&&r.d===e.d||(n.gl.blendEquationSeparate(e.a,e.d),r.a=e.a,r.d=e.d),r.b===e.b&&r.c===e.c&&r.e===e.e&&r.f===e.f||(n.gl.blendFuncSeparate(e.b,e.c,e.e,e.f),r.b=e.b,r.c=e.c,r.e=e.e,r.f=e.f),r.g===e.g&&r.h===e.h&&r.i===e.i&&r.j===e.j||(n.gl.blendColor(e.g,e.h,e.i,e.j),r.g=e.g,r.h=e.h,r.i=e.i,r.j=e.j)})),Je=r((function(n,e){var r=n.depthTest;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.DEPTH_TEST),r.enabled=!0),r.a!==e.a&&(n.gl.depthFunc(e.a),r.a=e.a),r.b!==e.b&&(n.gl.depthMask(e.b),r.b=e.b),r.c===e.c&&r.d===e.d||(n.gl.depthRange(e.c,e.d),r.c=e.c,r.d=e.d)})),Ze=r((function(n,e){var r=n.stencilTest;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.STENCIL_TEST),r.enabled=!0),r.d===e.d&&r.a===e.a&&r.b===e.b||(n.gl.stencilFuncSeparate(n.gl.FRONT,e.d,e.a,e.b),r.d=e.d),r.e===e.e&&r.f===e.f&&r.g===e.g||(n.gl.stencilOpSeparate(n.gl.FRONT,e.e,e.f,e.g),r.e=e.e,r.f=e.f,r.g=e.g),r.c!==e.c&&(n.gl.stencilMask(e.c),r.c=e.c),r.h===e.h&&r.a===e.a&&r.b===e.b||(n.gl.stencilFuncSeparate(n.gl.BACK,e.h,e.a,e.b),r.h=e.h,r.a=e.a,r.b=e.b),r.i===e.i&&r.j===e.j&&r.k===e.k||(n.gl.stencilOpSeparate(n.gl.BACK,e.i,e.j,e.k),r.i=e.i,r.j=e.j,r.k=e.k)})),Ke=r((function(n,e){var r=n.scissor;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.SCISSOR_TEST),r.enabled=!0),r.a===e.a&&r.b===e.b&&r.c===e.c&&r.d===e.d||(n.gl.scissor(e.a,e.b,e.c,e.d),r.a=e.a,r.b=e.b,r.c=e.c,r.d=e.d)})),Qe=r((function(n,e){var r=n.colorMask;r.toggle=n.toggle,r.enabled=!0,r.a===e.a&&r.b===e.b&&r.c===e.c&&r.d===e.d||(n.gl.colorMask(e.a,e.b,e.c,e.d),r.a=e.a,r.b=e.b,r.c=e.c,r.d=e.d)})),nr=r((function(n,e){var r=n.cullFace;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.CULL_FACE),r.enabled=!0),r.a!==e.a&&(n.gl.cullFace(e.a),r.a=e.a)})),er=r((function(n,e){var r=n.polygonOffset;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.POLYGON_OFFSET_FILL),r.enabled=!0),r.a===e.a&&r.b===e.b||(n.gl.polygonOffset(e.a,e.b),r.a=e.a,r.b=e.b)})),rr=r((function(n,e){var r=n.sampleCoverage;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.SAMPLE_COVERAGE),r.enabled=!0),r.a===e.a&&r.b===e.b||(n.gl.sampleCoverage(e.a,e.b),r.a=e.a,r.b=e.b)})),tr=function(n){n.scissor.enabled&&(n.gl.disable(n.gl.SCISSOR_TEST),n.scissor.enabled=!1)},or=function(n){var e=n.colorMask;e.a&&e.b&&e.c&&e.d||(n.gl.colorMask(!0,!0,!0,!0),e.a=!0,e.b=!0,e.c=!0,e.d=!0)},ar=["blend","depthTest","stencilTest","scissor","colorMask","cullFace","polygonOffset","sampleCoverage","sampleAlphaToCoverage"],ir=[function(n){n.blend.enabled&&(n.gl.disable(n.gl.BLEND),n.blend.enabled=!1)},function(n){n.depthTest.enabled&&(n.gl.disable(n.gl.DEPTH_TEST),n.depthTest.enabled=!1)},function(n){n.stencilTest.enabled&&(n.gl.disable(n.gl.STENCIL_TEST),n.stencilTest.enabled=!1)},tr,or,function(n){n.gl.disable(n.gl.CULL_FACE)},function(n){n.gl.disable(n.gl.POLYGON_OFFSET_FILL)},function(n){n.gl.disable(n.gl.SAMPLE_COVERAGE)},function(n){n.gl.disable(n.gl.SAMPLE_ALPHA_TO_COVERAGE)}];function cr(n,e,r){var t=n.createShader(r);return n.shaderSource(t,"#extension GL_OES_standard_derivatives : enable\n"+e),n.compileShader(t),t}function lr(n,e){switch(e){case n.FLOAT:return{size:1,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC2:return{size:2,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC3:return{size:3,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC4:return{size:4,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_MAT4:return{size:4,arraySize:4,type:Float32Array,baseType:n.FLOAT};case n.INT:return{size:1,arraySize:1,type:Int32Array,baseType:n.INT}}}function ur(n,e,r,t){for(var o=r.a.dq,a=[],i=0;o>i;i++)a.push(String.fromCharCode(97+i));var c=lr(n,e.type);if(void 0===c)throw Error("No info available for: "+e.type);var l=0,u=c.size*c.arraySize*o,f=new c.type(Xe(r.b)*u);Ue((function(n){!function(n,e,r,t,i){var c;if(1===o)for(c=0;e>c;c++)n[r++]=1===e?t[i]:t[i][c];else a.forEach((function(o){for(c=0;e>c;c++)n[r++]=1===e?t[o][i]:t[o][i][c]}))}(f,c.size*c.arraySize,l,n,t[e.name]||e.name),l+=u}),r.b);var s=n.createBuffer();return n.bindBuffer(n.ARRAY_BUFFER,s),n.bufferData(n.ARRAY_BUFFER,f,n.STATIC_DRAW),s}function fr(n,e){return n+"#"+e}var sr=r((function(n,e){var r=n.f,t=r.gl;return t?(t.viewport(0,0,t.drawingBufferWidth,t.drawingBufferHeight),r.depthTest.b||(t.depthMask(!0),r.depthTest.b=!0),r.stencilTest.c!==r.STENCIL_WRITEMASK&&(t.stencilMask(r.STENCIL_WRITEMASK),r.stencilTest.c=r.STENCIL_WRITEMASK),tr(r),or(r),t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT|t.STENCIL_BUFFER_BIT),Ue((function(e){if(e.d.b.b){var o,a,i,c,l;if(e.b.id&&e.c.id&&(o=fr(e.b.id,e.c.id),a=r.programs[o]),!a){var u,f;e.b.id?u=r.shaders[e.b.id]:e.b.id=Oe++,u||(u=cr(t,e.b.src,t.VERTEX_SHADER),r.shaders[e.b.id]=u),e.c.id?f=r.shaders[e.c.id]:e.c.id=Oe++,f||(f=cr(t,e.c.src,t.FRAGMENT_SHADER),r.shaders[e.c.id]=f);var s=function(n,e,r){var t=n.createProgram();if(n.attachShader(t,e),n.attachShader(t,r),n.linkProgram(t),!n.getProgramParameter(t,n.LINK_STATUS))throw"Link failed: "+n.getProgramInfoLog(t)+"\nvs info-log: "+n.getShaderInfoLog(e)+"\nfs info-log: "+n.getShaderInfoLog(r);return t}(t,u,f);(a={glProgram:s,attributes:Object.assign({},e.b.attributes,e.c.attributes),currentUniforms:{},activeAttributes:[],activeAttributeLocations:[]}).uniformSetters=function(n,e,r,t){var o=r.glProgram,a=r.currentUniforms,i=0,c=e.f;function l(e,r){var t=r.name,o=n.getUniformLocation(e,t);switch(r.type){case n.INT:return function(e){a[t]!==e&&(n.uniform1i(o,e),a[t]=e)};case n.FLOAT:return function(e){a[t]!==e&&(n.uniform1f(o,e),a[t]=e)};case n.FLOAT_VEC2:return function(e){a[t]!==e&&(n.uniform2f(o,e[0],e[1]),a[t]=e)};case n.FLOAT_VEC3:return function(e){a[t]!==e&&(n.uniform3f(o,e[0],e[1],e[2]),a[t]=e)};case n.FLOAT_VEC4:return function(e){a[t]!==e&&(n.uniform4f(o,e[0],e[1],e[2],e[3]),a[t]=e)};case n.FLOAT_MAT4:return function(e){a[t]!==e&&(n.uniformMatrix4fv(o,!1,new Float32Array(e)),a[t]=e)};case n.SAMPLER_2D:var l=i++;return function(e){n.activeTexture(n.TEXTURE0+l);var r=c.textures.get(e);r||(r=e.eO(n),c.textures.set(e,r)),n.bindTexture(n.TEXTURE_2D,r),a[t]!==e&&(n.uniform1i(o,l),a[t]=e)};case n.BOOL:return function(e){a[t]!==e&&(n.uniform1i(o,e),a[t]=e)};default:return function(){}}}for(var u={},f=n.getProgramParameter(o,n.ACTIVE_UNIFORMS),s=0;f>s;s++){var d=n.getActiveUniform(o,s);u[t[d.name]||d.name]=l(o,d)}return u}(t,n,a,Object.assign({},e.b.uniforms,e.c.uniforms));var d=t.getProgramParameter(s,t.ACTIVE_ATTRIBUTES);for(i=0;d>i;i++){var m=t.getActiveAttrib(s,i),v=t.getAttribLocation(s,m.name);a.activeAttributes.push(m),a.activeAttributeLocations.push(v)}o=fr(e.b.id,e.c.id),r.programs[o]=a}r.lastProgId!==o&&(t.useProgram(a.glProgram),r.lastProgId=o),c=a.uniformSetters,Object.keys(l=e.e).forEach((function(n){var e=c[n];e&&e(l[n])}));var p=r.buffers.get(e.d);for(p||(p=function(n,e){if(e.a.dB>0){var r=n.createBuffer(),t=function(n,e){var r,t=new Uint32Array(Xe(n)*e),o=0;return Ue((function(n){if(1===e)t[o++]=n;else for(r=0;e>r;r++)t[o++]=n[String.fromCharCode(97+r)]}),n),t}(e.c,e.a.dB);return n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,r),n.bufferData(n.ELEMENT_ARRAY_BUFFER,t,n.STATIC_DRAW),{numIndices:t.length,indexBuffer:r,buffers:{}}}return{numIndices:e.a.dq*Xe(e.b),indexBuffer:null,buffers:{}}}(t,e.d),r.buffers.set(e.d,p)),i=0;a.activeAttributes.length>i;i++){v=a.activeAttributeLocations[i],void 0===p.buffers[(m=a.activeAttributes[i]).name]&&(p.buffers[m.name]=ur(t,m,e.d,a.attributes)),t.bindBuffer(t.ARRAY_BUFFER,p.buffers[m.name]);var b=lr(t,m.type);if(1===b.arraySize)t.enableVertexAttribArray(v),t.vertexAttribPointer(v,b.size,b.baseType,!1,0,0);else for(var g=4*b.size,h=g*b.arraySize,x=0;b.arraySize>x;x++)t.enableVertexAttribArray(v+x),t.vertexAttribPointer(v+x,b.size,b.baseType,!1,h,g*x)}for(r.toggle=!r.toggle,Ue(ts(r),e.a),i=0;9>i;i++){var C=r[ar[i]];C.toggle!==r.toggle&&C.enabled&&(ir[i](r),C.enabled=!1,C.toggle=r.toggle)}p.indexBuffer?(t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,p.indexBuffer),t.drawElements(e.d.a.d8,p.numIndices,t.UNSIGNED_INT,0)):t.drawArrays(e.d.a.d8,0,p.numIndices)}}),n.g),e):e})),dr=t((function(n,e,r){return function(n,e,r,t){return{$:3,d:fe(n),g:e,h:r,i:t}}(e,{g:r,f:{},h:n},xr,Cr)})),mr=r((function(n,e){n.contextAttributes.alpha=!0,n.contextAttributes.premultipliedAlpha=e.a})),vr=r((function(n,e){n.contextAttributes.depth=!0,n.sceneSettings.push((function(n){n.clearDepth(e.a)}))})),pr=r((function(n,e){n.contextAttributes.stencil=!0,n.sceneSettings.push((function(n){n.clearStencil(e.a)}))})),br=r((function(n){n.contextAttributes.antialias=!0})),gr=r((function(n,e){n.sceneSettings.push((function(n){n.clearColor(e.a,e.b,e.c,e.d)}))})),hr=r((function(n){n.contextAttributes.preserveDrawingBuffer=!0}));function xr(n){var e={contextAttributes:{alpha:!1,depth:!1,stencil:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1},sceneSettings:[]};Ue((function(n){return u(rs,e,n)}),n.h);var r=Qn.createElement("canvas"),t=r.getContext&&(r.getContext("webgl",e.contextAttributes)||r.getContext("experimental-webgl",e.contextAttributes));return t&&"undefined"!=typeof WeakMap?(e.sceneSettings.forEach((function(n){n(t)})),t.getExtension("OES_standard_derivatives"),t.getExtension("OES_element_index_uint"),n.f.gl=t,n.f.toggle=!1,n.f.blend={enabled:!1,toggle:!1},n.f.depthTest={enabled:!1,toggle:!1},n.f.stencilTest={enabled:!1,toggle:!1},n.f.scissor={enabled:!1,toggle:!1},n.f.colorMask={enabled:!1,toggle:!1},n.f.cullFace={enabled:!1,toggle:!1},n.f.polygonOffset={enabled:!1,toggle:!1},n.f.sampleCoverage={enabled:!1,toggle:!1},n.f.sampleAlphaToCoverage={enabled:!1,toggle:!1},n.f.shaders=[],n.f.programs={},n.f.lastProgId=null,n.f.buffers=new WeakMap,n.f.textures=new WeakMap,n.f.STENCIL_WRITEMASK=t.getParameter(t.STENCIL_WRITEMASK),Ye((function(){return u(sr,n,r)}))):(r=Qn.createElement("div")).innerHTML='<a href="https://get.webgl.org/">Enable WebGL</a> to see this content!',r}function Cr(n,e){return e.f=n.f,sr(e)}var Pr=r((function(n,e){return new Float64Array([n,e])}));new Float64Array(3),new Float64Array(3),new Float64Array(3);var Mr=t((function(n,e,r){return new Float64Array([n,e,r])})),yr=r((function(n,e){return new Float64Array([e[0]*n,e[1]*n,e[2]*n])})),Tr=o((function(n,e,r,t){return new Float64Array([n,e,r,t])}));new Float64Array(16),new Float64Array(16),new Float64Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);var Lr=$,Dr=x,wr=t((function(n,e,t){var o=t.c,a=t.d,i=r((function(e,r){return f(Dr,e.$?n:i,r,e.a)}));return f(Dr,i,f(Dr,n,e,a),o)})),Sr=t((function(n,e,r){for(;;){if(-2===r.$)return e;var t=r.d,o=n,a=f(n,r.b,r.c,f(Sr,n,e,r.e));n=o,e=a,r=t}})),Nr=function(n){return f(Sr,t((function(n,e,r){return u(Lr,L(n,e),r)})),N,n)},Er=1,$r=2,zr=0,_r=function(n){return{$:1,a:n}},Ar=r((function(n,e){return{$:3,a:n,b:e}})),Rr=r((function(n,e){return{$:0,a:n,b:e}})),Vr=r((function(n,e){return{$:1,a:n,b:e}})),Fr=function(n){return{$:0,a:n}},kr=function(n){return{$:2,a:n}},Br=function(n){return{$:0,a:n}},Ir={$:1},Wr=Mn,jr=nn,Hr=r((function(n,e){return u(Z,n,_(e))})),Or=r((function(n,e){return z(u(J,n,e))})),Ur=t((function(n,e,r){for(;;){if(!r.b)return e;var t=r.b,o=n,a=u(n,r.a,e);n=o,e=a,r=t}})),Xr=function(n){return f(Ur,r((function(n,e){return e+1})),0,n)},Yr=A,Gr=t((function(n,e,r){for(;;){if(y(n,e)>=1)return r;var t=n,o=e-1,a=u(Lr,e,r);n=t,e=o,r=a}})),qr=r((function(n,e){return f(Gr,n,e,N)})),Jr=r((function(n,e){return f(Yr,n,u(qr,0,Xr(e)-1),e)})),Zr=function(n){var e=n.charCodeAt(0);return 55296>e||e>56319?e:1024*(e-55296)+n.charCodeAt(1)-56320+65536},Kr=function(n){return f(Ur,Lr,N,n)},Qr=function(n){var e=n.charCodeAt(0);return isNaN(e)?Ir:Br(55296>e||e>56319?L(n[0],n.slice(1)):L(n[0]+n[1],n.slice(2)))},nt=32,et=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),rt=[],tt=j,ot=r((function(n,e){return X(e)/X(n)})),at=function(n){return n},it=tt(u(ot,2,nt)),ct=s(et,0,it,rt,rt),lt=b,ut=function(n){return{$:1,a:n}},ft=H,st=function(n){return n.length},dt=r((function(n,e){return y(n,e)>0?n:e})),mt=R,vt=g,pt=r((function(n,e){for(;;){var r=u(vt,nt,n),t=r.b,o=u(Lr,{$:0,a:r.a},e);if(!t.b)return Kr(o);n=t,e=o}})),bt=r((function(n,e){for(;;){var r=tt(e/nt);if(1===r)return u(vt,nt,n).a;n=u(pt,n,N),e=r}})),gt=r((function(n,e){if(e.l){var r=e.l*nt,t=ft(u(ot,nt,r-1)),o=n?Kr(e.z):e.z,a=u(bt,o,e.l);return s(et,st(e.p)+r,u(dt,5,t*it),a,e.p)}return s(et,st(e.p),it,rt,e.p)})),ht=a((function(n,e,r,t,o){for(;;){if(0>e)return u(gt,!1,{z:t,l:r/nt|0,p:o});var a=ut(f(lt,nt,e,n));n=n,e-=nt,r=r,t=u(Lr,a,t),o=o}})),xt=r((function(n,e){if(n>0){var r=n%nt;return d(ht,e,n-r-nt,n,N,f(lt,r,n-r,e))}return ct})),Ct=function(n){return!n.$},Pt=un,Mt=cn,yt=on,Tt=u(r((function(n,e){return{P:e,aD:"",U:n,aq:""}})),N,N),Lt=fn,Dt=sn,wt=function(n){return{$:0,a:n}},St=function(n){switch(n.$){case 0:return 0;case 1:return 1;case 2:return 2;default:return 3}},Nt=te("div"),Et=function(n){return{$:2,a:n}},$t=function(n){return{$:6,a:n}},zt=function(n){return{$:4,a:n}},_t=t((function(n,e,r){return e(n(r))})),At=function(n){return n},Rt=function(n){return n.length},Vt=K,Ft=r((function(n,e){return 1>n?e:f(Vt,n,Rt(e),e)})),kt=Q,Bt=Ln,It=Bt(0),Wt=o((function(n,e,r,t){if(t.b){var o=t.a,a=t.b;if(a.b){var i=a.a,c=a.b;if(c.b){var l=c.a,d=c.b;if(d.b){var m=d.b;return u(n,o,u(n,i,u(n,l,u(n,d.a,r>500?f(Ur,n,e,Kr(m)):s(Wt,n,e,r+1,m)))))}return u(n,o,u(n,i,u(n,l,e)))}return u(n,o,u(n,i,e))}return u(n,o,e)}return e})),jt=t((function(n,e,r){return s(Wt,n,e,0,r)})),Ht=r((function(n,e){return f(jt,r((function(e,r){return u(Lr,n(e),r)})),N,e)})),Ot=wn,Ut=r((function(n,e){return u(Ot,(function(e){return Bt(n(e))}),e)})),Xt=t((function(n,e,r){return u(Ot,(function(e){return u(Ot,(function(r){return Bt(u(n,e,r))}),r)}),e)})),Yt=function(n){return f(jt,Xt(Lr),Bt(N),n)},Gt=In,qt=r((function(n,e){var r=e;return En(u(Ot,Gt(n),r))}));Fn.Task=kn(It,t((function(n,e){return u(Ut,(function(){return 0}),Yt(u(Ht,qt(n),e)))})),t((function(){return Bt(0)})),r((function(n,e){return u(Ut,n,e)})));var Jt=jn("Task"),Zt=r((function(n,e){return Jt(u(Ut,n,e))})),Kt=Ae,Qt=r((function(n,e){return{$:0,a:n,b:e}})),no=function(n){return{$:7,a:n}},eo=r((function(n,e){return{$:5,a:n,b:e}})),ro=r((function(n,e){return{$:3,a:n,b:e}})),to=Hn,oo=On,ao=function(n){return{$:1,a:n}},io=t((function(n,e,r){return{cH:r,em:e,er:n}})),co=Bt(f(io,N,Ir,0)),lo=function(n){return Dn((function(e){var r=n.f;2===r.$&&r.c&&r.c(),n.f=null,e(Ln(0))}))},uo=Dn((function(n){n(Ln(Date.now()))})),fo=Dn((function(n){var e=Ve((function(){n(Ln(Date.now()))}));return function(){Re(e)}})),so=Wn,mo=En,vo=t((function(n,e,r){var t=r.em,o=r.cH,a=L(t,e);return 1===a.a.$?a.b.b?u(Ot,(function(n){return u(Ot,(function(r){return Bt(f(io,e,Br(n),r))}),uo)}),mo(u(Ot,so(n),fo))):co:a.b.b?Bt(f(io,e,t,o)):u(Ot,(function(){return co}),lo(a.a.a))})),po=At,bo=t((function(n,e,r){var t=r.er,o=r.cH,a=function(r){return u(Gt,n,(0,r.a)(r.$?e-o:po(e)))};return u(Ot,(function(n){return u(Ot,(function(){return Bt(f(io,t,Br(n),e))}),Yt(u(Ht,a,t)))}),mo(u(Ot,so(n),fo)))})),go=t((function(n,e,r){return n(e(r))}));Fn["Browser.AnimationManager"]=kn(co,vo,bo,0,r((function(n,e){return e.$?ao(u(go,n,e.a)):{$:0,a:u(go,n,e.a)}})));var ho=jn("Browser.AnimationManager"),xo=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),Co=r((function(n,e){return{ed:e,er:n}})),Po={$:-2},Mo=Po,yo=Bt(u(Co,N,Mo)),To=function(n){return L(S(n.a?"w_":"d_",n.b),n)},Lo=a((function(n,e,r,t,o){return{$:-1,a:n,b:e,c:r,d:t,e:o}})),Do=a((function(n,e,r,t,o){if(-1!==o.$||o.a){if(-1!==t.$||t.a||-1!==t.d.$||t.d.a)return d(Lo,n,e,r,t,o);var a=t.d;return i=t.e,d(Lo,0,t.b,t.c,d(Lo,1,a.b,a.c,a.d,a.e),d(Lo,1,e,r,i,o))}var i,c=o.b,l=o.c,u=o.d,f=o.e;return-1!==t.$||t.a?d(Lo,n,c,l,d(Lo,0,e,r,t,u),f):d(Lo,0,e,r,d(Lo,1,t.b,t.c,t.d,i=t.e),d(Lo,1,c,l,u,f))})),wo=T,So=t((function(n,e,r){if(-2===r.$)return d(Lo,0,n,e,Po,Po);var t=r.a,o=r.b,a=r.c,i=r.d,c=r.e;switch(u(wo,n,o)){case 0:return d(Do,t,o,a,f(So,n,e,i),c);case 1:return d(Lo,t,o,e,i,c);default:return d(Do,t,o,a,i,f(So,n,e,c))}})),No=t((function(n,e,r){var t=f(So,n,e,r);return-1!==t.$||t.a?t:d(Lo,1,t.b,t.c,t.d,t.e)})),Eo=function(n){return f(Ur,r((function(n,e){return f(No,n.a,n.b,e)})),Mo,n)},$o=t((function(n,e,r){for(;;){if(-2===r.$)return e;var t=r.e,o=n,a=f(n,r.b,r.c,f($o,n,e,r.d));n=o,e=a,r=t}})),zo=i((function(n,e,o,a,i,c){var l=f($o,t((function(r,t,a){n:for(;;){var i=a.a,c=a.b;if(i.b){var l=i.a,u=l.a,d=l.b,m=i.b;if(0>y(u,r)){r=r,t=t,a=L(m,f(n,u,d,c));continue n}return y(u,r)>0?L(i,f(o,r,t,c)):L(m,s(e,u,d,t,c))}return L(i,f(o,r,t,c))}})),L(Nr(a),c),i),u=l.a,d=l.b;return f(Ur,r((function(e,r){return f(n,e.a,e.b,r)})),d,u)})),_o=r((function(n,e){return{du:e,dF:n}})),Ao=t((function(n,e,r){return u(Ut,(function(n){return L(e,n)}),f(Ie,r.a?Be:ke,r.b,(function(r){return u(so,n,u(_o,e,r))})))})),Ro=r((function(n,e){return f($o,No,e,n)})),Vo=t((function(n,e,r){var a=t((function(e,r,t){var o=t.c;return D(t.a,t.b,u(Lr,f(Ao,n,e,r),o))})),i=t((function(n,e,r){var t=r.b,o=r.c;return D(u(Lr,e,r.a),t,o)})),c=o((function(n,e,r,t){var o=t.c;return D(t.a,f(No,n,e,t.b),o)})),l=u(Ht,To,e),s=m(zo,i,c,a,r.ed,Eo(l),D(N,Mo,N)),d=s.b,v=s.c;return u(Ot,(function(n){return Bt(u(Co,l,u(Ro,d,Eo(n))))}),u(Ot,(function(){return Yt(v)}),Yt(u(Ht,lo,s.a))))})),Fo=t((function(n,e,r){var t=n(e);return t.$?r:u(Lr,t.a,r)})),ko=r((function(n,e){return f(jt,Fo(n),N,e)}));Fn["Browser.Events"]=kn(yo,Vo,t((function(n,e,r){var t=e.dF,o=e.du,a=u(ko,(function(n){var e=n.b.c;return P(n.a,t)?u(We,e,o):Ir}),r.er);return u(Ot,(function(){return Bt(r)}),Yt(u(Ht,Gt(n),a)))})),0,r((function(n,e){return f(xo,e.a,e.b,u(Lt,n,e.c))})));var Bo,Io,Wo,jo,Ho,Oo,Uo,Xo,Yo,Go,qo,Jo,Zo,Ko,Qo,na,ea,ra,ta,oa,aa,ia,ca,la,ua,fa,sa,da,ma,va,pa,ba,ga,ha,xa,Ca,Pa,Ma,ya,Ta=jn("Browser.Events"),La=t((function(n,e,r){return Ta(f(xo,n,e,r))})),Da=u(La,0,"click"),wa=u(La,0,"keydown"),Sa=u(La,0,"keyup"),Na=u(La,0,"mousedown"),Ea=u(La,0,"mousemove"),$a=u(La,0,"mouseup"),za=rn,_a=tn,Aa=r((function(n,e){return n(e?1:0)})),Ra=function(n){var e=void 0!==Qn.hidden?{e1:"hidden",eN:"visibilitychange"}:void 0!==Qn.mozHidden?{e1:"mozHidden",eN:"mozvisibilitychange"}:void 0!==Qn.msHidden?{e1:"msHidden",eN:"msvisibilitychange"}:void 0!==Qn.webkitHidden?{e1:"webkitHidden",eN:"webkitvisibilitychange"}:{e1:"hidden",eN:"visibilitychange"};return f(La,0,e.eN,u(Lt,Aa(n),u(Mt,"target",u(Mt,e.e1,_a))))},Va=an,Fa=function(n){return{$:3,b:n}},ka=Jn("touchCancel",Fa(u(Pt,(function(n){return u(Pt,(function(e){return u(Pt,(function(r){return wt({bj:r,cJ:e,cK:n})}),u(Mt,"identifier",za))}),u(Mt,"pageX",yt))}),u(Mt,"pageY",yt)))),Ba=Jn("touchEnd",Fa(u(Pt,(function(n){return u(Pt,(function(e){return u(Pt,(function(r){return wt({bj:r,cJ:e,cK:n})}),u(Mt,"identifier",za))}),u(Mt,"pageX",yt))}),u(Mt,"pageY",yt)))),Ia=Jn("touchMove",Fa(u(Pt,(function(n){return u(Pt,(function(e){return u(Pt,(function(r){return wt({bj:r,cJ:e,cK:n})}),u(Mt,"identifier",za))}),u(Mt,"pageX",yt))}),u(Mt,"pageY",yt)))),Wa=Jn("touchStart",Fa(u(Pt,(function(n){return u(Pt,(function(e){return u(Pt,(function(r){return wt({bj:r,cJ:e,cK:n})}),u(Mt,"identifier",za))}),u(Mt,"pageX",yt))}),u(Mt,"pageY",yt)))),ja=to(u(Ht,oo($t),z([(Bo=ro,f(La,1,"resize",u(Mt,"target",f(Dt,Bo,u(Mt,"innerWidth",za),u(Mt,"innerHeight",za))))),Sa(u(Lt,Qt(!1),u(Mt,"key",Va))),wa(u(Lt,Qt(!0),u(Mt,"key",Va))),(ya=u(_t,mt(.001),(function(n){return{$:1,a:n}})),ho(ao(ya))),Ra(zt),Da(wt({$:6})),Na(wt(no(!0))),$a(wt(no(!1))),Ea(f(Dt,eo,u(Mt,"pageX",yt),u(Mt,"pageY",yt))),Wa((function(n){return{$:8,a:n}})),Ia((function(n){return{$:9,a:n}})),Ba((function(n){return{$:10,a:n}})),ka((function(n){return{$:11,a:n}}))]))),Ha=o((function(n,e,r,t){return{cg:t,aP:r,bD:n,bE:e}})),Oa=Mo,Ua={ca:!1,aP:!1,cm:!1,M:Oa,ag:!1,a_:!1,c1:!1,c2:!1,b7:!1},Xa=r((function(n,e){return w(e,{cg:n})})),Ya=r((function(n,e){return w(e,{aP:n})})),Ga=t((function(n,e,r){return w(r,{bD:n,bE:e})})),qa=function(n){if(-1===n.$&&-1===n.d.$&&-1===n.e.$){if(-1!==n.e.d.$||n.e.d.a){var e=n.d,r=n.e;return i=r.b,c=r.c,t=r.d,f=r.e,d(Lo,1,n.b,n.c,d(Lo,0,e.b,e.c,e.d,e.e),d(Lo,0,i,c,t,f))}var t,o=n.d,a=n.e,i=a.b,c=a.c,l=(t=a.d).d,u=t.e,f=a.e;return d(Lo,0,t.b,t.c,d(Lo,1,n.b,n.c,d(Lo,0,o.b,o.c,o.d,o.e),l),d(Lo,1,i,c,u,f))}return n},Ja=function(n){if(-1===n.$&&-1===n.d.$&&-1===n.e.$){if(-1!==n.d.d.$||n.d.d.a){var e=n.d,r=n.e;return u=r.b,f=r.c,s=r.d,m=r.e,d(Lo,1,t=n.b,o=n.c,d(Lo,0,e.b,e.c,e.d,c=e.e),d(Lo,0,u,f,s,m))}var t=n.b,o=n.c,a=n.d,i=a.d,c=a.e,l=n.e,u=l.b,f=l.c,s=l.d,m=l.e;return d(Lo,0,a.b,a.c,d(Lo,1,i.b,i.c,i.d,i.e),d(Lo,1,t,o,c,d(Lo,0,u,f,s,m)))}return n},Za=c((function(n,e,r,t,o,a,i){if(-1!==a.$||a.a){n:for(;;){if(-1===i.$&&1===i.a){if(-1===i.d.$){if(1===i.d.a)return Ja(e);break n}return Ja(e)}break n}return e}return d(Lo,r,a.b,a.c,a.d,d(Lo,0,t,o,a.e,i))})),Ka=function(n){if(-1===n.$&&-1===n.d.$){var e=n.a,r=n.b,t=n.c,o=n.d,a=o.d,i=n.e;if(1===o.a){if(-1!==a.$||a.a){var c=qa(n);if(-1===c.$){var l=c.e;return d(Do,c.a,c.b,c.c,Ka(c.d),l)}return Po}return d(Lo,e,r,t,Ka(o),i)}return d(Lo,e,r,t,Ka(o),i)}return Po},Qa=r((function(n,e){if(-2===e.$)return Po;var r=e.a,t=e.b,o=e.c,a=e.d,i=e.e;if(0>y(n,t)){if(-1===a.$&&1===a.a){var c=a.d;if(-1!==c.$||c.a){var l=qa(e);if(-1===l.$){var f=l.e;return d(Do,l.a,l.b,l.c,u(Qa,n,l.d),f)}return Po}return d(Lo,r,t,o,u(Qa,n,a),i)}return d(Lo,r,t,o,u(Qa,n,a),i)}return u(ni,n,v(Za,n,e,r,t,o,a,i))})),ni=r((function(n,e){if(-1===e.$){var r=e.a,t=e.b,o=e.c,a=e.d,i=e.e;if(P(n,t)){var c=function(n){for(;;){if(-1!==n.$||-1!==n.d.$)return n;n=n.d}}(i);return-1===c.$?d(Do,r,c.b,c.c,a,Ka(i)):Po}return d(Do,r,t,o,a,u(Qa,n,i))}return Po})),ei=r((function(n,e){var r=u(Qa,n,e);return-1!==r.$||r.a?r:d(Lo,1,r.b,r.c,r.d,r.e)})),ri=r((function(n,e){return{dj:-e/2,co:e,ag:-n/2,a_:n/2,by:e/2,db:n}})),ti=r((function(n,e){return f(No,n,0,e)})),oi=r((function(n,e){return u(ei,n,e)})),ai=t((function(n,e,r){var t=u(n?ti:oi,e,r.M);switch(e){case" ":return w(r,{M:t,c2:n});case"Enter":return w(r,{cm:n,M:t});case"Shift":return w(r,{M:t,c1:n});case"Backspace":return w(r,{ca:n,M:t});case"ArrowUp":return w(r,{M:t,b7:n});case"ArrowDown":return w(r,{aP:n,M:t});case"ArrowLeft":return w(r,{M:t,ag:n});case"ArrowRight":return w(r,{M:t,a_:n});default:return w(r,{M:t})}})),ii=r((function(n,e){switch(n.$){case 1:var r=n.a;return w(e,e.G.cg?{G:u(Xa,!1,e.G),a1:e.a1+r}:{a1:e.a1+r});case 2:var t=n.a.fC;return w(e,{aa:u(ri,t.db,t.co)});case 3:return w(e,{aa:u(ri,n.a,n.b)});case 0:return w(e,{bk:f(ai,n.a,n.b,e.bk)});case 5:return w(e,{G:f(Ga,e.aa.ag+n.a,e.aa.by-n.b,e.G)});case 6:return w(e,{G:u(Xa,!0,e.G)});case 7:return w(e,{G:u(Ya,n.a,e.G)});case 8:case 9:return w(e,{ab:f(Ur,(function(n){return u(No,n.bj,{bD:e.aa.ag+n.cJ,bE:e.aa.by-n.cK})}),e.ab,n.a)});case 10:case 11:return w(e,{ab:f(Ur,(function(n){return ei(n.bj)}),e.ab,n.a)});default:return w(e,{bk:Ua,G:s(Ha,e.G.bD,e.G.bE,!1,!1)})}})),ci=r((function(n,e){return{P:e,U:n}})),li=f(Dt,r((function(n,e){return L(n,e)})),u(Mt,"A1",Va),u(Mt,"A2",Va)),ui=dn,fi=s(ui,t((function(n,e,r){return D(n,e,r)})),u(Mt,"A1",yt),u(Mt,"A2",yt),u(Mt,"A3",yt)),si=f(Dt,r((function(n,e){return L(n,e)})),u(Mt,"A1",Va),u(Mt,"A2",fi)),di=f(Dt,ci,u(Mt,"floats",Fa(si)),u(Mt,"colors",Fa(li))),mi=mn,vi=r((function(n,e){return e.$?Ir:n(e.a)})),pi=r((function(n,e){return e.$?_r(e.a):n(e.a)})),bi=o((function(n,e,r,t){return{e3:e,e9:n,ff:r,fs:t}})),gi=He,hi=r((function(n,e){return e.$?_r(n):Fr(e.a)})),xi=je,Ci=function(n){return n.b?Br(n.a):Ir},Pi=r((function(n,e){return e.$?Ir:Br(n(e.a))})),Mi=r((function(n,e){return e.$?_r(e.a):Fr(n(e.a))})),yi=r((function(n,e){return Zr(e)-Zr(n)})),Ti=t((function(n,e,r){var t=Zr(r);return 1>y(Zr(n),t)&&1>y(t,Zr(e))})),Li=r((function(n,e){var r=f(Ti,"0","9",e)?Fr(u(yi,"0",e)):f(Ti,"a","z",e)?Fr(10+u(yi,"a",e)):f(Ti,"A","Z",e)?Fr(10+u(yi,"A",e)):_r({$:0,a:e});return u(pi,(function(r){return 0>y(r,n)?Fr(r):_r({$:1,a:e})}),r)})),Di=r((function(n,e){var r=Qr(e);if(1===r.$)return Fr(0);var t=r.a,o=t.b;return u(pi,(function(e){return u(pi,(function(r){return Fr(e+r*n)}),u(Di,n,o))}),u(Li,n,t.a))})),wi=function(n){for(var e=n.length,r=Array(e),t=0;e>t;){var o=n.charCodeAt(t);55296>o||o>56319?(r[e-t]=n[t],t++):(r[e-t]=n[t+1],r[e-++t]=n[t-1],t++)}return r.join("")},Si=r((function(n,e){return 2>n||n>36?_r({$:2,a:n}):u(Di,n,wi(e))})),Ni=Si(16),Ei=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),$i=t((function(n,e,r){return s(Ei,n,e,r,1)})),zi=o((function(n,e,r,t){return s(Ei,n,e,r,t)})),_i=V,Ai=O,Ri=r((function(n,e){var r=u(_i,10,n);return Ai(e*r)/r})),Vi=q,Fi=function(n){return f(Vi,Lr,N,n)},ki=(Io=function(n){var e=Fi(n);if(e.b&&!e.b.b){var r=e.a;return _(z([r,r])).join("")}return n},u(_t,(function(n){return n.toLowerCase()}),u(_t,(function(n){return u(Pi,(function(e){return f(gi,1,e,n)}),u(xi,{eK:!1,fb:!1},"^#?(?:(?:([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2}))|(?:([a-f\\d])([a-f\\d])([a-f\\d]))|(?:([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2}))|(?:([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d])))$"))}),u(_t,vi(Ci),u(_t,Pi((function(n){return n.fs})),u(_t,Pi(ko(At)),u(_t,hi("Parsing hex regex failed"),pi((function(n){var e=u(Ht,u(_t,Io,u(_t,Ni,Mi(at))),n);n:for(;;){if(e.b&&!e.a.$&&e.b.b&&!e.b.a.$&&e.b.b.b&&!e.b.b.a.$){if(e.b.b.b.b){if(e.b.b.b.a.$||e.b.b.b.b.b)break n;var r=e.b,t=r.b;return Fr(s(zi,e.a.a/255,r.a.a/255,t.a.a/255,u(Ri,2,t.b.a.a/255)))}var o=e.b;return Fr(f($i,e.a.a/255,o.a.a/255,o.b.a.a/255))}break n}return _r("Parsing ints from hex failed")}))))))))),Bi=r((function(n,e){return L(e.a,n(e.b))})),Ii=s(Ei,1,1,1,1),Wi=r((function(n,e){return e.$?n:e.a})),ji=u(_t,mi(di),u(_t,Mi((function(n){return{P:u(Ht,Bi(u(_t,ki,Wi(Ii))),n.P),aD:"",U:n.U,aq:""}})),Wi(Tt))),Hi=function(n){return f(Ur,r((function(n,e){return f(Tn,n.a,n.b,e)})),{},n)},Oi=yn,Ui=function(n){var e=n.b;return Hi(z([L("A1",Oi(n.a)),L("A2",Oi(e))]))},Xi=yn,Yi=function(n){var e=n.b,r=n.c;return Hi(z([L("A1",Xi(n.a)),L("A2",Xi(e)),L("A3",Xi(r))]))},Gi=function(n){var e=n.b;return Hi(z([L("A1",Oi(n.a)),L("A2",Yi(e))]))},qi=r((function(n,e){return f(Ur,function(n){return r((function(e,r){return r.push(n(e)),r}))}(n),[],e)})),Ji=G,Zi=function(n){return u(Ji,n,"")},Ki=t((function(n,e,r){return n>0?f(Ki,n>>1,S(e,e),1&n?S(r,e):r):r})),Qi=r((function(n,e){return f(Ki,n,e,"")})),nc=t((function(n,e,r){return S(u(Qi,n-Rt(r),Zi(e)),r)})),ec=function(n){return 0>n||n>1114111?"�":n>65535?String.fromCharCode(Math.floor((n-=65536)/1024)+55296,n%1024+56320):String.fromCharCode(n)},rc=F,tc=function(n){var e=function(n){return 10>n?jr(n):Zi(ec(87+n))};return 16>n?e(n):S(tc(n/16|0),e(u(rc,16,n)))},oc=u(_t,tc,u(nc,2,"0")),ac=function(n){return{aO:n.d,ce:n.c,cn:n.b,cW:n.a}},ic=function(n){var e=ac(n),r=e.cW,t=e.cn,o=e.ce;return u(Hr,"",u(Lr,"#",u(Ht,u(_t,Ai,oc),z([255*r,255*t,255*o]))))},cc=u(_t,(function(n){return{P:u(Ht,Bi(ic),n.P),U:n.U}}),u(_t,(function(n){return Hi(z([L("floats",u(qi,Gi,n.U)),L("colors",u(qi,Ui,n.P))]))}),Wr(0))),lc=function(n){return 0>n?-n:n},uc=function(n){if(0===n.length||/[\sxbo]/.test(n))return Ir;var e=+n;return e==e?Br(e):Ir},fc=r((function(n,e){return e.$?n:e.a})),sc=t((function(n,e,r){return u(fc,NaN,uc(u(n,e,r)))})),dc=function(n){return!n},mc=r((function(n,e){for(;;){if(!e.b)return!1;var r=e.b;if(n(e.a))return!0;n=n,e=r}})),vc=r((function(n,e){var r=u(mc,(function(n){return"0"!==n&&"."!==n}),Fi(e));return S(n&&r?"-":"",e)})),pc=nn,bc=function(n){var e=n.a,r=n.b;if("9"===e){var t=Qr(r);return 1===t.$?"01":u(Ji,"0",bc(t.a))}var o=Zr(e);return o>=48&&57>o?u(Ji,ec(o+1),r):"0"},gc=function(n){return n===1/0||n===-1/0},hc=Y,xc=t((function(n,e,r){return S(r,u(Qi,n-Rt(r),Zi(e)))})),Cc=function(n){var e=u(Or,".",n);return e.b?L(e.a,e.b.b?e.b.a:"0"):L("0","0")},Pc=r((function(n,e){var r=e.b;return L(n(e.a),r)})),Mc=t((function(n,e,r){if(gc(r)||hc(r))return pc(r);var t=0>r,o=Cc(function(n){var e=u(Or,"e",pc(lc(n)));if(e.b){if(e.b.b){var r=e.a,t=e.b.a,o=u(fc,0,function(n){for(var e=0,r=n.charCodeAt(0),t=43==r||45==r?1:0,o=t;n.length>o;++o){var a=n.charCodeAt(o);if(48>a||a>57)return Ir;e=10*e+a-48}return o==t?Ir:Br(45==r?-e:e)}(u(kt,"+",t)?u(Ft,1,t):t)),a=Cc(r),i=S(a.a,a.b),c=0>o?u(fc,"0",u(Pi,(function(n){return n.a+"."+n.b}),u(Pi,Pc(Zi),Qr(S(u(Qi,lc(o),"0"),i))))):f(xc,o+1,"0",i);return S(0>n?"-":"",c)}return S(0>n?"-":"",r=e.a)}return""}(lc(r))),a=o.a,i=o.b,c=Rt(a)+e,l=S(u(Qi,1-c,"0"),f(xc,c,"0",S(a,i))),s=Rt(l),d=u(dt,1,c),m=u(n,t,f(Vt,d,s,l)),v=f(Vt,0,d,l),p=m?wi(u(fc,"1",u(Pi,bc,Qr(wi(v))))):v,b=Rt(p),g="0"===p?p:e>0?0>y(e,Rt(i))?f(Vt,0,b-e,p)+"."+f(Vt,b-e,b,p):S(a+".",f(xc,e,"0",i)):S(p,u(Qi,lc(e),"0"));return u(vc,t,g)})),yc=Mc(r((function(n,e){var r,t=Qr(e);return 1!==t.$&&("5"===t.a.a?""!==t.a.b||!n:(r=Zr(t.a.a))>53&&n||r>=53&&!n)}))),Tc=sc(yc),Lc=t((function(n,e,r){var t=u(ot,10,lc(e-n));return u(Tc,0>t?3:1>t?2:2>t?1:0,r)})),Dc=r((function(n,e){switch(n.$){case 2:var r=ji(e.aq);return w(r,{aD:r.aD,aq:r.aq});case 3:return w(e,{aq:n.a});case 4:return w(e,{aD:cc(e)});case 0:var t=n.a,o=n.b;return w(e,{U:u(Ht,(function(n){var e=n.a,r=n.b,a=r.a,i=r.c;return P(e,t)?L(e,D(a,f(Lc,a,i,o),i)):n}),e.U)});default:return t=n.a,o=n.b,w(e,{P:u(Ht,(function(n){var e=n.a;return P(e,t)?L(e,o):n}),e.P)})}})),wc=o((function(n,e,r,t){var o=t.F;switch(r.$){case 0:return t;case 1:return w(t,{a6:r.a});case 2:return w(t,{bd:!1});case 3:return w(t,{bd:!0});case 4:return w(t,{af:f(e,t.F,r.a,t.af)});case 5:return w(t,{F:w(o,{bO:u(Dc,r.a,o.bO)})});default:var a=r.a,i=1===a.$?u(n,o,t.af):t.af;return w(t,{F:u(ii,a,t.F),af:i})}})),Sc=(Ma=function(){return{eo:(n=ke.body,e=ke.documentElement,{db:Math.max(n.scrollWidth,n.offsetWidth,e.scrollWidth,e.offsetWidth,e.clientWidth),co:Math.max(n.scrollHeight,n.offsetHeight,e.scrollHeight,e.offsetHeight,e.clientHeight)}),fC:{bD:Be.pageXOffset,bE:Be.pageYOffset,db:ke.documentElement.clientWidth,co:ke.documentElement.clientHeight}};var n,e},Dn((function(n){Ve((function(){n(Ln(Ma()))}))}))),Nc=r((function(n,e){return{bO:e,ck:n.ck,bk:Ua,G:s(Ha,0,0,!1,!1),aa:u(ri,600,600),a1:0,ab:Mo}})),Ec=Hn,$c=Ec(N),zc=function(n){return{$:5,a:n}},_c=function(n){return{$:4,a:n}},Ac={$:2},Rc={$:0},Vc=function(n){return{$:1,a:n}},Fc={$:3},kc=r((function(n){return n})),Bc=te("button"),Ic=function(n){return n?"Level Editor":"Configurations"},Wc=function(n){return u(fc,0,Ci(u(ko,(function(e){return P(Ic(e),n)?Br(e):Ir}),z([0,1]))))},jc=ae,Hc=jc,Oc=ie,Uc=r((function(n,e){return u(Oc,n,{$:0,a:e})})),Xc=r((function(n,e){return f(jt,Mt,e,n)})),Yc=u(Xc,z(["target","value"]),Va),Gc=function(n){return u(Uc,"click",wt(n))},qc=te("option"),Jc=te("select"),Zc=ce,Kc=Zc,Qc=ee,nl=Qc,el=r((function(n,e){return u(le,n,Oi(e))})),rl=el("value"),tl=r((function(n,e){return{$:1,a:n,b:e}})),ol=r((function(n,e){return{$:0,a:n,b:e}})),al=s(Ei,0,0,0,1),il=u(Bc,z([u(Kc,"cursor","pointer"),Gc({$:4})]),z([nl("Export Configurations as json")])),cl=te("h3"),ll=te("p"),ul=yn,fl=r((function(n,e){return u(le,n,ul(e))})),sl=fl("readOnly"),dl=te("textarea"),ml=function(n){return u(Nt,N,z([u(dl,z([sl(!0)]),z([nl(n.aD)]))]))},vl=function(n){return u(Nt,N,z([u(cl,N,z([nl("Export Configurations")])),u(ll,N,z([il])),u(ll,N,z([ml(n)]))]))},pl=el("htmlFor"),bl=te("hr"),gl=el("id"),hl=u(Bc,z([u(Kc,"cursor","pointer"),Gc({$:2})]),z([nl("Import Configurations")])),xl=function(n){return{$:3,a:n}},Cl=function(n){return L(n,!0)},Pl=r((function(n,e){return u(Oc,n,{$:1,a:e})})),Ml=function(n){return u(Pl,"input",u(Lt,Cl,u(Lt,n,Yc)))},yl=function(n){return u(Nt,N,z([u(dl,z([Ml(xl)]),z([nl(n.aq)]))]))},Tl=function(n){return u(Nt,N,z([u(cl,N,z([nl("Import Configurations")])),u(ll,N,z([yl(n)])),u(ll,N,z([hl]))]))},Ll=te("input"),Dl=te("label"),wl=el("max"),Sl=el("min"),Nl=el("name"),El=te("span"),$l=el("type"),zl=t((function(n,e,t){var o,a,i,c,l=u(Nt,z([u(Kc,"position","fixed"),u(Kc,"top","0px"),u(Kc,"left","0px"),u(Kc,"width",pc(t.F.aa.db)+"px"),u(Kc,"height",pc(t.F.aa.co)+"px"),u(Kc,"font-size","16px")]),z([u(Hc,kc(Rc),u(n,t.F,t.af))])),f=t.a6?u(Hc,_c,u(e,t.F,t.af)):u(Hc,zc,(o=t.F.bO,a=function(n){var e=n.a,r=n.b,t=r.a,o=r.b,a=r.c;return u(Nt,z([u(Kc,"margin-top","15px")]),z([u(Nt,N,z([u(Dl,z([pl(e)]),z([nl(e),nl(": "),u(El,z([u(Kc,"font-family","monospace"),u(Kc,"font-weight","bold")]),z([nl(pc(o))]))]))])),u(Ll,z([$l("range"),gl(e),Nl(e),Sl(pc(t)),wl(pc(a)),Ml((function(n){return u(ol,e,u(fc,0,uc(n)))})),u(el,"step","any"),u(Kc,"width","200px"),rl(pc(o))]),N)]))},i=function(n){var e=n.a,r=n.b;return u(Nt,z([u(Kc,"margin-top","15px")]),z([u(Nt,N,z([u(Dl,z([pl(e)]),z([nl(e)]))])),u(Ll,z([$l("color"),u(Kc,"width","200px"),u(Kc,"height","30px"),gl(e),Nl(e),Ml((function(n){return u(tl,e,u(Wi,al,ki(n)))})),rl(ic(r))]),N)]))},u(Nt,z([u(Kc,"margin-left","20px"),u(Kc,"height","100%"),u(Kc,"overflow","scroll")]),z([u(Nt,N,u(Ht,a,o.U)),u(Nt,N,u(Ht,i,o.P)),u(bl,N,N),vl(o),Tl(o)])))),s=u(Nt,z([u(Kc,"margin-left","0px")]),z([u(Jc,z([(c=u(_t,Wc,Vc),u(Uc,"change",u(Lt,c,Yc))),rl(Ic(t.a6)),u(Kc,"width","200px"),u(Kc,"height","40px"),u(Kc,"font-size","20px")]),u(Ht,(function(n){return u(qc,z([rl(Ic(n))]),z([nl(Ic(n))]))}),z([0,1])))])),d=r((function(n,e){return u(Bc,z([u(Kc,"font-size","30px"),u(Kc,"width","40px"),u(Kc,"height","40px"),Gc(n)]),z([nl(e)]))})),m=u(Nt,z([u(Kc,"position","fixed"),u(Kc,"top","0px"),u(Kc,"left","0px"),u(Kc,"width",pc(250)+"px"),u(Kc,"height",pc(t.F.aa.co)+"px"),u(Kc,"font-family",'-apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif'),u(Kc,"font-size","16px")]),z(t.bd?[u(Nt,z([u(Kc,"height","100px")]),z([u(d,Ac,"✕"),s])),u(Nt,z([u(Kc,"height",pc(t.F.aa.co-100)+"px")]),z([f]))]:[u(d,Fc,"≡")]));return u(Nt,z([u(Kc,"touch-action","none"),u(Kc,"user-select","none")]),z([l,m]))})),_l=i((function(n,e,t,o,a,i){return Kt({e4:function(n){var e=u(Nc,n,t);return L({a6:0,F:e,bd:!1,af:o(e),da:0},u(Zt,u(_t,Et,$t),Sc))},ft:function(n){return 1===n.da?u(oo,$t,Ra(zt)):ja},fz:r((function(n,r){return L(s(wc,e,i,n,r),$c)})),fB:u(zl,n,a)})})),Al=o((function(n,e,o,a){return m(_l,n,e,o,a,r((function(){return u(Nt,N,N)})),t((function(n,e,r){return r})))})),Rl=t((function(n,e,r){return s(Al,n,e,Tt,r)})),Vl=r((function(n,e){return e})),Fl=3.141592653589793,kl=function(n){return n*Fl/180},Bl=s(Ei,114/255,159/255,207/255,1),Il=function(n){return Fl*(n/180)},Wl=U,jl=r((function(n,e){var r=e.a5-n.a5,t=e.bE-n.bE,o=e.bD-n.bD,a=u(dt,lc(o),u(dt,lc(t),lc(r)));if(a){var i=r/a,c=t/a,l=o/a,f=Wl(l*l+c*c+i*i);return Br({bD:l/f,bE:c/f,a5:i/f})}return Ir})),Hl=r((function(n,e){return{bD:e.bE*n.a5-e.a5*n.bE,bE:e.a5*n.bD-e.bD*n.a5,a5:e.bD*n.bE-e.bE*n.bD}})),Ol=function(n){var e=n,r=u(dt,lc(e.bD),u(dt,lc(e.bE),lc(e.a5)));if(r){var t=e.a5/r,o=e.bE/r,a=e.bD/r,i=Wl(a*a+o*o+t*t);return Br({bD:a/i,bE:o/i,a5:t/i})}return Ir},Ul=r((function(n,e){return{bD:e.bD-n.bD,bE:e.bE-n.bE,a5:e.a5-n.a5}})),Xl=r((function(n,e){return e.bD*n.bD+e.bE*n.bE+e.a5*n.a5})),Yl=r((function(n,e){return y(e,n)>0})),Gl=r((function(n,e){return 0>y(e,n)})),ql=r((function(n,e){return{bD:e.bD-n.bD,bE:e.bE-n.bE,a5:e.a5-n.a5}})),Jl=r((function(n,e){var r=e.bD*n.bD+e.bE*n.bE+e.a5*n.a5;return{bD:n.bD*r,bE:n.bE*r,a5:n.a5*r}})),Zl={bD:0,bE:0,a5:0},Kl=t((function(n,e,r){return u(vi,(function(t){return u(vi,(function(o){var a,i=u(Hl,e,n),c=u(Xl,r,i),l=u(Yl,0,c)?i:u(Gl,0,c)?{bD:-(a=i).bD,bE:-a.bE,a5:-a.a5}:Zl;return u(Pi,(function(n){return D(t,o,n)}),Ol(l))}),Ol(u(ql,u(Jl,t,e),e)))}),Ol(n))})),Ql=function(n){var e=function(n){var e=n,r=lc(e.a5),t=lc(e.bE),o=lc(e.bD);if(1>y(o,t)){if(1>y(o,r)){var a=Wl(e.a5*e.a5+e.bE*e.bE);return{bD:0,bE:-e.a5/a,a5:e.bE/a}}return a=Wl(e.bE*e.bE+e.bD*e.bD),{bD:-e.bE/a,bE:e.bD/a,a5:0}}return 1>y(t,r)?(a=Wl(e.a5*e.a5+e.bD*e.bD),{bD:e.a5/a,bE:0,a5:-e.bD/a}):(a=Wl(e.bD*e.bD+e.bE*e.bE),{bD:-e.bE/a,bE:e.bD/a,a5:0})}(n);return L(e,{bD:n.bE*e.a5-n.a5*e.bE,bE:n.a5*e.bD-n.bD*e.a5,a5:n.bD*e.bE-n.bE*e.bD})},nu=r((function(n,e){var r=Ql(n);return{cI:e,dd:r.a,de:r.b,df:n}})),eu=function(n){var e=u(Ul,n.dw,n.dv),r=n.ex,t=f(Kl,e,r,u(Hl,e,r));if(t.$){var o=Ol(e);if(o.$){var a=Ql(n.ex);return{cI:n.dv,dd:a.b,de:n.ex,df:a.a}}return u(nu,o.a,n.dv)}var i=t.a;return{cI:n.dv,dd:i.c,de:i.b,df:i.a}},ru={bD:0,bE:0,a5:0},tu=function(n){return lc(n)},ou=function(n){return.5*n},au=I,iu={bD:0,bE:1,a5:0},cu=function(n){var e,r,t,o=n.dw,a=n.dv,i=n.ex;return e={ey:Il(40),c9:eu({dv:a,dw:o,ex:u(fc,iu,u(jl,ru,i))})},t=ou(tu(e.ey)),{cV:(r=au(t),{$:0,a:r}),c9:e.c9}},lu=r((function(n,e){return{$:0,a:n,b:e}})),uu=r((function(n,e){return y(e,n)>-1})),fu=r((function(n,e){return n+.5*(e-n)})),su=r((function(n,e){return e-n})),du={bD:-1,bE:0,a5:0},mu={bD:0,bE:-1,a5:0},vu={bD:0,bE:0,a5:-1},pu={bD:1,bE:0,a5:0},bu={bD:0,bE:0,a5:1},gu=t((function(n,e,r){return{bD:n,bE:e,a5:r}})),hu=i((function(n,e,r,t,o,a){var i=u(uu,r,a)?bu:vu,c=u(uu,e,o)?iu:mu,l=u(uu,n,t)?pu:du,s=D(tu(u(su,n,t)),tu(u(su,e,o)),tu(u(su,r,a)));return{eF:{cI:f(gu,u(fu,n,t),u(fu,e,o),u(fu,r,a)),dd:l,de:c,df:i},dp:s}})),xu=function(n){return n.bD},Cu=function(n){return n.bE},Pu=function(n){return n.a5},Mu=r((function(n,e){return m(hu,xu(n),Cu(n),Pu(n),xu(e),Cu(e),Pu(e))})),yu=t((function(n,e,r){return{bD:n,bE:e,a5:r}})),Tu=r((function(n,e){var r=D(e.a/2,e.b/2,e.c/2),t=r.a,o=r.b,a=r.c;return u(lu,n,u(Mu,f(yu,-t,-o,-a),f(yu,t,o,a)))})),Lu=s(Ei,52/255,101/255,164/255,1),Du=s(Ei,211/255,215/255,207/255,1),wu=function(n){return{$:5,a:n}},Su=function(n){return wu(n)},Nu=r((function(n,e){return{$:2,a:n,b:e}})),Eu=r((function(n,e){return{$:4,a:n,b:e}})),$u=r((function(n,e){return{$:3,a:n,b:e}})),zu=r((function(n,e){return{$:1,a:n,b:e}})),_u=t((function(n,e,r){return{bD:n,bE:e,a5:r}})),Au=function(n){return n.eF},Ru=function(n){return n.dp},Vu=function(n){return n.cI},Fu=r((function(n,e){return{bD:e.bD+n.bD,bE:e.bE+n.bE,a5:e.a5+n.a5}})),ku=function(n){return n.dd},Bu=function(n){return n.de},Iu=function(n){return n.df},Wu=r((function(n,e){return{cI:u(Fu,n,Vu(e)),dd:ku(e),de:Bu(e),df:Iu(e)}})),ju=r((function(n,e){return{eF:u(Wu,n,Au(e)),dp:Ru(e)}})),Hu=r((function(n,e){return{eQ:e,cI:n}})),Ou=r((function(n,e){var r=e;return u(Hu,u(Fu,n,r.cI),r.eQ)})),Uu=r((function(n,e){var r=e;return{k:u(Ou,n,r.k),e6:r.e6,fk:r.fk}})),Xu=r((function(n,e){var r=e.b;return L(n(e.a),n(r))})),Yu=r((function(n,e){return u(Xu,Fu(n),e)})),Gu=function(n){return n.eM},qu=function(n){return n.fk},Ju=r((function(n,e){return{eM:e,fk:tu(n)}})),Zu=r((function(n,e){return u(Ju,qu(e),u(Fu,n,Gu(e)))})),Ku=r((function(n,e){var r=e.b,t=e.c;return D(n(e.a),n(r),n(t))})),Qu=r((function(n,e){return u(Ku,Fu(n),e)})),nf=r((function(n,e){var r=n.a,t=n.b,o=n.c,a=f(_u,r,t,o);switch(e.$){case 0:return u(lu,e.a,u(ju,a,e.b));case 1:return u(zu,e.a,u(Qu,a,e.b));case 3:return u($u,e.a,u(Zu,a,e.b));case 2:return u(Nu,e.a,u(Uu,a,e.b));case 4:return u(Eu,e.a,u(Yu,a,e.b));default:var i=e.a;return wu(u(Ht,nf(D(r,t,o)),i))}})),ef=function(n){return nf(D(0,n,0))},rf=k,tf=B,of=t((function(n,e,r){var t=n,o=r,a=.5*e,i=rf(a),c=tf(a),l=t.eQ,u=l.bD*c,f=i*u,s=u*u,d=l.bE*c,m=i*d,v=u*d,p=d*d,b=l.a5*c,g=i*b,h=u*b,x=d*b,C=b*b;return{bD:(1-2*(p+C))*o.bD+2*(v-g)*o.bE+2*(h+m)*o.a5,bE:2*(v+g)*o.bD+(1-2*(s+C))*o.bE+2*(x-f)*o.a5,a5:2*(h-m)*o.bD+2*(x+f)*o.bE+(1-2*(s+p))*o.a5}})),af=t((function(n,e,r){var t=n,o=r,a=.5*e,i=rf(a),c=tf(a),l=t.cI,u=o.bD-l.bD,f=o.bE-l.bE,s=o.a5-l.a5,d=t.eQ,m=d.bD*c,v=i*m,p=m*m,b=d.bE*c,g=i*b,h=m*b,x=b*b,C=d.a5*c,P=i*C,M=m*C,y=b*C,T=C*C;return{bD:l.bD+(1-2*(x+T))*u+2*(h-P)*f+2*(M+g)*s,bE:l.bE+2*(h+P)*u+(1-2*(p+T))*f+2*(y-v)*s,a5:l.a5+2*(M-g)*u+2*(y+v)*f+(1-2*(p+x))*s}})),cf=t((function(n,e,r){return{cI:f(af,n,e,Vu(r)),dd:f(of,n,e,ku(r)),de:f(of,n,e,Bu(r)),df:f(of,n,e,Iu(r))}})),lf=t((function(n,e,r){return{eF:f(cf,n,e,Au(r)),dp:Ru(r)}})),uf=r((function(n,e){var r=u(af,n,e),t=u(of,n,e);return function(n){var e=n;return u(Hu,r(e.cI),t(e.eQ))}})),ff=t((function(n,e,r){var t=r;return{k:f(uf,n,e,t.k),e6:t.e6,fk:t.fk}})),sf=t((function(n,e,r){return u(Xu,u(af,n,e),r)})),df=t((function(n,e,r){return u(Ju,qu(r),f(af,n,e,Gu(r)))})),mf=t((function(n,e,r){return u(Ku,u(af,n,e),r)})),vf=t((function(n,e,r){switch(r.$){case 0:return u(lu,r.a,f(lf,n,e,r.b));case 1:return u(zu,r.a,f(mf,n,e,r.b));case 3:return u($u,r.a,f(df,n,e,r.b));case 2:return u(Nu,r.a,f(ff,n,e,r.b));case 4:return u(Eu,r.a,f(sf,n,e,r.b));default:var t=r.a;return wu(u(Ht,u(vf,n,e),t))}})),pf=iu,bf=u(Hu,ru,pf),gf=r((function(n,e){return f(vf,bf,n,e)})),hf=r((function(n,e){return n*e})),xf=function(n){return{bD:-n.bD,bE:-n.bE,a5:-n.a5}},Cf=t((function(n,e,r){return{bD:n.bD+e*(r.bD-n.bD),bE:n.bE+e*(r.bE-n.bE),a5:n.a5+e*(r.a5-n.a5)}})),Pf=t((function(n,e,r){var t=Au(r),o=ku(t),a=Bu(t),i=Iu(t),c=f(Cf,n,e,Vu(t)),l=0>e?{cI:c,dd:xf(o),de:xf(a),df:xf(i)}:{cI:c,dd:o,de:a,df:i},s=Ru(r),d=s.b,m=s.c;return{eF:l,dp:D(tu(u(hf,e,s.a)),tu(u(hf,e,d)),tu(u(hf,e,m)))}})),Mf=function(n){return n.k},yf=function(n){return n.eQ},Tf=function(n){return yf(Mf(n))},Lf=function(n){return n.cI},Df=function(n){return n.e6},wf=function(n){return n.fk},Sf=t((function(n,e,r){var t=tu(u(hf,e,wf(r))),o=tu(u(hf,e,Df(r))),a=0>e?xf(Tf(r)):Tf(r),i=f(Cf,n,e,function(n){return Lf(Mf(n))}(r));return{k:u(Hu,i,a),e6:o,fk:t}})),Nf=t((function(n,e,r){return u(Xu,u(Cf,n,e),r)})),Ef=t((function(n,e,r){return u(Ju,u(hf,lc(e),qu(r)),f(Cf,n,e,Gu(r)))})),$f=t((function(n,e,r){return u(Ku,u(Cf,n,e),r)})),zf=r((function(n,e){switch(e.$){case 0:return u(lu,e.a,f(Pf,ru,n,e.b));case 1:return u(zu,e.a,f($f,ru,n,e.b));case 3:return u($u,e.a,f(Ef,ru,n,e.b));case 2:return u(Nu,e.a,f(Sf,ru,n,e.b));case 4:return u(Eu,e.a,f(Nf,ru,n,e.b));default:var r=e.a;return wu(u(Ht,zf(n),r))}})),_f=(Wo=function(n){return u(ef,-1,u(Tu,n,D(10,1,10)))},jo=function(n){return Su(z([Wo(n),u(gf,kl(45),Wo(n))]))},Su(z([jo(Du),u(ef,-.1,u(zf,1.1,jo(Lu))),u(ef,-.2,u(zf,1.2,jo(Du)))]))),Af=W,Rf=o((function(n,e,r,t){var o=D(n,e,r),a=o.a,i=o.b,c=o.c,l=c>.5?c+i-c*i:c*(i+1),u=2*c-l,f=function(n){var e=0>n?n+1:n>1?n-1:n;return 1>6*e?u+(l-u)*e*6:1>2*e?l:2>3*e?u+(l-u)*(2/3-e)*6:u},d=f(a-1/3),m=f(a),v=f(a+1/3);return s(Ei,v,m,d,t)})),Vf=t((function(n,e,r){return s(Rf,n,e,r,1)})),Ff=function(n){return nf(D(n,0,0))},kf=bu,Bf=u(Hu,ru,kf),If=r((function(n,e){return f(vf,Bf,n,e)})),Wf=r((function(n,e){return(e-ft(e/n)*n)/n})),jf=o((function(n,e,r,t){return n+(e-n)*(1+rf(6.283185307179586*u(Wf,r,t)))/2})),Hf=i((function(n,e,t,o,a,i){var c=r((function(n,e){return Wl(u(_i,n,2)+u(_i,e,2))})),l=u(Tu,f(Vf,s(jf,i/6,1,10,n.a1),.6,.6),D(e,t,t)),d=L(u(c,o,a),u(c,e-o,a)),v=d.b,p=i?z([u(ef,t/2,u(Ff,-e/2,u(zf,d.a/e,u(If,u(Af,a,o),u(ef,t/2,u(Ff,e/2,u(gf,s(jf,-2,2,8,n.a1),m(Hf,n,e,t,o,a,i-1)))))))),u(ef,t/2,u(Ff,e/2,u(zf,v/e,u(If,-u(Af,a,e-o),u(ef,t/2,u(Ff,-e/2,u(gf,s(jf,2,-2,8,n.a1),m(Hf,n,e,t,o,a,i-1))))))))]):N;return Su(u(Lr,l,p))})),Of=r((function(n,e){return 360*u(Wf,n,e)})),Uf=r((function(n){return z([u(gf,u(Of,1e3,n.a1),Su(z([_f,m(Hf,n,2,2,1+.001*n.G.bD,1+.001*n.G.bE,5)])))])})),Xf=function(n){return{$:0,a:n}},Yf={$:3},Gf=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),qf=Gf,Jf=r((function(n,e){return e.b?f(jt,Lr,e,n):n})),Zf=function(n){return f(jt,Jf,N,n)},Kf=r((function(n,e){return Zf(u(Ht,n,e))})),Qf=function(n){return u(ue,"height",jr(n))},ns=function(n){return oe(function(n){return"script"==n?"p":n}(n))},es=function(n){return{$:2,a:n}},rs=r((function(n,e){switch(e.$){case 0:return u(mr,n,e);case 1:return u(vr,n,e);case 2:return u(pr,n,e);case 3:return u(br,n,e);case 4:return u(gr,n,e);default:return u(hr,n,e)}})),ts=r((function(n,e){switch(e.$){case 0:return u(qe,n,e);case 1:return u(Je,n,e);case 2:return u(Ze,n,e);case 3:return u(Ke,n,e);case 4:return u(Qe,n,e);case 5:return u(nr,n,e);case 6:return u(er,n,e);case 7:return u(rr,n,e);default:return function(n){var e=n.sampleAlphaToCoverage;e.toggle=n.toggle,e.enabled||(n.gl.enable(n.gl.SAMPLE_ALPHA_TO_COVERAGE),e.enabled=!0)}(n)}})),os=t((function(n,e,r){return f(dr,n,e,r)})),as=Tr,is=s(as,1,1,1,1),cs=t((function(n,e,r){return u(Ht,(function(n){return u(n,e,r)}),n)})),ls=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),us=r((function(n,e){var r=e.bD,t=e.bE;return f(ls,n*r/t,n,n*(1-r-t)/t)})),fs=Mr,ss=r((function(n,e){return f(fs,3.2406*(t=(r=u(us,n,e)).a)-1.5372*(o=r.b)-.4986*(a=r.c),-.9689*t+1.8758*o+.0415*a,.0557*t-.204*o+1.057*a);var r,t,o,a})),ds=r((function(n,e){return{dE:P(n.dE,e.dE),q:n.q*e.q+n.r*e.t+n.s*e.w,r:n.q*e.r+n.r*e.u+n.s*e.x,s:n.q*e.s+n.r*e.v+n.s*e.y,t:n.t*e.q+n.u*e.t+n.v*e.w,u:n.t*e.r+n.u*e.u+n.v*e.x,v:n.t*e.s+n.u*e.v+n.v*e.y,w:n.w*e.q+n.x*e.t+n.y*e.w,x:n.w*e.r+n.x*e.u+n.y*e.x,y:n.w*e.s+n.x*e.v+n.y*e.y,H:e.H+(n.H*e.q+n.I*e.t+n.J*e.w)*e.b5,I:e.I+(n.H*e.r+n.I*e.u+n.J*e.x)*e.b5,J:e.J+(n.H*e.s+n.I*e.v+n.J*e.y)*e.b5,b5:n.b5*e.b5}})),ms=function(n){var e=new Float64Array(16);return e[0]=n.dM,e[1]=n.dQ,e[2]=n.dU,e[3]=n.dY,e[4]=n.dN,e[5]=n.dR,e[6]=n.dV,e[7]=n.dZ,e[8]=n.dO,e[9]=n.dS,e[10]=n.dW,e[11]=n.d_,e[12]=n.dP,e[13]=n.dT,e[14]=n.dX,e[15]=n.d$,e},vs=a((function(n,e,r,t,o){return m(o,n,s(as,t.b5,t.b5,t.b5,t.dE?1:-1),function(n){return ms({dM:n.q,dN:n.t,dO:n.w,dP:n.H,dQ:n.r,dR:n.u,dS:n.x,dT:n.I,dU:n.s,dV:n.v,dW:n.y,dX:n.J,dY:0,dZ:0,d_:0,d$:1})}(t),t.dE,e,r)})),ps=i((function(n,e,r,t,o,a){n:for(;;)switch(o.$){case 0:return a;case 5:var i=o.b;n=n,e=e,r=r,t=u(ds,o.a,t),o=i,a=a;continue n;case 1:return{N:u(Lr,d(vs,n,e,r,t,o.b),a.N),W:a.W,fo:a.fo};case 3:return{N:a.N,W:u(Lr,d(vs,n,e,r,t,o.b),a.W),fo:a.fo};case 2:return{N:a.N,W:a.W,fo:u(Lr,d(vs,n,e,r,t,o.a),a.fo)};default:var c=o.a;return f(Ur,s(ps,n,e,r,t),a,c)}})),bs=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),gs=bs,hs=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),xs=r((function(n,e){return{$:6,a:n,b:e}})),Cs=xs,Ps=z([s(hs,518,!1,0,1),s(gs,!1,!1,!1,!1),u(Cs,0,1)]),Ms=519,ys=7681,Ts={src:"\n        precision lowp float;\n\n        void main() {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        }\n    ",attributes:{},uniforms:{}},Ls=Ge,Ds=r((function(n,e){return{$:0,a:n,b:e}})),ws=Ds({dq:1,dB:0,d8:5}),Ss=Pr,Ns=ws(z([{eg:u(Ss,-1,-1)},{eg:u(Ss,1,-1)},{eg:u(Ss,-1,1)},{eg:u(Ss,1,1)}])),Es={src:"\n        precision lowp float;\n\n        attribute vec2 position;\n\n        void main() {\n            gl_Position = vec4(position, 0.0, 1.0);\n        }\n    ",attributes:{position:"eg"},uniforms:{}},$s=function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return function(f){return{$:2,a:n,b:e,c:r,d:t,e:o,f:a,g:i,h:c,i:l,j:u,k:f}}}}}}}}}}}},zs=t((function(n,e,t){var o=n.cX,a=n.cz,i=n.dc,c=r((function(n,e){return e(n)})),l=r((function(n,e){return e(n)})),s=function(n){return u(_t,c(n.bu),u(_t,l(n.bf),u(_t,l(n.bF),l(n.bG))))};return u(s,t,u(s,e,f($s,o,a,i)))})),_s=function(n){return f(zs,{cz:n.cz,cX:n.cX,dc:n.dc},{bf:n.bf,bu:n.bu,bF:n.bF,bG:n.bG},{bf:n.bf,bu:n.bu,bF:n.bF,bG:n.bG})},As=function(n){return d(Ls,z([_s(n),s(gs,!1,!1,!1,!1)]),Es,Ts,Ns,{})},Rs=As({bf:ys,cz:0,cX:8,bu:Ms,dc:15,bF:ys,bG:ys}),Vs=7680,Fs=function(n){return As({bf:Vs,cz:15,cX:8,bu:516,dc:(e=n,u(_i,2,e+4)),bF:5386,bG:5386});var e},ks=t((function(n,e,r){return Zf(z([f(cs,n,r,Ps),z([Fs(e),Rs])]))})),Bs=r((function(n,e){return Zf(u(Jr,ks(n),e))})),Is=s(hs,513,!0,0,1),Ws=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),js=r((function(n,e){return f(Ws,32774,n,e)})),Hs=function(n){var e=n.b3,t=n.bR,o=n.bK,a=n.bH,i=n.bM,c=n.aO;return u(r((function(n,r){var i=n.b,c=n.c,l=r.a,u=r.b,f=r.c;return function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return{$:0,a:n,b:e,c:r,d:t,e:o,f:a,g:i,h:c,i:l,j:u}}}}}}}}}}}(n.a)(i)(c)(l)(u)(f)(e)(t)(o)(a)})),i,c)}({bH:0,aO:u(js,1,771),bK:0,bM:u(js,770,771),bR:0,b3:0}),Os=z([Is,Hs]),Us=function(n){return n.d3},Xs=function(n){return n.d6},Ys=function(n){return D(u(su,function(n){return n.d4}(n),function(n){return n.d1}(n)),u(su,function(n){return n.d5}(n),function(n){return n.d2}(n)),u(su,Xs(n),Us(n)))},Gs=function(n){return Vu(n)},qs=function(n){return{cI:{bD:n.H,bE:n.I,a5:n.J},dd:{bD:n.q,bE:n.r,a5:n.s},de:{bD:n.t,bE:n.u,a5:n.v},df:{bD:n.w,bE:n.x,a5:n.y}}},Js=r((function(n,e){var r=n.df,t=n.de,o=n.dd;return{bD:e.bD*o.bD+e.bE*o.bE+e.a5*o.a5,bE:e.bD*t.bD+e.bE*t.bE+e.a5*t.a5,a5:e.bD*r.bD+e.bE*r.bE+e.a5*r.a5}})),Zs=r((function(n,e){var r=n.cI,t=e.bD-r.bD,o=e.bE-r.bE,a=e.a5-r.a5,i=n.df,c=n.de,l=n.dd;return{bD:t*l.bD+o*l.bE+a*l.a5,bE:t*c.bD+o*c.bE+a*c.a5,a5:t*i.bD+o*i.bE+a*i.a5}})),Ks=r((function(n,e){return{cI:u(Zs,n,Vu(e)),dd:u(Js,n,ku(e)),de:u(Js,n,Bu(e)),df:u(Js,n,Iu(e))}})),Qs=r((function(n,e){return u(dt,n,e)})),nd=r((function(n,e){return 0>y(n,e)?n:e})),ed=r((function(n,e){return u(nd,n,e)})),rd=r((function(n,e){var r=e,t=n;return{d1:u(Qs,t.d1,r.d1),d2:u(Qs,t.d2,r.d2),d3:u(Qs,t.d3,r.d3),d4:u(ed,t.d4,r.d4),d5:u(ed,t.d5,r.d5),d6:u(ed,t.d6,r.d6)}})),td=r((function(n,e){return e+n})),od=r((function(n,e){var r=n.a,t=n.c,o=ou(tu(n.b)),a=ou(tu(r)),i=ou(tu(t)),c=function(n){return D(n.bD,n.bE,n.a5)}(e),l=c.a,f=c.b,s=c.c;return{d1:u(td,a,l),d2:u(td,o,f),d3:u(td,i,s),d4:u(su,a,l),d5:u(su,o,f),d6:u(su,i,s)}})),ad=o((function(n,e,r,t){var o=r.eM,a=2*r.e$*e,i=2*r.e_*e,c=2*r.eZ*e,l=o.a5*e,s=o.bE*e,d=o.bD*e,m=Iu(n),v=lc(c*m.bD)+lc(i*m.bE)+lc(a*m.a5),p=Bu(n),b=lc(c*p.bD)+lc(i*p.bE)+lc(a*p.a5),g=ku(n),h=lc(c*g.bD)+lc(i*g.bE)+lc(a*g.a5),x=u(od,D(h,b,v),u(Zs,n,f(yu,d,s,l)));return Br(t.$?x:u(rd,t.a,x))})),id=o((function(n,e,r,t){n:for(;;){if(!t.b)return r;var o=t.a,a=t.b;switch(o.$){case 0:n=c=n,e=l=e,r=f=r,t=a;continue n;case 1:var i=s(ad,n,e,o.a,r);n=c=n,e=l=e,r=f=i,t=a;continue n;case 2:n=c=n,e=l=e,r=f=r,t=a;continue n;case 3:i=s(ad,n,e,o.a,r),n=c=n,e=l=e,r=f=i,t=a;continue n;case 4:var c=n,l=e,f=s(id,n,e,r,o.a);n=c,e=l,r=f,t=a;continue n;default:var d=o.a,m=o.b,v=u(Ks,qs(d),n),p=e*d.b5;n=c=n,e=l=e,r=f=s(id,v,p,r,z([m])),t=a;continue n}}})),cd=function(n){return n[0]},ld=function(n){return n[1]},ud=function(n){return n[2]},fd=function(n){return{$:4,a:n}},sd=r((function(n,e){for(;;){if(!n.b)return e;var r=n.a;n=n.b,e=u(Lr,r,e)}})),dd=function(n){return fd(u(sd,n,N))},md={dE:!0,q:1,r:0,s:0,t:0,u:1,v:0,w:0,x:0,y:1,H:0,I:0,J:0,b5:1},vd=As({bf:ys,cz:0,cX:8,bu:Ms,dc:255,bF:ys,bG:ys}),pd={bK:0,eL:!1,bR:0,cT:0,b3:0,c6:0,bD:0,bE:0,a5:0},bd=r((function(n,e){return ms({dM:n.bD,dN:n.b3,dO:e.bD,dP:e.b3,dQ:n.bE,dR:n.bR,dS:e.bE,dT:e.bR,dU:n.a5,dV:n.bK,dW:e.a5,dX:e.bK,dY:n.c6,dZ:n.cT,d_:e.c6,d$:e.cT})})),gd=L({bm:u(bd,pd,pd),bV:u(bd,pd,pd),bW:u(bd,pd,pd),bX:u(bd,pd,pd)},s(as,0,0,0,0)),hd=function(n){return-n},xd=function(n){return s(hs,515,n.ac,n.Y,n.X)},Cd=z([xd({X:1,Y:0,ac:!0}),_s({bf:Vs,cz:240,cX:0,bu:514,dc:0,bF:Vs,bG:Vs}),Hs]),Pd=r((function(n,e){var r=n,t=e.eX,o=e.eE,a=tu(e.fd),i=tu(t),c=r.cV;if(c.$){var l=c.a;return gc(i)?ms({dM:2/(o*l),dN:0,dO:0,dP:0,dQ:0,dR:2/l,dS:0,dT:0,dU:0,dV:0,dW:0,dX:-1,dY:0,dZ:0,d_:0,d$:1}):ms({dM:2/(o*l),dN:0,dO:0,dP:0,dQ:0,dR:2/l,dS:0,dT:0,dU:0,dV:0,dW:-2/(i-a),dX:-(i+a)/(i-a),dY:0,dZ:0,d_:0,d$:1})}var u=c.a;return gc(i)?ms({dM:1/(o*u),dN:0,dO:0,dP:0,dQ:0,dR:1/u,dS:0,dT:0,dU:0,dV:0,dW:-1,dX:-2*a,dY:0,dZ:0,d_:-1,d$:0}):ms({dM:1/(o*u),dN:0,dO:0,dP:0,dQ:0,dR:1/u,dS:0,dT:0,dU:0,dV:0,dW:-(i+a)/(i-a),dX:-2*i*a/(i-a),dY:0,dZ:0,d_:-1,d$:0})})),Md=r((function(n,e){return 1==(1&n>>e)?0:1})),yd=t((function(n,e,r){return Zf(u(Ht,(function(r){var t=r<<4;return f(cs,n,L(e,s(as,u(Md,r,0),u(Md,r,1),u(Md,r,2),u(Md,r,3))),function(n){return z([xd({X:1,Y:0,ac:!0}),_s({bf:Vs,cz:240,cX:n,bu:514,dc:0,bF:Vs,bG:Vs}),Hs])}(t))}),u(qr,1,u(_i,2,r)-1)))})),Td=function(n){return xf(Iu(n))},Ld=pu,Dd={cI:ru,dd:Ld,de:pf,df:kf},wd=r((function(n,e){var r,t,o,a,i;return t=Vu(r=u(Ks,e,n)),o=Iu(r),a=Bu(r),i=ku(r),ms({dM:i.bD,dN:a.bD,dO:o.bD,dP:t.bD,dQ:i.bE,dR:a.bE,dS:o.bE,dT:t.bE,dU:i.a5,dV:a.a5,dW:o.a5,dX:t.a5,dY:0,dZ:0,d_:0,d$:1})})),Sd=function(n){return ku(n)},Nd=t((function(n,e,r){return{bD:n,bE:e,a5:r}})),Ed=function(n){return Bu(n)},$d=r((function(n,e){var r,t=z([(1,{$:1,a:1}),es(0),Xf(!0),s(qf,0,0,0,0)]),o=function(){var e=n.eC;switch(e.$){case 0:return D(t,"0",1);case 1:return D(u(Lr,Yf,t),"1",1);default:return D(t,"0",e.a)}}(),a=o.a,i=o.b,c=o.c,l=n.dp,d=l.a,v=l.b,p=u(Kc,"height",jr(v)+"px"),b=d,g=b/v,h=u(Kf,(function(e){return function(n){var e=function(n){return n.c9}(n.eJ),r={cI:Gs(e),dd:Sd(e),de:Ed(e),df:xf(Td(e))},t=dd(n.dt),o=s(id,r,1,Ir,z([t]));if(1===o.$)return N;var a=o.a,i=u(wd,Dd,e),c=u(hf,.99,u(Qs,tu(n.dm),hd(Us(a)))),l=Ys(a),d=function(n){var e=n,r=u(dt,lc(e.bD),u(dt,lc(e.bE),lc(e.a5)));if(r){var t=e.a5/r,o=e.bE/r,a=e.bD/r;return Wl(a*a+o*o+t*t)*r}return 0}(f(Nd,l.a,l.b,l.c)),v=u(hf,1.01,u(td,d,hd(Xs(a)))),p=u(Pd,n.eJ,{eE:n.eE,eX:v,fd:c}),b=function(n){return{dM:n[0],dQ:n[1],dU:n[2],dY:n[3],dN:n[4],dR:n[5],dV:n[6],dZ:n[7],dO:n[8],dS:n[9],dW:n[10],d_:n[11],dP:n[12],dT:n[13],dX:n[14],d$:n[15]}}(p).d$,g=b?xf(Td(e)):Gs(e),h=function(){var e=n.fy;switch(e.$){case 0:return L(0,0);case 1:return L(1,0);case 2:return L(2,0);case 3:return L(3,e.a);case 4:return L(4,e.a);default:return L(5,0)}}(),x=h.a,C=h.b,P=u(ss,n.eV,n.fD),M=ms({dM:0,dN:g.bD,dO:cd(P),dP:n.es,dQ:0,dR:g.bE,dS:ld(P),dT:d,dU:0,dV:g.a5,dW:ud(P),dX:x,dY:0,dZ:b,d_:0,d$:C}),y=m(ps,M,i,p,md,t,{N:N,W:N,fo:N}),T=n.e8;switch(T.$){case 0:return Zf(z([f(cs,y.N,L(D=T.a,is),Os),f(cs,y.W,gd,Os)]));case 1:var D=T.a;return Zf(z([f(cs,y.N,gd,Os),z([vd]),f(cs,y.fo,D.bm,Ps),z([Fs(0)]),f(cs,y.N,L(D,is),Cd),f(cs,y.W,gd,Os)]));default:var w=T.a,S=T.b;return Zf(z([f(cs,y.N,L(S,is),Os),z([vd]),u(Bs,y.fo,w),f(yd,y.N,S,Xr(w)),f(cs,y.W,gd,Os)]))}}({eE:g,eJ:n.eJ,dm:n.dm,dt:e.dt,eV:e.eV,e8:e.e8,es:c,fy:e.fy,fD:e.fD})}),e),x=u(Kc,"width",jr(b)+"px"),C=function(n){var e,r,t=n.b,o=n.c,a=n.d,i=function(n){return Ai(1e4*n)/100};return e=z(["rgba(",pc(i(n.a)),"%,",pc(i(t)),"%,",pc(i(o)),"%,",pc((r=a,Ai(1e3*r)/1e3)),")"]),u(Hr,"",e)}(n.di);return f(ns,"div",z([u(Kc,"padding","0px"),x,p]),z([L(i,f(os,a,z([(r=Ai(b*c),u(ue,"width",jr(r))),Qf(Ai(v*c)),x,p,u(Kc,"display","block"),u(Kc,"background-color",C)]),h))]))})),zd={bD:.31271,bE:.32902},_d=r((function(n,e){var r=n,t=e.eQ,o=t.bD,a=t.bE,i=t.a5,c=u(ss,e.cp,e.cf);return{bK:ud(c),eL:r,bR:ld(c),cT:0,b3:cd(c),c6:1,bD:-o,bE:-a,a5:-i}})),Ad={$:0},Rd=function(n){return function(n){for(;;){if(P(n.dC,0)&&P(n.dD,0))return pd;if(!u(Yl,tu(n.dC),tu(n.dD))){var e=lc(n.dD/Fl),r=lc(n.dC/Fl),t=n.ex,o=t.bD,a=t.bE,i=t.a5,c=u(ss,1,n.cf);return{bK:r*ud(c),eL:!1,bR:r*ld(c),cT:e/r,b3:r*cd(c),c6:3,bD:o,bE:a,a5:i}}n={cf:n.cf,dC:n.dD,dD:n.dC,ex:xf(n.ex)}}}({cf:n.cf,dC:n.cp,dD:0,ex:n.ex})},Vd=t((function(n,e,r){return 0>y(r,n)?n:y(r,e)>0?e:r})),Fd=function(n){var e=f(Vd,1667,25e3,n),r=e>4e3?-3025846900/(e*e*e)+2107037.9/(e*e)+.2226347*1e3/e+.24039:-266123900.00000003/(e*e*e)-.2343589*1e6/(e*e)+877.6956/e+.17991;return{bD:r,bE:e>2222?e>4e3?r*r*r*3.081758-r*r*5.8733867+3.75112997*r-.37001483:r*r*r*-.9549476-r*r*1.37418593+2.09137015*r-.16748867:r*r*r*-1.1063814-r*r*1.3481102+2.18555832*r-.20219683}},kd=Fd(12e3),Bd=Fd(5600),Id=r((function(n,e){return{$:2,a:n,b:e}})),Wd=function(n){return{$:0,a:n}},jd=function(n){return n.eL},Hd=Wd(gd.a),Od=r((function(n,e){return f(jt,r((function(e,r){var t=r.a,o=r.b;return n(e)?L(u(Lr,e,t),o):L(t,u(Lr,e,o))})),L(N,N),e)})),Ud=function(n){return ms({dM:n.bD,dN:n.b3,dO:0,dP:0,dQ:n.bE,dR:n.bR,dS:0,dT:0,dU:n.a5,dV:n.bK,dW:0,dX:0,dY:n.c6,dZ:n.cT,d_:0,d$:0})},Xd=l((function(n,e,r,t,o,a,i,c){var l=u(Od,jd,z([n,e,r,t])),f=l.a;if(f.b){var s=S(f,l.b);if(s.b&&s.b.b&&s.b.b.b&&s.b.b.b.b&&!s.b.b.b.b.b){var d=s.a,m=s.b,v=m.a,p=m.b,b=p.a,g=p.b.a;return u(Id,u(Ht,Ud,f),{bm:u(bd,d,v),bV:u(bd,b,g),bW:u(bd,o,a),bX:u(bd,i,c)})}return Hd}return Wd({bm:u(bd,n,e),bV:u(bd,r,t),bW:u(bd,o,a),bX:u(bd,i,c)})})),Yd=t((function(n,e,r){return p(Xd,n,e,r,pd,pd,pd,pd,pd)})),Gd=o((function(n,e,r,t){return{$:2,a:n,b:e,c:r,d:t}})),qd=o((function(n,e,r,t){return{$:3,a:n,b:e,c:r,d:t}})),Jd=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),Zd=o((function(n,e,r,t){return{$:6,a:n,b:e,c:r,d:t}})),Kd=o((function(n,e,r,t){return{$:7,a:n,b:e,c:r,d:t}})),Qd=o((function(n,e,r,t){return{$:5,a:n,b:e,c:r,d:t}})),nm=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),em=function(n){switch(n.$){case 0:return n;case 1:return s(nm,n.a,n.b,n.c,1);case 2:return s(Gd,n.a,n.b,n.c,1);case 3:return s(qd,n.a,n.b,n.c,1);case 4:return s(Jd,n.a,n.b,n.c,1);case 5:return s(Qd,n.a,n.b,n.c,1);case 6:return s(Zd,n.a,n.b,n.c,1);case 7:return s(Kd,n.a,n.b,n.c,1);case 8:case 9:default:return n}},rm={$:0},tm=l((function(n,e,r,t,o,a,i,c){for(;;){if(!c.b)return{d1:e,d2:t,d3:a,d4:n,d5:r,d6:o};var l=c.b,f=i(c.a);n=u(ed,f.d4,n),e=u(Qs,f.d1,e),r=u(ed,f.d5,r),t=u(Qs,f.d2,t),o=u(ed,f.d6,o),a=u(Qs,f.d3,a),i=i,c=l}})),om=t((function(n,e,r){var t=n(e);return p(tm,t.d4,t.d1,t.d5,t.d2,t.d6,t.d3,n,r)})),am=r((function(n,e){return 1>y(e,n)})),im=function(n){return u(am,n.d1,n.d4)&&u(am,n.d2,n.d5)&&u(am,n.d3,n.d6)?n:{d1:u(Qs,n.d4,n.d1),d2:u(Qs,n.d5,n.d2),d3:u(Qs,n.d6,n.d3),d4:u(ed,n.d4,n.d1),d5:u(ed,n.d5,n.d2),d6:u(ed,n.d6,n.d3)}},cm=function(n){return n},lm=function(n){var e=n.a,r=n.b,t=n.c,o=xu(e),a=Cu(e),i=Pu(e),c=xu(r),l=Cu(r),f=Pu(r),s=xu(t),d=Cu(t),m=Pu(t);return im({d1:u(Qs,o,u(Qs,c,s)),d2:u(Qs,a,u(Qs,l,d)),d3:u(Qs,i,u(Qs,f,m)),d4:u(ed,o,u(ed,c,s)),d5:u(ed,a,u(ed,l,d)),d6:u(ed,i,u(ed,f,m))})},um=function(n){return new Float64Array([n.bD,n.bE,n.a5])},fm=function(n){return um(n)},sm=function(n){return um(n)},dm=r((function(n,e){var r=n,t=e,o=u(dt,lc(t.bD),u(dt,lc(t.bE),lc(t.a5)));if(o){var a=t.a5/o,i=t.bE/o,c=t.bD/o,l=Wl(c*c+i*i+a*a);return{bD:r*c/l,bE:r*i/l,a5:r*a/l}}return Zl}))(1),mm=t((function(n,e,r){return dm(u(Hl,u(Ul,e,r),u(Ul,n,e)))})),vm=function(n){var e=n.a,r=n.b,t=n.c,o=sm(f(mm,e,r,t));return D({o:o,eg:fm(e)},{o:o,eg:fm(r)},{o:o,eg:fm(t)})},pm=r((function(n,e){return{$:2,a:n,b:e}}))({dq:3,dB:0,d8:4}),bm=t((function(n,e,r){return D(n,e,r)})),gm=(Ho=u(hf,-.5,1),Oo=u(hf,-.5,1),Xo=f(gu,Uo=u(hf,-.5,1),Oo,Ho),Go=f(gu,Uo,Oo,Yo=u(hf,.5,1)),Jo=f(gu,Uo,qo=u(hf,.5,1),Ho),Zo=f(gu,Uo,qo,Yo),Qo=f(gu,Ko=u(hf,.5,1),Oo,Ho),na=f(gu,Ko,qo,Ho),ea=f(gu,Ko,Oo,Yo),ra=f(gu,Ko,qo,Yo),em(function(n){if(n.b){var e=n.a,r=n.b,t=pm(u(Ht,vm,n));return s(Gd,f(om,lm,e,r),n,t,0)}return rm}(z([f(bm,Xo,na,Qo),f(bm,Xo,Jo,na),f(bm,Go,ea,ra),f(bm,Go,ra,Zo),f(bm,Qo,na,ra),f(bm,Qo,ra,ea),f(bm,Xo,Zo,Jo),f(bm,Xo,Go,Zo),f(bm,Xo,Qo,ea),f(bm,Xo,ea,Go),f(bm,Jo,ra,na),f(bm,Jo,Zo,ra)])))),hm={$:0},xm=t((function(n,e,r){return{$:1,a:n,b:e,c:r}})),Cm=t((function(n,e,r){var t=e.a,o=e.b,a=n(e.c),i=n(o),c=n(t),l=sm(f(mm,c,i,a)),s={o:l,eg:fm(c)},d={o:l,eg:fm(i)},m={o:l,eg:fm(a)};return u(Lr,s,u(Lr,d,u(Lr,m,r)))})),Pm=function(n){return n.C},Mm=o((function(n,e,r,t){return 1===e.$||1===r.$||1===t.$?Ir:Br(f(n,e.a,r.a,t.a))})),ym=4294967295>>>32-it,Tm=h,Lm=t((function(n,e,r){for(;;){var t=u(Tm,ym&e>>>n,r);if(t.$)return u(Tm,ym&e,t.a);n-=it,e=e,r=t.a}})),Dm=r((function(n,e){var r=e.a,t=e.b,o=e.c,a=e.d;return 0>n||y(n,r)>-1?Ir:y(n,function(n){return n>>>5<<5}(r))>-1?Br(u(Tm,ym&n,a)):Br(f(Lm,t,n,o))})),wm=function(n){return n.an},Sm=r((function(n,e){return u(Dm,n,wm(e))})),Nm=t((function(n,e,r){for(;;){var t=u(vt,nt,n),o=t.a,a=t.b;if(0>y(st(o),nt))return u(gt,!0,{z:e,l:r,p:o});n=a,e=u(Lr,ut(o),e),r+=1}})),Em=function(n){return n.b?f(Nm,n,N,0):ct},$m=r((function(n,e){return!u(mc,u(go,dc,n),e)})),zm=r((function(n,e){return f(jt,r((function(e,r){return n(e)?u(Lr,e,r):r})),N,e)})),_m=r((function(n,e){var r=function(n){return n.a}(n),t=function(n){var e=n.a,t=n.b,o=n.c;return e>=0&&0>y(e,r)&&t>=0&&0>y(t,r)&&o>=0&&0>y(o,r)};return u($m,t,e)?{C:e,an:n}:{C:u(zm,t,e),an:n}})),Am=t((function(n,e,r){return{$:3,a:n,b:e,c:r}}))({dq:1,dB:3,d8:4}),Rm=r((function(n,e){var r=e;return L(D(n.bD,n.bE,n.a5),D(r.bD,r.bE,r.a5))})),Vm=r((function(n,e){n:for(;;){if(-2===e.$)return Ir;var r=e.c,t=e.d,o=e.e;switch(u(wo,n,e.b)){case 0:n=n,e=t;continue n;case 1:return Br(r);default:n=n,e=o;continue n}}})),Fm=f(fs,0,0,0),km=i((function(n,e,r,t,o,a){var i=a.a,c=a.b,l=a.c,f=u(Vm,u(Rm,n,e),o);if(f.$){var s={o:Fm,eg:fm(e)},d={o:Fm,eg:fm(n)},m=l+1;return D(u(Lr,D(r,l,m),u(Lr,D(r,m,t),i)),u(Lr,s,u(Lr,d,c)),l+2)}return D(u(Lr,D(r,f.a,t),i),c,l)})),Bm=a((function(n,e,r,t,o){for(;;){if(!r.b)return L(o.a,Kr(o.b));var a=r.a,i=a.a,c=a.b,l=r.b,u=n(a.c),f=n(c),s=n(i),d=t+2,v=t+1,p=n,b=e,g=l,h=t+3,x=m(km,u,s,d,t,e,m(km,f,u,v,d,e,m(km,s,f,t,v,e,o)));n=p,e=b,r=g,t=h,o=x}})),Im=a((function(n,e,r,t,o){for(;;){if(!e.b)return D(t,o,r);var a=e.a,i=a.a,c=a.b,l=e.b,s=n(a.c),d=n(c),m=n(i),v=r+2,p=r+1,b=r,g=f(No,u(Rm,m,s),v,f(No,u(Rm,s,d),p,f(No,u(Rm,d,m),b,o)));n=n,e=l,r+=3,t=u(Lr,D(b,p,v),t),o=g}})),Wm=t((function(n,e,r){var o,a=u(ko,(function(n){var e=n.a,r=n.b,a=n.c;return s(Mm,t((function(n,e,r){return D(n,e,r)})),u(Sm,e,o),u(Sm,r,o),u(Sm,a,o))}),Pm(o=r)),i=f(jt,Cm(e),N,a),c=d(Im,e,a,0,N,Mo),l=d(Bm,e,c.b,a,0,D(c.a,N,c.c)),m=l.a,v=l.b,p=v.b?S(i,v):i;return f(xm,n,u(_m,Em(p),m),u(Am,p,m))})),jm=function(n){return{C:u(Ht,(function(n){return D(3*n,3*n+1,3*n+2)}),u(qr,0,Xr(n)-1)),an:Em(Zf(u(Ht,(function(n){return z([n.a,n.b,n.c])}),n)))}},Hm=function(n){switch(n.$){case 0:return hm;case 1:case 2:return f(Wm,n.a,At,jm(u(Ht,cm,n.b)));case 3:return f(Wm,n.a,At,n.b);case 4:case 5:case 6:case 7:return f(Wm,n.a,(function(n){return n.eg}),n.b);case 8:case 9:default:return hm}},Om=Hm(gm),Um={$:0},Xm=Um,Ym=r((function(n,e){return{$:1,a:n,b:e}})),Gm={src:"\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        void main () {\n            gl_FragColor = texture2D(colorTexture, interpolatedUv);\n        }\n    ",attributes:{},uniforms:{colorTexture:"bN"}},qm=function(n){return{$:5,a:n}},Jm=qm(1029),Zm=qm(1028),Km=t((function(n,e,r){return 1===e?u(Lr,n?Jm:Zm,r):r})),Qm={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute mediump vec2 uv;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedUv = uv;\n        }\n    ",attributes:{position:"eg",uv:"L"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},nv=o((function(n,e,r,t){return u(Ym,e,l((function(e,o,a,i,c,l,u,s){return d(Ls,f(Km,i,t,s),Qm,Gm,r,{bN:n,b:a,c:o,d:l,e:e,f:c})})))})),ev={src:"\n        precision lowp float;\n        \n        uniform lowp vec3 constantColor;\n        \n        void main () {\n            gl_FragColor = vec4(constantColor, 1.0);\n        }\n    ",attributes:{},uniforms:{constantColor:"aC"}},rv={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{position:"eg"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},tv=o((function(n,e,r,t){return u(Ym,e,l((function(e,o,a,i,c,l,u,s){return d(Ls,f(Km,i,t,s),rv,ev,r,{aC:n,b:a,c:o,d:l,e:e,f:c})})))})),ov=r((function(n,e){return{$:3,a:n,b:e}})),av={src:"\n        precision lowp float;\n        \n        uniform lowp vec3 constantColor;\n        uniform lowp float pointRadius;\n        uniform highp mat4 sceneProperties;\n        \n        float pointAlpha(float pointRadius, vec2 pointCoord) {\n            float pointSize = 2.0 * pointRadius;\n            float x = (pointSize + 2.0) * (pointCoord.s - 0.5);\n            float y = (pointSize + 2.0) * (pointCoord.t - 0.5);\n            float r = sqrt(x * x + y * y);\n            float innerRadius = pointRadius;\n            float outerRadius = pointRadius + 1.0;\n            if (r > outerRadius) {\n                return 0.0;\n            } else if (r > innerRadius) {\n                return outerRadius - r;\n            } else {\n                return 1.0;\n            }\n        }\n        \n        void main () {\n            float supersampling = sceneProperties[3][0];\n            float alpha = pointAlpha(pointRadius * supersampling, gl_PointCoord);\n            gl_FragColor = vec4(constantColor, alpha);\n        }\n    ",attributes:{},uniforms:{constantColor:"aC",pointRadius:"b1",sceneProperties:"e"}},iv={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform lowp float pointRadius;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            float supersampling = sceneProperties[3][0];\n            gl_PointSize = 2.0 * pointRadius * supersampling + 2.0;\n        }\n    ",attributes:{position:"eg"},uniforms:{modelMatrix:"b",modelScale:"c",pointRadius:"b1",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},cv=o((function(n,e,r,t){return u(ov,r,l((function(r,o,a,i,c,l,u,f){return d(Ls,f,iv,av,t,{aC:n,b:a,c:o,b1:e,d:l,e:r,f:c})})))})),lv={src:"\n        precision mediump float;\n        \n        uniform mediump vec3 emissiveColor;\n        uniform highp mat4 sceneProperties;\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{emissiveColor:"aR",sceneProperties:"e"}},uv=yr,fv=a((function(n,e,r,t,o){return u(Ym,r,l((function(r,a,i,c,l,s,m,v){return d(Ls,f(Km,c,o,v),rv,lv,t,{aR:u(uv,e,n),b:i,c:a,d:s,e:r,f:l})})))})),sv={src:"\n        precision mediump float;\n        \n        uniform mediump vec3 emissiveColor;\n        uniform lowp float pointRadius;\n        uniform highp mat4 sceneProperties;\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        float pointAlpha(float pointRadius, vec2 pointCoord) {\n            float pointSize = 2.0 * pointRadius;\n            float x = (pointSize + 2.0) * (pointCoord.s - 0.5);\n            float y = (pointSize + 2.0) * (pointCoord.t - 0.5);\n            float r = sqrt(x * x + y * y);\n            float innerRadius = pointRadius;\n            float outerRadius = pointRadius + 1.0;\n            if (r > outerRadius) {\n                return 0.0;\n            } else if (r > innerRadius) {\n                return outerRadius - r;\n            } else {\n                return 1.0;\n            }\n        }\n        \n        void main () {\n            vec4 color = toSrgb(emissiveColor, sceneProperties);\n            float supersampling = sceneProperties[3][0];\n            float alpha = pointAlpha(pointRadius * supersampling, gl_PointCoord);\n            gl_FragColor = vec4(color.rgb, alpha);\n        }\n    ",attributes:{},uniforms:{emissiveColor:"aR",pointRadius:"b1",sceneProperties:"e"}},dv=a((function(n,e,r,t,o){return u(ov,t,l((function(t,a,i,c,l,f,s,m){return d(Ls,m,iv,sv,o,{aR:u(uv,e,n),b:i,c:a,b1:r,d:f,e:t,f:l})})))})),mv={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 materialColor;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{enabledLights:"R",lights12:"bm",lights34:"bV",lights56:"bW",lights78:"bX",materialColor:"cA",sceneProperties:"e",viewMatrix:"f"}},vv={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n        }\n    ",attributes:{normal:"o",position:"eg"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},pv=o((function(n,e,r,t){return u(Ym,e,l((function(e,o,a,i,c,l,u,s){var m=u.a,v=u.b;return d(Ls,f(Km,i,t,s),vv,mv,r,{R:v,bm:m.bm,bV:m.bV,bW:m.bW,bX:m.bX,cA:n,b:a,c:o,d:l,e:e,f:c})})))})),bv={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D materialColorTexture;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n            vec3 materialColor = fromSrgb(texture2D(materialColorTexture, interpolatedUv).rgb);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{enabledLights:"R",lights12:"bm",lights34:"bV",lights56:"bW",lights78:"bX",materialColorTexture:"cB",normalMapTexture:"aY",sceneProperties:"e",useNormalMap:"a3",viewMatrix:"f"}},gv={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        attribute mediump vec2 uv;\n        attribute highp vec3 tangent;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getWorldTangent(vec3 modelTangent, vec4 modelScale, mat4 modelMatrix) {\n            return (modelMatrix * vec4(safeNormalize(modelScale.xyz * modelTangent), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = uv;\n            interpolatedTangent = getWorldTangent(tangent, modelScale, modelMatrix);\n        }\n    ",attributes:{normal:"o",position:"eg",tangent:"eu",uv:"L"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},hv=i((function(n,e,r,t,o,a){return u(Ym,t,l((function(t,i,c,l,u,s,m,v){var p=m.a,b=m.b;return d(Ls,f(Km,l,a,v),gv,bv,o,{R:b,bm:p.bm,bV:p.bV,bW:p.bW,bX:p.bX,cB:n,b:c,c:i,aY:e,d:s,e:t,a3:r,f:u})})))})),xv={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D baseColorTexture;\n        uniform lowp vec4 constantBaseColor;\n        uniform mediump sampler2D roughnessTexture;\n        uniform lowp vec2 constantRoughness;\n        uniform mediump sampler2D metallicTexture;\n        uniform lowp vec2 constantMetallic;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getFloatValue(sampler2D texture, vec2 uv, vec2 constantValue) {\n            if (constantValue.y == 1.0) {\n                return constantValue.x;\n            } else {\n                vec4 textureColor = texture2D(texture, uv);\n                return dot(textureColor, vec4(0.2126, 0.7152, 0.0722, 0.0));\n            }\n        }\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 baseColor = fromSrgb(texture2D(baseColorTexture, interpolatedUv).rgb) * (1.0 - constantBaseColor.w) + constantBaseColor.rgb * constantBaseColor.w;\n            float roughness = getFloatValue(roughnessTexture, interpolatedUv, constantRoughness);\n            float metallic = getFloatValue(metallicTexture, interpolatedUv, constantMetallic);\n        \n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{baseColorTexture:"cd",constantBaseColor:"ch",constantMetallic:"ci",constantRoughness:"cj",enabledLights:"R",lights12:"bm",lights34:"bV",lights56:"bW",lights78:"bX",metallicTexture:"cE",normalMapTexture:"aY",roughnessTexture:"c$",sceneProperties:"e",useNormalMap:"a3",viewMatrix:"f"}},Cv={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 baseColor;\n        uniform lowp float roughness;\n        uniform lowp float metallic;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{baseColor:"cc",enabledLights:"R",lights12:"bm",lights34:"bV",lights56:"bW",lights78:"bX",metallic:"cD",roughness:"c_",sceneProperties:"e",viewMatrix:"f"}},Pv=i((function(n,e,r,t,o,a){return u(Ym,t,l((function(t,i,c,l,u,s,m,v){var p=m.a,b=m.b;return d(Ls,f(Km,l,a,v),vv,Cv,o,{cc:n,R:b,bm:p.bm,bV:p.bV,bW:p.bW,bX:p.bX,cD:r,b:c,c:i,d:s,c_:e,e:t,f:u})})))})),Mv=r((function(n,e){return{$:1,a:n,b:e}})),yv=r((function(n,e){return e.$?L(e.a.B,1):L(n,0)})),Tv=s(as,0,0,0,0),Lv=r((function(n,e){var r;return e.$?L(e.a.B,Tv):L(n,s(as,cd(r=e.a),ld(r),ud(r),1))})),Dv=r((function(n,e){var r,t=L(n,e);return t.a.$?u(Mv,L(r=t.a.a.B,Tv),u(yv,r,e)):t.b.$?u(Mv,u(Lv,r=t.b.a.B,n),u(yv,r,e)):{$:0,a:t.a.a}})),wv=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),Sv=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),Nv=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),Ev=u(Ss,0,0),$v=r((function(n,e){return e.$?L(e.a.B,Ev):L(n,u(Ss,e.a,1))})),zv=o((function(n,e,r,t){var o,a=s(Nv,n,e,r,t);return a.a.$?s(Sv,L(o=a.a.a.B,Tv),u($v,o,e),u($v,o,r),u(yv,o,t)):a.b.$?s(Sv,u(Lv,o=a.b.a.B,n),L(o,Ev),u($v,o,r),u(yv,o,t)):a.c.$?s(Sv,u(Lv,o=a.c.a.B,n),u($v,o,e),L(o,Ev),u(yv,o,t)):a.d.$?s(Sv,u(Lv,o=a.d.a.B,n),u($v,o,e),u($v,o,r),L(o,1)):f(wv,a.a.a,a.b.a,a.c.a)})),_v={src:"\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        uniform mediump float backlight;\n        uniform highp mat4 sceneProperties;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            vec3 emissiveColor = fromSrgb(texture2D(colorTexture, interpolatedUv).rgb) * backlight;\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{backlight:"b9",colorTexture:"bN",sceneProperties:"e"}},Av=a((function(n,e,r,t,o){return u(Ym,r,l((function(r,a,i,c,l,u,s,m){return d(Ls,f(Km,c,o,m),Qm,_v,t,{b9:e,bN:n,b:i,c:a,d:u,e:r,f:l})})))})),Rv={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        attribute mediump vec2 uv;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = uv;\n            interpolatedTangent = vec3(0.0, 0.0, 0.0);\n        }\n    ",attributes:{normal:"o",position:"eg",uv:"L"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Vv=o((function(n,e,r,t){return u(Ym,e,l((function(e,o,a,i,c,l,u,s){var m=u.a,v=u.b;return d(Ls,f(Km,i,t,s),Rv,bv,r,{R:v,bm:m.bm,bV:m.bV,bW:m.bW,bX:m.bX,cB:n,b:a,c:o,aY:n,d:l,e:e,a3:0,f:c})})))})),Fv=function(n){return e(9,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return n(e,r,t,o,a,i,c,l,u)}}}}}}}}}))}((function(n,e,r,t,o,a,i,c,s){return u(Ym,i,l((function(i,l,u,m,v,p,b,g){var h=b.a,x=b.b;return d(Ls,f(Km,m,s,g),Rv,xv,c,{cd:n,ch:e,ci:a,cj:t,R:x,bm:h.bm,bV:h.bV,bW:h.bW,bX:h.bX,cE:o,b:u,c:l,aY:n,d:p,c$:r,e:i,a3:0,f:v})})))})),kv=t((function(n,e,r){return r>.5?e+(1-r)*(n-e):n+r*(e-n)})),Bv=function(n){return f(gu,function(n){return f(kv,n.d4,n.d1,.5)}(n),function(n){return f(kv,n.d5,n.d2,.5)}(n),function(n){return f(kv,n.d6,n.d3,.5)}(n))},Iv=function(n){var e=Ys(n),r=e.a,t=e.b,o=e.c;return{eM:Bv(n),eZ:r/2,e_:t/2,e$:o/2}},Wv=r((function(n,e){switch(n.$){case 0:if(n.b.$){var r=n.b.a.B;switch(e.$){case 0:case 1:case 2:case 3:case 4:return Xm;case 5:case 6:case 7:return o=e.c,a=e.d,s(nv,r,Iv(R=e.a),o,a);case 8:case 9:default:return Xm}}else{var t=n.b.a;switch(e.$){case 0:return Xm;case 1:var o=e.c,a=e.d;return s(tv,t,Iv(R=e.a),o,a);case 2:case 3:case 4:return o=e.c,a=e.d,s(tv,t,Iv(R=e.a),o,a);case 5:case 6:case 7:return o=e.c,a=e.d,s(tv,t,Iv(R=e.a),o,a);case 8:case 9:return o=e.c,s(tv,t,Iv(R=e.a),o,0);default:return o=e.d,s(cv,t,e.b,Iv(R=e.a),o)}}case 1:if(n.b.$)switch(r=n.b.a.B,c=n.c,e.$){case 0:case 1:case 2:case 3:case 4:return Xm;case 5:case 6:case 7:return o=e.c,a=e.d,d(Av,r,c,Iv(R=e.a),o,a);case 8:case 9:default:return Xm}else{var i=n.b.a,c=n.c;switch(e.$){case 0:return Xm;case 1:case 2:case 3:case 4:case 5:case 6:case 7:return o=e.c,a=e.d,d(fv,i,c,Iv(R=e.a),o,a);case 8:case 9:return o=e.c,d(fv,i,c,Iv(R=e.a),o,0);default:return o=e.d,d(dv,i,c,e.b,Iv(R=e.a),o)}}case 2:var v=u(Dv,n.b,n.c);if(v.$){var p=v.a.a,b=v.b,g=b.a,h=b.b;switch(e.$){case 0:case 1:case 2:case 3:case 4:case 5:return Xm;case 6:return o=e.c,C=e.d,s(Vv,p,Iv(R=e.a),o,C);case 7:return o=e.c,C=e.d,m(hv,p,g,h,Iv(R=e.a),o,C);case 8:case 9:default:return Xm}}else{var x=v.a;switch(e.$){case 0:case 1:return Xm;case 2:o=e.c;var C=e.d;return s(pv,x,Iv(R=e.a),o,C);case 3:return Xm;case 4:return o=e.c,C=e.d,s(pv,x,Iv(R=e.a),o,C);case 5:return Xm;case 6:case 7:return o=e.c,C=e.d,s(pv,x,Iv(R=e.a),o,C);case 8:case 9:default:return Xm}}default:var P=s(zv,n.b,n.c,n.d,n.e);if(P.$){var M=P.a,y=M.a,T=M.b,L=P.b,D=L.a,w=L.b,S=P.c,N=S.a,E=S.b,$=P.d;switch(g=$.a,h=$.b,e.$){case 0:case 1:case 2:case 3:case 4:case 5:return Xm;case 6:return o=e.c,a=e.d,function(n,e,r,t,o,a,i,c,l,u){return 9===n.a?n.f(e,r,t,o,a,i,c,l,u):n(e)(r)(t)(o)(a)(i)(c)(l)(u)}(Fv,y,T,D,w,N,E,Iv(R=e.a),o,a);case 7:return R=e.a,o=e.c,a=e.d,function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(s){return function(m){return function(v){return u(Ym,s,l((function(l,u,s,p,b,g,h,x){var C=h.a,P=h.b;return d(Ls,f(Km,p,v,x),gv,xv,m,{cd:n,ch:e,ci:a,cj:t,R:P,bm:C.bm,bV:C.bV,bW:C.bW,bX:C.bX,cE:o,b:s,c:u,aY:i,d:g,c$:r,e:l,a3:c,f:b})})))}}}}}}}}}}}(y)(T)(D)(w)(N)(E)(g)(h)(Iv(R))(o)(a);case 8:case 9:default:return Xm}}else{var z=P.a,_=P.b,A=P.c;switch(e.$){case 0:case 1:return Xm;case 2:return o=e.c,a=e.d,m(Pv,z,_,A,Iv(R=e.a),o,a);case 3:return Xm;case 4:return o=e.c,a=e.d,m(Pv,z,_,A,Iv(R=e.a),o,a);case 5:return Xm;case 6:return o=e.c,a=e.d,m(Pv,z,_,A,Iv(R=e.a),o,a);case 7:var R;return o=e.c,a=e.d,m(Pv,z,_,A,Iv(R=e.a),o,a);case 8:case 9:default:return Xm}}}})),jv=function(n){return n.bD},Hv=function(n){return n.bE},Ov=function(n){return n.a5},Uv=function(n){var e=n,r=Ov(e.df),t=Hv(e.df),o=jv(e.df),a=Ov(e.de),i=Hv(e.de),c=jv(e.de),l=Ov(e.dd),u=Hv(e.dd),f=jv(e.dd);return f*i*r+u*a*o+l*c*t-l*i*o-u*c*r-f*a*t>0},Xv=r((function(n,e){return{$:5,a:n,b:e}})),Yv=r((function(n,e){var r=e;switch(r.$){case 0:return Xm;case 5:var t=r.b;return u(Xv,u(ds,r.a,n),t);case 1:case 3:case 2:default:return u(Xv,n,r)}})),Gv=r((function(n,e){return u(Yv,function(n){var e=Vu(n),r=Iu(n),t=Bu(n),o=ku(n);return{dE:Uv(n),q:o.bD,r:o.bE,s:o.a5,t:t.bD,u:t.bE,v:t.a5,w:r.bD,x:r.bE,y:r.a5,H:e.bD,I:e.bE,J:e.a5,b5:1}}(n),e)})),qv=function(n){return{$:2,a:n}},Jv=r((function(n,e){var r=n.a,t=n.b,o=n.c,a=e.eM;return{eM:{bD:r*a.bD,bE:t*a.bE,a5:o*a.a5},eZ:r*e.eZ,e_:t*e.e_,e$:o*e.e$}})),Zv=function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){var f,s,d={bD:(s=t)[0],bE:s[1],a5:s[2],eA:s[3]},m=(f={eA:d.eA,bD:d.bD*n.a,bE:d.bE*n.b,a5:d.a5*n.c},new Float64Array([f.bD,f.bE,f.a5,f.eA]));return p(e,r,m,o,a,i,c,l,u)}}}}}}}}}},Kv=r((function(n,e){switch(e.$){case 0:return Um;case 5:return u(Xv,e.a,u(Kv,n,e.b));case 1:var r=e.b;return u(Ym,u(Jv,n,e.a),u(Zv,n,r));case 3:return e;case 2:return qv(u(Zv,n,r=e.a));default:var t=e.a;return fd(u(Ht,Kv(n),t))}})),Qv=r((function(n,e){return u(Kv,n,e)})),np={src:"\n        precision lowp float;\n        \n        void main () {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        }\n    ",attributes:{},uniforms:{}},ep=f(zs,{cz:0,cX:0,dc:15},{bf:Vs,bu:Ms,bF:Vs,bG:7683},{bf:Vs,bu:Ms,bF:Vs,bG:7682}),rp=f(zs,{cz:0,cX:0,dc:15},{bf:Vs,bu:Ms,bF:Vs,bG:7682},{bf:Vs,bu:Ms,bF:Vs,bG:7683}),tp=r((function(n,e){return u(Lr,n?rp:ep,e)})),op={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 shadowVertexPosition(vec3 position, vec3 normal, mat4 shadowLight, vec4 modelScale, mat4 modelMatrix, mat4 viewMatrix, mat4 projectionMatrix, mat4 sceneProperties) {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            vec3 worldNormal = getWorldNormal(normal, vec4(modelScale.xyz, 1.0), modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 directionToLight = getDirectionToLight(worldPosition.xyz, xyz_type, rgb_parameter);\n            vec3 offset = vec3(0.0, 0.0, 0.0);\n            float sceneDiameter = sceneProperties[3][1];\n            if (dot(directionToLight, worldNormal) <= 0.0) {\n                offset = -sceneDiameter * directionToLight;\n            } else {\n                offset = -0.001 * sceneDiameter * directionToLight;\n            }\n            vec4 offsetPosition = worldPosition + vec4(offset, 0.0);\n            return projectionMatrix * (viewMatrix * offsetPosition);\n        }\n        \n        void main () {\n            gl_Position = shadowVertexPosition(\n                position,\n                normal,\n                shadowLight,\n                modelScale,\n                modelMatrix,\n                viewMatrix,\n                projectionMatrix,\n                sceneProperties\n            );\n        }\n    ",attributes:{normal:"o",position:"eg"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"b6",viewMatrix:"f"}},ap=function(n){var e=function(n){if(n.$){var e=n.c;return Br(l((function(n,r,t,o,a,i,c,l){return d(Ls,u(tp,o,l),op,np,e,{b:t,c:r,d:i,e:n,b6:c,f:a})})))}return Ir}(n);return e.$?Xm:qv(e.a)},ip=o((function(n,e,r,t){var o,a=u(Wv,r,gm),i=(o=L(n,e)).a?o.b?dd(z([a,ap(Om)])):a:o.b?ap(Om):Xm,c=Ru(t),l=c.a,f=c.b,s=c.c;return u(Gv,Au(t),u(Qv,D(l,f,s),i))})),cp=r((function(n,e){return s(ip,!0,!0,n,e)})),lp=function(n){return{$:0,a:n}},up=r((function(n,e){return{$:0,a:n,b:e}})),fp=function(n){return rf(n)},sp=r((function(n,e){return e/n})),dp=function(n){var e=n;return{bD:rf(e),bE:tf(e)}},mp=r((function(n,e){var r=n.eg;return u(Lr,{o:sm(n.o),eg:fm(r)},e)})),vp=c((function(n,e,r,t,o,a,i){for(;;){if(!i.b)return im({d1:e,d2:t,d3:a,d4:n,d5:r,d6:o});var c=i.a,l=i.b,f=ud(c.eg),s=ld(c.eg),d=cd(c.eg);n=u(nd,n,d),e=u(dt,e,d),r=u(nd,r,s),t=u(dt,t,s),o=u(nd,o,f),a=u(dt,a,f),i=l}})),pp=r((function(n,e){var r=ud(n.eg),t=ld(n.eg),o=cd(n.eg);return v(vp,o,o,t,t,r,r,e)})),bp=r((function(n,e){var r=n.de,t=n.dd;return{bD:e.bD*t.bD+e.bE*r.bD,bE:e.bD*t.bE+e.bE*r.bE,a5:e.bD*t.a5+e.bE*r.a5}})),gp=function(n){return tf(n)},hp=function(n){return 6.283185307179586*n},xp={cI:ru,dd:Ld,de:pf},Cp=(ta=u(sp,72,hp(1)),oa=bu,aa=vu,ca=f(gu,0,0,ia=u(hf,.5,1)),ua=f(gu,0,0,la=u(hf,-.5,1)),em(function(n){var e=f(wr,mp,N,wm(n));if(e.b){var r=e.a,t=e.b,o=u(Am,e,Pm(n));return s(Jd,u(pp,r,t),n,o,0)}return rm}(jm(Zf(u(Ht,(function(n){var e=u(hf,n,ta),r=u(bp,xp,dp(e)),t=u(hf,fp(e),1),o=u(hf,gp(e),1),a=f(gu,t,o,ia),i=f(gu,t,o,la),c=u(hf,u(rc,72,n+1),ta),l=u(bp,xp,dp(c)),s=u(hf,fp(c),1),d=u(hf,gp(c),1),m=f(gu,s,d,la),v=f(gu,s,d,ia);return z([D({o:aa,eg:ua},{o:aa,eg:m},{o:aa,eg:i}),D({o:r,eg:i},{o:l,eg:m},{o:l,eg:v}),D({o:r,eg:i},{o:l,eg:v},{o:r,eg:a}),D({o:oa,eg:ca},{o:oa,eg:a},{o:oa,eg:v})])}),u(qr,0,71))))))),Pp=Hm(Cp),Mp=o((function(n,e,r,t){var o,a=function(n){var e=yf(n),r=Ql(e),t=r.a,o=r.b;return{cI:Lf(n),dd:t,de:o,df:e}}(Mf(t)),i=u(Wv,r,Cp),c=(o=L(n,e)).a?o.b?dd(z([i,ap(Pp)])):i:o.b?ap(Pp):Xm,l=wf(t),f=Df(t);return u(Gv,a,u(Qv,D(l,l,f),c))})),yp=r((function(n,e){return s(Mp,!0,!0,n,e)})),Tp={src:"\n        precision highp float;\n        \n        attribute lowp float triangleVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 triangleVertexPositions;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleVertex), triangleVertexPositions, position, normal);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{triangleVertex:"c5"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",triangleVertexPositions:"bA",viewMatrix:"f"}},Lp={src:"\n        precision highp float;\n        \n        attribute lowp float triangleVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 triangleVertexPositions;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleVertex), triangleVertexPositions, position, normal);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n        }\n    ",attributes:{triangleVertex:"c5"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",triangleVertexPositions:"bA",viewMatrix:"f"}},Dp=function(n){var e=n.a,r=n.b,t=n.c;return ms({dM:e.bD,dN:r.bD,dO:t.bD,dP:0,dQ:e.bE,dR:r.bE,dS:t.bE,dT:0,dU:e.a5,dV:r.a5,dW:t.a5,dX:0,dY:0,dZ:0,d_:0,d$:0})},wp=pm(z([D({c5:0},{c5:1},{c5:2})])),Sp=r((function(n,e){var r=lm(e),t=Iv(r);switch(n.$){case 0:if(n.b.$)return Xm;var o=n.b.a;return u(Ym,t,l((function(n,r,t,a,i,c,l,u){return d(Ls,f(Km,a,0,u),Tp,ev,wp,{aC:o,b:t,c:r,d:c,e:n,bA:Dp(e),f:i})})));case 1:if(n.b.$)return Xm;var a=n.b.a,i=n.c;return u(Ym,t,l((function(n,r,t,o,c,l,s,m){return d(Ls,f(Km,o,0,m),Tp,lv,wp,{aR:u(uv,i,a),b:t,c:r,d:l,e:n,bA:Dp(e),f:c})})));case 2:var c=u(Dv,n.b,n.c);if(c.$)return Xm;var m=c.a;return u(Ym,t,l((function(n,r,t,o,a,i,c,l){var u=c.a,s=c.b;return d(Ls,f(Km,o,0,l),Lp,mv,wp,{R:s,bm:u.bm,bV:u.bV,bW:u.bW,bX:u.bX,cA:m,b:t,c:r,d:i,e:n,bA:Dp(e),f:a})})));default:var v=s(zv,n.b,n.c,n.d,n.e);if(v.$)return Xm;var p=v.a,b=v.b,g=v.c;return u(Ym,t,l((function(n,r,t,o,a,i,c,l){var u=c.a,s=c.b;return d(Ls,f(Km,o,0,l),Lp,Cv,wp,{cc:p,R:s,bm:u.bm,bV:u.bV,bW:u.bW,bX:u.bX,cD:g,b:t,c:r,d:i,c_:b,e:n,bA:Dp(e),f:a})})))}})),Np=(fa=z([{a2:u(Ss,0,1)},{a2:u(Ss,1,1)},{a2:u(Ss,2,1)},{a2:u(Ss,0,-1)},{a2:u(Ss,1,-1)},{a2:u(Ss,2,-1)}]),sa=z([D(0,1,2),D(3,5,4),D(3,4,1),D(3,1,0),D(4,5,2),D(4,2,1),D(5,3,0),D(5,0,2)]),u(Am,fa,sa)),Ep={src:"\n        precision highp float;\n        \n        attribute highp vec2 triangleShadowVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        uniform highp mat4 triangleVertexPositions;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 shadowVertexPosition(vec3 position, vec3 normal, mat4 shadowLight, vec4 modelScale, mat4 modelMatrix, mat4 viewMatrix, mat4 projectionMatrix, mat4 sceneProperties) {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            vec3 worldNormal = getWorldNormal(normal, vec4(modelScale.xyz, 1.0), modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 directionToLight = getDirectionToLight(worldPosition.xyz, xyz_type, rgb_parameter);\n            vec3 offset = vec3(0.0, 0.0, 0.0);\n            float sceneDiameter = sceneProperties[3][1];\n            if (dot(directionToLight, worldNormal) <= 0.0) {\n                offset = -sceneDiameter * directionToLight;\n            } else {\n                offset = -0.001 * sceneDiameter * directionToLight;\n            }\n            vec4 offsetPosition = worldPosition + vec4(offset, 0.0);\n            return projectionMatrix * (viewMatrix * offsetPosition);\n        }\n        \n        void main () {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleShadowVertex.x), triangleVertexPositions, position, normal);\n            normal *= triangleShadowVertex.y;\n            gl_Position = shadowVertexPosition(\n                position,\n                normal,\n                shadowLight,\n                modelScale,\n                modelMatrix,\n                viewMatrix,\n                projectionMatrix,\n                sceneProperties\n            );\n        }\n    ",attributes:{triangleShadowVertex:"a2"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"b6",triangleVertexPositions:"bA",viewMatrix:"f"}},$p=function(n){return qv(l((function(e,r,t,o,a,i,c,l){return d(Ls,u(tp,o,l),Ep,np,Np,{b:t,c:r,d:i,e:e,b6:c,bA:Dp(n),f:a})})))},zp=o((function(n,e,r,t){var o=u(Sp,r,t),a=L(n,e);return a.a?a.b?dd(z([o,$p(t)])):o:a.b?$p(t):Xm})),_p=r((function(n,e){return s(zp,!0,!0,n,e)})),Ap=r((function(n,e){var r=Pu(e),t=Pu(n),o=Cu(e),a=Cu(n),i=xu(e),c=xu(n);return{d1:u(Qs,c,i),d2:u(Qs,a,o),d3:u(Qs,t,r),d4:u(ed,c,i),d5:u(ed,a,o),d6:u(ed,t,r)}})),Rp={src:"\n        precision highp float;\n        \n        attribute lowp float lineSegmentVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp vec3 lineSegmentStartPoint;\n        uniform highp vec3 lineSegmentEndPoint;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = (1.0 - lineSegmentVertex) * lineSegmentStartPoint + lineSegmentVertex * lineSegmentEndPoint;\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{lineSegmentVertex:"dL"},uniforms:{lineSegmentEndPoint:"dJ",lineSegmentStartPoint:"dK",modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Vp=r((function(n,e){return{$:1,a:n,b:e}}))({dq:2,dB:0,d8:1})(z([L({dL:0},{dL:1})])),Fp=r((function(n,e){var r,t=u(Ap,(r=e).a,r.b),o=Iv(t),a=e.a,i=e.b;switch(n.$){case 0:if(n.b.$)return Xm;var c=n.b.a;return u(Ym,o,l((function(n,e,r,t,o,l,u,f){return d(Ls,f,Rp,ev,Vp,{aC:c,dJ:fm(i),dK:fm(a),b:r,c:e,d:l,e:n,f:o})})));case 1:if(n.b.$)return Xm;c=n.b.a;var f=n.c;return u(Ym,o,l((function(n,e,r,t,o,l,s,m){return d(Ls,m,Rp,lv,Vp,{aR:u(uv,f,c),dJ:fm(i),dK:fm(a),b:r,c:e,d:l,e:n,f:o})})));case 2:default:return Xm}})),kp=r((function(n,e){return u(Fp,n,e)})),Bp=t((function(n,e,r){return{$:2,a:n,b:e,c:r}})),Ip=function(n){return f(Vd,0,1,n>.04045?u(_i,(n+.055)/1.055,2.4):n/12.92)},Wp=function(n){return f(Bp,0,lp(function(n){var e=ac(n),r=e.cn,t=e.ce;return f(fs,Ip(e.cW),Ip(r),Ip(t))}(n)),lp(0))},jp=r((function(n,e){return n/e})),Hp=a((function(n,e,r,t,o){for(;;){var a=t(e/r),i=u(Lr,a,o);if(P(e,n))return i;n=n,e-=1,r=r,t=t,o=i}})),Op=r((function(n,e){return 1>n?N:d(Hp,0,n,n,e,N)})),Up=r((function(n,e){var r=n.eg,t=n.L,o=t.a,a=t.b;return u(Lr,{o:sm(n.o),eg:fm(r),L:u(Ss,o,a)},e)})),Xp=r((function(n,e){var r=n,t=e,o=rf(t);return{bD:o*rf(r),bE:o*tf(r),a5:tf(t)}})),Yp=(da=u(qr,0,71),ma=u(Op,72,u(kv,0,hp(1))),va=tt(36),pa=u(qr,0,va-1),ba=u(Op,va,u(kv,Il(90),Il(-90))),ga=Em(Zf(u(Ht,(function(n){return u(Ht,(function(e){return{o:u(Xp,n,e),eg:f(gu,u(hf,fp(e)*fp(n),1),u(hf,fp(e)*gp(n),1),u(hf,gp(e),1)),L:L(u(jp,n,hp(1)),u(jp,u(td,Il(90),e),Il(180)))}}),ba)}),ma))),ha=r((function(n,e){return n*(va+1)+e})),xa=Zf(u(Ht,(function(n){return Zf(u(Ht,(function(e){var r=u(ha,n+1,e),t=u(ha,n,e),o=u(ha,n+1,e+1),a=u(ha,n,e+1);return z([D(a,o,r),D(a,r,t)])}),pa))}),da)),em(function(n){var e=f(wr,Up,N,wm(n));if(e.b){var r=e.a,t=e.b,o=u(Am,e,Pm(n));return s(Zd,u(pp,r,t),n,o,0)}return rm}(u(_m,ga,xa)))),Gp=r((function(n,e){for(;;){var r=u(rc,144,2*n+3),t=u(rc,144,2*n+2),o=2*n+1,a=2*n,i=u(Lr,D(144,a,t),u(Lr,D(a,r,t),u(Lr,D(a,o,r),u(Lr,D(o,145,r),e))));if(!n)return i;n-=1,e=i}})),qp=t((function(n,e,r){return r>.5?e+(1-r)*(n-e):n+r*(e-n)})),Jp=(Ca=u(r((function(n,e){for(;;){var r=f(qp,0,6.283185307179586,n/72),t=u(Lr,{bI:r,b_:0,b4:1},u(Lr,{bI:r,b_:1,b4:1},e));if(!n)return t;n-=1,e=t}})),71,z([{bI:0,b_:0,b4:0},{bI:0,b_:1,b4:0}])),u(Am,Ca,u(Gp,71,N))),Zp={src:"\n        precision highp float;\n        \n        attribute highp float angle;\n        attribute highp float offsetScale;\n        attribute highp float radiusScale;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const lowp float kPerspectiveProjection = 0.0;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec3 perpendicularTo(vec3 d) {\n            float absX = abs(d.x);\n            float absY = abs(d.y);\n            float absZ = abs(d.z);\n            if (absX <= absY) {\n                if (absX <= absZ) {\n                    float scale = 1.0 / length(d.zy);\n                    return vec3(0.0, -d.z * scale, d.y * scale);\n                } else {\n                    float scale = 1.0 / length(d.xy);\n                    return vec3(-d.y * scale, d.x * scale, 0.0);\n                }\n            } else {\n                if (absY <= absZ) {\n                    float scale = 1.0 / length(d.xz);\n                    return vec3(d.z * scale, 0.0, -d.x * scale);\n                } else {\n                    float scale = 1.0 / length(d.xy);\n                    return vec3(-d.y * scale, d.x * scale, 0.0);\n                }\n            }\n        }\n        \n        void main () {\n            vec4 worldCenter = getWorldPosition(vec3(0.0, 0.0, 0.0), modelScale, modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 zDirection = getDirectionToLight(worldCenter.xyz, xyz_type, rgb_parameter);\n            vec3 xDirection = perpendicularTo(zDirection);\n            vec3 yDirection = cross(zDirection, xDirection);\n            float r = modelScale.x;\n            float adjustedRadius = r;\n            float zOffset = 0.0;\n            if (xyz_type.w == kPointLight) {\n                float distanceToLight = length(xyz_type.xyz - worldCenter.xyz);\n                float rSquared = r * r;\n                zOffset = rSquared / distanceToLight;\n                float zSquared = zOffset * zOffset;\n                adjustedRadius = sqrt(rSquared - zSquared) * radiusScale;\n            }\n            vec3 worldPosition =\n                worldCenter.xyz\n                    + zDirection * zOffset\n                    + xDirection * adjustedRadius * cos(angle)\n                    + yDirection * adjustedRadius * sin(angle);\n            vec3 directionToLight = getDirectionToLight(worldPosition, xyz_type, rgb_parameter);\n            float sceneDiameter = sceneProperties[3][1];\n            vec3 offset = -sceneDiameter * offsetScale * directionToLight;\n            vec4 offsetPosition = vec4(worldPosition + offset, 1.0);\n            gl_Position = projectionMatrix * (viewMatrix * offsetPosition);\n        }\n    ",attributes:{angle:"bI",offsetScale:"b_",radiusScale:"b4"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"b6",viewMatrix:"f"}},Kp=function(){return qv(l((function(n,e,r,t,o,a,i,c){return d(Ls,u(tp,!0,c),Zp,np,Jp,{aC:f(fs,0,0,1),b:r,c:e,d:a,e:n,b6:i,f:o})})))},Qp=r((function(n,e){return u(Yv,function(n){return{dE:!0,q:1,r:0,s:0,t:0,u:1,v:0,w:0,x:0,y:1,H:n.bD,I:n.bE,J:n.a5,b5:1}}(n),e)})),nb=o((function(n,e,r,t){var o,a=u(Wv,r,Yp),i=(o=L(n,e)).a?o.b?dd(z([a,Kp()])):a:o.b?Kp():Xm,c=qu(t);return u(Qp,u(Ul,ru,Gu(t)),u(Qv,D(c,c,c),i))})),eb=r((function(n,e){return s(nb,!0,!0,n,e)})),rb=function(n){switch(n.$){case 0:var e=n.b;return z([u(cp,Wp(n.a),e)]);case 1:var r=n.b;return z([u(_p,Wp(n.a),r)]);case 3:var t=n.b;return z([u(eb,Wp(n.a),t)]);case 2:var o=n.b;return z([u(yp,Wp(n.a),o)]);case 4:var a=n.b;return z([u(kp,(i=n.a,u(up,0,lp(function(n){var e=ac(n);return f(fs,e.cW,e.cn,e.ce)}(i)))),a)]);default:return u(Kf,rb,n.a)}var i},tb=r((function(n,e){return function(n){var e,r=u(_d,n.fo,{cf:Bd,eQ:n.fv,cp:8e4}),t=Rd({cf:kd,cp:2e4,ex:n.ex}),o=Rd({cf:zd,cp:15e3,ex:xf(n.ex)}),a=f(Yd,r,t,o);return function(n){return u($d,{eC:n.eC,di:n.di,eJ:n.eJ,dm:n.dm,dp:n.dp},z([{dt:n.dt,eV:n.eV,e8:n.e8,fy:n.fy,fD:n.fD}]))}({eC:(e=n.ck,{$:2,a:e}),di:n.di,eJ:n.eJ,dm:n.dm,dp:n.dp,dt:n.dt,eV:1.2*u(_i,2,15),e8:a,fy:Ad,fD:zd})}({di:n.eG,eJ:n.eJ,dm:.005,ck:n.ck,dp:L(Ai(n.aa.db),Ai(n.aa.co)),dt:(r=e,u(Kf,rb,r)),fo:!0,fv:u(Xp,n.fu,n.fw),ex:kf});var r}));Pa={Main:{init:f(Rl,r((function(n,e){return u(tb,{eG:Bl,eJ:cu({dv:{bD:0,bE:15,a5:18},dw:{bD:0,bE:4,a5:0},ex:{bD:0,bE:1,a5:0}}),ck:n.ck,aa:n.aa,fu:-kl(135),fw:-kl(45)},u(Uf,n,e))})),Vl,(function(){return{}}))(u(Pt,(function(n){return wt({ck:n})}),u(Mt,"devicePixelRatio",yt)))(0)}},n.Elm?function n(e,r){for(var t in r)t in e?"init"==t?C(6):n(e[t],r[t]):e[t]=r[t]}(n.Elm,Pa):n.Elm=Pa}(n);const e=n.Elm.Main.init({node:document.getElementById("elm-node"),flags:{devicePixelRatio:window.devicePixelRatio}});function r(n){const e=[];for(let r=0;r<n.length;r++)e.push({identifier:n[r].identifier,pageX:n[r].pageX,pageY:n[r].pageY});return e}window.addEventListener("touchstart",(n=>{e.ports.touchStart.send(r(n.changedTouches))})),window.addEventListener("touchmove",(n=>{e.ports.touchMove.send(r(n.changedTouches))})),window.addEventListener("touchend",(n=>{e.ports.touchEnd.send(r(n.changedTouches))})),window.addEventListener("touchcancel",(n=>{e.ports.touchCancel.send(r(n.changedTouches))}))}();
//# sourceMappingURL=index.5a18936a.js.map
