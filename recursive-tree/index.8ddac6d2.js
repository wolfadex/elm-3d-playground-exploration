!function(){var n={};!function(n){function e(n,e,r){return r.a=n,r.f=e,r}function r(n){return e(2,n,(function(e){return function(r){return n(e,r)}}))}function t(n){return e(3,n,(function(e){return function(r){return function(t){return n(e,r,t)}}}))}function o(n){return e(4,n,(function(e){return function(r){return function(t){return function(o){return n(e,r,t,o)}}}}))}function a(n){return e(5,n,(function(e){return function(r){return function(t){return function(o){return function(a){return n(e,r,t,o,a)}}}}}))}function i(n){return e(6,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return n(e,r,t,o,a,i)}}}}}}))}function c(n){return e(7,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return n(e,r,t,o,a,i,c)}}}}}}}))}function l(n){return e(8,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return n(e,r,t,o,a,i,c,l)}}}}}}}}))}function u(n,e,r){return 2===n.a?n.f(e,r):n(e)(r)}function f(n,e,r,t){return 3===n.a?n.f(e,r,t):n(e)(r)(t)}function s(n,e,r,t,o){return 4===n.a?n.f(e,r,t,o):n(e)(r)(t)(o)}function d(n,e,r,t,o,a){return 5===n.a?n.f(e,r,t,o,a):n(e)(r)(t)(o)(a)}function v(n,e,r,t,o,a,i){return 6===n.a?n.f(e,r,t,o,a,i):n(e)(r)(t)(o)(a)(i)}function m(n,e,r,t,o,a,i,c){return 7===n.a?n.f(e,r,t,o,a,i,c):n(e)(r)(t)(o)(a)(i)(c)}function b(n,e,r,t,o,a,i,c,l){return 8===n.a?n.f(e,r,t,o,a,i,c,l):n(e)(r)(t)(o)(a)(i)(c)(l)}var p=t((function(n,e,r){for(var t=Array(n),o=0;n>o;o++)t[o]=r(e+o);return t})),g=r((function(n,e){for(var r=Array(n),t=0;n>t&&e.b;t++)r[t]=e.a,e=e.b;return r.length=t,L(r,e)})),h=r((function(n,e){return e[n]})),x=t((function(n,e,r){for(var t=r.length-1;t>=0;t--)e=u(n,r[t],e);return e}));function P(n){throw Error("https://github.com/elm/core/blob/1.0.0/hints/"+n+".md")}function C(n,e){for(var r,t=[],o=M(n,e,0,t);o&&(r=t.pop());o=M(r.a,r.b,0,t));return o}function M(n,e,r,t){if(n===e)return!0;if("object"!=typeof n||null===n||null===e)return"function"==typeof n&&P(5),!1;if(r>100)return t.push(L(n,e)),!0;for(var o in 0>n.$&&(n=$r(n),e=$r(e)),n)if(!M(n[o],e[o],r+1,t))return!1;return!0}function T(n,e,r){if("object"!=typeof n)return n===e?0:e>n?-1:1;if(void 0===n.$)return(r=T(n.a,e.a))||(r=T(n.b,e.b))?r:T(n.c,e.c);for(;n.b&&e.b&&!(r=T(n.a,e.a));n=n.b,e=e.b);return r||(n.b?1:e.b?-1:0)}var y=r((function(n,e){var r=T(n,e);return 0>r?Hr:r?zr:Dr}));function L(n,e){return{a:n,b:e}}function w(n,e,r){return{a:n,b:e,c:r}}function S(n,e){var r={};for(var t in n)r[t]=n[t];for(var t in e)r[t]=e[t];return r}function N(n,e){if("string"==typeof n)return n+e;if(!n.b)return e;var r=D(n.a,e);n=n.b;for(var t=r;n.b;n=n.b)t=t.b=D(n.a,e);return r}var $={$:0};function D(n,e){return{$:1,a:n,b:e}}var z=r(D);function H(n){for(var e=$,r=n.length;r--;)e=D(n[r],e);return e}function _(n){for(var e=[];n.b;n=n.b)e.push(n.a);return e}var A=t((function(n,e,r){for(var t=[];e.b&&r.b;e=e.b,r=r.b)t.push(u(n,e.a,r.a));return H(t)})),G=r((function(n,e){return n*e})),R=r(Math.pow),k=r((function(n,e){var r=e%n;return 0===n?P(11):r>0&&0>n||0>r&&n>0?r+n:r})),F=Math.cos,B=Math.sin,V=Math.tan,E=r(Math.atan2),j=Math.ceil,I=Math.floor,U=Math.round,W=Math.sqrt,Y=Math.log,O=isNaN,q=r((function(n,e){return n+e})),X=t((function(n,e,r){for(var t=r.length;t--;){var o=r[t],a=r.charCodeAt(t);56320>a||a>57343||(o=r[--t]+o),e=u(n,o,e)}return e})),Z=r((function(n,e){return e.split(n)})),K=r((function(n,e){return e.join(n)})),J=t((function(n,e,r){return r.slice(n,e)})),Q=r((function(n,e){return 0===e.indexOf(n)}));function nn(n){return n+""}function en(n){return{$:2,b:n}}var rn=en((function(n){return"number"!=typeof n?xn("an INT",n):n>-2147483647&&2147483647>n&&(0|n)===n?kr(n):!isFinite(n)||n%1?xn("an INT",n):kr(n)})),tn=en((function(n){return"boolean"==typeof n?kr(n):xn("a BOOL",n)})),on=en((function(n){return"number"==typeof n?kr(n):xn("a FLOAT",n)})),an=(en((function(n){return kr(n)})),en((function(n){return"string"==typeof n?kr(n):n instanceof String?kr(n+""):xn("a STRING",n)}))),cn=r((function(n,e){return{$:6,d:n,b:e}}));function ln(n,e){return{$:9,f:n,g:e}}var un=r((function(n,e){return{$:10,b:e,h:n}})),fn=r((function(n,e){return ln(n,[e])})),sn=t((function(n,e,r){return ln(n,[e,r])})),dn=o((function(n,e,r,t){return ln(n,[e,r,t])})),vn=r((function(n,e){try{return bn(n,JSON.parse(e))}catch(n){return _r(u(Ar,"This is not valid JSON! "+n.message,e))}})),mn=r((function(n,e){return bn(n,e)}));function bn(n,e){switch(n.$){case 2:return n.b(e);case 5:return null===e?kr(n.c):xn("null",e);case 3:return gn(e)?pn(n.b,e,H):xn("a LIST",e);case 4:return gn(e)?pn(n.b,e,hn):xn("an ARRAY",e);case 6:var r=n.d;if("object"!=typeof e||null===e||!(r in e))return xn("an OBJECT with a field named `"+r+"`",e);var t=bn(n.b,e[r]);return Pt(t)?t:_r(u(Gr,r,t.a));case 7:var o=n.e;return gn(e)?e.length>o?(t=bn(n.b,e[o]),Pt(t)?t:_r(u(Rr,o,t.a))):xn("a LONGER array. Need index "+o+" but only see "+e.length+" entries",e):xn("an ARRAY",e);case 8:if("object"!=typeof e||null===e||gn(e))return xn("an OBJECT",e);var a=$;for(var i in e)if(e.hasOwnProperty(i)){if(t=bn(n.b,e[i]),!Pt(t))return _r(u(Gr,i,t.a));a=D(L(i,t.a),a)}return kr(Jr(a));case 9:for(var c=n.f,l=n.g,f=0;l.length>f;f++){if(t=bn(l[f],e),!Pt(t))return t;c=c(t.a)}return kr(c);case 10:return t=bn(n.b,e),Pt(t)?bn(n.h(t.a),e):t;case 11:for(var s=$,d=n.g;d.b;d=d.b){if(t=bn(d.a,e),Pt(t))return t;s=D(t.a,s)}return _r(Fr(Jr(s)));case 1:return _r(u(Ar,n.a,e));case 0:return kr(n.a)}}function pn(n,e,r){for(var t=e.length,o=Array(t),a=0;t>a;a++){var i=bn(n,e[a]);if(!Pt(i))return _r(u(Rr,a,i.a));o[a]=i.a}return kr(r(o))}function gn(n){return Array.isArray(n)||"undefined"!=typeof FileList&&n instanceof FileList}function hn(n){return u(xt,n.length,(function(e){return n[e]}))}function xn(n,e){return _r(u(Ar,"Expecting "+n,e))}function Pn(n,e){if(n===e)return!0;if(n.$!==e.$)return!1;switch(n.$){case 0:case 1:return n.a===e.a;case 2:return n.b===e.b;case 5:return n.c===e.c;case 3:case 4:case 8:return Pn(n.b,e.b);case 6:return n.d===e.d&&Pn(n.b,e.b);case 7:return n.e===e.e&&Pn(n.b,e.b);case 9:return n.f===e.f&&Cn(n.g,e.g);case 10:return n.h===e.h&&Pn(n.b,e.b);case 11:return Cn(n.g,e.g)}}function Cn(n,e){var r=n.length;if(r!==e.length)return!1;for(var t=0;r>t;t++)if(!Pn(n[t],e[t]))return!1;return!0}var Mn=r((function(n,e){return JSON.stringify(e,null,n)+""}));function Tn(n){return n}var yn=t((function(n,e,r){return r[n]=e,r}));function Ln(n){return{$:0,a:n}}function wn(n){return{$:2,b:n,c:null}}var Sn=r((function(n,e){return{$:3,b:n,d:e}})),Nn=0;function $n(n){var e={$:0,e:Nn++,f:n,g:null,h:[]};return Gn(e),e}function Dn(n){return wn((function(e){e(Ln($n(n)))}))}function zn(n,e){n.h.push(e),Gn(n)}var Hn=r((function(n,e){return wn((function(r){zn(n,e),r(Ln(0))}))})),_n=!1,An=[];function Gn(n){if(An.push(n),!_n){for(_n=!0;n=An.shift();)Rn(n);_n=!1}}function Rn(n){for(;n.f;){var e=n.f.$;if(0===e||1===e){for(;n.g&&n.g.$!==e;)n.g=n.g.i;if(!n.g)return;n.f=n.g.b(n.f.a),n.g=n.g.i}else{if(2===e)return void(n.f.c=n.f.b((function(e){n.f=e,Gn(n)})));if(5===e){if(0===n.h.length)return;n.f=n.f.b(n.h.shift())}else n.g={$:3===e?0:1,b:n.f.b,i:n.g},n.f=n.f.d}}}var kn={};function Fn(n,e,r,t,o){return{b:n,c:e,d:r,e:t,f:o}}function Bn(n,e){var r={g:e,h:void 0},t=n.c,o=n.d,a=n.e,i=n.f;return r.h=$n(u(Sn,(function n(e){return u(Sn,n,{$:5,b:function(n){var c=n.a;return 0===n.$?f(o,r,c,e):a&&i?s(t,r,c.i,c.j,e):f(t,r,a?c.i:c.j,e)}})}),n.b))}var Vn=r((function(n,e){return wn((function(r){n.g(e),r(Ln(0))}))})),En=r((function(n,e){return u(Hn,n.h,{$:0,a:e})}));function jn(n){return function(e){return{$:1,k:n,l:e}}}function In(n){return{$:2,m:n}}var Un=r((function(n,e){return{$:3,n:n,o:e}})),Wn=[],Yn=!1;function On(n,e,r){if(Wn.push({p:n,q:e,r:r}),!Yn){Yn=!0;for(var t;t=Wn.shift();)qn(t.p,t.q,t.r);Yn=!1}}function qn(n,e,r){var t={};for(var o in Xn(!0,e,t,null),Xn(!1,r,t,null),n)zn(n[o],{$:"fx",a:t[o]||{i:$,j:$}})}function Xn(n,e,r,t){switch(e.$){case 1:var o=e.k,a=function(n,e,r,t){return u(n?kn[e].e:kn[e].f,(function(n){for(var e=r;e;e=e.t)n=e.s(n);return n}),t)}(n,o,t,e.l);return void(r[o]=function(n,e,r){return r=r||{i:$,j:$},n?r.i=D(e,r.i):r.j=D(e,r.j),r}(n,a,r[o]));case 2:for(var i=e.m;i.b;i=i.b)Xn(n,i.a,r,t);return;case 3:return void Xn(n,e.o,r,{s:e.n,t:t})}}function Zn(n,e){return function(n){kn[n]&&P(3)}(n),kn[n]={f:Kn,u:e,a:Jn},jn(n)}var Kn=r((function(n,e){return function(r){return n(e(r))}}));function Jn(n,e){var r=$,o=kn[n].u,a=Ln(null);return kn[n].b=a,kn[n].c=t((function(n,e){return r=e,a})),{send:function(n){var t=u(mn,o,n);Pt(t)||P(4);for(var a=t.a,i=r;i.b;i=i.b)e(i.a(a))}}}var Qn="undefined"!=typeof document?document:{};function ne(n,e){n.appendChild(e)}function ee(n){return{$:0,a:n}}var re,te=r((function(n,e){return r((function(r,t){for(var o=[],a=0;t.b;t=t.b){var i=t.a;a+=i.b||0,o.push(i)}return a+=o.length,{$:1,c:e,d:fe(r),e:o,f:n,b:a}}))}))(void 0),oe=r((function(n,e){return r((function(r,t){for(var o=[],a=0;t.b;t=t.b){var i=t.a;a+=i.b.b||0,o.push(i)}return a+=o.length,{$:2,c:e,d:fe(r),e:o,f:n,b:a}}))}))(void 0),ae=r((function(n,e){return{$:4,j:n,k:e,b:1+(e.b||0)}})),ie=r((function(n,e){return{$:"a0",n:n,o:e}})),ce=r((function(n,e){return{$:"a1",n:n,o:e}})),le=r((function(n,e){return{$:"a2",n:n,o:e}})),ue=r((function(n,e){return{$:"a3",n:n,o:e}}));function fe(n){for(var e={};n.b;n=n.b){var r=n.a,t=r.$,o=r.n,a=r.o;if("a2"!==t){var i=e[t]||(e[t]={});"a3"===t&&"class"===o?se(i,o,a):i[o]=a}else"className"===o?se(e,o,a):e[o]=a}return e}function se(n,e,r){var t=n[e];n[e]=t?t+" "+r:r}function de(n,e){var r=n.$;if(5===r)return de(n.k||(n.k=n.m()),e);if(0===r)return Qn.createTextNode(n.a);if(4===r){for(var t=n.k,o=n.j;4===t.$;)"object"!=typeof o?o=[o,t.j]:o.push(t.j),t=t.k;var a={j:o,p:e};return(i=de(t,a)).elm_event_node_ref=a,i}if(3===r)return ve(i=n.h(n.g),e,n.d),i;var i=n.f?Qn.createElementNS(n.f,n.c):Qn.createElement(n.c);ve(i,e,n.d);for(var c=n.e,l=0;c.length>l;l++)ne(i,de(1===r?c[l]:c[l].b,e));return i}function ve(n,e,r){for(var t in r){var o=r[t];"a1"===t?me(n,o):"a0"===t?ge(n,e,o):"a3"===t?be(n,o):"a4"===t?pe(n,o):("value"!==t&&"checked"!==t||n[t]!==o)&&(n[t]=o)}}function me(n,e){var r=n.style;for(var t in e)r[t]=e[t]}function be(n,e){for(var r in e){var t=e[r];void 0!==t?n.setAttribute(r,t):n.removeAttribute(r)}}function pe(n,e){for(var r in e){var t=e[r],o=t.f,a=t.o;void 0!==a?n.setAttributeNS(o,r,a):n.removeAttributeNS(o,r)}}function ge(n,e,r){var t=n.elmFs||(n.elmFs={});for(var o in r){var a=r[o],i=t[o];if(a){if(i){if(i.q.$===a.$){i.q=a;continue}n.removeEventListener(o,i)}i=he(e,a),n.addEventListener(o,i,re&&{passive:2>Nt(a)}),t[o]=i}else n.removeEventListener(o,i),t[o]=void 0}}try{window.addEventListener("t",null,Object.defineProperty({},"passive",{get:function(){re=!0}}))}catch(n){}function he(n,e){function r(e){var t=r.q,o=bn(t.a,e);if(Pt(o)){for(var a,i=Nt(t),c=o.a,l=i?3>i?c.a:c.au:c,u=1==i?c.b:3==i&&c.c6,f=(u&&e.stopPropagation(),(2==i?c.b:3==i&&c.cW)&&e.preventDefault(),n);a=f.j;){if("function"==typeof a)l=a(l);else for(var s=a.length;s--;)l=a[s](l);f=f.p}f(l,u)}}return r.q=e,r}function xe(n,e){return n.$==e.$&&Pn(n.a,e.a)}function Pe(n,e,r,t){var o={$:e,r:r,s:t,t:void 0,u:void 0};return n.push(o),o}function Ce(n,e,r,t){if(n!==e){var o=n.$,a=e.$;if(o!==a){if(1!==o||2!==a)return void Pe(r,0,t,e);e=function(n){for(var e=n.e,r=e.length,t=Array(r),o=0;r>o;o++)t[o]=e[o].b;return{$:1,c:n.c,d:n.d,e:t,f:n.f,b:n.b}}(e),a=1}switch(a){case 5:for(var i=n.l,c=e.l,l=i.length,u=l===c.length;u&&l--;)u=i[l]===c[l];if(u)return void(e.k=n.k);e.k=e.m();var f=[];return Ce(n.k,e.k,f,0),void(f.length>0&&Pe(r,1,t,f));case 4:for(var s=n.j,d=e.j,v=!1,m=n.k;4===m.$;)v=!0,"object"!=typeof s?s=[s,m.j]:s.push(m.j),m=m.k;for(var b=e.k;4===b.$;)v=!0,"object"!=typeof d?d=[d,b.j]:d.push(b.j),b=b.k;return v&&s.length!==d.length?void Pe(r,0,t,e):((v?function(n,e){for(var r=0;n.length>r;r++)if(n[r]!==e[r])return!1;return!0}(s,d):s===d)||Pe(r,2,t,d),void Ce(m,b,r,t+1));case 0:return void(n.a!==e.a&&Pe(r,3,t,e.a));case 1:return void Me(n,e,r,t,ye);case 2:return void Me(n,e,r,t,Le);case 3:if(n.h!==e.h)return void Pe(r,0,t,e);var p=Te(n.d,e.d);p&&Pe(r,4,t,p);var g=e.i(n.g,e.g);return void(g&&Pe(r,5,t,g))}}}function Me(n,e,r,t,o){if(n.c===e.c&&n.f===e.f){var a=Te(n.d,e.d);a&&Pe(r,4,t,a),o(n,e,r,t)}else Pe(r,0,t,e)}function Te(n,e,r){var t;for(var o in n)if("a1"!==o&&"a0"!==o&&"a3"!==o&&"a4"!==o)if(o in e){var a=n[o],i=e[o];a===i&&"value"!==o&&"checked"!==o||"a0"===r&&xe(a,i)||((t=t||{})[o]=i)}else(t=t||{})[o]=r?"a1"===r?"":"a0"===r||"a3"===r?void 0:{f:n[o].f,o:void 0}:"string"==typeof n[o]?"":null;else{var c=Te(n[o],e[o]||{},o);c&&((t=t||{})[o]=c)}for(var l in e)l in n||((t=t||{})[l]=e[l]);return t}function ye(n,e,r,t){var o=n.e,a=e.e,i=o.length,c=a.length;i>c?Pe(r,6,t,{v:c,i:i-c}):c>i&&Pe(r,7,t,{v:i,e:a});for(var l=c>i?i:c,u=0;l>u;u++){var f=o[u];Ce(f,a[u],r,++t),t+=f.b||0}}function Le(n,e,r,t){for(var o=[],a={},i=[],c=n.e,l=e.e,u=c.length,f=l.length,s=0,d=0,v=t;u>s&&f>d;){var m=(w=c[s]).a,b=(S=l[d]).a,p=w.b,g=S.b,h=void 0,x=void 0;if(m!==b){var P=c[s+1],C=l[d+1];if(P){var M=P.a,T=P.b;x=b===M}if(C){var y=C.a,L=C.b;h=m===y}if(h&&x)Ce(p,L,o,++v),Se(a,o,m,g,d,i),v+=p.b||0,Ne(a,o,m,T,++v),v+=T.b||0,s+=2,d+=2;else if(h)v++,Se(a,o,b,g,d,i),Ce(p,L,o,v),v+=p.b||0,s+=1,d+=2;else if(x)Ne(a,o,m,p,++v),v+=p.b||0,Ce(T,g,o,++v),v+=T.b||0,s+=2,d+=1;else{if(!P||M!==y)break;Ne(a,o,m,p,++v),Se(a,o,b,g,d,i),v+=p.b||0,Ce(T,L,o,++v),v+=T.b||0,s+=2,d+=2}}else Ce(p,g,o,++v),v+=p.b||0,s++,d++}for(;u>s;){var w;v++,Ne(a,o,(w=c[s]).a,p=w.b,v),v+=p.b||0,s++}for(;f>d;){var S,N=N||[];Se(a,o,(S=l[d]).a,S.b,void 0,N),d++}(o.length>0||i.length>0||N)&&Pe(r,8,t,{w:o,x:i,y:N})}var we="_elmW6BL";function Se(n,e,r,t,o,a){var i=n[r];if(!i)return a.push({r:o,A:i={c:0,z:t,r:o,s:void 0}}),void(n[r]=i);if(1===i.c){a.push({r:o,A:i}),i.c=2;var c=[];return Ce(i.z,t,c,i.r),i.r=o,void(i.s.s={w:c,A:i})}Se(n,e,r+we,t,o,a)}function Ne(n,e,r,t,o){var a=n[r];if(a){if(0===a.c){a.c=2;var i=[];return Ce(t,a.z,i,o),void Pe(e,9,o,{w:i,A:a})}Ne(n,e,r+we,t,o)}else{var c=Pe(e,9,o,void 0);n[r]={c:1,z:t,r:o,s:c}}}function $e(n,e,r,t){De(n,e,r,0,0,e.b,t)}function De(n,e,r,t,o,a,i){for(var c=r[t],l=c.r;l===o;){var u=c.$;if(1===u)$e(n,e.k,c.s,i);else if(8===u)c.t=n,c.u=i,(f=c.s.w).length>0&&De(n,e,f,0,o,a,i);else if(9===u){c.t=n,c.u=i;var f,s=c.s;s&&(s.A.s=n,(f=s.w).length>0&&De(n,e,f,0,o,a,i))}else c.t=n,c.u=i;if(!(c=r[++t])||(l=c.r)>a)return t}var d=e.$;if(4===d){for(var v=e.k;4===v.$;)v=v.k;return De(n,v,r,t,o+1,a,n.elm_event_node_ref)}for(var m=e.e,b=n.childNodes,p=0;m.length>p;p++){o++;var g=1===d?m[p]:m[p].b,h=o+(g.b||0);if(!(o>l||l>h||(c=r[t=De(b[p],g,r,t,o,h,i)])&&(l=c.r)<=a))return t;o=h}return t}function ze(n,e){for(var r=0;e.length>r;r++){var t=e[r],o=t.t,a=He(o,t);o===n&&(n=a)}return n}function He(n,e){switch(e.$){case 0:return function(n,e,r){var t=n.parentNode,o=de(e,r);return o.elm_event_node_ref||(o.elm_event_node_ref=n.elm_event_node_ref),t&&o!==n&&t.replaceChild(o,n),o}(n,e.s,e.u);case 4:return ve(n,e.u,e.s),n;case 3:return n.replaceData(0,n.length,e.s),n;case 1:return ze(n,e.s);case 2:return n.elm_event_node_ref?n.elm_event_node_ref.j=e.s:n.elm_event_node_ref={j:e.s,p:e.u},n;case 6:for(var r=e.s,t=0;r.i>t;t++)n.removeChild(n.childNodes[r.v]);return n;case 7:for(var o=(r=e.s).e,a=n.childNodes[t=r.v];o.length>t;t++)n.insertBefore(de(o[t],e.u),a);return n;case 9:if(!(r=e.s))return n.parentNode.removeChild(n),n;var i=r.A;return void 0!==i.r&&n.parentNode.removeChild(n),i.s=ze(n,r.w),n;case 8:return function(n,e){var r=e.s,t=function(n,e){if(n){for(var r=Qn.createDocumentFragment(),t=0;n.length>t;t++){var o=n[t].A;ne(r,2===o.c?o.s:de(o.z,e.u))}return r}}(r.y,e);n=ze(n,r.w);for(var o=r.x,a=0;o.length>a;a++){var i=o[a],c=i.A,l=2===c.c?c.s:de(c.z,e.u);n.insertBefore(l,n.childNodes[i.r])}return t&&ne(n,t),n}(n,e);case 5:return e.s(n);default:P(10)}}function _e(n){if(3===n.nodeType)return ee(n.textContent);if(1!==n.nodeType)return ee("");for(var e=$,r=n.attributes,t=r.length;t--;){var o=r[t];e=D(u(ue,o.name,o.value),e)}var a=n.tagName.toLowerCase(),i=$,c=n.childNodes;for(t=c.length;t--;)i=D(_e(c[t]),i);return f(te,a,e,i)}var Ae=o((function(n,e,r,t){return function(n,e,r,t,o,a){var i=u(mn,n,e?e.flags:void 0);Pt(i)||P(2);var c={},l=r(i.a),f=l.a,s=a(v,f),d=function(n,e){var r;for(var t in kn){var o=kn[t];o.a&&((r=r||{})[t]=o.a(t,e)),n[t]=Bn(o,e)}return r}(c,v);function v(n,e){var r=u(t,n,f);s(f=r.a,e),On(c,r.b,o(f))}return On(c,l.b,o(f)),d?{ports:d}:{}}(e,t,n.e7,n.fC,n.fw,(function(e,r){var o=n.fE,a=t.node,i=_e(a);return function(n,e){e(n);var r=0;function t(){r=1===r?0:(Re(t),e(n),1)}return function(o,a){n=o,a?(e(n),2===r&&(r=1)):(0===r&&Re(t),r=2)}}(r,(function(n){var r=o(n),t=function(n,e){var r=[];return Ce(n,e,r,0),r}(i,r);a=function(n,e,r,t){return 0===r.length?n:($e(n,e,r,t),ze(n,r))}(a,i,t,e),i=r}))}))})),Ge="undefined"!=typeof cancelAnimationFrame?cancelAnimationFrame:function(n){clearTimeout(n)},Re="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:function(n){return setTimeout(n,1e3/60)},ke={addEventListener:function(){},removeEventListener:function(){}},Fe="undefined"!=typeof document?document:ke,Be="undefined"!=typeof window?window:ke,Ve=t((function(n,e,r){return Dn(wn((function(){function t(n){$n(r(n))}return n.addEventListener(e,t,re&&{passive:!0}),function(){n.removeEventListener(e,t)}})))})),Ee=r((function(n,e){var r=bn(n,e);return Pt(r)?Br(r.a):Vr})),je=r((function(n,e){var r="g";n.fe&&(r+="m"),n.eN&&(r+="i");try{return Br(RegExp(e,r))}catch(n){return Vr}})),Ie=t((function(n,e,r){for(var t,o=[],a=0,i=r,c=e.lastIndex,l=-1;a++<n&&(t=e.exec(i))&&l!=e.lastIndex;){for(var u=t.length-1,f=Array(u);u>0;){var d=t[u];f[--u]=d?Br(d):Vr}o.push(s(Di,t[0],t.index,a,H(f))),l=e.lastIndex}return e.lastIndex=c,H(o)})),Ue=0;function We(n,e){for(;e.b;e=e.b)n(e.a)}function Ye(n){for(var e=0;n.b;n=n.b)e++;return e}var Oe="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:function(n){setTimeout(n,1e3/60)},qe=a((function(n,e,r,t,o){return{$:0,a:n,b:e,c:r,d:t,e:o}})),Xe=r((function(n,e){var r=n.blend;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.BLEND),r.enabled=!0),r.a===e.a&&r.d===e.d||(n.gl.blendEquationSeparate(e.a,e.d),r.a=e.a,r.d=e.d),r.b===e.b&&r.c===e.c&&r.e===e.e&&r.f===e.f||(n.gl.blendFuncSeparate(e.b,e.c,e.e,e.f),r.b=e.b,r.c=e.c,r.e=e.e,r.f=e.f),r.g===e.g&&r.h===e.h&&r.i===e.i&&r.j===e.j||(n.gl.blendColor(e.g,e.h,e.i,e.j),r.g=e.g,r.h=e.h,r.i=e.i,r.j=e.j)})),Ze=r((function(n,e){var r=n.depthTest;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.DEPTH_TEST),r.enabled=!0),r.a!==e.a&&(n.gl.depthFunc(e.a),r.a=e.a),r.b!==e.b&&(n.gl.depthMask(e.b),r.b=e.b),r.c===e.c&&r.d===e.d||(n.gl.depthRange(e.c,e.d),r.c=e.c,r.d=e.d)})),Ke=r((function(n,e){var r=n.stencilTest;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.STENCIL_TEST),r.enabled=!0),r.d===e.d&&r.a===e.a&&r.b===e.b||(n.gl.stencilFuncSeparate(n.gl.FRONT,e.d,e.a,e.b),r.d=e.d),r.e===e.e&&r.f===e.f&&r.g===e.g||(n.gl.stencilOpSeparate(n.gl.FRONT,e.e,e.f,e.g),r.e=e.e,r.f=e.f,r.g=e.g),r.c!==e.c&&(n.gl.stencilMask(e.c),r.c=e.c),r.h===e.h&&r.a===e.a&&r.b===e.b||(n.gl.stencilFuncSeparate(n.gl.BACK,e.h,e.a,e.b),r.h=e.h,r.a=e.a,r.b=e.b),r.i===e.i&&r.j===e.j&&r.k===e.k||(n.gl.stencilOpSeparate(n.gl.BACK,e.i,e.j,e.k),r.i=e.i,r.j=e.j,r.k=e.k)})),Je=r((function(n,e){var r=n.scissor;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.SCISSOR_TEST),r.enabled=!0),r.a===e.a&&r.b===e.b&&r.c===e.c&&r.d===e.d||(n.gl.scissor(e.a,e.b,e.c,e.d),r.a=e.a,r.b=e.b,r.c=e.c,r.d=e.d)})),Qe=r((function(n,e){var r=n.colorMask;r.toggle=n.toggle,r.enabled=!0,r.a===e.a&&r.b===e.b&&r.c===e.c&&r.d===e.d||(n.gl.colorMask(e.a,e.b,e.c,e.d),r.a=e.a,r.b=e.b,r.c=e.c,r.d=e.d)})),nr=r((function(n,e){var r=n.cullFace;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.CULL_FACE),r.enabled=!0),r.a!==e.a&&(n.gl.cullFace(e.a),r.a=e.a)})),er=r((function(n,e){var r=n.polygonOffset;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.POLYGON_OFFSET_FILL),r.enabled=!0),r.a===e.a&&r.b===e.b||(n.gl.polygonOffset(e.a,e.b),r.a=e.a,r.b=e.b)})),rr=r((function(n,e){var r=n.sampleCoverage;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.SAMPLE_COVERAGE),r.enabled=!0),r.a===e.a&&r.b===e.b||(n.gl.sampleCoverage(e.a,e.b),r.a=e.a,r.b=e.b)})),tr=function(n){n.scissor.enabled&&(n.gl.disable(n.gl.SCISSOR_TEST),n.scissor.enabled=!1)},or=function(n){var e=n.colorMask;e.a&&e.b&&e.c&&e.d||(n.gl.colorMask(!0,!0,!0,!0),e.a=!0,e.b=!0,e.c=!0,e.d=!0)},ar=["blend","depthTest","stencilTest","scissor","colorMask","cullFace","polygonOffset","sampleCoverage","sampleAlphaToCoverage"],ir=[function(n){n.blend.enabled&&(n.gl.disable(n.gl.BLEND),n.blend.enabled=!1)},function(n){n.depthTest.enabled&&(n.gl.disable(n.gl.DEPTH_TEST),n.depthTest.enabled=!1)},function(n){n.stencilTest.enabled&&(n.gl.disable(n.gl.STENCIL_TEST),n.stencilTest.enabled=!1)},tr,or,function(n){n.gl.disable(n.gl.CULL_FACE)},function(n){n.gl.disable(n.gl.POLYGON_OFFSET_FILL)},function(n){n.gl.disable(n.gl.SAMPLE_COVERAGE)},function(n){n.gl.disable(n.gl.SAMPLE_ALPHA_TO_COVERAGE)}];function cr(n,e,r){var t=n.createShader(r);return n.shaderSource(t,"#extension GL_OES_standard_derivatives : enable\n"+e),n.compileShader(t),t}function lr(n,e){switch(e){case n.FLOAT:return{size:1,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC2:return{size:2,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC3:return{size:3,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC4:return{size:4,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_MAT4:return{size:4,arraySize:4,type:Float32Array,baseType:n.FLOAT};case n.INT:return{size:1,arraySize:1,type:Int32Array,baseType:n.INT}}}function ur(n,e,r,t){for(var o=r.a.dt,a=[],i=0;o>i;i++)a.push(String.fromCharCode(97+i));var c=lr(n,e.type);if(void 0===c)throw Error("No info available for: "+e.type);var l=0,u=c.size*c.arraySize*o,f=new c.type(Ye(r.b)*u);We((function(n){!function(n,e,r,t,i){var c;if(1===o)for(c=0;e>c;c++)n[r++]=1===e?t[i]:t[i][c];else a.forEach((function(o){for(c=0;e>c;c++)n[r++]=1===e?t[o][i]:t[o][i][c]}))}(f,c.size*c.arraySize,l,n,t[e.name]||e.name),l+=u}),r.b);var s=n.createBuffer();return n.bindBuffer(n.ARRAY_BUFFER,s),n.bufferData(n.ARRAY_BUFFER,f,n.STATIC_DRAW),s}function fr(n,e){return n+"#"+e}var sr=r((function(n,e){var r=n.f,t=r.gl;return t?(t.viewport(0,0,t.drawingBufferWidth,t.drawingBufferHeight),r.depthTest.b||(t.depthMask(!0),r.depthTest.b=!0),r.stencilTest.c!==r.STENCIL_WRITEMASK&&(t.stencilMask(r.STENCIL_WRITEMASK),r.stencilTest.c=r.STENCIL_WRITEMASK),tr(r),or(r),t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT|t.STENCIL_BUFFER_BIT),We((function(e){if(e.d.b.b){var o,a,i,c,l;if(e.b.id&&e.c.id&&(o=fr(e.b.id,e.c.id),a=r.programs[o]),!a){var u,f;e.b.id?u=r.shaders[e.b.id]:e.b.id=Ue++,u||(u=cr(t,e.b.src,t.VERTEX_SHADER),r.shaders[e.b.id]=u),e.c.id?f=r.shaders[e.c.id]:e.c.id=Ue++,f||(f=cr(t,e.c.src,t.FRAGMENT_SHADER),r.shaders[e.c.id]=f);var s=function(n,e,r){var t=n.createProgram();if(n.attachShader(t,e),n.attachShader(t,r),n.linkProgram(t),!n.getProgramParameter(t,n.LINK_STATUS))throw"Link failed: "+n.getProgramInfoLog(t)+"\nvs info-log: "+n.getShaderInfoLog(e)+"\nfs info-log: "+n.getShaderInfoLog(r);return t}(t,u,f);(a={glProgram:s,attributes:Object.assign({},e.b.attributes,e.c.attributes),currentUniforms:{},activeAttributes:[],activeAttributeLocations:[]}).uniformSetters=function(n,e,r,t){var o=r.glProgram,a=r.currentUniforms,i=0,c=e.f;function l(e,r){var t=r.name,o=n.getUniformLocation(e,t);switch(r.type){case n.INT:return function(e){a[t]!==e&&(n.uniform1i(o,e),a[t]=e)};case n.FLOAT:return function(e){a[t]!==e&&(n.uniform1f(o,e),a[t]=e)};case n.FLOAT_VEC2:return function(e){a[t]!==e&&(n.uniform2f(o,e[0],e[1]),a[t]=e)};case n.FLOAT_VEC3:return function(e){a[t]!==e&&(n.uniform3f(o,e[0],e[1],e[2]),a[t]=e)};case n.FLOAT_VEC4:return function(e){a[t]!==e&&(n.uniform4f(o,e[0],e[1],e[2],e[3]),a[t]=e)};case n.FLOAT_MAT4:return function(e){a[t]!==e&&(n.uniformMatrix4fv(o,!1,new Float32Array(e)),a[t]=e)};case n.SAMPLER_2D:var l=i++;return function(e){n.activeTexture(n.TEXTURE0+l);var r=c.textures.get(e);r||(r=e.eR(n),c.textures.set(e,r)),n.bindTexture(n.TEXTURE_2D,r),a[t]!==e&&(n.uniform1i(o,l),a[t]=e)};case n.BOOL:return function(e){a[t]!==e&&(n.uniform1i(o,e),a[t]=e)};default:return function(){}}}for(var u={},f=n.getProgramParameter(o,n.ACTIVE_UNIFORMS),s=0;f>s;s++){var d=n.getActiveUniform(o,s);u[t[d.name]||d.name]=l(o,d)}return u}(t,n,a,Object.assign({},e.b.uniforms,e.c.uniforms));var d=t.getProgramParameter(s,t.ACTIVE_ATTRIBUTES);for(i=0;d>i;i++){var v=t.getActiveAttrib(s,i),m=t.getAttribLocation(s,v.name);a.activeAttributes.push(v),a.activeAttributeLocations.push(m)}o=fr(e.b.id,e.c.id),r.programs[o]=a}r.lastProgId!==o&&(t.useProgram(a.glProgram),r.lastProgId=o),c=a.uniformSetters,Object.keys(l=e.e).forEach((function(n){var e=c[n];e&&e(l[n])}));var b=r.buffers.get(e.d);for(b||(b=function(n,e){if(e.a.dE>0){var r=n.createBuffer(),t=function(n,e){var r,t=new Uint32Array(Ye(n)*e),o=0;return We((function(n){if(1===e)t[o++]=n;else for(r=0;e>r;r++)t[o++]=n[String.fromCharCode(97+r)]}),n),t}(e.c,e.a.dE);return n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,r),n.bufferData(n.ELEMENT_ARRAY_BUFFER,t,n.STATIC_DRAW),{numIndices:t.length,indexBuffer:r,buffers:{}}}return{numIndices:e.a.dt*Ye(e.b),indexBuffer:null,buffers:{}}}(t,e.d),r.buffers.set(e.d,b)),i=0;a.activeAttributes.length>i;i++){m=a.activeAttributeLocations[i],void 0===b.buffers[(v=a.activeAttributes[i]).name]&&(b.buffers[v.name]=ur(t,v,e.d,a.attributes)),t.bindBuffer(t.ARRAY_BUFFER,b.buffers[v.name]);var p=lr(t,v.type);if(1===p.arraySize)t.enableVertexAttribArray(m),t.vertexAttribPointer(m,p.size,p.baseType,!1,0,0);else for(var g=4*p.size,h=g*p.arraySize,x=0;p.arraySize>x;x++)t.enableVertexAttribArray(m+x),t.vertexAttribPointer(m+x,p.size,p.baseType,!1,h,g*x)}for(r.toggle=!r.toggle,We(Rs(r),e.a),i=0;9>i;i++){var P=r[ar[i]];P.toggle!==r.toggle&&P.enabled&&(ir[i](r),P.enabled=!1,P.toggle=r.toggle)}b.indexBuffer?(t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,b.indexBuffer),t.drawElements(e.d.a.eb,b.numIndices,t.UNSIGNED_INT,0)):t.drawArrays(e.d.a.eb,0,b.numIndices)}}),n.g),e):e})),dr=t((function(n,e,r){return function(n,e,r,t){return{$:3,d:fe(n),g:e,h:r,i:t}}(e,{g:r,f:{},h:n},xr,Pr)})),vr=r((function(n,e){n.contextAttributes.alpha=!0,n.contextAttributes.premultipliedAlpha=e.a})),mr=r((function(n,e){n.contextAttributes.depth=!0,n.sceneSettings.push((function(n){n.clearDepth(e.a)}))})),br=r((function(n,e){n.contextAttributes.stencil=!0,n.sceneSettings.push((function(n){n.clearStencil(e.a)}))})),pr=r((function(n){n.contextAttributes.antialias=!0})),gr=r((function(n,e){n.sceneSettings.push((function(n){n.clearColor(e.a,e.b,e.c,e.d)}))})),hr=r((function(n){n.contextAttributes.preserveDrawingBuffer=!0}));function xr(n){var e={contextAttributes:{alpha:!1,depth:!1,stencil:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1},sceneSettings:[]};We((function(n){return u(Gs,e,n)}),n.h);var r=Qn.createElement("canvas"),t=r.getContext&&(r.getContext("webgl",e.contextAttributes)||r.getContext("experimental-webgl",e.contextAttributes));return t&&"undefined"!=typeof WeakMap?(e.sceneSettings.forEach((function(n){n(t)})),t.getExtension("OES_standard_derivatives"),t.getExtension("OES_element_index_uint"),n.f.gl=t,n.f.toggle=!1,n.f.blend={enabled:!1,toggle:!1},n.f.depthTest={enabled:!1,toggle:!1},n.f.stencilTest={enabled:!1,toggle:!1},n.f.scissor={enabled:!1,toggle:!1},n.f.colorMask={enabled:!1,toggle:!1},n.f.cullFace={enabled:!1,toggle:!1},n.f.polygonOffset={enabled:!1,toggle:!1},n.f.sampleCoverage={enabled:!1,toggle:!1},n.f.sampleAlphaToCoverage={enabled:!1,toggle:!1},n.f.shaders=[],n.f.programs={},n.f.lastProgId=null,n.f.buffers=new WeakMap,n.f.textures=new WeakMap,n.f.STENCIL_WRITEMASK=t.getParameter(t.STENCIL_WRITEMASK),Oe((function(){return u(sr,n,r)}))):(r=Qn.createElement("div")).innerHTML='<a href="https://get.webgl.org/">Enable WebGL</a> to see this content!',r}function Pr(n,e){return e.f=n.f,sr(e)}var Cr=r((function(n,e){return new Float64Array([n,e])}));new Float64Array(3),new Float64Array(3),new Float64Array(3);var Mr=t((function(n,e,r){return new Float64Array([n,e,r])})),Tr=r((function(n,e){return new Float64Array([e[0]*n,e[1]*n,e[2]*n])})),yr=o((function(n,e,r,t){return new Float64Array([n,e,r,t])}));new Float64Array(16),new Float64Array(16),new Float64Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);var Lr=z,wr=x,Sr=t((function(n,e,t){var o=t.c,a=t.d,i=r((function(e,r){return f(wr,e.$?n:i,r,e.a)}));return f(wr,i,f(wr,n,e,a),o)})),Nr=t((function(n,e,r){for(;;){if(-2===r.$)return e;var t=r.d,o=n,a=f(n,r.b,r.c,f(Nr,n,e,r.e));n=o,e=a,r=t}})),$r=function(n){return f(Nr,t((function(n,e,r){return u(Lr,L(n,e),r)})),$,n)},Dr=1,zr=2,Hr=0,_r=function(n){return{$:1,a:n}},Ar=r((function(n,e){return{$:3,a:n,b:e}})),Gr=r((function(n,e){return{$:0,a:n,b:e}})),Rr=r((function(n,e){return{$:1,a:n,b:e}})),kr=function(n){return{$:0,a:n}},Fr=function(n){return{$:2,a:n}},Br=function(n){return{$:0,a:n}},Vr={$:1},Er=Mn,jr=nn,Ir=r((function(n,e){return u(K,n,_(e))})),Ur=r((function(n,e){return H(u(Z,n,e))})),Wr=t((function(n,e,r){for(;;){if(!r.b)return e;var t=r.b,o=n,a=u(n,r.a,e);n=o,e=a,r=t}})),Yr=function(n){return f(Wr,r((function(n,e){return e+1})),0,n)},Or=A,qr=t((function(n,e,r){for(;;){if(T(n,e)>=1)return r;var t=n,o=e-1,a=u(Lr,e,r);n=t,e=o,r=a}})),Xr=r((function(n,e){return f(qr,n,e,$)})),Zr=r((function(n,e){return f(Or,n,u(Xr,0,Yr(e)-1),e)})),Kr=function(n){var e=n.charCodeAt(0);return 55296>e||e>56319?e:1024*(e-55296)+n.charCodeAt(1)-56320+65536},Jr=function(n){return f(Wr,Lr,$,n)},Qr=function(n){var e=n.charCodeAt(0);return isNaN(e)?Vr:Br(55296>e||e>56319?L(n[0],n.slice(1)):L(n[0]+n[1],n.slice(2)))},nt=32,et=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),rt=[],tt=j,ot=r((function(n,e){return Y(e)/Y(n)})),at=function(n){return n},it=tt(u(ot,2,nt)),ct=s(et,0,it,rt,rt),lt=p,ut=function(n){return{$:1,a:n}},ft=I,st=function(n){return n.length},dt=r((function(n,e){return T(n,e)>0?n:e})),vt=G,mt=g,bt=r((function(n,e){for(;;){var r=u(mt,nt,n),t=r.b,o=u(Lr,{$:0,a:r.a},e);if(!t.b)return Jr(o);n=t,e=o}})),pt=r((function(n,e){for(;;){var r=tt(e/nt);if(1===r)return u(mt,nt,n).a;n=u(bt,n,$),e=r}})),gt=r((function(n,e){if(e.m){var r=e.m*nt,t=ft(u(ot,nt,r-1)),o=n?Jr(e.B):e.B,a=u(pt,o,e.m);return s(et,st(e.r)+r,u(dt,5,t*it),a,e.r)}return s(et,st(e.r),it,rt,e.r)})),ht=a((function(n,e,r,t,o){for(;;){if(0>e)return u(gt,!1,{B:t,m:r/nt|0,r:o});var a=ut(f(lt,nt,e,n));n=n,e-=nt,r=r,t=u(Lr,a,t),o=o}})),xt=r((function(n,e){if(n>0){var r=n%nt;return d(ht,e,n-r-nt,n,$,f(lt,r,n-r,e))}return ct})),Pt=function(n){return!n.$},Ct=un,Mt=cn,Tt=on,yt=u(r((function(n,e){return{S:e,aF:"",X:n,as:""}})),$,$),Lt=fn,wt=sn,St=function(n){return{$:0,a:n}},Nt=function(n){switch(n.$){case 0:return 0;case 1:return 1;case 2:return 2;default:return 3}},$t=te("div"),Dt=function(n){return{$:1,a:n}},zt=function(n){return{$:7,a:n}},Ht=function(n){return{$:3,a:n}},_t=t((function(n,e,r){return e(n(r))})),At=function(n){return n},Gt=function(n){return n.length},Rt=J,kt=r((function(n,e){return 1>n?e:f(Rt,n,Gt(e),e)})),Ft=function(n){for(var e=0,r=n.charCodeAt(0),t=43==r||45==r?1:0,o=t;n.length>o;++o){var a=n.charCodeAt(o);if(48>a||a>57)return Vr;e=10*e+a-48}return o==t?Vr:Br(45==r?-e:e)},Bt=Q,Vt=Ln,Et=Vt(0),jt=o((function(n,e,r,t){if(t.b){var o=t.a,a=t.b;if(a.b){var i=a.a,c=a.b;if(c.b){var l=c.a,d=c.b;if(d.b){var v=d.b;return u(n,o,u(n,i,u(n,l,u(n,d.a,r>500?f(Wr,n,e,Jr(v)):s(jt,n,e,r+1,v)))))}return u(n,o,u(n,i,u(n,l,e)))}return u(n,o,u(n,i,e))}return u(n,o,e)}return e})),It=t((function(n,e,r){return s(jt,n,e,0,r)})),Ut=r((function(n,e){return f(It,r((function(e,r){return u(Lr,n(e),r)})),$,e)})),Wt=Sn,Yt=r((function(n,e){return u(Wt,(function(e){return Vt(n(e))}),e)})),Ot=t((function(n,e,r){return u(Wt,(function(e){return u(Wt,(function(r){return Vt(u(n,e,r))}),r)}),e)})),qt=function(n){return f(It,Ot(Lr),Vt($),n)},Xt=Vn,Zt=r((function(n,e){var r=e;return Dn(u(Wt,Xt(n),r))}));kn.Task=Fn(Et,t((function(n,e){return u(Yt,(function(){return 0}),qt(u(Ut,Zt(n),e)))})),t((function(){return Vt(0)})),r((function(n,e){return u(Yt,n,e)})));var Kt=jn("Task"),Jt=r((function(n,e){return Kt(u(Yt,n,e))})),Qt=Ae,no=r((function(n,e){return{$:0,a:n,b:e}})),eo=function(n){return{$:6,a:n}},ro=r((function(n,e){return{$:4,a:n,b:e}})),to=r((function(n,e){return{$:2,a:n,b:e}})),oo=In,ao=Un,io=function(n){return{$:1,a:n}},co=t((function(n,e,r){return{cJ:r,ep:e,eu:n}})),lo=Vt(f(co,$,Vr,0)),uo=function(n){return wn((function(e){var r=n.f;2===r.$&&r.c&&r.c(),n.f=null,e(Ln(0))}))},fo=wn((function(n){n(Ln(Date.now()))})),so=wn((function(n){var e=Re((function(){n(Ln(Date.now()))}));return function(){Ge(e)}})),vo=En,mo=Dn,bo=t((function(n,e,r){var t=r.ep,o=r.cJ,a=L(t,e);return 1===a.a.$?a.b.b?u(Wt,(function(n){return u(Wt,(function(r){return Vt(f(co,e,Br(n),r))}),fo)}),mo(u(Wt,vo(n),so))):lo:a.b.b?Vt(f(co,e,t,o)):u(Wt,(function(){return lo}),uo(a.a.a))})),po=At,go=t((function(n,e,r){var t=r.eu,o=r.cJ,a=function(r){return u(Xt,n,(0,r.a)(r.$?e-o:po(e)))};return u(Wt,(function(n){return u(Wt,(function(){return Vt(f(co,t,Br(n),e))}),qt(u(Ut,a,t)))}),mo(u(Wt,vo(n),so)))})),ho=t((function(n,e,r){return n(e(r))}));kn["Browser.AnimationManager"]=Fn(lo,bo,go,0,r((function(n,e){return e.$?io(u(ho,n,e.a)):{$:0,a:u(ho,n,e.a)}})));var xo=jn("Browser.AnimationManager"),Po=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),Co=r((function(n,e){return{eg:e,eu:n}})),Mo={$:-2},To=Mo,yo=Vt(u(Co,$,To)),Lo=function(n){return L(N(n.a?"w_":"d_",n.b),n)},wo=a((function(n,e,r,t,o){return{$:-1,a:n,b:e,c:r,d:t,e:o}})),So=a((function(n,e,r,t,o){if(-1!==o.$||o.a){if(-1!==t.$||t.a||-1!==t.d.$||t.d.a)return d(wo,n,e,r,t,o);var a=t.d;return i=t.e,d(wo,0,t.b,t.c,d(wo,1,a.b,a.c,a.d,a.e),d(wo,1,e,r,i,o))}var i,c=o.b,l=o.c,u=o.d,f=o.e;return-1!==t.$||t.a?d(wo,n,c,l,d(wo,0,e,r,t,u),f):d(wo,0,e,r,d(wo,1,t.b,t.c,t.d,i=t.e),d(wo,1,c,l,u,f))})),No=y,$o=t((function(n,e,r){if(-2===r.$)return d(wo,0,n,e,Mo,Mo);var t=r.a,o=r.b,a=r.c,i=r.d,c=r.e;switch(u(No,n,o)){case 0:return d(So,t,o,a,f($o,n,e,i),c);case 1:return d(wo,t,o,e,i,c);default:return d(So,t,o,a,i,f($o,n,e,c))}})),Do=t((function(n,e,r){var t=f($o,n,e,r);return-1!==t.$||t.a?t:d(wo,1,t.b,t.c,t.d,t.e)})),zo=function(n){return f(Wr,r((function(n,e){return f(Do,n.a,n.b,e)})),To,n)},Ho=t((function(n,e,r){for(;;){if(-2===r.$)return e;var t=r.e,o=n,a=f(n,r.b,r.c,f(Ho,n,e,r.d));n=o,e=a,r=t}})),_o=i((function(n,e,o,a,i,c){var l=f(Ho,t((function(r,t,a){n:for(;;){var i=a.a,c=a.b;if(i.b){var l=i.a,u=l.a,d=l.b,v=i.b;if(0>T(u,r)){r=r,t=t,a=L(v,f(n,u,d,c));continue n}return T(u,r)>0?L(i,f(o,r,t,c)):L(v,s(e,u,d,t,c))}return L(i,f(o,r,t,c))}})),L($r(a),c),i),u=l.a,d=l.b;return f(Wr,r((function(e,r){return f(n,e.a,e.b,r)})),d,u)})),Ao=r((function(n,e){return{dx:e,dI:n}})),Go=t((function(n,e,r){return u(Yt,(function(n){return L(e,n)}),f(Ve,r.a?Be:Fe,r.b,(function(r){return u(vo,n,u(Ao,e,r))})))})),Ro=r((function(n,e){return f(Ho,Do,e,n)})),ko=t((function(n,e,r){var a=t((function(e,r,t){var o=t.c;return w(t.a,t.b,u(Lr,f(Go,n,e,r),o))})),i=t((function(n,e,r){var t=r.b,o=r.c;return w(u(Lr,e,r.a),t,o)})),c=o((function(n,e,r,t){var o=t.c;return w(t.a,f(Do,n,e,t.b),o)})),l=u(Ut,Lo,e),s=v(_o,i,c,a,r.eg,zo(l),w($,To,$)),d=s.b,m=s.c;return u(Wt,(function(n){return Vt(u(Co,l,u(Ro,d,zo(n))))}),u(Wt,(function(){return qt(m)}),qt(u(Ut,uo,s.a))))})),Fo=t((function(n,e,r){var t=n(e);return t.$?r:u(Lr,t.a,r)})),Bo=r((function(n,e){return f(It,Fo(n),$,e)}));kn["Browser.Events"]=Fn(yo,ko,t((function(n,e,r){var t=e.dI,o=e.dx,a=u(Bo,(function(n){var e=n.b.c;return C(n.a,t)?u(Ee,e,o):Vr}),r.eu);return u(Wt,(function(){return Vt(r)}),qt(u(Ut,Xt(n),a)))})),0,r((function(n,e){return f(Po,e.a,e.b,u(Lt,n,e.c))})));var Vo,Eo,jo,Io,Uo,Wo,Yo,Oo,qo,Xo,Zo,Ko,Jo,Qo,na,ea,ra,ta,oa,aa,ia,ca,la,ua,fa,sa,da,va,ma,ba,pa,ga,ha,xa,Pa,Ca,Ma,Ta,ya,La=jn("Browser.Events"),wa=t((function(n,e,r){return La(f(Po,n,e,r))})),Sa=u(wa,0,"click"),Na=u(wa,0,"keydown"),$a=u(wa,0,"keyup"),Da=u(wa,0,"mousedown"),za=u(wa,0,"mousemove"),Ha=u(wa,0,"mouseup"),_a=rn,Aa=tn,Ga=r((function(n,e){return n(e?1:0)})),Ra=function(n){var e=void 0!==Qn.hidden?{e4:"hidden",eQ:"visibilitychange"}:void 0!==Qn.mozHidden?{e4:"mozHidden",eQ:"mozvisibilitychange"}:void 0!==Qn.msHidden?{e4:"msHidden",eQ:"msvisibilitychange"}:void 0!==Qn.webkitHidden?{e4:"webkitHidden",eQ:"webkitvisibilitychange"}:{e4:"hidden",eQ:"visibilitychange"};return f(wa,0,e.eQ,u(Lt,Ga(n),u(Mt,"target",u(Mt,e.e4,Aa))))},ka=an,Fa=function(n){return{$:3,b:n}},Ba=Zn("touchCancel",Fa(u(Ct,(function(n){return u(Ct,(function(e){return u(Ct,(function(r){return St({bm:r,cL:e,cM:n})}),u(Mt,"identifier",_a))}),u(Mt,"pageX",Tt))}),u(Mt,"pageY",Tt)))),Va=Zn("touchEnd",Fa(u(Ct,(function(n){return u(Ct,(function(e){return u(Ct,(function(r){return St({bm:r,cL:e,cM:n})}),u(Mt,"identifier",_a))}),u(Mt,"pageX",Tt))}),u(Mt,"pageY",Tt)))),Ea=Zn("touchMove",Fa(u(Ct,(function(n){return u(Ct,(function(e){return u(Ct,(function(r){return St({bm:r,cL:e,cM:n})}),u(Mt,"identifier",_a))}),u(Mt,"pageX",Tt))}),u(Mt,"pageY",Tt)))),ja=Zn("touchStart",Fa(u(Ct,(function(n){return u(Ct,(function(e){return u(Ct,(function(r){return St({bm:r,cL:e,cM:n})}),u(Mt,"identifier",_a))}),u(Mt,"pageX",Tt))}),u(Mt,"pageY",Tt)))),Ia=oo(u(Lr,(ya=u(_t,vt(.001),(function(n){return{$:6,a:n}})),xo(io(ya))),u(Ut,ao(zt),H([(Vo=to,f(wa,1,"resize",u(Mt,"target",f(wt,Vo,u(Mt,"innerWidth",_a),u(Mt,"innerHeight",_a))))),$a(u(Lt,no(!1),u(Mt,"key",ka))),Na(u(Lt,no(!0),u(Mt,"key",ka))),Ra(Ht),Sa(St({$:5})),Da(St(eo(!0))),Ha(St(eo(!1))),za(f(wt,ro,u(Mt,"pageX",Tt),u(Mt,"pageY",Tt))),ja((function(n){return{$:7,a:n}})),Ea((function(n){return{$:8,a:n}})),Va((function(n){return{$:9,a:n}})),Ba((function(n){return{$:10,a:n}}))])))),Ua={$:1},Wa=function(n){return{$:2,a:n}},Ya=r((function(n,e){return{$:0,a:n,b:e}})),Oa=function(n){return n.b.k.a},qa=function(n){var e=n.b.E;return e.b?Br(u(Ya,n.a,{k:e.a,E:e.b,q:N(n.b.q,H([n.b.k]))})):Vr},Xa=r((function(n,e){return S(e,{ci:n})})),Za=r((function(n,e){return S(e,e.I.ci?{I:u(Xa,!1,e.I),a4:e.a4+n}:{a4:e.a4+n})})),Ka=r((function(n,e){return e.$?n:e.a})),Ja=t((function(n,e,r){var t=r.a,o=r.b;switch(t.$){case 1:return r;case 2:var a=t.a.c7;return(T(a+e,Oa(r).a4)>0?u(_t,qa,Ka(u(Ya,Ua,o))):At)(u(Ya,Wa({c7:a+e}),o));default:var i=o.k,c=i.b,l=u(Za,e,i.a);return u(Ya,t,{k:L(l,u(n,l,c)),E:$,q:N(o.q,H([o.k]))})}})),Qa=r((function(n,e){n:for(;;){if(n>0){if(e.b){n-=1,e=e.b;continue n}return e}return e}})),ni=t((function(n,e,r){n:for(;;){if(n>0){if(e.b){var t=e.a;n-=1,e=e.b,r=u(Lr,t,r);continue n}return r}return r}})),ei=r((function(n,e){return Jr(f(ni,n,e,$))})),ri=t((function(n,e,r){if(e>0){var t=L(e,r);n:for(;;){e:for(;;){if(!t.b.b)return r;if(!t.b.b.b){if(1===t.a)break n;break e}switch(t.a){case 1:break n;case 2:var o=t.b;return H([o.a,o.b.a]);case 3:if(t.b.b.b.b){var a=t.b,i=a.b;return H([a.a,i.a,i.b.a])}break e;default:if(t.b.b.b.b&&t.b.b.b.b.b){var c=t.b,l=c.b,s=l.b,d=s.b,v=d.b;return u(Lr,c.a,u(Lr,l.a,u(Lr,s.a,u(Lr,d.a,n>1e3?u(ei,e-4,v):f(ri,n+1,e-4,v)))))}break e}}return r}return H([t.b.a])}return $})),ti=r((function(n,e){return f(ri,0,n,e)})),oi=r((function(n,e){var r=e.b.E,t=N(e.b.q,N(H([e.b.k]),r)),o=u(ti,n,t),a=u(Qa,n,t);if(a.b)return u(Ya,Ua,{k:a.a,E:a.b,q:o});var i=Jr(o);return i.b?u(Ya,Ua,{k:i.a,E:$,q:Jr(i.b)}):e})),ai={$:0},ii=r((function(n,e){switch(n.$){case 1:return function(n){var e=n.b.q,r=n.b.E;return e.b?u(Ya,Ua,{k:e.a,E:N(e.b,N(H([n.b.k]),r)),q:$}):n}(e);case 2:return u(Ka,e,function(n){var e=n.b.k,r=n.b.E,t=Jr(n.b.q);if(t.b){var o=t.b;return Br(u(Ya,Ua,{k:t.a,E:u(Lr,e,r),q:Jr(o)}))}return Vr}(e));case 3:return u(Ya,Ua,e.b);case 4:return function(n){return u(Ya,ai,n.b)}(e);case 5:return function(n){var e=n.b;return u(Ya,Wa({c7:Oa(n).a4}),e)}(e);case 6:return u(Ka,e,qa(e));case 7:return function(n){var e=n.b.q,r=n.b.k,t=Jr(n.b.E);if(t.b){var o=t.b;return u(Ya,Ua,{k:t.a,E:$,q:N(e,N(H([r]),Jr(o)))})}return n}(e);default:return u(oi,n.a,e)}})),ci=r((function(n,e){var r=e.b;return L(n(e.a),r)})),li=o((function(n,e,r,t){return{ci:t,aS:r,bG:n,bH:e}})),ui=To,fi={cc:!1,aS:!1,co:!1,O:ui,ai:!1,a1:!1,c3:!1,c4:!1,b9:!1},si=r((function(n,e){return S(e,{aS:n})})),di=t((function(n,e,r){return S(r,{bG:n,bH:e})})),vi=function(n){if(-1===n.$&&-1===n.d.$&&-1===n.e.$){if(-1!==n.e.d.$||n.e.d.a){var e=n.d,r=n.e;return i=r.b,c=r.c,t=r.d,f=r.e,d(wo,1,n.b,n.c,d(wo,0,e.b,e.c,e.d,e.e),d(wo,0,i,c,t,f))}var t,o=n.d,a=n.e,i=a.b,c=a.c,l=(t=a.d).d,u=t.e,f=a.e;return d(wo,0,t.b,t.c,d(wo,1,n.b,n.c,d(wo,0,o.b,o.c,o.d,o.e),l),d(wo,1,i,c,u,f))}return n},mi=function(n){if(-1===n.$&&-1===n.d.$&&-1===n.e.$){if(-1!==n.d.d.$||n.d.d.a){var e=n.d,r=n.e;return u=r.b,f=r.c,s=r.d,v=r.e,d(wo,1,t=n.b,o=n.c,d(wo,0,e.b,e.c,e.d,c=e.e),d(wo,0,u,f,s,v))}var t=n.b,o=n.c,a=n.d,i=a.d,c=a.e,l=n.e,u=l.b,f=l.c,s=l.d,v=l.e;return d(wo,0,a.b,a.c,d(wo,1,i.b,i.c,i.d,i.e),d(wo,1,t,o,c,d(wo,0,u,f,s,v)))}return n},bi=c((function(n,e,r,t,o,a,i){if(-1!==a.$||a.a){n:for(;;){if(-1===i.$&&1===i.a){if(-1===i.d.$){if(1===i.d.a)return mi(e);break n}return mi(e)}break n}return e}return d(wo,r,a.b,a.c,a.d,d(wo,0,t,o,a.e,i))})),pi=function(n){if(-1===n.$&&-1===n.d.$){var e=n.a,r=n.b,t=n.c,o=n.d,a=o.d,i=n.e;if(1===o.a){if(-1!==a.$||a.a){var c=vi(n);if(-1===c.$){var l=c.e;return d(So,c.a,c.b,c.c,pi(c.d),l)}return Mo}return d(wo,e,r,t,pi(o),i)}return d(wo,e,r,t,pi(o),i)}return Mo},gi=r((function(n,e){if(-2===e.$)return Mo;var r=e.a,t=e.b,o=e.c,a=e.d,i=e.e;if(0>T(n,t)){if(-1===a.$&&1===a.a){var c=a.d;if(-1!==c.$||c.a){var l=vi(e);if(-1===l.$){var f=l.e;return d(So,l.a,l.b,l.c,u(gi,n,l.d),f)}return Mo}return d(wo,r,t,o,u(gi,n,a),i)}return d(wo,r,t,o,u(gi,n,a),i)}return u(hi,n,m(bi,n,e,r,t,o,a,i))})),hi=r((function(n,e){if(-1===e.$){var r=e.a,t=e.b,o=e.c,a=e.d,i=e.e;if(C(n,t)){var c=function(n){for(;;){if(-1!==n.$||-1!==n.d.$)return n;n=n.d}}(i);return-1===c.$?d(So,r,c.b,c.c,a,pi(i)):Mo}return d(So,r,t,o,a,u(gi,n,i))}return Mo})),xi=r((function(n,e){var r=u(gi,n,e);return-1!==r.$||r.a?r:d(wo,1,r.b,r.c,r.d,r.e)})),Pi=r((function(n,e){return{dm:-e/2,cq:e,ai:-n/2,a1:n/2,bB:e/2,de:n}})),Ci=r((function(n,e){return{S:e,X:n}})),Mi=f(wt,r((function(n,e){return L(n,e)})),u(Mt,"A1",ka),u(Mt,"A2",ka)),Ti=dn,yi=s(Ti,t((function(n,e,r){return w(n,e,r)})),u(Mt,"A1",Tt),u(Mt,"A2",Tt),u(Mt,"A3",Tt)),Li=f(wt,r((function(n,e){return L(n,e)})),u(Mt,"A1",ka),u(Mt,"A2",yi)),wi=f(wt,Ci,u(Mt,"floats",Fa(Li)),u(Mt,"colors",Fa(Mi))),Si=vn,Ni=r((function(n,e){return e.$?Vr:n(e.a)})),$i=r((function(n,e){return e.$?_r(e.a):n(e.a)})),Di=o((function(n,e,r,t){return{e6:e,fc:n,fi:r,fv:t}})),zi=Ie,Hi=r((function(n,e){return e.$?_r(n):kr(e.a)})),_i=je,Ai=function(n){return n.b?Br(n.a):Vr},Gi=r((function(n,e){return e.$?Vr:Br(n(e.a))})),Ri=r((function(n,e){return e.$?_r(e.a):kr(n(e.a))})),ki=r((function(n,e){return Kr(e)-Kr(n)})),Fi=t((function(n,e,r){var t=Kr(r);return 1>T(Kr(n),t)&&1>T(t,Kr(e))})),Bi=r((function(n,e){var r=f(Fi,"0","9",e)?kr(u(ki,"0",e)):f(Fi,"a","z",e)?kr(10+u(ki,"a",e)):f(Fi,"A","Z",e)?kr(10+u(ki,"A",e)):_r({$:0,a:e});return u($i,(function(r){return 0>T(r,n)?kr(r):_r({$:1,a:e})}),r)})),Vi=r((function(n,e){var r=Qr(e);if(1===r.$)return kr(0);var t=r.a,o=t.b;return u($i,(function(e){return u($i,(function(r){return kr(e+r*n)}),u(Vi,n,o))}),u(Bi,n,t.a))})),Ei=function(n){for(var e=n.length,r=Array(e),t=0;e>t;){var o=n.charCodeAt(t);55296>o||o>56319?(r[e-t]=n[t],t++):(r[e-t]=n[t+1],r[e-++t]=n[t-1],t++)}return r.join("")},ji=r((function(n,e){return 2>n||n>36?_r({$:2,a:n}):u(Vi,n,Ei(e))})),Ii=ji(16),Ui=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),Wi=t((function(n,e,r){return s(Ui,n,e,r,1)})),Yi=o((function(n,e,r,t){return s(Ui,n,e,r,t)})),Oi=R,qi=U,Xi=r((function(n,e){var r=u(Oi,10,n);return qi(e*r)/r})),Zi=X,Ki=function(n){return f(Zi,Lr,$,n)},Ji=(Eo=function(n){var e=Ki(n);if(e.b&&!e.b.b){var r=e.a;return _(H([r,r])).join("")}return n},u(_t,(function(n){return n.toLowerCase()}),u(_t,(function(n){return u(Gi,(function(e){return f(zi,1,e,n)}),u(_i,{eN:!1,fe:!1},"^#?(?:(?:([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2}))|(?:([a-f\\d])([a-f\\d])([a-f\\d]))|(?:([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2}))|(?:([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d])))$"))}),u(_t,Ni(Ai),u(_t,Gi((function(n){return n.fv})),u(_t,Gi(Bo(At)),u(_t,Hi("Parsing hex regex failed"),$i((function(n){var e=u(Ut,u(_t,Eo,u(_t,Ii,Ri(at))),n);n:for(;;){if(e.b&&!e.a.$&&e.b.b&&!e.b.a.$&&e.b.b.b&&!e.b.b.a.$){if(e.b.b.b.b){if(e.b.b.b.a.$||e.b.b.b.b.b)break n;var r=e.b,t=r.b;return kr(s(Yi,e.a.a/255,r.a.a/255,t.a.a/255,u(Xi,2,t.b.a.a/255)))}var o=e.b;return kr(f(Wi,e.a.a/255,o.a.a/255,o.b.a.a/255))}break n}return _r("Parsing ints from hex failed")}))))))))),Qi=r((function(n,e){return L(e.a,n(e.b))})),nc=s(Ui,1,1,1,1),ec=r((function(n,e){return e.$?n:e.a})),rc=u(_t,Si(wi),u(_t,Ri((function(n){return{S:u(Ut,Qi(u(_t,Ji,ec(nc))),n.S),aF:"",X:n.X,as:""}})),ec(yt))),tc=function(n){return f(Wr,r((function(n,e){return f(yn,n.a,n.b,e)})),{},n)},oc=Tn,ac=function(n){var e=n.b;return tc(H([L("A1",oc(n.a)),L("A2",oc(e))]))},ic=Tn,cc=function(n){var e=n.b,r=n.c;return tc(H([L("A1",ic(n.a)),L("A2",ic(e)),L("A3",ic(r))]))},lc=function(n){var e=n.b;return tc(H([L("A1",oc(n.a)),L("A2",cc(e))]))},uc=r((function(n,e){return f(Wr,function(n){return r((function(e,r){return r.push(n(e)),r}))}(n),[],e)})),fc=q,sc=function(n){return u(fc,n,"")},dc=t((function(n,e,r){return n>0?f(dc,n>>1,N(e,e),1&n?N(r,e):r):r})),vc=r((function(n,e){return f(dc,n,e,"")})),mc=t((function(n,e,r){return N(u(vc,n-Gt(r),sc(e)),r)})),bc=function(n){return 0>n||n>1114111?"�":n>65535?String.fromCharCode(Math.floor((n-=65536)/1024)+55296,n%1024+56320):String.fromCharCode(n)},pc=k,gc=function(n){var e=function(n){return 10>n?jr(n):sc(bc(87+n))};return 16>n?e(n):N(gc(n/16|0),e(u(pc,16,n)))},hc=u(_t,gc,u(mc,2,"0")),xc=function(n){return{aQ:n.d,cg:n.c,cp:n.b,cY:n.a}},Pc=function(n){var e=xc(n),r=e.cY,t=e.cp,o=e.cg;return u(Ir,"",u(Lr,"#",u(Ut,u(_t,qi,hc),H([255*r,255*t,255*o]))))},Cc=u(_t,(function(n){return{S:u(Ut,Qi(Pc),n.S),X:n.X}}),u(_t,(function(n){return tc(H([L("floats",u(uc,lc,n.X)),L("colors",u(uc,ac,n.S))]))}),Er(0))),Mc=function(n){return 0>n?-n:n},Tc=function(n){if(0===n.length||/[\sxbo]/.test(n))return Vr;var e=+n;return e==e?Br(e):Vr},yc=t((function(n,e,r){return u(Ka,NaN,Tc(u(n,e,r)))})),Lc=function(n){return!n},wc=r((function(n,e){for(;;){if(!e.b)return!1;var r=e.b;if(n(e.a))return!0;n=n,e=r}})),Sc=r((function(n,e){var r=u(wc,(function(n){return"0"!==n&&"."!==n}),Ki(e));return N(n&&r?"-":"",e)})),Nc=nn,$c=function(n){var e=n.a,r=n.b;if("9"===e){var t=Qr(r);return 1===t.$?"01":u(fc,"0",$c(t.a))}var o=Kr(e);return o>=48&&57>o?u(fc,bc(o+1),r):"0"},Dc=function(n){return n===1/0||n===-1/0},zc=O,Hc=t((function(n,e,r){return N(r,u(vc,n-Gt(r),sc(e)))})),_c=function(n){var e=u(Ur,".",n);return e.b?L(e.a,e.b.b?e.b.a:"0"):L("0","0")},Ac=t((function(n,e,r){if(Dc(r)||zc(r))return Nc(r);var t=0>r,o=_c(function(n){var e=u(Ur,"e",Nc(Mc(n)));if(e.b){if(e.b.b){var r=e.a,t=e.b.a,o=u(Ka,0,Ft(u(Bt,"+",t)?u(kt,1,t):t)),a=_c(r),i=N(a.a,a.b),c=0>o?u(Ka,"0",u(Gi,(function(n){return n.a+"."+n.b}),u(Gi,ci(sc),Qr(N(u(vc,Mc(o),"0"),i))))):f(Hc,o+1,"0",i);return N(0>n?"-":"",c)}return N(0>n?"-":"",r=e.a)}return""}(Mc(r))),a=o.a,i=o.b,c=Gt(a)+e,l=N(u(vc,1-c,"0"),f(Hc,c,"0",N(a,i))),s=Gt(l),d=u(dt,1,c),v=u(n,t,f(Rt,d,s,l)),m=f(Rt,0,d,l),b=v?Ei(u(Ka,"1",u(Gi,$c,Qr(Ei(m))))):m,p=Gt(b),g="0"===b?b:e>0?0>T(e,Gt(i))?f(Rt,0,p-e,b)+"."+f(Rt,p-e,p,b):N(a+".",f(Hc,e,"0",i)):N(b,u(vc,Mc(e),"0"));return u(Sc,t,g)})),Gc=Ac(r((function(n,e){var r,t=Qr(e);return 1!==t.$&&("5"===t.a.a?""!==t.a.b||!n:(r=Kr(t.a.a))>53&&n||r>=53&&!n)}))),Rc=yc(Gc),kc=t((function(n,e,r){var t=u(ot,10,Mc(e-n));return u(Rc,0>t?3:1>t?2:2>t?1:0,r)})),Fc=r((function(n,e){switch(n.$){case 2:var r=rc(e.as);return S(r,{aF:r.aF,as:r.as});case 3:return S(e,{as:n.a});case 4:return S(e,{aF:Cc(e)});case 0:var t=n.a,o=n.b;return S(e,{X:u(Ut,(function(n){var e=n.a,r=n.b,a=r.a,i=r.c;return C(e,t)?L(e,w(a,f(kc,a,i,o),i)):n}),e.X)});default:return t=n.a,o=n.b,S(e,{S:u(Ut,(function(n){var e=n.a;return C(e,t)?L(e,o):n}),e.S)})}})),Bc=r((function(n,e){return f(Do,n,0,e)})),Vc=r((function(n,e){return u(xi,n,e)})),Ec=t((function(n,e,r){var t=u(n?Bc:Vc,e,r.O);switch(e){case" ":return S(r,{O:t,c4:n});case"Enter":return S(r,{co:n,O:t});case"Shift":return S(r,{O:t,c3:n});case"Backspace":return S(r,{cc:n,O:t});case"ArrowUp":return S(r,{O:t,b9:n});case"ArrowDown":return S(r,{aS:n,O:t});case"ArrowLeft":return S(r,{O:t,ai:n});case"ArrowRight":return S(r,{O:t,a1:n});default:return S(r,{O:t})}})),jc=r((function(n,e){switch(n.$){case 1:var r=n.a.fF;return S(e,{ad:u(Pi,r.de,r.cq)});case 2:return S(e,{ad:u(Pi,n.a,n.b)});case 3:return S(e,{bn:fi,I:s(li,e.I.bG,e.I.bH,!1,!1)});case 0:return S(e,{bn:f(Ec,n.a,n.b,e.bn)});case 4:return S(e,{I:f(di,e.ad.ai+n.a,e.ad.bB-n.b,e.I)});case 5:return S(e,{I:u(Xa,!0,e.I)});case 6:return S(e,{I:u(si,n.a,e.I)});case 7:case 8:return S(e,{ae:f(Wr,(function(n){return u(Do,n.bm,{bG:e.ad.ai+n.cL,bH:e.ad.bB-n.cM})}),e.ae,n.a)});case 9:case 10:return S(e,{ae:f(Wr,(function(n){return xi(n.bm)}),e.ae,n.a)});default:return S(e,{aR:u(Fc,n.a,e.aR)})}})),Ic=r((function(n,e){var r=e.b;return u(Ya,e.a,S(r,{k:u(ci,jc(n),r.k)}))})),Uc=t((function(n,e,r){var t=r.b,o=t.k;return u(Ya,r.a,S(t,{k:u(Qi,u(n,o.a,e),o)}))})),Wc=o((function(n,e,r,t){switch(r.$){case 0:return t;case 1:return S(t,{a9:r.a});case 2:return S(t,{bg:!1});case 3:return S(t,{bg:!0});case 4:return S(t,{R:f(Uc,e,r.a,t.R)});case 5:return S(t,{R:u(ii,r.a,t.R)});case 7:return S(t,{R:u(Ic,r.a,t.R)});default:return S(t,{R:f(Ja,n,r.a,t.R)})}})),Yc=(Ta=function(){return{er:(n=Fe.body,e=Fe.documentElement,{de:Math.max(n.scrollWidth,n.offsetWidth,e.scrollWidth,e.offsetWidth,e.clientWidth),cq:Math.max(n.scrollHeight,n.offsetHeight,e.scrollHeight,e.offsetHeight,e.clientHeight)}),fF:{bG:Be.pageXOffset,bH:Be.pageYOffset,de:Fe.documentElement.clientWidth,cq:Fe.documentElement.clientHeight}};var n,e},wn((function(n){Re((function(){n(Ln(Ta()))}))}))),Oc=r((function(n,e){return{aR:e,cm:n.cm,bn:fi,I:s(li,0,0,!1,!1),ad:u(Pi,600,600),a4:0,ae:To}})),qc=r((function(n,e){return u(Ya,ai,{k:L(n,e(n)),E:$,q:$})})),Xc=In,Zc=Xc($),Kc=function(n){return{$:11,a:n}},Jc=function(n){return{$:4,a:n}},Qc=function(n){return{$:5,a:n}},nl={$:2},el={$:0},rl=function(n){return{$:1,a:n}},tl={$:3},ol=r((function(n){return n})),al=te("button"),il=function(n){return n?"Level Editor":"Configurations"},cl=function(n){return u(Ka,0,Ai(u(Bo,(function(e){return C(il(e),n)?Br(e):Vr}),H([0,1]))))},ll=ae,ul=ll,fl=ie,sl=r((function(n,e){return u(fl,n,{$:0,a:e})})),dl=r((function(n,e){return f(It,Mt,e,n)})),vl=u(dl,H(["target","value"]),ka),ml=function(n){return u(sl,"click",St(n))},bl=te("option"),pl=te("select"),gl=ce,hl=gl,xl=ee,Pl=xl,Cl=r((function(n,e){return u(le,n,oc(e))})),Ml=Cl("value"),Tl=r((function(n,e){return{$:1,a:n,b:e}})),yl=r((function(n,e){return{$:0,a:n,b:e}})),Ll=s(Ui,0,0,0,1),wl=u(al,H([u(hl,"cursor","pointer"),ml({$:4})]),H([Pl("Export Configurations as json")])),Sl=te("h3"),Nl=te("p"),$l=Tn,Dl=r((function(n,e){return u(le,n,$l(e))})),zl=Dl("readOnly"),Hl=te("textarea"),_l=function(n){return u($t,$,H([u(Hl,H([zl(!0)]),H([Pl(n.aF)]))]))},Al=function(n){return u($t,$,H([u(Sl,$,H([Pl("Export Configurations")])),u(Nl,$,H([wl])),u(Nl,$,H([_l(n)]))]))},Gl=Cl("htmlFor"),Rl=te("hr"),kl=Cl("id"),Fl=u(al,H([u(hl,"cursor","pointer"),ml({$:2})]),H([Pl("Import Configurations")])),Bl=function(n){return{$:3,a:n}},Vl=function(n){return L(n,!0)},El=r((function(n,e){return u(fl,n,{$:1,a:e})})),jl=function(n){return u(El,"input",u(Lt,Vl,u(Lt,n,vl)))},Il=function(n){return u($t,$,H([u(Hl,H([jl(Bl)]),H([Pl(n.as)]))]))},Ul=function(n){return u($t,$,H([u(Sl,$,H([Pl("Import Configurations")])),u(Nl,$,H([Il(n)])),u(Nl,$,H([Fl]))]))},Wl=te("input"),Yl=te("label"),Ol=Cl("max"),ql=Cl("min"),Xl=Cl("name"),Zl=te("span"),Kl=Cl("type"),Jl=function(n){return{$:0,a:n}},Ql=function(n){return Yr(n.b.q)},nu=function(n){return u(Wl,H([u(hl,"position","absolute"),Kl("range"),u(hl,"width","100%"),ql("0"),Ol(jr((e=n,r=e.b.E,Yr(e.b.q)+1+Yr(r)-1))),Ml(jr(Ql(n))),jl(u(_t,Ft,u(_t,Ka(0),Jl)))]),$);var e,r},eu=function(n){var e=n.b.k,r=n.b.E,t=u(Ka,e,Ai(n.b.q)).a.a4,o=u(Ka,e,Ai(Jr(r))).a.a4-t,a=ft(o/1);return u($t,H([u(hl,"position","absolute"),u(hl,"width","100%"),u(hl,"height","20px")]),u(Ut,(function(n){return u($t,H([u(hl,"position","absolute"),u(hl,"background-color","yellow"),u(hl,"width","1px"),u(hl,"height","20px"),u(hl,"left",Nc(100*n*1/o)+"%")]),$)}),u(Xr,0,a)))},ru={$:1},tu={$:7},ou={$:6},au={$:2},iu={$:3},cu={$:5},lu={$:4},uu=r((function(n,e){return u(al,H([u(hl,"display","inline-block"),u(hl,"width","30px"),u(hl,"height","30px"),u(hl,"margin","2px"),u(hl,"padding","0px"),u(hl,"top","0px"),u(hl,"font-size","20px"),ml(n)]),H([Pl(e)]))})),fu=function(n){return u($t,H([u(hl,"width","100%")]),H([(e=n,r=e.a,u($t,$,H([u(uu,ru,"⏮️"),u(uu,au,"◀️"),1===r.$?u(uu,cu,"▶️"):u(uu,iu,"⏸️"),r.$?u(uu,lu,"⏺️"):u(uu,iu,"⏹"),u(uu,ou,"⏯️"),u(uu,tu,"⏭️")]))),u($t,$,H([eu(n),nu(n)]))]));var e,r},su=t((function(n,e,t){var o,a,i,c,l=t.R.b.k.b,f=u($t,H([u(hl,"margin-left","0px")]),H([u(pl,H([(o=u(_t,cl,rl),u(sl,"change",u(Lt,o,vl))),Ml(il(t.a9)),u(hl,"width","200px"),u(hl,"height","40px"),u(hl,"font-size","20px")]),u(Ut,(function(n){return u(bl,H([Ml(il(n))]),H([Pl(il(n))]))}),H([0,1])))])),s=r((function(n,e){return u(al,H([u(hl,"font-size","30px"),u(hl,"width","40px"),u(hl,"height","40px"),ml(n)]),H([Pl(e)]))})),d=Oa(t.R),v=t.a9?u(ul,Jc,u(e,d,l)):u($t,$,H([u(ul,Qc,fu(t.R)),u(ul,u(_t,Kc,zt),(a=d.aR,i=function(n){var e=n.a,r=n.b,t=r.a,o=r.b,a=r.c;return u($t,H([u(hl,"margin-top","15px")]),H([u($t,$,H([u(Yl,H([Gl(e)]),H([Pl(e),Pl(": "),u(Zl,H([u(hl,"font-family","monospace"),u(hl,"font-weight","bold")]),H([Pl(Nc(o))]))]))])),u(Wl,H([Kl("range"),kl(e),Xl(e),ql(Nc(t)),Ol(Nc(a)),jl((function(n){return u(yl,e,u(Ka,0,Tc(n)))})),u(Cl,"step","any"),u(hl,"width","200px"),Ml(Nc(o))]),$)]))},c=function(n){var e=n.a,r=n.b;return u($t,H([u(hl,"margin-top","15px")]),H([u($t,$,H([u(Yl,H([Gl(e)]),H([Pl(e)]))])),u(Wl,H([Kl("color"),u(hl,"width","200px"),u(hl,"height","30px"),kl(e),Xl(e),jl((function(n){return u(Tl,e,u(ec,Ll,Ji(n)))})),Ml(Pc(r))]),$)]))},u($t,H([u(hl,"margin-left","20px"),u(hl,"height","100%"),u(hl,"overflow","scroll")]),H([u($t,$,u(Ut,i,a.X)),u($t,$,u(Ut,c,a.S)),u(Rl,$,$),Al(a),Ul(a)]))))])),m=u($t,H([u(hl,"position","fixed"),u(hl,"top","0px"),u(hl,"left","0px"),u(hl,"width",Nc(250)+"px"),u(hl,"height",Nc(d.ad.cq)+"px"),u(hl,"font-family",'-apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif'),u(hl,"font-size","16px")]),H(t.bg?[u($t,H([u(hl,"height","100px")]),H([u(s,nl,"✕"),f])),u($t,H([u(hl,"height",Nc(d.ad.cq-100)+"px")]),H([v]))]:[u(s,tl,"≡")])),b=u($t,H([u(hl,"position","fixed"),u(hl,"top","0px"),u(hl,"left","0px"),u(hl,"width",Nc(d.ad.de)+"px"),u(hl,"height",Nc(d.ad.cq)+"px"),u(hl,"font-size","16px")]),H([u(ul,ol(el),u(n,d,l))]));return u($t,H([u(hl,"touch-action","none"),u(hl,"user-select","none")]),H([b,m]))})),du=i((function(n,e,t,o,a,i){return Qt({e7:function(n){return L({a9:0,bg:!1,R:u(qc,u(Oc,n,t),o),dd:0},u(Jt,u(_t,Dt,zt),Yc))},fw:function(n){return 1===n.dd?u(ao,zt,Ra(Ht)):Ia},fC:r((function(n,r){return L(s(Wc,e,i,n,r),Zc)})),fE:u(su,n,a)})})),vu=o((function(n,e,o,a){return v(du,n,e,o,a,r((function(){return u($t,$,$)})),t((function(n,e,r){return r})))})),mu=t((function(n,e,r){return s(vu,n,e,yt,r)})),bu=r((function(n,e){return e})),pu=3.141592653589793,gu=function(n){return n*pu/180},hu=s(Ui,114/255,159/255,207/255,1),xu=function(n){return pu*(n/180)},Pu=W,Cu=r((function(n,e){var r=e.a8-n.a8,t=e.bH-n.bH,o=e.bG-n.bG,a=u(dt,Mc(o),u(dt,Mc(t),Mc(r)));if(a){var i=r/a,c=t/a,l=o/a,f=Pu(l*l+c*c+i*i);return Br({bG:l/f,bH:c/f,a8:i/f})}return Vr})),Mu=r((function(n,e){return{bG:e.bH*n.a8-e.a8*n.bH,bH:e.a8*n.bG-e.bG*n.a8,a8:e.bG*n.bH-e.bH*n.bG}})),Tu=function(n){var e=n,r=u(dt,Mc(e.bG),u(dt,Mc(e.bH),Mc(e.a8)));if(r){var t=e.a8/r,o=e.bH/r,a=e.bG/r,i=Pu(a*a+o*o+t*t);return Br({bG:a/i,bH:o/i,a8:t/i})}return Vr},yu=r((function(n,e){return{bG:e.bG-n.bG,bH:e.bH-n.bH,a8:e.a8-n.a8}})),Lu=r((function(n,e){return e.bG*n.bG+e.bH*n.bH+e.a8*n.a8})),wu=r((function(n,e){return T(e,n)>0})),Su=r((function(n,e){return 0>T(e,n)})),Nu=r((function(n,e){return{bG:e.bG-n.bG,bH:e.bH-n.bH,a8:e.a8-n.a8}})),$u=r((function(n,e){var r=e.bG*n.bG+e.bH*n.bH+e.a8*n.a8;return{bG:n.bG*r,bH:n.bH*r,a8:n.a8*r}})),Du={bG:0,bH:0,a8:0},zu=t((function(n,e,r){return u(Ni,(function(t){return u(Ni,(function(o){var a,i=u(Mu,e,n),c=u(Lu,r,i),l=u(wu,0,c)?i:u(Su,0,c)?{bG:-(a=i).bG,bH:-a.bH,a8:-a.a8}:Du;return u(Gi,(function(n){return w(t,o,n)}),Tu(l))}),Tu(u(Nu,u($u,t,e),e)))}),Tu(n))})),Hu=function(n){var e=function(n){var e=n,r=Mc(e.a8),t=Mc(e.bH),o=Mc(e.bG);if(1>T(o,t)){if(1>T(o,r)){var a=Pu(e.a8*e.a8+e.bH*e.bH);return{bG:0,bH:-e.a8/a,a8:e.bH/a}}return a=Pu(e.bH*e.bH+e.bG*e.bG),{bG:-e.bH/a,bH:e.bG/a,a8:0}}return 1>T(t,r)?(a=Pu(e.a8*e.a8+e.bG*e.bG),{bG:e.a8/a,bH:0,a8:-e.bG/a}):(a=Pu(e.bG*e.bG+e.bH*e.bH),{bG:-e.bH/a,bH:e.bG/a,a8:0})}(n);return L(e,{bG:n.bH*e.a8-n.a8*e.bH,bH:n.a8*e.bG-n.bG*e.a8,a8:n.bG*e.bH-n.bH*e.bG})},_u=r((function(n,e){var r=Hu(n);return{cK:e,dg:r.a,dh:r.b,di:n}})),Au=function(n){var e=u(yu,n.dz,n.dy),r=n.eA,t=f(zu,e,r,u(Mu,e,r));if(t.$){var o=Tu(e);if(o.$){var a=Hu(n.eA);return{cK:n.dy,dg:a.b,dh:n.eA,di:a.a}}return u(_u,o.a,n.dy)}var i=t.a;return{cK:n.dy,dg:i.c,dh:i.b,di:i.a}},Gu={bG:0,bH:0,a8:0},Ru=function(n){return Mc(n)},ku=function(n){return.5*n},Fu=V,Bu={bG:0,bH:1,a8:0},Vu=function(n){var e,r,t,o=n.dz,a=n.dy,i=n.eA;return e={eB:xu(40),dc:Au({dy:a,dz:o,eA:u(Ka,Bu,u(Cu,Gu,i))})},t=ku(Ru(e.eB)),{cX:(r=Fu(t),{$:0,a:r}),dc:e.dc}},Eu=r((function(n,e){return{$:0,a:n,b:e}})),ju=r((function(n,e){return T(e,n)>-1})),Iu=r((function(n,e){return n+.5*(e-n)})),Uu=r((function(n,e){return e-n})),Wu={bG:-1,bH:0,a8:0},Yu={bG:0,bH:-1,a8:0},Ou={bG:0,bH:0,a8:-1},qu={bG:1,bH:0,a8:0},Xu={bG:0,bH:0,a8:1},Zu=t((function(n,e,r){return{bG:n,bH:e,a8:r}})),Ku=i((function(n,e,r,t,o,a){var i=u(ju,r,a)?Xu:Ou,c=u(ju,e,o)?Bu:Yu,l=u(ju,n,t)?qu:Wu,s=w(Ru(u(Uu,n,t)),Ru(u(Uu,e,o)),Ru(u(Uu,r,a)));return{eI:{cK:f(Zu,u(Iu,n,t),u(Iu,e,o),u(Iu,r,a)),dg:l,dh:c,di:i},ds:s}})),Ju=function(n){return n.bG},Qu=function(n){return n.bH},nf=function(n){return n.a8},ef=r((function(n,e){return v(Ku,Ju(n),Qu(n),nf(n),Ju(e),Qu(e),nf(e))})),rf=t((function(n,e,r){return{bG:n,bH:e,a8:r}})),tf=r((function(n,e){var r=w(e.a/2,e.b/2,e.c/2),t=r.a,o=r.b,a=r.c;return u(Eu,n,u(ef,f(rf,-t,-o,-a),f(rf,t,o,a)))})),of=s(Ui,52/255,101/255,164/255,1),af=s(Ui,211/255,215/255,207/255,1),cf=function(n){return{$:5,a:n}},lf=function(n){return cf(n)},uf=r((function(n,e){return{$:2,a:n,b:e}})),ff=r((function(n,e){return{$:4,a:n,b:e}})),sf=r((function(n,e){return{$:3,a:n,b:e}})),df=r((function(n,e){return{$:1,a:n,b:e}})),vf=t((function(n,e,r){return{bG:n,bH:e,a8:r}})),mf=function(n){return n.eI},bf=function(n){return n.ds},pf=function(n){return n.cK},gf=r((function(n,e){return{bG:e.bG+n.bG,bH:e.bH+n.bH,a8:e.a8+n.a8}})),hf=function(n){return n.dg},xf=function(n){return n.dh},Pf=function(n){return n.di},Cf=r((function(n,e){return{cK:u(gf,n,pf(e)),dg:hf(e),dh:xf(e),di:Pf(e)}})),Mf=r((function(n,e){return{eI:u(Cf,n,mf(e)),ds:bf(e)}})),Tf=r((function(n,e){return{eT:e,cK:n}})),yf=r((function(n,e){var r=e;return u(Tf,u(gf,n,r.cK),r.eT)})),Lf=r((function(n,e){var r=e;return{l:u(yf,n,r.l),e9:r.e9,fn:r.fn}})),wf=r((function(n,e){var r=e.b;return L(n(e.a),n(r))})),Sf=r((function(n,e){return u(wf,gf(n),e)})),Nf=function(n){return n.eP},$f=function(n){return n.fn},Df=r((function(n,e){return{eP:e,fn:Ru(n)}})),zf=r((function(n,e){return u(Df,$f(e),u(gf,n,Nf(e)))})),Hf=r((function(n,e){var r=e.b,t=e.c;return w(n(e.a),n(r),n(t))})),_f=r((function(n,e){return u(Hf,gf(n),e)})),Af=r((function(n,e){var r=n.a,t=n.b,o=n.c,a=f(vf,r,t,o);switch(e.$){case 0:return u(Eu,e.a,u(Mf,a,e.b));case 1:return u(df,e.a,u(_f,a,e.b));case 3:return u(sf,e.a,u(zf,a,e.b));case 2:return u(uf,e.a,u(Lf,a,e.b));case 4:return u(ff,e.a,u(Sf,a,e.b));default:var i=e.a;return cf(u(Ut,Af(w(r,t,o)),i))}})),Gf=function(n){return Af(w(0,n,0))},Rf=F,kf=B,Ff=t((function(n,e,r){var t=n,o=r,a=.5*e,i=Rf(a),c=kf(a),l=t.eT,u=l.bG*c,f=i*u,s=u*u,d=l.bH*c,v=i*d,m=u*d,b=d*d,p=l.a8*c,g=i*p,h=u*p,x=d*p,P=p*p;return{bG:(1-2*(b+P))*o.bG+2*(m-g)*o.bH+2*(h+v)*o.a8,bH:2*(m+g)*o.bG+(1-2*(s+P))*o.bH+2*(x-f)*o.a8,a8:2*(h-v)*o.bG+2*(x+f)*o.bH+(1-2*(s+b))*o.a8}})),Bf=t((function(n,e,r){var t=n,o=r,a=.5*e,i=Rf(a),c=kf(a),l=t.cK,u=o.bG-l.bG,f=o.bH-l.bH,s=o.a8-l.a8,d=t.eT,v=d.bG*c,m=i*v,b=v*v,p=d.bH*c,g=i*p,h=v*p,x=p*p,P=d.a8*c,C=i*P,M=v*P,T=p*P,y=P*P;return{bG:l.bG+(1-2*(x+y))*u+2*(h-C)*f+2*(M+g)*s,bH:l.bH+2*(h+C)*u+(1-2*(b+y))*f+2*(T-m)*s,a8:l.a8+2*(M-g)*u+2*(T+m)*f+(1-2*(b+x))*s}})),Vf=t((function(n,e,r){return{cK:f(Bf,n,e,pf(r)),dg:f(Ff,n,e,hf(r)),dh:f(Ff,n,e,xf(r)),di:f(Ff,n,e,Pf(r))}})),Ef=t((function(n,e,r){return{eI:f(Vf,n,e,mf(r)),ds:bf(r)}})),jf=r((function(n,e){var r=u(Bf,n,e),t=u(Ff,n,e);return function(n){var e=n;return u(Tf,r(e.cK),t(e.eT))}})),If=t((function(n,e,r){var t=r;return{l:f(jf,n,e,t.l),e9:t.e9,fn:t.fn}})),Uf=t((function(n,e,r){return u(wf,u(Bf,n,e),r)})),Wf=t((function(n,e,r){return u(Df,$f(r),f(Bf,n,e,Nf(r)))})),Yf=t((function(n,e,r){return u(Hf,u(Bf,n,e),r)})),Of=t((function(n,e,r){switch(r.$){case 0:return u(Eu,r.a,f(Ef,n,e,r.b));case 1:return u(df,r.a,f(Yf,n,e,r.b));case 3:return u(sf,r.a,f(Wf,n,e,r.b));case 2:return u(uf,r.a,f(If,n,e,r.b));case 4:return u(ff,r.a,f(Uf,n,e,r.b));default:var t=r.a;return cf(u(Ut,u(Of,n,e),t))}})),qf=Bu,Xf=u(Tf,Gu,qf),Zf=r((function(n,e){return f(Of,Xf,n,e)})),Kf=r((function(n,e){return n*e})),Jf=function(n){return{bG:-n.bG,bH:-n.bH,a8:-n.a8}},Qf=t((function(n,e,r){return{bG:n.bG+e*(r.bG-n.bG),bH:n.bH+e*(r.bH-n.bH),a8:n.a8+e*(r.a8-n.a8)}})),ns=t((function(n,e,r){var t=mf(r),o=hf(t),a=xf(t),i=Pf(t),c=f(Qf,n,e,pf(t)),l=0>e?{cK:c,dg:Jf(o),dh:Jf(a),di:Jf(i)}:{cK:c,dg:o,dh:a,di:i},s=bf(r),d=s.b,v=s.c;return{eI:l,ds:w(Ru(u(Kf,e,s.a)),Ru(u(Kf,e,d)),Ru(u(Kf,e,v)))}})),es=function(n){return n.l},rs=function(n){return n.eT},ts=function(n){return rs(es(n))},os=function(n){return n.cK},as=function(n){return n.e9},is=function(n){return n.fn},cs=t((function(n,e,r){var t=Ru(u(Kf,e,is(r))),o=Ru(u(Kf,e,as(r))),a=0>e?Jf(ts(r)):ts(r),i=f(Qf,n,e,function(n){return os(es(n))}(r));return{l:u(Tf,i,a),e9:o,fn:t}})),ls=t((function(n,e,r){return u(wf,u(Qf,n,e),r)})),us=t((function(n,e,r){return u(Df,u(Kf,Mc(e),$f(r)),f(Qf,n,e,Nf(r)))})),fs=t((function(n,e,r){return u(Hf,u(Qf,n,e),r)})),ss=r((function(n,e){switch(e.$){case 0:return u(Eu,e.a,f(ns,Gu,n,e.b));case 1:return u(df,e.a,f(fs,Gu,n,e.b));case 3:return u(sf,e.a,f(us,Gu,n,e.b));case 2:return u(uf,e.a,f(cs,Gu,n,e.b));case 4:return u(ff,e.a,f(ls,Gu,n,e.b));default:var r=e.a;return cf(u(Ut,ss(n),r))}})),ds=(jo=function(n){return u(Gf,-1,u(tf,n,w(10,1,10)))},Io=function(n){return lf(H([jo(n),u(Zf,gu(45),jo(n))]))},lf(H([Io(af),u(Gf,-.1,u(ss,1.1,Io(of))),u(Gf,-.2,u(ss,1.2,Io(af)))]))),vs=E,ms=o((function(n,e,r,t){var o=w(n,e,r),a=o.a,i=o.b,c=o.c,l=c>.5?c+i-c*i:c*(i+1),u=2*c-l,f=function(n){var e=0>n?n+1:n>1?n-1:n;return 1>6*e?u+(l-u)*e*6:1>2*e?l:2>3*e?u+(l-u)*(2/3-e)*6:u},d=f(a-1/3),v=f(a),m=f(a+1/3);return s(Ui,m,v,d,t)})),bs=t((function(n,e,r){return s(ms,n,e,r,1)})),ps=function(n){return Af(w(n,0,0))},gs=Xu,hs=u(Tf,Gu,gs),xs=r((function(n,e){return f(Of,hs,n,e)})),Ps=r((function(n,e){return(e-ft(e/n)*n)/n})),Cs=o((function(n,e,r,t){return n+(e-n)*(1+Rf(6.283185307179586*u(Ps,r,t)))/2})),Ms=i((function(n,e,t,o,a,i){var c=r((function(n,e){return Pu(u(Oi,n,2)+u(Oi,e,2))})),l=u(tf,f(bs,s(Cs,i/6,1,10,n.a4),.6,.6),w(e,t,t)),d=L(u(c,o,a),u(c,e-o,a)),m=d.b,b=i?H([u(Gf,t/2,u(ps,-e/2,u(ss,d.a/e,u(xs,u(vs,a,o),u(Gf,t/2,u(ps,e/2,u(Zf,s(Cs,-2,2,8,n.a4),v(Ms,n,e,t,o,a,i-1)))))))),u(Gf,t/2,u(ps,e/2,u(ss,m/e,u(xs,-u(vs,a,e-o),u(Gf,t/2,u(ps,-e/2,u(Zf,s(Cs,2,-2,8,n.a4),v(Ms,n,e,t,o,a,i-1))))))))]):$;return lf(u(Lr,l,b))})),Ts=r((function(n,e){return 360*u(Ps,n,e)})),ys=r((function(n){return H([u(Zf,u(Ts,1e3,n.a4),lf(H([ds,v(Ms,n,2,2,1+.001*n.I.bG,1+.001*n.I.bH,5)])))])})),Ls=function(n){return{$:0,a:n}},ws={$:3},Ss=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),Ns=Ss,$s=r((function(n,e){return e.b?f(It,Lr,e,n):n})),Ds=function(n){return f(It,$s,$,n)},zs=r((function(n,e){return Ds(u(Ut,n,e))})),Hs=function(n){return u(ue,"height",jr(n))},_s=function(n){return oe(function(n){return"script"==n?"p":n}(n))},As=function(n){return{$:2,a:n}},Gs=r((function(n,e){switch(e.$){case 0:return u(vr,n,e);case 1:return u(mr,n,e);case 2:return u(br,n,e);case 3:return u(pr,n,e);case 4:return u(gr,n,e);default:return u(hr,n,e)}})),Rs=r((function(n,e){switch(e.$){case 0:return u(Xe,n,e);case 1:return u(Ze,n,e);case 2:return u(Ke,n,e);case 3:return u(Je,n,e);case 4:return u(Qe,n,e);case 5:return u(nr,n,e);case 6:return u(er,n,e);case 7:return u(rr,n,e);default:return function(n){var e=n.sampleAlphaToCoverage;e.toggle=n.toggle,e.enabled||(n.gl.enable(n.gl.SAMPLE_ALPHA_TO_COVERAGE),e.enabled=!0)}(n)}})),ks=t((function(n,e,r){return f(dr,n,e,r)})),Fs=yr,Bs=s(Fs,1,1,1,1),Vs=t((function(n,e,r){return u(Ut,(function(n){return u(n,e,r)}),n)})),Es=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),js=r((function(n,e){var r=e.bG,t=e.bH;return f(Es,n*r/t,n,n*(1-r-t)/t)})),Is=Mr,Us=r((function(n,e){return f(Is,3.2406*(t=(r=u(js,n,e)).a)-1.5372*(o=r.b)-.4986*(a=r.c),-.9689*t+1.8758*o+.0415*a,.0557*t-.204*o+1.057*a);var r,t,o,a})),Ws=r((function(n,e){return{dH:C(n.dH,e.dH),s:n.s*e.s+n.t*e.v+n.u*e.y,t:n.s*e.t+n.t*e.w+n.u*e.z,u:n.s*e.u+n.t*e.x+n.u*e.A,v:n.v*e.s+n.w*e.v+n.x*e.y,w:n.v*e.t+n.w*e.w+n.x*e.z,x:n.v*e.u+n.w*e.x+n.x*e.A,y:n.y*e.s+n.z*e.v+n.A*e.y,z:n.y*e.t+n.z*e.w+n.A*e.z,A:n.y*e.u+n.z*e.x+n.A*e.A,J:e.J+(n.J*e.s+n.K*e.v+n.L*e.y)*e.b7,K:e.K+(n.J*e.t+n.K*e.w+n.L*e.z)*e.b7,L:e.L+(n.J*e.u+n.K*e.x+n.L*e.A)*e.b7,b7:n.b7*e.b7}})),Ys=function(n){var e=new Float64Array(16);return e[0]=n.dP,e[1]=n.dT,e[2]=n.dX,e[3]=n.d$,e[4]=n.dQ,e[5]=n.dU,e[6]=n.dY,e[7]=n.d0,e[8]=n.dR,e[9]=n.dV,e[10]=n.dZ,e[11]=n.d1,e[12]=n.dS,e[13]=n.dW,e[14]=n.d_,e[15]=n.d2,e},Os=a((function(n,e,r,t,o){return v(o,n,s(Fs,t.b7,t.b7,t.b7,t.dH?1:-1),function(n){return Ys({dP:n.s,dQ:n.v,dR:n.y,dS:n.J,dT:n.t,dU:n.w,dV:n.z,dW:n.K,dX:n.u,dY:n.x,dZ:n.A,d_:n.L,d$:0,d0:0,d1:0,d2:1})}(t),t.dH,e,r)})),qs=i((function(n,e,r,t,o,a){n:for(;;)switch(o.$){case 0:return a;case 5:var i=o.b;n=n,e=e,r=r,t=u(Ws,o.a,t),o=i,a=a;continue n;case 1:return{P:u(Lr,d(Os,n,e,r,t,o.b),a.P),Z:a.Z,fr:a.fr};case 3:return{P:a.P,Z:u(Lr,d(Os,n,e,r,t,o.b),a.Z),fr:a.fr};case 2:return{P:a.P,Z:a.Z,fr:u(Lr,d(Os,n,e,r,t,o.a),a.fr)};default:var c=o.a;return f(Wr,s(qs,n,e,r,t),a,c)}})),Xs=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),Zs=Xs,Ks=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),Js=r((function(n,e){return{$:6,a:n,b:e}})),Qs=Js,nd=H([s(Ks,518,!1,0,1),s(Zs,!1,!1,!1,!1),u(Qs,0,1)]),ed=519,rd=7681,td={src:"\n        precision lowp float;\n\n        void main() {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        }\n    ",attributes:{},uniforms:{}},od=qe,ad=r((function(n,e){return{$:0,a:n,b:e}})),id=ad({dt:1,dE:0,eb:5}),cd=Cr,ld=id(H([{ej:u(cd,-1,-1)},{ej:u(cd,1,-1)},{ej:u(cd,-1,1)},{ej:u(cd,1,1)}])),ud={src:"\n        precision lowp float;\n\n        attribute vec2 position;\n\n        void main() {\n            gl_Position = vec4(position, 0.0, 1.0);\n        }\n    ",attributes:{position:"ej"},uniforms:{}},fd=function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return function(f){return{$:2,a:n,b:e,c:r,d:t,e:o,f:a,g:i,h:c,i:l,j:u,k:f}}}}}}}}}}}},sd=t((function(n,e,t){var o=n.cZ,a=n.cB,i=n.df,c=r((function(n,e){return e(n)})),l=r((function(n,e){return e(n)})),s=function(n){return u(_t,c(n.bx),u(_t,l(n.bi),u(_t,l(n.bI),l(n.bJ))))};return u(s,t,u(s,e,f(fd,o,a,i)))})),dd=function(n){return f(sd,{cB:n.cB,cZ:n.cZ,df:n.df},{bi:n.bi,bx:n.bx,bI:n.bI,bJ:n.bJ},{bi:n.bi,bx:n.bx,bI:n.bI,bJ:n.bJ})},vd=function(n){return d(od,H([dd(n),s(Zs,!1,!1,!1,!1)]),ud,td,ld,{})},md=vd({bi:rd,cB:0,cZ:8,bx:ed,df:15,bI:rd,bJ:rd}),bd=7680,pd=function(n){return vd({bi:bd,cB:15,cZ:8,bx:516,df:(e=n,u(Oi,2,e+4)),bI:5386,bJ:5386});var e},gd=t((function(n,e,r){return Ds(H([f(Vs,n,r,nd),H([pd(e),md])]))})),hd=r((function(n,e){return Ds(u(Zr,gd(n),e))})),xd=s(Ks,513,!0,0,1),Pd=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),Cd=r((function(n,e){return f(Pd,32774,n,e)})),Md=function(n){var e=n.b5,t=n.bT,o=n.bN,a=n.bK,i=n.bP,c=n.aQ;return u(r((function(n,r){var i=n.b,c=n.c,l=r.a,u=r.b,f=r.c;return function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return{$:0,a:n,b:e,c:r,d:t,e:o,f:a,g:i,h:c,i:l,j:u}}}}}}}}}}}(n.a)(i)(c)(l)(u)(f)(e)(t)(o)(a)})),i,c)}({bK:0,aQ:u(Cd,1,771),bN:0,bP:u(Cd,770,771),bT:0,b5:0}),Td=H([xd,Md]),yd=function(n){return n.d6},Ld=function(n){return n.d9},wd=function(n){return w(u(Uu,function(n){return n.d7}(n),function(n){return n.d4}(n)),u(Uu,function(n){return n.d8}(n),function(n){return n.d5}(n)),u(Uu,Ld(n),yd(n)))},Sd=function(n){return pf(n)},Nd=function(n){return{cK:{bG:n.J,bH:n.K,a8:n.L},dg:{bG:n.s,bH:n.t,a8:n.u},dh:{bG:n.v,bH:n.w,a8:n.x},di:{bG:n.y,bH:n.z,a8:n.A}}},$d=r((function(n,e){var r=n.di,t=n.dh,o=n.dg;return{bG:e.bG*o.bG+e.bH*o.bH+e.a8*o.a8,bH:e.bG*t.bG+e.bH*t.bH+e.a8*t.a8,a8:e.bG*r.bG+e.bH*r.bH+e.a8*r.a8}})),Dd=r((function(n,e){var r=n.cK,t=e.bG-r.bG,o=e.bH-r.bH,a=e.a8-r.a8,i=n.di,c=n.dh,l=n.dg;return{bG:t*l.bG+o*l.bH+a*l.a8,bH:t*c.bG+o*c.bH+a*c.a8,a8:t*i.bG+o*i.bH+a*i.a8}})),zd=r((function(n,e){return{cK:u(Dd,n,pf(e)),dg:u($d,n,hf(e)),dh:u($d,n,xf(e)),di:u($d,n,Pf(e))}})),Hd=r((function(n,e){return u(dt,n,e)})),_d=r((function(n,e){return 0>T(n,e)?n:e})),Ad=r((function(n,e){return u(_d,n,e)})),Gd=r((function(n,e){var r=e,t=n;return{d4:u(Hd,t.d4,r.d4),d5:u(Hd,t.d5,r.d5),d6:u(Hd,t.d6,r.d6),d7:u(Ad,t.d7,r.d7),d8:u(Ad,t.d8,r.d8),d9:u(Ad,t.d9,r.d9)}})),Rd=r((function(n,e){return e+n})),kd=r((function(n,e){var r=n.a,t=n.c,o=ku(Ru(n.b)),a=ku(Ru(r)),i=ku(Ru(t)),c=function(n){return w(n.bG,n.bH,n.a8)}(e),l=c.a,f=c.b,s=c.c;return{d4:u(Rd,a,l),d5:u(Rd,o,f),d6:u(Rd,i,s),d7:u(Uu,a,l),d8:u(Uu,o,f),d9:u(Uu,i,s)}})),Fd=o((function(n,e,r,t){var o=r.eP,a=2*r.e2*e,i=2*r.e1*e,c=2*r.e0*e,l=o.a8*e,s=o.bH*e,d=o.bG*e,v=Pf(n),m=Mc(c*v.bG)+Mc(i*v.bH)+Mc(a*v.a8),b=xf(n),p=Mc(c*b.bG)+Mc(i*b.bH)+Mc(a*b.a8),g=hf(n),h=Mc(c*g.bG)+Mc(i*g.bH)+Mc(a*g.a8),x=u(kd,w(h,p,m),u(Dd,n,f(rf,d,s,l)));return Br(t.$?x:u(Gd,t.a,x))})),Bd=o((function(n,e,r,t){n:for(;;){if(!t.b)return r;var o=t.a,a=t.b;switch(o.$){case 0:n=c=n,e=l=e,r=f=r,t=a;continue n;case 1:var i=s(Fd,n,e,o.a,r);n=c=n,e=l=e,r=f=i,t=a;continue n;case 2:n=c=n,e=l=e,r=f=r,t=a;continue n;case 3:i=s(Fd,n,e,o.a,r),n=c=n,e=l=e,r=f=i,t=a;continue n;case 4:var c=n,l=e,f=s(Bd,n,e,r,o.a);n=c,e=l,r=f,t=a;continue n;default:var d=o.a,v=o.b,m=u(zd,Nd(d),n),b=e*d.b7;n=c=n,e=l=e,r=f=s(Bd,m,b,r,H([v])),t=a;continue n}}})),Vd=function(n){return n[0]},Ed=function(n){return n[1]},jd=function(n){return n[2]},Id=function(n){return{$:4,a:n}},Ud=r((function(n,e){for(;;){if(!n.b)return e;var r=n.a;n=n.b,e=u(Lr,r,e)}})),Wd=function(n){return Id(u(Ud,n,$))},Yd={dH:!0,s:1,t:0,u:0,v:0,w:1,x:0,y:0,z:0,A:1,J:0,K:0,L:0,b7:1},Od=vd({bi:rd,cB:0,cZ:8,bx:ed,df:255,bI:rd,bJ:rd}),qd={bN:0,eO:!1,bT:0,cV:0,b5:0,c9:0,bG:0,bH:0,a8:0},Xd=r((function(n,e){return Ys({dP:n.bG,dQ:n.b5,dR:e.bG,dS:e.b5,dT:n.bH,dU:n.bT,dV:e.bH,dW:e.bT,dX:n.a8,dY:n.bN,dZ:e.a8,d_:e.bN,d$:n.c9,d0:n.cV,d1:e.c9,d2:e.cV})})),Zd=L({bp:u(Xd,qd,qd),bX:u(Xd,qd,qd),bY:u(Xd,qd,qd),bZ:u(Xd,qd,qd)},s(Fs,0,0,0,0)),Kd=function(n){return-n},Jd=function(n){return s(Ks,515,n.af,n.aa,n._)},Qd=H([Jd({_:1,aa:0,af:!0}),dd({bi:bd,cB:240,cZ:0,bx:514,df:0,bI:bd,bJ:bd}),Md]),nv=r((function(n,e){var r=n,t=e.e_,o=e.eH,a=Ru(e.fg),i=Ru(t),c=r.cX;if(c.$){var l=c.a;return Dc(i)?Ys({dP:2/(o*l),dQ:0,dR:0,dS:0,dT:0,dU:2/l,dV:0,dW:0,dX:0,dY:0,dZ:0,d_:-1,d$:0,d0:0,d1:0,d2:1}):Ys({dP:2/(o*l),dQ:0,dR:0,dS:0,dT:0,dU:2/l,dV:0,dW:0,dX:0,dY:0,dZ:-2/(i-a),d_:-(i+a)/(i-a),d$:0,d0:0,d1:0,d2:1})}var u=c.a;return Dc(i)?Ys({dP:1/(o*u),dQ:0,dR:0,dS:0,dT:0,dU:1/u,dV:0,dW:0,dX:0,dY:0,dZ:-1,d_:-2*a,d$:0,d0:0,d1:-1,d2:0}):Ys({dP:1/(o*u),dQ:0,dR:0,dS:0,dT:0,dU:1/u,dV:0,dW:0,dX:0,dY:0,dZ:-(i+a)/(i-a),d_:-2*i*a/(i-a),d$:0,d0:0,d1:-1,d2:0})})),ev=r((function(n,e){return 1==(1&n>>e)?0:1})),rv=t((function(n,e,r){return Ds(u(Ut,(function(r){var t=r<<4;return f(Vs,n,L(e,s(Fs,u(ev,r,0),u(ev,r,1),u(ev,r,2),u(ev,r,3))),function(n){return H([Jd({_:1,aa:0,af:!0}),dd({bi:bd,cB:240,cZ:n,bx:514,df:0,bI:bd,bJ:bd}),Md])}(t))}),u(Xr,1,u(Oi,2,r)-1)))})),tv=function(n){return Jf(Pf(n))},ov=qu,av={cK:Gu,dg:ov,dh:qf,di:gs},iv=r((function(n,e){var r,t,o,a,i;return t=pf(r=u(zd,e,n)),o=Pf(r),a=xf(r),i=hf(r),Ys({dP:i.bG,dQ:a.bG,dR:o.bG,dS:t.bG,dT:i.bH,dU:a.bH,dV:o.bH,dW:t.bH,dX:i.a8,dY:a.a8,dZ:o.a8,d_:t.a8,d$:0,d0:0,d1:0,d2:1})})),cv=function(n){return hf(n)},lv=t((function(n,e,r){return{bG:n,bH:e,a8:r}})),uv=function(n){return xf(n)},fv=r((function(n,e){var r,t=H([(1,{$:1,a:1}),As(0),Ls(!0),s(Ns,0,0,0,0)]),o=function(){var e=n.eF;switch(e.$){case 0:return w(t,"0",1);case 1:return w(u(Lr,ws,t),"1",1);default:return w(t,"0",e.a)}}(),a=o.a,i=o.b,c=o.c,l=n.ds,d=l.a,m=l.b,b=u(hl,"height",jr(m)+"px"),p=d,g=p/m,h=u(zs,(function(e){return function(n){var e=function(n){return n.dc}(n.eM),r={cK:Sd(e),dg:cv(e),dh:uv(e),di:Jf(tv(e))},t=Wd(n.dw),o=s(Bd,r,1,Vr,H([t]));if(1===o.$)return $;var a=o.a,i=u(iv,av,e),c=u(Kf,.99,u(Hd,Ru(n.dp),Kd(yd(a)))),l=wd(a),d=function(n){var e=n,r=u(dt,Mc(e.bG),u(dt,Mc(e.bH),Mc(e.a8)));if(r){var t=e.a8/r,o=e.bH/r,a=e.bG/r;return Pu(a*a+o*o+t*t)*r}return 0}(f(lv,l.a,l.b,l.c)),m=u(Kf,1.01,u(Rd,d,Kd(Ld(a)))),b=u(nv,n.eM,{eH:n.eH,e_:m,fg:c}),p=function(n){return{dP:n[0],dT:n[1],dX:n[2],d$:n[3],dQ:n[4],dU:n[5],dY:n[6],d0:n[7],dR:n[8],dV:n[9],dZ:n[10],d1:n[11],dS:n[12],dW:n[13],d_:n[14],d2:n[15]}}(b).d2,g=p?Jf(tv(e)):Sd(e),h=function(){var e=n.fB;switch(e.$){case 0:return L(0,0);case 1:return L(1,0);case 2:return L(2,0);case 3:return L(3,e.a);case 4:return L(4,e.a);default:return L(5,0)}}(),x=h.a,P=h.b,C=u(Us,n.eY,n.fG),M=Ys({dP:0,dQ:g.bG,dR:Vd(C),dS:n.ev,dT:0,dU:g.bH,dV:Ed(C),dW:d,dX:0,dY:g.a8,dZ:jd(C),d_:x,d$:0,d0:p,d1:0,d2:P}),T=v(qs,M,i,b,Yd,t,{P:$,Z:$,fr:$}),y=n.fb;switch(y.$){case 0:return Ds(H([f(Vs,T.P,L(w=y.a,Bs),Td),f(Vs,T.Z,Zd,Td)]));case 1:var w=y.a;return Ds(H([f(Vs,T.P,Zd,Td),H([Od]),f(Vs,T.fr,w.bp,nd),H([pd(0)]),f(Vs,T.P,L(w,Bs),Qd),f(Vs,T.Z,Zd,Td)]));default:var S=y.a,N=y.b;return Ds(H([f(Vs,T.P,L(N,Bs),Td),H([Od]),u(hd,T.fr,S),f(rv,T.P,N,Yr(S)),f(Vs,T.Z,Zd,Td)]))}}({eH:g,eM:n.eM,dp:n.dp,dw:e.dw,eY:e.eY,fb:e.fb,ev:c,fB:e.fB,fG:e.fG})}),e),x=u(hl,"width",jr(p)+"px"),P=function(n){var e,r,t=n.b,o=n.c,a=n.d,i=function(n){return qi(1e4*n)/100};return e=H(["rgba(",Nc(i(n.a)),"%,",Nc(i(t)),"%,",Nc(i(o)),"%,",Nc((r=a,qi(1e3*r)/1e3)),")"]),u(Ir,"",e)}(n.dl);return f(_s,"div",H([u(hl,"padding","0px"),x,b]),H([L(i,f(ks,a,H([(r=qi(p*c),u(ue,"width",jr(r))),Hs(qi(m*c)),x,b,u(hl,"display","block"),u(hl,"background-color",P)]),h))]))})),sv={bG:.31271,bH:.32902},dv=r((function(n,e){var r=n,t=e.eT,o=t.bG,a=t.bH,i=t.a8,c=u(Us,e.cr,e.ch);return{bN:jd(c),eO:r,bT:Ed(c),cV:0,b5:Vd(c),c9:1,bG:-o,bH:-a,a8:-i}})),vv={$:0},mv=function(n){return function(n){for(;;){if(C(n.dF,0)&&C(n.dG,0))return qd;if(!u(wu,Ru(n.dF),Ru(n.dG))){var e=Mc(n.dG/pu),r=Mc(n.dF/pu),t=n.eA,o=t.bG,a=t.bH,i=t.a8,c=u(Us,1,n.ch);return{bN:r*jd(c),eO:!1,bT:r*Ed(c),cV:e/r,b5:r*Vd(c),c9:3,bG:o,bH:a,a8:i}}n={ch:n.ch,dF:n.dG,dG:n.dF,eA:Jf(n.eA)}}}({ch:n.ch,dF:n.cr,dG:0,eA:n.eA})},bv=t((function(n,e,r){return 0>T(r,n)?n:T(r,e)>0?e:r})),pv=function(n){var e=f(bv,1667,25e3,n),r=e>4e3?-3025846900/(e*e*e)+2107037.9/(e*e)+.2226347*1e3/e+.24039:-266123900.00000003/(e*e*e)-.2343589*1e6/(e*e)+877.6956/e+.17991;return{bG:r,bH:e>2222?e>4e3?r*r*r*3.081758-r*r*5.8733867+3.75112997*r-.37001483:r*r*r*-.9549476-r*r*1.37418593+2.09137015*r-.16748867:r*r*r*-1.1063814-r*r*1.3481102+2.18555832*r-.20219683}},gv=pv(12e3),hv=pv(5600),xv=r((function(n,e){return{$:2,a:n,b:e}})),Pv=function(n){return{$:0,a:n}},Cv=function(n){return n.eO},Mv=Pv(Zd.a),Tv=r((function(n,e){return f(It,r((function(e,r){var t=r.a,o=r.b;return n(e)?L(u(Lr,e,t),o):L(t,u(Lr,e,o))})),L($,$),e)})),yv=function(n){return Ys({dP:n.bG,dQ:n.b5,dR:0,dS:0,dT:n.bH,dU:n.bT,dV:0,dW:0,dX:n.a8,dY:n.bN,dZ:0,d_:0,d$:n.c9,d0:n.cV,d1:0,d2:0})},Lv=l((function(n,e,r,t,o,a,i,c){var l=u(Tv,Cv,H([n,e,r,t])),f=l.a;if(f.b){var s=N(f,l.b);if(s.b&&s.b.b&&s.b.b.b&&s.b.b.b.b&&!s.b.b.b.b.b){var d=s.a,v=s.b,m=v.a,b=v.b,p=b.a,g=b.b.a;return u(xv,u(Ut,yv,f),{bp:u(Xd,d,m),bX:u(Xd,p,g),bY:u(Xd,o,a),bZ:u(Xd,i,c)})}return Mv}return Pv({bp:u(Xd,n,e),bX:u(Xd,r,t),bY:u(Xd,o,a),bZ:u(Xd,i,c)})})),wv=t((function(n,e,r){return b(Lv,n,e,r,qd,qd,qd,qd,qd)})),Sv=o((function(n,e,r,t){return{$:2,a:n,b:e,c:r,d:t}})),Nv=o((function(n,e,r,t){return{$:3,a:n,b:e,c:r,d:t}})),$v=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),Dv=o((function(n,e,r,t){return{$:6,a:n,b:e,c:r,d:t}})),zv=o((function(n,e,r,t){return{$:7,a:n,b:e,c:r,d:t}})),Hv=o((function(n,e,r,t){return{$:5,a:n,b:e,c:r,d:t}})),_v=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),Av=function(n){switch(n.$){case 0:return n;case 1:return s(_v,n.a,n.b,n.c,1);case 2:return s(Sv,n.a,n.b,n.c,1);case 3:return s(Nv,n.a,n.b,n.c,1);case 4:return s($v,n.a,n.b,n.c,1);case 5:return s(Hv,n.a,n.b,n.c,1);case 6:return s(Dv,n.a,n.b,n.c,1);case 7:return s(zv,n.a,n.b,n.c,1);case 8:case 9:default:return n}},Gv={$:0},Rv=l((function(n,e,r,t,o,a,i,c){for(;;){if(!c.b)return{d4:e,d5:t,d6:a,d7:n,d8:r,d9:o};var l=c.b,f=i(c.a);n=u(Ad,f.d7,n),e=u(Hd,f.d4,e),r=u(Ad,f.d8,r),t=u(Hd,f.d5,t),o=u(Ad,f.d9,o),a=u(Hd,f.d6,a),i=i,c=l}})),kv=t((function(n,e,r){var t=n(e);return b(Rv,t.d7,t.d4,t.d8,t.d5,t.d9,t.d6,n,r)})),Fv=r((function(n,e){return 1>T(e,n)})),Bv=function(n){return u(Fv,n.d4,n.d7)&&u(Fv,n.d5,n.d8)&&u(Fv,n.d6,n.d9)?n:{d4:u(Hd,n.d7,n.d4),d5:u(Hd,n.d8,n.d5),d6:u(Hd,n.d9,n.d6),d7:u(Ad,n.d7,n.d4),d8:u(Ad,n.d8,n.d5),d9:u(Ad,n.d9,n.d6)}},Vv=function(n){return n},Ev=function(n){var e=n.a,r=n.b,t=n.c,o=Ju(e),a=Qu(e),i=nf(e),c=Ju(r),l=Qu(r),f=nf(r),s=Ju(t),d=Qu(t),v=nf(t);return Bv({d4:u(Hd,o,u(Hd,c,s)),d5:u(Hd,a,u(Hd,l,d)),d6:u(Hd,i,u(Hd,f,v)),d7:u(Ad,o,u(Ad,c,s)),d8:u(Ad,a,u(Ad,l,d)),d9:u(Ad,i,u(Ad,f,v))})},jv=function(n){return new Float64Array([n.bG,n.bH,n.a8])},Iv=function(n){return jv(n)},Uv=function(n){return jv(n)},Wv=r((function(n,e){var r=n,t=e,o=u(dt,Mc(t.bG),u(dt,Mc(t.bH),Mc(t.a8)));if(o){var a=t.a8/o,i=t.bH/o,c=t.bG/o,l=Pu(c*c+i*i+a*a);return{bG:r*c/l,bH:r*i/l,a8:r*a/l}}return Du}))(1),Yv=t((function(n,e,r){return Wv(u(Mu,u(yu,e,r),u(yu,n,e)))})),Ov=function(n){var e=n.a,r=n.b,t=n.c,o=Uv(f(Yv,e,r,t));return w({p:o,ej:Iv(e)},{p:o,ej:Iv(r)},{p:o,ej:Iv(t)})},qv=r((function(n,e){return{$:2,a:n,b:e}}))({dt:3,dE:0,eb:4}),Xv=t((function(n,e,r){return w(n,e,r)})),Zv=(Uo=u(Kf,-.5,1),Wo=u(Kf,-.5,1),Oo=f(Zu,Yo=u(Kf,-.5,1),Wo,Uo),Xo=f(Zu,Yo,Wo,qo=u(Kf,.5,1)),Ko=f(Zu,Yo,Zo=u(Kf,.5,1),Uo),Jo=f(Zu,Yo,Zo,qo),na=f(Zu,Qo=u(Kf,.5,1),Wo,Uo),ea=f(Zu,Qo,Zo,Uo),ra=f(Zu,Qo,Wo,qo),ta=f(Zu,Qo,Zo,qo),Av(function(n){if(n.b){var e=n.a,r=n.b,t=qv(u(Ut,Ov,n));return s(Sv,f(kv,Ev,e,r),n,t,0)}return Gv}(H([f(Xv,Oo,ea,na),f(Xv,Oo,Ko,ea),f(Xv,Xo,ra,ta),f(Xv,Xo,ta,Jo),f(Xv,na,ea,ta),f(Xv,na,ta,ra),f(Xv,Oo,Jo,Ko),f(Xv,Oo,Xo,Jo),f(Xv,Oo,na,ra),f(Xv,Oo,ra,Xo),f(Xv,Ko,ta,ea),f(Xv,Ko,Jo,ta)])))),Kv={$:0},Jv=t((function(n,e,r){return{$:1,a:n,b:e,c:r}})),Qv=t((function(n,e,r){var t=e.a,o=e.b,a=n(e.c),i=n(o),c=n(t),l=Uv(f(Yv,c,i,a)),s={p:l,ej:Iv(c)},d={p:l,ej:Iv(i)},v={p:l,ej:Iv(a)};return u(Lr,s,u(Lr,d,u(Lr,v,r)))})),nm=function(n){return n.F},em=o((function(n,e,r,t){return 1===e.$||1===r.$||1===t.$?Vr:Br(f(n,e.a,r.a,t.a))})),rm=4294967295>>>32-it,tm=h,om=t((function(n,e,r){for(;;){var t=u(tm,rm&e>>>n,r);if(t.$)return u(tm,rm&e,t.a);n-=it,e=e,r=t.a}})),am=r((function(n,e){var r=e.a,t=e.b,o=e.c,a=e.d;return 0>n||T(n,r)>-1?Vr:T(n,function(n){return n>>>5<<5}(r))>-1?Br(u(tm,rm&n,a)):Br(f(om,t,n,o))})),im=function(n){return n.ap},cm=r((function(n,e){return u(am,n,im(e))})),lm=t((function(n,e,r){for(;;){var t=u(mt,nt,n),o=t.a,a=t.b;if(0>T(st(o),nt))return u(gt,!0,{B:e,m:r,r:o});n=a,e=u(Lr,ut(o),e),r+=1}})),um=function(n){return n.b?f(lm,n,$,0):ct},fm=r((function(n,e){return!u(wc,u(ho,Lc,n),e)})),sm=r((function(n,e){return f(It,r((function(e,r){return n(e)?u(Lr,e,r):r})),$,e)})),dm=r((function(n,e){var r=function(n){return n.a}(n),t=function(n){var e=n.a,t=n.b,o=n.c;return e>=0&&0>T(e,r)&&t>=0&&0>T(t,r)&&o>=0&&0>T(o,r)};return u(fm,t,e)?{F:e,ap:n}:{F:u(sm,t,e),ap:n}})),vm=t((function(n,e,r){return{$:3,a:n,b:e,c:r}}))({dt:1,dE:3,eb:4}),mm=r((function(n,e){var r=e;return L(w(n.bG,n.bH,n.a8),w(r.bG,r.bH,r.a8))})),bm=r((function(n,e){n:for(;;){if(-2===e.$)return Vr;var r=e.c,t=e.d,o=e.e;switch(u(No,n,e.b)){case 0:n=n,e=t;continue n;case 1:return Br(r);default:n=n,e=o;continue n}}})),pm=f(Is,0,0,0),gm=i((function(n,e,r,t,o,a){var i=a.a,c=a.b,l=a.c,f=u(bm,u(mm,n,e),o);if(f.$){var s={p:pm,ej:Iv(e)},d={p:pm,ej:Iv(n)},v=l+1;return w(u(Lr,w(r,l,v),u(Lr,w(r,v,t),i)),u(Lr,s,u(Lr,d,c)),l+2)}return w(u(Lr,w(r,f.a,t),i),c,l)})),hm=a((function(n,e,r,t,o){for(;;){if(!r.b)return L(o.a,Jr(o.b));var a=r.a,i=a.a,c=a.b,l=r.b,u=n(a.c),f=n(c),s=n(i),d=t+2,m=t+1,b=n,p=e,g=l,h=t+3,x=v(gm,u,s,d,t,e,v(gm,f,u,m,d,e,v(gm,s,f,t,m,e,o)));n=b,e=p,r=g,t=h,o=x}})),xm=a((function(n,e,r,t,o){for(;;){if(!e.b)return w(t,o,r);var a=e.a,i=a.a,c=a.b,l=e.b,s=n(a.c),d=n(c),v=n(i),m=r+2,b=r+1,p=r,g=f(Do,u(mm,v,s),m,f(Do,u(mm,s,d),b,f(Do,u(mm,d,v),p,o)));n=n,e=l,r+=3,t=u(Lr,w(p,b,m),t),o=g}})),Pm=t((function(n,e,r){var o,a=u(Bo,(function(n){var e=n.a,r=n.b,a=n.c;return s(em,t((function(n,e,r){return w(n,e,r)})),u(cm,e,o),u(cm,r,o),u(cm,a,o))}),nm(o=r)),i=f(It,Qv(e),$,a),c=d(xm,e,a,0,$,To),l=d(hm,e,c.b,a,0,w(c.a,$,c.c)),v=l.a,m=l.b,b=m.b?N(i,m):i;return f(Jv,n,u(dm,um(b),v),u(vm,b,v))})),Cm=function(n){return{F:u(Ut,(function(n){return w(3*n,3*n+1,3*n+2)}),u(Xr,0,Yr(n)-1)),ap:um(Ds(u(Ut,(function(n){return H([n.a,n.b,n.c])}),n)))}},Mm=function(n){switch(n.$){case 0:return Kv;case 1:case 2:return f(Pm,n.a,At,Cm(u(Ut,Vv,n.b)));case 3:return f(Pm,n.a,At,n.b);case 4:case 5:case 6:case 7:return f(Pm,n.a,(function(n){return n.ej}),n.b);case 8:case 9:default:return Kv}},Tm=Mm(Zv),ym={$:0},Lm=ym,wm=r((function(n,e){return{$:1,a:n,b:e}})),Sm={src:"\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        void main () {\n            gl_FragColor = texture2D(colorTexture, interpolatedUv);\n        }\n    ",attributes:{},uniforms:{colorTexture:"bQ"}},Nm=function(n){return{$:5,a:n}},$m=Nm(1029),Dm=Nm(1028),zm=t((function(n,e,r){return 1===e?u(Lr,n?$m:Dm,r):r})),Hm={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute mediump vec2 uv;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedUv = uv;\n        }\n    ",attributes:{position:"ej",uv:"N"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},_m=o((function(n,e,r,t){return u(wm,e,l((function(e,o,a,i,c,l,u,s){return d(od,f(zm,i,t,s),Hm,Sm,r,{bQ:n,b:a,c:o,d:l,e:e,f:c})})))})),Am={src:"\n        precision lowp float;\n        \n        uniform lowp vec3 constantColor;\n        \n        void main () {\n            gl_FragColor = vec4(constantColor, 1.0);\n        }\n    ",attributes:{},uniforms:{constantColor:"aE"}},Gm={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{position:"ej"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Rm=o((function(n,e,r,t){return u(wm,e,l((function(e,o,a,i,c,l,u,s){return d(od,f(zm,i,t,s),Gm,Am,r,{aE:n,b:a,c:o,d:l,e:e,f:c})})))})),km=r((function(n,e){return{$:3,a:n,b:e}})),Fm={src:"\n        precision lowp float;\n        \n        uniform lowp vec3 constantColor;\n        uniform lowp float pointRadius;\n        uniform highp mat4 sceneProperties;\n        \n        float pointAlpha(float pointRadius, vec2 pointCoord) {\n            float pointSize = 2.0 * pointRadius;\n            float x = (pointSize + 2.0) * (pointCoord.s - 0.5);\n            float y = (pointSize + 2.0) * (pointCoord.t - 0.5);\n            float r = sqrt(x * x + y * y);\n            float innerRadius = pointRadius;\n            float outerRadius = pointRadius + 1.0;\n            if (r > outerRadius) {\n                return 0.0;\n            } else if (r > innerRadius) {\n                return outerRadius - r;\n            } else {\n                return 1.0;\n            }\n        }\n        \n        void main () {\n            float supersampling = sceneProperties[3][0];\n            float alpha = pointAlpha(pointRadius * supersampling, gl_PointCoord);\n            gl_FragColor = vec4(constantColor, alpha);\n        }\n    ",attributes:{},uniforms:{constantColor:"aE",pointRadius:"b3",sceneProperties:"e"}},Bm={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform lowp float pointRadius;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            float supersampling = sceneProperties[3][0];\n            gl_PointSize = 2.0 * pointRadius * supersampling + 2.0;\n        }\n    ",attributes:{position:"ej"},uniforms:{modelMatrix:"b",modelScale:"c",pointRadius:"b3",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Vm=o((function(n,e,r,t){return u(km,r,l((function(r,o,a,i,c,l,u,f){return d(od,f,Bm,Fm,t,{aE:n,b:a,c:o,b3:e,d:l,e:r,f:c})})))})),Em={src:"\n        precision mediump float;\n        \n        uniform mediump vec3 emissiveColor;\n        uniform highp mat4 sceneProperties;\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{emissiveColor:"aU",sceneProperties:"e"}},jm=Tr,Im=a((function(n,e,r,t,o){return u(wm,r,l((function(r,a,i,c,l,s,v,m){return d(od,f(zm,c,o,m),Gm,Em,t,{aU:u(jm,e,n),b:i,c:a,d:s,e:r,f:l})})))})),Um={src:"\n        precision mediump float;\n        \n        uniform mediump vec3 emissiveColor;\n        uniform lowp float pointRadius;\n        uniform highp mat4 sceneProperties;\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        float pointAlpha(float pointRadius, vec2 pointCoord) {\n            float pointSize = 2.0 * pointRadius;\n            float x = (pointSize + 2.0) * (pointCoord.s - 0.5);\n            float y = (pointSize + 2.0) * (pointCoord.t - 0.5);\n            float r = sqrt(x * x + y * y);\n            float innerRadius = pointRadius;\n            float outerRadius = pointRadius + 1.0;\n            if (r > outerRadius) {\n                return 0.0;\n            } else if (r > innerRadius) {\n                return outerRadius - r;\n            } else {\n                return 1.0;\n            }\n        }\n        \n        void main () {\n            vec4 color = toSrgb(emissiveColor, sceneProperties);\n            float supersampling = sceneProperties[3][0];\n            float alpha = pointAlpha(pointRadius * supersampling, gl_PointCoord);\n            gl_FragColor = vec4(color.rgb, alpha);\n        }\n    ",attributes:{},uniforms:{emissiveColor:"aU",pointRadius:"b3",sceneProperties:"e"}},Wm=a((function(n,e,r,t,o){return u(km,t,l((function(t,a,i,c,l,f,s,v){return d(od,v,Bm,Um,o,{aU:u(jm,e,n),b:i,c:a,b3:r,d:f,e:t,f:l})})))})),Ym={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 materialColor;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{enabledLights:"U",lights12:"bp",lights34:"bX",lights56:"bY",lights78:"bZ",materialColor:"cC",sceneProperties:"e",viewMatrix:"f"}},Om={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n        }\n    ",attributes:{normal:"p",position:"ej"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},qm=o((function(n,e,r,t){return u(wm,e,l((function(e,o,a,i,c,l,u,s){var v=u.a,m=u.b;return d(od,f(zm,i,t,s),Om,Ym,r,{U:m,bp:v.bp,bX:v.bX,bY:v.bY,bZ:v.bZ,cC:n,b:a,c:o,d:l,e:e,f:c})})))})),Xm={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D materialColorTexture;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n            vec3 materialColor = fromSrgb(texture2D(materialColorTexture, interpolatedUv).rgb);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{enabledLights:"U",lights12:"bp",lights34:"bX",lights56:"bY",lights78:"bZ",materialColorTexture:"cD",normalMapTexture:"a$",sceneProperties:"e",useNormalMap:"a6",viewMatrix:"f"}},Zm={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        attribute mediump vec2 uv;\n        attribute highp vec3 tangent;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getWorldTangent(vec3 modelTangent, vec4 modelScale, mat4 modelMatrix) {\n            return (modelMatrix * vec4(safeNormalize(modelScale.xyz * modelTangent), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = uv;\n            interpolatedTangent = getWorldTangent(tangent, modelScale, modelMatrix);\n        }\n    ",attributes:{normal:"p",position:"ej",tangent:"ex",uv:"N"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Km=i((function(n,e,r,t,o,a){return u(wm,t,l((function(t,i,c,l,u,s,v,m){var b=v.a,p=v.b;return d(od,f(zm,l,a,m),Zm,Xm,o,{U:p,bp:b.bp,bX:b.bX,bY:b.bY,bZ:b.bZ,cD:n,b:c,c:i,a$:e,d:s,e:t,a6:r,f:u})})))})),Jm={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D baseColorTexture;\n        uniform lowp vec4 constantBaseColor;\n        uniform mediump sampler2D roughnessTexture;\n        uniform lowp vec2 constantRoughness;\n        uniform mediump sampler2D metallicTexture;\n        uniform lowp vec2 constantMetallic;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getFloatValue(sampler2D texture, vec2 uv, vec2 constantValue) {\n            if (constantValue.y == 1.0) {\n                return constantValue.x;\n            } else {\n                vec4 textureColor = texture2D(texture, uv);\n                return dot(textureColor, vec4(0.2126, 0.7152, 0.0722, 0.0));\n            }\n        }\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 baseColor = fromSrgb(texture2D(baseColorTexture, interpolatedUv).rgb) * (1.0 - constantBaseColor.w) + constantBaseColor.rgb * constantBaseColor.w;\n            float roughness = getFloatValue(roughnessTexture, interpolatedUv, constantRoughness);\n            float metallic = getFloatValue(metallicTexture, interpolatedUv, constantMetallic);\n        \n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{baseColorTexture:"cf",constantBaseColor:"cj",constantMetallic:"ck",constantRoughness:"cl",enabledLights:"U",lights12:"bp",lights34:"bX",lights56:"bY",lights78:"bZ",metallicTexture:"cG",normalMapTexture:"a$",roughnessTexture:"c1",sceneProperties:"e",useNormalMap:"a6",viewMatrix:"f"}},Qm={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 baseColor;\n        uniform lowp float roughness;\n        uniform lowp float metallic;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{baseColor:"ce",enabledLights:"U",lights12:"bp",lights34:"bX",lights56:"bY",lights78:"bZ",metallic:"cF",roughness:"c0",sceneProperties:"e",viewMatrix:"f"}},nb=i((function(n,e,r,t,o,a){return u(wm,t,l((function(t,i,c,l,u,s,v,m){var b=v.a,p=v.b;return d(od,f(zm,l,a,m),Om,Qm,o,{ce:n,U:p,bp:b.bp,bX:b.bX,bY:b.bY,bZ:b.bZ,cF:r,b:c,c:i,d:s,c0:e,e:t,f:u})})))})),eb=r((function(n,e){return{$:1,a:n,b:e}})),rb=r((function(n,e){return e.$?L(e.a.D,1):L(n,0)})),tb=s(Fs,0,0,0,0),ob=r((function(n,e){var r;return e.$?L(e.a.D,tb):L(n,s(Fs,Vd(r=e.a),Ed(r),jd(r),1))})),ab=r((function(n,e){var r,t=L(n,e);return t.a.$?u(eb,L(r=t.a.a.D,tb),u(rb,r,e)):t.b.$?u(eb,u(ob,r=t.b.a.D,n),u(rb,r,e)):{$:0,a:t.a.a}})),ib=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),cb=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),lb=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),ub=u(cd,0,0),fb=r((function(n,e){return e.$?L(e.a.D,ub):L(n,u(cd,e.a,1))})),sb=o((function(n,e,r,t){var o,a=s(lb,n,e,r,t);return a.a.$?s(cb,L(o=a.a.a.D,tb),u(fb,o,e),u(fb,o,r),u(rb,o,t)):a.b.$?s(cb,u(ob,o=a.b.a.D,n),L(o,ub),u(fb,o,r),u(rb,o,t)):a.c.$?s(cb,u(ob,o=a.c.a.D,n),u(fb,o,e),L(o,ub),u(rb,o,t)):a.d.$?s(cb,u(ob,o=a.d.a.D,n),u(fb,o,e),u(fb,o,r),L(o,1)):f(ib,a.a.a,a.b.a,a.c.a)})),db={src:"\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        uniform mediump float backlight;\n        uniform highp mat4 sceneProperties;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            vec3 emissiveColor = fromSrgb(texture2D(colorTexture, interpolatedUv).rgb) * backlight;\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{backlight:"cb",colorTexture:"bQ",sceneProperties:"e"}},vb=a((function(n,e,r,t,o){return u(wm,r,l((function(r,a,i,c,l,u,s,v){return d(od,f(zm,c,o,v),Hm,db,t,{cb:e,bQ:n,b:i,c:a,d:u,e:r,f:l})})))})),mb={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        attribute mediump vec2 uv;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = uv;\n            interpolatedTangent = vec3(0.0, 0.0, 0.0);\n        }\n    ",attributes:{normal:"p",position:"ej",uv:"N"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},bb=o((function(n,e,r,t){return u(wm,e,l((function(e,o,a,i,c,l,u,s){var v=u.a,m=u.b;return d(od,f(zm,i,t,s),mb,Xm,r,{U:m,bp:v.bp,bX:v.bX,bY:v.bY,bZ:v.bZ,cD:n,b:a,c:o,a$:n,d:l,e:e,a6:0,f:c})})))})),pb=function(n){return e(9,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return n(e,r,t,o,a,i,c,l,u)}}}}}}}}}))}((function(n,e,r,t,o,a,i,c,s){return u(wm,i,l((function(i,l,u,v,m,b,p,g){var h=p.a,x=p.b;return d(od,f(zm,v,s,g),mb,Jm,c,{cf:n,cj:e,ck:a,cl:t,U:x,bp:h.bp,bX:h.bX,bY:h.bY,bZ:h.bZ,cG:o,b:u,c:l,a$:n,d:b,c1:r,e:i,a6:0,f:m})})))})),gb=t((function(n,e,r){return r>.5?e+(1-r)*(n-e):n+r*(e-n)})),hb=function(n){return f(Zu,function(n){return f(gb,n.d7,n.d4,.5)}(n),function(n){return f(gb,n.d8,n.d5,.5)}(n),function(n){return f(gb,n.d9,n.d6,.5)}(n))},xb=function(n){var e=wd(n),r=e.a,t=e.b,o=e.c;return{eP:hb(n),e0:r/2,e1:t/2,e2:o/2}},Pb=r((function(n,e){switch(n.$){case 0:if(n.b.$){var r=n.b.a.D;switch(e.$){case 0:case 1:case 2:case 3:case 4:return Lm;case 5:case 6:case 7:return o=e.c,a=e.d,s(_m,r,xb(G=e.a),o,a);case 8:case 9:default:return Lm}}else{var t=n.b.a;switch(e.$){case 0:return Lm;case 1:var o=e.c,a=e.d;return s(Rm,t,xb(G=e.a),o,a);case 2:case 3:case 4:return o=e.c,a=e.d,s(Rm,t,xb(G=e.a),o,a);case 5:case 6:case 7:return o=e.c,a=e.d,s(Rm,t,xb(G=e.a),o,a);case 8:case 9:return o=e.c,s(Rm,t,xb(G=e.a),o,0);default:return o=e.d,s(Vm,t,e.b,xb(G=e.a),o)}}case 1:if(n.b.$)switch(r=n.b.a.D,c=n.c,e.$){case 0:case 1:case 2:case 3:case 4:return Lm;case 5:case 6:case 7:return o=e.c,a=e.d,d(vb,r,c,xb(G=e.a),o,a);case 8:case 9:default:return Lm}else{var i=n.b.a,c=n.c;switch(e.$){case 0:return Lm;case 1:case 2:case 3:case 4:case 5:case 6:case 7:return o=e.c,a=e.d,d(Im,i,c,xb(G=e.a),o,a);case 8:case 9:return o=e.c,d(Im,i,c,xb(G=e.a),o,0);default:return o=e.d,d(Wm,i,c,e.b,xb(G=e.a),o)}}case 2:var m=u(ab,n.b,n.c);if(m.$){var b=m.a.a,p=m.b,g=p.a,h=p.b;switch(e.$){case 0:case 1:case 2:case 3:case 4:case 5:return Lm;case 6:return o=e.c,P=e.d,s(bb,b,xb(G=e.a),o,P);case 7:return o=e.c,P=e.d,v(Km,b,g,h,xb(G=e.a),o,P);case 8:case 9:default:return Lm}}else{var x=m.a;switch(e.$){case 0:case 1:return Lm;case 2:o=e.c;var P=e.d;return s(qm,x,xb(G=e.a),o,P);case 3:return Lm;case 4:return o=e.c,P=e.d,s(qm,x,xb(G=e.a),o,P);case 5:return Lm;case 6:case 7:return o=e.c,P=e.d,s(qm,x,xb(G=e.a),o,P);case 8:case 9:default:return Lm}}default:var C=s(sb,n.b,n.c,n.d,n.e);if(C.$){var M=C.a,T=M.a,y=M.b,L=C.b,w=L.a,S=L.b,N=C.c,$=N.a,D=N.b,z=C.d;switch(g=z.a,h=z.b,e.$){case 0:case 1:case 2:case 3:case 4:case 5:return Lm;case 6:return o=e.c,a=e.d,function(n,e,r,t,o,a,i,c,l,u){return 9===n.a?n.f(e,r,t,o,a,i,c,l,u):n(e)(r)(t)(o)(a)(i)(c)(l)(u)}(pb,T,y,w,S,$,D,xb(G=e.a),o,a);case 7:return G=e.a,o=e.c,a=e.d,function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(s){return function(v){return function(m){return u(wm,s,l((function(l,u,s,b,p,g,h,x){var P=h.a,C=h.b;return d(od,f(zm,b,m,x),Zm,Jm,v,{cf:n,cj:e,ck:a,cl:t,U:C,bp:P.bp,bX:P.bX,bY:P.bY,bZ:P.bZ,cG:o,b:s,c:u,a$:i,d:g,c1:r,e:l,a6:c,f:p})})))}}}}}}}}}}}(T)(y)(w)(S)($)(D)(g)(h)(xb(G))(o)(a);case 8:case 9:default:return Lm}}else{var H=C.a,_=C.b,A=C.c;switch(e.$){case 0:case 1:return Lm;case 2:return o=e.c,a=e.d,v(nb,H,_,A,xb(G=e.a),o,a);case 3:return Lm;case 4:return o=e.c,a=e.d,v(nb,H,_,A,xb(G=e.a),o,a);case 5:return Lm;case 6:return o=e.c,a=e.d,v(nb,H,_,A,xb(G=e.a),o,a);case 7:var G;return o=e.c,a=e.d,v(nb,H,_,A,xb(G=e.a),o,a);case 8:case 9:default:return Lm}}}})),Cb=function(n){return n.bG},Mb=function(n){return n.bH},Tb=function(n){return n.a8},yb=function(n){var e=n,r=Tb(e.di),t=Mb(e.di),o=Cb(e.di),a=Tb(e.dh),i=Mb(e.dh),c=Cb(e.dh),l=Tb(e.dg),u=Mb(e.dg),f=Cb(e.dg);return f*i*r+u*a*o+l*c*t-l*i*o-u*c*r-f*a*t>0},Lb=r((function(n,e){return{$:5,a:n,b:e}})),wb=r((function(n,e){var r=e;switch(r.$){case 0:return Lm;case 5:var t=r.b;return u(Lb,u(Ws,r.a,n),t);case 1:case 3:case 2:default:return u(Lb,n,r)}})),Sb=r((function(n,e){return u(wb,function(n){var e=pf(n),r=Pf(n),t=xf(n),o=hf(n);return{dH:yb(n),s:o.bG,t:o.bH,u:o.a8,v:t.bG,w:t.bH,x:t.a8,y:r.bG,z:r.bH,A:r.a8,J:e.bG,K:e.bH,L:e.a8,b7:1}}(n),e)})),Nb=function(n){return{$:2,a:n}},$b=r((function(n,e){var r=n.a,t=n.b,o=n.c,a=e.eP;return{eP:{bG:r*a.bG,bH:t*a.bH,a8:o*a.a8},e0:r*e.e0,e1:t*e.e1,e2:o*e.e2}})),Db=function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){var f,s,d={bG:(s=t)[0],bH:s[1],a8:s[2],eD:s[3]},v=(f={eD:d.eD,bG:d.bG*n.a,bH:d.bH*n.b,a8:d.a8*n.c},new Float64Array([f.bG,f.bH,f.a8,f.eD]));return b(e,r,v,o,a,i,c,l,u)}}}}}}}}}},zb=r((function(n,e){switch(e.$){case 0:return ym;case 5:return u(Lb,e.a,u(zb,n,e.b));case 1:var r=e.b;return u(wm,u($b,n,e.a),u(Db,n,r));case 3:return e;case 2:return Nb(u(Db,n,r=e.a));default:var t=e.a;return Id(u(Ut,zb(n),t))}})),Hb=r((function(n,e){return u(zb,n,e)})),_b={src:"\n        precision lowp float;\n        \n        void main () {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        }\n    ",attributes:{},uniforms:{}},Ab=f(sd,{cB:0,cZ:0,df:15},{bi:bd,bx:ed,bI:bd,bJ:7683},{bi:bd,bx:ed,bI:bd,bJ:7682}),Gb=f(sd,{cB:0,cZ:0,df:15},{bi:bd,bx:ed,bI:bd,bJ:7682},{bi:bd,bx:ed,bI:bd,bJ:7683}),Rb=r((function(n,e){return u(Lr,n?Gb:Ab,e)})),kb={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 shadowVertexPosition(vec3 position, vec3 normal, mat4 shadowLight, vec4 modelScale, mat4 modelMatrix, mat4 viewMatrix, mat4 projectionMatrix, mat4 sceneProperties) {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            vec3 worldNormal = getWorldNormal(normal, vec4(modelScale.xyz, 1.0), modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 directionToLight = getDirectionToLight(worldPosition.xyz, xyz_type, rgb_parameter);\n            vec3 offset = vec3(0.0, 0.0, 0.0);\n            float sceneDiameter = sceneProperties[3][1];\n            if (dot(directionToLight, worldNormal) <= 0.0) {\n                offset = -sceneDiameter * directionToLight;\n            } else {\n                offset = -0.001 * sceneDiameter * directionToLight;\n            }\n            vec4 offsetPosition = worldPosition + vec4(offset, 0.0);\n            return projectionMatrix * (viewMatrix * offsetPosition);\n        }\n        \n        void main () {\n            gl_Position = shadowVertexPosition(\n                position,\n                normal,\n                shadowLight,\n                modelScale,\n                modelMatrix,\n                viewMatrix,\n                projectionMatrix,\n                sceneProperties\n            );\n        }\n    ",attributes:{normal:"p",position:"ej"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"b8",viewMatrix:"f"}},Fb=function(n){var e=function(n){if(n.$){var e=n.c;return Br(l((function(n,r,t,o,a,i,c,l){return d(od,u(Rb,o,l),kb,_b,e,{b:t,c:r,d:i,e:n,b8:c,f:a})})))}return Vr}(n);return e.$?Lm:Nb(e.a)},Bb=o((function(n,e,r,t){var o,a=u(Pb,r,Zv),i=(o=L(n,e)).a?o.b?Wd(H([a,Fb(Tm)])):a:o.b?Fb(Tm):Lm,c=bf(t),l=c.a,f=c.b,s=c.c;return u(Sb,mf(t),u(Hb,w(l,f,s),i))})),Vb=r((function(n,e){return s(Bb,!0,!0,n,e)})),Eb=function(n){return{$:0,a:n}},jb=r((function(n,e){return{$:0,a:n,b:e}})),Ib=function(n){return Rf(n)},Ub=r((function(n,e){return e/n})),Wb=function(n){var e=n;return{bG:Rf(e),bH:kf(e)}},Yb=r((function(n,e){var r=n.ej;return u(Lr,{p:Uv(n.p),ej:Iv(r)},e)})),Ob=c((function(n,e,r,t,o,a,i){for(;;){if(!i.b)return Bv({d4:e,d5:t,d6:a,d7:n,d8:r,d9:o});var c=i.a,l=i.b,f=jd(c.ej),s=Ed(c.ej),d=Vd(c.ej);n=u(_d,n,d),e=u(dt,e,d),r=u(_d,r,s),t=u(dt,t,s),o=u(_d,o,f),a=u(dt,a,f),i=l}})),qb=r((function(n,e){var r=jd(n.ej),t=Ed(n.ej),o=Vd(n.ej);return m(Ob,o,o,t,t,r,r,e)})),Xb=r((function(n,e){var r=n.dh,t=n.dg;return{bG:e.bG*t.bG+e.bH*r.bG,bH:e.bG*t.bH+e.bH*r.bH,a8:e.bG*t.a8+e.bH*r.a8}})),Zb=function(n){return kf(n)},Kb=function(n){return 6.283185307179586*n},Jb={cK:Gu,dg:ov,dh:qf},Qb=(oa=u(Ub,72,Kb(1)),aa=Xu,ia=Ou,la=f(Zu,0,0,ca=u(Kf,.5,1)),fa=f(Zu,0,0,ua=u(Kf,-.5,1)),Av(function(n){var e=f(Sr,Yb,$,im(n));if(e.b){var r=e.a,t=e.b,o=u(vm,e,nm(n));return s($v,u(qb,r,t),n,o,0)}return Gv}(Cm(Ds(u(Ut,(function(n){var e=u(Kf,n,oa),r=u(Xb,Jb,Wb(e)),t=u(Kf,Ib(e),1),o=u(Kf,Zb(e),1),a=f(Zu,t,o,ca),i=f(Zu,t,o,ua),c=u(Kf,u(pc,72,n+1),oa),l=u(Xb,Jb,Wb(c)),s=u(Kf,Ib(c),1),d=u(Kf,Zb(c),1),v=f(Zu,s,d,ua),m=f(Zu,s,d,ca);return H([w({p:ia,ej:fa},{p:ia,ej:v},{p:ia,ej:i}),w({p:r,ej:i},{p:l,ej:v},{p:l,ej:m}),w({p:r,ej:i},{p:l,ej:m},{p:r,ej:a}),w({p:aa,ej:la},{p:aa,ej:a},{p:aa,ej:m})])}),u(Xr,0,71))))))),np=Mm(Qb),ep=o((function(n,e,r,t){var o,a=function(n){var e=rs(n),r=Hu(e),t=r.a,o=r.b;return{cK:os(n),dg:t,dh:o,di:e}}(es(t)),i=u(Pb,r,Qb),c=(o=L(n,e)).a?o.b?Wd(H([i,Fb(np)])):i:o.b?Fb(np):Lm,l=is(t),f=as(t);return u(Sb,a,u(Hb,w(l,l,f),c))})),rp=r((function(n,e){return s(ep,!0,!0,n,e)})),tp={src:"\n        precision highp float;\n        \n        attribute lowp float triangleVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 triangleVertexPositions;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleVertex), triangleVertexPositions, position, normal);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{triangleVertex:"c8"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",triangleVertexPositions:"bD",viewMatrix:"f"}},op={src:"\n        precision highp float;\n        \n        attribute lowp float triangleVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 triangleVertexPositions;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleVertex), triangleVertexPositions, position, normal);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n        }\n    ",attributes:{triangleVertex:"c8"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",triangleVertexPositions:"bD",viewMatrix:"f"}},ap=function(n){var e=n.a,r=n.b,t=n.c;return Ys({dP:e.bG,dQ:r.bG,dR:t.bG,dS:0,dT:e.bH,dU:r.bH,dV:t.bH,dW:0,dX:e.a8,dY:r.a8,dZ:t.a8,d_:0,d$:0,d0:0,d1:0,d2:0})},ip=qv(H([w({c8:0},{c8:1},{c8:2})])),cp=r((function(n,e){var r=Ev(e),t=xb(r);switch(n.$){case 0:if(n.b.$)return Lm;var o=n.b.a;return u(wm,t,l((function(n,r,t,a,i,c,l,u){return d(od,f(zm,a,0,u),tp,Am,ip,{aE:o,b:t,c:r,d:c,e:n,bD:ap(e),f:i})})));case 1:if(n.b.$)return Lm;var a=n.b.a,i=n.c;return u(wm,t,l((function(n,r,t,o,c,l,s,v){return d(od,f(zm,o,0,v),tp,Em,ip,{aU:u(jm,i,a),b:t,c:r,d:l,e:n,bD:ap(e),f:c})})));case 2:var c=u(ab,n.b,n.c);if(c.$)return Lm;var v=c.a;return u(wm,t,l((function(n,r,t,o,a,i,c,l){var u=c.a,s=c.b;return d(od,f(zm,o,0,l),op,Ym,ip,{U:s,bp:u.bp,bX:u.bX,bY:u.bY,bZ:u.bZ,cC:v,b:t,c:r,d:i,e:n,bD:ap(e),f:a})})));default:var m=s(sb,n.b,n.c,n.d,n.e);if(m.$)return Lm;var b=m.a,p=m.b,g=m.c;return u(wm,t,l((function(n,r,t,o,a,i,c,l){var u=c.a,s=c.b;return d(od,f(zm,o,0,l),op,Qm,ip,{ce:b,U:s,bp:u.bp,bX:u.bX,bY:u.bY,bZ:u.bZ,cF:g,b:t,c:r,d:i,c0:p,e:n,bD:ap(e),f:a})})))}})),lp=(sa=H([{a5:u(cd,0,1)},{a5:u(cd,1,1)},{a5:u(cd,2,1)},{a5:u(cd,0,-1)},{a5:u(cd,1,-1)},{a5:u(cd,2,-1)}]),da=H([w(0,1,2),w(3,5,4),w(3,4,1),w(3,1,0),w(4,5,2),w(4,2,1),w(5,3,0),w(5,0,2)]),u(vm,sa,da)),up={src:"\n        precision highp float;\n        \n        attribute highp vec2 triangleShadowVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        uniform highp mat4 triangleVertexPositions;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 shadowVertexPosition(vec3 position, vec3 normal, mat4 shadowLight, vec4 modelScale, mat4 modelMatrix, mat4 viewMatrix, mat4 projectionMatrix, mat4 sceneProperties) {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            vec3 worldNormal = getWorldNormal(normal, vec4(modelScale.xyz, 1.0), modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 directionToLight = getDirectionToLight(worldPosition.xyz, xyz_type, rgb_parameter);\n            vec3 offset = vec3(0.0, 0.0, 0.0);\n            float sceneDiameter = sceneProperties[3][1];\n            if (dot(directionToLight, worldNormal) <= 0.0) {\n                offset = -sceneDiameter * directionToLight;\n            } else {\n                offset = -0.001 * sceneDiameter * directionToLight;\n            }\n            vec4 offsetPosition = worldPosition + vec4(offset, 0.0);\n            return projectionMatrix * (viewMatrix * offsetPosition);\n        }\n        \n        void main () {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleShadowVertex.x), triangleVertexPositions, position, normal);\n            normal *= triangleShadowVertex.y;\n            gl_Position = shadowVertexPosition(\n                position,\n                normal,\n                shadowLight,\n                modelScale,\n                modelMatrix,\n                viewMatrix,\n                projectionMatrix,\n                sceneProperties\n            );\n        }\n    ",attributes:{triangleShadowVertex:"a5"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"b8",triangleVertexPositions:"bD",viewMatrix:"f"}},fp=function(n){return Nb(l((function(e,r,t,o,a,i,c,l){return d(od,u(Rb,o,l),up,_b,lp,{b:t,c:r,d:i,e:e,b8:c,bD:ap(n),f:a})})))},sp=o((function(n,e,r,t){var o=u(cp,r,t),a=L(n,e);return a.a?a.b?Wd(H([o,fp(t)])):o:a.b?fp(t):Lm})),dp=r((function(n,e){return s(sp,!0,!0,n,e)})),vp=r((function(n,e){var r=nf(e),t=nf(n),o=Qu(e),a=Qu(n),i=Ju(e),c=Ju(n);return{d4:u(Hd,c,i),d5:u(Hd,a,o),d6:u(Hd,t,r),d7:u(Ad,c,i),d8:u(Ad,a,o),d9:u(Ad,t,r)}})),mp={src:"\n        precision highp float;\n        \n        attribute lowp float lineSegmentVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp vec3 lineSegmentStartPoint;\n        uniform highp vec3 lineSegmentEndPoint;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = (1.0 - lineSegmentVertex) * lineSegmentStartPoint + lineSegmentVertex * lineSegmentEndPoint;\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{lineSegmentVertex:"dO"},uniforms:{lineSegmentEndPoint:"dM",lineSegmentStartPoint:"dN",modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},bp=r((function(n,e){return{$:1,a:n,b:e}}))({dt:2,dE:0,eb:1})(H([L({dO:0},{dO:1})])),pp=r((function(n,e){var r,t=u(vp,(r=e).a,r.b),o=xb(t),a=e.a,i=e.b;switch(n.$){case 0:if(n.b.$)return Lm;var c=n.b.a;return u(wm,o,l((function(n,e,r,t,o,l,u,f){return d(od,f,mp,Am,bp,{aE:c,dM:Iv(i),dN:Iv(a),b:r,c:e,d:l,e:n,f:o})})));case 1:if(n.b.$)return Lm;c=n.b.a;var f=n.c;return u(wm,o,l((function(n,e,r,t,o,l,s,v){return d(od,v,mp,Em,bp,{aU:u(jm,f,c),dM:Iv(i),dN:Iv(a),b:r,c:e,d:l,e:n,f:o})})));case 2:default:return Lm}})),gp=r((function(n,e){return u(pp,n,e)})),hp=t((function(n,e,r){return{$:2,a:n,b:e,c:r}})),xp=function(n){return f(bv,0,1,n>.04045?u(Oi,(n+.055)/1.055,2.4):n/12.92)},Pp=function(n){return f(hp,0,Eb(function(n){var e=xc(n),r=e.cp,t=e.cg;return f(Is,xp(e.cY),xp(r),xp(t))}(n)),Eb(0))},Cp=r((function(n,e){return n/e})),Mp=a((function(n,e,r,t,o){for(;;){var a=t(e/r),i=u(Lr,a,o);if(C(e,n))return i;n=n,e-=1,r=r,t=t,o=i}})),Tp=r((function(n,e){return 1>n?$:d(Mp,0,n,n,e,$)})),yp=r((function(n,e){var r=n.ej,t=n.N,o=t.a,a=t.b;return u(Lr,{p:Uv(n.p),ej:Iv(r),N:u(cd,o,a)},e)})),Lp=r((function(n,e){var r=n,t=e,o=Rf(t);return{bG:o*Rf(r),bH:o*kf(r),a8:kf(t)}})),wp=(va=u(Xr,0,71),ma=u(Tp,72,u(gb,0,Kb(1))),ba=tt(36),pa=u(Xr,0,ba-1),ga=u(Tp,ba,u(gb,xu(90),xu(-90))),ha=um(Ds(u(Ut,(function(n){return u(Ut,(function(e){return{p:u(Lp,n,e),ej:f(Zu,u(Kf,Ib(e)*Ib(n),1),u(Kf,Ib(e)*Zb(n),1),u(Kf,Zb(e),1)),N:L(u(Cp,n,Kb(1)),u(Cp,u(Rd,xu(90),e),xu(180)))}}),ga)}),ma))),xa=r((function(n,e){return n*(ba+1)+e})),Pa=Ds(u(Ut,(function(n){return Ds(u(Ut,(function(e){var r=u(xa,n+1,e),t=u(xa,n,e),o=u(xa,n+1,e+1),a=u(xa,n,e+1);return H([w(a,o,r),w(a,r,t)])}),pa))}),va)),Av(function(n){var e=f(Sr,yp,$,im(n));if(e.b){var r=e.a,t=e.b,o=u(vm,e,nm(n));return s(Dv,u(qb,r,t),n,o,0)}return Gv}(u(dm,ha,Pa)))),Sp=r((function(n,e){for(;;){var r=u(pc,144,2*n+3),t=u(pc,144,2*n+2),o=2*n+1,a=2*n,i=u(Lr,w(144,a,t),u(Lr,w(a,r,t),u(Lr,w(a,o,r),u(Lr,w(o,145,r),e))));if(!n)return i;n-=1,e=i}})),Np=t((function(n,e,r){return r>.5?e+(1-r)*(n-e):n+r*(e-n)})),$p=(Ca=u(r((function(n,e){for(;;){var r=f(Np,0,6.283185307179586,n/72),t=u(Lr,{bL:r,b0:0,b6:1},u(Lr,{bL:r,b0:1,b6:1},e));if(!n)return t;n-=1,e=t}})),71,H([{bL:0,b0:0,b6:0},{bL:0,b0:1,b6:0}])),u(vm,Ca,u(Sp,71,$))),Dp={src:"\n        precision highp float;\n        \n        attribute highp float angle;\n        attribute highp float offsetScale;\n        attribute highp float radiusScale;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const lowp float kPerspectiveProjection = 0.0;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec3 perpendicularTo(vec3 d) {\n            float absX = abs(d.x);\n            float absY = abs(d.y);\n            float absZ = abs(d.z);\n            if (absX <= absY) {\n                if (absX <= absZ) {\n                    float scale = 1.0 / length(d.zy);\n                    return vec3(0.0, -d.z * scale, d.y * scale);\n                } else {\n                    float scale = 1.0 / length(d.xy);\n                    return vec3(-d.y * scale, d.x * scale, 0.0);\n                }\n            } else {\n                if (absY <= absZ) {\n                    float scale = 1.0 / length(d.xz);\n                    return vec3(d.z * scale, 0.0, -d.x * scale);\n                } else {\n                    float scale = 1.0 / length(d.xy);\n                    return vec3(-d.y * scale, d.x * scale, 0.0);\n                }\n            }\n        }\n        \n        void main () {\n            vec4 worldCenter = getWorldPosition(vec3(0.0, 0.0, 0.0), modelScale, modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 zDirection = getDirectionToLight(worldCenter.xyz, xyz_type, rgb_parameter);\n            vec3 xDirection = perpendicularTo(zDirection);\n            vec3 yDirection = cross(zDirection, xDirection);\n            float r = modelScale.x;\n            float adjustedRadius = r;\n            float zOffset = 0.0;\n            if (xyz_type.w == kPointLight) {\n                float distanceToLight = length(xyz_type.xyz - worldCenter.xyz);\n                float rSquared = r * r;\n                zOffset = rSquared / distanceToLight;\n                float zSquared = zOffset * zOffset;\n                adjustedRadius = sqrt(rSquared - zSquared) * radiusScale;\n            }\n            vec3 worldPosition =\n                worldCenter.xyz\n                    + zDirection * zOffset\n                    + xDirection * adjustedRadius * cos(angle)\n                    + yDirection * adjustedRadius * sin(angle);\n            vec3 directionToLight = getDirectionToLight(worldPosition, xyz_type, rgb_parameter);\n            float sceneDiameter = sceneProperties[3][1];\n            vec3 offset = -sceneDiameter * offsetScale * directionToLight;\n            vec4 offsetPosition = vec4(worldPosition + offset, 1.0);\n            gl_Position = projectionMatrix * (viewMatrix * offsetPosition);\n        }\n    ",attributes:{angle:"bL",offsetScale:"b0",radiusScale:"b6"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"b8",viewMatrix:"f"}},zp=function(){return Nb(l((function(n,e,r,t,o,a,i,c){return d(od,u(Rb,!0,c),Dp,_b,$p,{aE:f(Is,0,0,1),b:r,c:e,d:a,e:n,b8:i,f:o})})))},Hp=r((function(n,e){return u(wb,function(n){return{dH:!0,s:1,t:0,u:0,v:0,w:1,x:0,y:0,z:0,A:1,J:n.bG,K:n.bH,L:n.a8,b7:1}}(n),e)})),_p=o((function(n,e,r,t){var o,a=u(Pb,r,wp),i=(o=L(n,e)).a?o.b?Wd(H([a,zp()])):a:o.b?zp():Lm,c=$f(t);return u(Hp,u(yu,Gu,Nf(t)),u(Hb,w(c,c,c),i))})),Ap=r((function(n,e){return s(_p,!0,!0,n,e)})),Gp=function(n){switch(n.$){case 0:var e=n.b;return H([u(Vb,Pp(n.a),e)]);case 1:var r=n.b;return H([u(dp,Pp(n.a),r)]);case 3:var t=n.b;return H([u(Ap,Pp(n.a),t)]);case 2:var o=n.b;return H([u(rp,Pp(n.a),o)]);case 4:var a=n.b;return H([u(gp,(i=n.a,u(jb,0,Eb(function(n){var e=xc(n);return f(Is,e.cY,e.cp,e.cg)}(i)))),a)]);default:return u(zs,Gp,n.a)}var i},Rp=r((function(n,e){return function(n){var e,r=u(dv,n.fr,{ch:hv,eT:n.fy,cr:8e4}),t=mv({ch:gv,cr:2e4,eA:n.eA}),o=mv({ch:sv,cr:15e3,eA:Jf(n.eA)}),a=f(wv,r,t,o);return function(n){return u(fv,{eF:n.eF,dl:n.dl,eM:n.eM,dp:n.dp,ds:n.ds},H([{dw:n.dw,eY:n.eY,fb:n.fb,fB:n.fB,fG:n.fG}]))}({eF:(e=n.cm,{$:2,a:e}),dl:n.dl,eM:n.eM,dp:n.dp,ds:n.ds,dw:n.dw,eY:1.2*u(Oi,2,15),fb:a,fB:vv,fG:sv})}({dl:n.eJ,eM:n.eM,dp:.005,cm:n.cm,ds:L(qi(n.ad.de),qi(n.ad.cq)),dw:(r=e,u(zs,Gp,r)),fr:!0,fy:u(Lp,n.fx,n.fz),eA:gs});var r}));Ma={Main:{init:f(mu,r((function(n,e){return u(Rp,{eJ:hu,eM:Vu({dy:{bG:0,bH:15,a8:18},dz:{bG:0,bH:4,a8:0},eA:{bG:0,bH:1,a8:0}}),cm:n.cm,ad:n.ad,fx:-gu(135),fz:-gu(45)},u(ys,n,e))})),bu,(function(){return{}}))(u(Ct,(function(n){return St({cm:n})}),u(Mt,"devicePixelRatio",Tt)))(0)}},n.Elm?function n(e,r){for(var t in r)t in e?"init"==t?P(6):n(e[t],r[t]):e[t]=r[t]}(n.Elm,Ma):n.Elm=Ma}(n);const e=n.Elm.Main.init({node:document.getElementById("elm-node"),flags:{devicePixelRatio:window.devicePixelRatio}});function r(n){const e=[];for(let r=0;r<n.length;r++)e.push({identifier:n[r].identifier,pageX:n[r].pageX,pageY:n[r].pageY});return e}window.addEventListener("touchstart",(n=>{e.ports.touchStart.send(r(n.changedTouches))})),window.addEventListener("touchmove",(n=>{e.ports.touchMove.send(r(n.changedTouches))})),window.addEventListener("touchend",(n=>{e.ports.touchEnd.send(r(n.changedTouches))})),window.addEventListener("touchcancel",(n=>{e.ports.touchCancel.send(r(n.changedTouches))}))}();
//# sourceMappingURL=index.8ddac6d2.js.map
