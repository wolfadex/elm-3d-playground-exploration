!function(){var n={};!function(n){function e(n,e,r){return r.a=n,r.f=e,r}function r(n){return e(2,n,(function(e){return function(r){return n(e,r)}}))}function t(n){return e(3,n,(function(e){return function(r){return function(t){return n(e,r,t)}}}))}function o(n){return e(4,n,(function(e){return function(r){return function(t){return function(o){return n(e,r,t,o)}}}}))}function a(n){return e(5,n,(function(e){return function(r){return function(t){return function(o){return function(a){return n(e,r,t,o,a)}}}}}))}function i(n){return e(6,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return n(e,r,t,o,a,i)}}}}}}))}function c(n){return e(7,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return n(e,r,t,o,a,i,c)}}}}}}}))}function l(n){return e(8,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return n(e,r,t,o,a,i,c,l)}}}}}}}}))}function u(n,e,r){return 2===n.a?n.f(e,r):n(e)(r)}function f(n,e,r,t){return 3===n.a?n.f(e,r,t):n(e)(r)(t)}function s(n,e,r,t,o){return 4===n.a?n.f(e,r,t,o):n(e)(r)(t)(o)}function d(n,e,r,t,o,a){return 5===n.a?n.f(e,r,t,o,a):n(e)(r)(t)(o)(a)}function b(n,e,r,t,o,a,i){return 6===n.a?n.f(e,r,t,o,a,i):n(e)(r)(t)(o)(a)(i)}function v(n,e,r,t,o,a,i,c){return 7===n.a?n.f(e,r,t,o,a,i,c):n(e)(r)(t)(o)(a)(i)(c)}function m(n,e,r,t,o,a,i,c,l){return 8===n.a?n.f(e,r,t,o,a,i,c,l):n(e)(r)(t)(o)(a)(i)(c)(l)}var p=t((function(n,e,r){for(var t=Array(n),o=0;n>o;o++)t[o]=r(e+o);return t})),g=r((function(n,e){for(var r=Array(n),t=0;n>t&&e.b;t++)r[t]=e.a,e=e.b;return r.length=t,L(r,e)})),h=r((function(n,e){return e[n]})),x=t((function(n,e,r){for(var t=r.length-1;t>=0;t--)e=u(n,r[t],e);return e}));function C(n){throw Error("https://github.com/elm/core/blob/1.0.0/hints/"+n+".md")}function P(n,e){for(var r,t=[],o=M(n,e,0,t);o&&(r=t.pop());o=M(r.a,r.b,0,t));return o}function M(n,e,r,t){if(n===e)return!0;if("object"!=typeof n||null===n||null===e)return"function"==typeof n&&C(5),!1;if(r>100)return t.push(L(n,e)),!0;for(var o in 0>n.$&&(n=Nr(n),e=Nr(e)),n)if(!M(n[o],e[o],r+1,t))return!1;return!0}function T(n,e,r){if("object"!=typeof n)return n===e?0:e>n?-1:1;if(void 0===n.$)return(r=T(n.a,e.a))||(r=T(n.b,e.b))?r:T(n.c,e.c);for(;n.b&&e.b&&!(r=T(n.a,e.a));n=n.b,e=e.b);return r||(n.b?1:e.b?-1:0)}var y=r((function(n,e){var r=T(n,e);return 0>r?Dr:r?Hr:$r}));function L(n,e){return{a:n,b:e}}function w(n,e,r){return{a:n,b:e,c:r}}function S(n,e){var r={};for(var t in n)r[t]=n[t];for(var t in e)r[t]=e[t];return r}function N(n,e){if("string"==typeof n)return n+e;if(!n.b)return e;var r=H(n.a,e);n=n.b;for(var t=r;n.b;n=n.b)t=t.b=H(n.a,e);return r}var $={$:0};function H(n,e){return{$:1,a:n,b:e}}var D=r(H);function z(n){for(var e=$,r=n.length;r--;)e=H(n[r],e);return e}function I(n){for(var e=[];n.b;n=n.b)e.push(n.a);return e}var _=t((function(n,e,r){for(var t=[];e.b&&r.b;e=e.b,r=r.b)t.push(u(n,e.a,r.a));return z(t)})),G=r((function(n,e){return n*e})),A=r(Math.pow),k=r((function(n,e){var r=e%n;return 0===n?C(11):r>0&&0>n||0>r&&n>0?r+n:r})),R=Math.cos,F=Math.sin,V=Math.tan,B=Math.ceil,E=Math.floor,j=Math.round,W=Math.sqrt,O=Math.log,Y=isNaN,U=r((function(n,e){return n+e})),X=t((function(n,e,r){for(var t=r.length;t--;){var o=r[t],a=r.charCodeAt(t);56320>a||a>57343||(o=r[--t]+o),e=u(n,o,e)}return e})),q=r((function(n,e){return e.split(n)})),K=r((function(n,e){return e.join(n)})),Q=t((function(n,e,r){return r.slice(n,e)})),J=r((function(n,e){return 0===e.indexOf(n)}));function Z(n){return n+""}function nn(n){return{$:2,b:n}}var en=nn((function(n){return"number"!=typeof n?hn("an INT",n):n>-2147483647&&2147483647>n&&(0|n)===n?Ar(n):!isFinite(n)||n%1?hn("an INT",n):Ar(n)})),rn=nn((function(n){return"boolean"==typeof n?Ar(n):hn("a BOOL",n)})),tn=nn((function(n){return"number"==typeof n?Ar(n):hn("a FLOAT",n)})),on=(nn((function(n){return Ar(n)})),nn((function(n){return"string"==typeof n?Ar(n):n instanceof String?Ar(n+""):hn("a STRING",n)}))),an=r((function(n,e){return{$:6,d:n,b:e}}));function cn(n,e){return{$:9,f:n,g:e}}var ln=r((function(n,e){return{$:10,b:e,h:n}})),un=r((function(n,e){return cn(n,[e])})),fn=t((function(n,e,r){return cn(n,[e,r])})),sn=o((function(n,e,r,t){return cn(n,[e,r,t])})),dn=r((function(n,e){try{return vn(n,JSON.parse(e))}catch(n){return zr(u(Ir,"This is not valid JSON! "+n.message,e))}})),bn=r((function(n,e){return vn(n,e)}));function vn(n,e){switch(n.$){case 2:return n.b(e);case 5:return null===e?Ar(n.c):hn("null",e);case 3:return pn(e)?mn(n.b,e,z):hn("a LIST",e);case 4:return pn(e)?mn(n.b,e,gn):hn("an ARRAY",e);case 6:var r=n.d;if("object"!=typeof e||null===e||!(r in e))return hn("an OBJECT with a field named `"+r+"`",e);var t=vn(n.b,e[r]);return xt(t)?t:zr(u(_r,r,t.a));case 7:var o=n.e;return pn(e)?e.length>o?(t=vn(n.b,e[o]),xt(t)?t:zr(u(Gr,o,t.a))):hn("a LONGER array. Need index "+o+" but only see "+e.length+" entries",e):hn("an ARRAY",e);case 8:if("object"!=typeof e||null===e||pn(e))return hn("an OBJECT",e);var a=$;for(var i in e)if(e.hasOwnProperty(i)){if(t=vn(n.b,e[i]),!xt(t))return zr(u(_r,i,t.a));a=H(L(i,t.a),a)}return Ar(Qr(a));case 9:for(var c=n.f,l=n.g,f=0;l.length>f;f++){if(t=vn(l[f],e),!xt(t))return t;c=c(t.a)}return Ar(c);case 10:return t=vn(n.b,e),xt(t)?vn(n.h(t.a),e):t;case 11:for(var s=$,d=n.g;d.b;d=d.b){if(t=vn(d.a,e),xt(t))return t;s=H(t.a,s)}return zr(kr(Qr(s)));case 1:return zr(u(Ir,n.a,e));case 0:return Ar(n.a)}}function mn(n,e,r){for(var t=e.length,o=Array(t),a=0;t>a;a++){var i=vn(n,e[a]);if(!xt(i))return zr(u(Gr,a,i.a));o[a]=i.a}return Ar(r(o))}function pn(n){return Array.isArray(n)||"undefined"!=typeof FileList&&n instanceof FileList}function gn(n){return u(ht,n.length,(function(e){return n[e]}))}function hn(n,e){return zr(u(Ir,"Expecting "+n,e))}function xn(n,e){if(n===e)return!0;if(n.$!==e.$)return!1;switch(n.$){case 0:case 1:return n.a===e.a;case 2:return n.b===e.b;case 5:return n.c===e.c;case 3:case 4:case 8:return xn(n.b,e.b);case 6:return n.d===e.d&&xn(n.b,e.b);case 7:return n.e===e.e&&xn(n.b,e.b);case 9:return n.f===e.f&&Cn(n.g,e.g);case 10:return n.h===e.h&&xn(n.b,e.b);case 11:return Cn(n.g,e.g)}}function Cn(n,e){var r=n.length;if(r!==e.length)return!1;for(var t=0;r>t;t++)if(!xn(n[t],e[t]))return!1;return!0}var Pn=r((function(n,e){return JSON.stringify(e,null,n)+""}));function Mn(n){return n}var Tn=t((function(n,e,r){return r[n]=e,r}));function yn(n){return{$:0,a:n}}function Ln(n){return{$:2,b:n,c:null}}var wn=r((function(n,e){return{$:3,b:n,d:e}})),Sn=0;function Nn(n){var e={$:0,e:Sn++,f:n,g:null,h:[]};return _n(e),e}function $n(n){return Ln((function(e){e(yn(Nn(n)))}))}function Hn(n,e){n.h.push(e),_n(n)}var Dn=r((function(n,e){return Ln((function(r){Hn(n,e),r(yn(0))}))})),zn=!1,In=[];function _n(n){if(In.push(n),!zn){for(zn=!0;n=In.shift();)Gn(n);zn=!1}}function Gn(n){for(;n.f;){var e=n.f.$;if(0===e||1===e){for(;n.g&&n.g.$!==e;)n.g=n.g.i;if(!n.g)return;n.f=n.g.b(n.f.a),n.g=n.g.i}else{if(2===e)return void(n.f.c=n.f.b((function(e){n.f=e,_n(n)})));if(5===e){if(0===n.h.length)return;n.f=n.f.b(n.h.shift())}else n.g={$:3===e?0:1,b:n.f.b,i:n.g},n.f=n.f.d}}}var An={};function kn(n,e,r,t,o){return{b:n,c:e,d:r,e:t,f:o}}function Rn(n,e){var r={g:e,h:void 0},t=n.c,o=n.d,a=n.e,i=n.f;return r.h=Nn(u(wn,(function n(e){return u(wn,n,{$:5,b:function(n){var c=n.a;return 0===n.$?f(o,r,c,e):a&&i?s(t,r,c.i,c.j,e):f(t,r,a?c.i:c.j,e)}})}),n.b))}var Fn=r((function(n,e){return Ln((function(r){n.g(e),r(yn(0))}))})),Vn=r((function(n,e){return u(Dn,n.h,{$:0,a:e})}));function Bn(n){return function(e){return{$:1,k:n,l:e}}}function En(n){return{$:2,m:n}}var jn=r((function(n,e){return{$:3,n:n,o:e}})),Wn=[],On=!1;function Yn(n,e,r){if(Wn.push({p:n,q:e,r:r}),!On){On=!0;for(var t;t=Wn.shift();)Un(t.p,t.q,t.r);On=!1}}function Un(n,e,r){var t={};for(var o in Xn(!0,e,t,null),Xn(!1,r,t,null),n)Hn(n[o],{$:"fx",a:t[o]||{i:$,j:$}})}function Xn(n,e,r,t){switch(e.$){case 1:var o=e.k,a=function(n,e,r,t){return u(n?An[e].e:An[e].f,(function(n){for(var e=r;e;e=e.t)n=e.s(n);return n}),t)}(n,o,t,e.l);return void(r[o]=function(n,e,r){return r=r||{i:$,j:$},n?r.i=H(e,r.i):r.j=H(e,r.j),r}(n,a,r[o]));case 2:for(var i=e.m;i.b;i=i.b)Xn(n,i.a,r,t);return;case 3:return void Xn(n,e.o,r,{s:e.n,t:t})}}function qn(n,e){return function(n){An[n]&&C(3)}(n),An[n]={f:Kn,u:e,a:Qn},Bn(n)}var Kn=r((function(n,e){return function(r){return n(e(r))}}));function Qn(n,e){var r=$,o=An[n].u,a=yn(null);return An[n].b=a,An[n].c=t((function(n,e){return r=e,a})),{send:function(n){var t=u(bn,o,n);xt(t)||C(4);for(var a=t.a,i=r;i.b;i=i.b)e(i.a(a))}}}var Jn="undefined"!=typeof document?document:{};function Zn(n,e){n.appendChild(e)}function ne(n){return{$:0,a:n}}var ee,re=r((function(n,e){return r((function(r,t){for(var o=[],a=0;t.b;t=t.b){var i=t.a;a+=i.b||0,o.push(i)}return a+=o.length,{$:1,c:e,d:ue(r),e:o,f:n,b:a}}))}))(void 0),te=r((function(n,e){return r((function(r,t){for(var o=[],a=0;t.b;t=t.b){var i=t.a;a+=i.b.b||0,o.push(i)}return a+=o.length,{$:2,c:e,d:ue(r),e:o,f:n,b:a}}))}))(void 0),oe=r((function(n,e){return{$:4,j:n,k:e,b:1+(e.b||0)}})),ae=r((function(n,e){return{$:"a0",n:n,o:e}})),ie=r((function(n,e){return{$:"a1",n:n,o:e}})),ce=r((function(n,e){return{$:"a2",n:n,o:e}})),le=r((function(n,e){return{$:"a3",n:n,o:e}}));function ue(n){for(var e={};n.b;n=n.b){var r=n.a,t=r.$,o=r.n,a=r.o;if("a2"!==t){var i=e[t]||(e[t]={});"a3"===t&&"class"===o?fe(i,o,a):i[o]=a}else"className"===o?fe(e,o,a):e[o]=a}return e}function fe(n,e,r){var t=n[e];n[e]=t?t+" "+r:r}function se(n,e){var r=n.$;if(5===r)return se(n.k||(n.k=n.m()),e);if(0===r)return Jn.createTextNode(n.a);if(4===r){for(var t=n.k,o=n.j;4===t.$;)"object"!=typeof o?o=[o,t.j]:o.push(t.j),t=t.k;var a={j:o,p:e};return(i=se(t,a)).elm_event_node_ref=a,i}if(3===r)return de(i=n.h(n.g),e,n.d),i;var i=n.f?Jn.createElementNS(n.f,n.c):Jn.createElement(n.c);de(i,e,n.d);for(var c=n.e,l=0;c.length>l;l++)Zn(i,se(1===r?c[l]:c[l].b,e));return i}function de(n,e,r){for(var t in r){var o=r[t];"a1"===t?be(n,o):"a0"===t?pe(n,e,o):"a3"===t?ve(n,o):"a4"===t?me(n,o):("value"!==t&&"checked"!==t||n[t]!==o)&&(n[t]=o)}}function be(n,e){var r=n.style;for(var t in e)r[t]=e[t]}function ve(n,e){for(var r in e){var t=e[r];void 0!==t?n.setAttribute(r,t):n.removeAttribute(r)}}function me(n,e){for(var r in e){var t=e[r],o=t.f,a=t.o;void 0!==a?n.setAttributeNS(o,r,a):n.removeAttributeNS(o,r)}}function pe(n,e,r){var t=n.elmFs||(n.elmFs={});for(var o in r){var a=r[o],i=t[o];if(a){if(i){if(i.q.$===a.$){i.q=a;continue}n.removeEventListener(o,i)}i=ge(e,a),n.addEventListener(o,i,ee&&{passive:2>wt(a)}),t[o]=i}else n.removeEventListener(o,i),t[o]=void 0}}try{window.addEventListener("t",null,Object.defineProperty({},"passive",{get:function(){ee=!0}}))}catch(n){}function ge(n,e){function r(e){var t=r.q,o=vn(t.a,e);if(xt(o)){for(var a,i=wt(t),c=o.a,l=i?3>i?c.a:c.at:c,u=1==i?c.b:3==i&&c.c8,f=(u&&e.stopPropagation(),(2==i?c.b:3==i&&c.cX)&&e.preventDefault(),n);a=f.j;){if("function"==typeof a)l=a(l);else for(var s=a.length;s--;)l=a[s](l);f=f.p}f(l,u)}}return r.q=e,r}function he(n,e){return n.$==e.$&&xn(n.a,e.a)}function xe(n,e,r,t){var o={$:e,r:r,s:t,t:void 0,u:void 0};return n.push(o),o}function Ce(n,e,r,t){if(n!==e){var o=n.$,a=e.$;if(o!==a){if(1!==o||2!==a)return void xe(r,0,t,e);e=function(n){for(var e=n.e,r=e.length,t=Array(r),o=0;r>o;o++)t[o]=e[o].b;return{$:1,c:n.c,d:n.d,e:t,f:n.f,b:n.b}}(e),a=1}switch(a){case 5:for(var i=n.l,c=e.l,l=i.length,u=l===c.length;u&&l--;)u=i[l]===c[l];if(u)return void(e.k=n.k);e.k=e.m();var f=[];return Ce(n.k,e.k,f,0),void(f.length>0&&xe(r,1,t,f));case 4:for(var s=n.j,d=e.j,b=!1,v=n.k;4===v.$;)b=!0,"object"!=typeof s?s=[s,v.j]:s.push(v.j),v=v.k;for(var m=e.k;4===m.$;)b=!0,"object"!=typeof d?d=[d,m.j]:d.push(m.j),m=m.k;return b&&s.length!==d.length?void xe(r,0,t,e):((b?function(n,e){for(var r=0;n.length>r;r++)if(n[r]!==e[r])return!1;return!0}(s,d):s===d)||xe(r,2,t,d),void Ce(v,m,r,t+1));case 0:return void(n.a!==e.a&&xe(r,3,t,e.a));case 1:return void Pe(n,e,r,t,Te);case 2:return void Pe(n,e,r,t,ye);case 3:if(n.h!==e.h)return void xe(r,0,t,e);var p=Me(n.d,e.d);p&&xe(r,4,t,p);var g=e.i(n.g,e.g);return void(g&&xe(r,5,t,g))}}}function Pe(n,e,r,t,o){if(n.c===e.c&&n.f===e.f){var a=Me(n.d,e.d);a&&xe(r,4,t,a),o(n,e,r,t)}else xe(r,0,t,e)}function Me(n,e,r){var t;for(var o in n)if("a1"!==o&&"a0"!==o&&"a3"!==o&&"a4"!==o)if(o in e){var a=n[o],i=e[o];a===i&&"value"!==o&&"checked"!==o||"a0"===r&&he(a,i)||((t=t||{})[o]=i)}else(t=t||{})[o]=r?"a1"===r?"":"a0"===r||"a3"===r?void 0:{f:n[o].f,o:void 0}:"string"==typeof n[o]?"":null;else{var c=Me(n[o],e[o]||{},o);c&&((t=t||{})[o]=c)}for(var l in e)l in n||((t=t||{})[l]=e[l]);return t}function Te(n,e,r,t){var o=n.e,a=e.e,i=o.length,c=a.length;i>c?xe(r,6,t,{v:c,i:i-c}):c>i&&xe(r,7,t,{v:i,e:a});for(var l=c>i?i:c,u=0;l>u;u++){var f=o[u];Ce(f,a[u],r,++t),t+=f.b||0}}function ye(n,e,r,t){for(var o=[],a={},i=[],c=n.e,l=e.e,u=c.length,f=l.length,s=0,d=0,b=t;u>s&&f>d;){var v=(w=c[s]).a,m=(S=l[d]).a,p=w.b,g=S.b,h=void 0,x=void 0;if(v!==m){var C=c[s+1],P=l[d+1];if(C){var M=C.a,T=C.b;x=m===M}if(P){var y=P.a,L=P.b;h=v===y}if(h&&x)Ce(p,L,o,++b),we(a,o,v,g,d,i),b+=p.b||0,Se(a,o,v,T,++b),b+=T.b||0,s+=2,d+=2;else if(h)b++,we(a,o,m,g,d,i),Ce(p,L,o,b),b+=p.b||0,s+=1,d+=2;else if(x)Se(a,o,v,p,++b),b+=p.b||0,Ce(T,g,o,++b),b+=T.b||0,s+=2,d+=1;else{if(!C||M!==y)break;Se(a,o,v,p,++b),we(a,o,m,g,d,i),b+=p.b||0,Ce(T,L,o,++b),b+=T.b||0,s+=2,d+=2}}else Ce(p,g,o,++b),b+=p.b||0,s++,d++}for(;u>s;){var w;b++,Se(a,o,(w=c[s]).a,p=w.b,b),b+=p.b||0,s++}for(;f>d;){var S,N=N||[];we(a,o,(S=l[d]).a,S.b,void 0,N),d++}(o.length>0||i.length>0||N)&&xe(r,8,t,{w:o,x:i,y:N})}var Le="_elmW6BL";function we(n,e,r,t,o,a){var i=n[r];if(!i)return a.push({r:o,A:i={c:0,z:t,r:o,s:void 0}}),void(n[r]=i);if(1===i.c){a.push({r:o,A:i}),i.c=2;var c=[];return Ce(i.z,t,c,i.r),i.r=o,void(i.s.s={w:c,A:i})}we(n,e,r+Le,t,o,a)}function Se(n,e,r,t,o){var a=n[r];if(a){if(0===a.c){a.c=2;var i=[];return Ce(t,a.z,i,o),void xe(e,9,o,{w:i,A:a})}Se(n,e,r+Le,t,o)}else{var c=xe(e,9,o,void 0);n[r]={c:1,z:t,r:o,s:c}}}function Ne(n,e,r,t){$e(n,e,r,0,0,e.b,t)}function $e(n,e,r,t,o,a,i){for(var c=r[t],l=c.r;l===o;){var u=c.$;if(1===u)Ne(n,e.k,c.s,i);else if(8===u)c.t=n,c.u=i,(f=c.s.w).length>0&&$e(n,e,f,0,o,a,i);else if(9===u){c.t=n,c.u=i;var f,s=c.s;s&&(s.A.s=n,(f=s.w).length>0&&$e(n,e,f,0,o,a,i))}else c.t=n,c.u=i;if(!(c=r[++t])||(l=c.r)>a)return t}var d=e.$;if(4===d){for(var b=e.k;4===b.$;)b=b.k;return $e(n,b,r,t,o+1,a,n.elm_event_node_ref)}for(var v=e.e,m=n.childNodes,p=0;v.length>p;p++){o++;var g=1===d?v[p]:v[p].b,h=o+(g.b||0);if(!(o>l||l>h||(c=r[t=$e(m[p],g,r,t,o,h,i)])&&(l=c.r)<=a))return t;o=h}return t}function He(n,e){for(var r=0;e.length>r;r++){var t=e[r],o=t.t,a=De(o,t);o===n&&(n=a)}return n}function De(n,e){switch(e.$){case 0:return function(n,e,r){var t=n.parentNode,o=se(e,r);return o.elm_event_node_ref||(o.elm_event_node_ref=n.elm_event_node_ref),t&&o!==n&&t.replaceChild(o,n),o}(n,e.s,e.u);case 4:return de(n,e.u,e.s),n;case 3:return n.replaceData(0,n.length,e.s),n;case 1:return He(n,e.s);case 2:return n.elm_event_node_ref?n.elm_event_node_ref.j=e.s:n.elm_event_node_ref={j:e.s,p:e.u},n;case 6:for(var r=e.s,t=0;r.i>t;t++)n.removeChild(n.childNodes[r.v]);return n;case 7:for(var o=(r=e.s).e,a=n.childNodes[t=r.v];o.length>t;t++)n.insertBefore(se(o[t],e.u),a);return n;case 9:if(!(r=e.s))return n.parentNode.removeChild(n),n;var i=r.A;return void 0!==i.r&&n.parentNode.removeChild(n),i.s=He(n,r.w),n;case 8:return function(n,e){var r=e.s,t=function(n,e){if(n){for(var r=Jn.createDocumentFragment(),t=0;n.length>t;t++){var o=n[t].A;Zn(r,2===o.c?o.s:se(o.z,e.u))}return r}}(r.y,e);n=He(n,r.w);for(var o=r.x,a=0;o.length>a;a++){var i=o[a],c=i.A,l=2===c.c?c.s:se(c.z,e.u);n.insertBefore(l,n.childNodes[i.r])}return t&&Zn(n,t),n}(n,e);case 5:return e.s(n);default:C(10)}}function ze(n){if(3===n.nodeType)return ne(n.textContent);if(1!==n.nodeType)return ne("");for(var e=$,r=n.attributes,t=r.length;t--;){var o=r[t];e=H(u(le,o.name,o.value),e)}var a=n.tagName.toLowerCase(),i=$,c=n.childNodes;for(t=c.length;t--;)i=H(ze(c[t]),i);return f(re,a,e,i)}var Ie=o((function(n,e,r,t){return function(n,e,r,t,o,a){var i=u(bn,n,e?e.flags:void 0);xt(i)||C(2);var c={},l=r(i.a),f=l.a,s=a(b,f),d=function(n,e){var r;for(var t in An){var o=An[t];o.a&&((r=r||{})[t]=o.a(t,e)),n[t]=Rn(o,e)}return r}(c,b);function b(n,e){var r=u(t,n,f);s(f=r.a,e),Yn(c,r.b,o(f))}return Yn(c,l.b,o(f)),d?{ports:d}:{}}(e,t,n.fa,n.fH,n.fB,(function(e,r){var o=n.fJ,a=t.node,i=ze(a);return function(n,e){e(n);var r=0;function t(){r=1===r?0:(Ge(t),e(n),1)}return function(o,a){n=o,a?(e(n),2===r&&(r=1)):(0===r&&Ge(t),r=2)}}(r,(function(n){var r=o(n),t=function(n,e){var r=[];return Ce(n,e,r,0),r}(i,r);a=function(n,e,r,t){return 0===r.length?n:(Ne(n,e,r,t),He(n,r))}(a,i,t,e),i=r}))}))})),_e="undefined"!=typeof cancelAnimationFrame?cancelAnimationFrame:function(n){clearTimeout(n)},Ge="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:function(n){return setTimeout(n,1e3/60)},Ae={addEventListener:function(){},removeEventListener:function(){}},ke="undefined"!=typeof document?document:Ae,Re="undefined"!=typeof window?window:Ae,Fe=t((function(n,e,r){return $n(Ln((function(){function t(n){Nn(r(n))}return n.addEventListener(e,t,ee&&{passive:!0}),function(){n.removeEventListener(e,t)}})))})),Ve=r((function(n,e){var r=vn(n,e);return xt(r)?Rr(r.a):Fr})),Be=r((function(n,e){var r="g";n.fj&&(r+="m"),n.eN&&(r+="i");try{return Rr(RegExp(e,r))}catch(n){return Fr}})),Ee=t((function(n,e,r){for(var t,o=[],a=0,i=r,c=e.lastIndex,l=-1;a++<n&&(t=e.exec(i))&&l!=e.lastIndex;){for(var u=t.length-1,f=Array(u);u>0;){var d=t[u];f[--u]=d?Rr(d):Fr}o.push(s(Ni,t[0],t.index,a,z(f))),l=e.lastIndex}return e.lastIndex=c,z(o)})),je=0;function We(n,e){for(;e.b;e=e.b)n(e.a)}function Oe(n){for(var e=0;n.b;n=n.b)e++;return e}var Ye="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:function(n){setTimeout(n,1e3/60)},Ue=a((function(n,e,r,t,o){return{$:0,a:n,b:e,c:r,d:t,e:o}})),Xe=r((function(n,e){var r=n.blend;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.BLEND),r.enabled=!0),r.a===e.a&&r.d===e.d||(n.gl.blendEquationSeparate(e.a,e.d),r.a=e.a,r.d=e.d),r.b===e.b&&r.c===e.c&&r.e===e.e&&r.f===e.f||(n.gl.blendFuncSeparate(e.b,e.c,e.e,e.f),r.b=e.b,r.c=e.c,r.e=e.e,r.f=e.f),r.g===e.g&&r.h===e.h&&r.i===e.i&&r.j===e.j||(n.gl.blendColor(e.g,e.h,e.i,e.j),r.g=e.g,r.h=e.h,r.i=e.i,r.j=e.j)})),qe=r((function(n,e){var r=n.depthTest;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.DEPTH_TEST),r.enabled=!0),r.a!==e.a&&(n.gl.depthFunc(e.a),r.a=e.a),r.b!==e.b&&(n.gl.depthMask(e.b),r.b=e.b),r.c===e.c&&r.d===e.d||(n.gl.depthRange(e.c,e.d),r.c=e.c,r.d=e.d)})),Ke=r((function(n,e){var r=n.stencilTest;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.STENCIL_TEST),r.enabled=!0),r.d===e.d&&r.a===e.a&&r.b===e.b||(n.gl.stencilFuncSeparate(n.gl.FRONT,e.d,e.a,e.b),r.d=e.d),r.e===e.e&&r.f===e.f&&r.g===e.g||(n.gl.stencilOpSeparate(n.gl.FRONT,e.e,e.f,e.g),r.e=e.e,r.f=e.f,r.g=e.g),r.c!==e.c&&(n.gl.stencilMask(e.c),r.c=e.c),r.h===e.h&&r.a===e.a&&r.b===e.b||(n.gl.stencilFuncSeparate(n.gl.BACK,e.h,e.a,e.b),r.h=e.h,r.a=e.a,r.b=e.b),r.i===e.i&&r.j===e.j&&r.k===e.k||(n.gl.stencilOpSeparate(n.gl.BACK,e.i,e.j,e.k),r.i=e.i,r.j=e.j,r.k=e.k)})),Qe=r((function(n,e){var r=n.scissor;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.SCISSOR_TEST),r.enabled=!0),r.a===e.a&&r.b===e.b&&r.c===e.c&&r.d===e.d||(n.gl.scissor(e.a,e.b,e.c,e.d),r.a=e.a,r.b=e.b,r.c=e.c,r.d=e.d)})),Je=r((function(n,e){var r=n.colorMask;r.toggle=n.toggle,r.enabled=!0,r.a===e.a&&r.b===e.b&&r.c===e.c&&r.d===e.d||(n.gl.colorMask(e.a,e.b,e.c,e.d),r.a=e.a,r.b=e.b,r.c=e.c,r.d=e.d)})),Ze=r((function(n,e){var r=n.cullFace;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.CULL_FACE),r.enabled=!0),r.a!==e.a&&(n.gl.cullFace(e.a),r.a=e.a)})),nr=r((function(n,e){var r=n.polygonOffset;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.POLYGON_OFFSET_FILL),r.enabled=!0),r.a===e.a&&r.b===e.b||(n.gl.polygonOffset(e.a,e.b),r.a=e.a,r.b=e.b)})),er=r((function(n,e){var r=n.sampleCoverage;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.SAMPLE_COVERAGE),r.enabled=!0),r.a===e.a&&r.b===e.b||(n.gl.sampleCoverage(e.a,e.b),r.a=e.a,r.b=e.b)})),rr=function(n){n.scissor.enabled&&(n.gl.disable(n.gl.SCISSOR_TEST),n.scissor.enabled=!1)},tr=function(n){var e=n.colorMask;e.a&&e.b&&e.c&&e.d||(n.gl.colorMask(!0,!0,!0,!0),e.a=!0,e.b=!0,e.c=!0,e.d=!0)},or=["blend","depthTest","stencilTest","scissor","colorMask","cullFace","polygonOffset","sampleCoverage","sampleAlphaToCoverage"],ar=[function(n){n.blend.enabled&&(n.gl.disable(n.gl.BLEND),n.blend.enabled=!1)},function(n){n.depthTest.enabled&&(n.gl.disable(n.gl.DEPTH_TEST),n.depthTest.enabled=!1)},function(n){n.stencilTest.enabled&&(n.gl.disable(n.gl.STENCIL_TEST),n.stencilTest.enabled=!1)},rr,tr,function(n){n.gl.disable(n.gl.CULL_FACE)},function(n){n.gl.disable(n.gl.POLYGON_OFFSET_FILL)},function(n){n.gl.disable(n.gl.SAMPLE_COVERAGE)},function(n){n.gl.disable(n.gl.SAMPLE_ALPHA_TO_COVERAGE)}];function ir(n,e,r){var t=n.createShader(r);return n.shaderSource(t,"#extension GL_OES_standard_derivatives : enable\n"+e),n.compileShader(t),t}function cr(n,e){switch(e){case n.FLOAT:return{size:1,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC2:return{size:2,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC3:return{size:3,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC4:return{size:4,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_MAT4:return{size:4,arraySize:4,type:Float32Array,baseType:n.FLOAT};case n.INT:return{size:1,arraySize:1,type:Int32Array,baseType:n.INT}}}function lr(n,e,r,t){for(var o=r.a.dv,a=[],i=0;o>i;i++)a.push(String.fromCharCode(97+i));var c=cr(n,e.type);if(void 0===c)throw Error("No info available for: "+e.type);var l=0,u=c.size*c.arraySize*o,f=new c.type(Oe(r.b)*u);We((function(n){!function(n,e,r,t,i){var c;if(1===o)for(c=0;e>c;c++)n[r++]=1===e?t[i]:t[i][c];else a.forEach((function(o){for(c=0;e>c;c++)n[r++]=1===e?t[o][i]:t[o][i][c]}))}(f,c.size*c.arraySize,l,n,t[e.name]||e.name),l+=u}),r.b);var s=n.createBuffer();return n.bindBuffer(n.ARRAY_BUFFER,s),n.bufferData(n.ARRAY_BUFFER,f,n.STATIC_DRAW),s}function ur(n,e){return n+"#"+e}var fr=r((function(n,e){var r=n.f,t=r.gl;return t?(t.viewport(0,0,t.drawingBufferWidth,t.drawingBufferHeight),r.depthTest.b||(t.depthMask(!0),r.depthTest.b=!0),r.stencilTest.c!==r.STENCIL_WRITEMASK&&(t.stencilMask(r.STENCIL_WRITEMASK),r.stencilTest.c=r.STENCIL_WRITEMASK),rr(r),tr(r),t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT|t.STENCIL_BUFFER_BIT),We((function(e){if(e.d.b.b){var o,a,i,c,l;if(e.b.id&&e.c.id&&(o=ur(e.b.id,e.c.id),a=r.programs[o]),!a){var u,f;e.b.id?u=r.shaders[e.b.id]:e.b.id=je++,u||(u=ir(t,e.b.src,t.VERTEX_SHADER),r.shaders[e.b.id]=u),e.c.id?f=r.shaders[e.c.id]:e.c.id=je++,f||(f=ir(t,e.c.src,t.FRAGMENT_SHADER),r.shaders[e.c.id]=f);var s=function(n,e,r){var t=n.createProgram();if(n.attachShader(t,e),n.attachShader(t,r),n.linkProgram(t),!n.getProgramParameter(t,n.LINK_STATUS))throw"Link failed: "+n.getProgramInfoLog(t)+"\nvs info-log: "+n.getShaderInfoLog(e)+"\nfs info-log: "+n.getShaderInfoLog(r);return t}(t,u,f);(a={glProgram:s,attributes:Object.assign({},e.b.attributes,e.c.attributes),currentUniforms:{},activeAttributes:[],activeAttributeLocations:[]}).uniformSetters=function(n,e,r,t){var o=r.glProgram,a=r.currentUniforms,i=0,c=e.f;function l(e,r){var t=r.name,o=n.getUniformLocation(e,t);switch(r.type){case n.INT:return function(e){a[t]!==e&&(n.uniform1i(o,e),a[t]=e)};case n.FLOAT:return function(e){a[t]!==e&&(n.uniform1f(o,e),a[t]=e)};case n.FLOAT_VEC2:return function(e){a[t]!==e&&(n.uniform2f(o,e[0],e[1]),a[t]=e)};case n.FLOAT_VEC3:return function(e){a[t]!==e&&(n.uniform3f(o,e[0],e[1],e[2]),a[t]=e)};case n.FLOAT_VEC4:return function(e){a[t]!==e&&(n.uniform4f(o,e[0],e[1],e[2],e[3]),a[t]=e)};case n.FLOAT_MAT4:return function(e){a[t]!==e&&(n.uniformMatrix4fv(o,!1,new Float32Array(e)),a[t]=e)};case n.SAMPLER_2D:var l=i++;return function(e){n.activeTexture(n.TEXTURE0+l);var r=c.textures.get(e);r||(r=e.eR(n),c.textures.set(e,r)),n.bindTexture(n.TEXTURE_2D,r),a[t]!==e&&(n.uniform1i(o,l),a[t]=e)};case n.BOOL:return function(e){a[t]!==e&&(n.uniform1i(o,e),a[t]=e)};default:return function(){}}}for(var u={},f=n.getProgramParameter(o,n.ACTIVE_UNIFORMS),s=0;f>s;s++){var d=n.getActiveUniform(o,s);u[t[d.name]||d.name]=l(o,d)}return u}(t,n,a,Object.assign({},e.b.uniforms,e.c.uniforms));var d=t.getProgramParameter(s,t.ACTIVE_ATTRIBUTES);for(i=0;d>i;i++){var b=t.getActiveAttrib(s,i),v=t.getAttribLocation(s,b.name);a.activeAttributes.push(b),a.activeAttributeLocations.push(v)}o=ur(e.b.id,e.c.id),r.programs[o]=a}r.lastProgId!==o&&(t.useProgram(a.glProgram),r.lastProgId=o),c=a.uniformSetters,Object.keys(l=e.e).forEach((function(n){var e=c[n];e&&e(l[n])}));var m=r.buffers.get(e.d);for(m||(m=function(n,e){if(e.a.dF>0){var r=n.createBuffer(),t=function(n,e){var r,t=new Uint32Array(Oe(n)*e),o=0;return We((function(n){if(1===e)t[o++]=n;else for(r=0;e>r;r++)t[o++]=n[String.fromCharCode(97+r)]}),n),t}(e.c,e.a.dF);return n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,r),n.bufferData(n.ELEMENT_ARRAY_BUFFER,t,n.STATIC_DRAW),{numIndices:t.length,indexBuffer:r,buffers:{}}}return{numIndices:e.a.dv*Oe(e.b),indexBuffer:null,buffers:{}}}(t,e.d),r.buffers.set(e.d,m)),i=0;a.activeAttributes.length>i;i++){v=a.activeAttributeLocations[i],void 0===m.buffers[(b=a.activeAttributes[i]).name]&&(m.buffers[b.name]=lr(t,b,e.d,a.attributes)),t.bindBuffer(t.ARRAY_BUFFER,m.buffers[b.name]);var p=cr(t,b.type);if(1===p.arraySize)t.enableVertexAttribArray(v),t.vertexAttribPointer(v,p.size,p.baseType,!1,0,0);else for(var g=4*p.size,h=g*p.arraySize,x=0;p.arraySize>x;x++)t.enableVertexAttribArray(v+x),t.vertexAttribPointer(v+x,p.size,p.baseType,!1,h,g*x)}for(r.toggle=!r.toggle,We($d(r),e.a),i=0;9>i;i++){var C=r[or[i]];C.toggle!==r.toggle&&C.enabled&&(ar[i](r),C.enabled=!1,C.toggle=r.toggle)}m.indexBuffer?(t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,m.indexBuffer),t.drawElements(e.d.a.ea,m.numIndices,t.UNSIGNED_INT,0)):t.drawArrays(e.d.a.ea,0,m.numIndices)}}),n.g),e):e})),sr=t((function(n,e,r){return function(n,e,r,t){return{$:3,d:ue(n),g:e,h:r,i:t}}(e,{g:r,f:{},h:n},hr,xr)})),dr=r((function(n,e){n.contextAttributes.alpha=!0,n.contextAttributes.premultipliedAlpha=e.a})),br=r((function(n,e){n.contextAttributes.depth=!0,n.sceneSettings.push((function(n){n.clearDepth(e.a)}))})),vr=r((function(n,e){n.contextAttributes.stencil=!0,n.sceneSettings.push((function(n){n.clearStencil(e.a)}))})),mr=r((function(n){n.contextAttributes.antialias=!0})),pr=r((function(n,e){n.sceneSettings.push((function(n){n.clearColor(e.a,e.b,e.c,e.d)}))})),gr=r((function(n){n.contextAttributes.preserveDrawingBuffer=!0}));function hr(n){var e={contextAttributes:{alpha:!1,depth:!1,stencil:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1},sceneSettings:[]};We((function(n){return u(Nd,e,n)}),n.h);var r=Jn.createElement("canvas"),t=r.getContext&&(r.getContext("webgl",e.contextAttributes)||r.getContext("experimental-webgl",e.contextAttributes));return t&&"undefined"!=typeof WeakMap?(e.sceneSettings.forEach((function(n){n(t)})),t.getExtension("OES_standard_derivatives"),t.getExtension("OES_element_index_uint"),n.f.gl=t,n.f.toggle=!1,n.f.blend={enabled:!1,toggle:!1},n.f.depthTest={enabled:!1,toggle:!1},n.f.stencilTest={enabled:!1,toggle:!1},n.f.scissor={enabled:!1,toggle:!1},n.f.colorMask={enabled:!1,toggle:!1},n.f.cullFace={enabled:!1,toggle:!1},n.f.polygonOffset={enabled:!1,toggle:!1},n.f.sampleCoverage={enabled:!1,toggle:!1},n.f.sampleAlphaToCoverage={enabled:!1,toggle:!1},n.f.shaders=[],n.f.programs={},n.f.lastProgId=null,n.f.buffers=new WeakMap,n.f.textures=new WeakMap,n.f.STENCIL_WRITEMASK=t.getParameter(t.STENCIL_WRITEMASK),Ye((function(){return u(fr,n,r)}))):(r=Jn.createElement("div")).innerHTML='<a href="https://get.webgl.org/">Enable WebGL</a> to see this content!',r}function xr(n,e){return e.f=n.f,fr(e)}var Cr=r((function(n,e){return new Float64Array([n,e])}));new Float64Array(3),new Float64Array(3),new Float64Array(3);var Pr=t((function(n,e,r){return new Float64Array([n,e,r])})),Mr=r((function(n,e){return new Float64Array([e[0]*n,e[1]*n,e[2]*n])})),Tr=o((function(n,e,r,t){return new Float64Array([n,e,r,t])}));new Float64Array(16),new Float64Array(16),new Float64Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);var yr=D,Lr=x,wr=t((function(n,e,t){var o=t.c,a=t.d,i=r((function(e,r){return f(Lr,e.$?n:i,r,e.a)}));return f(Lr,i,f(Lr,n,e,a),o)})),Sr=t((function(n,e,r){for(;;){if(-2===r.$)return e;var t=r.d,o=n,a=f(n,r.b,r.c,f(Sr,n,e,r.e));n=o,e=a,r=t}})),Nr=function(n){return f(Sr,t((function(n,e,r){return u(yr,L(n,e),r)})),$,n)},$r=1,Hr=2,Dr=0,zr=function(n){return{$:1,a:n}},Ir=r((function(n,e){return{$:3,a:n,b:e}})),_r=r((function(n,e){return{$:0,a:n,b:e}})),Gr=r((function(n,e){return{$:1,a:n,b:e}})),Ar=function(n){return{$:0,a:n}},kr=function(n){return{$:2,a:n}},Rr=function(n){return{$:0,a:n}},Fr={$:1},Vr=Pn,Br=Z,Er=r((function(n,e){return u(K,n,I(e))})),jr=r((function(n,e){return z(u(q,n,e))})),Wr=t((function(n,e,r){for(;;){if(!r.b)return e;var t=r.b,o=n,a=u(n,r.a,e);n=o,e=a,r=t}})),Or=function(n){return f(Wr,r((function(n,e){return e+1})),0,n)},Yr=_,Ur=t((function(n,e,r){for(;;){if(T(n,e)>=1)return r;var t=n,o=e-1,a=u(yr,e,r);n=t,e=o,r=a}})),Xr=r((function(n,e){return f(Ur,n,e,$)})),qr=r((function(n,e){return f(Yr,n,u(Xr,0,Or(e)-1),e)})),Kr=function(n){var e=n.charCodeAt(0);return 55296>e||e>56319?e:1024*(e-55296)+n.charCodeAt(1)-56320+65536},Qr=function(n){return f(Wr,yr,$,n)},Jr=function(n){var e=n.charCodeAt(0);return isNaN(e)?Fr:Rr(55296>e||e>56319?L(n[0],n.slice(1)):L(n[0]+n[1],n.slice(2)))},Zr=32,nt=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),et=[],rt=B,tt=r((function(n,e){return O(e)/O(n)})),ot=function(n){return n},at=rt(u(tt,2,Zr)),it=s(nt,0,at,et,et),ct=p,lt=function(n){return{$:1,a:n}},ut=E,ft=function(n){return n.length},st=r((function(n,e){return T(n,e)>0?n:e})),dt=G,bt=g,vt=r((function(n,e){for(;;){var r=u(bt,Zr,n),t=r.b,o=u(yr,{$:0,a:r.a},e);if(!t.b)return Qr(o);n=t,e=o}})),mt=r((function(n,e){for(;;){var r=rt(e/Zr);if(1===r)return u(bt,Zr,n).a;n=u(vt,n,$),e=r}})),pt=r((function(n,e){if(e.m){var r=e.m*Zr,t=ut(u(tt,Zr,r-1)),o=n?Qr(e.A):e.A,a=u(mt,o,e.m);return s(nt,ft(e.q)+r,u(st,5,t*at),a,e.q)}return s(nt,ft(e.q),at,et,e.q)})),gt=a((function(n,e,r,t,o){for(;;){if(0>e)return u(pt,!1,{A:t,m:r/Zr|0,q:o});var a=lt(f(ct,Zr,e,n));n=n,e-=Zr,r=r,t=u(yr,a,t),o=o}})),ht=r((function(n,e){if(n>0){var r=n%Zr;return d(gt,e,n-r-Zr,n,$,f(ct,r,n-r,e))}return it})),xt=function(n){return!n.$},Ct=ln,Pt=an,Mt=tn,Tt=un,yt=fn,Lt=function(n){return{$:0,a:n}},wt=function(n){switch(n.$){case 0:return 0;case 1:return 1;case 2:return 2;default:return 3}},St=re("div"),Nt=function(n){return{$:1,a:n}},$t=function(n){return{$:7,a:n}},Ht=function(n){return{$:3,a:n}},Dt=t((function(n,e,r){return e(n(r))})),zt=function(n){return n},It=function(n){return n.length},_t=Q,Gt=r((function(n,e){return 1>n?e:f(_t,n,It(e),e)})),At=function(n){for(var e=0,r=n.charCodeAt(0),t=43==r||45==r?1:0,o=t;n.length>o;++o){var a=n.charCodeAt(o);if(48>a||a>57)return Fr;e=10*e+a-48}return o==t?Fr:Rr(45==r?-e:e)},kt=J,Rt=yn,Ft=Rt(0),Vt=o((function(n,e,r,t){if(t.b){var o=t.a,a=t.b;if(a.b){var i=a.a,c=a.b;if(c.b){var l=c.a,d=c.b;if(d.b){var b=d.b;return u(n,o,u(n,i,u(n,l,u(n,d.a,r>500?f(Wr,n,e,Qr(b)):s(Vt,n,e,r+1,b)))))}return u(n,o,u(n,i,u(n,l,e)))}return u(n,o,u(n,i,e))}return u(n,o,e)}return e})),Bt=t((function(n,e,r){return s(Vt,n,e,0,r)})),Et=r((function(n,e){return f(Bt,r((function(e,r){return u(yr,n(e),r)})),$,e)})),jt=wn,Wt=r((function(n,e){return u(jt,(function(e){return Rt(n(e))}),e)})),Ot=t((function(n,e,r){return u(jt,(function(e){return u(jt,(function(r){return Rt(u(n,e,r))}),r)}),e)})),Yt=function(n){return f(Bt,Ot(yr),Rt($),n)},Ut=Fn,Xt=r((function(n,e){var r=e;return $n(u(jt,Ut(n),r))}));An.Task=kn(Ft,t((function(n,e){return u(Wt,(function(){return 0}),Yt(u(Et,Xt(n),e)))})),t((function(){return Rt(0)})),r((function(n,e){return u(Wt,n,e)})));var qt=Bn("Task"),Kt=r((function(n,e){return qt(u(Wt,n,e))})),Qt=Ie,Jt=r((function(n,e){return{$:0,a:n,b:e}})),Zt=function(n){return{$:6,a:n}},no=r((function(n,e){return{$:4,a:n,b:e}})),eo=r((function(n,e){return{$:2,a:n,b:e}})),ro=En,to=jn,oo=function(n){return{$:1,a:n}},ao=t((function(n,e,r){return{cK:r,en:e,eu:n}})),io=Rt(f(ao,$,Fr,0)),co=function(n){return Ln((function(e){var r=n.f;2===r.$&&r.c&&r.c(),n.f=null,e(yn(0))}))},lo=Ln((function(n){n(yn(Date.now()))})),uo=Ln((function(n){var e=Ge((function(){n(yn(Date.now()))}));return function(){_e(e)}})),fo=Vn,so=$n,bo=t((function(n,e,r){var t=r.en,o=r.cK,a=L(t,e);return 1===a.a.$?a.b.b?u(jt,(function(n){return u(jt,(function(r){return Rt(f(ao,e,Rr(n),r))}),lo)}),so(u(jt,fo(n),uo))):io:a.b.b?Rt(f(ao,e,t,o)):u(jt,(function(){return io}),co(a.a.a))})),vo=zt,mo=t((function(n,e,r){var t=r.eu,o=r.cK,a=function(r){return u(Ut,n,(0,r.a)(r.$?e-o:vo(e)))};return u(jt,(function(n){return u(jt,(function(){return Rt(f(ao,t,Rr(n),e))}),Yt(u(Et,a,t)))}),so(u(jt,fo(n),uo)))})),po=t((function(n,e,r){return n(e(r))}));An["Browser.AnimationManager"]=kn(io,bo,mo,0,r((function(n,e){return e.$?oo(u(po,n,e.a)):{$:0,a:u(po,n,e.a)}})));var go=Bn("Browser.AnimationManager"),ho=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),xo=r((function(n,e){return{ef:e,eu:n}})),Co={$:-2},Po=Co,Mo=Rt(u(xo,$,Po)),To=function(n){return L(N(n.a?"w_":"d_",n.b),n)},yo=a((function(n,e,r,t,o){return{$:-1,a:n,b:e,c:r,d:t,e:o}})),Lo=a((function(n,e,r,t,o){if(-1!==o.$||o.a){if(-1!==t.$||t.a||-1!==t.d.$||t.d.a)return d(yo,n,e,r,t,o);var a=t.d;return i=t.e,d(yo,0,t.b,t.c,d(yo,1,a.b,a.c,a.d,a.e),d(yo,1,e,r,i,o))}var i,c=o.b,l=o.c,u=o.d,f=o.e;return-1!==t.$||t.a?d(yo,n,c,l,d(yo,0,e,r,t,u),f):d(yo,0,e,r,d(yo,1,t.b,t.c,t.d,i=t.e),d(yo,1,c,l,u,f))})),wo=y,So=t((function(n,e,r){if(-2===r.$)return d(yo,0,n,e,Co,Co);var t=r.a,o=r.b,a=r.c,i=r.d,c=r.e;switch(u(wo,n,o)){case 0:return d(Lo,t,o,a,f(So,n,e,i),c);case 1:return d(yo,t,o,e,i,c);default:return d(Lo,t,o,a,i,f(So,n,e,c))}})),No=t((function(n,e,r){var t=f(So,n,e,r);return-1!==t.$||t.a?t:d(yo,1,t.b,t.c,t.d,t.e)})),$o=function(n){return f(Wr,r((function(n,e){return f(No,n.a,n.b,e)})),Po,n)},Ho=t((function(n,e,r){for(;;){if(-2===r.$)return e;var t=r.e,o=n,a=f(n,r.b,r.c,f(Ho,n,e,r.d));n=o,e=a,r=t}})),Do=i((function(n,e,o,a,i,c){var l=f(Ho,t((function(r,t,a){n:for(;;){var i=a.a,c=a.b;if(i.b){var l=i.a,u=l.a,d=l.b,b=i.b;if(0>T(u,r)){r=r,t=t,a=L(b,f(n,u,d,c));continue n}return T(u,r)>0?L(i,f(o,r,t,c)):L(b,s(e,u,d,t,c))}return L(i,f(o,r,t,c))}})),L(Nr(a),c),i),u=l.a,d=l.b;return f(Wr,r((function(e,r){return f(n,e.a,e.b,r)})),d,u)})),zo=r((function(n,e){return{dz:e,dH:n}})),Io=t((function(n,e,r){return u(Wt,(function(n){return L(e,n)}),f(Fe,r.a?Re:ke,r.b,(function(r){return u(fo,n,u(zo,e,r))})))})),_o=r((function(n,e){return f(Ho,No,e,n)})),Go=t((function(n,e,r){var a=t((function(e,r,t){var o=t.c;return w(t.a,t.b,u(yr,f(Io,n,e,r),o))})),i=t((function(n,e,r){var t=r.b,o=r.c;return w(u(yr,e,r.a),t,o)})),c=o((function(n,e,r,t){var o=t.c;return w(t.a,f(No,n,e,t.b),o)})),l=u(Et,To,e),s=b(Do,i,c,a,r.ef,$o(l),w($,Po,$)),d=s.b,v=s.c;return u(jt,(function(n){return Rt(u(xo,l,u(_o,d,$o(n))))}),u(jt,(function(){return Yt(v)}),Yt(u(Et,co,s.a))))})),Ao=t((function(n,e,r){var t=n(e);return t.$?r:u(yr,t.a,r)})),ko=r((function(n,e){return f(Bt,Ao(n),$,e)}));An["Browser.Events"]=kn(Mo,Go,t((function(n,e,r){var t=e.dH,o=e.dz,a=u(ko,(function(n){var e=n.b.c;return P(n.a,t)?u(Ve,e,o):Fr}),r.eu);return u(jt,(function(){return Rt(r)}),Yt(u(Et,Ut(n),a)))})),0,r((function(n,e){return f(ho,e.a,e.b,u(Tt,n,e.c))})));var Ro,Fo,Vo,Bo,Eo,jo,Wo,Oo,Yo,Uo,Xo,qo,Ko,Qo,Jo,Zo,na,ea,ra,ta,oa,aa,ia,ca,la,ua,fa,sa,da,ba,va,ma,pa,ga,ha,xa,Ca,Pa=Bn("Browser.Events"),Ma=t((function(n,e,r){return Pa(f(ho,n,e,r))})),Ta=u(Ma,0,"click"),ya=u(Ma,0,"keydown"),La=u(Ma,0,"keyup"),wa=u(Ma,0,"mousedown"),Sa=u(Ma,0,"mousemove"),Na=u(Ma,0,"mouseup"),$a=en,Ha=rn,Da=r((function(n,e){return n(e?1:0)})),za=function(n){var e=void 0!==Jn.hidden?{e7:"hidden",eQ:"visibilitychange"}:void 0!==Jn.mozHidden?{e7:"mozHidden",eQ:"mozvisibilitychange"}:void 0!==Jn.msHidden?{e7:"msHidden",eQ:"msvisibilitychange"}:void 0!==Jn.webkitHidden?{e7:"webkitHidden",eQ:"webkitvisibilitychange"}:{e7:"hidden",eQ:"visibilitychange"};return f(Ma,0,e.eQ,u(Tt,Da(n),u(Pt,"target",u(Pt,e.e7,Ha))))},Ia=on,_a=function(n){return{$:3,b:n}},Ga=qn("touchCancel",_a(u(Ct,(function(n){return u(Ct,(function(e){return u(Ct,(function(r){return Lt({bl:r,cM:e,cN:n})}),u(Pt,"identifier",$a))}),u(Pt,"pageX",Mt))}),u(Pt,"pageY",Mt)))),Aa=qn("touchEnd",_a(u(Ct,(function(n){return u(Ct,(function(e){return u(Ct,(function(r){return Lt({bl:r,cM:e,cN:n})}),u(Pt,"identifier",$a))}),u(Pt,"pageX",Mt))}),u(Pt,"pageY",Mt)))),ka=qn("touchMove",_a(u(Ct,(function(n){return u(Ct,(function(e){return u(Ct,(function(r){return Lt({bl:r,cM:e,cN:n})}),u(Pt,"identifier",$a))}),u(Pt,"pageX",Mt))}),u(Pt,"pageY",Mt)))),Ra=qn("touchStart",_a(u(Ct,(function(n){return u(Ct,(function(e){return u(Ct,(function(r){return Lt({bl:r,cM:e,cN:n})}),u(Pt,"identifier",$a))}),u(Pt,"pageX",Mt))}),u(Pt,"pageY",Mt)))),Fa=ro(u(yr,(Ca=u(Dt,dt(.001),(function(n){return{$:6,a:n}})),go(oo(Ca))),u(Et,to($t),z([(Ro=eo,f(Ma,1,"resize",u(Pt,"target",f(yt,Ro,u(Pt,"innerWidth",$a),u(Pt,"innerHeight",$a))))),La(u(Tt,Jt(!1),u(Pt,"key",Ia))),ya(u(Tt,Jt(!0),u(Pt,"key",Ia))),za(Ht),Ta(Lt({$:5})),wa(Lt(Zt(!0))),Na(Lt(Zt(!1))),Sa(f(yt,no,u(Pt,"pageX",Mt),u(Pt,"pageY",Mt))),Ra((function(n){return{$:7,a:n}})),ka((function(n){return{$:8,a:n}})),Aa((function(n){return{$:9,a:n}})),Ga((function(n){return{$:10,a:n}}))])))),Va={$:1},Ba=function(n){return{$:2,a:n}},Ea=r((function(n,e){return{$:0,a:n,b:e}})),ja=function(n){return n.b.k.a},Wa=function(n){var e=n.b.D;return e.b?Rr(u(Ea,n.a,{k:e.a,D:e.b,p:N(n.b.p,z([n.b.k]))})):Fr},Oa=r((function(n,e){return S(e,{cj:n})})),Ya=r((function(n,e){return S(e,e.H.cj?{H:u(Oa,!1,e.H),a4:e.a4+n}:{a4:e.a4+n})})),Ua=r((function(n,e){return e.$?n:e.a})),Xa=t((function(n,e,r){var t=r.a,o=r.b;switch(t.$){case 1:return r;case 2:var a=t.a.c9;return(T(a+e,ja(r).a4)>0?u(Dt,Wa,Ua(u(Ea,Va,o))):zt)(u(Ea,Ba({c9:a+e}),o));default:var i=o.k,c=i.b,l=u(Ya,e,i.a);return u(Ea,t,{k:L(l,u(n,l,c)),D:$,p:N(o.p,z([o.k]))})}})),qa=r((function(n,e){n:for(;;){if(n>0){if(e.b){n-=1,e=e.b;continue n}return e}return e}})),Ka=t((function(n,e,r){n:for(;;){if(n>0){if(e.b){var t=e.a;n-=1,e=e.b,r=u(yr,t,r);continue n}return r}return r}})),Qa=r((function(n,e){return Qr(f(Ka,n,e,$))})),Ja=t((function(n,e,r){if(e>0){var t=L(e,r);n:for(;;){e:for(;;){if(!t.b.b)return r;if(!t.b.b.b){if(1===t.a)break n;break e}switch(t.a){case 1:break n;case 2:var o=t.b;return z([o.a,o.b.a]);case 3:if(t.b.b.b.b){var a=t.b,i=a.b;return z([a.a,i.a,i.b.a])}break e;default:if(t.b.b.b.b&&t.b.b.b.b.b){var c=t.b,l=c.b,s=l.b,d=s.b,b=d.b;return u(yr,c.a,u(yr,l.a,u(yr,s.a,u(yr,d.a,n>1e3?u(Qa,e-4,b):f(Ja,n+1,e-4,b)))))}break e}}return r}return z([t.b.a])}return $})),Za=r((function(n,e){return f(Ja,0,n,e)})),ni=r((function(n,e){var r=e.b.D,t=N(e.b.p,N(z([e.b.k]),r)),o=u(Za,n,t),a=u(qa,n,t);if(a.b)return u(Ea,Va,{k:a.a,D:a.b,p:o});var i=Qr(o);return i.b?u(Ea,Va,{k:i.a,D:$,p:Qr(i.b)}):e})),ei={$:0},ri=r((function(n,e){switch(n.$){case 1:return function(n){var e=n.b.p,r=n.b.D;return e.b?u(Ea,Va,{k:e.a,D:N(e.b,N(z([n.b.k]),r)),p:$}):n}(e);case 2:return u(Ua,e,function(n){var e=n.b.k,r=n.b.D,t=Qr(n.b.p);if(t.b){var o=t.b;return Rr(u(Ea,Va,{k:t.a,D:u(yr,e,r),p:Qr(o)}))}return Fr}(e));case 3:return u(Ea,Va,e.b);case 4:return function(n){return u(Ea,ei,n.b)}(e);case 5:return function(n){var e=n.b;return u(Ea,Ba({c9:ja(n).a4}),e)}(e);case 6:return u(Ua,e,Wa(e));case 7:return function(n){var e=n.b.p,r=n.b.k,t=Qr(n.b.D);if(t.b){var o=t.b;return u(Ea,Va,{k:t.a,D:$,p:N(e,N(z([r]),Qr(o)))})}return n}(e);default:return u(ni,n.a,e)}})),ti=r((function(n,e){var r=e.b;return L(n(e.a),r)})),oi=o((function(n,e,r,t){return{cj:t,aS:r,bG:n,bH:e}})),ai=Po,ii={cd:!1,aS:!1,co:!1,N:ai,ah:!1,a1:!1,c4:!1,c5:!1,b9:!1},ci=r((function(n,e){return S(e,{aS:n})})),li=t((function(n,e,r){return S(r,{bG:n,bH:e})})),ui=function(n){if(-1===n.$&&-1===n.d.$&&-1===n.e.$){if(-1!==n.e.d.$||n.e.d.a){var e=n.d,r=n.e;return i=r.b,c=r.c,t=r.d,f=r.e,d(yo,1,n.b,n.c,d(yo,0,e.b,e.c,e.d,e.e),d(yo,0,i,c,t,f))}var t,o=n.d,a=n.e,i=a.b,c=a.c,l=(t=a.d).d,u=t.e,f=a.e;return d(yo,0,t.b,t.c,d(yo,1,n.b,n.c,d(yo,0,o.b,o.c,o.d,o.e),l),d(yo,1,i,c,u,f))}return n},fi=function(n){if(-1===n.$&&-1===n.d.$&&-1===n.e.$){if(-1!==n.d.d.$||n.d.d.a){var e=n.d,r=n.e;return u=r.b,f=r.c,s=r.d,b=r.e,d(yo,1,t=n.b,o=n.c,d(yo,0,e.b,e.c,e.d,c=e.e),d(yo,0,u,f,s,b))}var t=n.b,o=n.c,a=n.d,i=a.d,c=a.e,l=n.e,u=l.b,f=l.c,s=l.d,b=l.e;return d(yo,0,a.b,a.c,d(yo,1,i.b,i.c,i.d,i.e),d(yo,1,t,o,c,d(yo,0,u,f,s,b)))}return n},si=c((function(n,e,r,t,o,a,i){if(-1!==a.$||a.a){n:for(;;){if(-1===i.$&&1===i.a){if(-1===i.d.$){if(1===i.d.a)return fi(e);break n}return fi(e)}break n}return e}return d(yo,r,a.b,a.c,a.d,d(yo,0,t,o,a.e,i))})),di=function(n){if(-1===n.$&&-1===n.d.$){var e=n.a,r=n.b,t=n.c,o=n.d,a=o.d,i=n.e;if(1===o.a){if(-1!==a.$||a.a){var c=ui(n);if(-1===c.$){var l=c.e;return d(Lo,c.a,c.b,c.c,di(c.d),l)}return Co}return d(yo,e,r,t,di(o),i)}return d(yo,e,r,t,di(o),i)}return Co},bi=r((function(n,e){if(-2===e.$)return Co;var r=e.a,t=e.b,o=e.c,a=e.d,i=e.e;if(0>T(n,t)){if(-1===a.$&&1===a.a){var c=a.d;if(-1!==c.$||c.a){var l=ui(e);if(-1===l.$){var f=l.e;return d(Lo,l.a,l.b,l.c,u(bi,n,l.d),f)}return Co}return d(yo,r,t,o,u(bi,n,a),i)}return d(yo,r,t,o,u(bi,n,a),i)}return u(vi,n,v(si,n,e,r,t,o,a,i))})),vi=r((function(n,e){if(-1===e.$){var r=e.a,t=e.b,o=e.c,a=e.d,i=e.e;if(P(n,t)){var c=function(n){for(;;){if(-1!==n.$||-1!==n.d.$)return n;n=n.d}}(i);return-1===c.$?d(Lo,r,c.b,c.c,a,di(i)):Co}return d(Lo,r,t,o,a,u(bi,n,i))}return Co})),mi=r((function(n,e){var r=u(bi,n,e);return-1!==r.$||r.a?r:d(yo,1,r.b,r.c,r.d,r.e)})),pi=r((function(n,e){return{$7:-e/2,cq:e,ah:-n/2,a1:n/2,bA:e/2,dg:n}})),gi=r((function(n,e){return{R:e,W:n}})),hi=f(yt,r((function(n,e){return L(n,e)})),u(Pt,"A1",Ia),u(Pt,"A2",Ia)),xi=sn,Ci=s(xi,t((function(n,e,r){return w(n,e,r)})),u(Pt,"A1",Mt),u(Pt,"A2",Mt),u(Pt,"A3",Mt)),Pi=f(yt,r((function(n,e){return L(n,e)})),u(Pt,"A1",Ia),u(Pt,"A2",Ci)),Mi=f(yt,gi,u(Pt,"floats",_a(Pi)),u(Pt,"colors",_a(hi))),Ti=dn,yi=r((function(n,e){return{R:e,aE:"",W:n,ar:""}})),Li=u(yi,$,$),wi=r((function(n,e){return e.$?Fr:n(e.a)})),Si=r((function(n,e){return e.$?zr(e.a):n(e.a)})),Ni=o((function(n,e,r,t){return{e9:e,fh:n,fn:r,fA:t}})),$i=Ee,Hi=r((function(n,e){return e.$?zr(n):Ar(e.a)})),Di=Be,zi=function(n){return n.b?Rr(n.a):Fr},Ii=r((function(n,e){return e.$?Fr:Rr(n(e.a))})),_i=r((function(n,e){return e.$?zr(e.a):Ar(n(e.a))})),Gi=r((function(n,e){return Kr(e)-Kr(n)})),Ai=t((function(n,e,r){var t=Kr(r);return 1>T(Kr(n),t)&&1>T(t,Kr(e))})),ki=r((function(n,e){var r=f(Ai,"0","9",e)?Ar(u(Gi,"0",e)):f(Ai,"a","z",e)?Ar(10+u(Gi,"a",e)):f(Ai,"A","Z",e)?Ar(10+u(Gi,"A",e)):zr({$:0,a:e});return u(Si,(function(r){return 0>T(r,n)?Ar(r):zr({$:1,a:e})}),r)})),Ri=r((function(n,e){var r=Jr(e);if(1===r.$)return Ar(0);var t=r.a,o=t.b;return u(Si,(function(e){return u(Si,(function(r){return Ar(e+r*n)}),u(Ri,n,o))}),u(ki,n,t.a))})),Fi=function(n){for(var e=n.length,r=Array(e),t=0;e>t;){var o=n.charCodeAt(t);55296>o||o>56319?(r[e-t]=n[t],t++):(r[e-t]=n[t+1],r[e-++t]=n[t-1],t++)}return r.join("")},Vi=r((function(n,e){return 2>n||n>36?zr({$:2,a:n}):u(Ri,n,Fi(e))})),Bi=Vi(16),Ei=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),ji=t((function(n,e,r){return s(Ei,n,e,r,1)})),Wi=o((function(n,e,r,t){return s(Ei,n,e,r,t)})),Oi=A,Yi=j,Ui=r((function(n,e){var r=u(Oi,10,n);return Yi(e*r)/r})),Xi=X,qi=function(n){return f(Xi,yr,$,n)},Ki=(Fo=function(n){var e=qi(n);if(e.b&&!e.b.b){var r=e.a;return I(z([r,r])).join("")}return n},u(Dt,(function(n){return n.toLowerCase()}),u(Dt,(function(n){return u(Ii,(function(e){return f($i,1,e,n)}),u(Di,{eN:!1,fj:!1},"^#?(?:(?:([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2}))|(?:([a-f\\d])([a-f\\d])([a-f\\d]))|(?:([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2}))|(?:([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d])))$"))}),u(Dt,wi(zi),u(Dt,Ii((function(n){return n.fA})),u(Dt,Ii(ko(zt)),u(Dt,Hi("Parsing hex regex failed"),Si((function(n){var e=u(Et,u(Dt,Fo,u(Dt,Bi,_i(ot))),n);n:for(;;){if(e.b&&!e.a.$&&e.b.b&&!e.b.a.$&&e.b.b.b&&!e.b.b.a.$){if(e.b.b.b.b){if(e.b.b.b.a.$||e.b.b.b.b.b)break n;var r=e.b,t=r.b;return Ar(s(Wi,e.a.a/255,r.a.a/255,t.a.a/255,u(Ui,2,t.b.a.a/255)))}var o=e.b;return Ar(f(ji,e.a.a/255,o.a.a/255,o.b.a.a/255))}break n}return zr("Parsing ints from hex failed")}))))))))),Qi=r((function(n,e){return L(e.a,n(e.b))})),Ji=s(Ei,1,1,1,1),Zi=r((function(n,e){return e.$?n:e.a})),nc=u(Dt,Ti(Mi),u(Dt,_i((function(n){return{R:u(Et,Qi(u(Dt,Ki,Zi(Ji))),n.R),aE:"",W:n.W,ar:""}})),Zi(Li))),ec=function(n){return f(Wr,r((function(n,e){return f(Tn,n.a,n.b,e)})),{},n)},rc=Mn,tc=function(n){var e=n.b;return ec(z([L("A1",rc(n.a)),L("A2",rc(e))]))},oc=Mn,ac=function(n){var e=n.b,r=n.c;return ec(z([L("A1",oc(n.a)),L("A2",oc(e)),L("A3",oc(r))]))},ic=function(n){var e=n.b;return ec(z([L("A1",rc(n.a)),L("A2",ac(e))]))},cc=r((function(n,e){return f(Wr,function(n){return r((function(e,r){return r.push(n(e)),r}))}(n),[],e)})),lc=U,uc=function(n){return u(lc,n,"")},fc=t((function(n,e,r){return n>0?f(fc,n>>1,N(e,e),1&n?N(r,e):r):r})),sc=r((function(n,e){return f(fc,n,e,"")})),dc=t((function(n,e,r){return N(u(sc,n-It(r),uc(e)),r)})),bc=function(n){return 0>n||n>1114111?"�":n>65535?String.fromCharCode(Math.floor((n-=65536)/1024)+55296,n%1024+56320):String.fromCharCode(n)},vc=k,mc=function(n){var e=function(n){return 10>n?Br(n):uc(bc(87+n))};return 16>n?e(n):N(mc(n/16|0),e(u(vc,16,n)))},pc=u(Dt,mc,u(dc,2,"0")),gc=function(n){return{aQ:n.d,ch:n.c,cp:n.b,cZ:n.a}},hc=function(n){var e=gc(n),r=e.cZ,t=e.cp,o=e.ch;return u(Er,"",u(yr,"#",u(Et,u(Dt,Yi,pc),z([255*r,255*t,255*o]))))},xc=u(Dt,(function(n){return{R:u(Et,Qi(hc),n.R),W:n.W}}),u(Dt,(function(n){return ec(z([L("floats",u(cc,ic,n.W)),L("colors",u(cc,tc,n.R))]))}),Vr(0))),Cc=function(n){return 0>n?-n:n},Pc=function(n){if(0===n.length||/[\sxbo]/.test(n))return Fr;var e=+n;return e==e?Rr(e):Fr},Mc=t((function(n,e,r){return u(Ua,NaN,Pc(u(n,e,r)))})),Tc=function(n){return!n},yc=r((function(n,e){for(;;){if(!e.b)return!1;var r=e.b;if(n(e.a))return!0;n=n,e=r}})),Lc=r((function(n,e){var r=u(yc,(function(n){return"0"!==n&&"."!==n}),qi(e));return N(n&&r?"-":"",e)})),wc=Z,Sc=function(n){var e=n.a,r=n.b;if("9"===e){var t=Jr(r);return 1===t.$?"01":u(lc,"0",Sc(t.a))}var o=Kr(e);return o>=48&&57>o?u(lc,bc(o+1),r):"0"},Nc=function(n){return n===1/0||n===-1/0},$c=Y,Hc=t((function(n,e,r){return N(r,u(sc,n-It(r),uc(e)))})),Dc=function(n){var e=u(jr,".",n);return e.b?L(e.a,e.b.b?e.b.a:"0"):L("0","0")},zc=t((function(n,e,r){if(Nc(r)||$c(r))return wc(r);var t=0>r,o=Dc(function(n){var e=u(jr,"e",wc(Cc(n)));if(e.b){if(e.b.b){var r=e.a,t=e.b.a,o=u(Ua,0,At(u(kt,"+",t)?u(Gt,1,t):t)),a=Dc(r),i=N(a.a,a.b),c=0>o?u(Ua,"0",u(Ii,(function(n){return n.a+"."+n.b}),u(Ii,ti(uc),Jr(N(u(sc,Cc(o),"0"),i))))):f(Hc,o+1,"0",i);return N(0>n?"-":"",c)}return N(0>n?"-":"",r=e.a)}return""}(Cc(r))),a=o.a,i=o.b,c=It(a)+e,l=N(u(sc,1-c,"0"),f(Hc,c,"0",N(a,i))),s=It(l),d=u(st,1,c),b=u(n,t,f(_t,d,s,l)),v=f(_t,0,d,l),m=b?Fi(u(Ua,"1",u(Ii,Sc,Jr(Fi(v))))):v,p=It(m),g="0"===m?m:e>0?0>T(e,It(i))?f(_t,0,p-e,m)+"."+f(_t,p-e,p,m):N(a+".",f(Hc,e,"0",i)):N(m,u(sc,Cc(e),"0"));return u(Lc,t,g)})),Ic=zc(r((function(n,e){var r,t=Jr(e);return 1!==t.$&&("5"===t.a.a?""!==t.a.b||!n:(r=Kr(t.a.a))>53&&n||r>=53&&!n)}))),_c=Mc(Ic),Gc=t((function(n,e,r){var t=u(tt,10,Cc(e-n));return u(_c,0>t?3:1>t?2:2>t?1:0,r)})),Ac=r((function(n,e){switch(n.$){case 2:var r=nc(e.ar);return S(r,{aE:r.aE,ar:r.ar});case 3:return S(e,{ar:n.a});case 4:return S(e,{aE:xc(e)});case 0:var t=n.a,o=n.b;return S(e,{W:u(Et,(function(n){var e=n.a,r=n.b,a=r.a,i=r.c;return P(e,t)?L(e,w(a,f(Gc,a,i,o),i)):n}),e.W)});default:return t=n.a,o=n.b,S(e,{R:u(Et,(function(n){var e=n.a;return P(e,t)?L(e,o):n}),e.R)})}})),kc=r((function(n,e){return f(No,n,0,e)})),Rc=r((function(n,e){return u(mi,n,e)})),Fc=t((function(n,e,r){var t=u(n?kc:Rc,e,r.N);switch(e){case" ":return S(r,{N:t,c5:n});case"Enter":return S(r,{co:n,N:t});case"Shift":return S(r,{N:t,c4:n});case"Backspace":return S(r,{cd:n,N:t});case"ArrowUp":return S(r,{N:t,b9:n});case"ArrowDown":return S(r,{aS:n,N:t});case"ArrowLeft":return S(r,{N:t,ah:n});case"ArrowRight":return S(r,{N:t,a1:n});default:return S(r,{N:t})}})),Vc=r((function(n,e){switch(n.$){case 1:var r=n.a.fK;return S(e,{ac:u(pi,r.dg,r.cq)});case 2:return S(e,{ac:u(pi,n.a,n.b)});case 3:return S(e,{bm:ii,H:s(oi,e.H.bG,e.H.bH,!1,!1)});case 0:return S(e,{bm:f(Fc,n.a,n.b,e.bm)});case 4:return S(e,{H:f(li,e.ac.ah+n.a,e.ac.bA-n.b,e.H)});case 5:return S(e,{H:u(Oa,!0,e.H)});case 6:return S(e,{H:u(ci,n.a,e.H)});case 7:case 8:return S(e,{ad:f(Wr,(function(n){return u(No,n.bl,{bG:e.ac.ah+n.cM,bH:e.ac.bA-n.cN})}),e.ad,n.a)});case 9:case 10:return S(e,{ad:f(Wr,(function(n){return mi(n.bl)}),e.ad,n.a)});default:return S(e,{aR:u(Ac,n.a,e.aR)})}})),Bc=r((function(n,e){var r=e.b;return u(Ea,e.a,S(r,{k:u(ti,Vc(n),r.k)}))})),Ec=t((function(n,e,r){var t=r.b,o=t.k;return u(Ea,r.a,S(t,{k:u(Qi,u(n,o.a,e),o)}))})),jc=o((function(n,e,r,t){switch(r.$){case 0:return t;case 1:return S(t,{a8:r.a});case 2:return S(t,{bf:!1});case 3:return S(t,{bf:!0});case 4:return S(t,{Q:f(Ec,e,r.a,t.Q)});case 5:return S(t,{Q:u(ri,r.a,t.Q)});case 7:return S(t,{Q:u(Bc,r.a,t.Q)});default:return S(t,{Q:f(Xa,n,r.a,t.Q)})}})),Wc=(xa=function(){return{eq:(n=ke.body,e=ke.documentElement,{dg:Math.max(n.scrollWidth,n.offsetWidth,e.scrollWidth,e.offsetWidth,e.clientWidth),cq:Math.max(n.scrollHeight,n.offsetHeight,e.scrollHeight,e.offsetHeight,e.clientHeight)}),fK:{bG:Re.pageXOffset,bH:Re.pageYOffset,dg:ke.documentElement.clientWidth,cq:ke.documentElement.clientHeight}};var n,e},Ln((function(n){Ge((function(){n(yn(xa()))}))}))),Oc=r((function(n,e){return{aR:e,cn:n.cn,bm:ii,H:s(oi,0,0,!1,!1),ac:u(pi,600,600),a4:0,ad:Po}})),Yc=r((function(n,e){return u(Ea,ei,{k:L(n,e(n)),D:$,p:$})})),Uc=En,Xc=Uc($),qc=function(n){return{$:11,a:n}},Kc=function(n){return{$:4,a:n}},Qc=function(n){return{$:5,a:n}},Jc={$:2},Zc={$:0},nl=function(n){return{$:1,a:n}},el={$:3},rl=r((function(n){return n})),tl=re("button"),ol=function(n){return n?"Level Editor":"Configurations"},al=function(n){return u(Ua,0,zi(u(ko,(function(e){return P(ol(e),n)?Rr(e):Fr}),z([0,1]))))},il=oe,cl=il,ll=ae,ul=r((function(n,e){return u(ll,n,{$:0,a:e})})),fl=r((function(n,e){return f(Bt,Pt,e,n)})),sl=u(fl,z(["target","value"]),Ia),dl=function(n){return u(ul,"click",Lt(n))},bl=re("option"),vl=re("select"),ml=ie,pl=ml,gl=ne,hl=gl,xl=r((function(n,e){return u(ce,n,rc(e))})),Cl=xl("value"),Pl=r((function(n,e){return{$:1,a:n,b:e}})),Ml=r((function(n,e){return{$:0,a:n,b:e}})),Tl=s(Ei,0,0,0,1),yl=u(tl,z([u(pl,"cursor","pointer"),dl({$:4})]),z([hl("Export Configurations as json")])),Ll=re("h3"),wl=re("p"),Sl=Mn,Nl=r((function(n,e){return u(ce,n,Sl(e))})),$l=Nl("readOnly"),Hl=re("textarea"),Dl=function(n){return u(St,$,z([u(Hl,z([$l(!0)]),z([hl(n.aE)]))]))},zl=function(n){return u(St,$,z([u(Ll,$,z([hl("Export Configurations")])),u(wl,$,z([yl])),u(wl,$,z([Dl(n)]))]))},Il=xl("htmlFor"),_l=re("hr"),Gl=xl("id"),Al=u(tl,z([u(pl,"cursor","pointer"),dl({$:2})]),z([hl("Import Configurations")])),kl=function(n){return{$:3,a:n}},Rl=function(n){return L(n,!0)},Fl=r((function(n,e){return u(ll,n,{$:1,a:e})})),Vl=function(n){return u(Fl,"input",u(Tt,Rl,u(Tt,n,sl)))},Bl=function(n){return u(St,$,z([u(Hl,z([Vl(kl)]),z([hl(n.ar)]))]))},El=function(n){return u(St,$,z([u(Ll,$,z([hl("Import Configurations")])),u(wl,$,z([Bl(n)])),u(wl,$,z([Al]))]))},jl=re("input"),Wl=re("label"),Ol=xl("max"),Yl=xl("min"),Ul=xl("name"),Xl=re("span"),ql=xl("type"),Kl=function(n){return{$:0,a:n}},Ql=function(n){return Or(n.b.p)},Jl=function(n){return u(jl,z([u(pl,"position","absolute"),ql("range"),u(pl,"width","100%"),Yl("0"),Ol(Br((e=n,r=e.b.D,Or(e.b.p)+1+Or(r)-1))),Cl(Br(Ql(n))),Vl(u(Dt,At,u(Dt,Ua(0),Kl)))]),$);var e,r},Zl=function(n){var e=n.b.k,r=n.b.D,t=u(Ua,e,zi(n.b.p)).a.a4,o=u(Ua,e,zi(Qr(r))).a.a4-t,a=ut(o/1);return u(St,z([u(pl,"position","absolute"),u(pl,"width","100%"),u(pl,"height","20px")]),u(Et,(function(n){return u(St,z([u(pl,"position","absolute"),u(pl,"background-color","yellow"),u(pl,"width","1px"),u(pl,"height","20px"),u(pl,"left",wc(100*n*1/o)+"%")]),$)}),u(Xr,0,a)))},nu={$:1},eu={$:7},ru={$:6},tu={$:2},ou={$:3},au={$:5},iu={$:4},cu=r((function(n,e){return u(tl,z([u(pl,"display","inline-block"),u(pl,"width","30px"),u(pl,"height","30px"),u(pl,"margin","2px"),u(pl,"padding","0px"),u(pl,"top","0px"),u(pl,"font-size","20px"),dl(n)]),z([hl(e)]))})),lu=function(n){return u(St,z([u(pl,"width","100%")]),z([(e=n,r=e.a,u(St,$,z([u(cu,nu,"⏮️"),u(cu,tu,"◀️"),1===r.$?u(cu,au,"▶️"):u(cu,ou,"⏸️"),r.$?u(cu,iu,"⏺️"):u(cu,ou,"⏹"),u(cu,ru,"⏯️"),u(cu,eu,"⏭️")]))),u(St,$,z([Zl(n),Jl(n)]))]));var e,r},uu=t((function(n,e,t){var o,a,i,c,l=t.Q.b.k.b,f=u(St,z([u(pl,"margin-left","0px")]),z([u(vl,z([(o=u(Dt,al,nl),u(ul,"change",u(Tt,o,sl))),Cl(ol(t.a8)),u(pl,"width","200px"),u(pl,"height","40px"),u(pl,"font-size","20px")]),u(Et,(function(n){return u(bl,z([Cl(ol(n))]),z([hl(ol(n))]))}),z([0,1])))])),s=r((function(n,e){return u(tl,z([u(pl,"font-size","30px"),u(pl,"width","40px"),u(pl,"height","40px"),dl(n)]),z([hl(e)]))})),d=ja(t.Q),b=t.a8?u(cl,Kc,u(e,d,l)):u(St,$,z([u(cl,Qc,lu(t.Q)),u(cl,u(Dt,qc,$t),(a=d.aR,i=function(n){var e=n.a,r=n.b,t=r.a,o=r.b,a=r.c;return u(St,z([u(pl,"margin-top","15px")]),z([u(St,$,z([u(Wl,z([Il(e)]),z([hl(e),hl(": "),u(Xl,z([u(pl,"font-family","monospace"),u(pl,"font-weight","bold")]),z([hl(wc(o))]))]))])),u(jl,z([ql("range"),Gl(e),Ul(e),Yl(wc(t)),Ol(wc(a)),Vl((function(n){return u(Ml,e,u(Ua,0,Pc(n)))})),u(xl,"step","any"),u(pl,"width","200px"),Cl(wc(o))]),$)]))},c=function(n){var e=n.a,r=n.b;return u(St,z([u(pl,"margin-top","15px")]),z([u(St,$,z([u(Wl,z([Il(e)]),z([hl(e)]))])),u(jl,z([ql("color"),u(pl,"width","200px"),u(pl,"height","30px"),Gl(e),Ul(e),Vl((function(n){return u(Pl,e,u(Zi,Tl,Ki(n)))})),Cl(hc(r))]),$)]))},u(St,z([u(pl,"margin-left","20px"),u(pl,"height","100%"),u(pl,"overflow","scroll")]),z([u(St,$,u(Et,i,a.W)),u(St,$,u(Et,c,a.R)),u(_l,$,$),zl(a),El(a)]))))])),v=u(St,z([u(pl,"position","fixed"),u(pl,"top","0px"),u(pl,"left","0px"),u(pl,"width",wc(250)+"px"),u(pl,"height",wc(d.ac.cq)+"px"),u(pl,"font-family",'-apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif'),u(pl,"font-size","16px")]),z(t.bf?[u(St,z([u(pl,"height","100px")]),z([u(s,Jc,"✕"),f])),u(St,z([u(pl,"height",wc(d.ac.cq-100)+"px")]),z([b]))]:[u(s,el,"≡")])),m=u(St,z([u(pl,"position","fixed"),u(pl,"top","0px"),u(pl,"left","0px"),u(pl,"width",wc(d.ac.dg)+"px"),u(pl,"height",wc(d.ac.cq)+"px"),u(pl,"font-size","16px")]),z([u(cl,rl(Zc),u(n,d,l))]));return u(St,z([u(pl,"touch-action","none"),u(pl,"user-select","none")]),z([m,v]))})),fu=i((function(n,e,t,o,a,i){return Qt({fa:function(n){return L({a8:0,bf:!1,Q:u(Yc,u(Oc,n,t),o),df:0},u(Kt,u(Dt,Nt,$t),Wc))},fB:function(n){return 1===n.df?u(to,$t,za(Ht)):Fa},fH:r((function(n,r){return L(s(jc,e,i,n,r),Xc)})),fJ:u(uu,n,a)})})),su=o((function(n,e,o,a){return b(fu,n,e,o,a,r((function(){return u(St,$,$)})),t((function(n,e,r){return r})))})),du={$:0},bu=r((function(n,e){return{$:0,a:n,b:e}})),vu=r((function(n,e){return{$:0,a:n,b:e}})),mu=z([u(bu,L(-1,1),u(vu,2,0)),u(bu,L(-1,0),u(vu,2,0)),u(bu,L(-1,-1),u(vu,2,0)),u(bu,L(0,-1),u(vu,2,0)),u(bu,L(0,1),u(vu,2,0)),u(bu,L(1,1),u(vu,2,0)),u(bu,L(1,0),u(vu,2,0)),u(bu,L(1,-1),u(vu,2,0))]),pu=yi,gu=pu,hu=3.141592653589793,xu=function(n){return n/255},Cu=t((function(n,e,r){return s(Ei,xu(n),xu(e),xu(r),1)})),Pu=u(gu,z([L("camera distance",w(3,10,20)),L("camera azimuth",w(-3.141592653589793,0,hu)),L("camera elevation",w(-1.5707963267948966,0,1.5707963267948966)),L("sunlight azimuth",w(-3.141592653589793,2,hu)),L("sunlight elevation",w(-3.141592653589793,-2,0)),L("cubes side length",w(.5,.9,1)),L("duration of rolling animation",w(.1,.25,1))]),z([L("color 1",f(Cu,244,88,67)),L("color 2",f(Cu,47,41,43)),L("board color",f(Cu,223,224,226)),L("background color",f(Cu,165,166,169))])),Mu=r((function(n,e){return u(Ua,0,zi(u(ko,(function(e){var r=e.b.b;return P(e.a,n)?Rr(r):Fr}),e.W)))})),Tu=r((function(n,e){return u(Mu,n,e.aR)})),yu=Tu,Lu=function(n){return hu*(n/180)},wu=function(n){return-n},Su=r((function(n,e){return{bG:n.bH*e.bI-n.bI*e.bH,bH:n.bI*e.bG-n.bG*e.bI,bI:n.bG*e.bH-n.bH*e.bG}})),Nu=function(n){return n.di},$u=function(n){return n.dj},Hu=function(n){return n.cL},Du=R,zu=F,Iu=t((function(n,e,r){var t=n,o=r,a=.5*e,i=Du(a),c=zu(a),l=t.eT,u=l.bG*c,f=i*u,s=u*u,d=l.bH*c,b=i*d,v=u*d,m=d*d,p=l.bI*c,g=i*p,h=u*p,x=d*p,C=p*p;return{bG:(1-2*(m+C))*o.bG+2*(v-g)*o.bH+2*(h+b)*o.bI,bH:2*(v+g)*o.bG+(1-2*(s+C))*o.bH+2*(x-f)*o.bI,bI:2*(h-b)*o.bG+2*(x+f)*o.bH+(1-2*(s+m))*o.bI}})),_u=t((function(n,e,r){var t=n,o=r,a=.5*e,i=Du(a),c=zu(a),l=t.cL,u=o.bG-l.bG,f=o.bH-l.bH,s=o.bI-l.bI,d=t.eT,b=d.bG*c,v=i*b,m=b*b,p=d.bH*c,g=i*p,h=b*p,x=p*p,C=d.bI*c,P=i*C,M=b*C,T=p*C,y=C*C;return{bG:l.bG+(1-2*(x+y))*u+2*(h-P)*f+2*(M+g)*s,bH:l.bH+2*(h+P)*u+(1-2*(m+y))*f+2*(T-v)*s,bI:l.bI+2*(M-g)*u+2*(T+v)*f+(1-2*(m+x))*s}})),Gu=function(n){return n.di},Au=function(n){return n.dj},ku=function(n){return n.dk},Ru=t((function(n,e,r){return{cL:f(_u,n,e,Hu(r)),di:f(Iu,n,e,Gu(r)),dj:f(Iu,n,e,Au(r)),dk:f(Iu,n,e,ku(r))}})),Fu=t((function(n,e,r){return f(Ru,n(r),e,r)})),Vu=function(n){return n.eT},Bu=r((function(n,e){return{bG:e.bG+n.bG,bH:e.bH+n.bH,bI:e.bI+n.bI}})),Eu=r((function(n,e){return{cL:u(Bu,n,Hu(e)),di:Gu(e),dj:Au(e),dk:ku(e)}})),ju=r((function(n,e){return{bG:n*e.bG,bH:n*e.bH,bI:n*e.bI}})),Wu=t((function(n,e,r){return u(Eu,u(ju,e,n),r)})),Ou=t((function(n,e,r){return f(Wu,Vu(n(r)),e,r)})),Yu=r((function(n,e){return{eT:e,cL:n}})),Uu=function(n){return u(Yu,n.cL,n.di)},Xu=function(n){return u(Yu,n.cL,n.dj)},qu=function(n){return u(Yu,n.cL,n.dk)},Ku=function(n){return Cc(n)},Qu=function(n){return.5*n},Ju=V,Zu={bG:0,bH:0,bI:0},nf=zt,ef={bG:1,bH:0,bI:0},rf=ef,tf={bG:0,bH:0,bI:1},of=tf,af=nf({cL:Zu,di:of,dj:rf}),cf=function(n){return a=(e={eI:u(yu,"camera azimuth",n),eU:u(yu,"camera distance",n),eX:u(yu,"camera elevation",n),e1:{bG:0,bH:0,bI:0}}).e1,i=e.eI,c=e.eX,l=e.eU,function(n){var e,r=Qu(Ku(n.eA));return{cY:(e=Ju(r),{$:0,a:e}),de:n.de}}({eA:Lu(40),de:(r={eI:i,eU:l,eX:c,e1:a,dC:af},o={cL:r.e1,di:$u(r.dC),dj:(t=r.dC,u(Su,Nu(t),$u(t))),dk:Nu(r.dC)},f(Ou,qu,r.eU,f(Fu,Uu,wu(r.eX),f(Fu,Xu,r.eI,o))))});var e,r,t,o,a,i,c,l},lf={$:0},uf=r((function(n,e){return f(Bt,r((function(e,r){return n(e)?u(yr,e,r):r})),$,e)})),ff={$:1},sf=r((function(n,e){return{$:2,a:n,b:e}})),df=function(n){return yc((function(e){return P(n,e.a)}))},bf=r((function(n,e){var r=e.a,t=e.b;switch(n){case 0:return L(r,t+1);case 1:return L(r,t-1);case 2:return L(r-1,t);default:return L(r+1,t)}})),vf=function(n){return n?0:1},mf=function(n){var e=n.a,r=n.b;switch(e){case 0:return u(vu,e,r);case 1:return u(vu,2,r);default:return u(vu,1,vf(r))}},pf=function(n){var e=n.a,r=n.b;switch(e){case 0:return u(vu,2,vf(r));case 1:return u(vu,e,r);default:return u(vu,0,r)}},gf=function(n){switch(n){case 0:return u(Dt,mf,u(Dt,mf,mf));case 1:return mf;case 2:return u(Dt,pf,u(Dt,pf,pf));default:return pf}},hf=r((function(n,e){var r=e.b;return u(bu,u(bf,n,e.a),u(gf,n,r))})),xf=r((function(n,e){var r=n.a,t=zi(u(ko,(function(r){var t,o,a,i=u(hf,r,n),c=i.a;return u(df,c,e)||(a=(t=c).b,-1>=T(o=t.a,-1)||o>1||-1>=T(a,-1)||a>1)?Fr:Rr(L(i,r))}),z([0,1,2,3])));if(1===t.$)return ff;var o=t.a;return u(sf,o.b,u(yr,o.a,u(uf,(function(n){return!P(n.a,r)}),e)))})),Cf=r((function(n,e){var r=zi(u(uf,(function(e){return P(e.a,n)}),e));return 1===r.$?lf:u(xf,r.a,e)})),Pf=a((function(n,e,r,t,o){var a;return o.aK.$?o:S(o,{aK:(a={cH:t,eo:r,et:e,c7:n.a4},{$:1,a:a})})})),Mf=t((function(n,e,r){var t=n.bH,o=L(Yi(n.bG),Yi(t)),a=u(Cf,o,r.bF);switch(a.$){case 0:case 1:return r;default:return d(Pf,e,o,a.a,a.b,r)}})),Tf=t((function(n,e,r){return{bG:n,bH:e,bI:r}})),yf=r((function(n,e){return e.bG*n.bG+e.bH*n.bH+e.bI*n.bI})),Lf=r((function(n,e){return n*e})),wf=function(n){return n.cL},Sf=r((function(n,e){var r=n.cL,t=n.fm;return(e.bG-r.bG)*t.bG+(e.bH-r.bH)*t.bH+(e.bI-r.bI)*t.bI})),Nf=t((function(n,e,r){return{bG:r.bG+e*n.bG,bH:r.bH+e*n.bH,bI:r.bI+e*n.bI}})),$f=r((function(n,e){var r=Vu(e),t=u(yf,n.fm,r);if(t){var o=wf(e);return Rr(f(Nf,r,u(Lf,-1/t,u(Sf,n,o)),o))}return Fr})),Hf=r((function(n,e){return{bG:n,bH:e}})),Df=r((function(n,e){return n*e})),zf=function(n){return n.eH},If=W,_f=r((function(n,e){return e/n})),Gf=function(n){return Hu(n)},Af={bG:0,bH:0,bI:-1},kf=r((function(n,e){return e/n})),Rf=r((function(n,e){var r=n.dk,t=n.dj,o=n.di;return{bG:o.bG*e.bG+t.bG*e.bH+r.bG*e.bI,bH:o.bH*e.bG+t.bH*e.bH+r.bH*e.bI,bI:o.bI*e.bG+t.bI*e.bH+r.bI*e.bI}})),Ff=function(n){return{bG:-n.bG,bH:-n.bH,bI:-n.bI}},Vf=function(n){return Ff(ku(n))},Bf=r((function(n,e){var r=n.cL,t=n.di;return(e.bG-r.bG)*t.bG+(e.bH-r.bH)*t.bH})),Ef=t((function(n,e,r){return{bG:n,bH:e,bI:r}})),jf=o((function(n,e,r,t){var o=n.cL,a=n.dk,i=n.dj,c=n.di;return{bG:o.bG+e*c.bG+r*i.bG+t*a.bG,bH:o.bH+e*c.bH+r*i.bH+t*a.bH,bI:o.bI+e*c.bI+r*i.bI+t*a.bI}})),Wf=r((function(n,e){var r=n.cL,t=n.dj;return(e.bG-r.bG)*t.bG+(e.bH-r.bH)*t.bH})),Of=t((function(n,e,r){var t=n,o=u(Wf,zf(e),r),a=u(Bf,zf(e),r),i=t.de,c=function(n){return n.du}(e).b,l=t.cY;if(l.$){var d=u(kf,c,l.a);return u(Yu,s(jf,i,u(Df,d,a),u(Df,d,o),0),Vf(t.de))}var b=wu(u(_f,l.a,u(Lf,.5,c))),v=u(Rf,i,u(Ua,Af,function(n){var e=n,r=u(st,Cc(e.bG),u(st,Cc(e.bH),Cc(e.bI)));if(r){var t=e.bI/r,o=e.bH/r,a=e.bG/r,i=If(a*a+o*o+t*t);return Rr({bG:a/i,bH:o/i,bI:t/i})}return Fr}(f(Ef,a,o,b))));return u(Yu,Gf(t.de),v)})),Yf=function(n){var e=n;return{bG:Du(e),bH:zu(e)}},Uf=r((function(n,e){return{cL:e,di:n,dj:(r=n,{bG:-r.bH,bH:r.bG})};var r})),Xf=r((function(n,e){return u(Uf,Yf(n),e)})),qf=t((function(n,e,r){var t=n.a,o=n.b;return{eH:u(Xf,e,r),du:L(Ku(t),Ku(o))}})),Kf=function(n){return n.bG},Qf=r((function(n,e){return{bG:n,bH:e}})),Jf=function(n){return n.bH},Zf=function(n){return n.bI},ns=o((function(n,e,r,t){var o=r.bG,a=r.bH,i=f(qf,L(e.dg,e.cq),Lu(0),u(Hf,0,0));return u(Ii,(function(n){return f(Tf,Kf(n),Jf(n),Zf(n))}),u($f,t,f(Of,n,i,u(Qf,o,a))))})),es=r((function(n,e){return{fm:n,cL:e}})),rs=r((function(n,e){return u(es,e.fm,u(Bu,n,e.cL))})),ts=r((function(n,e){return{fm:e,cL:n}})),os=u(ts,Zu,of),as=o((function(n,e,r,t){return s(ns,e,r,t,u(rs,f(Ef,0,0,n),os))})),is=r((function(n,e){if(n.H.aS){var r=s(as,u(yu,"cubes side length",n),cf(n),n.ac,n.H);return 1===r.$?e:f(Mf,r.a,n,e)}return e})),cs=r((function(n,e){var r,o=zi((r=n.ad,f(Sr,t((function(n,e,r){return u(yr,e,r)})),$,r)));if(o.$)return e;var a=o.a,i=s(as,u(yu,"cubes side length",n),cf(n),n.ac,a);return 1===i.$?e:f(Mf,i.a,n,e)})),ls=r((function(n,e){var r=e.aK;if(r.$){var t=r.a.cH;return T(n.a4-r.a.c7,u(yu,"duration of rolling animation",n))>0?S(e,{aK:du,bF:t}):e}return e})),us=r((function(n,e){return u(ls,n,u(cs,n,u(is,n,e)))})),fs=re("br"),ss=u(St,z([u(pl,"position","absolute"),u(pl,"width","100%"),u(pl,"font-size","20px"),u(pl,"text-align","center")]),z([u(wl,$,z([hl("Eight Rolling Cubes Puzzle"),u(fs,$,$),hl("by John Harris")])),u(wl,$,z([hl("Can you make all the red faces look down with the center cell vacant?")]))])),ds=r((function(n,e){return{$:0,a:n,b:e}})),bs=r((function(n,e){return T(e,n)>-1})),vs=r((function(n,e){return n+.5*(e-n)})),ms=r((function(n,e){return e-n})),ps={bG:-1,bH:0,bI:0},gs={bG:0,bH:-1,bI:0},hs={bG:0,bH:1,bI:0},xs=t((function(n,e,r){return{bG:n,bH:e,bI:r}})),Cs=i((function(n,e,r,t,o,a){var i=u(bs,r,a)?tf:Af,c=u(bs,e,o)?hs:gs,l=u(bs,n,t)?ef:ps,s=w(Ku(u(ms,n,t)),Ku(u(ms,e,o)),Ku(u(ms,r,a)));return{eH:{cL:f(xs,u(vs,n,t),u(vs,e,o),u(vs,r,a)),di:l,dj:c,dk:i},du:s}})),Ps=r((function(n,e){return b(Cs,Kf(n),Jf(n),Zf(n),Kf(e),Jf(e),Zf(e))})),Ms=t((function(n,e,r){return{bG:n,bH:e,bI:r}})),Ts=r((function(n,e){var r=w(e.a/2,e.b/2,e.c/2),t=r.a,o=r.b,a=r.c;return u(ds,n,u(Ps,f(Ms,-t,-o,-a),f(Ms,t,o,a)))})),ys=function(n){return n*hu/180},Ls=r((function(n,e){return u(Ua,Tl,zi(u(ko,(function(e){var r=e.b;return P(e.a,n)?Rr(r):Fr}),e.R)))})),ws=r((function(n,e){return u(Ls,n,e.aR)})),Ss=ws,Ns=function(n){return{$:5,a:n}},$s=function(n){return Ns(n)},Hs=r((function(n,e){return{$:2,a:n,b:e}})),Ds=r((function(n,e){return{$:4,a:n,b:e}})),zs=r((function(n,e){return{$:3,a:n,b:e}})),Is=r((function(n,e){return{$:1,a:n,b:e}})),_s=t((function(n,e,r){return{bG:n,bH:e,bI:r}})),Gs=function(n){return n.eH},As=function(n){return n.du},ks=r((function(n,e){return{eH:u(Eu,n,Gs(e)),du:As(e)}})),Rs=r((function(n,e){var r=e;return u(Yu,u(Bu,n,r.cL),r.eT)})),Fs=r((function(n,e){var r=e;return{l:u(Rs,n,r.l),fe:r.fe,fs:r.fs}})),Vs=r((function(n,e){var r=e.b;return L(n(e.a),n(r))})),Bs=r((function(n,e){return u(Vs,Bu(n),e)})),Es=function(n){return n.eP},js=function(n){return n.fs},Ws=r((function(n,e){return{eP:e,fs:Ku(n)}})),Os=r((function(n,e){return u(Ws,js(e),u(Bu,n,Es(e)))})),Ys=r((function(n,e){var r=e.b,t=e.c;return w(n(e.a),n(r),n(t))})),Us=r((function(n,e){return u(Ys,Bu(n),e)})),Xs=r((function(n,e){var r=n.a,t=n.b,o=n.c,a=f(_s,r,t,o);switch(e.$){case 0:return u(ds,e.a,u(ks,a,e.b));case 1:return u(Is,e.a,u(Us,a,e.b));case 3:return u(zs,e.a,u(Os,a,e.b));case 2:return u(Hs,e.a,u(Fs,a,e.b));case 4:return u(Ds,e.a,u(Bs,a,e.b));default:var i=e.a;return Ns(u(Et,Xs(w(r,t,o)),i))}})),qs=function(n){return Xs(w(n,0,0))},Ks=function(n){return Xs(w(0,0,n))},Qs=t((function(n,e,r){return{eH:f(Ru,n,e,Gs(r)),du:As(r)}})),Js=r((function(n,e){var r=u(_u,n,e),t=u(Iu,n,e);return function(n){var e=n;return u(Yu,r(e.cL),t(e.eT))}})),Zs=t((function(n,e,r){var t=r;return{l:f(Js,n,e,t.l),fe:t.fe,fs:t.fs}})),nd=t((function(n,e,r){return u(Vs,u(_u,n,e),r)})),ed=t((function(n,e,r){return u(Ws,js(r),f(_u,n,e,Es(r)))})),rd=t((function(n,e,r){return u(Ys,u(_u,n,e),r)})),td=t((function(n,e,r){switch(r.$){case 0:return u(ds,r.a,f(Qs,n,e,r.b));case 1:return u(Is,r.a,f(rd,n,e,r.b));case 3:return u(zs,r.a,f(ed,n,e,r.b));case 2:return u(Hs,r.a,f(Zs,n,e,r.b));case 4:return u(Ds,r.a,f(nd,n,e,r.b));default:var t=r.a;return Ns(u(Et,u(td,n,e),t))}})),od=u(Yu,Zu,of),ad=r((function(n,e){return f(td,od,n,e)})),id=function(n){var e=u(Ss,"board color",n),r=u(qs,-1.55,u(Ts,e,w(.1,3.2,.2))),t=u(Ks,-.5,u(Ts,e,w(3,3,1)));return $s(z([r,u(ad,ys(90),r),u(ad,ys(180),r),u(ad,ys(270),r),t]))},cd=function(n){return Xs(w(0,n,0))},ld=r((function(n,e){return 0>T(n,e)?n:e})),ud=r((function(n,e){var r=n.b;return u(td,u(Yu,n.a,{bG:r.a,bH:r.b,bI:r.c}),e)})),fd=t((function(n,e,r){var t=e.aK;if(t.$){var o=t.a.c7,a=t.a.eo;if(P(t.a.et,r)){var i=(n.a4-o)/u(yu,"duration of rolling animation",n),c=u(ld,ys(90),i*ys(90)),l=function(){switch(a){case 0:return L({bG:.5,bH:.5,bI:-.5},w(-1,0,0));case 1:return L({bG:-.5,bH:-.5,bI:-.5},w(1,0,0));case 2:return L({bG:-.5,bH:.5,bI:-.5},w(0,-1,0));default:return L({bG:.5,bH:-.5,bI:-.5},w(0,1,0))}}();return u(ud,l,c)}return zt}return zt})),sd=u(Yu,Zu,rf),dd=r((function(n,e){return f(td,sd,n,e)})),bd=hs,vd=u(Yu,Zu,bd),md=r((function(n,e){return f(td,vd,n,e)})),pd=t((function(n,e,r){var t=r.a,o=t.a,a=t.b,i=r.b,c=u(yu,"cubes side length",n),l=function(){if(i.b)switch(i.a){case 2:return dd(ys(180));case 1:return dd(ys(90));default:return md(-ys(90))}else switch(i.a){case 2:return zt;case 1:return dd(-ys(90));default:return md(ys(90))}}(),f=u(Ss,"color 2",n),d=u(Ks,c/4,u(Ts,u(Ss,"color 1",n),w(c,c,c/2))),b=u(Ks,-c/4,u(Ts,f,w(c,c,c/2)));return u(cd,a,u(qs,o,u(Ks,c/2,s(fd,n,e,L(o,a),l($s(z([d,b])))))))})),gd=r((function(n,e){return $s(u(Et,u(pd,n,e),e.bF))})),hd=function(n){return{$:0,a:n}},xd={$:3},Cd=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),Pd=Cd,Md=r((function(n,e){return e.b?f(Bt,yr,e,n):n})),Td=function(n){return f(Bt,Md,$,n)},yd=r((function(n,e){return Td(u(Et,n,e))})),Ld=function(n){return u(le,"height",Br(n))},wd=function(n){return te(function(n){return"script"==n?"p":n}(n))},Sd=function(n){return{$:2,a:n}},Nd=r((function(n,e){switch(e.$){case 0:return u(dr,n,e);case 1:return u(br,n,e);case 2:return u(vr,n,e);case 3:return u(mr,n,e);case 4:return u(pr,n,e);default:return u(gr,n,e)}})),$d=r((function(n,e){switch(e.$){case 0:return u(Xe,n,e);case 1:return u(qe,n,e);case 2:return u(Ke,n,e);case 3:return u(Qe,n,e);case 4:return u(Je,n,e);case 5:return u(Ze,n,e);case 6:return u(nr,n,e);case 7:return u(er,n,e);default:return function(n){var e=n.sampleAlphaToCoverage;e.toggle=n.toggle,e.enabled||(n.gl.enable(n.gl.SAMPLE_ALPHA_TO_COVERAGE),e.enabled=!0)}(n)}})),Hd=t((function(n,e,r){return f(sr,n,e,r)})),Dd=Tr,zd=s(Dd,1,1,1,1),Id=t((function(n,e,r){return u(Et,(function(n){return u(n,e,r)}),n)})),_d=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),Gd=r((function(n,e){var r=e.bG,t=e.bH;return f(_d,n*r/t,n,n*(1-r-t)/t)})),Ad=Pr,kd=r((function(n,e){return f(Ad,3.2406*(t=(r=u(Gd,n,e)).a)-1.5372*(o=r.b)-.4986*(a=r.c),-.9689*t+1.8758*o+.0415*a,.0557*t-.204*o+1.057*a);var r,t,o,a})),Rd=r((function(n,e){return{dG:P(n.dG,e.dG),r:n.r*e.r+n.s*e.u+n.t*e.x,s:n.r*e.s+n.s*e.v+n.t*e.y,t:n.r*e.t+n.s*e.w+n.t*e.z,u:n.u*e.r+n.v*e.u+n.w*e.x,v:n.u*e.s+n.v*e.v+n.w*e.y,w:n.u*e.t+n.v*e.w+n.w*e.z,x:n.x*e.r+n.y*e.u+n.z*e.x,y:n.x*e.s+n.y*e.v+n.z*e.y,z:n.x*e.t+n.y*e.w+n.z*e.z,I:e.I+(n.I*e.r+n.J*e.u+n.K*e.x)*e.b7,J:e.J+(n.I*e.s+n.J*e.v+n.K*e.y)*e.b7,K:e.K+(n.I*e.t+n.J*e.w+n.K*e.z)*e.b7,b7:n.b7*e.b7}})),Fd=function(n){var e=new Float64Array(16);return e[0]=n.dO,e[1]=n.dS,e[2]=n.dW,e[3]=n.d_,e[4]=n.dP,e[5]=n.dT,e[6]=n.dX,e[7]=n.d$,e[8]=n.dQ,e[9]=n.dU,e[10]=n.dY,e[11]=n.d0,e[12]=n.dR,e[13]=n.dV,e[14]=n.dZ,e[15]=n.d1,e},Vd=a((function(n,e,r,t,o){return b(o,n,s(Dd,t.b7,t.b7,t.b7,t.dG?1:-1),function(n){return Fd({dO:n.r,dP:n.u,dQ:n.x,dR:n.I,dS:n.s,dT:n.v,dU:n.y,dV:n.J,dW:n.t,dX:n.w,dY:n.z,dZ:n.K,d_:0,d$:0,d0:0,d1:1})}(t),t.dG,e,r)})),Bd=i((function(n,e,r,t,o,a){n:for(;;)switch(o.$){case 0:return a;case 5:var i=o.b;n=n,e=e,r=r,t=u(Rd,o.a,t),o=i,a=a;continue n;case 1:return{O:u(yr,d(Vd,n,e,r,t,o.b),a.O),Y:a.Y,fw:a.fw};case 3:return{O:a.O,Y:u(yr,d(Vd,n,e,r,t,o.b),a.Y),fw:a.fw};case 2:return{O:a.O,Y:a.Y,fw:u(yr,d(Vd,n,e,r,t,o.a),a.fw)};default:var c=o.a;return f(Wr,s(Bd,n,e,r,t),a,c)}})),Ed=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),jd=Ed,Wd=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),Od=r((function(n,e){return{$:6,a:n,b:e}})),Yd=Od,Ud=z([s(Wd,518,!1,0,1),s(jd,!1,!1,!1,!1),u(Yd,0,1)]),Xd=519,qd=7681,Kd={src:"\n        precision lowp float;\n\n        void main() {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        }\n    ",attributes:{},uniforms:{}},Qd=Ue,Jd=r((function(n,e){return{$:0,a:n,b:e}})),Zd=Jd({dv:1,dF:0,ea:5}),nb=Cr,eb=Zd(z([{b3:u(nb,-1,-1)},{b3:u(nb,1,-1)},{b3:u(nb,-1,1)},{b3:u(nb,1,1)}])),rb={src:"\n        precision lowp float;\n\n        attribute vec2 position;\n\n        void main() {\n            gl_Position = vec4(position, 0.0, 1.0);\n        }\n    ",attributes:{position:"b3"},uniforms:{}},tb=function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return function(f){return{$:2,a:n,b:e,c:r,d:t,e:o,f:a,g:i,h:c,i:l,j:u,k:f}}}}}}}}}}}},ob=t((function(n,e,t){var o=n.c_,a=n.cB,i=n.dh,c=r((function(n,e){return e(n)})),l=r((function(n,e){return e(n)})),s=function(n){return u(Dt,c(n.bw),u(Dt,l(n.bh),u(Dt,l(n.bJ),l(n.bK))))};return u(s,t,u(s,e,f(tb,o,a,i)))})),ab=function(n){return f(ob,{cB:n.cB,c_:n.c_,dh:n.dh},{bh:n.bh,bw:n.bw,bJ:n.bJ,bK:n.bK},{bh:n.bh,bw:n.bw,bJ:n.bJ,bK:n.bK})},ib=function(n){return d(Qd,z([ab(n),s(jd,!1,!1,!1,!1)]),rb,Kd,eb,{})},cb=ib({bh:qd,cB:0,c_:8,bw:Xd,dh:15,bJ:qd,bK:qd}),lb=7680,ub=function(n){return ib({bh:lb,cB:15,c_:8,bw:516,dh:(e=n,u(Oi,2,e+4)),bJ:5386,bK:5386});var e},fb=t((function(n,e,r){return Td(z([f(Id,n,r,Ud),z([ub(e),cb])]))})),sb=r((function(n,e){return Td(u(qr,fb(n),e))})),db=s(Wd,513,!0,0,1),bb=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),vb=r((function(n,e){return f(bb,32774,n,e)})),mb=function(n){var e=n.b5,t=n.bS,o=n.bN,a=n.bL,i=n.bP,c=n.aQ;return u(r((function(n,r){var i=n.b,c=n.c,l=r.a,u=r.b,f=r.c;return function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return{$:0,a:n,b:e,c:r,d:t,e:o,f:a,g:i,h:c,i:l,j:u}}}}}}}}}}}(n.a)(i)(c)(l)(u)(f)(e)(t)(o)(a)})),i,c)}({bL:0,aQ:u(vb,1,771),bN:0,bP:u(vb,770,771),bS:0,b5:0}),pb=z([db,mb]),gb=function(n){return n.d5},hb=function(n){return n.d8},xb=function(n){return w(u(ms,function(n){return n.d6}(n),function(n){return n.d3}(n)),u(ms,function(n){return n.d7}(n),function(n){return n.d4}(n)),u(ms,hb(n),gb(n)))},Cb=function(n){return{cL:{bG:n.I,bH:n.J,bI:n.K},di:{bG:n.r,bH:n.s,bI:n.t},dj:{bG:n.u,bH:n.v,bI:n.w},dk:{bG:n.x,bH:n.y,bI:n.z}}},Pb=r((function(n,e){var r=n.dk,t=n.dj,o=n.di;return{bG:e.bG*o.bG+e.bH*o.bH+e.bI*o.bI,bH:e.bG*t.bG+e.bH*t.bH+e.bI*t.bI,bI:e.bG*r.bG+e.bH*r.bH+e.bI*r.bI}})),Mb=r((function(n,e){var r=n.cL,t=e.bG-r.bG,o=e.bH-r.bH,a=e.bI-r.bI,i=n.dk,c=n.dj,l=n.di;return{bG:t*l.bG+o*l.bH+a*l.bI,bH:t*c.bG+o*c.bH+a*c.bI,bI:t*i.bG+o*i.bH+a*i.bI}})),Tb=r((function(n,e){return{cL:u(Mb,n,Hu(e)),di:u(Pb,n,Gu(e)),dj:u(Pb,n,Au(e)),dk:u(Pb,n,ku(e))}})),yb=r((function(n,e){return u(st,n,e)})),Lb=r((function(n,e){return u(ld,n,e)})),wb=r((function(n,e){var r=e,t=n;return{d3:u(yb,t.d3,r.d3),d4:u(yb,t.d4,r.d4),d5:u(yb,t.d5,r.d5),d6:u(Lb,t.d6,r.d6),d7:u(Lb,t.d7,r.d7),d8:u(Lb,t.d8,r.d8)}})),Sb=r((function(n,e){return e+n})),Nb=r((function(n,e){var r=n.a,t=n.c,o=Qu(Ku(n.b)),a=Qu(Ku(r)),i=Qu(Ku(t)),c=function(n){return w(n.bG,n.bH,n.bI)}(e),l=c.a,f=c.b,s=c.c;return{d3:u(Sb,a,l),d4:u(Sb,o,f),d5:u(Sb,i,s),d6:u(ms,a,l),d7:u(ms,o,f),d8:u(ms,i,s)}})),$b=o((function(n,e,r,t){var o=r.eP,a=2*r.e5*e,i=2*r.e4*e,c=2*r.e3*e,l=o.bI*e,s=o.bH*e,d=o.bG*e,b=ku(n),v=Cc(c*b.bG)+Cc(i*b.bH)+Cc(a*b.bI),m=Au(n),p=Cc(c*m.bG)+Cc(i*m.bH)+Cc(a*m.bI),g=Gu(n),h=Cc(c*g.bG)+Cc(i*g.bH)+Cc(a*g.bI),x=u(Nb,w(h,p,v),u(Mb,n,f(Ms,d,s,l)));return Rr(t.$?x:u(wb,t.a,x))})),Hb=o((function(n,e,r,t){n:for(;;){if(!t.b)return r;var o=t.a,a=t.b;switch(o.$){case 0:n=c=n,e=l=e,r=f=r,t=a;continue n;case 1:var i=s($b,n,e,o.a,r);n=c=n,e=l=e,r=f=i,t=a;continue n;case 2:n=c=n,e=l=e,r=f=r,t=a;continue n;case 3:i=s($b,n,e,o.a,r),n=c=n,e=l=e,r=f=i,t=a;continue n;case 4:var c=n,l=e,f=s(Hb,n,e,r,o.a);n=c,e=l,r=f,t=a;continue n;default:var d=o.a,b=o.b,v=u(Tb,Cb(d),n),m=e*d.b7;n=c=n,e=l=e,r=f=s(Hb,v,m,r,z([b])),t=a;continue n}}})),Db=function(n){return n[0]},zb=function(n){return n[1]},Ib=function(n){return n[2]},_b=function(n){return{$:4,a:n}},Gb=r((function(n,e){for(;;){if(!n.b)return e;var r=n.a;n=n.b,e=u(yr,r,e)}})),Ab=function(n){return _b(u(Gb,n,$))},kb={dG:!0,r:1,s:0,t:0,u:0,v:1,w:0,x:0,y:0,z:1,I:0,J:0,K:0,b7:1},Rb=ib({bh:qd,cB:0,c_:8,bw:Xd,dh:255,bJ:qd,bK:qd}),Fb={bN:0,eO:!1,bS:0,cW:0,b5:0,db:0,bG:0,bH:0,bI:0},Vb=r((function(n,e){return Fd({dO:n.bG,dP:n.b5,dQ:e.bG,dR:e.b5,dS:n.bH,dT:n.bS,dU:e.bH,dV:e.bS,dW:n.bI,dX:n.bN,dY:e.bI,dZ:e.bN,d_:n.db,d$:n.cW,d0:e.db,d1:e.cW})})),Bb=L({bo:u(Vb,Fb,Fb),bW:u(Vb,Fb,Fb),bX:u(Vb,Fb,Fb),bY:u(Vb,Fb,Fb)},s(Dd,0,0,0,0)),Eb=function(n){return s(Wd,515,n.ae,n._,n.Z)},jb=z([Eb({Z:1,_:0,ae:!0}),ab({bh:lb,cB:240,c_:0,bw:514,dh:0,bJ:lb,bK:lb}),mb]),Wb=r((function(n,e){var r=n,t=e.e0,o=e.eG,a=Ku(e.fl),i=Ku(t),c=r.cY;if(c.$){var l=c.a;return Nc(i)?Fd({dO:2/(o*l),dP:0,dQ:0,dR:0,dS:0,dT:2/l,dU:0,dV:0,dW:0,dX:0,dY:0,dZ:-1,d_:0,d$:0,d0:0,d1:1}):Fd({dO:2/(o*l),dP:0,dQ:0,dR:0,dS:0,dT:2/l,dU:0,dV:0,dW:0,dX:0,dY:-2/(i-a),dZ:-(i+a)/(i-a),d_:0,d$:0,d0:0,d1:1})}var u=c.a;return Nc(i)?Fd({dO:1/(o*u),dP:0,dQ:0,dR:0,dS:0,dT:1/u,dU:0,dV:0,dW:0,dX:0,dY:-1,dZ:-2*a,d_:0,d$:0,d0:-1,d1:0}):Fd({dO:1/(o*u),dP:0,dQ:0,dR:0,dS:0,dT:1/u,dU:0,dV:0,dW:0,dX:0,dY:-(i+a)/(i-a),dZ:-2*i*a/(i-a),d_:0,d$:0,d0:-1,d1:0})})),Ob=r((function(n,e){return 1==(1&n>>e)?0:1})),Yb=t((function(n,e,r){return Td(u(Et,(function(r){var t=r<<4;return f(Id,n,L(e,s(Dd,u(Ob,r,0),u(Ob,r,1),u(Ob,r,2),u(Ob,r,3))),function(n){return z([Eb({Z:1,_:0,ae:!0}),ab({bh:lb,cB:240,c_:n,bw:514,dh:0,bJ:lb,bK:lb}),mb])}(t))}),u(Xr,1,u(Oi,2,r)-1)))})),Ub={cL:Zu,di:rf,dj:bd,dk:of},Xb=r((function(n,e){var r,t,o,a,i;return t=Hu(r=u(Tb,e,n)),o=ku(r),a=Au(r),i=Gu(r),Fd({dO:i.bG,dP:a.bG,dQ:o.bG,dR:t.bG,dS:i.bH,dT:a.bH,dU:o.bH,dV:t.bH,dW:i.bI,dX:a.bI,dY:o.bI,dZ:t.bI,d_:0,d$:0,d0:0,d1:1})})),qb=function(n){return Gu(n)},Kb=function(n){return Au(n)},Qb=r((function(n,e){var r,t=z([(1,{$:1,a:1}),Sd(0),hd(!0),s(Pd,0,0,0,0)]),o=function(){var e=n.eE;switch(e.$){case 0:return w(t,"0",1);case 1:return w(u(yr,xd,t),"1",1);default:return w(t,"0",e.a)}}(),a=o.a,i=o.b,c=o.c,l=n.du,d=l.a,v=l.b,m=u(pl,"height",Br(v)+"px"),p=d,g=p/v,h=u(yd,(function(e){return function(n){var e=function(n){return n.de}(n.eM),r={cL:Gf(e),di:qb(e),dj:Kb(e),dk:Ff(Vf(e))},t=Ab(n.dy),o=s(Hb,r,1,Fr,z([t]));if(1===o.$)return $;var a=o.a,i=u(Xb,Ub,e),c=u(Lf,.99,u(yb,Ku(n.dr),wu(gb(a)))),l=xb(a),d=function(n){var e=n,r=u(st,Cc(e.bG),u(st,Cc(e.bH),Cc(e.bI)));if(r){var t=e.bI/r,o=e.bH/r,a=e.bG/r;return If(a*a+o*o+t*t)*r}return 0}(f(Ef,l.a,l.b,l.c)),v=u(Lf,1.01,u(Sb,d,wu(hb(a)))),m=u(Wb,n.eM,{eG:n.eG,e0:v,fl:c}),p=function(n){return{dO:n[0],dS:n[1],dW:n[2],d_:n[3],dP:n[4],dT:n[5],dX:n[6],d$:n[7],dQ:n[8],dU:n[9],dY:n[10],d0:n[11],dR:n[12],dV:n[13],dZ:n[14],d1:n[15]}}(m).d1,g=p?Ff(Vf(e)):Gf(e),h=function(){var e=n.fG;switch(e.$){case 0:return L(0,0);case 1:return L(1,0);case 2:return L(2,0);case 3:return L(3,e.a);case 4:return L(4,e.a);default:return L(5,0)}}(),x=h.a,C=h.b,P=u(kd,n.e_,n.fL),M=Fd({dO:0,dP:g.bG,dQ:Db(P),dR:n.ev,dS:0,dT:g.bH,dU:zb(P),dV:d,dW:0,dX:g.bI,dY:Ib(P),dZ:x,d_:0,d$:p,d0:0,d1:C}),T=b(Bd,M,i,m,kb,t,{O:$,Y:$,fw:$}),y=n.fg;switch(y.$){case 0:return Td(z([f(Id,T.O,L(w=y.a,zd),pb),f(Id,T.Y,Bb,pb)]));case 1:var w=y.a;return Td(z([f(Id,T.O,Bb,pb),z([Rb]),f(Id,T.fw,w.bo,Ud),z([ub(0)]),f(Id,T.O,L(w,zd),jb),f(Id,T.Y,Bb,pb)]));default:var S=y.a,N=y.b;return Td(z([f(Id,T.O,L(N,zd),pb),z([Rb]),u(sb,T.fw,S),f(Yb,T.O,N,Or(S)),f(Id,T.Y,Bb,pb)]))}}({eG:g,eM:n.eM,dr:n.dr,dy:e.dy,e_:e.e_,fg:e.fg,ev:c,fG:e.fG,fL:e.fL})}),e),x=u(pl,"width",Br(p)+"px"),C=function(n){var e,r,t=n.b,o=n.c,a=n.d,i=function(n){return Yi(1e4*n)/100};return e=z(["rgba(",wc(i(n.a)),"%,",wc(i(t)),"%,",wc(i(o)),"%,",wc((r=a,Yi(1e3*r)/1e3)),")"]),u(Er,"",e)}(n.dn);return f(wd,"div",z([u(pl,"padding","0px"),x,m]),z([L(i,f(Hd,a,z([(r=Yi(p*c),u(le,"width",Br(r))),Ld(Yi(v*c)),x,m,u(pl,"display","block"),u(pl,"background-color",C)]),h))]))})),Jb={bG:.31271,bH:.32902},Zb=r((function(n,e){var r=n,t=e.eT,o=t.bG,a=t.bH,i=t.bI,c=u(kd,e.cr,e.ci);return{bN:Ib(c),eO:r,bS:zb(c),cW:0,b5:Db(c),db:1,bG:-o,bH:-a,bI:-i}})),nv={$:0},ev=r((function(n,e){return T(e,n)>0})),rv=function(n){return function(n){for(;;){if(P(n.fb,0)&&P(n.fc,0))return Fb;if(!u(ev,Ku(n.fb),Ku(n.fc))){var e=Cc(n.fc/hu),r=Cc(n.fb/hu),t=n.ca,o=t.bG,a=t.bH,i=t.bI,c=u(kd,1,n.ci);return{bN:r*Ib(c),eO:!1,bS:r*zb(c),cW:e/r,b5:r*Db(c),db:3,bG:o,bH:a,bI:i}}n={ci:n.ci,fb:n.fc,fc:n.fb,ca:Ff(n.ca)}}}({ci:n.ci,fb:n.cr,fc:0,ca:n.ca})},tv=t((function(n,e,r){return 0>T(r,n)?n:T(r,e)>0?e:r})),ov=function(n){var e=f(tv,1667,25e3,n),r=e>4e3?-3025846900/(e*e*e)+2107037.9/(e*e)+.2226347*1e3/e+.24039:-266123900.00000003/(e*e*e)-.2343589*1e6/(e*e)+877.6956/e+.17991;return{bG:r,bH:e>2222?e>4e3?r*r*r*3.081758-r*r*5.8733867+3.75112997*r-.37001483:r*r*r*-.9549476-r*r*1.37418593+2.09137015*r-.16748867:r*r*r*-1.1063814-r*r*1.3481102+2.18555832*r-.20219683}},av=ov(12e3),iv=ov(5600),cv=r((function(n,e){return{$:2,a:n,b:e}})),lv=function(n){return{$:0,a:n}},uv=function(n){return n.eO},fv=lv(Bb.a),sv=r((function(n,e){return f(Bt,r((function(e,r){var t=r.a,o=r.b;return n(e)?L(u(yr,e,t),o):L(t,u(yr,e,o))})),L($,$),e)})),dv=function(n){return Fd({dO:n.bG,dP:n.b5,dQ:0,dR:0,dS:n.bH,dT:n.bS,dU:0,dV:0,dW:n.bI,dX:n.bN,dY:0,dZ:0,d_:n.db,d$:n.cW,d0:0,d1:0})},bv=l((function(n,e,r,t,o,a,i,c){var l=u(sv,uv,z([n,e,r,t])),f=l.a;if(f.b){var s=N(f,l.b);if(s.b&&s.b.b&&s.b.b.b&&s.b.b.b.b&&!s.b.b.b.b.b){var d=s.a,b=s.b,v=b.a,m=b.b,p=m.a,g=m.b.a;return u(cv,u(Et,dv,f),{bo:u(Vb,d,v),bW:u(Vb,p,g),bX:u(Vb,o,a),bY:u(Vb,i,c)})}return fv}return lv({bo:u(Vb,n,e),bW:u(Vb,r,t),bX:u(Vb,o,a),bY:u(Vb,i,c)})})),vv=t((function(n,e,r){return m(bv,n,e,r,Fb,Fb,Fb,Fb,Fb)})),mv=o((function(n,e,r,t){return{$:2,a:n,b:e,c:r,d:t}})),pv=o((function(n,e,r,t){return{$:3,a:n,b:e,c:r,d:t}})),gv=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),hv=o((function(n,e,r,t){return{$:6,a:n,b:e,c:r,d:t}})),xv=o((function(n,e,r,t){return{$:7,a:n,b:e,c:r,d:t}})),Cv=o((function(n,e,r,t){return{$:5,a:n,b:e,c:r,d:t}})),Pv=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),Mv=function(n){switch(n.$){case 0:return n;case 1:return s(Pv,n.a,n.b,n.c,1);case 2:return s(mv,n.a,n.b,n.c,1);case 3:return s(pv,n.a,n.b,n.c,1);case 4:return s(gv,n.a,n.b,n.c,1);case 5:return s(Cv,n.a,n.b,n.c,1);case 6:return s(hv,n.a,n.b,n.c,1);case 7:return s(xv,n.a,n.b,n.c,1);case 8:case 9:default:return n}},Tv={$:0},yv=l((function(n,e,r,t,o,a,i,c){for(;;){if(!c.b)return{d3:e,d4:t,d5:a,d6:n,d7:r,d8:o};var l=c.b,f=i(c.a);n=u(Lb,f.d6,n),e=u(yb,f.d3,e),r=u(Lb,f.d7,r),t=u(yb,f.d4,t),o=u(Lb,f.d8,o),a=u(yb,f.d5,a),i=i,c=l}})),Lv=t((function(n,e,r){var t=n(e);return m(yv,t.d6,t.d3,t.d7,t.d4,t.d8,t.d5,n,r)})),wv=r((function(n,e){return 1>T(e,n)})),Sv=function(n){return u(wv,n.d3,n.d6)&&u(wv,n.d4,n.d7)&&u(wv,n.d5,n.d8)?n:{d3:u(yb,n.d6,n.d3),d4:u(yb,n.d7,n.d4),d5:u(yb,n.d8,n.d5),d6:u(Lb,n.d6,n.d3),d7:u(Lb,n.d7,n.d4),d8:u(Lb,n.d8,n.d5)}},Nv=function(n){return n},$v=function(n){var e=n.a,r=n.b,t=n.c,o=Kf(e),a=Jf(e),i=Zf(e),c=Kf(r),l=Jf(r),f=Zf(r),s=Kf(t),d=Jf(t),b=Zf(t);return Sv({d3:u(yb,o,u(yb,c,s)),d4:u(yb,a,u(yb,l,d)),d5:u(yb,i,u(yb,f,b)),d6:u(Lb,o,u(Lb,c,s)),d7:u(Lb,a,u(Lb,l,d)),d8:u(Lb,i,u(Lb,f,b))})},Hv=function(n){return new Float64Array([n.bG,n.bH,n.bI])},Dv=function(n){return Hv(n)},zv=function(n){return Hv(n)},Iv=r((function(n,e){return{bG:e.bH*n.bI-e.bI*n.bH,bH:e.bI*n.bG-e.bG*n.bI,bI:e.bG*n.bH-e.bH*n.bG}})),_v=r((function(n,e){return{bG:e.bG-n.bG,bH:e.bH-n.bH,bI:e.bI-n.bI}})),Gv={bG:0,bH:0,bI:0},Av=r((function(n,e){var r=n,t=e,o=u(st,Cc(t.bG),u(st,Cc(t.bH),Cc(t.bI)));if(o){var a=t.bI/o,i=t.bH/o,c=t.bG/o,l=If(c*c+i*i+a*a);return{bG:r*c/l,bH:r*i/l,bI:r*a/l}}return Gv}))(1),kv=t((function(n,e,r){return Av(u(Iv,u(_v,e,r),u(_v,n,e)))})),Rv=function(n){var e=n.a,r=n.b,t=n.c,o=zv(f(kv,e,r,t));return w({o:o,b3:Dv(e)},{o:o,b3:Dv(r)},{o:o,b3:Dv(t)})},Fv=r((function(n,e){return{$:2,a:n,b:e}}))({dv:3,dF:0,ea:4}),Vv=t((function(n,e,r){return w(n,e,r)})),Bv=(Vo=u(Lf,-.5,1),Bo=u(Lf,-.5,1),jo=f(xs,Eo=u(Lf,-.5,1),Bo,Vo),Oo=f(xs,Eo,Bo,Wo=u(Lf,.5,1)),Uo=f(xs,Eo,Yo=u(Lf,.5,1),Vo),Xo=f(xs,Eo,Yo,Wo),Ko=f(xs,qo=u(Lf,.5,1),Bo,Vo),Qo=f(xs,qo,Yo,Vo),Jo=f(xs,qo,Bo,Wo),Zo=f(xs,qo,Yo,Wo),Mv(function(n){if(n.b){var e=n.a,r=n.b,t=Fv(u(Et,Rv,n));return s(mv,f(Lv,$v,e,r),n,t,0)}return Tv}(z([f(Vv,jo,Qo,Ko),f(Vv,jo,Uo,Qo),f(Vv,Oo,Jo,Zo),f(Vv,Oo,Zo,Xo),f(Vv,Ko,Qo,Zo),f(Vv,Ko,Zo,Jo),f(Vv,jo,Xo,Uo),f(Vv,jo,Oo,Xo),f(Vv,jo,Ko,Jo),f(Vv,jo,Jo,Oo),f(Vv,Uo,Zo,Qo),f(Vv,Uo,Xo,Zo)])))),Ev={$:0},jv=t((function(n,e,r){return{$:1,a:n,b:e,c:r}})),Wv=t((function(n,e,r){var t=e.a,o=e.b,a=n(e.c),i=n(o),c=n(t),l=zv(f(kv,c,i,a)),s={o:l,b3:Dv(c)},d={o:l,b3:Dv(i)},b={o:l,b3:Dv(a)};return u(yr,s,u(yr,d,u(yr,b,r)))})),Ov=function(n){return n.E},Yv=o((function(n,e,r,t){return 1===e.$||1===r.$||1===t.$?Fr:Rr(f(n,e.a,r.a,t.a))})),Uv=4294967295>>>32-at,Xv=h,qv=t((function(n,e,r){for(;;){var t=u(Xv,Uv&e>>>n,r);if(t.$)return u(Xv,Uv&e,t.a);n-=at,e=e,r=t.a}})),Kv=r((function(n,e){var r=e.a,t=e.b,o=e.c,a=e.d;return 0>n||T(n,r)>-1?Fr:T(n,function(n){return n>>>5<<5}(r))>-1?Rr(u(Xv,Uv&n,a)):Rr(f(qv,t,n,o))})),Qv=function(n){return n.ao},Jv=r((function(n,e){return u(Kv,n,Qv(e))})),Zv=t((function(n,e,r){for(;;){var t=u(bt,Zr,n),o=t.a,a=t.b;if(0>T(ft(o),Zr))return u(pt,!0,{A:e,m:r,q:o});n=a,e=u(yr,lt(o),e),r+=1}})),nm=function(n){return n.b?f(Zv,n,$,0):it},em=r((function(n,e){return!u(yc,u(po,Tc,n),e)})),rm=r((function(n,e){var r=function(n){return n.a}(n),t=function(n){var e=n.a,t=n.b,o=n.c;return e>=0&&0>T(e,r)&&t>=0&&0>T(t,r)&&o>=0&&0>T(o,r)};return u(em,t,e)?{E:e,ao:n}:{E:u(uf,t,e),ao:n}})),tm=t((function(n,e,r){return{$:3,a:n,b:e,c:r}}))({dv:1,dF:3,ea:4}),om=r((function(n,e){var r=e;return L(w(n.bG,n.bH,n.bI),w(r.bG,r.bH,r.bI))})),am=r((function(n,e){n:for(;;){if(-2===e.$)return Fr;var r=e.c,t=e.d,o=e.e;switch(u(wo,n,e.b)){case 0:n=n,e=t;continue n;case 1:return Rr(r);default:n=n,e=o;continue n}}})),im=f(Ad,0,0,0),cm=i((function(n,e,r,t,o,a){var i=a.a,c=a.b,l=a.c,f=u(am,u(om,n,e),o);if(f.$){var s={o:im,b3:Dv(e)},d={o:im,b3:Dv(n)},b=l+1;return w(u(yr,w(r,l,b),u(yr,w(r,b,t),i)),u(yr,s,u(yr,d,c)),l+2)}return w(u(yr,w(r,f.a,t),i),c,l)})),lm=a((function(n,e,r,t,o){for(;;){if(!r.b)return L(o.a,Qr(o.b));var a=r.a,i=a.a,c=a.b,l=r.b,u=n(a.c),f=n(c),s=n(i),d=t+2,v=t+1,m=n,p=e,g=l,h=t+3,x=b(cm,u,s,d,t,e,b(cm,f,u,v,d,e,b(cm,s,f,t,v,e,o)));n=m,e=p,r=g,t=h,o=x}})),um=a((function(n,e,r,t,o){for(;;){if(!e.b)return w(t,o,r);var a=e.a,i=a.a,c=a.b,l=e.b,s=n(a.c),d=n(c),b=n(i),v=r+2,m=r+1,p=r,g=f(No,u(om,b,s),v,f(No,u(om,s,d),m,f(No,u(om,d,b),p,o)));n=n,e=l,r+=3,t=u(yr,w(p,m,v),t),o=g}})),fm=t((function(n,e,r){var o,a=u(ko,(function(n){var e=n.a,r=n.b,a=n.c;return s(Yv,t((function(n,e,r){return w(n,e,r)})),u(Jv,e,o),u(Jv,r,o),u(Jv,a,o))}),Ov(o=r)),i=f(Bt,Wv(e),$,a),c=d(um,e,a,0,$,Po),l=d(lm,e,c.b,a,0,w(c.a,$,c.c)),b=l.a,v=l.b,m=v.b?N(i,v):i;return f(jv,n,u(rm,nm(m),b),u(tm,m,b))})),sm=function(n){return{E:u(Et,(function(n){return w(3*n,3*n+1,3*n+2)}),u(Xr,0,Or(n)-1)),ao:nm(Td(u(Et,(function(n){return z([n.a,n.b,n.c])}),n)))}},dm=function(n){switch(n.$){case 0:return Ev;case 1:case 2:return f(fm,n.a,zt,sm(u(Et,Nv,n.b)));case 3:return f(fm,n.a,zt,n.b);case 4:case 5:case 6:case 7:return f(fm,n.a,(function(n){return n.b3}),n.b);case 8:case 9:default:return Ev}},bm=dm(Bv),vm={$:0},mm=vm,pm=r((function(n,e){return{$:1,a:n,b:e}})),gm={src:"\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        void main () {\n            gl_FragColor = texture2D(colorTexture, interpolatedUv);\n        }\n    ",attributes:{},uniforms:{colorTexture:"bQ"}},hm=function(n){return{$:5,a:n}},xm=hm(1029),Cm=hm(1028),Pm=t((function(n,e,r){return 1===e?u(yr,n?xm:Cm,r):r})),Mm={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute mediump vec2 uv;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedUv = uv;\n        }\n    ",attributes:{position:"b3",uv:"M"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Tm=o((function(n,e,r,t){return u(pm,e,l((function(e,o,a,i,c,l,u,s){return d(Qd,f(Pm,i,t,s),Mm,gm,r,{bQ:n,b:a,c:o,d:l,e:e,f:c})})))})),ym={src:"\n        precision lowp float;\n        \n        uniform lowp vec3 constantColor;\n        \n        void main () {\n            gl_FragColor = vec4(constantColor, 1.0);\n        }\n    ",attributes:{},uniforms:{constantColor:"aD"}},Lm={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{position:"b3"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},wm=o((function(n,e,r,t){return u(pm,e,l((function(e,o,a,i,c,l,u,s){return d(Qd,f(Pm,i,t,s),Lm,ym,r,{aD:n,b:a,c:o,d:l,e:e,f:c})})))})),Sm=r((function(n,e){return{$:3,a:n,b:e}})),Nm={src:"\n        precision lowp float;\n        \n        uniform lowp vec3 constantColor;\n        uniform lowp float pointRadius;\n        uniform highp mat4 sceneProperties;\n        \n        float pointAlpha(float pointRadius, vec2 pointCoord) {\n            float pointSize = 2.0 * pointRadius;\n            float x = (pointSize + 2.0) * (pointCoord.s - 0.5);\n            float y = (pointSize + 2.0) * (pointCoord.t - 0.5);\n            float r = sqrt(x * x + y * y);\n            float innerRadius = pointRadius;\n            float outerRadius = pointRadius + 1.0;\n            if (r > outerRadius) {\n                return 0.0;\n            } else if (r > innerRadius) {\n                return outerRadius - r;\n            } else {\n                return 1.0;\n            }\n        }\n        \n        void main () {\n            float supersampling = sceneProperties[3][0];\n            float alpha = pointAlpha(pointRadius * supersampling, gl_PointCoord);\n            gl_FragColor = vec4(constantColor, alpha);\n        }\n    ",attributes:{},uniforms:{constantColor:"aD",pointRadius:"b2",sceneProperties:"e"}},$m={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform lowp float pointRadius;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            float supersampling = sceneProperties[3][0];\n            gl_PointSize = 2.0 * pointRadius * supersampling + 2.0;\n        }\n    ",attributes:{position:"b3"},uniforms:{modelMatrix:"b",modelScale:"c",pointRadius:"b2",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Hm=o((function(n,e,r,t){return u(Sm,r,l((function(r,o,a,i,c,l,u,f){return d(Qd,f,$m,Nm,t,{aD:n,b:a,c:o,b2:e,d:l,e:r,f:c})})))})),Dm={src:"\n        precision mediump float;\n        \n        uniform mediump vec3 emissiveColor;\n        uniform highp mat4 sceneProperties;\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{emissiveColor:"aU",sceneProperties:"e"}},zm=Mr,Im=a((function(n,e,r,t,o){return u(pm,r,l((function(r,a,i,c,l,s,b,v){return d(Qd,f(Pm,c,o,v),Lm,Dm,t,{aU:u(zm,e,n),b:i,c:a,d:s,e:r,f:l})})))})),_m={src:"\n        precision mediump float;\n        \n        uniform mediump vec3 emissiveColor;\n        uniform lowp float pointRadius;\n        uniform highp mat4 sceneProperties;\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        float pointAlpha(float pointRadius, vec2 pointCoord) {\n            float pointSize = 2.0 * pointRadius;\n            float x = (pointSize + 2.0) * (pointCoord.s - 0.5);\n            float y = (pointSize + 2.0) * (pointCoord.t - 0.5);\n            float r = sqrt(x * x + y * y);\n            float innerRadius = pointRadius;\n            float outerRadius = pointRadius + 1.0;\n            if (r > outerRadius) {\n                return 0.0;\n            } else if (r > innerRadius) {\n                return outerRadius - r;\n            } else {\n                return 1.0;\n            }\n        }\n        \n        void main () {\n            vec4 color = toSrgb(emissiveColor, sceneProperties);\n            float supersampling = sceneProperties[3][0];\n            float alpha = pointAlpha(pointRadius * supersampling, gl_PointCoord);\n            gl_FragColor = vec4(color.rgb, alpha);\n        }\n    ",attributes:{},uniforms:{emissiveColor:"aU",pointRadius:"b2",sceneProperties:"e"}},Gm=a((function(n,e,r,t,o){return u(Sm,t,l((function(t,a,i,c,l,f,s,b){return d(Qd,b,$m,_m,o,{aU:u(zm,e,n),b:i,c:a,b2:r,d:f,e:t,f:l})})))})),Am={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 materialColor;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{enabledLights:"T",lights12:"bo",lights34:"bW",lights56:"bX",lights78:"bY",materialColor:"cC",sceneProperties:"e",viewMatrix:"f"}},km={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n        }\n    ",attributes:{normal:"o",position:"b3"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Rm=o((function(n,e,r,t){return u(pm,e,l((function(e,o,a,i,c,l,u,s){var b=u.a,v=u.b;return d(Qd,f(Pm,i,t,s),km,Am,r,{T:v,bo:b.bo,bW:b.bW,bX:b.bX,bY:b.bY,cC:n,b:a,c:o,d:l,e:e,f:c})})))})),Fm={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D materialColorTexture;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n            vec3 materialColor = fromSrgb(texture2D(materialColorTexture, interpolatedUv).rgb);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{enabledLights:"T",lights12:"bo",lights34:"bW",lights56:"bX",lights78:"bY",materialColorTexture:"cD",normalMapTexture:"a$",sceneProperties:"e",useNormalMap:"a6",viewMatrix:"f"}},Vm={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        attribute mediump vec2 uv;\n        attribute highp vec3 tangent;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getWorldTangent(vec3 modelTangent, vec4 modelScale, mat4 modelMatrix) {\n            return (modelMatrix * vec4(safeNormalize(modelScale.xyz * modelTangent), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = uv;\n            interpolatedTangent = getWorldTangent(tangent, modelScale, modelMatrix);\n        }\n    ",attributes:{normal:"o",position:"b3",tangent:"ex",uv:"M"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Bm=i((function(n,e,r,t,o,a){return u(pm,t,l((function(t,i,c,l,u,s,b,v){var m=b.a,p=b.b;return d(Qd,f(Pm,l,a,v),Vm,Fm,o,{T:p,bo:m.bo,bW:m.bW,bX:m.bX,bY:m.bY,cD:n,b:c,c:i,a$:e,d:s,e:t,a6:r,f:u})})))})),Em={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D baseColorTexture;\n        uniform lowp vec4 constantBaseColor;\n        uniform mediump sampler2D roughnessTexture;\n        uniform lowp vec2 constantRoughness;\n        uniform mediump sampler2D metallicTexture;\n        uniform lowp vec2 constantMetallic;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getFloatValue(sampler2D texture, vec2 uv, vec2 constantValue) {\n            if (constantValue.y == 1.0) {\n                return constantValue.x;\n            } else {\n                vec4 textureColor = texture2D(texture, uv);\n                return dot(textureColor, vec4(0.2126, 0.7152, 0.0722, 0.0));\n            }\n        }\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 baseColor = fromSrgb(texture2D(baseColorTexture, interpolatedUv).rgb) * (1.0 - constantBaseColor.w) + constantBaseColor.rgb * constantBaseColor.w;\n            float roughness = getFloatValue(roughnessTexture, interpolatedUv, constantRoughness);\n            float metallic = getFloatValue(metallicTexture, interpolatedUv, constantMetallic);\n        \n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{baseColorTexture:"cg",constantBaseColor:"ck",constantMetallic:"cl",constantRoughness:"cm",enabledLights:"T",lights12:"bo",lights34:"bW",lights56:"bX",lights78:"bY",metallicTexture:"cG",normalMapTexture:"a$",roughnessTexture:"c2",sceneProperties:"e",useNormalMap:"a6",viewMatrix:"f"}},jm={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 baseColor;\n        uniform lowp float roughness;\n        uniform lowp float metallic;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{baseColor:"cf",enabledLights:"T",lights12:"bo",lights34:"bW",lights56:"bX",lights78:"bY",metallic:"cF",roughness:"c1",sceneProperties:"e",viewMatrix:"f"}},Wm=i((function(n,e,r,t,o,a){return u(pm,t,l((function(t,i,c,l,u,s,b,v){var m=b.a,p=b.b;return d(Qd,f(Pm,l,a,v),km,jm,o,{cf:n,T:p,bo:m.bo,bW:m.bW,bX:m.bX,bY:m.bY,cF:r,b:c,c:i,d:s,c1:e,e:t,f:u})})))})),Om=r((function(n,e){return{$:1,a:n,b:e}})),Ym=r((function(n,e){return e.$?L(e.a.C,1):L(n,0)})),Um=s(Dd,0,0,0,0),Xm=r((function(n,e){var r;return e.$?L(e.a.C,Um):L(n,s(Dd,Db(r=e.a),zb(r),Ib(r),1))})),qm=r((function(n,e){var r,t=L(n,e);return t.a.$?u(Om,L(r=t.a.a.C,Um),u(Ym,r,e)):t.b.$?u(Om,u(Xm,r=t.b.a.C,n),u(Ym,r,e)):{$:0,a:t.a.a}})),Km=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),Qm=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),Jm=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),Zm=u(nb,0,0),np=r((function(n,e){return e.$?L(e.a.C,Zm):L(n,u(nb,e.a,1))})),ep=o((function(n,e,r,t){var o,a=s(Jm,n,e,r,t);return a.a.$?s(Qm,L(o=a.a.a.C,Um),u(np,o,e),u(np,o,r),u(Ym,o,t)):a.b.$?s(Qm,u(Xm,o=a.b.a.C,n),L(o,Zm),u(np,o,r),u(Ym,o,t)):a.c.$?s(Qm,u(Xm,o=a.c.a.C,n),u(np,o,e),L(o,Zm),u(Ym,o,t)):a.d.$?s(Qm,u(Xm,o=a.d.a.C,n),u(np,o,e),u(np,o,r),L(o,1)):f(Km,a.a.a,a.b.a,a.c.a)})),rp={src:"\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        uniform mediump float backlight;\n        uniform highp mat4 sceneProperties;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            vec3 emissiveColor = fromSrgb(texture2D(colorTexture, interpolatedUv).rgb) * backlight;\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{backlight:"cc",colorTexture:"bQ",sceneProperties:"e"}},tp=a((function(n,e,r,t,o){return u(pm,r,l((function(r,a,i,c,l,u,s,b){return d(Qd,f(Pm,c,o,b),Mm,rp,t,{cc:e,bQ:n,b:i,c:a,d:u,e:r,f:l})})))})),op={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        attribute mediump vec2 uv;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = uv;\n            interpolatedTangent = vec3(0.0, 0.0, 0.0);\n        }\n    ",attributes:{normal:"o",position:"b3",uv:"M"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},ap=o((function(n,e,r,t){return u(pm,e,l((function(e,o,a,i,c,l,u,s){var b=u.a,v=u.b;return d(Qd,f(Pm,i,t,s),op,Fm,r,{T:v,bo:b.bo,bW:b.bW,bX:b.bX,bY:b.bY,cD:n,b:a,c:o,a$:n,d:l,e:e,a6:0,f:c})})))})),ip=function(n){return e(9,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return n(e,r,t,o,a,i,c,l,u)}}}}}}}}}))}((function(n,e,r,t,o,a,i,c,s){return u(pm,i,l((function(i,l,u,b,v,m,p,g){var h=p.a,x=p.b;return d(Qd,f(Pm,b,s,g),op,Em,c,{cg:n,ck:e,cl:a,cm:t,T:x,bo:h.bo,bW:h.bW,bX:h.bX,bY:h.bY,cG:o,b:u,c:l,a$:n,d:m,c2:r,e:i,a6:0,f:v})})))})),cp=t((function(n,e,r){return r>.5?e+(1-r)*(n-e):n+r*(e-n)})),lp=function(n){return f(xs,function(n){return f(cp,n.d6,n.d3,.5)}(n),function(n){return f(cp,n.d7,n.d4,.5)}(n),function(n){return f(cp,n.d8,n.d5,.5)}(n))},up=function(n){var e=xb(n),r=e.a,t=e.b,o=e.c;return{eP:lp(n),e3:r/2,e4:t/2,e5:o/2}},fp=r((function(n,e){switch(n.$){case 0:if(n.b.$){var r=n.b.a.C;switch(e.$){case 0:case 1:case 2:case 3:case 4:return mm;case 5:case 6:case 7:return o=e.c,a=e.d,s(Tm,r,up(G=e.a),o,a);case 8:case 9:default:return mm}}else{var t=n.b.a;switch(e.$){case 0:return mm;case 1:var o=e.c,a=e.d;return s(wm,t,up(G=e.a),o,a);case 2:case 3:case 4:return o=e.c,a=e.d,s(wm,t,up(G=e.a),o,a);case 5:case 6:case 7:return o=e.c,a=e.d,s(wm,t,up(G=e.a),o,a);case 8:case 9:return o=e.c,s(wm,t,up(G=e.a),o,0);default:return o=e.d,s(Hm,t,e.b,up(G=e.a),o)}}case 1:if(n.b.$)switch(r=n.b.a.C,c=n.c,e.$){case 0:case 1:case 2:case 3:case 4:return mm;case 5:case 6:case 7:return o=e.c,a=e.d,d(tp,r,c,up(G=e.a),o,a);case 8:case 9:default:return mm}else{var i=n.b.a,c=n.c;switch(e.$){case 0:return mm;case 1:case 2:case 3:case 4:case 5:case 6:case 7:return o=e.c,a=e.d,d(Im,i,c,up(G=e.a),o,a);case 8:case 9:return o=e.c,d(Im,i,c,up(G=e.a),o,0);default:return o=e.d,d(Gm,i,c,e.b,up(G=e.a),o)}}case 2:var v=u(qm,n.b,n.c);if(v.$){var m=v.a.a,p=v.b,g=p.a,h=p.b;switch(e.$){case 0:case 1:case 2:case 3:case 4:case 5:return mm;case 6:return o=e.c,C=e.d,s(ap,m,up(G=e.a),o,C);case 7:return o=e.c,C=e.d,b(Bm,m,g,h,up(G=e.a),o,C);case 8:case 9:default:return mm}}else{var x=v.a;switch(e.$){case 0:case 1:return mm;case 2:o=e.c;var C=e.d;return s(Rm,x,up(G=e.a),o,C);case 3:return mm;case 4:return o=e.c,C=e.d,s(Rm,x,up(G=e.a),o,C);case 5:return mm;case 6:case 7:return o=e.c,C=e.d,s(Rm,x,up(G=e.a),o,C);case 8:case 9:default:return mm}}default:var P=s(ep,n.b,n.c,n.d,n.e);if(P.$){var M=P.a,T=M.a,y=M.b,L=P.b,w=L.a,S=L.b,N=P.c,$=N.a,H=N.b,D=P.d;switch(g=D.a,h=D.b,e.$){case 0:case 1:case 2:case 3:case 4:case 5:return mm;case 6:return o=e.c,a=e.d,function(n,e,r,t,o,a,i,c,l,u){return 9===n.a?n.f(e,r,t,o,a,i,c,l,u):n(e)(r)(t)(o)(a)(i)(c)(l)(u)}(ip,T,y,w,S,$,H,up(G=e.a),o,a);case 7:return G=e.a,o=e.c,a=e.d,function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(s){return function(b){return function(v){return u(pm,s,l((function(l,u,s,m,p,g,h,x){var C=h.a,P=h.b;return d(Qd,f(Pm,m,v,x),Vm,Em,b,{cg:n,ck:e,cl:a,cm:t,T:P,bo:C.bo,bW:C.bW,bX:C.bX,bY:C.bY,cG:o,b:s,c:u,a$:i,d:g,c2:r,e:l,a6:c,f:p})})))}}}}}}}}}}}(T)(y)(w)(S)($)(H)(g)(h)(up(G))(o)(a);case 8:case 9:default:return mm}}else{var z=P.a,I=P.b,_=P.c;switch(e.$){case 0:case 1:return mm;case 2:return o=e.c,a=e.d,b(Wm,z,I,_,up(G=e.a),o,a);case 3:return mm;case 4:return o=e.c,a=e.d,b(Wm,z,I,_,up(G=e.a),o,a);case 5:return mm;case 6:return o=e.c,a=e.d,b(Wm,z,I,_,up(G=e.a),o,a);case 7:var G;return o=e.c,a=e.d,b(Wm,z,I,_,up(G=e.a),o,a);case 8:case 9:default:return mm}}}})),sp=function(n){return n.bG},dp=function(n){return n.bH},bp=function(n){return n.bI},vp=function(n){var e=n,r=bp(e.dk),t=dp(e.dk),o=sp(e.dk),a=bp(e.dj),i=dp(e.dj),c=sp(e.dj),l=bp(e.di),u=dp(e.di),f=sp(e.di);return f*i*r+u*a*o+l*c*t-l*i*o-u*c*r-f*a*t>0},mp=r((function(n,e){return{$:5,a:n,b:e}})),pp=r((function(n,e){var r=e;switch(r.$){case 0:return mm;case 5:var t=r.b;return u(mp,u(Rd,r.a,n),t);case 1:case 3:case 2:default:return u(mp,n,r)}})),gp=r((function(n,e){return u(pp,function(n){var e=Hu(n),r=ku(n),t=Au(n),o=Gu(n);return{dG:vp(n),r:o.bG,s:o.bH,t:o.bI,u:t.bG,v:t.bH,w:t.bI,x:r.bG,y:r.bH,z:r.bI,I:e.bG,J:e.bH,K:e.bI,b7:1}}(n),e)})),hp=function(n){return{$:2,a:n}},xp=r((function(n,e){var r=n.a,t=n.b,o=n.c,a=e.eP;return{eP:{bG:r*a.bG,bH:t*a.bH,bI:o*a.bI},e3:r*e.e3,e4:t*e.e4,e5:o*e.e5}})),Cp=function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){var f,s,d={bG:(s=t)[0],bH:s[1],bI:s[2],eC:s[3]},b=(f={eC:d.eC,bG:d.bG*n.a,bH:d.bH*n.b,bI:d.bI*n.c},new Float64Array([f.bG,f.bH,f.bI,f.eC]));return m(e,r,b,o,a,i,c,l,u)}}}}}}}}}},Pp=r((function(n,e){switch(e.$){case 0:return vm;case 5:return u(mp,e.a,u(Pp,n,e.b));case 1:var r=e.b;return u(pm,u(xp,n,e.a),u(Cp,n,r));case 3:return e;case 2:return hp(u(Cp,n,r=e.a));default:var t=e.a;return _b(u(Et,Pp(n),t))}})),Mp=r((function(n,e){return u(Pp,n,e)})),Tp={src:"\n        precision lowp float;\n        \n        void main () {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        }\n    ",attributes:{},uniforms:{}},yp=f(ob,{cB:0,c_:0,dh:15},{bh:lb,bw:Xd,bJ:lb,bK:7683},{bh:lb,bw:Xd,bJ:lb,bK:7682}),Lp=f(ob,{cB:0,c_:0,dh:15},{bh:lb,bw:Xd,bJ:lb,bK:7682},{bh:lb,bw:Xd,bJ:lb,bK:7683}),wp=r((function(n,e){return u(yr,n?Lp:yp,e)})),Sp={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 shadowVertexPosition(vec3 position, vec3 normal, mat4 shadowLight, vec4 modelScale, mat4 modelMatrix, mat4 viewMatrix, mat4 projectionMatrix, mat4 sceneProperties) {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            vec3 worldNormal = getWorldNormal(normal, vec4(modelScale.xyz, 1.0), modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 directionToLight = getDirectionToLight(worldPosition.xyz, xyz_type, rgb_parameter);\n            vec3 offset = vec3(0.0, 0.0, 0.0);\n            float sceneDiameter = sceneProperties[3][1];\n            if (dot(directionToLight, worldNormal) <= 0.0) {\n                offset = -sceneDiameter * directionToLight;\n            } else {\n                offset = -0.001 * sceneDiameter * directionToLight;\n            }\n            vec4 offsetPosition = worldPosition + vec4(offset, 0.0);\n            return projectionMatrix * (viewMatrix * offsetPosition);\n        }\n        \n        void main () {\n            gl_Position = shadowVertexPosition(\n                position,\n                normal,\n                shadowLight,\n                modelScale,\n                modelMatrix,\n                viewMatrix,\n                projectionMatrix,\n                sceneProperties\n            );\n        }\n    ",attributes:{normal:"o",position:"b3"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"b8",viewMatrix:"f"}},Np=function(n){var e=function(n){if(n.$){var e=n.c;return Rr(l((function(n,r,t,o,a,i,c,l){return d(Qd,u(wp,o,l),Sp,Tp,e,{b:t,c:r,d:i,e:n,b8:c,f:a})})))}return Fr}(n);return e.$?mm:hp(e.a)},$p=o((function(n,e,r,t){var o,a=u(fp,r,Bv),i=(o=L(n,e)).a?o.b?Ab(z([a,Np(bm)])):a:o.b?Np(bm):mm,c=As(t),l=c.a,f=c.b,s=c.c;return u(gp,Gs(t),u(Mp,w(l,f,s),i))})),Hp=r((function(n,e){return s($p,!0,!0,n,e)})),Dp=function(n){return{$:0,a:n}},zp=r((function(n,e){return{$:0,a:n,b:e}})),Ip=function(n){return Du(n)},_p=r((function(n,e){var r=n.b3;return u(yr,{o:zv(n.o),b3:Dv(r)},e)})),Gp=c((function(n,e,r,t,o,a,i){for(;;){if(!i.b)return Sv({d3:e,d4:t,d5:a,d6:n,d7:r,d8:o});var c=i.a,l=i.b,f=Ib(c.b3),s=zb(c.b3),d=Db(c.b3);n=u(ld,n,d),e=u(st,e,d),r=u(ld,r,s),t=u(st,t,s),o=u(ld,o,f),a=u(st,a,f),i=l}})),Ap=r((function(n,e){var r=Ib(n.b3),t=zb(n.b3),o=Db(n.b3);return v(Gp,o,o,t,t,r,r,e)})),kp=r((function(n,e){var r=n.dj,t=n.di;return{bG:e.bG*t.bG+e.bH*r.bG,bH:e.bG*t.bH+e.bH*r.bH,bI:e.bG*t.bI+e.bH*r.bI}})),Rp=function(n){return zu(n)},Fp=function(n){return 6.283185307179586*n},Vp=nf({cL:Zu,di:rf,dj:bd}),Bp=(na=u(_f,72,Fp(1)),ea=tf,ra=Af,oa=f(xs,0,0,ta=u(Lf,.5,1)),ia=f(xs,0,0,aa=u(Lf,-.5,1)),Mv(function(n){var e=f(wr,_p,$,Qv(n));if(e.b){var r=e.a,t=e.b,o=u(tm,e,Ov(n));return s(gv,u(Ap,r,t),n,o,0)}return Tv}(sm(Td(u(Et,(function(n){var e=u(Lf,n,na),r=u(kp,Vp,Yf(e)),t=u(Lf,Ip(e),1),o=u(Lf,Rp(e),1),a=f(xs,t,o,ta),i=f(xs,t,o,aa),c=u(Lf,u(vc,72,n+1),na),l=u(kp,Vp,Yf(c)),s=u(Lf,Ip(c),1),d=u(Lf,Rp(c),1),b=f(xs,s,d,aa),v=f(xs,s,d,ta);return z([w({o:ra,b3:ia},{o:ra,b3:b},{o:ra,b3:i}),w({o:r,b3:i},{o:l,b3:b},{o:l,b3:v}),w({o:r,b3:i},{o:l,b3:v},{o:r,b3:a}),w({o:ea,b3:oa},{o:ea,b3:a},{o:ea,b3:v})])}),u(Xr,0,71))))))),Ep=dm(Bp),jp=o((function(n,e,r,t){var o,a=function(n){var e,r,t=Vu(n),o=L(r=function(n){var e=n,r=Cc(e.bI),t=Cc(e.bH),o=Cc(e.bG);if(1>T(o,t)){if(1>T(o,r)){var a=If(e.bI*e.bI+e.bH*e.bH);return{bG:0,bH:-e.bI/a,bI:e.bH/a}}return a=If(e.bH*e.bH+e.bG*e.bG),{bG:-e.bH/a,bH:e.bG/a,bI:0}}return 1>T(t,r)?(a=If(e.bI*e.bI+e.bG*e.bG),{bG:e.bI/a,bH:0,bI:-e.bG/a}):(a=If(e.bG*e.bG+e.bH*e.bH),{bG:-e.bH/a,bH:e.bG/a,bI:0})}(e=t),{bG:e.bH*r.bI-e.bI*r.bH,bH:e.bI*r.bG-e.bG*r.bI,bI:e.bG*r.bH-e.bH*r.bG}),a=o.a,i=o.b;return{cL:wf(n),di:a,dj:i,dk:t}}(function(n){return n.l}(t)),i=u(fp,r,Bp),c=(o=L(n,e)).a?o.b?Ab(z([i,Np(Ep)])):i:o.b?Np(Ep):mm,l=function(n){return n.fs}(t),f=function(n){return n.fe}(t);return u(gp,a,u(Mp,w(l,l,f),c))})),Wp=r((function(n,e){return s(jp,!0,!0,n,e)})),Op={src:"\n        precision highp float;\n        \n        attribute lowp float triangleVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 triangleVertexPositions;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleVertex), triangleVertexPositions, position, normal);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{triangleVertex:"da"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",triangleVertexPositions:"bC",viewMatrix:"f"}},Yp={src:"\n        precision highp float;\n        \n        attribute lowp float triangleVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 triangleVertexPositions;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleVertex), triangleVertexPositions, position, normal);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n        }\n    ",attributes:{triangleVertex:"da"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",triangleVertexPositions:"bC",viewMatrix:"f"}},Up=function(n){var e=n.a,r=n.b,t=n.c;return Fd({dO:e.bG,dP:r.bG,dQ:t.bG,dR:0,dS:e.bH,dT:r.bH,dU:t.bH,dV:0,dW:e.bI,dX:r.bI,dY:t.bI,dZ:0,d_:0,d$:0,d0:0,d1:0})},Xp=Fv(z([w({da:0},{da:1},{da:2})])),qp=r((function(n,e){var r=$v(e),t=up(r);switch(n.$){case 0:if(n.b.$)return mm;var o=n.b.a;return u(pm,t,l((function(n,r,t,a,i,c,l,u){return d(Qd,f(Pm,a,0,u),Op,ym,Xp,{aD:o,b:t,c:r,d:c,e:n,bC:Up(e),f:i})})));case 1:if(n.b.$)return mm;var a=n.b.a,i=n.c;return u(pm,t,l((function(n,r,t,o,c,l,s,b){return d(Qd,f(Pm,o,0,b),Op,Dm,Xp,{aU:u(zm,i,a),b:t,c:r,d:l,e:n,bC:Up(e),f:c})})));case 2:var c=u(qm,n.b,n.c);if(c.$)return mm;var b=c.a;return u(pm,t,l((function(n,r,t,o,a,i,c,l){var u=c.a,s=c.b;return d(Qd,f(Pm,o,0,l),Yp,Am,Xp,{T:s,bo:u.bo,bW:u.bW,bX:u.bX,bY:u.bY,cC:b,b:t,c:r,d:i,e:n,bC:Up(e),f:a})})));default:var v=s(ep,n.b,n.c,n.d,n.e);if(v.$)return mm;var m=v.a,p=v.b,g=v.c;return u(pm,t,l((function(n,r,t,o,a,i,c,l){var u=c.a,s=c.b;return d(Qd,f(Pm,o,0,l),Yp,jm,Xp,{cf:m,T:s,bo:u.bo,bW:u.bW,bX:u.bX,bY:u.bY,cF:g,b:t,c:r,d:i,c1:p,e:n,bC:Up(e),f:a})})))}})),Kp=(ca=z([{a5:u(nb,0,1)},{a5:u(nb,1,1)},{a5:u(nb,2,1)},{a5:u(nb,0,-1)},{a5:u(nb,1,-1)},{a5:u(nb,2,-1)}]),la=z([w(0,1,2),w(3,5,4),w(3,4,1),w(3,1,0),w(4,5,2),w(4,2,1),w(5,3,0),w(5,0,2)]),u(tm,ca,la)),Qp={src:"\n        precision highp float;\n        \n        attribute highp vec2 triangleShadowVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        uniform highp mat4 triangleVertexPositions;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 shadowVertexPosition(vec3 position, vec3 normal, mat4 shadowLight, vec4 modelScale, mat4 modelMatrix, mat4 viewMatrix, mat4 projectionMatrix, mat4 sceneProperties) {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            vec3 worldNormal = getWorldNormal(normal, vec4(modelScale.xyz, 1.0), modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 directionToLight = getDirectionToLight(worldPosition.xyz, xyz_type, rgb_parameter);\n            vec3 offset = vec3(0.0, 0.0, 0.0);\n            float sceneDiameter = sceneProperties[3][1];\n            if (dot(directionToLight, worldNormal) <= 0.0) {\n                offset = -sceneDiameter * directionToLight;\n            } else {\n                offset = -0.001 * sceneDiameter * directionToLight;\n            }\n            vec4 offsetPosition = worldPosition + vec4(offset, 0.0);\n            return projectionMatrix * (viewMatrix * offsetPosition);\n        }\n        \n        void main () {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleShadowVertex.x), triangleVertexPositions, position, normal);\n            normal *= triangleShadowVertex.y;\n            gl_Position = shadowVertexPosition(\n                position,\n                normal,\n                shadowLight,\n                modelScale,\n                modelMatrix,\n                viewMatrix,\n                projectionMatrix,\n                sceneProperties\n            );\n        }\n    ",attributes:{triangleShadowVertex:"a5"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"b8",triangleVertexPositions:"bC",viewMatrix:"f"}},Jp=function(n){return hp(l((function(e,r,t,o,a,i,c,l){return d(Qd,u(wp,o,l),Qp,Tp,Kp,{b:t,c:r,d:i,e:e,b8:c,bC:Up(n),f:a})})))},Zp=o((function(n,e,r,t){var o=u(qp,r,t),a=L(n,e);return a.a?a.b?Ab(z([o,Jp(t)])):o:a.b?Jp(t):mm})),ng=r((function(n,e){return s(Zp,!0,!0,n,e)})),eg=r((function(n,e){var r=Zf(e),t=Zf(n),o=Jf(e),a=Jf(n),i=Kf(e),c=Kf(n);return{d3:u(yb,c,i),d4:u(yb,a,o),d5:u(yb,t,r),d6:u(Lb,c,i),d7:u(Lb,a,o),d8:u(Lb,t,r)}})),rg={src:"\n        precision highp float;\n        \n        attribute lowp float lineSegmentVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp vec3 lineSegmentStartPoint;\n        uniform highp vec3 lineSegmentEndPoint;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = (1.0 - lineSegmentVertex) * lineSegmentStartPoint + lineSegmentVertex * lineSegmentEndPoint;\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{lineSegmentVertex:"dN"},uniforms:{lineSegmentEndPoint:"dL",lineSegmentStartPoint:"dM",modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},tg=r((function(n,e){return{$:1,a:n,b:e}}))({dv:2,dF:0,ea:1})(z([L({dN:0},{dN:1})])),og=r((function(n,e){var r,t=u(eg,(r=e).a,r.b),o=up(t),a=e.a,i=e.b;switch(n.$){case 0:if(n.b.$)return mm;var c=n.b.a;return u(pm,o,l((function(n,e,r,t,o,l,u,f){return d(Qd,f,rg,ym,tg,{aD:c,dL:Dv(i),dM:Dv(a),b:r,c:e,d:l,e:n,f:o})})));case 1:if(n.b.$)return mm;c=n.b.a;var f=n.c;return u(pm,o,l((function(n,e,r,t,o,l,s,b){return d(Qd,b,rg,Dm,tg,{aU:u(zm,f,c),dL:Dv(i),dM:Dv(a),b:r,c:e,d:l,e:n,f:o})})));case 2:default:return mm}})),ag=r((function(n,e){return u(og,n,e)})),ig=t((function(n,e,r){return{$:2,a:n,b:e,c:r}})),cg=function(n){return f(tv,0,1,n>.04045?u(Oi,(n+.055)/1.055,2.4):n/12.92)},lg=function(n){return f(ig,0,Dp(function(n){var e=gc(n),r=e.cp,t=e.ch;return f(Ad,cg(e.cZ),cg(r),cg(t))}(n)),Dp(0))},ug=r((function(n,e){return n/e})),fg=a((function(n,e,r,t,o){for(;;){var a=t(e/r),i=u(yr,a,o);if(P(e,n))return i;n=n,e-=1,r=r,t=t,o=i}})),sg=r((function(n,e){return 1>n?$:d(fg,0,n,n,e,$)})),dg=r((function(n,e){var r=n.b3,t=n.M,o=t.a,a=t.b;return u(yr,{o:zv(n.o),b3:Dv(r),M:u(nb,o,a)},e)})),bg=r((function(n,e){var r=n,t=e,o=Du(t);return{bG:o*Du(r),bH:o*zu(r),bI:zu(t)}})),vg=(ua=u(Xr,0,71),fa=u(sg,72,u(cp,0,Fp(1))),sa=rt(36),da=u(Xr,0,sa-1),ba=u(sg,sa,u(cp,Lu(90),Lu(-90))),va=nm(Td(u(Et,(function(n){return u(Et,(function(e){return{o:u(bg,n,e),b3:f(xs,u(Lf,Ip(e)*Ip(n),1),u(Lf,Ip(e)*Rp(n),1),u(Lf,Rp(e),1)),M:L(u(ug,n,Fp(1)),u(ug,u(Sb,Lu(90),e),Lu(180)))}}),ba)}),fa))),ma=r((function(n,e){return n*(sa+1)+e})),pa=Td(u(Et,(function(n){return Td(u(Et,(function(e){var r=u(ma,n+1,e),t=u(ma,n,e),o=u(ma,n+1,e+1),a=u(ma,n,e+1);return z([w(a,o,r),w(a,r,t)])}),da))}),ua)),Mv(function(n){var e=f(wr,dg,$,Qv(n));if(e.b){var r=e.a,t=e.b,o=u(tm,e,Ov(n));return s(hv,u(Ap,r,t),n,o,0)}return Tv}(u(rm,va,pa)))),mg=r((function(n,e){for(;;){var r=u(vc,144,2*n+3),t=u(vc,144,2*n+2),o=2*n+1,a=2*n,i=u(yr,w(144,a,t),u(yr,w(a,r,t),u(yr,w(a,o,r),u(yr,w(o,145,r),e))));if(!n)return i;n-=1,e=i}})),pg=t((function(n,e,r){return r>.5?e+(1-r)*(n-e):n+r*(e-n)})),gg=(ga=u(r((function(n,e){for(;;){var r=f(pg,0,6.283185307179586,n/72),t=u(yr,{bM:r,b$:0,b6:1},u(yr,{bM:r,b$:1,b6:1},e));if(!n)return t;n-=1,e=t}})),71,z([{bM:0,b$:0,b6:0},{bM:0,b$:1,b6:0}])),u(tm,ga,u(mg,71,$))),hg={src:"\n        precision highp float;\n        \n        attribute highp float angle;\n        attribute highp float offsetScale;\n        attribute highp float radiusScale;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const lowp float kPerspectiveProjection = 0.0;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec3 perpendicularTo(vec3 d) {\n            float absX = abs(d.x);\n            float absY = abs(d.y);\n            float absZ = abs(d.z);\n            if (absX <= absY) {\n                if (absX <= absZ) {\n                    float scale = 1.0 / length(d.zy);\n                    return vec3(0.0, -d.z * scale, d.y * scale);\n                } else {\n                    float scale = 1.0 / length(d.xy);\n                    return vec3(-d.y * scale, d.x * scale, 0.0);\n                }\n            } else {\n                if (absY <= absZ) {\n                    float scale = 1.0 / length(d.xz);\n                    return vec3(d.z * scale, 0.0, -d.x * scale);\n                } else {\n                    float scale = 1.0 / length(d.xy);\n                    return vec3(-d.y * scale, d.x * scale, 0.0);\n                }\n            }\n        }\n        \n        void main () {\n            vec4 worldCenter = getWorldPosition(vec3(0.0, 0.0, 0.0), modelScale, modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 zDirection = getDirectionToLight(worldCenter.xyz, xyz_type, rgb_parameter);\n            vec3 xDirection = perpendicularTo(zDirection);\n            vec3 yDirection = cross(zDirection, xDirection);\n            float r = modelScale.x;\n            float adjustedRadius = r;\n            float zOffset = 0.0;\n            if (xyz_type.w == kPointLight) {\n                float distanceToLight = length(xyz_type.xyz - worldCenter.xyz);\n                float rSquared = r * r;\n                zOffset = rSquared / distanceToLight;\n                float zSquared = zOffset * zOffset;\n                adjustedRadius = sqrt(rSquared - zSquared) * radiusScale;\n            }\n            vec3 worldPosition =\n                worldCenter.xyz\n                    + zDirection * zOffset\n                    + xDirection * adjustedRadius * cos(angle)\n                    + yDirection * adjustedRadius * sin(angle);\n            vec3 directionToLight = getDirectionToLight(worldPosition, xyz_type, rgb_parameter);\n            float sceneDiameter = sceneProperties[3][1];\n            vec3 offset = -sceneDiameter * offsetScale * directionToLight;\n            vec4 offsetPosition = vec4(worldPosition + offset, 1.0);\n            gl_Position = projectionMatrix * (viewMatrix * offsetPosition);\n        }\n    ",attributes:{angle:"bM",offsetScale:"b$",radiusScale:"b6"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"b8",viewMatrix:"f"}},xg=function(){return hp(l((function(n,e,r,t,o,a,i,c){return d(Qd,u(wp,!0,c),hg,Tp,gg,{aD:f(Ad,0,0,1),b:r,c:e,d:a,e:n,b8:i,f:o})})))},Cg=r((function(n,e){return u(pp,function(n){return{dG:!0,r:1,s:0,t:0,u:0,v:1,w:0,x:0,y:0,z:1,I:n.bG,J:n.bH,K:n.bI,b7:1}}(n),e)})),Pg=o((function(n,e,r,t){var o,a=u(fp,r,vg),i=(o=L(n,e)).a?o.b?Ab(z([a,xg()])):a:o.b?xg():mm,c=js(t);return u(Cg,u(_v,Zu,Es(t)),u(Mp,w(c,c,c),i))})),Mg=r((function(n,e){return s(Pg,!0,!0,n,e)})),Tg=function(n){switch(n.$){case 0:var e=n.b;return z([u(Hp,lg(n.a),e)]);case 1:var r=n.b;return z([u(ng,lg(n.a),r)]);case 3:var t=n.b;return z([u(Mg,lg(n.a),t)]);case 2:var o=n.b;return z([u(Wp,lg(n.a),o)]);case 4:var a=n.b;return z([u(ag,(i=n.a,u(zp,0,Dp(function(n){var e=gc(n);return f(Ad,e.cZ,e.cp,e.ch)}(i)))),a)]);default:return u(yd,Tg,n.a)}var i},yg=r((function(n,e){return function(n){var e,r=u(Zb,n.fw,{ci:iv,eT:n.fD,cr:8e4}),t=rv({ci:av,cr:2e4,ca:n.ca}),o=rv({ci:Jb,cr:15e3,ca:Ff(n.ca)}),a=f(vv,r,t,o);return function(n){return u(Qb,{eE:n.eE,dn:n.dn,eM:n.eM,dr:n.dr,du:n.du},z([{dy:n.dy,e_:n.e_,fg:n.fg,fG:n.fG,fL:n.fL}]))}({eE:(e=n.cn,{$:2,a:e}),dn:n.dn,eM:n.eM,dr:n.dr,du:n.du,dy:n.dy,e_:1.2*u(Oi,2,15),fg:a,fG:nv,fL:Jb})}({dn:n.eJ,eM:n.eM,dr:.005,cn:n.cn,du:L(Yi(n.ac.dg),Yi(n.ac.cq)),dy:(r=e,u(yd,Tg,r)),fw:!0,fD:u(bg,n.fC,n.fE),ca:of});var r})),Lg=r((function(n,e){return u(yg,{eJ:u(Ss,"background color",n),eM:cf(n),cn:n.cn,ac:n.ac,fC:u(yu,"sunlight azimuth",n),fE:u(yu,"sunlight elevation",n)},z([id(n),u(gd,n,e)]))}));ha={Main:{init:s(su,r((function(n,e){return u(St,z([u(pl,"width","100%")]),z([ss,u(Lg,n,e)]))})),us,Pu,(function(){return{aK:du,bF:mu}}))(u(Ct,(function(n){return Lt({cn:n})}),u(Pt,"devicePixelRatio",Mt)))(0)}},n.Elm?function n(e,r){for(var t in r)t in e?"init"==t?C(6):n(e[t],r[t]):e[t]=r[t]}(n.Elm,ha):n.Elm=ha}(n);const e=n.Elm.Main.init({node:document.getElementById("elm-node"),flags:{devicePixelRatio:window.devicePixelRatio}});function r(n){const e=[];for(let r=0;r<n.length;r++)e.push({identifier:n[r].identifier,pageX:n[r].pageX,pageY:n[r].pageY});return e}window.addEventListener("touchstart",(n=>{e.ports.touchStart.send(r(n.changedTouches))})),window.addEventListener("touchmove",(n=>{e.ports.touchMove.send(r(n.changedTouches))})),window.addEventListener("touchend",(n=>{e.ports.touchEnd.send(r(n.changedTouches))})),window.addEventListener("touchcancel",(n=>{e.ports.touchCancel.send(r(n.changedTouches))}))}();
//# sourceMappingURL=index.d1b700f1.js.map
