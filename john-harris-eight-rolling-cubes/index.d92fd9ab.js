!function(){var n={};!function(n){function e(n,e,r){return r.a=n,r.f=e,r}function r(n){return e(2,n,(function(e){return function(r){return n(e,r)}}))}function t(n){return e(3,n,(function(e){return function(r){return function(t){return n(e,r,t)}}}))}function o(n){return e(4,n,(function(e){return function(r){return function(t){return function(o){return n(e,r,t,o)}}}}))}function a(n){return e(5,n,(function(e){return function(r){return function(t){return function(o){return function(a){return n(e,r,t,o,a)}}}}}))}function i(n){return e(6,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return n(e,r,t,o,a,i)}}}}}}))}function c(n){return e(7,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return n(e,r,t,o,a,i,c)}}}}}}}))}function l(n){return e(8,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return n(e,r,t,o,a,i,c,l)}}}}}}}}))}function u(n,e,r){return 2===n.a?n.f(e,r):n(e)(r)}function f(n,e,r,t){return 3===n.a?n.f(e,r,t):n(e)(r)(t)}function s(n,e,r,t,o){return 4===n.a?n.f(e,r,t,o):n(e)(r)(t)(o)}function d(n,e,r,t,o,a){return 5===n.a?n.f(e,r,t,o,a):n(e)(r)(t)(o)(a)}function b(n,e,r,t,o,a,i){return 6===n.a?n.f(e,r,t,o,a,i):n(e)(r)(t)(o)(a)(i)}function v(n,e,r,t,o,a,i,c){return 7===n.a?n.f(e,r,t,o,a,i,c):n(e)(r)(t)(o)(a)(i)(c)}function m(n,e,r,t,o,a,i,c,l){return 8===n.a?n.f(e,r,t,o,a,i,c,l):n(e)(r)(t)(o)(a)(i)(c)(l)}var p=t((function(n,e,r){for(var t=Array(n),o=0;n>o;o++)t[o]=r(e+o);return t})),g=r((function(n,e){for(var r=Array(n),t=0;n>t&&e.b;t++)r[t]=e.a,e=e.b;return r.length=t,L(r,e)})),h=r((function(n,e){return e[n]})),x=t((function(n,e,r){for(var t=r.length-1;t>=0;t--)e=u(n,r[t],e);return e}));function C(n){throw Error("https://github.com/elm/core/blob/1.0.0/hints/"+n+".md")}function M(n,e){for(var r,t=[],o=P(n,e,0,t);o&&(r=t.pop());o=P(r.a,r.b,0,t));return o}function P(n,e,r,t){if(n===e)return!0;if("object"!=typeof n||null===n||null===e)return"function"==typeof n&&C(5),!1;if(r>100)return t.push(L(n,e)),!0;for(var o in 0>n.$&&(n=Sr(n),e=Sr(e)),n)if(!P(n[o],e[o],r+1,t))return!1;return!0}function T(n,e,r){if("object"!=typeof n)return n===e?0:e>n?-1:1;if(void 0===n.$)return(r=T(n.a,e.a))||(r=T(n.b,e.b))?r:T(n.c,e.c);for(;n.b&&e.b&&!(r=T(n.a,e.a));n=n.b,e=e.b);return r||(n.b?1:e.b?-1:0)}var y=r((function(n,e){var r=T(n,e);return 0>r?Fr:r?Nr:Er}));function L(n,e){return{a:n,b:e}}function D(n,e,r){return{a:n,b:e,c:r}}function w(n,e){var r={};for(var t in n)r[t]=n[t];for(var t in e)r[t]=e[t];return r}function S(n,e){if("string"==typeof n)return n+e;if(!n.b)return e;var r=N(n.a,e);n=n.b;for(var t=r;n.b;n=n.b)t=t.b=N(n.a,e);return r}var E={$:0};function N(n,e){return{$:1,a:n,b:e}}var F=r(N);function $(n){for(var e=E,r=n.length;r--;)e=N(n[r],e);return e}function z(n){for(var e=[];n.b;n=n.b)e.push(n.a);return e}var _=t((function(n,e,r){for(var t=[];e.b&&r.b;e=e.b,r=r.b)t.push(u(n,e.a,r.a));return $(t)})),A=r((function(n,e){return n*e})),V=r(Math.pow),R=r((function(n,e){var r=e%n;return 0===n?C(11):r>0&&0>n||0>r&&n>0?r+n:r})),B=Math.cos,k=Math.sin,I=Math.tan,j=Math.ceil,H=Math.floor,W=Math.round,U=Math.sqrt,O=Math.log,Y=isNaN,G=r((function(n,e){return n+e})),q=t((function(n,e,r){for(var t=r.length;t--;){var o=r[t],a=r.charCodeAt(t);56320>a||a>57343||(o=r[--t]+o),e=u(n,o,e)}return e})),J=r((function(n,e){return e.split(n)})),X=r((function(n,e){return e.join(n)})),Q=t((function(n,e,r){return r.slice(n,e)})),Z=r((function(n,e){return 0===e.indexOf(n)}));function K(n){return n+""}function nn(n){return{$:2,b:n}}var en=nn((function(n){return"number"!=typeof n?hn("an INT",n):n>-2147483647&&2147483647>n&&(0|n)===n?Vr(n):!isFinite(n)||n%1?hn("an INT",n):Vr(n)})),rn=nn((function(n){return"boolean"==typeof n?Vr(n):hn("a BOOL",n)})),tn=nn((function(n){return"number"==typeof n?Vr(n):hn("a FLOAT",n)})),on=(nn((function(n){return Vr(n)})),nn((function(n){return"string"==typeof n?Vr(n):n instanceof String?Vr(n+""):hn("a STRING",n)}))),an=r((function(n,e){return{$:6,d:n,b:e}}));function cn(n,e){return{$:9,f:n,g:e}}var ln=r((function(n,e){return{$:10,b:e,h:n}})),un=r((function(n,e){return cn(n,[e])})),fn=t((function(n,e,r){return cn(n,[e,r])})),sn=o((function(n,e,r,t){return cn(n,[e,r,t])})),dn=r((function(n,e){try{return vn(n,JSON.parse(e))}catch(n){return $r(u(zr,"This is not valid JSON! "+n.message,e))}})),bn=r((function(n,e){return vn(n,e)}));function vn(n,e){switch(n.$){case 2:return n.b(e);case 5:return null===e?Vr(n.c):hn("null",e);case 3:return pn(e)?mn(n.b,e,$):hn("a LIST",e);case 4:return pn(e)?mn(n.b,e,gn):hn("an ARRAY",e);case 6:var r=n.d;if("object"!=typeof e||null===e||!(r in e))return hn("an OBJECT with a field named `"+r+"`",e);var t=vn(n.b,e[r]);return xt(t)?t:$r(u(_r,r,t.a));case 7:var o=n.e;return pn(e)?e.length>o?(t=vn(n.b,e[o]),xt(t)?t:$r(u(Ar,o,t.a))):hn("a LONGER array. Need index "+o+" but only see "+e.length+" entries",e):hn("an ARRAY",e);case 8:if("object"!=typeof e||null===e||pn(e))return hn("an OBJECT",e);var a=E;for(var i in e)if(e.hasOwnProperty(i)){if(t=vn(n.b,e[i]),!xt(t))return $r(u(_r,i,t.a));a=N(L(i,t.a),a)}return Vr(Qr(a));case 9:for(var c=n.f,l=n.g,f=0;l.length>f;f++){if(t=vn(l[f],e),!xt(t))return t;c=c(t.a)}return Vr(c);case 10:return t=vn(n.b,e),xt(t)?vn(n.h(t.a),e):t;case 11:for(var s=E,d=n.g;d.b;d=d.b){if(t=vn(d.a,e),xt(t))return t;s=N(t.a,s)}return $r(Rr(Qr(s)));case 1:return $r(u(zr,n.a,e));case 0:return Vr(n.a)}}function mn(n,e,r){for(var t=e.length,o=Array(t),a=0;t>a;a++){var i=vn(n,e[a]);if(!xt(i))return $r(u(Ar,a,i.a));o[a]=i.a}return Vr(r(o))}function pn(n){return Array.isArray(n)||"undefined"!=typeof FileList&&n instanceof FileList}function gn(n){return u(ht,n.length,(function(e){return n[e]}))}function hn(n,e){return $r(u(zr,"Expecting "+n,e))}function xn(n,e){if(n===e)return!0;if(n.$!==e.$)return!1;switch(n.$){case 0:case 1:return n.a===e.a;case 2:return n.b===e.b;case 5:return n.c===e.c;case 3:case 4:case 8:return xn(n.b,e.b);case 6:return n.d===e.d&&xn(n.b,e.b);case 7:return n.e===e.e&&xn(n.b,e.b);case 9:return n.f===e.f&&Cn(n.g,e.g);case 10:return n.h===e.h&&xn(n.b,e.b);case 11:return Cn(n.g,e.g)}}function Cn(n,e){var r=n.length;if(r!==e.length)return!1;for(var t=0;r>t;t++)if(!xn(n[t],e[t]))return!1;return!0}var Mn=r((function(n,e){return JSON.stringify(e,null,n)+""}));function Pn(n){return n}var Tn=t((function(n,e,r){return r[n]=e,r}));function yn(n){return{$:0,a:n}}function Ln(n){return{$:2,b:n,c:null}}var Dn=r((function(n,e){return{$:3,b:n,d:e}})),wn=0;function Sn(n){var e={$:0,e:wn++,f:n,g:null,h:[]};return _n(e),e}function En(n){return Ln((function(e){e(yn(Sn(n)))}))}function Nn(n,e){n.h.push(e),_n(n)}var Fn=r((function(n,e){return Ln((function(r){Nn(n,e),r(yn(0))}))})),$n=!1,zn=[];function _n(n){if(zn.push(n),!$n){for($n=!0;n=zn.shift();)An(n);$n=!1}}function An(n){for(;n.f;){var e=n.f.$;if(0===e||1===e){for(;n.g&&n.g.$!==e;)n.g=n.g.i;if(!n.g)return;n.f=n.g.b(n.f.a),n.g=n.g.i}else{if(2===e)return void(n.f.c=n.f.b((function(e){n.f=e,_n(n)})));if(5===e){if(0===n.h.length)return;n.f=n.f.b(n.h.shift())}else n.g={$:3===e?0:1,b:n.f.b,i:n.g},n.f=n.f.d}}}var Vn={};function Rn(n,e,r,t,o){return{b:n,c:e,d:r,e:t,f:o}}function Bn(n,e){var r={g:e,h:void 0},t=n.c,o=n.d,a=n.e,i=n.f;return r.h=Sn(u(Dn,(function n(e){return u(Dn,n,{$:5,b:function(n){var c=n.a;return 0===n.$?f(o,r,c,e):a&&i?s(t,r,c.i,c.j,e):f(t,r,a?c.i:c.j,e)}})}),n.b))}var kn=r((function(n,e){return Ln((function(r){n.g(e),r(yn(0))}))})),In=r((function(n,e){return u(Fn,n.h,{$:0,a:e})}));function jn(n){return function(e){return{$:1,k:n,l:e}}}function Hn(n){return{$:2,m:n}}var Wn=r((function(n,e){return{$:3,n:n,o:e}})),Un=[],On=!1;function Yn(n,e,r){if(Un.push({p:n,q:e,r:r}),!On){On=!0;for(var t;t=Un.shift();)Gn(t.p,t.q,t.r);On=!1}}function Gn(n,e,r){var t={};for(var o in qn(!0,e,t,null),qn(!1,r,t,null),n)Nn(n[o],{$:"fx",a:t[o]||{i:E,j:E}})}function qn(n,e,r,t){switch(e.$){case 1:var o=e.k,a=function(n,e,r,t){return u(n?Vn[e].e:Vn[e].f,(function(n){for(var e=r;e;e=e.t)n=e.s(n);return n}),t)}(n,o,t,e.l);return void(r[o]=function(n,e,r){return r=r||{i:E,j:E},n?r.i=N(e,r.i):r.j=N(e,r.j),r}(n,a,r[o]));case 2:for(var i=e.m;i.b;i=i.b)qn(n,i.a,r,t);return;case 3:return void qn(n,e.o,r,{s:e.n,t:t})}}function Jn(n,e){return function(n){Vn[n]&&C(3)}(n),Vn[n]={f:Xn,u:e,a:Qn},jn(n)}var Xn=r((function(n,e){return function(r){return n(e(r))}}));function Qn(n,e){var r=E,o=Vn[n].u,a=yn(null);return Vn[n].b=a,Vn[n].c=t((function(n,e){return r=e,a})),{send:function(n){var t=u(bn,o,n);xt(t)||C(4);for(var a=t.a,i=r;i.b;i=i.b)e(i.a(a))}}}var Zn="undefined"!=typeof document?document:{};function Kn(n,e){n.appendChild(e)}function ne(n){return{$:0,a:n}}var ee,re=r((function(n,e){return r((function(r,t){for(var o=[],a=0;t.b;t=t.b){var i=t.a;a+=i.b||0,o.push(i)}return a+=o.length,{$:1,c:e,d:ue(r),e:o,f:n,b:a}}))}))(void 0),te=r((function(n,e){return r((function(r,t){for(var o=[],a=0;t.b;t=t.b){var i=t.a;a+=i.b.b||0,o.push(i)}return a+=o.length,{$:2,c:e,d:ue(r),e:o,f:n,b:a}}))}))(void 0),oe=r((function(n,e){return{$:4,j:n,k:e,b:1+(e.b||0)}})),ae=r((function(n,e){return{$:"a0",n:n,o:e}})),ie=r((function(n,e){return{$:"a1",n:n,o:e}})),ce=r((function(n,e){return{$:"a2",n:n,o:e}})),le=r((function(n,e){return{$:"a3",n:n,o:e}}));function ue(n){for(var e={};n.b;n=n.b){var r=n.a,t=r.$,o=r.n,a=r.o;if("a2"!==t){var i=e[t]||(e[t]={});"a3"===t&&"class"===o?fe(i,o,a):i[o]=a}else"className"===o?fe(e,o,a):e[o]=a}return e}function fe(n,e,r){var t=n[e];n[e]=t?t+" "+r:r}function se(n,e){var r=n.$;if(5===r)return se(n.k||(n.k=n.m()),e);if(0===r)return Zn.createTextNode(n.a);if(4===r){for(var t=n.k,o=n.j;4===t.$;)"object"!=typeof o?o=[o,t.j]:o.push(t.j),t=t.k;var a={j:o,p:e};return(i=se(t,a)).elm_event_node_ref=a,i}if(3===r)return de(i=n.h(n.g),e,n.d),i;var i=n.f?Zn.createElementNS(n.f,n.c):Zn.createElement(n.c);de(i,e,n.d);for(var c=n.e,l=0;c.length>l;l++)Kn(i,se(1===r?c[l]:c[l].b,e));return i}function de(n,e,r){for(var t in r){var o=r[t];"a1"===t?be(n,o):"a0"===t?pe(n,e,o):"a3"===t?ve(n,o):"a4"===t?me(n,o):("value"!==t&&"checked"!==t||n[t]!==o)&&(n[t]=o)}}function be(n,e){var r=n.style;for(var t in e)r[t]=e[t]}function ve(n,e){for(var r in e){var t=e[r];void 0!==t?n.setAttribute(r,t):n.removeAttribute(r)}}function me(n,e){for(var r in e){var t=e[r],o=t.f,a=t.o;void 0!==a?n.setAttributeNS(o,r,a):n.removeAttributeNS(o,r)}}function pe(n,e,r){var t=n.elmFs||(n.elmFs={});for(var o in r){var a=r[o],i=t[o];if(a){if(i){if(i.q.$===a.$){i.q=a;continue}n.removeEventListener(o,i)}i=ge(e,a),n.addEventListener(o,i,ee&&{passive:2>Dt(a)}),t[o]=i}else n.removeEventListener(o,i),t[o]=void 0}}try{window.addEventListener("t",null,Object.defineProperty({},"passive",{get:function(){ee=!0}}))}catch(n){}function ge(n,e){function r(e){var t=r.q,o=vn(t.a,e);if(xt(o)){for(var a,i=Dt(t),c=o.a,l=i?3>i?c.a:c.ar:c,u=1==i?c.b:3==i&&c.c6,f=(u&&e.stopPropagation(),(2==i?c.b:3==i&&c.cV)&&e.preventDefault(),n);a=f.j;){if("function"==typeof a)l=a(l);else for(var s=a.length;s--;)l=a[s](l);f=f.p}f(l,u)}}return r.q=e,r}function he(n,e){return n.$==e.$&&xn(n.a,e.a)}function xe(n,e,r,t){var o={$:e,r:r,s:t,t:void 0,u:void 0};return n.push(o),o}function Ce(n,e,r,t){if(n!==e){var o=n.$,a=e.$;if(o!==a){if(1!==o||2!==a)return void xe(r,0,t,e);e=function(n){for(var e=n.e,r=e.length,t=Array(r),o=0;r>o;o++)t[o]=e[o].b;return{$:1,c:n.c,d:n.d,e:t,f:n.f,b:n.b}}(e),a=1}switch(a){case 5:for(var i=n.l,c=e.l,l=i.length,u=l===c.length;u&&l--;)u=i[l]===c[l];if(u)return void(e.k=n.k);e.k=e.m();var f=[];return Ce(n.k,e.k,f,0),void(f.length>0&&xe(r,1,t,f));case 4:for(var s=n.j,d=e.j,b=!1,v=n.k;4===v.$;)b=!0,"object"!=typeof s?s=[s,v.j]:s.push(v.j),v=v.k;for(var m=e.k;4===m.$;)b=!0,"object"!=typeof d?d=[d,m.j]:d.push(m.j),m=m.k;return b&&s.length!==d.length?void xe(r,0,t,e):((b?function(n,e){for(var r=0;n.length>r;r++)if(n[r]!==e[r])return!1;return!0}(s,d):s===d)||xe(r,2,t,d),void Ce(v,m,r,t+1));case 0:return void(n.a!==e.a&&xe(r,3,t,e.a));case 1:return void Me(n,e,r,t,Te);case 2:return void Me(n,e,r,t,ye);case 3:if(n.h!==e.h)return void xe(r,0,t,e);var p=Pe(n.d,e.d);p&&xe(r,4,t,p);var g=e.i(n.g,e.g);return void(g&&xe(r,5,t,g))}}}function Me(n,e,r,t,o){if(n.c===e.c&&n.f===e.f){var a=Pe(n.d,e.d);a&&xe(r,4,t,a),o(n,e,r,t)}else xe(r,0,t,e)}function Pe(n,e,r){var t;for(var o in n)if("a1"!==o&&"a0"!==o&&"a3"!==o&&"a4"!==o)if(o in e){var a=n[o],i=e[o];a===i&&"value"!==o&&"checked"!==o||"a0"===r&&he(a,i)||((t=t||{})[o]=i)}else(t=t||{})[o]=r?"a1"===r?"":"a0"===r||"a3"===r?void 0:{f:n[o].f,o:void 0}:"string"==typeof n[o]?"":null;else{var c=Pe(n[o],e[o]||{},o);c&&((t=t||{})[o]=c)}for(var l in e)l in n||((t=t||{})[l]=e[l]);return t}function Te(n,e,r,t){var o=n.e,a=e.e,i=o.length,c=a.length;i>c?xe(r,6,t,{v:c,i:i-c}):c>i&&xe(r,7,t,{v:i,e:a});for(var l=c>i?i:c,u=0;l>u;u++){var f=o[u];Ce(f,a[u],r,++t),t+=f.b||0}}function ye(n,e,r,t){for(var o=[],a={},i=[],c=n.e,l=e.e,u=c.length,f=l.length,s=0,d=0,b=t;u>s&&f>d;){var v=(D=c[s]).a,m=(w=l[d]).a,p=D.b,g=w.b,h=void 0,x=void 0;if(v!==m){var C=c[s+1],M=l[d+1];if(C){var P=C.a,T=C.b;x=m===P}if(M){var y=M.a,L=M.b;h=v===y}if(h&&x)Ce(p,L,o,++b),De(a,o,v,g,d,i),b+=p.b||0,we(a,o,v,T,++b),b+=T.b||0,s+=2,d+=2;else if(h)b++,De(a,o,m,g,d,i),Ce(p,L,o,b),b+=p.b||0,s+=1,d+=2;else if(x)we(a,o,v,p,++b),b+=p.b||0,Ce(T,g,o,++b),b+=T.b||0,s+=2,d+=1;else{if(!C||P!==y)break;we(a,o,v,p,++b),De(a,o,m,g,d,i),b+=p.b||0,Ce(T,L,o,++b),b+=T.b||0,s+=2,d+=2}}else Ce(p,g,o,++b),b+=p.b||0,s++,d++}for(;u>s;){var D;b++,we(a,o,(D=c[s]).a,p=D.b,b),b+=p.b||0,s++}for(;f>d;){var w,S=S||[];De(a,o,(w=l[d]).a,w.b,void 0,S),d++}(o.length>0||i.length>0||S)&&xe(r,8,t,{w:o,x:i,y:S})}var Le="_elmW6BL";function De(n,e,r,t,o,a){var i=n[r];if(!i)return a.push({r:o,A:i={c:0,z:t,r:o,s:void 0}}),void(n[r]=i);if(1===i.c){a.push({r:o,A:i}),i.c=2;var c=[];return Ce(i.z,t,c,i.r),i.r=o,void(i.s.s={w:c,A:i})}De(n,e,r+Le,t,o,a)}function we(n,e,r,t,o){var a=n[r];if(a){if(0===a.c){a.c=2;var i=[];return Ce(t,a.z,i,o),void xe(e,9,o,{w:i,A:a})}we(n,e,r+Le,t,o)}else{var c=xe(e,9,o,void 0);n[r]={c:1,z:t,r:o,s:c}}}function Se(n,e,r,t){Ee(n,e,r,0,0,e.b,t)}function Ee(n,e,r,t,o,a,i){for(var c=r[t],l=c.r;l===o;){var u=c.$;if(1===u)Se(n,e.k,c.s,i);else if(8===u)c.t=n,c.u=i,(f=c.s.w).length>0&&Ee(n,e,f,0,o,a,i);else if(9===u){c.t=n,c.u=i;var f,s=c.s;s&&(s.A.s=n,(f=s.w).length>0&&Ee(n,e,f,0,o,a,i))}else c.t=n,c.u=i;if(!(c=r[++t])||(l=c.r)>a)return t}var d=e.$;if(4===d){for(var b=e.k;4===b.$;)b=b.k;return Ee(n,b,r,t,o+1,a,n.elm_event_node_ref)}for(var v=e.e,m=n.childNodes,p=0;v.length>p;p++){o++;var g=1===d?v[p]:v[p].b,h=o+(g.b||0);if(!(o>l||l>h||(c=r[t=Ee(m[p],g,r,t,o,h,i)])&&(l=c.r)<=a))return t;o=h}return t}function Ne(n,e){for(var r=0;e.length>r;r++){var t=e[r],o=t.t,a=Fe(o,t);o===n&&(n=a)}return n}function Fe(n,e){switch(e.$){case 0:return function(n,e,r){var t=n.parentNode,o=se(e,r);return o.elm_event_node_ref||(o.elm_event_node_ref=n.elm_event_node_ref),t&&o!==n&&t.replaceChild(o,n),o}(n,e.s,e.u);case 4:return de(n,e.u,e.s),n;case 3:return n.replaceData(0,n.length,e.s),n;case 1:return Ne(n,e.s);case 2:return n.elm_event_node_ref?n.elm_event_node_ref.j=e.s:n.elm_event_node_ref={j:e.s,p:e.u},n;case 6:for(var r=e.s,t=0;r.i>t;t++)n.removeChild(n.childNodes[r.v]);return n;case 7:for(var o=(r=e.s).e,a=n.childNodes[t=r.v];o.length>t;t++)n.insertBefore(se(o[t],e.u),a);return n;case 9:if(!(r=e.s))return n.parentNode.removeChild(n),n;var i=r.A;return void 0!==i.r&&n.parentNode.removeChild(n),i.s=Ne(n,r.w),n;case 8:return function(n,e){var r=e.s,t=function(n,e){if(n){for(var r=Zn.createDocumentFragment(),t=0;n.length>t;t++){var o=n[t].A;Kn(r,2===o.c?o.s:se(o.z,e.u))}return r}}(r.y,e);n=Ne(n,r.w);for(var o=r.x,a=0;o.length>a;a++){var i=o[a],c=i.A,l=2===c.c?c.s:se(c.z,e.u);n.insertBefore(l,n.childNodes[i.r])}return t&&Kn(n,t),n}(n,e);case 5:return e.s(n);default:C(10)}}function $e(n){if(3===n.nodeType)return ne(n.textContent);if(1!==n.nodeType)return ne("");for(var e=E,r=n.attributes,t=r.length;t--;){var o=r[t];e=N(u(le,o.name,o.value),e)}var a=n.tagName.toLowerCase(),i=E,c=n.childNodes;for(t=c.length;t--;)i=N($e(c[t]),i);return f(re,a,e,i)}var ze=o((function(n,e,r,t){return function(n,e,r,t,o,a){var i=u(bn,n,e?e.flags:void 0);xt(i)||C(2);var c={},l=r(i.a),f=l.a,s=a(b,f),d=function(n,e){var r;for(var t in Vn){var o=Vn[t];o.a&&((r=r||{})[t]=o.a(t,e)),n[t]=Bn(o,e)}return r}(c,b);function b(n,e){var r=u(t,n,f);s(f=r.a,e),Yn(c,r.b,o(f))}return Yn(c,l.b,o(f)),d?{ports:d}:{}}(e,t,n.e7,n.fE,n.fy,(function(e,r){var o=n.fG,a=t.node,i=$e(a);return function(n,e){e(n);var r=0;function t(){r=1===r?0:(Ae(t),e(n),1)}return function(o,a){n=o,a?(e(n),2===r&&(r=1)):(0===r&&Ae(t),r=2)}}(r,(function(n){var r=o(n),t=function(n,e){var r=[];return Ce(n,e,r,0),r}(i,r);a=function(n,e,r,t){return 0===r.length?n:(Se(n,e,r,t),Ne(n,r))}(a,i,t,e),i=r}))}))})),_e="undefined"!=typeof cancelAnimationFrame?cancelAnimationFrame:function(n){clearTimeout(n)},Ae="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:function(n){return setTimeout(n,1e3/60)},Ve={addEventListener:function(){},removeEventListener:function(){}},Re="undefined"!=typeof document?document:Ve,Be="undefined"!=typeof window?window:Ve,ke=t((function(n,e,r){return En(Ln((function(){function t(n){Sn(r(n))}return n.addEventListener(e,t,ee&&{passive:!0}),function(){n.removeEventListener(e,t)}})))})),Ie=r((function(n,e){var r=vn(n,e);return xt(r)?Br(r.a):kr})),je=r((function(n,e){var r="g";n.fg&&(r+="m"),n.eK&&(r+="i");try{return Br(RegExp(e,r))}catch(n){return kr}})),He=t((function(n,e,r){for(var t,o=[],a=0,i=r,c=e.lastIndex,l=-1;a++<n&&(t=e.exec(i))&&l!=e.lastIndex;){for(var u=t.length-1,f=Array(u);u>0;){var d=t[u];f[--u]=d?Br(d):kr}o.push(s(vi,t[0],t.index,a,$(f))),l=e.lastIndex}return e.lastIndex=c,$(o)})),We=0;function Ue(n,e){for(;e.b;e=e.b)n(e.a)}function Oe(n){for(var e=0;n.b;n=n.b)e++;return e}var Ye="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:function(n){setTimeout(n,1e3/60)},Ge=a((function(n,e,r,t,o){return{$:0,a:n,b:e,c:r,d:t,e:o}})),qe=r((function(n,e){var r=n.blend;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.BLEND),r.enabled=!0),r.a===e.a&&r.d===e.d||(n.gl.blendEquationSeparate(e.a,e.d),r.a=e.a,r.d=e.d),r.b===e.b&&r.c===e.c&&r.e===e.e&&r.f===e.f||(n.gl.blendFuncSeparate(e.b,e.c,e.e,e.f),r.b=e.b,r.c=e.c,r.e=e.e,r.f=e.f),r.g===e.g&&r.h===e.h&&r.i===e.i&&r.j===e.j||(n.gl.blendColor(e.g,e.h,e.i,e.j),r.g=e.g,r.h=e.h,r.i=e.i,r.j=e.j)})),Je=r((function(n,e){var r=n.depthTest;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.DEPTH_TEST),r.enabled=!0),r.a!==e.a&&(n.gl.depthFunc(e.a),r.a=e.a),r.b!==e.b&&(n.gl.depthMask(e.b),r.b=e.b),r.c===e.c&&r.d===e.d||(n.gl.depthRange(e.c,e.d),r.c=e.c,r.d=e.d)})),Xe=r((function(n,e){var r=n.stencilTest;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.STENCIL_TEST),r.enabled=!0),r.d===e.d&&r.a===e.a&&r.b===e.b||(n.gl.stencilFuncSeparate(n.gl.FRONT,e.d,e.a,e.b),r.d=e.d),r.e===e.e&&r.f===e.f&&r.g===e.g||(n.gl.stencilOpSeparate(n.gl.FRONT,e.e,e.f,e.g),r.e=e.e,r.f=e.f,r.g=e.g),r.c!==e.c&&(n.gl.stencilMask(e.c),r.c=e.c),r.h===e.h&&r.a===e.a&&r.b===e.b||(n.gl.stencilFuncSeparate(n.gl.BACK,e.h,e.a,e.b),r.h=e.h,r.a=e.a,r.b=e.b),r.i===e.i&&r.j===e.j&&r.k===e.k||(n.gl.stencilOpSeparate(n.gl.BACK,e.i,e.j,e.k),r.i=e.i,r.j=e.j,r.k=e.k)})),Qe=r((function(n,e){var r=n.scissor;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.SCISSOR_TEST),r.enabled=!0),r.a===e.a&&r.b===e.b&&r.c===e.c&&r.d===e.d||(n.gl.scissor(e.a,e.b,e.c,e.d),r.a=e.a,r.b=e.b,r.c=e.c,r.d=e.d)})),Ze=r((function(n,e){var r=n.colorMask;r.toggle=n.toggle,r.enabled=!0,r.a===e.a&&r.b===e.b&&r.c===e.c&&r.d===e.d||(n.gl.colorMask(e.a,e.b,e.c,e.d),r.a=e.a,r.b=e.b,r.c=e.c,r.d=e.d)})),Ke=r((function(n,e){var r=n.cullFace;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.CULL_FACE),r.enabled=!0),r.a!==e.a&&(n.gl.cullFace(e.a),r.a=e.a)})),nr=r((function(n,e){var r=n.polygonOffset;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.POLYGON_OFFSET_FILL),r.enabled=!0),r.a===e.a&&r.b===e.b||(n.gl.polygonOffset(e.a,e.b),r.a=e.a,r.b=e.b)})),er=r((function(n,e){var r=n.sampleCoverage;r.toggle=n.toggle,r.enabled||(n.gl.enable(n.gl.SAMPLE_COVERAGE),r.enabled=!0),r.a===e.a&&r.b===e.b||(n.gl.sampleCoverage(e.a,e.b),r.a=e.a,r.b=e.b)})),rr=function(n){n.scissor.enabled&&(n.gl.disable(n.gl.SCISSOR_TEST),n.scissor.enabled=!1)},tr=function(n){var e=n.colorMask;e.a&&e.b&&e.c&&e.d||(n.gl.colorMask(!0,!0,!0,!0),e.a=!0,e.b=!0,e.c=!0,e.d=!0)},or=["blend","depthTest","stencilTest","scissor","colorMask","cullFace","polygonOffset","sampleCoverage","sampleAlphaToCoverage"],ar=[function(n){n.blend.enabled&&(n.gl.disable(n.gl.BLEND),n.blend.enabled=!1)},function(n){n.depthTest.enabled&&(n.gl.disable(n.gl.DEPTH_TEST),n.depthTest.enabled=!1)},function(n){n.stencilTest.enabled&&(n.gl.disable(n.gl.STENCIL_TEST),n.stencilTest.enabled=!1)},rr,tr,function(n){n.gl.disable(n.gl.CULL_FACE)},function(n){n.gl.disable(n.gl.POLYGON_OFFSET_FILL)},function(n){n.gl.disable(n.gl.SAMPLE_COVERAGE)},function(n){n.gl.disable(n.gl.SAMPLE_ALPHA_TO_COVERAGE)}];function ir(n,e,r){var t=n.createShader(r);return n.shaderSource(t,"#extension GL_OES_standard_derivatives : enable\n"+e),n.compileShader(t),t}function cr(n,e){switch(e){case n.FLOAT:return{size:1,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC2:return{size:2,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC3:return{size:3,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_VEC4:return{size:4,arraySize:1,type:Float32Array,baseType:n.FLOAT};case n.FLOAT_MAT4:return{size:4,arraySize:4,type:Float32Array,baseType:n.FLOAT};case n.INT:return{size:1,arraySize:1,type:Int32Array,baseType:n.INT}}}function lr(n,e,r,t){for(var o=r.a.ds,a=[],i=0;o>i;i++)a.push(String.fromCharCode(97+i));var c=cr(n,e.type);if(void 0===c)throw Error("No info available for: "+e.type);var l=0,u=c.size*c.arraySize*o,f=new c.type(Oe(r.b)*u);Ue((function(n){!function(n,e,r,t,i){var c;if(1===o)for(c=0;e>c;c++)n[r++]=1===e?t[i]:t[i][c];else a.forEach((function(o){for(c=0;e>c;c++)n[r++]=1===e?t[o][i]:t[o][i][c]}))}(f,c.size*c.arraySize,l,n,t[e.name]||e.name),l+=u}),r.b);var s=n.createBuffer();return n.bindBuffer(n.ARRAY_BUFFER,s),n.bufferData(n.ARRAY_BUFFER,f,n.STATIC_DRAW),s}function ur(n,e){return n+"#"+e}var fr=r((function(n,e){var r=n.f,t=r.gl;return t?(t.viewport(0,0,t.drawingBufferWidth,t.drawingBufferHeight),r.depthTest.b||(t.depthMask(!0),r.depthTest.b=!0),r.stencilTest.c!==r.STENCIL_WRITEMASK&&(t.stencilMask(r.STENCIL_WRITEMASK),r.stencilTest.c=r.STENCIL_WRITEMASK),rr(r),tr(r),t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT|t.STENCIL_BUFFER_BIT),Ue((function(e){if(e.d.b.b){var o,a,i,c,l;if(e.b.id&&e.c.id&&(o=ur(e.b.id,e.c.id),a=r.programs[o]),!a){var u,f;e.b.id?u=r.shaders[e.b.id]:e.b.id=We++,u||(u=ir(t,e.b.src,t.VERTEX_SHADER),r.shaders[e.b.id]=u),e.c.id?f=r.shaders[e.c.id]:e.c.id=We++,f||(f=ir(t,e.c.src,t.FRAGMENT_SHADER),r.shaders[e.c.id]=f);var s=function(n,e,r){var t=n.createProgram();if(n.attachShader(t,e),n.attachShader(t,r),n.linkProgram(t),!n.getProgramParameter(t,n.LINK_STATUS))throw"Link failed: "+n.getProgramInfoLog(t)+"\nvs info-log: "+n.getShaderInfoLog(e)+"\nfs info-log: "+n.getShaderInfoLog(r);return t}(t,u,f);(a={glProgram:s,attributes:Object.assign({},e.b.attributes,e.c.attributes),currentUniforms:{},activeAttributes:[],activeAttributeLocations:[]}).uniformSetters=function(n,e,r,t){var o=r.glProgram,a=r.currentUniforms,i=0,c=e.f;function l(e,r){var t=r.name,o=n.getUniformLocation(e,t);switch(r.type){case n.INT:return function(e){a[t]!==e&&(n.uniform1i(o,e),a[t]=e)};case n.FLOAT:return function(e){a[t]!==e&&(n.uniform1f(o,e),a[t]=e)};case n.FLOAT_VEC2:return function(e){a[t]!==e&&(n.uniform2f(o,e[0],e[1]),a[t]=e)};case n.FLOAT_VEC3:return function(e){a[t]!==e&&(n.uniform3f(o,e[0],e[1],e[2]),a[t]=e)};case n.FLOAT_VEC4:return function(e){a[t]!==e&&(n.uniform4f(o,e[0],e[1],e[2],e[3]),a[t]=e)};case n.FLOAT_MAT4:return function(e){a[t]!==e&&(n.uniformMatrix4fv(o,!1,new Float32Array(e)),a[t]=e)};case n.SAMPLER_2D:var l=i++;return function(e){n.activeTexture(n.TEXTURE0+l);var r=c.textures.get(e);r||(r=e.eO(n),c.textures.set(e,r)),n.bindTexture(n.TEXTURE_2D,r),a[t]!==e&&(n.uniform1i(o,l),a[t]=e)};case n.BOOL:return function(e){a[t]!==e&&(n.uniform1i(o,e),a[t]=e)};default:return function(){}}}for(var u={},f=n.getProgramParameter(o,n.ACTIVE_UNIFORMS),s=0;f>s;s++){var d=n.getActiveUniform(o,s);u[t[d.name]||d.name]=l(o,d)}return u}(t,n,a,Object.assign({},e.b.uniforms,e.c.uniforms));var d=t.getProgramParameter(s,t.ACTIVE_ATTRIBUTES);for(i=0;d>i;i++){var b=t.getActiveAttrib(s,i),v=t.getAttribLocation(s,b.name);a.activeAttributes.push(b),a.activeAttributeLocations.push(v)}o=ur(e.b.id,e.c.id),r.programs[o]=a}r.lastProgId!==o&&(t.useProgram(a.glProgram),r.lastProgId=o),c=a.uniformSetters,Object.keys(l=e.e).forEach((function(n){var e=c[n];e&&e(l[n])}));var m=r.buffers.get(e.d);for(m||(m=function(n,e){if(e.a.dC>0){var r=n.createBuffer(),t=function(n,e){var r,t=new Uint32Array(Oe(n)*e),o=0;return Ue((function(n){if(1===e)t[o++]=n;else for(r=0;e>r;r++)t[o++]=n[String.fromCharCode(97+r)]}),n),t}(e.c,e.a.dC);return n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,r),n.bufferData(n.ELEMENT_ARRAY_BUFFER,t,n.STATIC_DRAW),{numIndices:t.length,indexBuffer:r,buffers:{}}}return{numIndices:e.a.ds*Oe(e.b),indexBuffer:null,buffers:{}}}(t,e.d),r.buffers.set(e.d,m)),i=0;a.activeAttributes.length>i;i++){v=a.activeAttributeLocations[i],void 0===m.buffers[(b=a.activeAttributes[i]).name]&&(m.buffers[b.name]=lr(t,b,e.d,a.attributes)),t.bindBuffer(t.ARRAY_BUFFER,m.buffers[b.name]);var p=cr(t,b.type);if(1===p.arraySize)t.enableVertexAttribArray(v),t.vertexAttribPointer(v,p.size,p.baseType,!1,0,0);else for(var g=4*p.size,h=g*p.arraySize,x=0;p.arraySize>x;x++)t.enableVertexAttribArray(v+x),t.vertexAttribPointer(v+x,p.size,p.baseType,!1,h,g*x)}for(r.toggle=!r.toggle,Ue(Xs(r),e.a),i=0;9>i;i++){var C=r[or[i]];C.toggle!==r.toggle&&C.enabled&&(ar[i](r),C.enabled=!1,C.toggle=r.toggle)}m.indexBuffer?(t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,m.indexBuffer),t.drawElements(e.d.a.d7,m.numIndices,t.UNSIGNED_INT,0)):t.drawArrays(e.d.a.d7,0,m.numIndices)}}),n.g),e):e})),sr=t((function(n,e,r){return function(n,e,r,t){return{$:3,d:ue(n),g:e,h:r,i:t}}(e,{g:r,f:{},h:n},hr,xr)})),dr=r((function(n,e){n.contextAttributes.alpha=!0,n.contextAttributes.premultipliedAlpha=e.a})),br=r((function(n,e){n.contextAttributes.depth=!0,n.sceneSettings.push((function(n){n.clearDepth(e.a)}))})),vr=r((function(n,e){n.contextAttributes.stencil=!0,n.sceneSettings.push((function(n){n.clearStencil(e.a)}))})),mr=r((function(n){n.contextAttributes.antialias=!0})),pr=r((function(n,e){n.sceneSettings.push((function(n){n.clearColor(e.a,e.b,e.c,e.d)}))})),gr=r((function(n){n.contextAttributes.preserveDrawingBuffer=!0}));function hr(n){var e={contextAttributes:{alpha:!1,depth:!1,stencil:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1},sceneSettings:[]};Ue((function(n){return u(Js,e,n)}),n.h);var r=Zn.createElement("canvas"),t=r.getContext&&(r.getContext("webgl",e.contextAttributes)||r.getContext("experimental-webgl",e.contextAttributes));return t&&"undefined"!=typeof WeakMap?(e.sceneSettings.forEach((function(n){n(t)})),t.getExtension("OES_standard_derivatives"),t.getExtension("OES_element_index_uint"),n.f.gl=t,n.f.toggle=!1,n.f.blend={enabled:!1,toggle:!1},n.f.depthTest={enabled:!1,toggle:!1},n.f.stencilTest={enabled:!1,toggle:!1},n.f.scissor={enabled:!1,toggle:!1},n.f.colorMask={enabled:!1,toggle:!1},n.f.cullFace={enabled:!1,toggle:!1},n.f.polygonOffset={enabled:!1,toggle:!1},n.f.sampleCoverage={enabled:!1,toggle:!1},n.f.sampleAlphaToCoverage={enabled:!1,toggle:!1},n.f.shaders=[],n.f.programs={},n.f.lastProgId=null,n.f.buffers=new WeakMap,n.f.textures=new WeakMap,n.f.STENCIL_WRITEMASK=t.getParameter(t.STENCIL_WRITEMASK),Ye((function(){return u(fr,n,r)}))):(r=Zn.createElement("div")).innerHTML='<a href="https://get.webgl.org/">Enable WebGL</a> to see this content!',r}function xr(n,e){return e.f=n.f,fr(e)}var Cr=r((function(n,e){return new Float64Array([n,e])}));new Float64Array(3),new Float64Array(3),new Float64Array(3);var Mr=t((function(n,e,r){return new Float64Array([n,e,r])})),Pr=r((function(n,e){return new Float64Array([e[0]*n,e[1]*n,e[2]*n])})),Tr=o((function(n,e,r,t){return new Float64Array([n,e,r,t])}));new Float64Array(16),new Float64Array(16),new Float64Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);var yr=F,Lr=x,Dr=t((function(n,e,t){var o=t.c,a=t.d,i=r((function(e,r){return f(Lr,e.$?n:i,r,e.a)}));return f(Lr,i,f(Lr,n,e,a),o)})),wr=t((function(n,e,r){for(;;){if(-2===r.$)return e;var t=r.d,o=n,a=f(n,r.b,r.c,f(wr,n,e,r.e));n=o,e=a,r=t}})),Sr=function(n){return f(wr,t((function(n,e,r){return u(yr,L(n,e),r)})),E,n)},Er=1,Nr=2,Fr=0,$r=function(n){return{$:1,a:n}},zr=r((function(n,e){return{$:3,a:n,b:e}})),_r=r((function(n,e){return{$:0,a:n,b:e}})),Ar=r((function(n,e){return{$:1,a:n,b:e}})),Vr=function(n){return{$:0,a:n}},Rr=function(n){return{$:2,a:n}},Br=function(n){return{$:0,a:n}},kr={$:1},Ir=Mn,jr=K,Hr=r((function(n,e){return u(X,n,z(e))})),Wr=r((function(n,e){return $(u(J,n,e))})),Ur=t((function(n,e,r){for(;;){if(!r.b)return e;var t=r.b,o=n,a=u(n,r.a,e);n=o,e=a,r=t}})),Or=function(n){return f(Ur,r((function(n,e){return e+1})),0,n)},Yr=_,Gr=t((function(n,e,r){for(;;){if(T(n,e)>=1)return r;var t=n,o=e-1,a=u(yr,e,r);n=t,e=o,r=a}})),qr=r((function(n,e){return f(Gr,n,e,E)})),Jr=r((function(n,e){return f(Yr,n,u(qr,0,Or(e)-1),e)})),Xr=function(n){var e=n.charCodeAt(0);return 55296>e||e>56319?e:1024*(e-55296)+n.charCodeAt(1)-56320+65536},Qr=function(n){return f(Ur,yr,E,n)},Zr=function(n){var e=n.charCodeAt(0);return isNaN(e)?kr:Br(55296>e||e>56319?L(n[0],n.slice(1)):L(n[0]+n[1],n.slice(2)))},Kr=32,nt=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),et=[],rt=j,tt=r((function(n,e){return O(e)/O(n)})),ot=function(n){return n},at=rt(u(tt,2,Kr)),it=s(nt,0,at,et,et),ct=p,lt=function(n){return{$:1,a:n}},ut=H,ft=function(n){return n.length},st=r((function(n,e){return T(n,e)>0?n:e})),dt=A,bt=g,vt=r((function(n,e){for(;;){var r=u(bt,Kr,n),t=r.b,o=u(yr,{$:0,a:r.a},e);if(!t.b)return Qr(o);n=t,e=o}})),mt=r((function(n,e){for(;;){var r=rt(e/Kr);if(1===r)return u(bt,Kr,n).a;n=u(vt,n,E),e=r}})),pt=r((function(n,e){if(e.l){var r=e.l*Kr,t=ut(u(tt,Kr,r-1)),o=n?Qr(e.y):e.y,a=u(mt,o,e.l);return s(nt,ft(e.o)+r,u(st,5,t*at),a,e.o)}return s(nt,ft(e.o),at,et,e.o)})),gt=a((function(n,e,r,t,o){for(;;){if(0>e)return u(pt,!1,{y:t,l:r/Kr|0,o:o});var a=lt(f(ct,Kr,e,n));n=n,e-=Kr,r=r,t=u(yr,a,t),o=o}})),ht=r((function(n,e){if(n>0){var r=n%Kr;return d(gt,e,n-r-Kr,n,E,f(ct,r,n-r,e))}return it})),xt=function(n){return!n.$},Ct=ln,Mt=an,Pt=tn,Tt=un,yt=fn,Lt=function(n){return{$:0,a:n}},Dt=function(n){switch(n.$){case 0:return 0;case 1:return 1;case 2:return 2;default:return 3}},wt=re("div"),St=function(n){return{$:2,a:n}},Et=function(n){return{$:6,a:n}},Nt=function(n){return{$:4,a:n}},Ft=t((function(n,e,r){return e(n(r))})),$t=function(n){return n},zt=function(n){return n.length},_t=Q,At=r((function(n,e){return 1>n?e:f(_t,n,zt(e),e)})),Vt=Z,Rt=yn,Bt=Rt(0),kt=o((function(n,e,r,t){if(t.b){var o=t.a,a=t.b;if(a.b){var i=a.a,c=a.b;if(c.b){var l=c.a,d=c.b;if(d.b){var b=d.b;return u(n,o,u(n,i,u(n,l,u(n,d.a,r>500?f(Ur,n,e,Qr(b)):s(kt,n,e,r+1,b)))))}return u(n,o,u(n,i,u(n,l,e)))}return u(n,o,u(n,i,e))}return u(n,o,e)}return e})),It=t((function(n,e,r){return s(kt,n,e,0,r)})),jt=r((function(n,e){return f(It,r((function(e,r){return u(yr,n(e),r)})),E,e)})),Ht=Dn,Wt=r((function(n,e){return u(Ht,(function(e){return Rt(n(e))}),e)})),Ut=t((function(n,e,r){return u(Ht,(function(e){return u(Ht,(function(r){return Rt(u(n,e,r))}),r)}),e)})),Ot=function(n){return f(It,Ut(yr),Rt(E),n)},Yt=kn,Gt=r((function(n,e){var r=e;return En(u(Ht,Yt(n),r))}));Vn.Task=Rn(Bt,t((function(n,e){return u(Wt,(function(){return 0}),Ot(u(jt,Gt(n),e)))})),t((function(){return Rt(0)})),r((function(n,e){return u(Wt,n,e)})));var qt=jn("Task"),Jt=r((function(n,e){return qt(u(Wt,n,e))})),Xt=ze,Qt=r((function(n,e){return{$:0,a:n,b:e}})),Zt=function(n){return{$:7,a:n}},Kt=r((function(n,e){return{$:5,a:n,b:e}})),no=r((function(n,e){return{$:3,a:n,b:e}})),eo=Hn,ro=Wn,to=function(n){return{$:1,a:n}},oo=t((function(n,e,r){return{cI:r,ek:e,er:n}})),ao=Rt(f(oo,E,kr,0)),io=function(n){return Ln((function(e){var r=n.f;2===r.$&&r.c&&r.c(),n.f=null,e(yn(0))}))},co=Ln((function(n){n(yn(Date.now()))})),lo=Ln((function(n){var e=Ae((function(){n(yn(Date.now()))}));return function(){_e(e)}})),uo=In,fo=En,so=t((function(n,e,r){var t=r.ek,o=r.cI,a=L(t,e);return 1===a.a.$?a.b.b?u(Ht,(function(n){return u(Ht,(function(r){return Rt(f(oo,e,Br(n),r))}),co)}),fo(u(Ht,uo(n),lo))):ao:a.b.b?Rt(f(oo,e,t,o)):u(Ht,(function(){return ao}),io(a.a.a))})),bo=$t,vo=t((function(n,e,r){var t=r.er,o=r.cI,a=function(r){return u(Yt,n,(0,r.a)(r.$?e-o:bo(e)))};return u(Ht,(function(n){return u(Ht,(function(){return Rt(f(oo,t,Br(n),e))}),Ot(u(jt,a,t)))}),fo(u(Ht,uo(n),lo)))})),mo=t((function(n,e,r){return n(e(r))}));Vn["Browser.AnimationManager"]=Rn(ao,so,vo,0,r((function(n,e){return e.$?to(u(mo,n,e.a)):{$:0,a:u(mo,n,e.a)}})));var po=jn("Browser.AnimationManager"),go=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),ho=r((function(n,e){return{ec:e,er:n}})),xo={$:-2},Co=xo,Mo=Rt(u(ho,E,Co)),Po=function(n){return L(S(n.a?"w_":"d_",n.b),n)},To=a((function(n,e,r,t,o){return{$:-1,a:n,b:e,c:r,d:t,e:o}})),yo=a((function(n,e,r,t,o){if(-1!==o.$||o.a){if(-1!==t.$||t.a||-1!==t.d.$||t.d.a)return d(To,n,e,r,t,o);var a=t.d;return i=t.e,d(To,0,t.b,t.c,d(To,1,a.b,a.c,a.d,a.e),d(To,1,e,r,i,o))}var i,c=o.b,l=o.c,u=o.d,f=o.e;return-1!==t.$||t.a?d(To,n,c,l,d(To,0,e,r,t,u),f):d(To,0,e,r,d(To,1,t.b,t.c,t.d,i=t.e),d(To,1,c,l,u,f))})),Lo=y,Do=t((function(n,e,r){if(-2===r.$)return d(To,0,n,e,xo,xo);var t=r.a,o=r.b,a=r.c,i=r.d,c=r.e;switch(u(Lo,n,o)){case 0:return d(yo,t,o,a,f(Do,n,e,i),c);case 1:return d(To,t,o,e,i,c);default:return d(yo,t,o,a,i,f(Do,n,e,c))}})),wo=t((function(n,e,r){var t=f(Do,n,e,r);return-1!==t.$||t.a?t:d(To,1,t.b,t.c,t.d,t.e)})),So=function(n){return f(Ur,r((function(n,e){return f(wo,n.a,n.b,e)})),Co,n)},Eo=t((function(n,e,r){for(;;){if(-2===r.$)return e;var t=r.e,o=n,a=f(n,r.b,r.c,f(Eo,n,e,r.d));n=o,e=a,r=t}})),No=i((function(n,e,o,a,i,c){var l=f(Eo,t((function(r,t,a){n:for(;;){var i=a.a,c=a.b;if(i.b){var l=i.a,u=l.a,d=l.b,b=i.b;if(0>T(u,r)){r=r,t=t,a=L(b,f(n,u,d,c));continue n}return T(u,r)>0?L(i,f(o,r,t,c)):L(b,s(e,u,d,t,c))}return L(i,f(o,r,t,c))}})),L(Sr(a),c),i),u=l.a,d=l.b;return f(Ur,r((function(e,r){return f(n,e.a,e.b,r)})),d,u)})),Fo=r((function(n,e){return{dw:e,dE:n}})),$o=t((function(n,e,r){return u(Wt,(function(n){return L(e,n)}),f(ke,r.a?Be:Re,r.b,(function(r){return u(uo,n,u(Fo,e,r))})))})),zo=r((function(n,e){return f(Eo,wo,e,n)})),_o=t((function(n,e,r){var a=t((function(e,r,t){var o=t.c;return D(t.a,t.b,u(yr,f($o,n,e,r),o))})),i=t((function(n,e,r){var t=r.b,o=r.c;return D(u(yr,e,r.a),t,o)})),c=o((function(n,e,r,t){var o=t.c;return D(t.a,f(wo,n,e,t.b),o)})),l=u(jt,Po,e),s=b(No,i,c,a,r.ec,So(l),D(E,Co,E)),d=s.b,v=s.c;return u(Ht,(function(n){return Rt(u(ho,l,u(zo,d,So(n))))}),u(Ht,(function(){return Ot(v)}),Ot(u(jt,io,s.a))))})),Ao=t((function(n,e,r){var t=n(e);return t.$?r:u(yr,t.a,r)})),Vo=r((function(n,e){return f(It,Ao(n),E,e)}));Vn["Browser.Events"]=Rn(Mo,_o,t((function(n,e,r){var t=e.dE,o=e.dw,a=u(Vo,(function(n){var e=n.b.c;return M(n.a,t)?u(Ie,e,o):kr}),r.er);return u(Ht,(function(){return Rt(r)}),Ot(u(jt,Yt(n),a)))})),0,r((function(n,e){return f(go,e.a,e.b,u(Tt,n,e.c))})));var Ro,Bo,ko,Io,jo,Ho,Wo,Uo,Oo,Yo,Go,qo,Jo,Xo,Qo,Zo,Ko,na,ea,ra,ta,oa,aa,ia,ca,la,ua,fa,sa,da,ba,va,ma,pa,ga,ha,xa,Ca=jn("Browser.Events"),Ma=t((function(n,e,r){return Ca(f(go,n,e,r))})),Pa=u(Ma,0,"click"),Ta=u(Ma,0,"keydown"),ya=u(Ma,0,"keyup"),La=u(Ma,0,"mousedown"),Da=u(Ma,0,"mousemove"),wa=u(Ma,0,"mouseup"),Sa=en,Ea=rn,Na=r((function(n,e){return n(e?1:0)})),Fa=function(n){var e=void 0!==Zn.hidden?{e4:"hidden",eN:"visibilitychange"}:void 0!==Zn.mozHidden?{e4:"mozHidden",eN:"mozvisibilitychange"}:void 0!==Zn.msHidden?{e4:"msHidden",eN:"msvisibilitychange"}:void 0!==Zn.webkitHidden?{e4:"webkitHidden",eN:"webkitvisibilitychange"}:{e4:"hidden",eN:"visibilitychange"};return f(Ma,0,e.eN,u(Tt,Na(n),u(Mt,"target",u(Mt,e.e4,Ea))))},$a=on,za=function(n){return{$:3,b:n}},_a=Jn("touchCancel",za(u(Ct,(function(n){return u(Ct,(function(e){return u(Ct,(function(r){return Lt({bi:r,cK:e,cL:n})}),u(Mt,"identifier",Sa))}),u(Mt,"pageX",Pt))}),u(Mt,"pageY",Pt)))),Aa=Jn("touchEnd",za(u(Ct,(function(n){return u(Ct,(function(e){return u(Ct,(function(r){return Lt({bi:r,cK:e,cL:n})}),u(Mt,"identifier",Sa))}),u(Mt,"pageX",Pt))}),u(Mt,"pageY",Pt)))),Va=Jn("touchMove",za(u(Ct,(function(n){return u(Ct,(function(e){return u(Ct,(function(r){return Lt({bi:r,cK:e,cL:n})}),u(Mt,"identifier",Sa))}),u(Mt,"pageX",Pt))}),u(Mt,"pageY",Pt)))),Ra=Jn("touchStart",za(u(Ct,(function(n){return u(Ct,(function(e){return u(Ct,(function(r){return Lt({bi:r,cK:e,cL:n})}),u(Mt,"identifier",Sa))}),u(Mt,"pageX",Pt))}),u(Mt,"pageY",Pt)))),Ba=eo(u(jt,ro(Et),$([(Ro=no,f(Ma,1,"resize",u(Mt,"target",f(yt,Ro,u(Mt,"innerWidth",Sa),u(Mt,"innerHeight",Sa))))),ya(u(Tt,Qt(!1),u(Mt,"key",$a))),Ta(u(Tt,Qt(!0),u(Mt,"key",$a))),(xa=u(Ft,dt(.001),(function(n){return{$:1,a:n}})),po(to(xa))),Fa(Nt),Pa(Lt({$:6})),La(Lt(Zt(!0))),wa(Lt(Zt(!1))),Da(f(yt,Kt,u(Mt,"pageX",Pt),u(Mt,"pageY",Pt))),Ra((function(n){return{$:8,a:n}})),Va((function(n){return{$:9,a:n}})),Aa((function(n){return{$:10,a:n}})),_a((function(n){return{$:11,a:n}}))]))),ka=o((function(n,e,r,t){return{ch:t,aP:r,bD:n,bE:e}})),Ia=Co,ja={cb:!1,aP:!1,cm:!1,L:Ia,af:!1,a_:!1,c2:!1,c3:!1,b7:!1},Ha=r((function(n,e){return w(e,{ch:n})})),Wa=r((function(n,e){return w(e,{aP:n})})),Ua=t((function(n,e,r){return w(r,{bD:n,bE:e})})),Oa=function(n){if(-1===n.$&&-1===n.d.$&&-1===n.e.$){if(-1!==n.e.d.$||n.e.d.a){var e=n.d,r=n.e;return i=r.b,c=r.c,t=r.d,f=r.e,d(To,1,n.b,n.c,d(To,0,e.b,e.c,e.d,e.e),d(To,0,i,c,t,f))}var t,o=n.d,a=n.e,i=a.b,c=a.c,l=(t=a.d).d,u=t.e,f=a.e;return d(To,0,t.b,t.c,d(To,1,n.b,n.c,d(To,0,o.b,o.c,o.d,o.e),l),d(To,1,i,c,u,f))}return n},Ya=function(n){if(-1===n.$&&-1===n.d.$&&-1===n.e.$){if(-1!==n.d.d.$||n.d.d.a){var e=n.d,r=n.e;return u=r.b,f=r.c,s=r.d,b=r.e,d(To,1,t=n.b,o=n.c,d(To,0,e.b,e.c,e.d,c=e.e),d(To,0,u,f,s,b))}var t=n.b,o=n.c,a=n.d,i=a.d,c=a.e,l=n.e,u=l.b,f=l.c,s=l.d,b=l.e;return d(To,0,a.b,a.c,d(To,1,i.b,i.c,i.d,i.e),d(To,1,t,o,c,d(To,0,u,f,s,b)))}return n},Ga=c((function(n,e,r,t,o,a,i){if(-1!==a.$||a.a){n:for(;;){if(-1===i.$&&1===i.a){if(-1===i.d.$){if(1===i.d.a)return Ya(e);break n}return Ya(e)}break n}return e}return d(To,r,a.b,a.c,a.d,d(To,0,t,o,a.e,i))})),qa=function(n){if(-1===n.$&&-1===n.d.$){var e=n.a,r=n.b,t=n.c,o=n.d,a=o.d,i=n.e;if(1===o.a){if(-1!==a.$||a.a){var c=Oa(n);if(-1===c.$){var l=c.e;return d(yo,c.a,c.b,c.c,qa(c.d),l)}return xo}return d(To,e,r,t,qa(o),i)}return d(To,e,r,t,qa(o),i)}return xo},Ja=r((function(n,e){if(-2===e.$)return xo;var r=e.a,t=e.b,o=e.c,a=e.d,i=e.e;if(0>T(n,t)){if(-1===a.$&&1===a.a){var c=a.d;if(-1!==c.$||c.a){var l=Oa(e);if(-1===l.$){var f=l.e;return d(yo,l.a,l.b,l.c,u(Ja,n,l.d),f)}return xo}return d(To,r,t,o,u(Ja,n,a),i)}return d(To,r,t,o,u(Ja,n,a),i)}return u(Xa,n,v(Ga,n,e,r,t,o,a,i))})),Xa=r((function(n,e){if(-1===e.$){var r=e.a,t=e.b,o=e.c,a=e.d,i=e.e;if(M(n,t)){var c=function(n){for(;;){if(-1!==n.$||-1!==n.d.$)return n;n=n.d}}(i);return-1===c.$?d(yo,r,c.b,c.c,a,qa(i)):xo}return d(yo,r,t,o,a,u(Ja,n,i))}return xo})),Qa=r((function(n,e){var r=u(Ja,n,e);return-1!==r.$||r.a?r:d(To,1,r.b,r.c,r.d,r.e)})),Za=r((function(n,e){return{dl:-e/2,co:e,af:-n/2,a_:n/2,bx:e/2,dd:n}})),Ka=r((function(n,e){return f(wo,n,0,e)})),ni=r((function(n,e){return u(Qa,n,e)})),ei=t((function(n,e,r){var t=u(n?Ka:ni,e,r.L);switch(e){case" ":return w(r,{L:t,c3:n});case"Enter":return w(r,{cm:n,L:t});case"Shift":return w(r,{L:t,c2:n});case"Backspace":return w(r,{cb:n,L:t});case"ArrowUp":return w(r,{L:t,b7:n});case"ArrowDown":return w(r,{aP:n,L:t});case"ArrowLeft":return w(r,{L:t,af:n});case"ArrowRight":return w(r,{L:t,a_:n});default:return w(r,{L:t})}})),ri=r((function(n,e){switch(n.$){case 1:var r=n.a;return w(e,e.F.ch?{F:u(Ha,!1,e.F),a1:e.a1+r}:{a1:e.a1+r});case 2:var t=n.a.fH;return w(e,{_:u(Za,t.dd,t.co)});case 3:return w(e,{_:u(Za,n.a,n.b)});case 0:return w(e,{bj:f(ei,n.a,n.b,e.bj)});case 5:return w(e,{F:f(Ua,e._.af+n.a,e._.bx-n.b,e.F)});case 6:return w(e,{F:u(Ha,!0,e.F)});case 7:return w(e,{F:u(Wa,n.a,e.F)});case 8:case 9:return w(e,{aa:f(Ur,(function(n){return u(wo,n.bi,{bD:e._.af+n.cK,bE:e._.bx-n.cL})}),e.aa,n.a)});case 10:case 11:return w(e,{aa:f(Ur,(function(n){return Qa(n.bi)}),e.aa,n.a)});default:return w(e,{bj:ja,F:s(ka,e.F.bD,e.F.bE,!1,!1)})}})),ti=r((function(n,e){return{O:e,T:n}})),oi=f(yt,r((function(n,e){return L(n,e)})),u(Mt,"A1",$a),u(Mt,"A2",$a)),ai=sn,ii=s(ai,t((function(n,e,r){return D(n,e,r)})),u(Mt,"A1",Pt),u(Mt,"A2",Pt),u(Mt,"A3",Pt)),ci=f(yt,r((function(n,e){return L(n,e)})),u(Mt,"A1",$a),u(Mt,"A2",ii)),li=f(yt,ti,u(Mt,"floats",za(ci)),u(Mt,"colors",za(oi))),ui=dn,fi=r((function(n,e){return{O:e,aC:"",T:n,ap:""}})),si=u(fi,E,E),di=r((function(n,e){return e.$?kr:n(e.a)})),bi=r((function(n,e){return e.$?$r(e.a):n(e.a)})),vi=o((function(n,e,r,t){return{e6:e,fe:n,fk:r,fx:t}})),mi=He,pi=r((function(n,e){return e.$?$r(n):Vr(e.a)})),gi=je,hi=function(n){return n.b?Br(n.a):kr},xi=r((function(n,e){return e.$?kr:Br(n(e.a))})),Ci=r((function(n,e){return e.$?$r(e.a):Vr(n(e.a))})),Mi=r((function(n,e){return Xr(e)-Xr(n)})),Pi=t((function(n,e,r){var t=Xr(r);return 1>T(Xr(n),t)&&1>T(t,Xr(e))})),Ti=r((function(n,e){var r=f(Pi,"0","9",e)?Vr(u(Mi,"0",e)):f(Pi,"a","z",e)?Vr(10+u(Mi,"a",e)):f(Pi,"A","Z",e)?Vr(10+u(Mi,"A",e)):$r({$:0,a:e});return u(bi,(function(r){return 0>T(r,n)?Vr(r):$r({$:1,a:e})}),r)})),yi=r((function(n,e){var r=Zr(e);if(1===r.$)return Vr(0);var t=r.a,o=t.b;return u(bi,(function(e){return u(bi,(function(r){return Vr(e+r*n)}),u(yi,n,o))}),u(Ti,n,t.a))})),Li=function(n){for(var e=n.length,r=Array(e),t=0;e>t;){var o=n.charCodeAt(t);55296>o||o>56319?(r[e-t]=n[t],t++):(r[e-t]=n[t+1],r[e-++t]=n[t-1],t++)}return r.join("")},Di=r((function(n,e){return 2>n||n>36?$r({$:2,a:n}):u(yi,n,Li(e))})),wi=Di(16),Si=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),Ei=t((function(n,e,r){return s(Si,n,e,r,1)})),Ni=o((function(n,e,r,t){return s(Si,n,e,r,t)})),Fi=V,$i=W,zi=r((function(n,e){var r=u(Fi,10,n);return $i(e*r)/r})),_i=q,Ai=function(n){return f(_i,yr,E,n)},Vi=(Bo=function(n){var e=Ai(n);if(e.b&&!e.b.b){var r=e.a;return z($([r,r])).join("")}return n},u(Ft,(function(n){return n.toLowerCase()}),u(Ft,(function(n){return u(xi,(function(e){return f(mi,1,e,n)}),u(gi,{eK:!1,fg:!1},"^#?(?:(?:([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2}))|(?:([a-f\\d])([a-f\\d])([a-f\\d]))|(?:([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2}))|(?:([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d])))$"))}),u(Ft,di(hi),u(Ft,xi((function(n){return n.fx})),u(Ft,xi(Vo($t)),u(Ft,pi("Parsing hex regex failed"),bi((function(n){var e=u(jt,u(Ft,Bo,u(Ft,wi,Ci(ot))),n);n:for(;;){if(e.b&&!e.a.$&&e.b.b&&!e.b.a.$&&e.b.b.b&&!e.b.b.a.$){if(e.b.b.b.b){if(e.b.b.b.a.$||e.b.b.b.b.b)break n;var r=e.b,t=r.b;return Vr(s(Ni,e.a.a/255,r.a.a/255,t.a.a/255,u(zi,2,t.b.a.a/255)))}var o=e.b;return Vr(f(Ei,e.a.a/255,o.a.a/255,o.b.a.a/255))}break n}return $r("Parsing ints from hex failed")}))))))))),Ri=r((function(n,e){return L(e.a,n(e.b))})),Bi=s(Si,1,1,1,1),ki=r((function(n,e){return e.$?n:e.a})),Ii=u(Ft,ui(li),u(Ft,Ci((function(n){return{O:u(jt,Ri(u(Ft,Vi,ki(Bi))),n.O),aC:"",T:n.T,ap:""}})),ki(si))),ji=function(n){return f(Ur,r((function(n,e){return f(Tn,n.a,n.b,e)})),{},n)},Hi=Pn,Wi=function(n){var e=n.b;return ji($([L("A1",Hi(n.a)),L("A2",Hi(e))]))},Ui=Pn,Oi=function(n){var e=n.b,r=n.c;return ji($([L("A1",Ui(n.a)),L("A2",Ui(e)),L("A3",Ui(r))]))},Yi=function(n){var e=n.b;return ji($([L("A1",Hi(n.a)),L("A2",Oi(e))]))},Gi=r((function(n,e){return f(Ur,function(n){return r((function(e,r){return r.push(n(e)),r}))}(n),[],e)})),qi=G,Ji=function(n){return u(qi,n,"")},Xi=t((function(n,e,r){return n>0?f(Xi,n>>1,S(e,e),1&n?S(r,e):r):r})),Qi=r((function(n,e){return f(Xi,n,e,"")})),Zi=t((function(n,e,r){return S(u(Qi,n-zt(r),Ji(e)),r)})),Ki=function(n){return 0>n||n>1114111?"�":n>65535?String.fromCharCode(Math.floor((n-=65536)/1024)+55296,n%1024+56320):String.fromCharCode(n)},nc=R,ec=function(n){var e=function(n){return 10>n?jr(n):Ji(Ki(87+n))};return 16>n?e(n):S(ec(n/16|0),e(u(nc,16,n)))},rc=u(Ft,ec,u(Zi,2,"0")),tc=function(n){return{aO:n.d,cf:n.c,cn:n.b,cX:n.a}},oc=function(n){var e=tc(n),r=e.cX,t=e.cn,o=e.cf;return u(Hr,"",u(yr,"#",u(jt,u(Ft,$i,rc),$([255*r,255*t,255*o]))))},ac=u(Ft,(function(n){return{O:u(jt,Ri(oc),n.O),T:n.T}}),u(Ft,(function(n){return ji($([L("floats",u(Gi,Yi,n.T)),L("colors",u(Gi,Wi,n.O))]))}),Ir(0))),ic=function(n){return 0>n?-n:n},cc=function(n){if(0===n.length||/[\sxbo]/.test(n))return kr;var e=+n;return e==e?Br(e):kr},lc=r((function(n,e){return e.$?n:e.a})),uc=t((function(n,e,r){return u(lc,NaN,cc(u(n,e,r)))})),fc=function(n){return!n},sc=r((function(n,e){for(;;){if(!e.b)return!1;var r=e.b;if(n(e.a))return!0;n=n,e=r}})),dc=r((function(n,e){var r=u(sc,(function(n){return"0"!==n&&"."!==n}),Ai(e));return S(n&&r?"-":"",e)})),bc=K,vc=function(n){var e=n.a,r=n.b;if("9"===e){var t=Zr(r);return 1===t.$?"01":u(qi,"0",vc(t.a))}var o=Xr(e);return o>=48&&57>o?u(qi,Ki(o+1),r):"0"},mc=function(n){return n===1/0||n===-1/0},pc=Y,gc=t((function(n,e,r){return S(r,u(Qi,n-zt(r),Ji(e)))})),hc=function(n){var e=u(Wr,".",n);return e.b?L(e.a,e.b.b?e.b.a:"0"):L("0","0")},xc=r((function(n,e){var r=e.b;return L(n(e.a),r)})),Cc=t((function(n,e,r){if(mc(r)||pc(r))return bc(r);var t=0>r,o=hc(function(n){var e=u(Wr,"e",bc(ic(n)));if(e.b){if(e.b.b){var r=e.a,t=e.b.a,o=u(lc,0,function(n){for(var e=0,r=n.charCodeAt(0),t=43==r||45==r?1:0,o=t;n.length>o;++o){var a=n.charCodeAt(o);if(48>a||a>57)return kr;e=10*e+a-48}return o==t?kr:Br(45==r?-e:e)}(u(Vt,"+",t)?u(At,1,t):t)),a=hc(r),i=S(a.a,a.b),c=0>o?u(lc,"0",u(xi,(function(n){return n.a+"."+n.b}),u(xi,xc(Ji),Zr(S(u(Qi,ic(o),"0"),i))))):f(gc,o+1,"0",i);return S(0>n?"-":"",c)}return S(0>n?"-":"",r=e.a)}return""}(ic(r))),a=o.a,i=o.b,c=zt(a)+e,l=S(u(Qi,1-c,"0"),f(gc,c,"0",S(a,i))),s=zt(l),d=u(st,1,c),b=u(n,t,f(_t,d,s,l)),v=f(_t,0,d,l),m=b?Li(u(lc,"1",u(xi,vc,Zr(Li(v))))):v,p=zt(m),g="0"===m?m:e>0?0>T(e,zt(i))?f(_t,0,p-e,m)+"."+f(_t,p-e,p,m):S(a+".",f(gc,e,"0",i)):S(m,u(Qi,ic(e),"0"));return u(dc,t,g)})),Mc=Cc(r((function(n,e){var r,t=Zr(e);return 1!==t.$&&("5"===t.a.a?""!==t.a.b||!n:(r=Xr(t.a.a))>53&&n||r>=53&&!n)}))),Pc=uc(Mc),Tc=t((function(n,e,r){var t=u(tt,10,ic(e-n));return u(Pc,0>t?3:1>t?2:2>t?1:0,r)})),yc=r((function(n,e){switch(n.$){case 2:var r=Ii(e.ap);return w(r,{aC:r.aC,ap:r.ap});case 3:return w(e,{ap:n.a});case 4:return w(e,{aC:ac(e)});case 0:var t=n.a,o=n.b;return w(e,{T:u(jt,(function(n){var e=n.a,r=n.b,a=r.a,i=r.c;return M(e,t)?L(e,D(a,f(Tc,a,i,o),i)):n}),e.T)});default:return t=n.a,o=n.b,w(e,{O:u(jt,(function(n){var e=n.a;return M(e,t)?L(e,o):n}),e.O)})}})),Lc=o((function(n,e,r,t){var o=t.E;switch(r.$){case 0:return t;case 1:return w(t,{a5:r.a});case 2:return w(t,{bc:!1});case 3:return w(t,{bc:!0});case 4:return w(t,{ae:f(e,t.E,r.a,t.ae)});case 5:return w(t,{E:w(o,{bO:u(yc,r.a,o.bO)})});default:var a=r.a,i=1===a.$?u(n,o,t.ae):t.ae;return w(t,{E:u(ri,a,t.E),ae:i})}})),Dc=(ha=function(){return{en:(n=Re.body,e=Re.documentElement,{dd:Math.max(n.scrollWidth,n.offsetWidth,e.scrollWidth,e.offsetWidth,e.clientWidth),co:Math.max(n.scrollHeight,n.offsetHeight,e.scrollHeight,e.offsetHeight,e.clientHeight)}),fH:{bD:Be.pageXOffset,bE:Be.pageYOffset,dd:Re.documentElement.clientWidth,co:Re.documentElement.clientHeight}};var n,e},Ln((function(n){Ae((function(){n(yn(ha()))}))}))),wc=r((function(n,e){return{bO:e,cl:n.cl,bj:ja,F:s(ka,0,0,!1,!1),_:u(Za,600,600),a1:0,aa:Co}})),Sc=Hn,Ec=Sc(E),Nc=function(n){return{$:5,a:n}},Fc=function(n){return{$:4,a:n}},$c={$:2},zc={$:0},_c=function(n){return{$:1,a:n}},Ac={$:3},Vc=r((function(n){return n})),Rc=re("button"),Bc=function(n){return n?"Level Editor":"Configurations"},kc=function(n){return u(lc,0,hi(u(Vo,(function(e){return M(Bc(e),n)?Br(e):kr}),$([0,1]))))},Ic=oe,jc=Ic,Hc=ae,Wc=r((function(n,e){return u(Hc,n,{$:0,a:e})})),Uc=r((function(n,e){return f(It,Mt,e,n)})),Oc=u(Uc,$(["target","value"]),$a),Yc=function(n){return u(Wc,"click",Lt(n))},Gc=re("option"),qc=re("select"),Jc=ie,Xc=Jc,Qc=ne,Zc=Qc,Kc=r((function(n,e){return u(ce,n,Hi(e))})),nl=Kc("value"),el=r((function(n,e){return{$:1,a:n,b:e}})),rl=r((function(n,e){return{$:0,a:n,b:e}})),tl=s(Si,0,0,0,1),ol=u(Rc,$([u(Xc,"cursor","pointer"),Yc({$:4})]),$([Zc("Export Configurations as json")])),al=re("h3"),il=re("p"),cl=Pn,ll=r((function(n,e){return u(ce,n,cl(e))})),ul=ll("readOnly"),fl=re("textarea"),sl=function(n){return u(wt,E,$([u(fl,$([ul(!0)]),$([Zc(n.aC)]))]))},dl=function(n){return u(wt,E,$([u(al,E,$([Zc("Export Configurations")])),u(il,E,$([ol])),u(il,E,$([sl(n)]))]))},bl=Kc("htmlFor"),vl=re("hr"),ml=Kc("id"),pl=u(Rc,$([u(Xc,"cursor","pointer"),Yc({$:2})]),$([Zc("Import Configurations")])),gl=function(n){return{$:3,a:n}},hl=function(n){return L(n,!0)},xl=r((function(n,e){return u(Hc,n,{$:1,a:e})})),Cl=function(n){return u(xl,"input",u(Tt,hl,u(Tt,n,Oc)))},Ml=function(n){return u(wt,E,$([u(fl,$([Cl(gl)]),$([Zc(n.ap)]))]))},Pl=function(n){return u(wt,E,$([u(al,E,$([Zc("Import Configurations")])),u(il,E,$([Ml(n)])),u(il,E,$([pl]))]))},Tl=re("input"),yl=re("label"),Ll=Kc("max"),Dl=Kc("min"),wl=Kc("name"),Sl=re("span"),El=Kc("type"),Nl=t((function(n,e,t){var o,a,i,c,l=u(wt,$([u(Xc,"position","fixed"),u(Xc,"top","0px"),u(Xc,"left","0px"),u(Xc,"width",bc(t.E._.dd)+"px"),u(Xc,"height",bc(t.E._.co)+"px"),u(Xc,"font-size","16px")]),$([u(jc,Vc(zc),u(n,t.E,t.ae))])),f=t.a5?u(jc,Fc,u(e,t.E,t.ae)):u(jc,Nc,(o=t.E.bO,a=function(n){var e=n.a,r=n.b,t=r.a,o=r.b,a=r.c;return u(wt,$([u(Xc,"margin-top","15px")]),$([u(wt,E,$([u(yl,$([bl(e)]),$([Zc(e),Zc(": "),u(Sl,$([u(Xc,"font-family","monospace"),u(Xc,"font-weight","bold")]),$([Zc(bc(o))]))]))])),u(Tl,$([El("range"),ml(e),wl(e),Dl(bc(t)),Ll(bc(a)),Cl((function(n){return u(rl,e,u(lc,0,cc(n)))})),u(Kc,"step","any"),u(Xc,"width","200px"),nl(bc(o))]),E)]))},i=function(n){var e=n.a,r=n.b;return u(wt,$([u(Xc,"margin-top","15px")]),$([u(wt,E,$([u(yl,$([bl(e)]),$([Zc(e)]))])),u(Tl,$([El("color"),u(Xc,"width","200px"),u(Xc,"height","30px"),ml(e),wl(e),Cl((function(n){return u(el,e,u(ki,tl,Vi(n)))})),nl(oc(r))]),E)]))},u(wt,$([u(Xc,"margin-left","20px"),u(Xc,"height","100%"),u(Xc,"overflow","scroll")]),$([u(wt,E,u(jt,a,o.T)),u(wt,E,u(jt,i,o.O)),u(vl,E,E),dl(o),Pl(o)])))),s=u(wt,$([u(Xc,"margin-left","0px")]),$([u(qc,$([(c=u(Ft,kc,_c),u(Wc,"change",u(Tt,c,Oc))),nl(Bc(t.a5)),u(Xc,"width","200px"),u(Xc,"height","40px"),u(Xc,"font-size","20px")]),u(jt,(function(n){return u(Gc,$([nl(Bc(n))]),$([Zc(Bc(n))]))}),$([0,1])))])),d=r((function(n,e){return u(Rc,$([u(Xc,"font-size","30px"),u(Xc,"width","40px"),u(Xc,"height","40px"),Yc(n)]),$([Zc(e)]))})),b=u(wt,$([u(Xc,"position","fixed"),u(Xc,"top","0px"),u(Xc,"left","0px"),u(Xc,"width",bc(250)+"px"),u(Xc,"height",bc(t.E._.co)+"px"),u(Xc,"font-family",'-apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif'),u(Xc,"font-size","16px")]),$(t.bc?[u(wt,$([u(Xc,"height","100px")]),$([u(d,$c,"✕"),s])),u(wt,$([u(Xc,"height",bc(t.E._.co-100)+"px")]),$([f]))]:[u(d,Ac,"≡")]));return u(wt,$([u(Xc,"touch-action","none"),u(Xc,"user-select","none")]),$([l,b]))})),Fl=i((function(n,e,t,o,a,i){return Xt({e7:function(n){var e=u(wc,n,t);return L({a5:0,E:e,bc:!1,ae:o(e),dc:0},u(Jt,u(Ft,St,Et),Dc))},fy:function(n){return 1===n.dc?u(ro,Et,Fa(Nt)):Ba},fE:r((function(n,r){return L(s(Lc,e,i,n,r),Ec)})),fG:u(Nl,n,a)})})),$l=o((function(n,e,o,a){return b(Fl,n,e,o,a,r((function(){return u(wt,E,E)})),t((function(n,e,r){return r})))})),zl={$:0},_l=r((function(n,e){return{$:0,a:n,b:e}})),Al=r((function(n,e){return{$:0,a:n,b:e}})),Vl=$([u(_l,L(-1,1),u(Al,2,0)),u(_l,L(-1,0),u(Al,2,0)),u(_l,L(-1,-1),u(Al,2,0)),u(_l,L(0,-1),u(Al,2,0)),u(_l,L(0,1),u(Al,2,0)),u(_l,L(1,1),u(Al,2,0)),u(_l,L(1,0),u(Al,2,0)),u(_l,L(1,-1),u(Al,2,0))]),Rl=fi,Bl=Rl,kl=3.141592653589793,Il=function(n){return n/255},jl=t((function(n,e,r){return s(Si,Il(n),Il(e),Il(r),1)})),Hl=u(Bl,$([L("camera distance",D(3,10,20)),L("camera azimuth",D(-3.141592653589793,0,kl)),L("camera elevation",D(-1.5707963267948966,0,1.5707963267948966)),L("sunlight azimuth",D(-3.141592653589793,2,kl)),L("sunlight elevation",D(-3.141592653589793,-2,0)),L("cubes side length",D(.5,.9,1)),L("duration of rolling animation",D(.1,.25,1))]),$([L("color 1",f(jl,244,88,67)),L("color 2",f(jl,47,41,43)),L("board color",f(jl,223,224,226)),L("background color",f(jl,165,166,169))])),Wl=r((function(n,e){return u(lc,0,hi(u(Vo,(function(e){var r=e.b.b;return M(e.a,n)?Br(r):kr}),e.T)))})),Ul=r((function(n,e){return u(Wl,n,e.bO)})),Ol=Ul,Yl=function(n){return kl*(n/180)},Gl=function(n){return-n},ql=r((function(n,e){return{bD:n.bE*e.bF-n.bF*e.bE,bE:n.bF*e.bD-n.bD*e.bF,bF:n.bD*e.bE-n.bE*e.bD}})),Jl=function(n){return n.df},Xl=function(n){return n.dg},Ql=function(n){return n.cJ},Zl=B,Kl=k,nu=t((function(n,e,r){var t=n,o=r,a=.5*e,i=Zl(a),c=Kl(a),l=t.eQ,u=l.bD*c,f=i*u,s=u*u,d=l.bE*c,b=i*d,v=u*d,m=d*d,p=l.bF*c,g=i*p,h=u*p,x=d*p,C=p*p;return{bD:(1-2*(m+C))*o.bD+2*(v-g)*o.bE+2*(h+b)*o.bF,bE:2*(v+g)*o.bD+(1-2*(s+C))*o.bE+2*(x-f)*o.bF,bF:2*(h-b)*o.bD+2*(x+f)*o.bE+(1-2*(s+m))*o.bF}})),eu=t((function(n,e,r){var t=n,o=r,a=.5*e,i=Zl(a),c=Kl(a),l=t.cJ,u=o.bD-l.bD,f=o.bE-l.bE,s=o.bF-l.bF,d=t.eQ,b=d.bD*c,v=i*b,m=b*b,p=d.bE*c,g=i*p,h=b*p,x=p*p,C=d.bF*c,M=i*C,P=b*C,T=p*C,y=C*C;return{bD:l.bD+(1-2*(x+y))*u+2*(h-M)*f+2*(P+g)*s,bE:l.bE+2*(h+M)*u+(1-2*(m+y))*f+2*(T-v)*s,bF:l.bF+2*(P-g)*u+2*(T+v)*f+(1-2*(m+x))*s}})),ru=function(n){return n.df},tu=function(n){return n.dg},ou=function(n){return n.dh},au=t((function(n,e,r){return{cJ:f(eu,n,e,Ql(r)),df:f(nu,n,e,ru(r)),dg:f(nu,n,e,tu(r)),dh:f(nu,n,e,ou(r))}})),iu=t((function(n,e,r){return f(au,n(r),e,r)})),cu=function(n){return n.eQ},lu=r((function(n,e){return{bD:e.bD+n.bD,bE:e.bE+n.bE,bF:e.bF+n.bF}})),uu=r((function(n,e){return{cJ:u(lu,n,Ql(e)),df:ru(e),dg:tu(e),dh:ou(e)}})),fu=r((function(n,e){return{bD:n*e.bD,bE:n*e.bE,bF:n*e.bF}})),su=t((function(n,e,r){return u(uu,u(fu,e,n),r)})),du=t((function(n,e,r){return f(su,cu(n(r)),e,r)})),bu=r((function(n,e){return{eQ:e,cJ:n}})),vu=function(n){return u(bu,n.cJ,n.df)},mu=function(n){return u(bu,n.cJ,n.dg)},pu=function(n){return u(bu,n.cJ,n.dh)},gu=function(n){return ic(n)},hu=function(n){return.5*n},xu=I,Cu={bD:0,bE:0,bF:0},Mu=$t,Pu={bD:1,bE:0,bF:0},Tu=Pu,yu={bD:0,bE:0,bF:1},Lu=yu,Du=Mu({cJ:Cu,df:Lu,dg:Tu}),wu=function(n){return a=(e={eF:u(Ol,"camera azimuth",n),eR:u(Ol,"camera distance",n),eU:u(Ol,"camera elevation",n),e_:{bD:0,bE:0,bF:0}}).e_,i=e.eF,c=e.eU,l=e.eR,function(n){var e,r=hu(gu(n.ex));return{cW:(e=xu(r),{$:0,a:e}),db:n.db}}({ex:Yl(40),db:(r={eF:i,eR:l,eU:c,e_:a,dz:Du},o={cJ:r.e_,df:Xl(r.dz),dg:(t=r.dz,u(ql,Jl(t),Xl(t))),dh:Jl(r.dz)},f(du,pu,r.eR,f(iu,vu,Gl(r.eU),f(iu,mu,r.eF,o))))});var e,r,t,o,a,i,c,l},Su={$:0},Eu=r((function(n,e){return f(It,r((function(e,r){return n(e)?u(yr,e,r):r})),E,e)})),Nu={$:1},Fu=r((function(n,e){return{$:2,a:n,b:e}})),$u=function(n){return sc((function(e){return M(n,e.a)}))},zu=r((function(n,e){var r=e.a,t=e.b;switch(n){case 0:return L(r,t+1);case 1:return L(r,t-1);case 2:return L(r-1,t);default:return L(r+1,t)}})),_u=function(n){return n?0:1},Au=function(n){var e=n.a,r=n.b;switch(e){case 0:return u(Al,e,r);case 1:return u(Al,2,r);default:return u(Al,1,_u(r))}},Vu=function(n){var e=n.a,r=n.b;switch(e){case 0:return u(Al,2,_u(r));case 1:return u(Al,e,r);default:return u(Al,0,r)}},Ru=function(n){switch(n){case 0:return u(Ft,Au,u(Ft,Au,Au));case 1:return Au;case 2:return u(Ft,Vu,u(Ft,Vu,Vu));default:return Vu}},Bu=r((function(n,e){var r=e.b;return u(_l,u(zu,n,e.a),u(Ru,n,r))})),ku=r((function(n,e){var r=n.a,t=hi(u(Vo,(function(r){var t,o,a,i=u(Bu,r,n),c=i.a;return u($u,c,e)||(a=(t=c).b,-1>=T(o=t.a,-1)||o>1||-1>=T(a,-1)||a>1)?kr:Br(L(i,r))}),$([0,1,2,3])));if(1===t.$)return Nu;var o=t.a;return u(Fu,o.b,u(yr,o.a,u(Eu,(function(n){return!M(n.a,r)}),e)))})),Iu=r((function(n,e){var r=hi(u(Eu,(function(e){return M(e.a,n)}),e));return 1===r.$?Su:u(ku,r.a,e)})),ju=a((function(n,e,r,t,o){var a;return o.aI.$?o:w(o,{aI:(a={cF:t,el:r,eq:e,c5:n.a1},{$:1,a:a})})})),Hu=t((function(n,e,r){var t=n.bE,o=L($i(n.bD),$i(t)),a=u(Iu,o,r.bC);switch(a.$){case 0:case 1:return r;default:return d(ju,e,o,a.a,a.b,r)}})),Wu=t((function(n,e,r){return{bD:n,bE:e,bF:r}})),Uu=r((function(n,e){return e.bD*n.bD+e.bE*n.bE+e.bF*n.bF})),Ou=r((function(n,e){return n*e})),Yu=function(n){return n.cJ},Gu=r((function(n,e){var r=n.cJ,t=n.fj;return(e.bD-r.bD)*t.bD+(e.bE-r.bE)*t.bE+(e.bF-r.bF)*t.bF})),qu=t((function(n,e,r){return{bD:r.bD+e*n.bD,bE:r.bE+e*n.bE,bF:r.bF+e*n.bF}})),Ju=r((function(n,e){var r=cu(e),t=u(Uu,n.fj,r);if(t){var o=Yu(e);return Br(f(qu,r,u(Ou,-1/t,u(Gu,n,o)),o))}return kr})),Xu=r((function(n,e){return{bD:n,bE:e}})),Qu=r((function(n,e){return n*e})),Zu=function(n){return n.eE},Ku=U,nf=r((function(n,e){return e/n})),ef=function(n){return Ql(n)},rf={bD:0,bE:0,bF:-1},tf=r((function(n,e){return e/n})),of=r((function(n,e){var r=n.dh,t=n.dg,o=n.df;return{bD:o.bD*e.bD+t.bD*e.bE+r.bD*e.bF,bE:o.bE*e.bD+t.bE*e.bE+r.bE*e.bF,bF:o.bF*e.bD+t.bF*e.bE+r.bF*e.bF}})),af=function(n){return{bD:-n.bD,bE:-n.bE,bF:-n.bF}},cf=function(n){return af(ou(n))},lf=r((function(n,e){var r=n.cJ,t=n.df;return(e.bD-r.bD)*t.bD+(e.bE-r.bE)*t.bE})),uf=t((function(n,e,r){return{bD:n,bE:e,bF:r}})),ff=o((function(n,e,r,t){var o=n.cJ,a=n.dh,i=n.dg,c=n.df;return{bD:o.bD+e*c.bD+r*i.bD+t*a.bD,bE:o.bE+e*c.bE+r*i.bE+t*a.bE,bF:o.bF+e*c.bF+r*i.bF+t*a.bF}})),sf=r((function(n,e){var r=n.cJ,t=n.dg;return(e.bD-r.bD)*t.bD+(e.bE-r.bE)*t.bE})),df=t((function(n,e,r){var t=n,o=u(sf,Zu(e),r),a=u(lf,Zu(e),r),i=t.db,c=function(n){return n.dr}(e).b,l=t.cW;if(l.$){var d=u(tf,c,l.a);return u(bu,s(ff,i,u(Qu,d,a),u(Qu,d,o),0),cf(t.db))}var b=Gl(u(nf,l.a,u(Ou,.5,c))),v=u(of,i,u(lc,rf,function(n){var e=n,r=u(st,ic(e.bD),u(st,ic(e.bE),ic(e.bF)));if(r){var t=e.bF/r,o=e.bE/r,a=e.bD/r,i=Ku(a*a+o*o+t*t);return Br({bD:a/i,bE:o/i,bF:t/i})}return kr}(f(uf,a,o,b))));return u(bu,ef(t.db),v)})),bf=function(n){var e=n;return{bD:Zl(e),bE:Kl(e)}},vf=r((function(n,e){return{cJ:e,df:n,dg:(r=n,{bD:-r.bE,bE:r.bD})};var r})),mf=r((function(n,e){return u(vf,bf(n),e)})),pf=t((function(n,e,r){var t=n.a,o=n.b;return{eE:u(mf,e,r),dr:L(gu(t),gu(o))}})),gf=function(n){return n.bD},hf=r((function(n,e){return{bD:n,bE:e}})),xf=function(n){return n.bE},Cf=function(n){return n.bF},Mf=o((function(n,e,r,t){var o=r.bD,a=r.bE,i=f(pf,L(e.dd,e.co),Yl(0),u(Xu,0,0));return u(xi,(function(n){return f(Wu,gf(n),xf(n),Cf(n))}),u(Ju,t,f(df,n,i,u(hf,o,a))))})),Pf=r((function(n,e){return{fj:n,cJ:e}})),Tf=r((function(n,e){return u(Pf,e.fj,u(lu,n,e.cJ))})),yf=r((function(n,e){return{fj:e,cJ:n}})),Lf=u(yf,Cu,Lu),Df=o((function(n,e,r,t){return s(Mf,e,r,t,u(Tf,f(uf,0,0,n),Lf))})),wf=r((function(n,e){if(n.F.aP){var r=s(Df,u(Ol,"cubes side length",n),wu(n),n._,n.F);return 1===r.$?e:f(Hu,r.a,n,e)}return e})),Sf=r((function(n,e){var r,o=hi((r=n.aa,f(wr,t((function(n,e,r){return u(yr,e,r)})),E,r)));if(o.$)return e;var a=o.a,i=s(Df,u(Ol,"cubes side length",n),wu(n),n._,a);return 1===i.$?e:f(Hu,i.a,n,e)})),Ef=r((function(n,e){var r=e.aI;if(r.$){var t=r.a.cF;return T(n.a1-r.a.c5,u(Ol,"duration of rolling animation",n))>0?w(e,{aI:zl,bC:t}):e}return e})),Nf=r((function(n,e){return u(Ef,n,u(Sf,n,u(wf,n,e)))})),Ff=re("br"),$f=u(wt,$([u(Xc,"position","absolute"),u(Xc,"width","100%"),u(Xc,"font-size","20px"),u(Xc,"text-align","center")]),$([u(il,E,$([Zc("Eight Rolling Cubes Puzzle"),u(Ff,E,E),Zc("by John Harris")])),u(il,E,$([Zc("Can you make all the red faces look down with the center cell vacant?")]))])),zf=r((function(n,e){return{$:0,a:n,b:e}})),_f=r((function(n,e){return T(e,n)>-1})),Af=r((function(n,e){return n+.5*(e-n)})),Vf=r((function(n,e){return e-n})),Rf={bD:-1,bE:0,bF:0},Bf={bD:0,bE:-1,bF:0},kf={bD:0,bE:1,bF:0},If=t((function(n,e,r){return{bD:n,bE:e,bF:r}})),jf=i((function(n,e,r,t,o,a){var i=u(_f,r,a)?yu:rf,c=u(_f,e,o)?kf:Bf,l=u(_f,n,t)?Pu:Rf,s=D(gu(u(Vf,n,t)),gu(u(Vf,e,o)),gu(u(Vf,r,a)));return{eE:{cJ:f(If,u(Af,n,t),u(Af,e,o),u(Af,r,a)),df:l,dg:c,dh:i},dr:s}})),Hf=r((function(n,e){return b(jf,gf(n),xf(n),Cf(n),gf(e),xf(e),Cf(e))})),Wf=t((function(n,e,r){return{bD:n,bE:e,bF:r}})),Uf=r((function(n,e){var r=D(e.a/2,e.b/2,e.c/2),t=r.a,o=r.b,a=r.c;return u(zf,n,u(Hf,f(Wf,-t,-o,-a),f(Wf,t,o,a)))})),Of=function(n){return n*kl/180},Yf=r((function(n,e){return u(lc,tl,hi(u(Vo,(function(e){var r=e.b;return M(e.a,n)?Br(r):kr}),e.O)))})),Gf=r((function(n,e){return u(Yf,n,e.bO)})),qf=Gf,Jf=function(n){return{$:5,a:n}},Xf=function(n){return Jf(n)},Qf=r((function(n,e){return{$:2,a:n,b:e}})),Zf=r((function(n,e){return{$:4,a:n,b:e}})),Kf=r((function(n,e){return{$:3,a:n,b:e}})),ns=r((function(n,e){return{$:1,a:n,b:e}})),es=t((function(n,e,r){return{bD:n,bE:e,bF:r}})),rs=function(n){return n.eE},ts=function(n){return n.dr},os=r((function(n,e){return{eE:u(uu,n,rs(e)),dr:ts(e)}})),as=r((function(n,e){var r=e;return u(bu,u(lu,n,r.cJ),r.eQ)})),is=r((function(n,e){var r=e;return{k:u(as,n,r.k),fb:r.fb,fp:r.fp}})),cs=r((function(n,e){var r=e.b;return L(n(e.a),n(r))})),ls=r((function(n,e){return u(cs,lu(n),e)})),us=function(n){return n.eM},fs=function(n){return n.fp},ss=r((function(n,e){return{eM:e,fp:gu(n)}})),ds=r((function(n,e){return u(ss,fs(e),u(lu,n,us(e)))})),bs=r((function(n,e){var r=e.b,t=e.c;return D(n(e.a),n(r),n(t))})),vs=r((function(n,e){return u(bs,lu(n),e)})),ms=r((function(n,e){var r=n.a,t=n.b,o=n.c,a=f(es,r,t,o);switch(e.$){case 0:return u(zf,e.a,u(os,a,e.b));case 1:return u(ns,e.a,u(vs,a,e.b));case 3:return u(Kf,e.a,u(ds,a,e.b));case 2:return u(Qf,e.a,u(is,a,e.b));case 4:return u(Zf,e.a,u(ls,a,e.b));default:var i=e.a;return Jf(u(jt,ms(D(r,t,o)),i))}})),ps=function(n){return ms(D(n,0,0))},gs=function(n){return ms(D(0,0,n))},hs=t((function(n,e,r){return{eE:f(au,n,e,rs(r)),dr:ts(r)}})),xs=r((function(n,e){var r=u(eu,n,e),t=u(nu,n,e);return function(n){var e=n;return u(bu,r(e.cJ),t(e.eQ))}})),Cs=t((function(n,e,r){var t=r;return{k:f(xs,n,e,t.k),fb:t.fb,fp:t.fp}})),Ms=t((function(n,e,r){return u(cs,u(eu,n,e),r)})),Ps=t((function(n,e,r){return u(ss,fs(r),f(eu,n,e,us(r)))})),Ts=t((function(n,e,r){return u(bs,u(eu,n,e),r)})),ys=t((function(n,e,r){switch(r.$){case 0:return u(zf,r.a,f(hs,n,e,r.b));case 1:return u(ns,r.a,f(Ts,n,e,r.b));case 3:return u(Kf,r.a,f(Ps,n,e,r.b));case 2:return u(Qf,r.a,f(Cs,n,e,r.b));case 4:return u(Zf,r.a,f(Ms,n,e,r.b));default:var t=r.a;return Jf(u(jt,u(ys,n,e),t))}})),Ls=u(bu,Cu,Lu),Ds=r((function(n,e){return f(ys,Ls,n,e)})),ws=function(n){var e=u(qf,"board color",n),r=u(ps,-1.55,u(Uf,e,D(.1,3.2,.2))),t=u(gs,-.5,u(Uf,e,D(3,3,1)));return Xf($([r,u(Ds,Of(90),r),u(Ds,Of(180),r),u(Ds,Of(270),r),t]))},Ss=function(n){return ms(D(0,n,0))},Es=r((function(n,e){return 0>T(n,e)?n:e})),Ns=r((function(n,e){var r=n.b;return u(ys,u(bu,n.a,{bD:r.a,bE:r.b,bF:r.c}),e)})),Fs=t((function(n,e,r){var t=e.aI;if(t.$){var o=t.a.c5,a=t.a.el;if(M(t.a.eq,r)){var i=(n.a1-o)/u(Ol,"duration of rolling animation",n),c=u(Es,Of(90),i*Of(90)),l=function(){switch(a){case 0:return L({bD:.5,bE:.5,bF:-.5},D(-1,0,0));case 1:return L({bD:-.5,bE:-.5,bF:-.5},D(1,0,0));case 2:return L({bD:-.5,bE:.5,bF:-.5},D(0,-1,0));default:return L({bD:.5,bE:-.5,bF:-.5},D(0,1,0))}}();return u(Ns,l,c)}return $t}return $t})),$s=u(bu,Cu,Tu),zs=r((function(n,e){return f(ys,$s,n,e)})),_s=kf,As=u(bu,Cu,_s),Vs=r((function(n,e){return f(ys,As,n,e)})),Rs=t((function(n,e,r){var t=r.a,o=t.a,a=t.b,i=r.b,c=u(Ol,"cubes side length",n),l=function(){if(i.b)switch(i.a){case 2:return zs(Of(180));case 1:return zs(Of(90));default:return Vs(-Of(90))}else switch(i.a){case 2:return $t;case 1:return zs(-Of(90));default:return Vs(Of(90))}}(),f=u(qf,"color 2",n),d=u(gs,c/4,u(Uf,u(qf,"color 1",n),D(c,c,c/2))),b=u(gs,-c/4,u(Uf,f,D(c,c,c/2)));return u(Ss,a,u(ps,o,u(gs,c/2,s(Fs,n,e,L(o,a),l(Xf($([d,b])))))))})),Bs=r((function(n,e){return Xf(u(jt,u(Rs,n,e),e.bC))})),ks=function(n){return{$:0,a:n}},Is={$:3},js=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),Hs=js,Ws=r((function(n,e){return e.b?f(It,yr,e,n):n})),Us=function(n){return f(It,Ws,E,n)},Os=r((function(n,e){return Us(u(jt,n,e))})),Ys=function(n){return u(le,"height",jr(n))},Gs=function(n){return te(function(n){return"script"==n?"p":n}(n))},qs=function(n){return{$:2,a:n}},Js=r((function(n,e){switch(e.$){case 0:return u(dr,n,e);case 1:return u(br,n,e);case 2:return u(vr,n,e);case 3:return u(mr,n,e);case 4:return u(pr,n,e);default:return u(gr,n,e)}})),Xs=r((function(n,e){switch(e.$){case 0:return u(qe,n,e);case 1:return u(Je,n,e);case 2:return u(Xe,n,e);case 3:return u(Qe,n,e);case 4:return u(Ze,n,e);case 5:return u(Ke,n,e);case 6:return u(nr,n,e);case 7:return u(er,n,e);default:return function(n){var e=n.sampleAlphaToCoverage;e.toggle=n.toggle,e.enabled||(n.gl.enable(n.gl.SAMPLE_ALPHA_TO_COVERAGE),e.enabled=!0)}(n)}})),Qs=t((function(n,e,r){return f(sr,n,e,r)})),Zs=Tr,Ks=s(Zs,1,1,1,1),nd=t((function(n,e,r){return u(jt,(function(n){return u(n,e,r)}),n)})),ed=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),rd=r((function(n,e){var r=e.bD,t=e.bE;return f(ed,n*r/t,n,n*(1-r-t)/t)})),td=Mr,od=r((function(n,e){return f(td,3.2406*(t=(r=u(rd,n,e)).a)-1.5372*(o=r.b)-.4986*(a=r.c),-.9689*t+1.8758*o+.0415*a,.0557*t-.204*o+1.057*a);var r,t,o,a})),ad=r((function(n,e){return{dD:M(n.dD,e.dD),p:n.p*e.p+n.q*e.s+n.r*e.v,q:n.p*e.q+n.q*e.t+n.r*e.w,r:n.p*e.r+n.q*e.u+n.r*e.x,s:n.s*e.p+n.t*e.s+n.u*e.v,t:n.s*e.q+n.t*e.t+n.u*e.w,u:n.s*e.r+n.t*e.u+n.u*e.x,v:n.v*e.p+n.w*e.s+n.x*e.v,w:n.v*e.q+n.w*e.t+n.x*e.w,x:n.v*e.r+n.w*e.u+n.x*e.x,G:e.G+(n.G*e.p+n.H*e.s+n.I*e.v)*e.b5,H:e.H+(n.G*e.q+n.H*e.t+n.I*e.w)*e.b5,I:e.I+(n.G*e.r+n.H*e.u+n.I*e.x)*e.b5,b5:n.b5*e.b5}})),id=function(n){var e=new Float64Array(16);return e[0]=n.dL,e[1]=n.dP,e[2]=n.dT,e[3]=n.dX,e[4]=n.dM,e[5]=n.dQ,e[6]=n.dU,e[7]=n.dY,e[8]=n.dN,e[9]=n.dR,e[10]=n.dV,e[11]=n.dZ,e[12]=n.dO,e[13]=n.dS,e[14]=n.dW,e[15]=n.d_,e},cd=a((function(n,e,r,t,o){return b(o,n,s(Zs,t.b5,t.b5,t.b5,t.dD?1:-1),function(n){return id({dL:n.p,dM:n.s,dN:n.v,dO:n.G,dP:n.q,dQ:n.t,dR:n.w,dS:n.H,dT:n.r,dU:n.u,dV:n.x,dW:n.I,dX:0,dY:0,dZ:0,d_:1})}(t),t.dD,e,r)})),ld=i((function(n,e,r,t,o,a){n:for(;;)switch(o.$){case 0:return a;case 5:var i=o.b;n=n,e=e,r=r,t=u(ad,o.a,t),o=i,a=a;continue n;case 1:return{M:u(yr,d(cd,n,e,r,t,o.b),a.M),V:a.V,ft:a.ft};case 3:return{M:a.M,V:u(yr,d(cd,n,e,r,t,o.b),a.V),ft:a.ft};case 2:return{M:a.M,V:a.V,ft:u(yr,d(cd,n,e,r,t,o.a),a.ft)};default:var c=o.a;return f(Ur,s(ld,n,e,r,t),a,c)}})),ud=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),fd=ud,sd=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),dd=r((function(n,e){return{$:6,a:n,b:e}})),bd=dd,vd=$([s(sd,518,!1,0,1),s(fd,!1,!1,!1,!1),u(bd,0,1)]),md=519,pd=7681,gd={src:"\n        precision lowp float;\n\n        void main() {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        }\n    ",attributes:{},uniforms:{}},hd=Ge,xd=r((function(n,e){return{$:0,a:n,b:e}})),Cd=xd({ds:1,dC:0,d7:5}),Md=Cr,Pd=Cd($([{b1:u(Md,-1,-1)},{b1:u(Md,1,-1)},{b1:u(Md,-1,1)},{b1:u(Md,1,1)}])),Td={src:"\n        precision lowp float;\n\n        attribute vec2 position;\n\n        void main() {\n            gl_Position = vec4(position, 0.0, 1.0);\n        }\n    ",attributes:{position:"b1"},uniforms:{}},yd=function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return function(f){return{$:2,a:n,b:e,c:r,d:t,e:o,f:a,g:i,h:c,i:l,j:u,k:f}}}}}}}}}}}},Ld=t((function(n,e,t){var o=n.cY,a=n.cz,i=n.de,c=r((function(n,e){return e(n)})),l=r((function(n,e){return e(n)})),s=function(n){return u(Ft,c(n.bt),u(Ft,l(n.be),u(Ft,l(n.bG),l(n.bH))))};return u(s,t,u(s,e,f(yd,o,a,i)))})),Dd=function(n){return f(Ld,{cz:n.cz,cY:n.cY,de:n.de},{be:n.be,bt:n.bt,bG:n.bG,bH:n.bH},{be:n.be,bt:n.bt,bG:n.bG,bH:n.bH})},wd=function(n){return d(hd,$([Dd(n),s(fd,!1,!1,!1,!1)]),Td,gd,Pd,{})},Sd=wd({be:pd,cz:0,cY:8,bt:md,de:15,bG:pd,bH:pd}),Ed=7680,Nd=function(n){return wd({be:Ed,cz:15,cY:8,bt:516,de:(e=n,u(Fi,2,e+4)),bG:5386,bH:5386});var e},Fd=t((function(n,e,r){return Us($([f(nd,n,r,vd),$([Nd(e),Sd])]))})),$d=r((function(n,e){return Us(u(Jr,Fd(n),e))})),zd=s(sd,513,!0,0,1),_d=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),Ad=r((function(n,e){return f(_d,32774,n,e)})),Vd=function(n){var e=n.b3,t=n.bQ,o=n.bK,a=n.bI,i=n.bM,c=n.aO;return u(r((function(n,r){var i=n.b,c=n.c,l=r.a,u=r.b,f=r.c;return function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return{$:0,a:n,b:e,c:r,d:t,e:o,f:a,g:i,h:c,i:l,j:u}}}}}}}}}}}(n.a)(i)(c)(l)(u)(f)(e)(t)(o)(a)})),i,c)}({bI:0,aO:u(Ad,1,771),bK:0,bM:u(Ad,770,771),bQ:0,b3:0}),Rd=$([zd,Vd]),Bd=function(n){return n.d2},kd=function(n){return n.d5},Id=function(n){return D(u(Vf,function(n){return n.d3}(n),function(n){return n.d0}(n)),u(Vf,function(n){return n.d4}(n),function(n){return n.d1}(n)),u(Vf,kd(n),Bd(n)))},jd=function(n){return{cJ:{bD:n.G,bE:n.H,bF:n.I},df:{bD:n.p,bE:n.q,bF:n.r},dg:{bD:n.s,bE:n.t,bF:n.u},dh:{bD:n.v,bE:n.w,bF:n.x}}},Hd=r((function(n,e){var r=n.dh,t=n.dg,o=n.df;return{bD:e.bD*o.bD+e.bE*o.bE+e.bF*o.bF,bE:e.bD*t.bD+e.bE*t.bE+e.bF*t.bF,bF:e.bD*r.bD+e.bE*r.bE+e.bF*r.bF}})),Wd=r((function(n,e){var r=n.cJ,t=e.bD-r.bD,o=e.bE-r.bE,a=e.bF-r.bF,i=n.dh,c=n.dg,l=n.df;return{bD:t*l.bD+o*l.bE+a*l.bF,bE:t*c.bD+o*c.bE+a*c.bF,bF:t*i.bD+o*i.bE+a*i.bF}})),Ud=r((function(n,e){return{cJ:u(Wd,n,Ql(e)),df:u(Hd,n,ru(e)),dg:u(Hd,n,tu(e)),dh:u(Hd,n,ou(e))}})),Od=r((function(n,e){return u(st,n,e)})),Yd=r((function(n,e){return u(Es,n,e)})),Gd=r((function(n,e){var r=e,t=n;return{d0:u(Od,t.d0,r.d0),d1:u(Od,t.d1,r.d1),d2:u(Od,t.d2,r.d2),d3:u(Yd,t.d3,r.d3),d4:u(Yd,t.d4,r.d4),d5:u(Yd,t.d5,r.d5)}})),qd=r((function(n,e){return e+n})),Jd=r((function(n,e){var r=n.a,t=n.c,o=hu(gu(n.b)),a=hu(gu(r)),i=hu(gu(t)),c=function(n){return D(n.bD,n.bE,n.bF)}(e),l=c.a,f=c.b,s=c.c;return{d0:u(qd,a,l),d1:u(qd,o,f),d2:u(qd,i,s),d3:u(Vf,a,l),d4:u(Vf,o,f),d5:u(Vf,i,s)}})),Xd=o((function(n,e,r,t){var o=r.eM,a=2*r.e2*e,i=2*r.e1*e,c=2*r.e0*e,l=o.bF*e,s=o.bE*e,d=o.bD*e,b=ou(n),v=ic(c*b.bD)+ic(i*b.bE)+ic(a*b.bF),m=tu(n),p=ic(c*m.bD)+ic(i*m.bE)+ic(a*m.bF),g=ru(n),h=ic(c*g.bD)+ic(i*g.bE)+ic(a*g.bF),x=u(Jd,D(h,p,v),u(Wd,n,f(Wf,d,s,l)));return Br(t.$?x:u(Gd,t.a,x))})),Qd=o((function(n,e,r,t){n:for(;;){if(!t.b)return r;var o=t.a,a=t.b;switch(o.$){case 0:n=c=n,e=l=e,r=f=r,t=a;continue n;case 1:var i=s(Xd,n,e,o.a,r);n=c=n,e=l=e,r=f=i,t=a;continue n;case 2:n=c=n,e=l=e,r=f=r,t=a;continue n;case 3:i=s(Xd,n,e,o.a,r),n=c=n,e=l=e,r=f=i,t=a;continue n;case 4:var c=n,l=e,f=s(Qd,n,e,r,o.a);n=c,e=l,r=f,t=a;continue n;default:var d=o.a,b=o.b,v=u(Ud,jd(d),n),m=e*d.b5;n=c=n,e=l=e,r=f=s(Qd,v,m,r,$([b])),t=a;continue n}}})),Zd=function(n){return n[0]},Kd=function(n){return n[1]},nb=function(n){return n[2]},eb=function(n){return{$:4,a:n}},rb=r((function(n,e){for(;;){if(!n.b)return e;var r=n.a;n=n.b,e=u(yr,r,e)}})),tb=function(n){return eb(u(rb,n,E))},ob={dD:!0,p:1,q:0,r:0,s:0,t:1,u:0,v:0,w:0,x:1,G:0,H:0,I:0,b5:1},ab=wd({be:pd,cz:0,cY:8,bt:md,de:255,bG:pd,bH:pd}),ib={bK:0,eL:!1,bQ:0,cU:0,b3:0,c8:0,bD:0,bE:0,bF:0},cb=r((function(n,e){return id({dL:n.bD,dM:n.b3,dN:e.bD,dO:e.b3,dP:n.bE,dQ:n.bQ,dR:e.bE,dS:e.bQ,dT:n.bF,dU:n.bK,dV:e.bF,dW:e.bK,dX:n.c8,dY:n.cU,dZ:e.c8,d_:e.cU})})),lb=L({bl:u(cb,ib,ib),bU:u(cb,ib,ib),bV:u(cb,ib,ib),bW:u(cb,ib,ib)},s(Zs,0,0,0,0)),ub=function(n){return s(sd,515,n.ab,n.X,n.W)},fb=$([ub({W:1,X:0,ab:!0}),Dd({be:Ed,cz:240,cY:0,bt:514,de:0,bG:Ed,bH:Ed}),Vd]),sb=r((function(n,e){var r=n,t=e.eZ,o=e.eD,a=gu(e.fi),i=gu(t),c=r.cW;if(c.$){var l=c.a;return mc(i)?id({dL:2/(o*l),dM:0,dN:0,dO:0,dP:0,dQ:2/l,dR:0,dS:0,dT:0,dU:0,dV:0,dW:-1,dX:0,dY:0,dZ:0,d_:1}):id({dL:2/(o*l),dM:0,dN:0,dO:0,dP:0,dQ:2/l,dR:0,dS:0,dT:0,dU:0,dV:-2/(i-a),dW:-(i+a)/(i-a),dX:0,dY:0,dZ:0,d_:1})}var u=c.a;return mc(i)?id({dL:1/(o*u),dM:0,dN:0,dO:0,dP:0,dQ:1/u,dR:0,dS:0,dT:0,dU:0,dV:-1,dW:-2*a,dX:0,dY:0,dZ:-1,d_:0}):id({dL:1/(o*u),dM:0,dN:0,dO:0,dP:0,dQ:1/u,dR:0,dS:0,dT:0,dU:0,dV:-(i+a)/(i-a),dW:-2*i*a/(i-a),dX:0,dY:0,dZ:-1,d_:0})})),db=r((function(n,e){return 1==(1&n>>e)?0:1})),bb=t((function(n,e,r){return Us(u(jt,(function(r){var t=r<<4;return f(nd,n,L(e,s(Zs,u(db,r,0),u(db,r,1),u(db,r,2),u(db,r,3))),function(n){return $([ub({W:1,X:0,ab:!0}),Dd({be:Ed,cz:240,cY:n,bt:514,de:0,bG:Ed,bH:Ed}),Vd])}(t))}),u(qr,1,u(Fi,2,r)-1)))})),vb={cJ:Cu,df:Tu,dg:_s,dh:Lu},mb=r((function(n,e){var r,t,o,a,i;return t=Ql(r=u(Ud,e,n)),o=ou(r),a=tu(r),i=ru(r),id({dL:i.bD,dM:a.bD,dN:o.bD,dO:t.bD,dP:i.bE,dQ:a.bE,dR:o.bE,dS:t.bE,dT:i.bF,dU:a.bF,dV:o.bF,dW:t.bF,dX:0,dY:0,dZ:0,d_:1})})),pb=function(n){return ru(n)},gb=function(n){return tu(n)},hb=r((function(n,e){var r,t=$([(1,{$:1,a:1}),qs(0),ks(!0),s(Hs,0,0,0,0)]),o=function(){var e=n.eB;switch(e.$){case 0:return D(t,"0",1);case 1:return D(u(yr,Is,t),"1",1);default:return D(t,"0",e.a)}}(),a=o.a,i=o.b,c=o.c,l=n.dr,d=l.a,v=l.b,m=u(Xc,"height",jr(v)+"px"),p=d,g=p/v,h=u(Os,(function(e){return function(n){var e=function(n){return n.db}(n.eJ),r={cJ:ef(e),df:pb(e),dg:gb(e),dh:af(cf(e))},t=tb(n.dv),o=s(Qd,r,1,kr,$([t]));if(1===o.$)return E;var a=o.a,i=u(mb,vb,e),c=u(Ou,.99,u(Od,gu(n.$7),Gl(Bd(a)))),l=Id(a),d=function(n){var e=n,r=u(st,ic(e.bD),u(st,ic(e.bE),ic(e.bF)));if(r){var t=e.bF/r,o=e.bE/r,a=e.bD/r;return Ku(a*a+o*o+t*t)*r}return 0}(f(uf,l.a,l.b,l.c)),v=u(Ou,1.01,u(qd,d,Gl(kd(a)))),m=u(sb,n.eJ,{eD:n.eD,eZ:v,fi:c}),p=function(n){return{dL:n[0],dP:n[1],dT:n[2],dX:n[3],dM:n[4],dQ:n[5],dU:n[6],dY:n[7],dN:n[8],dR:n[9],dV:n[10],dZ:n[11],dO:n[12],dS:n[13],dW:n[14],d_:n[15]}}(m).d_,g=p?af(cf(e)):ef(e),h=function(){var e=n.fD;switch(e.$){case 0:return L(0,0);case 1:return L(1,0);case 2:return L(2,0);case 3:return L(3,e.a);case 4:return L(4,e.a);default:return L(5,0)}}(),x=h.a,C=h.b,M=u(od,n.eX,n.fI),P=id({dL:0,dM:g.bD,dN:Zd(M),dO:n.es,dP:0,dQ:g.bE,dR:Kd(M),dS:d,dT:0,dU:g.bF,dV:nb(M),dW:x,dX:0,dY:p,dZ:0,d_:C}),T=b(ld,P,i,m,ob,t,{M:E,V:E,ft:E}),y=n.fd;switch(y.$){case 0:return Us($([f(nd,T.M,L(D=y.a,Ks),Rd),f(nd,T.V,lb,Rd)]));case 1:var D=y.a;return Us($([f(nd,T.M,lb,Rd),$([ab]),f(nd,T.ft,D.bl,vd),$([Nd(0)]),f(nd,T.M,L(D,Ks),fb),f(nd,T.V,lb,Rd)]));default:var w=y.a,S=y.b;return Us($([f(nd,T.M,L(S,Ks),Rd),$([ab]),u($d,T.ft,w),f(bb,T.M,S,Or(w)),f(nd,T.V,lb,Rd)]))}}({eD:g,eJ:n.eJ,$7:n.$7,dv:e.dv,eX:e.eX,fd:e.fd,es:c,fD:e.fD,fI:e.fI})}),e),x=u(Xc,"width",jr(p)+"px"),C=function(n){var e,r,t=n.b,o=n.c,a=n.d,i=function(n){return $i(1e4*n)/100};return e=$(["rgba(",bc(i(n.a)),"%,",bc(i(t)),"%,",bc(i(o)),"%,",bc((r=a,$i(1e3*r)/1e3)),")"]),u(Hr,"",e)}(n.dk);return f(Gs,"div",$([u(Xc,"padding","0px"),x,m]),$([L(i,f(Qs,a,$([(r=$i(p*c),u(le,"width",jr(r))),Ys($i(v*c)),x,m,u(Xc,"display","block"),u(Xc,"background-color",C)]),h))]))})),xb={bD:.31271,bE:.32902},Cb=r((function(n,e){var r=n,t=e.eQ,o=t.bD,a=t.bE,i=t.bF,c=u(od,e.cp,e.cg);return{bK:nb(c),eL:r,bQ:Kd(c),cU:0,b3:Zd(c),c8:1,bD:-o,bE:-a,bF:-i}})),Mb={$:0},Pb=r((function(n,e){return T(e,n)>0})),Tb=function(n){return function(n){for(;;){if(M(n.e8,0)&&M(n.e9,0))return ib;if(!u(Pb,gu(n.e8),gu(n.e9))){var e=ic(n.e9/kl),r=ic(n.e8/kl),t=n.b8,o=t.bD,a=t.bE,i=t.bF,c=u(od,1,n.cg);return{bK:r*nb(c),eL:!1,bQ:r*Kd(c),cU:e/r,b3:r*Zd(c),c8:3,bD:o,bE:a,bF:i}}n={cg:n.cg,e8:n.e9,e9:n.e8,b8:af(n.b8)}}}({cg:n.cg,e8:n.cp,e9:0,b8:n.b8})},yb=t((function(n,e,r){return 0>T(r,n)?n:T(r,e)>0?e:r})),Lb=function(n){var e=f(yb,1667,25e3,n),r=e>4e3?-3025846900/(e*e*e)+2107037.9/(e*e)+.2226347*1e3/e+.24039:-266123900.00000003/(e*e*e)-.2343589*1e6/(e*e)+877.6956/e+.17991;return{bD:r,bE:e>2222?e>4e3?r*r*r*3.081758-r*r*5.8733867+3.75112997*r-.37001483:r*r*r*-.9549476-r*r*1.37418593+2.09137015*r-.16748867:r*r*r*-1.1063814-r*r*1.3481102+2.18555832*r-.20219683}},Db=Lb(12e3),wb=Lb(5600),Sb=r((function(n,e){return{$:2,a:n,b:e}})),Eb=function(n){return{$:0,a:n}},Nb=function(n){return n.eL},Fb=Eb(lb.a),$b=r((function(n,e){return f(It,r((function(e,r){var t=r.a,o=r.b;return n(e)?L(u(yr,e,t),o):L(t,u(yr,e,o))})),L(E,E),e)})),zb=function(n){return id({dL:n.bD,dM:n.b3,dN:0,dO:0,dP:n.bE,dQ:n.bQ,dR:0,dS:0,dT:n.bF,dU:n.bK,dV:0,dW:0,dX:n.c8,dY:n.cU,dZ:0,d_:0})},_b=l((function(n,e,r,t,o,a,i,c){var l=u($b,Nb,$([n,e,r,t])),f=l.a;if(f.b){var s=S(f,l.b);if(s.b&&s.b.b&&s.b.b.b&&s.b.b.b.b&&!s.b.b.b.b.b){var d=s.a,b=s.b,v=b.a,m=b.b,p=m.a,g=m.b.a;return u(Sb,u(jt,zb,f),{bl:u(cb,d,v),bU:u(cb,p,g),bV:u(cb,o,a),bW:u(cb,i,c)})}return Fb}return Eb({bl:u(cb,n,e),bU:u(cb,r,t),bV:u(cb,o,a),bW:u(cb,i,c)})})),Ab=t((function(n,e,r){return m(_b,n,e,r,ib,ib,ib,ib,ib)})),Vb=o((function(n,e,r,t){return{$:2,a:n,b:e,c:r,d:t}})),Rb=o((function(n,e,r,t){return{$:3,a:n,b:e,c:r,d:t}})),Bb=o((function(n,e,r,t){return{$:4,a:n,b:e,c:r,d:t}})),kb=o((function(n,e,r,t){return{$:6,a:n,b:e,c:r,d:t}})),Ib=o((function(n,e,r,t){return{$:7,a:n,b:e,c:r,d:t}})),jb=o((function(n,e,r,t){return{$:5,a:n,b:e,c:r,d:t}})),Hb=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),Wb=function(n){switch(n.$){case 0:return n;case 1:return s(Hb,n.a,n.b,n.c,1);case 2:return s(Vb,n.a,n.b,n.c,1);case 3:return s(Rb,n.a,n.b,n.c,1);case 4:return s(Bb,n.a,n.b,n.c,1);case 5:return s(jb,n.a,n.b,n.c,1);case 6:return s(kb,n.a,n.b,n.c,1);case 7:return s(Ib,n.a,n.b,n.c,1);case 8:case 9:default:return n}},Ub={$:0},Ob=l((function(n,e,r,t,o,a,i,c){for(;;){if(!c.b)return{d0:e,d1:t,d2:a,d3:n,d4:r,d5:o};var l=c.b,f=i(c.a);n=u(Yd,f.d3,n),e=u(Od,f.d0,e),r=u(Yd,f.d4,r),t=u(Od,f.d1,t),o=u(Yd,f.d5,o),a=u(Od,f.d2,a),i=i,c=l}})),Yb=t((function(n,e,r){var t=n(e);return m(Ob,t.d3,t.d0,t.d4,t.d1,t.d5,t.d2,n,r)})),Gb=r((function(n,e){return 1>T(e,n)})),qb=function(n){return u(Gb,n.d0,n.d3)&&u(Gb,n.d1,n.d4)&&u(Gb,n.d2,n.d5)?n:{d0:u(Od,n.d3,n.d0),d1:u(Od,n.d4,n.d1),d2:u(Od,n.d5,n.d2),d3:u(Yd,n.d3,n.d0),d4:u(Yd,n.d4,n.d1),d5:u(Yd,n.d5,n.d2)}},Jb=function(n){return n},Xb=function(n){var e=n.a,r=n.b,t=n.c,o=gf(e),a=xf(e),i=Cf(e),c=gf(r),l=xf(r),f=Cf(r),s=gf(t),d=xf(t),b=Cf(t);return qb({d0:u(Od,o,u(Od,c,s)),d1:u(Od,a,u(Od,l,d)),d2:u(Od,i,u(Od,f,b)),d3:u(Yd,o,u(Yd,c,s)),d4:u(Yd,a,u(Yd,l,d)),d5:u(Yd,i,u(Yd,f,b))})},Qb=function(n){return new Float64Array([n.bD,n.bE,n.bF])},Zb=function(n){return Qb(n)},Kb=function(n){return Qb(n)},nv=r((function(n,e){return{bD:e.bE*n.bF-e.bF*n.bE,bE:e.bF*n.bD-e.bD*n.bF,bF:e.bD*n.bE-e.bE*n.bD}})),ev=r((function(n,e){return{bD:e.bD-n.bD,bE:e.bE-n.bE,bF:e.bF-n.bF}})),rv={bD:0,bE:0,bF:0},tv=r((function(n,e){var r=n,t=e,o=u(st,ic(t.bD),u(st,ic(t.bE),ic(t.bF)));if(o){var a=t.bF/o,i=t.bE/o,c=t.bD/o,l=Ku(c*c+i*i+a*a);return{bD:r*c/l,bE:r*i/l,bF:r*a/l}}return rv}))(1),ov=t((function(n,e,r){return tv(u(nv,u(ev,e,r),u(ev,n,e)))})),av=function(n){var e=n.a,r=n.b,t=n.c,o=Kb(f(ov,e,r,t));return D({n:o,b1:Zb(e)},{n:o,b1:Zb(r)},{n:o,b1:Zb(t)})},iv=r((function(n,e){return{$:2,a:n,b:e}}))({ds:3,dC:0,d7:4}),cv=t((function(n,e,r){return D(n,e,r)})),lv=(ko=u(Ou,-.5,1),Io=u(Ou,-.5,1),Ho=f(If,jo=u(Ou,-.5,1),Io,ko),Uo=f(If,jo,Io,Wo=u(Ou,.5,1)),Yo=f(If,jo,Oo=u(Ou,.5,1),ko),Go=f(If,jo,Oo,Wo),Jo=f(If,qo=u(Ou,.5,1),Io,ko),Xo=f(If,qo,Oo,ko),Qo=f(If,qo,Io,Wo),Zo=f(If,qo,Oo,Wo),Wb(function(n){if(n.b){var e=n.a,r=n.b,t=iv(u(jt,av,n));return s(Vb,f(Yb,Xb,e,r),n,t,0)}return Ub}($([f(cv,Ho,Xo,Jo),f(cv,Ho,Yo,Xo),f(cv,Uo,Qo,Zo),f(cv,Uo,Zo,Go),f(cv,Jo,Xo,Zo),f(cv,Jo,Zo,Qo),f(cv,Ho,Go,Yo),f(cv,Ho,Uo,Go),f(cv,Ho,Jo,Qo),f(cv,Ho,Qo,Uo),f(cv,Yo,Zo,Xo),f(cv,Yo,Go,Zo)])))),uv={$:0},fv=t((function(n,e,r){return{$:1,a:n,b:e,c:r}})),sv=t((function(n,e,r){var t=e.a,o=e.b,a=n(e.c),i=n(o),c=n(t),l=Kb(f(ov,c,i,a)),s={n:l,b1:Zb(c)},d={n:l,b1:Zb(i)},b={n:l,b1:Zb(a)};return u(yr,s,u(yr,d,u(yr,b,r)))})),dv=function(n){return n.B},bv=o((function(n,e,r,t){return 1===e.$||1===r.$||1===t.$?kr:Br(f(n,e.a,r.a,t.a))})),vv=4294967295>>>32-at,mv=h,pv=t((function(n,e,r){for(;;){var t=u(mv,vv&e>>>n,r);if(t.$)return u(mv,vv&e,t.a);n-=at,e=e,r=t.a}})),gv=r((function(n,e){var r=e.a,t=e.b,o=e.c,a=e.d;return 0>n||T(n,r)>-1?kr:T(n,function(n){return n>>>5<<5}(r))>-1?Br(u(mv,vv&n,a)):Br(f(pv,t,n,o))})),hv=function(n){return n.am},xv=r((function(n,e){return u(gv,n,hv(e))})),Cv=t((function(n,e,r){for(;;){var t=u(bt,Kr,n),o=t.a,a=t.b;if(0>T(ft(o),Kr))return u(pt,!0,{y:e,l:r,o:o});n=a,e=u(yr,lt(o),e),r+=1}})),Mv=function(n){return n.b?f(Cv,n,E,0):it},Pv=r((function(n,e){return!u(sc,u(mo,fc,n),e)})),Tv=r((function(n,e){var r=function(n){return n.a}(n),t=function(n){var e=n.a,t=n.b,o=n.c;return e>=0&&0>T(e,r)&&t>=0&&0>T(t,r)&&o>=0&&0>T(o,r)};return u(Pv,t,e)?{B:e,am:n}:{B:u(Eu,t,e),am:n}})),yv=t((function(n,e,r){return{$:3,a:n,b:e,c:r}}))({ds:1,dC:3,d7:4}),Lv=r((function(n,e){var r=e;return L(D(n.bD,n.bE,n.bF),D(r.bD,r.bE,r.bF))})),Dv=r((function(n,e){n:for(;;){if(-2===e.$)return kr;var r=e.c,t=e.d,o=e.e;switch(u(Lo,n,e.b)){case 0:n=n,e=t;continue n;case 1:return Br(r);default:n=n,e=o;continue n}}})),wv=f(td,0,0,0),Sv=i((function(n,e,r,t,o,a){var i=a.a,c=a.b,l=a.c,f=u(Dv,u(Lv,n,e),o);if(f.$){var s={n:wv,b1:Zb(e)},d={n:wv,b1:Zb(n)},b=l+1;return D(u(yr,D(r,l,b),u(yr,D(r,b,t),i)),u(yr,s,u(yr,d,c)),l+2)}return D(u(yr,D(r,f.a,t),i),c,l)})),Ev=a((function(n,e,r,t,o){for(;;){if(!r.b)return L(o.a,Qr(o.b));var a=r.a,i=a.a,c=a.b,l=r.b,u=n(a.c),f=n(c),s=n(i),d=t+2,v=t+1,m=n,p=e,g=l,h=t+3,x=b(Sv,u,s,d,t,e,b(Sv,f,u,v,d,e,b(Sv,s,f,t,v,e,o)));n=m,e=p,r=g,t=h,o=x}})),Nv=a((function(n,e,r,t,o){for(;;){if(!e.b)return D(t,o,r);var a=e.a,i=a.a,c=a.b,l=e.b,s=n(a.c),d=n(c),b=n(i),v=r+2,m=r+1,p=r,g=f(wo,u(Lv,b,s),v,f(wo,u(Lv,s,d),m,f(wo,u(Lv,d,b),p,o)));n=n,e=l,r+=3,t=u(yr,D(p,m,v),t),o=g}})),Fv=t((function(n,e,r){var o,a=u(Vo,(function(n){var e=n.a,r=n.b,a=n.c;return s(bv,t((function(n,e,r){return D(n,e,r)})),u(xv,e,o),u(xv,r,o),u(xv,a,o))}),dv(o=r)),i=f(It,sv(e),E,a),c=d(Nv,e,a,0,E,Co),l=d(Ev,e,c.b,a,0,D(c.a,E,c.c)),b=l.a,v=l.b,m=v.b?S(i,v):i;return f(fv,n,u(Tv,Mv(m),b),u(yv,m,b))})),$v=function(n){return{B:u(jt,(function(n){return D(3*n,3*n+1,3*n+2)}),u(qr,0,Or(n)-1)),am:Mv(Us(u(jt,(function(n){return $([n.a,n.b,n.c])}),n)))}},zv=function(n){switch(n.$){case 0:return uv;case 1:case 2:return f(Fv,n.a,$t,$v(u(jt,Jb,n.b)));case 3:return f(Fv,n.a,$t,n.b);case 4:case 5:case 6:case 7:return f(Fv,n.a,(function(n){return n.b1}),n.b);case 8:case 9:default:return uv}},_v=zv(lv),Av={$:0},Vv=Av,Rv=r((function(n,e){return{$:1,a:n,b:e}})),Bv={src:"\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        void main () {\n            gl_FragColor = texture2D(colorTexture, interpolatedUv);\n        }\n    ",attributes:{},uniforms:{colorTexture:"bN"}},kv=function(n){return{$:5,a:n}},Iv=kv(1029),jv=kv(1028),Hv=t((function(n,e,r){return 1===e?u(yr,n?Iv:jv,r):r})),Wv={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute mediump vec2 uv;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedUv = uv;\n        }\n    ",attributes:{position:"b1",uv:"K"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Uv=o((function(n,e,r,t){return u(Rv,e,l((function(e,o,a,i,c,l,u,s){return d(hd,f(Hv,i,t,s),Wv,Bv,r,{bN:n,b:a,c:o,d:l,e:e,f:c})})))})),Ov={src:"\n        precision lowp float;\n        \n        uniform lowp vec3 constantColor;\n        \n        void main () {\n            gl_FragColor = vec4(constantColor, 1.0);\n        }\n    ",attributes:{},uniforms:{constantColor:"aB"}},Yv={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{position:"b1"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Gv=o((function(n,e,r,t){return u(Rv,e,l((function(e,o,a,i,c,l,u,s){return d(hd,f(Hv,i,t,s),Yv,Ov,r,{aB:n,b:a,c:o,d:l,e:e,f:c})})))})),qv=r((function(n,e){return{$:3,a:n,b:e}})),Jv={src:"\n        precision lowp float;\n        \n        uniform lowp vec3 constantColor;\n        uniform lowp float pointRadius;\n        uniform highp mat4 sceneProperties;\n        \n        float pointAlpha(float pointRadius, vec2 pointCoord) {\n            float pointSize = 2.0 * pointRadius;\n            float x = (pointSize + 2.0) * (pointCoord.s - 0.5);\n            float y = (pointSize + 2.0) * (pointCoord.t - 0.5);\n            float r = sqrt(x * x + y * y);\n            float innerRadius = pointRadius;\n            float outerRadius = pointRadius + 1.0;\n            if (r > outerRadius) {\n                return 0.0;\n            } else if (r > innerRadius) {\n                return outerRadius - r;\n            } else {\n                return 1.0;\n            }\n        }\n        \n        void main () {\n            float supersampling = sceneProperties[3][0];\n            float alpha = pointAlpha(pointRadius * supersampling, gl_PointCoord);\n            gl_FragColor = vec4(constantColor, alpha);\n        }\n    ",attributes:{},uniforms:{constantColor:"aB",pointRadius:"b0",sceneProperties:"e"}},Xv={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform lowp float pointRadius;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            float supersampling = sceneProperties[3][0];\n            gl_PointSize = 2.0 * pointRadius * supersampling + 2.0;\n        }\n    ",attributes:{position:"b1"},uniforms:{modelMatrix:"b",modelScale:"c",pointRadius:"b0",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Qv=o((function(n,e,r,t){return u(qv,r,l((function(r,o,a,i,c,l,u,f){return d(hd,f,Xv,Jv,t,{aB:n,b:a,c:o,b0:e,d:l,e:r,f:c})})))})),Zv={src:"\n        precision mediump float;\n        \n        uniform mediump vec3 emissiveColor;\n        uniform highp mat4 sceneProperties;\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{emissiveColor:"aR",sceneProperties:"e"}},Kv=Pr,nm=a((function(n,e,r,t,o){return u(Rv,r,l((function(r,a,i,c,l,s,b,v){return d(hd,f(Hv,c,o,v),Yv,Zv,t,{aR:u(Kv,e,n),b:i,c:a,d:s,e:r,f:l})})))})),em={src:"\n        precision mediump float;\n        \n        uniform mediump vec3 emissiveColor;\n        uniform lowp float pointRadius;\n        uniform highp mat4 sceneProperties;\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        float pointAlpha(float pointRadius, vec2 pointCoord) {\n            float pointSize = 2.0 * pointRadius;\n            float x = (pointSize + 2.0) * (pointCoord.s - 0.5);\n            float y = (pointSize + 2.0) * (pointCoord.t - 0.5);\n            float r = sqrt(x * x + y * y);\n            float innerRadius = pointRadius;\n            float outerRadius = pointRadius + 1.0;\n            if (r > outerRadius) {\n                return 0.0;\n            } else if (r > innerRadius) {\n                return outerRadius - r;\n            } else {\n                return 1.0;\n            }\n        }\n        \n        void main () {\n            vec4 color = toSrgb(emissiveColor, sceneProperties);\n            float supersampling = sceneProperties[3][0];\n            float alpha = pointAlpha(pointRadius * supersampling, gl_PointCoord);\n            gl_FragColor = vec4(color.rgb, alpha);\n        }\n    ",attributes:{},uniforms:{emissiveColor:"aR",pointRadius:"b0",sceneProperties:"e"}},rm=a((function(n,e,r,t,o){return u(qv,t,l((function(t,a,i,c,l,f,s,b){return d(hd,b,Xv,em,o,{aR:u(Kv,e,n),b:i,c:a,b0:r,d:f,e:t,f:l})})))})),tm={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 materialColor;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{enabledLights:"Q",lights12:"bl",lights34:"bU",lights56:"bV",lights78:"bW",materialColor:"cA",sceneProperties:"e",viewMatrix:"f"}},om={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n        }\n    ",attributes:{normal:"n",position:"b1"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},am=o((function(n,e,r,t){return u(Rv,e,l((function(e,o,a,i,c,l,u,s){var b=u.a,v=u.b;return d(hd,f(Hv,i,t,s),om,tm,r,{Q:v,bl:b.bl,bU:b.bU,bV:b.bV,bW:b.bW,cA:n,b:a,c:o,d:l,e:e,f:c})})))})),im={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D materialColorTexture;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n            vec3 materialColor = fromSrgb(texture2D(materialColorTexture, interpolatedUv).rgb);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{enabledLights:"Q",lights12:"bl",lights34:"bU",lights56:"bV",lights78:"bW",materialColorTexture:"cB",normalMapTexture:"aY",sceneProperties:"e",useNormalMap:"a3",viewMatrix:"f"}},cm={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        attribute mediump vec2 uv;\n        attribute highp vec3 tangent;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getWorldTangent(vec3 modelTangent, vec4 modelScale, mat4 modelMatrix) {\n            return (modelMatrix * vec4(safeNormalize(modelScale.xyz * modelTangent), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = uv;\n            interpolatedTangent = getWorldTangent(tangent, modelScale, modelMatrix);\n        }\n    ",attributes:{normal:"n",position:"b1",tangent:"eu",uv:"K"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},lm=i((function(n,e,r,t,o,a){return u(Rv,t,l((function(t,i,c,l,u,s,b,v){var m=b.a,p=b.b;return d(hd,f(Hv,l,a,v),cm,im,o,{Q:p,bl:m.bl,bU:m.bU,bV:m.bV,bW:m.bW,cB:n,b:c,c:i,aY:e,d:s,e:t,a3:r,f:u})})))})),um={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D baseColorTexture;\n        uniform lowp vec4 constantBaseColor;\n        uniform mediump sampler2D roughnessTexture;\n        uniform lowp vec2 constantRoughness;\n        uniform mediump sampler2D metallicTexture;\n        uniform lowp vec2 constantMetallic;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getFloatValue(sampler2D texture, vec2 uv, vec2 constantValue) {\n            if (constantValue.y == 1.0) {\n                return constantValue.x;\n            } else {\n                vec4 textureColor = texture2D(texture, uv);\n                return dot(textureColor, vec4(0.2126, 0.7152, 0.0722, 0.0));\n            }\n        }\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 baseColor = fromSrgb(texture2D(baseColorTexture, interpolatedUv).rgb) * (1.0 - constantBaseColor.w) + constantBaseColor.rgb * constantBaseColor.w;\n            float roughness = getFloatValue(roughnessTexture, interpolatedUv, constantRoughness);\n            float metallic = getFloatValue(metallicTexture, interpolatedUv, constantMetallic);\n        \n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{baseColorTexture:"ce",constantBaseColor:"ci",constantMetallic:"cj",constantRoughness:"ck",enabledLights:"Q",lights12:"bl",lights34:"bU",lights56:"bV",lights78:"bW",metallicTexture:"cE",normalMapTexture:"aY",roughnessTexture:"c0",sceneProperties:"e",useNormalMap:"a3",viewMatrix:"f"}},fm={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 baseColor;\n        uniform lowp float roughness;\n        uniform lowp float metallic;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{baseColor:"cd",enabledLights:"Q",lights12:"bl",lights34:"bU",lights56:"bV",lights78:"bW",metallic:"cD",roughness:"c$",sceneProperties:"e",viewMatrix:"f"}},sm=i((function(n,e,r,t,o,a){return u(Rv,t,l((function(t,i,c,l,u,s,b,v){var m=b.a,p=b.b;return d(hd,f(Hv,l,a,v),om,fm,o,{cd:n,Q:p,bl:m.bl,bU:m.bU,bV:m.bV,bW:m.bW,cD:r,b:c,c:i,d:s,c$:e,e:t,f:u})})))})),dm=r((function(n,e){return{$:1,a:n,b:e}})),bm=r((function(n,e){return e.$?L(e.a.A,1):L(n,0)})),vm=s(Zs,0,0,0,0),mm=r((function(n,e){var r;return e.$?L(e.a.A,vm):L(n,s(Zs,Zd(r=e.a),Kd(r),nb(r),1))})),pm=r((function(n,e){var r,t=L(n,e);return t.a.$?u(dm,L(r=t.a.a.A,vm),u(bm,r,e)):t.b.$?u(dm,u(mm,r=t.b.a.A,n),u(bm,r,e)):{$:0,a:t.a.a}})),gm=t((function(n,e,r){return{$:0,a:n,b:e,c:r}})),hm=o((function(n,e,r,t){return{$:1,a:n,b:e,c:r,d:t}})),xm=o((function(n,e,r,t){return{$:0,a:n,b:e,c:r,d:t}})),Cm=u(Md,0,0),Mm=r((function(n,e){return e.$?L(e.a.A,Cm):L(n,u(Md,e.a,1))})),Pm=o((function(n,e,r,t){var o,a=s(xm,n,e,r,t);return a.a.$?s(hm,L(o=a.a.a.A,vm),u(Mm,o,e),u(Mm,o,r),u(bm,o,t)):a.b.$?s(hm,u(mm,o=a.b.a.A,n),L(o,Cm),u(Mm,o,r),u(bm,o,t)):a.c.$?s(hm,u(mm,o=a.c.a.A,n),u(Mm,o,e),L(o,Cm),u(bm,o,t)):a.d.$?s(hm,u(mm,o=a.d.a.A,n),u(Mm,o,e),u(Mm,o,r),L(o,1)):f(gm,a.a.a,a.b.a,a.c.a)})),Tm={src:"\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        uniform mediump float backlight;\n        uniform highp mat4 sceneProperties;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            vec3 emissiveColor = fromSrgb(texture2D(colorTexture, interpolatedUv).rgb) * backlight;\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{backlight:"ca",colorTexture:"bN",sceneProperties:"e"}},ym=a((function(n,e,r,t,o){return u(Rv,r,l((function(r,a,i,c,l,u,s,b){return d(hd,f(Hv,c,o,b),Wv,Tm,t,{ca:e,bN:n,b:i,c:a,d:u,e:r,f:l})})))})),Lm={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        attribute mediump vec2 uv;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = uv;\n            interpolatedTangent = vec3(0.0, 0.0, 0.0);\n        }\n    ",attributes:{normal:"n",position:"b1",uv:"K"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Dm=o((function(n,e,r,t){return u(Rv,e,l((function(e,o,a,i,c,l,u,s){var b=u.a,v=u.b;return d(hd,f(Hv,i,t,s),Lm,im,r,{Q:v,bl:b.bl,bU:b.bU,bV:b.bV,bW:b.bW,cB:n,b:a,c:o,aY:n,d:l,e:e,a3:0,f:c})})))})),wm=function(n){return e(9,n,(function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return n(e,r,t,o,a,i,c,l,u)}}}}}}}}}))}((function(n,e,r,t,o,a,i,c,s){return u(Rv,i,l((function(i,l,u,b,v,m,p,g){var h=p.a,x=p.b;return d(hd,f(Hv,b,s,g),Lm,um,c,{ce:n,ci:e,cj:a,ck:t,Q:x,bl:h.bl,bU:h.bU,bV:h.bV,bW:h.bW,cE:o,b:u,c:l,aY:n,d:m,c0:r,e:i,a3:0,f:v})})))})),Sm=t((function(n,e,r){return r>.5?e+(1-r)*(n-e):n+r*(e-n)})),Em=function(n){return f(If,function(n){return f(Sm,n.d3,n.d0,.5)}(n),function(n){return f(Sm,n.d4,n.d1,.5)}(n),function(n){return f(Sm,n.d5,n.d2,.5)}(n))},Nm=function(n){var e=Id(n),r=e.a,t=e.b,o=e.c;return{eM:Em(n),e0:r/2,e1:t/2,e2:o/2}},Fm=r((function(n,e){switch(n.$){case 0:if(n.b.$){var r=n.b.a.A;switch(e.$){case 0:case 1:case 2:case 3:case 4:return Vv;case 5:case 6:case 7:return o=e.c,a=e.d,s(Uv,r,Nm(A=e.a),o,a);case 8:case 9:default:return Vv}}else{var t=n.b.a;switch(e.$){case 0:return Vv;case 1:var o=e.c,a=e.d;return s(Gv,t,Nm(A=e.a),o,a);case 2:case 3:case 4:return o=e.c,a=e.d,s(Gv,t,Nm(A=e.a),o,a);case 5:case 6:case 7:return o=e.c,a=e.d,s(Gv,t,Nm(A=e.a),o,a);case 8:case 9:return o=e.c,s(Gv,t,Nm(A=e.a),o,0);default:return o=e.d,s(Qv,t,e.b,Nm(A=e.a),o)}}case 1:if(n.b.$)switch(r=n.b.a.A,c=n.c,e.$){case 0:case 1:case 2:case 3:case 4:return Vv;case 5:case 6:case 7:return o=e.c,a=e.d,d(ym,r,c,Nm(A=e.a),o,a);case 8:case 9:default:return Vv}else{var i=n.b.a,c=n.c;switch(e.$){case 0:return Vv;case 1:case 2:case 3:case 4:case 5:case 6:case 7:return o=e.c,a=e.d,d(nm,i,c,Nm(A=e.a),o,a);case 8:case 9:return o=e.c,d(nm,i,c,Nm(A=e.a),o,0);default:return o=e.d,d(rm,i,c,e.b,Nm(A=e.a),o)}}case 2:var v=u(pm,n.b,n.c);if(v.$){var m=v.a.a,p=v.b,g=p.a,h=p.b;switch(e.$){case 0:case 1:case 2:case 3:case 4:case 5:return Vv;case 6:return o=e.c,C=e.d,s(Dm,m,Nm(A=e.a),o,C);case 7:return o=e.c,C=e.d,b(lm,m,g,h,Nm(A=e.a),o,C);case 8:case 9:default:return Vv}}else{var x=v.a;switch(e.$){case 0:case 1:return Vv;case 2:o=e.c;var C=e.d;return s(am,x,Nm(A=e.a),o,C);case 3:return Vv;case 4:return o=e.c,C=e.d,s(am,x,Nm(A=e.a),o,C);case 5:return Vv;case 6:case 7:return o=e.c,C=e.d,s(am,x,Nm(A=e.a),o,C);case 8:case 9:default:return Vv}}default:var M=s(Pm,n.b,n.c,n.d,n.e);if(M.$){var P=M.a,T=P.a,y=P.b,L=M.b,D=L.a,w=L.b,S=M.c,E=S.a,N=S.b,F=M.d;switch(g=F.a,h=F.b,e.$){case 0:case 1:case 2:case 3:case 4:case 5:return Vv;case 6:return o=e.c,a=e.d,function(n,e,r,t,o,a,i,c,l,u){return 9===n.a?n.f(e,r,t,o,a,i,c,l,u):n(e)(r)(t)(o)(a)(i)(c)(l)(u)}(wm,T,y,D,w,E,N,Nm(A=e.a),o,a);case 7:return A=e.a,o=e.c,a=e.d,function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(s){return function(b){return function(v){return u(Rv,s,l((function(l,u,s,m,p,g,h,x){var C=h.a,M=h.b;return d(hd,f(Hv,m,v,x),cm,um,b,{ce:n,ci:e,cj:a,ck:t,Q:M,bl:C.bl,bU:C.bU,bV:C.bV,bW:C.bW,cE:o,b:s,c:u,aY:i,d:g,c0:r,e:l,a3:c,f:p})})))}}}}}}}}}}}(T)(y)(D)(w)(E)(N)(g)(h)(Nm(A))(o)(a);case 8:case 9:default:return Vv}}else{var $=M.a,z=M.b,_=M.c;switch(e.$){case 0:case 1:return Vv;case 2:return o=e.c,a=e.d,b(sm,$,z,_,Nm(A=e.a),o,a);case 3:return Vv;case 4:return o=e.c,a=e.d,b(sm,$,z,_,Nm(A=e.a),o,a);case 5:return Vv;case 6:return o=e.c,a=e.d,b(sm,$,z,_,Nm(A=e.a),o,a);case 7:var A;return o=e.c,a=e.d,b(sm,$,z,_,Nm(A=e.a),o,a);case 8:case 9:default:return Vv}}}})),$m=function(n){return n.bD},zm=function(n){return n.bE},_m=function(n){return n.bF},Am=function(n){var e=n,r=_m(e.dh),t=zm(e.dh),o=$m(e.dh),a=_m(e.dg),i=zm(e.dg),c=$m(e.dg),l=_m(e.df),u=zm(e.df),f=$m(e.df);return f*i*r+u*a*o+l*c*t-l*i*o-u*c*r-f*a*t>0},Vm=r((function(n,e){return{$:5,a:n,b:e}})),Rm=r((function(n,e){var r=e;switch(r.$){case 0:return Vv;case 5:var t=r.b;return u(Vm,u(ad,r.a,n),t);case 1:case 3:case 2:default:return u(Vm,n,r)}})),Bm=r((function(n,e){return u(Rm,function(n){var e=Ql(n),r=ou(n),t=tu(n),o=ru(n);return{dD:Am(n),p:o.bD,q:o.bE,r:o.bF,s:t.bD,t:t.bE,u:t.bF,v:r.bD,w:r.bE,x:r.bF,G:e.bD,H:e.bE,I:e.bF,b5:1}}(n),e)})),km=function(n){return{$:2,a:n}},Im=r((function(n,e){var r=n.a,t=n.b,o=n.c,a=e.eM;return{eM:{bD:r*a.bD,bE:t*a.bE,bF:o*a.bF},e0:r*e.e0,e1:t*e.e1,e2:o*e.e2}})),jm=function(n){return function(e){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){var f,s,d={bD:(s=t)[0],bE:s[1],bF:s[2],ez:s[3]},b=(f={ez:d.ez,bD:d.bD*n.a,bE:d.bE*n.b,bF:d.bF*n.c},new Float64Array([f.bD,f.bE,f.bF,f.ez]));return m(e,r,b,o,a,i,c,l,u)}}}}}}}}}},Hm=r((function(n,e){switch(e.$){case 0:return Av;case 5:return u(Vm,e.a,u(Hm,n,e.b));case 1:var r=e.b;return u(Rv,u(Im,n,e.a),u(jm,n,r));case 3:return e;case 2:return km(u(jm,n,r=e.a));default:var t=e.a;return eb(u(jt,Hm(n),t))}})),Wm=r((function(n,e){return u(Hm,n,e)})),Um={src:"\n        precision lowp float;\n        \n        void main () {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        }\n    ",attributes:{},uniforms:{}},Om=f(Ld,{cz:0,cY:0,de:15},{be:Ed,bt:md,bG:Ed,bH:7683},{be:Ed,bt:md,bG:Ed,bH:7682}),Ym=f(Ld,{cz:0,cY:0,de:15},{be:Ed,bt:md,bG:Ed,bH:7682},{be:Ed,bt:md,bG:Ed,bH:7683}),Gm=r((function(n,e){return u(yr,n?Ym:Om,e)})),qm={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 shadowVertexPosition(vec3 position, vec3 normal, mat4 shadowLight, vec4 modelScale, mat4 modelMatrix, mat4 viewMatrix, mat4 projectionMatrix, mat4 sceneProperties) {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            vec3 worldNormal = getWorldNormal(normal, vec4(modelScale.xyz, 1.0), modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 directionToLight = getDirectionToLight(worldPosition.xyz, xyz_type, rgb_parameter);\n            vec3 offset = vec3(0.0, 0.0, 0.0);\n            float sceneDiameter = sceneProperties[3][1];\n            if (dot(directionToLight, worldNormal) <= 0.0) {\n                offset = -sceneDiameter * directionToLight;\n            } else {\n                offset = -0.001 * sceneDiameter * directionToLight;\n            }\n            vec4 offsetPosition = worldPosition + vec4(offset, 0.0);\n            return projectionMatrix * (viewMatrix * offsetPosition);\n        }\n        \n        void main () {\n            gl_Position = shadowVertexPosition(\n                position,\n                normal,\n                shadowLight,\n                modelScale,\n                modelMatrix,\n                viewMatrix,\n                projectionMatrix,\n                sceneProperties\n            );\n        }\n    ",attributes:{normal:"n",position:"b1"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"b6",viewMatrix:"f"}},Jm=function(n){var e=function(n){if(n.$){var e=n.c;return Br(l((function(n,r,t,o,a,i,c,l){return d(hd,u(Gm,o,l),qm,Um,e,{b:t,c:r,d:i,e:n,b6:c,f:a})})))}return kr}(n);return e.$?Vv:km(e.a)},Xm=o((function(n,e,r,t){var o,a=u(Fm,r,lv),i=(o=L(n,e)).a?o.b?tb($([a,Jm(_v)])):a:o.b?Jm(_v):Vv,c=ts(t),l=c.a,f=c.b,s=c.c;return u(Bm,rs(t),u(Wm,D(l,f,s),i))})),Qm=r((function(n,e){return s(Xm,!0,!0,n,e)})),Zm=function(n){return{$:0,a:n}},Km=r((function(n,e){return{$:0,a:n,b:e}})),np=function(n){return Zl(n)},ep=r((function(n,e){var r=n.b1;return u(yr,{n:Kb(n.n),b1:Zb(r)},e)})),rp=c((function(n,e,r,t,o,a,i){for(;;){if(!i.b)return qb({d0:e,d1:t,d2:a,d3:n,d4:r,d5:o});var c=i.a,l=i.b,f=nb(c.b1),s=Kd(c.b1),d=Zd(c.b1);n=u(Es,n,d),e=u(st,e,d),r=u(Es,r,s),t=u(st,t,s),o=u(Es,o,f),a=u(st,a,f),i=l}})),tp=r((function(n,e){var r=nb(n.b1),t=Kd(n.b1),o=Zd(n.b1);return v(rp,o,o,t,t,r,r,e)})),op=r((function(n,e){var r=n.dg,t=n.df;return{bD:e.bD*t.bD+e.bE*r.bD,bE:e.bD*t.bE+e.bE*r.bE,bF:e.bD*t.bF+e.bE*r.bF}})),ap=function(n){return Kl(n)},ip=function(n){return 6.283185307179586*n},cp=Mu({cJ:Cu,df:Tu,dg:_s}),lp=(Ko=u(nf,72,ip(1)),na=yu,ea=rf,ta=f(If,0,0,ra=u(Ou,.5,1)),aa=f(If,0,0,oa=u(Ou,-.5,1)),Wb(function(n){var e=f(Dr,ep,E,hv(n));if(e.b){var r=e.a,t=e.b,o=u(yv,e,dv(n));return s(Bb,u(tp,r,t),n,o,0)}return Ub}($v(Us(u(jt,(function(n){var e=u(Ou,n,Ko),r=u(op,cp,bf(e)),t=u(Ou,np(e),1),o=u(Ou,ap(e),1),a=f(If,t,o,ra),i=f(If,t,o,oa),c=u(Ou,u(nc,72,n+1),Ko),l=u(op,cp,bf(c)),s=u(Ou,np(c),1),d=u(Ou,ap(c),1),b=f(If,s,d,oa),v=f(If,s,d,ra);return $([D({n:ea,b1:aa},{n:ea,b1:b},{n:ea,b1:i}),D({n:r,b1:i},{n:l,b1:b},{n:l,b1:v}),D({n:r,b1:i},{n:l,b1:v},{n:r,b1:a}),D({n:na,b1:ta},{n:na,b1:a},{n:na,b1:v})])}),u(qr,0,71))))))),up=zv(lp),fp=o((function(n,e,r,t){var o,a=function(n){var e,r,t=cu(n),o=L(r=function(n){var e=n,r=ic(e.bF),t=ic(e.bE),o=ic(e.bD);if(1>T(o,t)){if(1>T(o,r)){var a=Ku(e.bF*e.bF+e.bE*e.bE);return{bD:0,bE:-e.bF/a,bF:e.bE/a}}return a=Ku(e.bE*e.bE+e.bD*e.bD),{bD:-e.bE/a,bE:e.bD/a,bF:0}}return 1>T(t,r)?(a=Ku(e.bF*e.bF+e.bD*e.bD),{bD:e.bF/a,bE:0,bF:-e.bD/a}):(a=Ku(e.bD*e.bD+e.bE*e.bE),{bD:-e.bE/a,bE:e.bD/a,bF:0})}(e=t),{bD:e.bE*r.bF-e.bF*r.bE,bE:e.bF*r.bD-e.bD*r.bF,bF:e.bD*r.bE-e.bE*r.bD}),a=o.a,i=o.b;return{cJ:Yu(n),df:a,dg:i,dh:t}}(function(n){return n.k}(t)),i=u(Fm,r,lp),c=(o=L(n,e)).a?o.b?tb($([i,Jm(up)])):i:o.b?Jm(up):Vv,l=function(n){return n.fp}(t),f=function(n){return n.fb}(t);return u(Bm,a,u(Wm,D(l,l,f),c))})),sp=r((function(n,e){return s(fp,!0,!0,n,e)})),dp={src:"\n        precision highp float;\n        \n        attribute lowp float triangleVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 triangleVertexPositions;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleVertex), triangleVertexPositions, position, normal);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{triangleVertex:"c7"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",triangleVertexPositions:"bz",viewMatrix:"f"}},bp={src:"\n        precision highp float;\n        \n        attribute lowp float triangleVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 triangleVertexPositions;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleVertex), triangleVertexPositions, position, normal);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n        }\n    ",attributes:{triangleVertex:"c7"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",triangleVertexPositions:"bz",viewMatrix:"f"}},vp=function(n){var e=n.a,r=n.b,t=n.c;return id({dL:e.bD,dM:r.bD,dN:t.bD,dO:0,dP:e.bE,dQ:r.bE,dR:t.bE,dS:0,dT:e.bF,dU:r.bF,dV:t.bF,dW:0,dX:0,dY:0,dZ:0,d_:0})},mp=iv($([D({c7:0},{c7:1},{c7:2})])),pp=r((function(n,e){var r=Xb(e),t=Nm(r);switch(n.$){case 0:if(n.b.$)return Vv;var o=n.b.a;return u(Rv,t,l((function(n,r,t,a,i,c,l,u){return d(hd,f(Hv,a,0,u),dp,Ov,mp,{aB:o,b:t,c:r,d:c,e:n,bz:vp(e),f:i})})));case 1:if(n.b.$)return Vv;var a=n.b.a,i=n.c;return u(Rv,t,l((function(n,r,t,o,c,l,s,b){return d(hd,f(Hv,o,0,b),dp,Zv,mp,{aR:u(Kv,i,a),b:t,c:r,d:l,e:n,bz:vp(e),f:c})})));case 2:var c=u(pm,n.b,n.c);if(c.$)return Vv;var b=c.a;return u(Rv,t,l((function(n,r,t,o,a,i,c,l){var u=c.a,s=c.b;return d(hd,f(Hv,o,0,l),bp,tm,mp,{Q:s,bl:u.bl,bU:u.bU,bV:u.bV,bW:u.bW,cA:b,b:t,c:r,d:i,e:n,bz:vp(e),f:a})})));default:var v=s(Pm,n.b,n.c,n.d,n.e);if(v.$)return Vv;var m=v.a,p=v.b,g=v.c;return u(Rv,t,l((function(n,r,t,o,a,i,c,l){var u=c.a,s=c.b;return d(hd,f(Hv,o,0,l),bp,fm,mp,{cd:m,Q:s,bl:u.bl,bU:u.bU,bV:u.bV,bW:u.bW,cD:g,b:t,c:r,d:i,c$:p,e:n,bz:vp(e),f:a})})))}})),gp=(ia=$([{a2:u(Md,0,1)},{a2:u(Md,1,1)},{a2:u(Md,2,1)},{a2:u(Md,0,-1)},{a2:u(Md,1,-1)},{a2:u(Md,2,-1)}]),ca=$([D(0,1,2),D(3,5,4),D(3,4,1),D(3,1,0),D(4,5,2),D(4,2,1),D(5,3,0),D(5,0,2)]),u(yv,ia,ca)),hp={src:"\n        precision highp float;\n        \n        attribute highp vec2 triangleShadowVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        uniform highp mat4 triangleVertexPositions;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        \n        void getTriangleVertex(int triangleVertexIndex, mat4 triangleVertexPositions, out vec3 position, out vec3 normal) {\n            vec3 p1 = triangleVertexPositions[0].xyz;\n            vec3 p2 = triangleVertexPositions[1].xyz;\n            vec3 p3 = triangleVertexPositions[2].xyz;\n            normal = normalize(cross(p2 - p1, p3 - p2));\n            float t1 = float(triangleVertexIndex == 0);\n            float t2 = float(triangleVertexIndex == 1);\n            float t3 = float(triangleVertexIndex == 2);\n            position = t1 * p1 + t2 * p2 + t3 * p3;\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 shadowVertexPosition(vec3 position, vec3 normal, mat4 shadowLight, vec4 modelScale, mat4 modelMatrix, mat4 viewMatrix, mat4 projectionMatrix, mat4 sceneProperties) {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            vec3 worldNormal = getWorldNormal(normal, vec4(modelScale.xyz, 1.0), modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 directionToLight = getDirectionToLight(worldPosition.xyz, xyz_type, rgb_parameter);\n            vec3 offset = vec3(0.0, 0.0, 0.0);\n            float sceneDiameter = sceneProperties[3][1];\n            if (dot(directionToLight, worldNormal) <= 0.0) {\n                offset = -sceneDiameter * directionToLight;\n            } else {\n                offset = -0.001 * sceneDiameter * directionToLight;\n            }\n            vec4 offsetPosition = worldPosition + vec4(offset, 0.0);\n            return projectionMatrix * (viewMatrix * offsetPosition);\n        }\n        \n        void main () {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            getTriangleVertex(int(triangleShadowVertex.x), triangleVertexPositions, position, normal);\n            normal *= triangleShadowVertex.y;\n            gl_Position = shadowVertexPosition(\n                position,\n                normal,\n                shadowLight,\n                modelScale,\n                modelMatrix,\n                viewMatrix,\n                projectionMatrix,\n                sceneProperties\n            );\n        }\n    ",attributes:{triangleShadowVertex:"a2"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"b6",triangleVertexPositions:"bz",viewMatrix:"f"}},xp=function(n){return km(l((function(e,r,t,o,a,i,c,l){return d(hd,u(Gm,o,l),hp,Um,gp,{b:t,c:r,d:i,e:e,b6:c,bz:vp(n),f:a})})))},Cp=o((function(n,e,r,t){var o=u(pp,r,t),a=L(n,e);return a.a?a.b?tb($([o,xp(t)])):o:a.b?xp(t):Vv})),Mp=r((function(n,e){return s(Cp,!0,!0,n,e)})),Pp=r((function(n,e){var r=Cf(e),t=Cf(n),o=xf(e),a=xf(n),i=gf(e),c=gf(n);return{d0:u(Od,c,i),d1:u(Od,a,o),d2:u(Od,t,r),d3:u(Yd,c,i),d4:u(Yd,a,o),d5:u(Yd,t,r)}})),Tp={src:"\n        precision highp float;\n        \n        attribute lowp float lineSegmentVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp vec3 lineSegmentStartPoint;\n        uniform highp vec3 lineSegmentEndPoint;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = (1.0 - lineSegmentVertex) * lineSegmentStartPoint + lineSegmentVertex * lineSegmentEndPoint;\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{lineSegmentVertex:"dK"},uniforms:{lineSegmentEndPoint:"dI",lineSegmentStartPoint:"dJ",modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},yp=r((function(n,e){return{$:1,a:n,b:e}}))({ds:2,dC:0,d7:1})($([L({dK:0},{dK:1})])),Lp=r((function(n,e){var r,t=u(Pp,(r=e).a,r.b),o=Nm(t),a=e.a,i=e.b;switch(n.$){case 0:if(n.b.$)return Vv;var c=n.b.a;return u(Rv,o,l((function(n,e,r,t,o,l,u,f){return d(hd,f,Tp,Ov,yp,{aB:c,dI:Zb(i),dJ:Zb(a),b:r,c:e,d:l,e:n,f:o})})));case 1:if(n.b.$)return Vv;c=n.b.a;var f=n.c;return u(Rv,o,l((function(n,e,r,t,o,l,s,b){return d(hd,b,Tp,Zv,yp,{aR:u(Kv,f,c),dI:Zb(i),dJ:Zb(a),b:r,c:e,d:l,e:n,f:o})})));case 2:default:return Vv}})),Dp=r((function(n,e){return u(Lp,n,e)})),wp=t((function(n,e,r){return{$:2,a:n,b:e,c:r}})),Sp=function(n){return f(yb,0,1,n>.04045?u(Fi,(n+.055)/1.055,2.4):n/12.92)},Ep=function(n){return f(wp,0,Zm(function(n){var e=tc(n),r=e.cn,t=e.cf;return f(td,Sp(e.cX),Sp(r),Sp(t))}(n)),Zm(0))},Np=r((function(n,e){return n/e})),Fp=a((function(n,e,r,t,o){for(;;){var a=t(e/r),i=u(yr,a,o);if(M(e,n))return i;n=n,e-=1,r=r,t=t,o=i}})),$p=r((function(n,e){return 1>n?E:d(Fp,0,n,n,e,E)})),zp=r((function(n,e){var r=n.b1,t=n.K,o=t.a,a=t.b;return u(yr,{n:Kb(n.n),b1:Zb(r),K:u(Md,o,a)},e)})),_p=r((function(n,e){var r=n,t=e,o=Zl(t);return{bD:o*Zl(r),bE:o*Kl(r),bF:Kl(t)}})),Ap=(la=u(qr,0,71),ua=u($p,72,u(Sm,0,ip(1))),fa=rt(36),sa=u(qr,0,fa-1),da=u($p,fa,u(Sm,Yl(90),Yl(-90))),ba=Mv(Us(u(jt,(function(n){return u(jt,(function(e){return{n:u(_p,n,e),b1:f(If,u(Ou,np(e)*np(n),1),u(Ou,np(e)*ap(n),1),u(Ou,ap(e),1)),K:L(u(Np,n,ip(1)),u(Np,u(qd,Yl(90),e),Yl(180)))}}),da)}),ua))),va=r((function(n,e){return n*(fa+1)+e})),ma=Us(u(jt,(function(n){return Us(u(jt,(function(e){var r=u(va,n+1,e),t=u(va,n,e),o=u(va,n+1,e+1),a=u(va,n,e+1);return $([D(a,o,r),D(a,r,t)])}),sa))}),la)),Wb(function(n){var e=f(Dr,zp,E,hv(n));if(e.b){var r=e.a,t=e.b,o=u(yv,e,dv(n));return s(kb,u(tp,r,t),n,o,0)}return Ub}(u(Tv,ba,ma)))),Vp=r((function(n,e){for(;;){var r=u(nc,144,2*n+3),t=u(nc,144,2*n+2),o=2*n+1,a=2*n,i=u(yr,D(144,a,t),u(yr,D(a,r,t),u(yr,D(a,o,r),u(yr,D(o,145,r),e))));if(!n)return i;n-=1,e=i}})),Rp=t((function(n,e,r){return r>.5?e+(1-r)*(n-e):n+r*(e-n)})),Bp=(pa=u(r((function(n,e){for(;;){var r=f(Rp,0,6.283185307179586,n/72),t=u(yr,{bJ:r,bZ:0,b4:1},u(yr,{bJ:r,bZ:1,b4:1},e));if(!n)return t;n-=1,e=t}})),71,$([{bJ:0,bZ:0,b4:0},{bJ:0,bZ:1,b4:0}])),u(yv,pa,u(Vp,71,E))),kp={src:"\n        precision highp float;\n        \n        attribute highp float angle;\n        attribute highp float offsetScale;\n        attribute highp float radiusScale;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const lowp float kPerspectiveProjection = 0.0;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec3 perpendicularTo(vec3 d) {\n            float absX = abs(d.x);\n            float absY = abs(d.y);\n            float absZ = abs(d.z);\n            if (absX <= absY) {\n                if (absX <= absZ) {\n                    float scale = 1.0 / length(d.zy);\n                    return vec3(0.0, -d.z * scale, d.y * scale);\n                } else {\n                    float scale = 1.0 / length(d.xy);\n                    return vec3(-d.y * scale, d.x * scale, 0.0);\n                }\n            } else {\n                if (absY <= absZ) {\n                    float scale = 1.0 / length(d.xz);\n                    return vec3(d.z * scale, 0.0, -d.x * scale);\n                } else {\n                    float scale = 1.0 / length(d.xy);\n                    return vec3(-d.y * scale, d.x * scale, 0.0);\n                }\n            }\n        }\n        \n        void main () {\n            vec4 worldCenter = getWorldPosition(vec3(0.0, 0.0, 0.0), modelScale, modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 zDirection = getDirectionToLight(worldCenter.xyz, xyz_type, rgb_parameter);\n            vec3 xDirection = perpendicularTo(zDirection);\n            vec3 yDirection = cross(zDirection, xDirection);\n            float r = modelScale.x;\n            float adjustedRadius = r;\n            float zOffset = 0.0;\n            if (xyz_type.w == kPointLight) {\n                float distanceToLight = length(xyz_type.xyz - worldCenter.xyz);\n                float rSquared = r * r;\n                zOffset = rSquared / distanceToLight;\n                float zSquared = zOffset * zOffset;\n                adjustedRadius = sqrt(rSquared - zSquared) * radiusScale;\n            }\n            vec3 worldPosition =\n                worldCenter.xyz\n                    + zDirection * zOffset\n                    + xDirection * adjustedRadius * cos(angle)\n                    + yDirection * adjustedRadius * sin(angle);\n            vec3 directionToLight = getDirectionToLight(worldPosition, xyz_type, rgb_parameter);\n            float sceneDiameter = sceneProperties[3][1];\n            vec3 offset = -sceneDiameter * offsetScale * directionToLight;\n            vec4 offsetPosition = vec4(worldPosition + offset, 1.0);\n            gl_Position = projectionMatrix * (viewMatrix * offsetPosition);\n        }\n    ",attributes:{angle:"bJ",offsetScale:"bZ",radiusScale:"b4"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"b6",viewMatrix:"f"}},Ip=function(){return km(l((function(n,e,r,t,o,a,i,c){return d(hd,u(Gm,!0,c),kp,Um,Bp,{aB:f(td,0,0,1),b:r,c:e,d:a,e:n,b6:i,f:o})})))},jp=r((function(n,e){return u(Rm,function(n){return{dD:!0,p:1,q:0,r:0,s:0,t:1,u:0,v:0,w:0,x:1,G:n.bD,H:n.bE,I:n.bF,b5:1}}(n),e)})),Hp=o((function(n,e,r,t){var o,a=u(Fm,r,Ap),i=(o=L(n,e)).a?o.b?tb($([a,Ip()])):a:o.b?Ip():Vv,c=fs(t);return u(jp,u(ev,Cu,us(t)),u(Wm,D(c,c,c),i))})),Wp=r((function(n,e){return s(Hp,!0,!0,n,e)})),Up=function(n){switch(n.$){case 0:var e=n.b;return $([u(Qm,Ep(n.a),e)]);case 1:var r=n.b;return $([u(Mp,Ep(n.a),r)]);case 3:var t=n.b;return $([u(Wp,Ep(n.a),t)]);case 2:var o=n.b;return $([u(sp,Ep(n.a),o)]);case 4:var a=n.b;return $([u(Dp,(i=n.a,u(Km,0,Zm(function(n){var e=tc(n);return f(td,e.cX,e.cn,e.cf)}(i)))),a)]);default:return u(Os,Up,n.a)}var i},Op=r((function(n,e){return function(n){var e,r=u(Cb,n.ft,{cg:wb,eQ:n.fA,cp:8e4}),t=Tb({cg:Db,cp:2e4,b8:n.b8}),o=Tb({cg:xb,cp:15e3,b8:af(n.b8)}),a=f(Ab,r,t,o);return function(n){return u(hb,{eB:n.eB,dk:n.dk,eJ:n.eJ,$7:n.$7,dr:n.dr},$([{dv:n.dv,eX:n.eX,fd:n.fd,fD:n.fD,fI:n.fI}]))}({eB:(e=n.cl,{$:2,a:e}),dk:n.dk,eJ:n.eJ,$7:n.$7,dr:n.dr,dv:n.dv,eX:1.2*u(Fi,2,15),fd:a,fD:Mb,fI:xb})}({dk:n.eG,eJ:n.eJ,$7:.005,cl:n.cl,dr:L($i(n._.dd),$i(n._.co)),dv:(r=e,u(Os,Up,r)),ft:!0,fA:u(_p,n.fz,n.fB),b8:Lu});var r})),Yp=r((function(n,e){return u(Op,{eG:u(qf,"background color",n),eJ:wu(n),cl:n.cl,_:n._,fz:u(Ol,"sunlight azimuth",n),fB:u(Ol,"sunlight elevation",n)},$([ws(n),u(Bs,n,e)]))}));ga={Main:{init:s($l,r((function(n,e){return u(wt,$([u(Xc,"width","100%")]),$([$f,u(Yp,n,e)]))})),Nf,Hl,(function(){return{aI:zl,bC:Vl}}))(u(Ct,(function(n){return Lt({cl:n})}),u(Mt,"devicePixelRatio",Pt)))(0)}},n.Elm?function n(e,r){for(var t in r)t in e?"init"==t?C(6):n(e[t],r[t]):e[t]=r[t]}(n.Elm,ga):n.Elm=ga}(n);const e=n.Elm.Main.init({node:document.getElementById("elm-node"),flags:{devicePixelRatio:window.devicePixelRatio}});function r(n){const e=[];for(let r=0;r<n.length;r++)e.push({identifier:n[r].identifier,pageX:n[r].pageX,pageY:n[r].pageY});return e}window.addEventListener("touchstart",(n=>{e.ports.touchStart.send(r(n.changedTouches))})),window.addEventListener("touchmove",(n=>{e.ports.touchMove.send(r(n.changedTouches))})),window.addEventListener("touchend",(n=>{e.ports.touchEnd.send(r(n.changedTouches))})),window.addEventListener("touchcancel",(n=>{e.ports.touchCancel.send(r(n.changedTouches))}))}();
//# sourceMappingURL=index.d92fd9ab.js.map
